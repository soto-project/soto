//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS SNS service.
///
/// Amazon Simple Notification Service Amazon Simple Notification Service (Amazon SNS) is a web service that enables you to build distributed web-enabled applications. Applications can use Amazon SNS to easily push real-time notification messages to interested subscribers over multiple delivery protocols. For more information about this product see the Amazon SNS product page. For detailed information about Amazon SNS features and their associated API calls, see the Amazon SNS Developer Guide.  For information on the permissions you need to use this API, see Identity and access management in Amazon SNS in the Amazon SNS Developer Guide.  We also provide SDKs that enable you to access Amazon SNS from your preferred programming language. The SDKs contain functionality that automatically takes care of tasks such as: cryptographically signing your service requests, retrying requests, and handling error responses. For a list of available SDKs, go to Tools for Amazon Web Services.
public struct SNS: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the SNS client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "SNS",
            serviceIdentifier: "sns",
            serviceProtocol: .query,
            apiVersion: "2010-03-31",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: SNSErrorType.self,
            xmlNamespace: "http://sns.amazonaws.com/doc/2010-03-31/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "sns.af-south-1.api.aws",
            "ap-east-1": "sns.ap-east-1.api.aws",
            "ap-northeast-1": "sns.ap-northeast-1.api.aws",
            "ap-northeast-2": "sns.ap-northeast-2.api.aws",
            "ap-northeast-3": "sns.ap-northeast-3.api.aws",
            "ap-south-1": "sns.ap-south-1.api.aws",
            "ap-south-2": "sns.ap-south-2.api.aws",
            "ap-southeast-1": "sns.ap-southeast-1.api.aws",
            "ap-southeast-2": "sns.ap-southeast-2.api.aws",
            "ap-southeast-3": "sns.ap-southeast-3.api.aws",
            "ap-southeast-4": "sns.ap-southeast-4.api.aws",
            "ap-southeast-5": "sns.ap-southeast-5.api.aws",
            "ap-southeast-7": "sns.ap-southeast-7.api.aws",
            "ca-central-1": "sns.ca-central-1.api.aws",
            "ca-west-1": "sns.ca-west-1.api.aws",
            "cn-north-1": "sns.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "sns.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "sns.eu-central-1.api.aws",
            "eu-central-2": "sns.eu-central-2.api.aws",
            "eu-north-1": "sns.eu-north-1.api.aws",
            "eu-south-1": "sns.eu-south-1.api.aws",
            "eu-south-2": "sns.eu-south-2.api.aws",
            "eu-west-1": "sns.eu-west-1.api.aws",
            "eu-west-2": "sns.eu-west-2.api.aws",
            "eu-west-3": "sns.eu-west-3.api.aws",
            "il-central-1": "sns.il-central-1.api.aws",
            "me-central-1": "sns.me-central-1.api.aws",
            "me-south-1": "sns.me-south-1.api.aws",
            "mx-central-1": "sns.mx-central-1.api.aws",
            "sa-east-1": "sns.sa-east-1.api.aws",
            "us-east-1": "sns.us-east-1.api.aws",
            "us-east-2": "sns.us-east-2.api.aws",
            "us-west-1": "sns.us-west-1.api.aws",
            "us-west-2": "sns.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "ca-west-1": "sns-fips.ca-west-1.amazonaws.com",
            "us-east-1": "sns-fips.us-east-1.amazonaws.com",
            "us-east-2": "sns-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "sns.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "sns.us-gov-west-1.amazonaws.com",
            "us-west-1": "sns-fips.us-west-1.amazonaws.com",
            "us-west-2": "sns-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Adds a statement to a topic's access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.  To remove the ability to change topic permissions, you must deny permissions to the AddPermission, RemovePermission, and SetTopicAttributes actions in your IAM policy.
    @Sendable
    @inlinable
    public func addPermission(_ input: AddPermissionInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AddPermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a statement to a topic's access control policy, granting access for the specified Amazon Web Services accounts to the specified actions.  To remove the ability to change topic permissions, you must deny permissions to the AddPermission, RemovePermission, and SetTopicAttributes actions in your IAM policy.
    ///
    /// Parameters:
    ///   - actionName: The action you want to allow for the specified principal(s). Valid values: Any Amazon SNS action name, for example Publish.
    ///   - awsAccountId: The Amazon Web Services account IDs of the users (principals) who will be given access to the specified actions. The users must have Amazon Web Services account, but do not need to be signed up for this service.
    ///   - label: A unique identifier for the new policy statement.
    ///   - topicArn: The ARN of the topic whose access control policy you wish to modify.
    ///   - logger: Logger use during operation
    @inlinable
    public func addPermission(
        actionName: [String],
        awsAccountId: [String],
        label: String,
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AddPermissionInput(
            actionName: actionName, 
            awsAccountId: awsAccountId, 
            label: label, 
            topicArn: topicArn
        )
        return try await self.addPermission(input, logger: logger)
    }

    /// Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out. To resume sending messages, you can opt in the number by using the OptInPhoneNumber action.
    @Sendable
    @inlinable
    public func checkIfPhoneNumberIsOptedOut(_ input: CheckIfPhoneNumberIsOptedOutInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CheckIfPhoneNumberIsOptedOutResponse {
        try await self.client.execute(
            operation: "CheckIfPhoneNumberIsOptedOut", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a phone number and indicates whether the phone holder has opted out of receiving SMS messages from your Amazon Web Services account. You cannot send SMS messages to a number that is opted out. To resume sending messages, you can opt in the number by using the OptInPhoneNumber action.
    ///
    /// Parameters:
    ///   - phoneNumber: The phone number for which you want to check the opt out status.
    ///   - logger: Logger use during operation
    @inlinable
    public func checkIfPhoneNumberIsOptedOut(
        phoneNumber: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CheckIfPhoneNumberIsOptedOutResponse {
        let input = CheckIfPhoneNumberIsOptedOutInput(
            phoneNumber: phoneNumber
        )
        return try await self.checkIfPhoneNumberIsOptedOut(input, logger: logger)
    }

    /// Verifies an endpoint owner's intent to receive messages by validating the token sent to the endpoint by an earlier Subscribe action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the AuthenticateOnUnsubscribe flag is set to "true".
    @Sendable
    @inlinable
    public func confirmSubscription(_ input: ConfirmSubscriptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfirmSubscriptionResponse {
        try await self.client.execute(
            operation: "ConfirmSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Verifies an endpoint owner's intent to receive messages by validating the token sent to the endpoint by an earlier Subscribe action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the AuthenticateOnUnsubscribe flag is set to "true".
    ///
    /// Parameters:
    ///   - authenticateOnUnsubscribe: Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is true and the request has an Amazon Web Services signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires Amazon Web Services authentication.
    ///   - token: Short-lived token sent to an endpoint during the Subscribe action.
    ///   - topicArn: The ARN of the topic for which you wish to confirm a subscription.
    ///   - logger: Logger use during operation
    @inlinable
    public func confirmSubscription(
        authenticateOnUnsubscribe: String? = nil,
        token: String,
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ConfirmSubscriptionResponse {
        let input = ConfirmSubscriptionInput(
            authenticateOnUnsubscribe: authenticateOnUnsubscribe, 
            token: token, 
            topicArn: topicArn
        )
        return try await self.confirmSubscription(input, logger: logger)
    }

    /// Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify PlatformPrincipal and PlatformCredential attributes when using the CreatePlatformApplication action.  PlatformPrincipal and PlatformCredential are received from the notification service.   For ADM, PlatformPrincipal is client id and PlatformCredential is client secret.   For APNS and APNS_SANDBOX using certificate credentials, PlatformPrincipal is SSL certificate and PlatformCredential is private key.   For APNS and APNS_SANDBOX using token credentials, PlatformPrincipal is signing key ID and PlatformCredential is signing key.   For Baidu, PlatformPrincipal is API key and PlatformCredential is secret key.   For GCM (Firebase Cloud Messaging) using key credentials, there is no PlatformPrincipal. The PlatformCredential is API key.   For GCM (Firebase Cloud Messaging) using token credentials, there is no PlatformPrincipal. The PlatformCredential is a JSON formatted private key file. When using the Amazon Web Services CLI, the file must be in string format and special characters must be ignored. To format the file correctly, Amazon SNS recommends using the following command: SERVICE_JSON=`jq @json .   For MPNS, PlatformPrincipal is TLS certificate and PlatformCredential is private key.   For WNS, PlatformPrincipal is Package Security Identifier and PlatformCredential is secret key.   You can use the returned PlatformApplicationArn as an attribute for the CreatePlatformEndpoint action.
    @Sendable
    @inlinable
    public func createPlatformApplication(_ input: CreatePlatformApplicationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePlatformApplicationResponse {
        try await self.client.execute(
            operation: "CreatePlatformApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging), to which devices and mobile apps may register. You must specify PlatformPrincipal and PlatformCredential attributes when using the CreatePlatformApplication action.  PlatformPrincipal and PlatformCredential are received from the notification service.   For ADM, PlatformPrincipal is client id and PlatformCredential is client secret.   For APNS and APNS_SANDBOX using certificate credentials, PlatformPrincipal is SSL certificate and PlatformCredential is private key.   For APNS and APNS_SANDBOX using token credentials, PlatformPrincipal is signing key ID and PlatformCredential is signing key.   For Baidu, PlatformPrincipal is API key and PlatformCredential is secret key.   For GCM (Firebase Cloud Messaging) using key credentials, there is no PlatformPrincipal. The PlatformCredential is API key.   For GCM (Firebase Cloud Messaging) using token credentials, there is no PlatformPrincipal. The PlatformCredential is a JSON formatted private key file. When using the Amazon Web Services CLI, the file must be in string format and special characters must be ignored. To format the file correctly, Amazon SNS recommends using the following command: SERVICE_JSON=`jq @json .   For MPNS, PlatformPrincipal is TLS certificate and PlatformCredential is private key.   For WNS, PlatformPrincipal is Package Security Identifier and PlatformCredential is secret key.   You can use the returned PlatformApplicationArn as an attribute for the CreatePlatformEndpoint action.
    ///
    /// Parameters:
    ///   - attributes: For a list of attributes, see  SetPlatformApplicationAttributes .
    ///   - name: Application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long.
    ///   - platform: The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push Notification Service), APNS_SANDBOX, and GCM (Firebase Cloud Messaging).
    ///   - logger: Logger use during operation
    @inlinable
    public func createPlatformApplication(
        attributes: [String: String],
        name: String,
        platform: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePlatformApplicationResponse {
        let input = CreatePlatformApplicationInput(
            attributes: attributes, 
            name: name, 
            platform: platform
        )
        return try await self.createPlatformApplication(input, logger: logger)
    }

    /// Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. CreatePlatformEndpoint requires the PlatformApplicationArn that is returned from CreatePlatformApplication. You can use the returned EndpointArn to send a message to a mobile app or by the Subscribe action for subscription to a topic. The CreatePlatformEndpoint action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint's ARN is returned without creating a new endpoint. For more information, see Using Amazon SNS Mobile Push Notifications.  When using CreatePlatformEndpoint with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see Creating an Amazon SNS Endpoint for Baidu.
    @Sendable
    @inlinable
    public func createPlatformEndpoint(_ input: CreatePlatformEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEndpointResponse {
        try await self.client.execute(
            operation: "CreatePlatformEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an endpoint for a device and mobile app on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. CreatePlatformEndpoint requires the PlatformApplicationArn that is returned from CreatePlatformApplication. You can use the returned EndpointArn to send a message to a mobile app or by the Subscribe action for subscription to a topic. The CreatePlatformEndpoint action is idempotent, so if the requester already owns an endpoint with the same device token and attributes, that endpoint's ARN is returned without creating a new endpoint. For more information, see Using Amazon SNS Mobile Push Notifications.  When using CreatePlatformEndpoint with Baidu, two attributes must be provided: ChannelId and UserId. The token field must also contain the ChannelId. For more information, see Creating an Amazon SNS Endpoint for Baidu.
    ///
    /// Parameters:
    ///   - attributes: For a list of attributes, see  SetEndpointAttributes .
    ///   - customUserData: Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.
    ///   - platformApplicationArn:  PlatformApplicationArn returned from CreatePlatformApplication is used to create a an endpoint.
    ///   - token: Unique identifier created by the notification service for an app on a device. The specific name for Token will vary, depending on which notification service is being used. For example, when using APNS as the notification service, you need the device token. Alternatively, when using GCM (Firebase Cloud Messaging) or ADM, the device token equivalent is called the registration ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPlatformEndpoint(
        attributes: [String: String]? = nil,
        customUserData: String? = nil,
        platformApplicationArn: String,
        token: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEndpointResponse {
        let input = CreatePlatformEndpointInput(
            attributes: attributes, 
            customUserData: customUserData, 
            platformApplicationArn: platformApplicationArn, 
            token: token
        )
        return try await self.createPlatformEndpoint(input, logger: logger)
    }

    /// Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    @Sendable
    @inlinable
    public func createSMSSandboxPhoneNumber(_ input: CreateSMSSandboxPhoneNumberInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSMSSandboxPhoneNumberResult {
        try await self.client.execute(
            operation: "CreateSMSSandboxPhoneNumber", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    ///
    /// Parameters:
    ///   - languageCode: The language to use for sending the OTP. The default value is en-US.
    ///   - phoneNumber: The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSMSSandboxPhoneNumber(
        languageCode: LanguageCodeString? = nil,
        phoneNumber: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSMSSandboxPhoneNumberResult {
        let input = CreateSMSSandboxPhoneNumberInput(
            languageCode: languageCode, 
            phoneNumber: phoneNumber
        )
        return try await self.createSMSSandboxPhoneNumber(input, logger: logger)
    }

    /// Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see Creating an Amazon SNS topic in the Amazon SNS Developer Guide. This action is idempotent, so if the requester already owns a topic with the specified name, that topic's ARN is returned without creating a new topic.
    @Sendable
    @inlinable
    public func createTopic(_ input: CreateTopicInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTopicResponse {
        try await self.client.execute(
            operation: "CreateTopic", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a topic to which notifications can be published. Users can create at most 100,000 standard topics (at most 1,000 FIFO topics). For more information, see Creating an Amazon SNS topic in the Amazon SNS Developer Guide. This action is idempotent, so if the requester already owns a topic with the specified name, that topic's ARN is returned without creating a new topic.
    ///
    /// Parameters:
    ///   - attributes: A map of attributes with their corresponding values. The following lists names, descriptions, and values of the special request parameters that the CreateTopic action uses:    DeliveryPolicy – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.    DisplayName – The display name to use for a topic with SMS subscriptions.    FifoTopic – Set to true to create a FIFO topic.    Policy – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.    SignatureVersion – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, SignatureVersion is set to 1.    TracingConfig – Tracing mode of an Amazon SNS topic. By default TracingConfig is set to PassThrough, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to Active, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.   The following attribute applies only to server-side encryption:    KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see Key Terms. For more examples, see KeyId in the Key Management Service API Reference.    The following attributes apply only to FIFO topics:    ArchivePolicy – The policy that sets the retention period for messages stored in the message archive of an Amazon SNS FIFO topic.    ContentBasedDeduplication – Enables content-based deduplication for FIFO topics.   By default, ContentBasedDeduplication is set to false. If you create a FIFO topic and this attribute is false, you must specify a value for the MessageDeduplicationId parameter for the Publish action.    When you set ContentBasedDeduplication to true, Amazon SNS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message). (Optional) To override the generated value, you can specify a value for the MessageDeduplicationId parameter for the Publish action.        FifoThroughputScope – Enables higher throughput for your FIFO topic by adjusting the scope of deduplication. This attribute has two possible values:    Topic – The scope of message deduplication is across the entire topic. This is the default value and maintains existing behavior, with a maximum throughput of 3000 messages per second or 20MB per second, whichever comes first.    MessageGroup – The scope of deduplication is within each individual message group, which enables higher throughput per topic subject to regional quotas. For more information on quotas or to request an increase, see Amazon SNS service quotas in the Amazon Web Services General Reference.
    ///   - dataProtectionPolicy: The body of the policy document you want to use for this topic. You can only add one policy per topic. The policy must be in JSON string format. Length Constraints: Maximum length of 30,720.
    ///   - name: The name of the topic you want to create. Constraints: Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long. For a FIFO (first-in-first-out) topic, the name must end with the .fifo suffix.
    ///   - tags: The list of tags to add to a new topic.  To be able to tag a topic on creation, you must have the sns:CreateTopic and sns:TagResource permissions.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTopic(
        attributes: [String: String]? = nil,
        dataProtectionPolicy: String? = nil,
        name: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTopicResponse {
        let input = CreateTopicInput(
            attributes: attributes, 
            dataProtectionPolicy: dataProtectionPolicy, 
            name: name, 
            tags: tags
        )
        return try await self.createTopic(input, logger: logger)
    }

    /// Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see Using Amazon SNS Mobile Push Notifications.  When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.
    @Sendable
    @inlinable
    public func deleteEndpoint(_ input: DeleteEndpointInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the endpoint for a device and mobile app from Amazon SNS. This action is idempotent. For more information, see Using Amazon SNS Mobile Push Notifications.  When you delete an endpoint that is also subscribed to a topic, then you must also unsubscribe the endpoint from the topic.
    ///
    /// Parameters:
    ///   - endpointArn:  EndpointArn of endpoint to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEndpoint(
        endpointArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteEndpointInput(
            endpointArn: endpointArn
        )
        return try await self.deleteEndpoint(input, logger: logger)
    }

    /// Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see Using Amazon SNS Mobile Push Notifications.
    @Sendable
    @inlinable
    public func deletePlatformApplication(_ input: DeletePlatformApplicationInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeletePlatformApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a platform application object for one of the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see Using Amazon SNS Mobile Push Notifications.
    ///
    /// Parameters:
    ///   - platformApplicationArn:  PlatformApplicationArn of platform application object to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePlatformApplication(
        platformApplicationArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeletePlatformApplicationInput(
            platformApplicationArn: platformApplicationArn
        )
        return try await self.deletePlatformApplication(input, logger: logger)
    }

    /// Deletes an Amazon Web Services account's verified or pending phone number from the SMS sandbox. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    @Sendable
    @inlinable
    public func deleteSMSSandboxPhoneNumber(_ input: DeleteSMSSandboxPhoneNumberInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSMSSandboxPhoneNumberResult {
        try await self.client.execute(
            operation: "DeleteSMSSandboxPhoneNumber", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an Amazon Web Services account's verified or pending phone number from the SMS sandbox. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    ///
    /// Parameters:
    ///   - phoneNumber: The destination phone number to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSMSSandboxPhoneNumber(
        phoneNumber: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteSMSSandboxPhoneNumberResult {
        let input = DeleteSMSSandboxPhoneNumberInput(
            phoneNumber: phoneNumber
        )
        return try await self.deleteSMSSandboxPhoneNumber(input, logger: logger)
    }

    /// Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
    @Sendable
    @inlinable
    public func deleteTopic(_ input: DeleteTopicInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteTopic", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a topic and all its subscriptions. Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. This action is idempotent, so deleting a topic that does not exist does not result in an error.
    ///
    /// Parameters:
    ///   - topicArn: The ARN of the topic you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTopic(
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteTopicInput(
            topicArn: topicArn
        )
        return try await self.deleteTopic(input, logger: logger)
    }

    /// Retrieves the specified inline DataProtectionPolicy document that is stored in the specified Amazon SNS topic.
    @Sendable
    @inlinable
    public func getDataProtectionPolicy(_ input: GetDataProtectionPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDataProtectionPolicyResponse {
        try await self.client.execute(
            operation: "GetDataProtectionPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the specified inline DataProtectionPolicy document that is stored in the specified Amazon SNS topic.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the topic whose DataProtectionPolicy you want to get. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDataProtectionPolicy(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDataProtectionPolicyResponse {
        let input = GetDataProtectionPolicyInput(
            resourceArn: resourceArn
        )
        return try await self.getDataProtectionPolicy(input, logger: logger)
    }

    /// Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see Using Amazon SNS Mobile Push Notifications.
    @Sendable
    @inlinable
    public func getEndpointAttributes(_ input: GetEndpointAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEndpointAttributesResponse {
        try await self.client.execute(
            operation: "GetEndpointAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the endpoint attributes for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see Using Amazon SNS Mobile Push Notifications.
    ///
    /// Parameters:
    ///   - endpointArn:  EndpointArn for GetEndpointAttributes input.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEndpointAttributes(
        endpointArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEndpointAttributesResponse {
        let input = GetEndpointAttributesInput(
            endpointArn: endpointArn
        )
        return try await self.getEndpointAttributes(input, logger: logger)
    }

    /// Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see Using Amazon SNS Mobile Push Notifications.
    @Sendable
    @inlinable
    public func getPlatformApplicationAttributes(_ input: GetPlatformApplicationAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPlatformApplicationAttributesResponse {
        try await self.client.execute(
            operation: "GetPlatformApplicationAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see Using Amazon SNS Mobile Push Notifications.
    ///
    /// Parameters:
    ///   - platformApplicationArn:  PlatformApplicationArn for GetPlatformApplicationAttributesInput.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPlatformApplicationAttributes(
        platformApplicationArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPlatformApplicationAttributesResponse {
        let input = GetPlatformApplicationAttributesInput(
            platformApplicationArn: platformApplicationArn
        )
        return try await self.getPlatformApplicationAttributes(input, logger: logger)
    }

    /// Returns the settings for sending SMS messages from your Amazon Web Services account. These settings are set with the SetSMSAttributes action.
    @Sendable
    @inlinable
    public func getSMSAttributes(_ input: GetSMSAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSMSAttributesResponse {
        try await self.client.execute(
            operation: "GetSMSAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the settings for sending SMS messages from your Amazon Web Services account. These settings are set with the SetSMSAttributes action.
    ///
    /// Parameters:
    ///   - attributes: A list of the individual attribute names, such as MonthlySpendLimit, for which you want values. For all attribute names, see SetSMSAttributes. If you don't use this parameter, Amazon SNS returns all SMS attributes.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSMSAttributes(
        attributes: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSMSAttributesResponse {
        let input = GetSMSAttributesInput(
            attributes: attributes
        )
        return try await self.getSMSAttributes(input, logger: logger)
    }

    /// Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    @Sendable
    @inlinable
    public func getSMSSandboxAccountStatus(_ input: GetSMSSandboxAccountStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSMSSandboxAccountStatusResult {
        try await self.client.execute(
            operation: "GetSMSSandboxAccountStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the SMS sandbox status for the calling Amazon Web Services account in the target Amazon Web Services Region. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getSMSSandboxAccountStatus(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSMSSandboxAccountStatusResult {
        let input = GetSMSSandboxAccountStatusInput(
        )
        return try await self.getSMSSandboxAccountStatus(input, logger: logger)
    }

    /// Returns all of the properties of a subscription.
    @Sendable
    @inlinable
    public func getSubscriptionAttributes(_ input: GetSubscriptionAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubscriptionAttributesResponse {
        try await self.client.execute(
            operation: "GetSubscriptionAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns all of the properties of a subscription.
    ///
    /// Parameters:
    ///   - subscriptionArn: The ARN of the subscription whose properties you want to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSubscriptionAttributes(
        subscriptionArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSubscriptionAttributesResponse {
        let input = GetSubscriptionAttributesInput(
            subscriptionArn: subscriptionArn
        )
        return try await self.getSubscriptionAttributes(input, logger: logger)
    }

    /// Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
    @Sendable
    @inlinable
    public func getTopicAttributes(_ input: GetTopicAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTopicAttributesResponse {
        try await self.client.execute(
            operation: "GetTopicAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns all of the properties of a topic. Topic properties returned might differ based on the authorization of the user.
    ///
    /// Parameters:
    ///   - topicArn: The ARN of the topic whose properties you want to get.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTopicAttributes(
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTopicAttributesResponse {
        let input = GetTopicAttributesInput(
            topicArn: topicArn
        )
        return try await self.getTopicAttributes(input, logger: logger)
    }

    /// Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for ListEndpointsByPlatformApplication are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListEndpointsByPlatformApplication again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see Using Amazon SNS Mobile Push Notifications.  This action is throttled at 30 transactions per second (TPS).
    @Sendable
    @inlinable
    public func listEndpointsByPlatformApplication(_ input: ListEndpointsByPlatformApplicationInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEndpointsByPlatformApplicationResponse {
        try await self.client.execute(
            operation: "ListEndpointsByPlatformApplication", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the endpoints and endpoint attributes for devices in a supported push notification service, such as GCM (Firebase Cloud Messaging) and APNS. The results for ListEndpointsByPlatformApplication are paginated and return a limited list of endpoints, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListEndpointsByPlatformApplication again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see Using Amazon SNS Mobile Push Notifications.  This action is throttled at 30 transactions per second (TPS).
    ///
    /// Parameters:
    ///   - nextToken:  NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results.
    ///   - platformApplicationArn:  PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEndpointsByPlatformApplication(
        nextToken: String? = nil,
        platformApplicationArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEndpointsByPlatformApplicationResponse {
        let input = ListEndpointsByPlatformApplicationInput(
            nextToken: nextToken, 
            platformApplicationArn: platformApplicationArn
        )
        return try await self.listEndpointsByPlatformApplication(input, logger: logger)
    }

    /// Lists the calling Amazon Web Services account's dedicated origination numbers and their metadata. For more information about origination numbers, see Origination numbers in the Amazon SNS Developer Guide.
    @Sendable
    @inlinable
    public func listOriginationNumbers(_ input: ListOriginationNumbersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOriginationNumbersResult {
        try await self.client.execute(
            operation: "ListOriginationNumbers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the calling Amazon Web Services account's dedicated origination numbers and their metadata. For more information about origination numbers, see Origination numbers in the Amazon SNS Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of origination numbers to return.
    ///   - nextToken: Token that the previous ListOriginationNumbers request returns.
    ///   - logger: Logger use during operation
    @inlinable
    public func listOriginationNumbers(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListOriginationNumbersResult {
        let input = ListOriginationNumbersRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listOriginationNumbers(input, logger: logger)
    }

    /// Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them. The results for ListPhoneNumbersOptedOut are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a NextToken string will be returned. To receive the next page, you call ListPhoneNumbersOptedOut again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null.
    @Sendable
    @inlinable
    public func listPhoneNumbersOptedOut(_ input: ListPhoneNumbersOptedOutInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPhoneNumbersOptedOutResponse {
        try await self.client.execute(
            operation: "ListPhoneNumbersOptedOut", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of phone numbers that are opted out, meaning you cannot send SMS messages to them. The results for ListPhoneNumbersOptedOut are paginated, and each page returns up to 100 phone numbers. If additional phone numbers are available after the first page of results, then a NextToken string will be returned. To receive the next page, you call ListPhoneNumbersOptedOut again using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null.
    ///
    /// Parameters:
    ///   - nextToken: A NextToken string is used when you call the ListPhoneNumbersOptedOut action to retrieve additional records that are available after the first page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPhoneNumbersOptedOut(
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPhoneNumbersOptedOutResponse {
        let input = ListPhoneNumbersOptedOutInput(
            nextToken: nextToken
        )
        return try await self.listPhoneNumbersOptedOut(input, logger: logger)
    }

    /// Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for ListPlatformApplications are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListPlatformApplications using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see Using Amazon SNS Mobile Push Notifications.  This action is throttled at 15 transactions per second (TPS).
    @Sendable
    @inlinable
    public func listPlatformApplications(_ input: ListPlatformApplicationsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPlatformApplicationsResponse {
        try await self.client.execute(
            operation: "ListPlatformApplications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the platform application objects for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). The results for ListPlatformApplications are paginated and return a limited list of applications, up to 100. If additional records are available after the first page results, then a NextToken string will be returned. To receive the next page, you call ListPlatformApplications using the NextToken string received from the previous call. When there are no more records to return, NextToken will be null. For more information, see Using Amazon SNS Mobile Push Notifications.  This action is throttled at 15 transactions per second (TPS).
    ///
    /// Parameters:
    ///   - nextToken:  NextToken string is used when calling ListPlatformApplications action to retrieve additional records that are available after the first page results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPlatformApplications(
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPlatformApplicationsResponse {
        let input = ListPlatformApplicationsInput(
            nextToken: nextToken
        )
        return try await self.listPlatformApplications(input, logger: logger)
    }

    /// Lists the calling Amazon Web Services account's current verified and pending destination phone numbers in the SMS sandbox. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    @Sendable
    @inlinable
    public func listSMSSandboxPhoneNumbers(_ input: ListSMSSandboxPhoneNumbersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSMSSandboxPhoneNumbersResult {
        try await self.client.execute(
            operation: "ListSMSSandboxPhoneNumbers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the calling Amazon Web Services account's current verified and pending destination phone numbers in the SMS sandbox. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of phone numbers to return.
    ///   - nextToken: Token that the previous ListSMSSandboxPhoneNumbersInput request returns.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSMSSandboxPhoneNumbers(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSMSSandboxPhoneNumbersResult {
        let input = ListSMSSandboxPhoneNumbersInput(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listSMSSandboxPhoneNumbers(input, logger: logger)
    }

    /// Returns a list of the requester's subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptions call to get further results. This action is throttled at 30 transactions per second (TPS).
    @Sendable
    @inlinable
    public func listSubscriptions(_ input: ListSubscriptionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionsResponse {
        try await self.client.execute(
            operation: "ListSubscriptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the requester's subscriptions. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptions call to get further results. This action is throttled at 30 transactions per second (TPS).
    ///
    /// Parameters:
    ///   - nextToken: Token returned by the previous ListSubscriptions request.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSubscriptions(
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSubscriptionsResponse {
        let input = ListSubscriptionsInput(
            nextToken: nextToken
        )
        return try await self.listSubscriptions(input, logger: logger)
    }

    /// Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptionsByTopic call to get further results. This action is throttled at 30 transactions per second (TPS).
    @Sendable
    @inlinable
    public func listSubscriptionsByTopic(_ input: ListSubscriptionsByTopicInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSubscriptionsByTopicResponse {
        try await self.client.execute(
            operation: "ListSubscriptionsByTopic", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the subscriptions to a specific topic. Each call returns a limited list of subscriptions, up to 100. If there are more subscriptions, a NextToken is also returned. Use the NextToken parameter in a new ListSubscriptionsByTopic call to get further results. This action is throttled at 30 transactions per second (TPS).
    ///
    /// Parameters:
    ///   - nextToken: Token returned by the previous ListSubscriptionsByTopic request.
    ///   - topicArn: The ARN of the topic for which you wish to find subscriptions.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSubscriptionsByTopic(
        nextToken: String? = nil,
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSubscriptionsByTopicResponse {
        let input = ListSubscriptionsByTopicInput(
            nextToken: nextToken, 
            topicArn: topicArn
        )
        return try await self.listSubscriptionsByTopic(input, logger: logger)
    }

    /// List all tags added to the specified Amazon SNS topic. For an overview, see Amazon SNS Tags in the Amazon Simple Notification Service Developer Guide.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all tags added to the specified Amazon SNS topic. For an overview, see Amazon SNS Tags in the Amazon Simple Notification Service Developer Guide.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the topic for which to list tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Returns a list of the requester's topics. Each call returns a limited list of topics, up to 100. If there are more topics, a NextToken is also returned. Use the NextToken parameter in a new ListTopics call to get further results. This action is throttled at 30 transactions per second (TPS).
    @Sendable
    @inlinable
    public func listTopics(_ input: ListTopicsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTopicsResponse {
        try await self.client.execute(
            operation: "ListTopics", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the requester's topics. Each call returns a limited list of topics, up to 100. If there are more topics, a NextToken is also returned. Use the NextToken parameter in a new ListTopics call to get further results. This action is throttled at 30 transactions per second (TPS).
    ///
    /// Parameters:
    ///   - nextToken: Token returned by the previous ListTopics request.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTopics(
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTopicsResponse {
        let input = ListTopicsInput(
            nextToken: nextToken
        )
        return try await self.listTopics(input, logger: logger)
    }

    /// Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number. You can opt in a phone number only once every 30 days.
    @Sendable
    @inlinable
    public func optInPhoneNumber(_ input: OptInPhoneNumberInput, logger: Logger = AWSClient.loggingDisabled) async throws -> OptInPhoneNumberResponse {
        try await self.client.execute(
            operation: "OptInPhoneNumber", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Use this request to opt in a phone number that is opted out, which enables you to resume sending SMS messages to the number. You can opt in a phone number only once every 30 days.
    ///
    /// Parameters:
    ///   - phoneNumber: The phone number to opt in. Use E.164 format.
    ///   - logger: Logger use during operation
    @inlinable
    public func optInPhoneNumber(
        phoneNumber: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> OptInPhoneNumberResponse {
        let input = OptInPhoneNumberInput(
            phoneNumber: phoneNumber
        )
        return try await self.optInPhoneNumber(input, logger: logger)
    }

    /// Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the TargetArn). If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint. When a messageId is returned, the message is saved and Amazon SNS immediately delivers it to subscribers. To use the Publish action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the CreatePlatformEndpoint action.  For more information about formatting messages, see Send Custom Platform-Specific Payloads in Messages to Mobile Devices.   You can publish messages only to topics and endpoints in the same Amazon Web Services Region.
    @Sendable
    @inlinable
    public func publish(_ input: PublishInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PublishResponse {
        try await self.client.execute(
            operation: "Publish", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sends a message to an Amazon SNS topic, a text message (SMS message) directly to a phone number, or a message to a mobile platform endpoint (when you specify the TargetArn). If you send a message to a topic, Amazon SNS delivers the message to each endpoint that is subscribed to the topic. The format of the message depends on the notification protocol for each subscribed endpoint. When a messageId is returned, the message is saved and Amazon SNS immediately delivers it to subscribers. To use the Publish action for publishing a message to a mobile endpoint, such as an app on a Kindle device or mobile phone, you must specify the EndpointArn for the TargetArn parameter. The EndpointArn is returned when making a call with the CreatePlatformEndpoint action.  For more information about formatting messages, see Send Custom Platform-Specific Payloads in Messages to Mobile Devices.   You can publish messages only to topics and endpoints in the same Amazon Web Services Region.
    ///
    /// Parameters:
    ///   - message: The message you want to send. If you are publishing to a topic and you want to send the same message to all transport protocols, include the text of the message as a String value. If you want to send different messages for each transport protocol, set the value of the MessageStructure parameter to json and use a JSON object for the Message parameter.    Constraints:   With the exception of SMS, messages must be UTF-8 encoded strings and at most 256 KB in size (262,144 bytes, not 262,144 characters).   For SMS, each message can contain up to 140 characters. This character limit depends on the encoding schema. For example, an SMS message can contain 160 GSM characters, 140 ASCII characters, or 70 UCS-2 characters. If you publish a message that exceeds this size limit, Amazon SNS sends the message as multiple messages, each fitting within the size limit. Messages aren't truncated mid-word but are cut off at whole-word boundaries. The total size limit for a single SMS Publish action is 1,600 characters.   JSON-specific constraints:   Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.   The values will be parsed (unescaped) before they are used in outgoing messages.   Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).   Values have a minimum length of 0 (the empty string, "", is allowed).   Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).   Non-string values will cause the key to be ignored.   Keys that do not correspond to supported transport protocols are ignored.   Duplicate keys are not allowed.   Failure to parse or validate any key or value in the message will cause the Publish call to return an error (no partial delivery).
    ///   - messageAttributes: Message attributes for Publish action.
    ///   - messageDeduplicationId:   This parameter applies only to FIFO (first-in-first-out) topics. The MessageDeduplicationId can contain up to 128 alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~).   Every message must have a unique MessageDeduplicationId, which is a token used for deduplication of sent messages within the 5 minute minimum deduplication interval.   The scope of deduplication depends on the FifoThroughputScope attribute, when set to Topic the message deduplication scope is across the entire topic, when set to MessageGroup the message deduplication scope is within each individual message group.   If a message with a particular MessageDeduplicationId is sent successfully, subsequent messages within the deduplication scope and interval, with the same MessageDeduplicationId, are accepted successfully but aren't delivered.   Every message must have a unique MessageDeduplicationId:   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your topic, Amazon SNS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).   If you don't provide a MessageDeduplicationId and the topic doesn't have ContentBasedDeduplication set, the action fails with an error.   If the topic has a ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.      When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication scope and interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled, and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates, within the deduplication scope and interval, and only one copy of the message is delivered.
    ///   - messageGroupId: This parameter applies only to FIFO (first-in-first-out) topics. The MessageGroupId can contain up to 128 alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~). The MessageGroupId is a tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). Every message must include a MessageGroupId.
    ///   - messageStructure: Set MessageStructure to json if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set MessageStructure to json, the value of the Message parameter must:    be a syntactically valid JSON object; and   contain at least a top-level JSON key of "default" with a value that is a string.   You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., "http"). Valid value: json
    ///   - phoneNumber: The phone number to which you want to deliver an SMS message. Use E.164 format. If you don't specify a value for the PhoneNumber parameter, you must specify a value for the TargetArn or TopicArn parameters.
    ///   - subject: Optional parameter to be used as the "Subject" line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints. Constraints: Subjects must be UTF-8 text with no line breaks or control characters, and less than 100 characters long.
    ///   - targetArn: If you don't specify a value for the TargetArn parameter, you must specify a value for the PhoneNumber or TopicArn parameters.
    ///   - topicArn: The topic you want to publish to. If you don't specify a value for the TopicArn parameter, you must specify a value for the PhoneNumber or TargetArn parameters.
    ///   - logger: Logger use during operation
    @inlinable
    public func publish(
        message: String,
        messageAttributes: [String: MessageAttributeValue]? = nil,
        messageDeduplicationId: String? = nil,
        messageGroupId: String? = nil,
        messageStructure: String? = nil,
        phoneNumber: String? = nil,
        subject: String? = nil,
        targetArn: String? = nil,
        topicArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PublishResponse {
        let input = PublishInput(
            message: message, 
            messageAttributes: messageAttributes, 
            messageDeduplicationId: messageDeduplicationId, 
            messageGroupId: messageGroupId, 
            messageStructure: messageStructure, 
            phoneNumber: phoneNumber, 
            subject: subject, 
            targetArn: targetArn, 
            topicArn: topicArn
        )
        return try await self.publish(input, logger: logger)
    }

    /// Publishes up to ten messages to the specified topic. This is a batch version of Publish. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes. The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of 200. The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes).  Some actions take lists of parameters. These lists are specified using the param.n notation. Values of n are integers starting from 1. For example, a parameter list with two elements looks like this:  &AttributeName.1=first &AttributeName.2=second If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint. When a messageId is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.
    @Sendable
    @inlinable
    public func publishBatch(_ input: PublishBatchInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PublishBatchResponse {
        try await self.client.execute(
            operation: "PublishBatch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Publishes up to ten messages to the specified topic. This is a batch version of Publish. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes. The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of 200. The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes).  Some actions take lists of parameters. These lists are specified using the param.n notation. Values of n are integers starting from 1. For example, a parameter list with two elements looks like this:  &AttributeName.1=first &AttributeName.2=second If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint. When a messageId is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.
    ///
    /// Parameters:
    ///   - publishBatchRequestEntries: A list of PublishBatch request entries to be sent to the SNS topic.
    ///   - topicArn: The Amazon resource name (ARN) of the topic you want to batch publish to.
    ///   - logger: Logger use during operation
    @inlinable
    public func publishBatch(
        publishBatchRequestEntries: [PublishBatchRequestEntry],
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PublishBatchResponse {
        let input = PublishBatchInput(
            publishBatchRequestEntries: publishBatchRequestEntries, 
            topicArn: topicArn
        )
        return try await self.publishBatch(input, logger: logger)
    }

    /// Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
    @Sendable
    @inlinable
    public func putDataProtectionPolicy(_ input: PutDataProtectionPolicyInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutDataProtectionPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or updates an inline policy document that is stored in the specified Amazon SNS topic.
    ///
    /// Parameters:
    ///   - dataProtectionPolicy: The JSON serialization of the topic's DataProtectionPolicy. The DataProtectionPolicy must be in JSON string format. Length Constraints: Maximum length of 30,720.
    ///   - resourceArn: The ARN of the topic whose DataProtectionPolicy you want to add or update. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
    ///   - logger: Logger use during operation
    @inlinable
    public func putDataProtectionPolicy(
        dataProtectionPolicy: String,
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutDataProtectionPolicyInput(
            dataProtectionPolicy: dataProtectionPolicy, 
            resourceArn: resourceArn
        )
        return try await self.putDataProtectionPolicy(input, logger: logger)
    }

    /// Removes a statement from a topic's access control policy.  To remove the ability to change topic permissions, you must deny permissions to the AddPermission, RemovePermission, and SetTopicAttributes actions in your IAM policy.
    @Sendable
    @inlinable
    public func removePermission(_ input: RemovePermissionInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RemovePermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a statement from a topic's access control policy.  To remove the ability to change topic permissions, you must deny permissions to the AddPermission, RemovePermission, and SetTopicAttributes actions in your IAM policy.
    ///
    /// Parameters:
    ///   - label: The unique label of the statement you want to remove.
    ///   - topicArn: The ARN of the topic whose access control policy you wish to modify.
    ///   - logger: Logger use during operation
    @inlinable
    public func removePermission(
        label: String,
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RemovePermissionInput(
            label: label, 
            topicArn: topicArn
        )
        return try await self.removePermission(input, logger: logger)
    }

    /// Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see Using Amazon SNS Mobile Push Notifications.
    @Sendable
    @inlinable
    public func setEndpointAttributes(_ input: SetEndpointAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetEndpointAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the attributes for an endpoint for a device on one of the supported push notification services, such as GCM (Firebase Cloud Messaging) and APNS. For more information, see Using Amazon SNS Mobile Push Notifications.
    ///
    /// Parameters:
    ///   - attributes: A map of the endpoint attributes. Attributes in this map include the following:    CustomUserData – arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.    Enabled – flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.    Token – device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.
    ///   - endpointArn: EndpointArn used for SetEndpointAttributes action.
    ///   - logger: Logger use during operation
    @inlinable
    public func setEndpointAttributes(
        attributes: [String: String],
        endpointArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetEndpointAttributesInput(
            attributes: attributes, 
            endpointArn: endpointArn
        )
        return try await self.setEndpointAttributes(input, logger: logger)
    }

    /// Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see Using Amazon SNS Mobile Push Notifications. For information on configuring attributes for message delivery status, see Using Amazon SNS Application Attributes for Message Delivery Status.
    @Sendable
    @inlinable
    public func setPlatformApplicationAttributes(_ input: SetPlatformApplicationAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetPlatformApplicationAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see Using Amazon SNS Mobile Push Notifications. For information on configuring attributes for message delivery status, see Using Amazon SNS Application Attributes for Message Delivery Status.
    ///
    /// Parameters:
    ///   - attributes: A map of the platform application attributes. Attributes in this map include the following:    PlatformCredential – The credential received from the notification service.   For ADM, PlatformCredentialis client secret.   For Apple Services using certificate credentials, PlatformCredential is private key.   For Apple Services using token credentials, PlatformCredential is signing key.   For GCM (Firebase Cloud Messaging) using key credentials, there is no PlatformPrincipal. The PlatformCredential is API key.   For GCM (Firebase Cloud Messaging) using token credentials, there is no PlatformPrincipal. The PlatformCredential is a JSON formatted private key file. When using the Amazon Web Services CLI, the file must be in string format and special characters must be ignored. To format the file correctly, Amazon SNS recommends using the following command: SERVICE_JSON=`jq @json .        PlatformPrincipal – The principal received from the notification service.   For ADM, PlatformPrincipalis client id.   For Apple Services using certificate credentials, PlatformPrincipal is SSL certificate.   For Apple Services using token credentials, PlatformPrincipal is signing key ID.   For GCM (Firebase Cloud Messaging), there is no PlatformPrincipal.         EventEndpointCreated – Topic ARN to which EndpointCreated event notifications are sent.    EventEndpointDeleted – Topic ARN to which EndpointDeleted event notifications are sent.    EventEndpointUpdated – Topic ARN to which EndpointUpdate event notifications are sent.    EventDeliveryFailure – Topic ARN to which DeliveryFailure event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.    SuccessFeedbackRoleArn – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.    FailureFeedbackRoleArn – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.    SuccessFeedbackSampleRate – Sample rate percentage (0-100) of successfully delivered messages.   The following attributes only apply to APNs token-based authentication:    ApplePlatformTeamID – The identifier that's assigned to your Apple developer account team.    ApplePlatformBundleID – The bundle identifier that's assigned to your iOS app.
    ///   - platformApplicationArn:  PlatformApplicationArn for SetPlatformApplicationAttributes action.
    ///   - logger: Logger use during operation
    @inlinable
    public func setPlatformApplicationAttributes(
        attributes: [String: String],
        platformApplicationArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetPlatformApplicationAttributesInput(
            attributes: attributes, 
            platformApplicationArn: platformApplicationArn
        )
        return try await self.setPlatformApplicationAttributes(input, logger: logger)
    }

    /// Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports. You can override some of these settings for a single message when you use the Publish action with the MessageAttributes.entry.N parameter. For more information, see Publishing to a mobile phone in the Amazon SNS Developer Guide.  To use this operation, you must grant the Amazon SNS service principal (sns.amazonaws.com) permission to perform the s3:ListBucket action.
    @Sendable
    @inlinable
    public func setSMSAttributes(_ input: SetSMSAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SetSMSAttributesResponse {
        try await self.client.execute(
            operation: "SetSMSAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Use this request to set the default settings for sending SMS messages and receiving daily SMS usage reports. You can override some of these settings for a single message when you use the Publish action with the MessageAttributes.entry.N parameter. For more information, see Publishing to a mobile phone in the Amazon SNS Developer Guide.  To use this operation, you must grant the Amazon SNS service principal (sns.amazonaws.com) permission to perform the s3:ListBucket action.
    ///
    /// Parameters:
    ///   - attributes: The default settings for sending SMS messages from your Amazon Web Services account. You can set values for the following attribute names:  MonthlySpendLimit – The maximum amount in USD that you are willing to spend each month to send SMS messages. When Amazon SNS determines that sending an SMS message would incur a cost that exceeds this limit, it stops sending SMS messages within minutes.  Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During that interval, if you continue to send SMS messages, you will incur costs that exceed your limit.  By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to raise the limit, submit an SNS Limit Increase case. For New limit value, enter your desired monthly spend limit. In the Use Case Description field, explain that you are requesting an SMS monthly spend limit increase.  DeliveryStatusIAMRole – The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS writes a log that includes the message price, the success or failure status, the reason for failure (if the message failed), the message dwell time, and other information.  DeliveryStatusSuccessSamplingRate – The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an integer from 0 - 100. For example, to write logs only for failed deliveries, set this value to 0. To write logs for 10% of your successful deliveries, set it to 10.  DefaultSenderID – A string, such as your business brand, that is displayed as the sender on the receiving device. Support for sender IDs varies by country. The sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one letter.  DefaultSMSType – The type of SMS message that you will send by default. You can assign the following values:    Promotional – (Default) Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.    Transactional – Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.    UsageReportS3Bucket – The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to the bucket. The report includes the following information for each SMS message that was successfully delivered by your Amazon Web Services account:   Time that the message was published (in UTC)   Message ID   Destination phone number   Message type   Delivery status   Message price (in USD)   Part number (a message is split into multiple parts if it is too long for a single message)   Total number of parts   To receive the report, the bucket must have a policy that allows the Amazon SNS service principal to perform the s3:PutObject and s3:GetBucketLocation actions. For an example bucket policy and usage report, see Monitoring SMS Activity in the Amazon SNS Developer Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func setSMSAttributes(
        attributes: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SetSMSAttributesResponse {
        let input = SetSMSAttributesInput(
            attributes: attributes
        )
        return try await self.setSMSAttributes(input, logger: logger)
    }

    /// Allows a subscription owner to set an attribute of the subscription to a new value.
    @Sendable
    @inlinable
    public func setSubscriptionAttributes(_ input: SetSubscriptionAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetSubscriptionAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allows a subscription owner to set an attribute of the subscription to a new value.
    ///
    /// Parameters:
    ///   - attributeName: A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that this action uses:    DeliveryPolicy – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.    FilterPolicy – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.    FilterPolicyScope – This attribute lets you choose the filtering scope by using one of the following string value types:    MessageAttributes (default) – The filter is applied on the message attributes.    MessageBody – The filter is applied on the message body.      RawMessageDelivery – When set to true, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.    RedrivePolicy – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.  Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held  in the dead-letter queue for further analysis or reprocessing.   The following attribute applies only to Amazon Data Firehose delivery stream subscriptions:    SubscriptionRoleArn – The ARN of the IAM role that has the following:   Permission to write to the Firehose delivery stream   Amazon SNS listed as a trusted entity   Specifying a valid ARN for this attribute is required for Firehose delivery stream subscriptions.  For more information, see Fanout  to Firehose delivery streams in the Amazon SNS Developer Guide.
    ///   - attributeValue: The new value for the attribute in JSON format.
    ///   - subscriptionArn: The ARN of the subscription to modify.
    ///   - logger: Logger use during operation
    @inlinable
    public func setSubscriptionAttributes(
        attributeName: String,
        attributeValue: String? = nil,
        subscriptionArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetSubscriptionAttributesInput(
            attributeName: attributeName, 
            attributeValue: attributeValue, 
            subscriptionArn: subscriptionArn
        )
        return try await self.setSubscriptionAttributes(input, logger: logger)
    }

    /// Allows a topic owner to set an attribute of the topic to a new value.  To remove the ability to change topic permissions, you must deny permissions to the AddPermission, RemovePermission, and SetTopicAttributes actions in your IAM policy.
    @Sendable
    @inlinable
    public func setTopicAttributes(_ input: SetTopicAttributesInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetTopicAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allows a topic owner to set an attribute of the topic to a new value.  To remove the ability to change topic permissions, you must deny permissions to the AddPermission, RemovePermission, and SetTopicAttributes actions in your IAM policy.
    ///
    /// Parameters:
    ///   - attributeName: A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that the SetTopicAttributes action uses:    ApplicationSuccessFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to a platform application endpoint.    DeliveryPolicy – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.    DisplayName – The display name to use for a topic with SMS subscriptions.    Policy – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.    TracingConfig – Tracing mode of an Amazon SNS topic. By default TracingConfig is set to PassThrough, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to Active, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.   HTTP    HTTPSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.     HTTPSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an HTTP endpoint.    HTTPFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.     Amazon Kinesis Data Firehose    FirehoseSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.    FirehoseSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.    FirehoseFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.      Lambda    LambdaSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint.    LambdaSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Lambda endpoint.    LambdaFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint.      Platform application endpoint    ApplicationSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.    ApplicationSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.    ApplicationFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.    In addition to being able to configure topic attributes for message delivery status of notification messages sent to Amazon SNS application endpoints, you can also configure application attributes for the delivery status of push notification messages sent to push notification services. For example, For more information, see Using Amazon SNS Application Attributes for Message Delivery Status.     Amazon SQS    SQSSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint.     SQSSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint.     SQSFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint.       The SuccessFeedbackRoleArn and FailureFeedbackRoleArn attributes are used to give Amazon SNS write access to use CloudWatch Logs on your behalf. The SuccessFeedbackSampleRate attribute is for specifying the sample rate percentage (0-100) of successfully delivered messages. After you configure the FailureFeedbackRoleArn attribute, then all failed message deliveries generate CloudWatch Logs.   The following attribute applies only to server-side-encryption:    KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see Key Terms. For more examples, see KeyId in the Key Management Service API Reference.     SignatureVersion – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, SignatureVersion is set to 1.   The following attribute applies only to FIFO topics:    ArchivePolicy – The policy that sets the retention period for messages stored in the message archive of an Amazon SNS FIFO topic.    ContentBasedDeduplication – Enables content-based deduplication for FIFO topics.   By default, ContentBasedDeduplication is set to false. If you create a FIFO topic and this attribute is false, you must specify a value for the MessageDeduplicationId parameter for the Publish action.    When you set ContentBasedDeduplication to true, Amazon SNS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message). (Optional) To override the generated value, you can specify a value for the MessageDeduplicationId parameter for the Publish action.        FifoThroughputScope – Enables higher throughput for your FIFO topic by adjusting the scope of deduplication. This attribute has two possible values:    Topic – The scope of message deduplication is across the entire topic. This is the default value and maintains existing behavior, with a maximum throughput of 3000 messages per second or 20MB per second, whichever comes first.    MessageGroup – The scope of deduplication is within each individual message group, which enables higher throughput per topic subject to regional quotas. For more information on quotas or to request an increase, see Amazon SNS service quotas in the Amazon Web Services General Reference.
    ///   - attributeValue: The new value for the attribute.
    ///   - topicArn: The ARN of the topic to modify.
    ///   - logger: Logger use during operation
    @inlinable
    public func setTopicAttributes(
        attributeName: String,
        attributeValue: String? = nil,
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetTopicAttributesInput(
            attributeName: attributeName, 
            attributeValue: attributeValue, 
            topicArn: topicArn
        )
        return try await self.setTopicAttributes(input, logger: logger)
    }

    /// Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the ConfirmSubscription action to confirm the subscription. You call the ConfirmSubscription action with the token from the subscription response. Confirmation tokens are valid for two days. This action is throttled at 100 transactions per second (TPS).
    @Sendable
    @inlinable
    public func subscribe(_ input: SubscribeInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SubscribeResponse {
        try await self.client.execute(
            operation: "Subscribe", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Subscribes an endpoint to an Amazon SNS topic. If the endpoint type is HTTP/S or email, or if the endpoint and the topic are not in the same Amazon Web Services account, the endpoint owner must run the ConfirmSubscription action to confirm the subscription. You call the ConfirmSubscription action with the token from the subscription response. Confirmation tokens are valid for two days. This action is throttled at 100 transactions per second (TPS).
    ///
    /// Parameters:
    ///   - attributes: A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that the Subscribe action uses:    DeliveryPolicy – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.    FilterPolicy – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.    FilterPolicyScope – This attribute lets you choose the filtering scope by using one of the following string value types:    MessageAttributes (default) – The filter is applied on the message attributes.    MessageBody – The filter is applied on the message body.      RawMessageDelivery – When set to true, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.    RedrivePolicy – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.  Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held  in the dead-letter queue for further analysis or reprocessing.   The following attribute applies only to Amazon Data Firehose delivery stream subscriptions:    SubscriptionRoleArn – The ARN of the IAM role that has the following:   Permission to write to the Firehose delivery stream   Amazon SNS listed as a trusted entity   Specifying a valid ARN for this attribute is required for Firehose delivery stream subscriptions.  For more information, see Fanout  to Firehose delivery streams in the Amazon SNS Developer Guide.   The following attributes apply only to FIFO topics:    ReplayPolicy – Adds or updates an inline policy document for a subscription to replay messages stored in the specified Amazon SNS topic.    ReplayStatus – Retrieves the status of the subscription message replay, which can be one of the following:    Completed – The replay has successfully redelivered all messages, and is now delivering newly published messages. If an ending point was specified in the ReplayPolicy then the subscription will no longer receive newly published messages.    In progress – The replay is currently replaying the selected messages.    Failed – The replay was unable to complete.    Pending – The default state while the replay initiates.
    ///   - endpoint: The endpoint that you want to receive notifications. Endpoints vary by protocol:   For the http protocol, the (public) endpoint is a URL beginning with http://.   For the https protocol, the (public) endpoint is a URL beginning with https://.   For the email protocol, the endpoint is an email address.   For the email-json protocol, the endpoint is an email address.   For the sms protocol, the endpoint is a phone number of an SMS-enabled device.   For the sqs protocol, the endpoint is the ARN of an Amazon SQS queue.   For the application protocol, the endpoint is the EndpointArn of a mobile app and device.   For the lambda protocol, the endpoint is the ARN of an Lambda function.   For the firehose protocol, the endpoint is the ARN of an Amazon Kinesis Data Firehose delivery stream.
    ///   - protocol: The protocol that you want to use. Supported protocols include:    http – delivery of JSON-encoded message via HTTP POST    https – delivery of JSON-encoded message via HTTPS POST    email – delivery of message via SMTP    email-json – delivery of JSON-encoded message via SMTP    sms – delivery of message via SMS    sqs – delivery of JSON-encoded message to an Amazon SQS queue    application – delivery of JSON-encoded message to an EndpointArn for a mobile app and device    lambda – delivery of JSON-encoded message to an Lambda function    firehose – delivery of JSON-encoded message to an Amazon Kinesis Data Firehose delivery stream.
    ///   - returnSubscriptionArn: Sets whether the response from the Subscribe request includes the subscription ARN, even if the subscription is not yet confirmed. If you set this parameter to true, the response includes the ARN in all cases, even if the subscription is not yet confirmed. In addition to the ARN for confirmed subscriptions, the response also includes the pending subscription ARN value for subscriptions that aren't yet confirmed. A subscription becomes confirmed when the subscriber calls the ConfirmSubscription action with a confirmation token.  The default value is false.
    ///   - topicArn: The ARN of the topic you want to subscribe to.
    ///   - logger: Logger use during operation
    @inlinable
    public func subscribe(
        attributes: [String: String]? = nil,
        endpoint: String? = nil,
        protocol: String,
        returnSubscriptionArn: Bool? = nil,
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SubscribeResponse {
        let input = SubscribeInput(
            attributes: attributes, 
            endpoint: endpoint, 
            protocol: `protocol`, 
            returnSubscriptionArn: returnSubscriptionArn, 
            topicArn: topicArn
        )
        return try await self.subscribe(input, logger: logger)
    }

    /// Add tags to the specified Amazon SNS topic. For an overview, see Amazon SNS Tags in the Amazon SNS Developer Guide. When you use topic tags, keep the following guidelines in mind:   Adding more than 50 tags to a topic isn't recommended.   Tags don't have any semantic meaning. Amazon SNS interprets tags as character strings.   Tags are case-sensitive.   A new tag with a key identical to that of an existing tag overwrites the existing tag.   Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a technical support request.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Add tags to the specified Amazon SNS topic. For an overview, see Amazon SNS Tags in the Amazon SNS Developer Guide. When you use topic tags, keep the following guidelines in mind:   Adding more than 50 tags to a topic isn't recommended.   Tags don't have any semantic meaning. Amazon SNS interprets tags as character strings.   Tags are case-sensitive.   A new tag with a key identical to that of an existing tag overwrites the existing tag.   Tagging actions are limited to 10 TPS per Amazon Web Services account, per Amazon Web Services Region. If your application requires a higher throughput, file a technical support request.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the topic to which to add tags.
    ///   - tags: The tags to be added to the specified topic. A tag consists of a required key and an optional value.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic's owner can unsubscribe, and an Amazon Web Services signature is required. If the Unsubscribe call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the Unsubscribe request was unintended.  Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.  This action is throttled at 100 transactions per second (TPS).
    @Sendable
    @inlinable
    public func unsubscribe(_ input: UnsubscribeInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "Unsubscribe", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a subscription. If the subscription requires authentication for deletion, only the owner of the subscription or the topic's owner can unsubscribe, and an Amazon Web Services signature is required. If the Unsubscribe call does not require authentication and the requester is not the subscription owner, a final cancellation message is delivered to the endpoint, so that the endpoint owner can easily resubscribe to the topic if the Unsubscribe request was unintended.  Amazon SQS queue subscriptions require authentication for deletion. Only the owner of the subscription, or the owner of the topic can unsubscribe using the required Amazon Web Services signature.  This action is throttled at 100 transactions per second (TPS).
    ///
    /// Parameters:
    ///   - subscriptionArn: The ARN of the subscription to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func unsubscribe(
        subscriptionArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UnsubscribeInput(
            subscriptionArn: subscriptionArn
        )
        return try await self.unsubscribe(input, logger: logger)
    }

    /// Remove tags from the specified Amazon SNS topic. For an overview, see Amazon SNS Tags in the Amazon SNS Developer Guide.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Remove tags from the specified Amazon SNS topic. For an overview, see Amazon SNS Tags in the Amazon SNS Developer Guide.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the topic from which to remove tags.
    ///   - tagKeys: The list of tag keys to remove from the specified topic.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    @Sendable
    @inlinable
    public func verifySMSSandboxPhoneNumber(_ input: VerifySMSSandboxPhoneNumberInput, logger: Logger = AWSClient.loggingDisabled) async throws -> VerifySMSSandboxPhoneNumberResult {
        try await self.client.execute(
            operation: "VerifySMSSandboxPhoneNumber", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account. When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the SMS sandbox. The SMS sandbox provides a safe environment for  you to try Amazon SNS features without risking your reputation as an SMS sender. While your  Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send  SMS messages only to verified destination phone numbers. For more information, including how to  move out of the sandbox to send messages without restrictions,  see SMS sandbox in  the Amazon SNS Developer Guide.
    ///
    /// Parameters:
    ///   - oneTimePassword: The OTP sent to the destination number from the CreateSMSSandBoxPhoneNumber call.
    ///   - phoneNumber: The destination phone number to verify.
    ///   - logger: Logger use during operation
    @inlinable
    public func verifySMSSandboxPhoneNumber(
        oneTimePassword: String,
        phoneNumber: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> VerifySMSSandboxPhoneNumberResult {
        let input = VerifySMSSandboxPhoneNumberInput(
            oneTimePassword: oneTimePassword, 
            phoneNumber: phoneNumber
        )
        return try await self.verifySMSSandboxPhoneNumber(input, logger: logger)
    }
}

extension SNS {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: SNS, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SNS {
    /// Return PaginatorSequence for operation ``listEndpointsByPlatformApplication(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEndpointsByPlatformApplicationPaginator(
        _ input: ListEndpointsByPlatformApplicationInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEndpointsByPlatformApplicationInput, ListEndpointsByPlatformApplicationResponse> {
        return .init(
            input: input,
            command: self.listEndpointsByPlatformApplication,
            inputKey: \ListEndpointsByPlatformApplicationInput.nextToken,
            outputKey: \ListEndpointsByPlatformApplicationResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEndpointsByPlatformApplication(_:logger:)``.
    ///
    /// - Parameters:
    ///   - platformApplicationArn:  PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEndpointsByPlatformApplicationPaginator(
        platformApplicationArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEndpointsByPlatformApplicationInput, ListEndpointsByPlatformApplicationResponse> {
        let input = ListEndpointsByPlatformApplicationInput(
            platformApplicationArn: platformApplicationArn
        )
        return self.listEndpointsByPlatformApplicationPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listOriginationNumbers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listOriginationNumbersPaginator(
        _ input: ListOriginationNumbersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListOriginationNumbersRequest, ListOriginationNumbersResult> {
        return .init(
            input: input,
            command: self.listOriginationNumbers,
            inputKey: \ListOriginationNumbersRequest.nextToken,
            outputKey: \ListOriginationNumbersResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listOriginationNumbers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of origination numbers to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listOriginationNumbersPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListOriginationNumbersRequest, ListOriginationNumbersResult> {
        let input = ListOriginationNumbersRequest(
            maxResults: maxResults
        )
        return self.listOriginationNumbersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPhoneNumbersOptedOut(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPhoneNumbersOptedOutPaginator(
        _ input: ListPhoneNumbersOptedOutInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPhoneNumbersOptedOutInput, ListPhoneNumbersOptedOutResponse> {
        return .init(
            input: input,
            command: self.listPhoneNumbersOptedOut,
            inputKey: \ListPhoneNumbersOptedOutInput.nextToken,
            outputKey: \ListPhoneNumbersOptedOutResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPhoneNumbersOptedOut(_:logger:)``.
    ///
    /// - Parameters:
    ///   - logger: Logger used for logging
    @inlinable
    public func listPhoneNumbersOptedOutPaginator(
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPhoneNumbersOptedOutInput, ListPhoneNumbersOptedOutResponse> {
        let input = ListPhoneNumbersOptedOutInput(
        )
        return self.listPhoneNumbersOptedOutPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPlatformApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPlatformApplicationsPaginator(
        _ input: ListPlatformApplicationsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPlatformApplicationsInput, ListPlatformApplicationsResponse> {
        return .init(
            input: input,
            command: self.listPlatformApplications,
            inputKey: \ListPlatformApplicationsInput.nextToken,
            outputKey: \ListPlatformApplicationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPlatformApplications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - logger: Logger used for logging
    @inlinable
    public func listPlatformApplicationsPaginator(
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPlatformApplicationsInput, ListPlatformApplicationsResponse> {
        let input = ListPlatformApplicationsInput(
        )
        return self.listPlatformApplicationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSMSSandboxPhoneNumbers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSMSSandboxPhoneNumbersPaginator(
        _ input: ListSMSSandboxPhoneNumbersInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSMSSandboxPhoneNumbersInput, ListSMSSandboxPhoneNumbersResult> {
        return .init(
            input: input,
            command: self.listSMSSandboxPhoneNumbers,
            inputKey: \ListSMSSandboxPhoneNumbersInput.nextToken,
            outputKey: \ListSMSSandboxPhoneNumbersResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSMSSandboxPhoneNumbers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of phone numbers to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSMSSandboxPhoneNumbersPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSMSSandboxPhoneNumbersInput, ListSMSSandboxPhoneNumbersResult> {
        let input = ListSMSSandboxPhoneNumbersInput(
            maxResults: maxResults
        )
        return self.listSMSSandboxPhoneNumbersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionsPaginator(
        _ input: ListSubscriptionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionsInput, ListSubscriptionsResponse> {
        return .init(
            input: input,
            command: self.listSubscriptions,
            inputKey: \ListSubscriptionsInput.nextToken,
            outputKey: \ListSubscriptionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionsPaginator(
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSubscriptionsInput, ListSubscriptionsResponse> {
        let input = ListSubscriptionsInput(
        )
        return self.listSubscriptionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSubscriptionsByTopic(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionsByTopicPaginator(
        _ input: ListSubscriptionsByTopicInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSubscriptionsByTopicInput, ListSubscriptionsByTopicResponse> {
        return .init(
            input: input,
            command: self.listSubscriptionsByTopic,
            inputKey: \ListSubscriptionsByTopicInput.nextToken,
            outputKey: \ListSubscriptionsByTopicResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSubscriptionsByTopic(_:logger:)``.
    ///
    /// - Parameters:
    ///   - topicArn: The ARN of the topic for which you wish to find subscriptions.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSubscriptionsByTopicPaginator(
        topicArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSubscriptionsByTopicInput, ListSubscriptionsByTopicResponse> {
        let input = ListSubscriptionsByTopicInput(
            topicArn: topicArn
        )
        return self.listSubscriptionsByTopicPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listTopics(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listTopicsPaginator(
        _ input: ListTopicsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTopicsInput, ListTopicsResponse> {
        return .init(
            input: input,
            command: self.listTopics,
            inputKey: \ListTopicsInput.nextToken,
            outputKey: \ListTopicsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listTopics(_:logger:)``.
    ///
    /// - Parameters:
    ///   - logger: Logger used for logging
    @inlinable
    public func listTopicsPaginator(
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListTopicsInput, ListTopicsResponse> {
        let input = ListTopicsInput(
        )
        return self.listTopicsPaginator(input, logger: logger)
    }
}

extension SNS.ListEndpointsByPlatformApplicationInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SNS.ListEndpointsByPlatformApplicationInput {
        return .init(
            nextToken: token,
            platformApplicationArn: self.platformApplicationArn
        )
    }
}

extension SNS.ListOriginationNumbersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SNS.ListOriginationNumbersRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SNS.ListPhoneNumbersOptedOutInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SNS.ListPhoneNumbersOptedOutInput {
        return .init(
            nextToken: token
        )
    }
}

extension SNS.ListPlatformApplicationsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SNS.ListPlatformApplicationsInput {
        return .init(
            nextToken: token
        )
    }
}

extension SNS.ListSMSSandboxPhoneNumbersInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SNS.ListSMSSandboxPhoneNumbersInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SNS.ListSubscriptionsByTopicInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SNS.ListSubscriptionsByTopicInput {
        return .init(
            nextToken: token,
            topicArn: self.topicArn
        )
    }
}

extension SNS.ListSubscriptionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SNS.ListSubscriptionsInput {
        return .init(
            nextToken: token
        )
    }
}

extension SNS.ListTopicsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> SNS.ListTopicsInput {
        return .init(
            nextToken: token
        )
    }
}
