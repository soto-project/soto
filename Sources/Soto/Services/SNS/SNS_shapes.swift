//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension SNS {
    // MARK: Enums

    public enum LanguageCodeString: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case deDE = "de-DE"
        case enGB = "en-GB"
        case enUS = "en-US"
        case es419 = "es-419"
        case esES = "es-ES"
        case frCA = "fr-CA"
        case frFR = "fr-FR"
        case itIT = "it-IT"
        case jpJP = "ja-JP"
        case krKR = "kr-KR"
        case ptBR = "pt-BR"
        case zhCN = "zh-CN"
        case zhTW = "zh-TW"
        public var description: String { return self.rawValue }
    }

    public enum NumberCapability: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case mms = "MMS"
        case sms = "SMS"
        case voice = "VOICE"
        public var description: String { return self.rawValue }
    }

    public enum RouteType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case premium = "Premium"
        case promotional = "Promotional"
        case transactional = "Transactional"
        public var description: String { return self.rawValue }
    }

    public enum SMSSandboxPhoneNumberVerificationStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case pending = "Pending"
        case verified = "Verified"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AddPermissionInput: AWSEncodableShape {
        /// The action you want to allow for the specified principal(s). Valid values: Any Amazon SNS action name, for example Publish.
        @CustomCoding<StandardArrayCoder<String>>
        public var actionName: [String]
        /// The Amazon Web Services account IDs of the users (principals) who will be given access to the specified actions. The users must have Amazon Web Services account, but do not need to be signed up for this service.
        @CustomCoding<StandardArrayCoder<String>>
        public var awsAccountId: [String]
        /// A unique identifier for the new policy statement.
        public let label: String
        /// The ARN of the topic whose access control policy you wish to modify.
        public let topicArn: String

        public init(actionName: [String], awsAccountId: [String], label: String, topicArn: String) {
            self.actionName = actionName
            self.awsAccountId = awsAccountId
            self.label = label
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case actionName = "ActionName"
            case awsAccountId = "AWSAccountId"
            case label = "Label"
            case topicArn = "TopicArn"
        }
    }

    public struct BatchResultErrorEntry: AWSDecodableShape {
        /// An error code representing why the action failed on this entry.
        public let code: String
        /// The Id of an entry in a batch request
        public let id: String
        /// A message explaining why the action failed on this entry.
        public let message: String?
        /// Specifies whether the error happened due to the caller of the batch API action.
        public let senderFault: Bool

        public init(code: String, id: String, message: String? = nil, senderFault: Bool) {
            self.code = code
            self.id = id
            self.message = message
            self.senderFault = senderFault
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case id = "Id"
            case message = "Message"
            case senderFault = "SenderFault"
        }
    }

    public struct CheckIfPhoneNumberIsOptedOutInput: AWSEncodableShape {
        /// The phone number for which you want to check the opt out status.
        public let phoneNumber: String

        public init(phoneNumber: String) {
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumber = "phoneNumber"
        }
    }

    public struct CheckIfPhoneNumberIsOptedOutResponse: AWSDecodableShape {
        /// Indicates whether the phone number is opted out:    true – The phone number is opted out, meaning you cannot publish SMS messages to it.    false – The phone number is opted in, meaning you can publish SMS messages to it.
        public let isOptedOut: Bool?

        public init(isOptedOut: Bool? = nil) {
            self.isOptedOut = isOptedOut
        }

        private enum CodingKeys: String, CodingKey {
            case isOptedOut = "isOptedOut"
        }
    }

    public struct ConfirmSubscriptionInput: AWSEncodableShape {
        /// Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is true and the request has an Amazon Web Services signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires Amazon Web Services authentication.
        public let authenticateOnUnsubscribe: String?
        /// Short-lived token sent to an endpoint during the Subscribe action.
        public let token: String
        /// The ARN of the topic for which you wish to confirm a subscription.
        public let topicArn: String

        public init(authenticateOnUnsubscribe: String? = nil, token: String, topicArn: String) {
            self.authenticateOnUnsubscribe = authenticateOnUnsubscribe
            self.token = token
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case authenticateOnUnsubscribe = "AuthenticateOnUnsubscribe"
            case token = "Token"
            case topicArn = "TopicArn"
        }
    }

    public struct ConfirmSubscriptionResponse: AWSDecodableShape {
        /// The ARN of the created subscription.
        public let subscriptionArn: String?

        public init(subscriptionArn: String? = nil) {
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct CreateEndpointResponse: AWSDecodableShape {
        /// EndpointArn returned from CreateEndpoint action.
        public let endpointArn: String?

        public init(endpointArn: String? = nil) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct CreatePlatformApplicationInput: AWSEncodableShape {
        /// For a list of attributes, see  SetPlatformApplicationAttributes .
        @CustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]
        /// Application names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, hyphens, and periods, and must be between 1 and 256 characters long.
        public let name: String
        /// The following platforms are supported: ADM (Amazon Device Messaging), APNS (Apple Push Notification Service), APNS_SANDBOX, and GCM (Firebase Cloud Messaging).
        public let platform: String

        public init(attributes: [String: String], name: String, platform: String) {
            self.attributes = attributes
            self.name = name
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case name = "Name"
            case platform = "Platform"
        }
    }

    public struct CreatePlatformApplicationResponse: AWSDecodableShape {
        ///  PlatformApplicationArn is returned.
        public let platformApplicationArn: String?

        public init(platformApplicationArn: String? = nil) {
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct CreatePlatformEndpointInput: AWSEncodableShape {
        /// For a list of attributes, see  SetEndpointAttributes .
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?
        /// Arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.
        public let customUserData: String?
        ///  PlatformApplicationArn returned from CreatePlatformApplication is used to create a an endpoint.
        public let platformApplicationArn: String
        /// Unique identifier created by the notification service for an app on a device. The specific name for Token will vary, depending on which notification service is being used. For example, when using APNS as the notification service, you need the device token. Alternatively, when using GCM (Firebase Cloud Messaging) or ADM, the device token equivalent is called the registration ID.
        public let token: String

        public init(attributes: [String: String]? = nil, customUserData: String? = nil, platformApplicationArn: String, token: String) {
            self.attributes = attributes
            self.customUserData = customUserData
            self.platformApplicationArn = platformApplicationArn
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case customUserData = "CustomUserData"
            case platformApplicationArn = "PlatformApplicationArn"
            case token = "Token"
        }
    }

    public struct CreateSMSSandboxPhoneNumberInput: AWSEncodableShape {
        /// The language to use for sending the OTP. The default value is en-US.
        public let languageCode: LanguageCodeString?
        /// The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to.
        public let phoneNumber: String

        public init(languageCode: LanguageCodeString? = nil, phoneNumber: String) {
            self.languageCode = languageCode
            self.phoneNumber = phoneNumber
        }

        public func validate(name: String) throws {
            try self.validate(self.phoneNumber, name: "phoneNumber", parent: name, max: 20)
            try self.validate(self.phoneNumber, name: "phoneNumber", parent: name, pattern: "^(\\+[0-9]{8,}|[0-9]{0,9})$")
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct CreateSMSSandboxPhoneNumberResult: AWSDecodableShape {
        public init() {}
    }

    public struct CreateTopicInput: AWSEncodableShape {
        /// A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that the CreateTopic action uses:    DeliveryPolicy – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.    DisplayName – The display name to use for a topic with SMS subscriptions.    FifoTopic – Set to true to create a FIFO topic.    Policy – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.    SignatureVersion – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, SignatureVersion is set to 1.    TracingConfig – Tracing mode of an Amazon SNS topic. By default TracingConfig is set to PassThrough, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to Active, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.   The following attribute applies only to server-side encryption:    KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see Key Terms. For more examples, see KeyId in the Key Management Service API Reference.    The following attributes apply only to FIFO topics:    ArchivePolicy – Adds or updates an inline policy document to archive messages stored in the specified Amazon SNS topic.    BeginningArchiveTime – The earliest starting point at which a message in the topic’s archive can be replayed from. This point in time is based on the configured message retention period set by the topic’s message archiving policy.    ContentBasedDeduplication – Enables content-based deduplication for FIFO topics.   By default, ContentBasedDeduplication is set to false. If you create a FIFO topic and this attribute is false, you must specify a value for the MessageDeduplicationId parameter for the Publish action.    When you set ContentBasedDeduplication to true,  Amazon SNS uses a SHA-256 hash to generate the MessageDeduplicationId using  the body of the message (but not the attributes of the message). (Optional) To override the generated value, you can specify a value for the MessageDeduplicationId parameter for the Publish action.
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?
        /// The body of the policy document you want to use for this topic. You can only add one policy per topic. The policy must be in JSON string format. Length Constraints: Maximum length of 30,720.
        public let dataProtectionPolicy: String?
        /// The name of the topic you want to create. Constraints: Topic names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long. For a FIFO (first-in-first-out) topic, the name must end with the .fifo suffix.
        public let name: String
        /// The list of tags to add to a new topic.  To be able to tag a topic on creation, you must have the sns:CreateTopic and sns:TagResource permissions.
        @OptionalCustomCoding<StandardArrayCoder<Tag>>
        public var tags: [Tag]?

        public init(attributes: [String: String]? = nil, dataProtectionPolicy: String? = nil, name: String, tags: [Tag]? = nil) {
            self.attributes = attributes
            self.dataProtectionPolicy = dataProtectionPolicy
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case dataProtectionPolicy = "DataProtectionPolicy"
            case name = "Name"
            case tags = "Tags"
        }
    }

    public struct CreateTopicResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) assigned to the created topic.
        public let topicArn: String?

        public init(topicArn: String? = nil) {
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct DeleteEndpointInput: AWSEncodableShape {
        ///  EndpointArn of endpoint to delete.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct DeletePlatformApplicationInput: AWSEncodableShape {
        ///  PlatformApplicationArn of platform application object to delete.
        public let platformApplicationArn: String

        public init(platformApplicationArn: String) {
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct DeleteSMSSandboxPhoneNumberInput: AWSEncodableShape {
        /// The destination phone number to delete.
        public let phoneNumber: String

        public init(phoneNumber: String) {
            self.phoneNumber = phoneNumber
        }

        public func validate(name: String) throws {
            try self.validate(self.phoneNumber, name: "phoneNumber", parent: name, max: 20)
            try self.validate(self.phoneNumber, name: "phoneNumber", parent: name, pattern: "^(\\+[0-9]{8,}|[0-9]{0,9})$")
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct DeleteSMSSandboxPhoneNumberResult: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteTopicInput: AWSEncodableShape {
        /// The ARN of the topic you want to delete.
        public let topicArn: String

        public init(topicArn: String) {
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct Endpoint: AWSDecodableShape {
        /// Attributes for endpoint.
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?
        /// The EndpointArn for mobile app and device.
        public let endpointArn: String?

        public init(attributes: [String: String]? = nil, endpointArn: String? = nil) {
            self.attributes = attributes
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case endpointArn = "EndpointArn"
        }
    }

    public struct GetDataProtectionPolicyInput: AWSEncodableShape {
        /// The ARN of the topic whose DataProtectionPolicy you want to get. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct GetDataProtectionPolicyResponse: AWSDecodableShape {
        /// Retrieves the DataProtectionPolicy in JSON string format.
        public let dataProtectionPolicy: String?

        public init(dataProtectionPolicy: String? = nil) {
            self.dataProtectionPolicy = dataProtectionPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case dataProtectionPolicy = "DataProtectionPolicy"
        }
    }

    public struct GetEndpointAttributesInput: AWSEncodableShape {
        ///  EndpointArn for GetEndpointAttributes input.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct GetEndpointAttributesResponse: AWSDecodableShape {
        /// Attributes include the following:    CustomUserData – arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.    Enabled – flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.    Token – device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.  The device token for the iOS platform is returned in lowercase.
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct GetPlatformApplicationAttributesInput: AWSEncodableShape {
        ///  PlatformApplicationArn for GetPlatformApplicationAttributesInput.
        public let platformApplicationArn: String

        public init(platformApplicationArn: String) {
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct GetPlatformApplicationAttributesResponse: AWSDecodableShape {
        /// Attributes include the following:    AppleCertificateExpiryDate – The expiry date of the SSL certificate used to configure certificate-based authentication.    ApplePlatformTeamID – The Apple developer account ID used to configure token-based authentication.    ApplePlatformBundleID – The app identifier used to configure token-based authentication.    AuthenticationMethod – Returns the credential type used when sending push notifications from application to APNS/APNS_Sandbox, or application to GCM.   APNS – Returns the token or certificate.   GCM – Returns the token or key.      EventEndpointCreated – Topic ARN to which EndpointCreated event notifications should be sent.    EventEndpointDeleted – Topic ARN to which EndpointDeleted event notifications should be sent.    EventEndpointUpdated – Topic ARN to which EndpointUpdate event notifications should be sent.    EventDeliveryFailure – Topic ARN to which DeliveryFailure event notifications should be sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct GetSMSAttributesInput: AWSEncodableShape {
        /// A list of the individual attribute names, such as MonthlySpendLimit, for which you want values. For all attribute names, see SetSMSAttributes. If you don't use this parameter, Amazon SNS returns all SMS attributes.
        @OptionalCustomCoding<StandardArrayCoder<String>>
        public var attributes: [String]?

        public init(attributes: [String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct GetSMSAttributesResponse: AWSDecodableShape {
        /// The SMS attribute names and their values.
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct GetSMSSandboxAccountStatusInput: AWSEncodableShape {
        public init() {}
    }

    public struct GetSMSSandboxAccountStatusResult: AWSDecodableShape {
        /// Indicates whether the calling Amazon Web Services account is in the SMS sandbox.
        public let isInSandbox: Bool

        public init(isInSandbox: Bool) {
            self.isInSandbox = isInSandbox
        }

        private enum CodingKeys: String, CodingKey {
            case isInSandbox = "IsInSandbox"
        }
    }

    public struct GetSubscriptionAttributesInput: AWSEncodableShape {
        /// The ARN of the subscription whose properties you want to get.
        public let subscriptionArn: String

        public init(subscriptionArn: String) {
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct GetSubscriptionAttributesResponse: AWSDecodableShape {
        /// A map of the subscription's attributes. Attributes in this map include the following:    ConfirmationWasAuthenticated – true if the subscription confirmation request was authenticated.    DeliveryPolicy – The JSON serialization of the subscription's delivery policy.    EffectiveDeliveryPolicy – The JSON serialization of the effective delivery policy that takes into account the topic delivery policy and account system defaults.    FilterPolicy – The filter policy JSON that is assigned to the subscription. For more information, see Amazon SNS Message Filtering in the Amazon SNS Developer Guide.    FilterPolicyScope – This attribute lets you choose the filtering scope by using one of the following string value types:    MessageAttributes (default) – The filter is applied on the message attributes.    MessageBody – The filter is applied on the message body.      Owner – The Amazon Web Services account ID of the subscription's owner.    PendingConfirmation – true if the subscription hasn't been confirmed. To confirm a pending subscription, call the ConfirmSubscription action with a confirmation token.    RawMessageDelivery – true if raw message delivery is enabled for the subscription. Raw messages are free of JSON formatting and can be sent to HTTP/S and Amazon SQS endpoints.    RedrivePolicy – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.  Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held  in the dead-letter queue for further analysis or reprocessing.    SubscriptionArn – The subscription's ARN.    TopicArn – The topic ARN that the subscription is associated with.   The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:    SubscriptionRoleArn – The ARN of the IAM role that has the following:   Permission to write to the Kinesis Data Firehose delivery stream   Amazon SNS listed as a trusted entity   Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.  For more information, see Fanout  to Kinesis Data Firehose delivery streams in the Amazon SNS Developer Guide.
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct GetTopicAttributesInput: AWSEncodableShape {
        /// The ARN of the topic whose properties you want to get.
        public let topicArn: String

        public init(topicArn: String) {
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct GetTopicAttributesResponse: AWSDecodableShape {
        /// A map of the topic's attributes. Attributes in this map include the following:    DeliveryPolicy – The JSON serialization of the topic's delivery policy.    DisplayName – The human-readable name used in the From field for notifications to email and email-json endpoints.    EffectiveDeliveryPolicy – The JSON serialization of the effective delivery policy, taking system defaults into account.    Owner – The Amazon Web Services account ID of the topic's owner.    Policy – The JSON serialization of the topic's access control policy.    SignatureVersion – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS.   By default, SignatureVersion is set to 1. The signature is a Base64-encoded SHA1withRSA signature.   When you set SignatureVersion to 2. Amazon SNS uses a Base64-encoded SHA256withRSA signature.   If the API response does not include the SignatureVersion attribute, it means that the SignatureVersion for the topic has value 1.       SubscriptionsConfirmed – The number of confirmed subscriptions for the topic.    SubscriptionsDeleted – The number of deleted subscriptions for the topic.    SubscriptionsPending – The number of subscriptions pending confirmation for the topic.    TopicArn – The topic's ARN.    TracingConfig – Tracing mode of an Amazon SNS topic. By default TracingConfig is set to PassThrough, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to Active, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.   The following attribute applies only to server-side-encryption:    KmsMasterKeyId - The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see Key Terms. For more examples, see KeyId in the Key Management Service API Reference.   The following attributes apply only to FIFO topics:    FifoTopic – When this is set to true, a FIFO topic is created.    ContentBasedDeduplication – Enables content-based deduplication for FIFO topics.   By default, ContentBasedDeduplication is set to false. If you create a FIFO topic and this attribute is false, you must specify a value for the MessageDeduplicationId parameter for the Publish action.    When you set ContentBasedDeduplication to true,  Amazon SNS uses a SHA-256 hash to generate the MessageDeduplicationId using  the body of the message (but not the attributes of the message). (Optional) To override the generated value, you can specify a value for the MessageDeduplicationId parameter for the Publish action.
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?

        public init(attributes: [String: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct ListEndpointsByPlatformApplicationInput: AWSEncodableShape {
        ///  NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results.
        public let nextToken: String?
        ///  PlatformApplicationArn for ListEndpointsByPlatformApplicationInput action.
        public let platformApplicationArn: String

        public init(nextToken: String? = nil, platformApplicationArn: String) {
            self.nextToken = nextToken
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct ListEndpointsByPlatformApplicationResponse: AWSDecodableShape {
        /// Endpoints returned for ListEndpointsByPlatformApplication action.
        @OptionalCustomCoding<StandardArrayCoder<Endpoint>>
        public var endpoints: [Endpoint]?
        ///  NextToken string is returned when calling ListEndpointsByPlatformApplication action if additional records are available after the first page results.
        public let nextToken: String?

        public init(endpoints: [Endpoint]? = nil, nextToken: String? = nil) {
            self.endpoints = endpoints
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case endpoints = "Endpoints"
            case nextToken = "NextToken"
        }
    }

    public struct ListOriginationNumbersRequest: AWSEncodableShape {
        /// The maximum number of origination numbers to return.
        public let maxResults: Int?
        /// Token that the previous ListOriginationNumbers request returns.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 30)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListOriginationNumbersResult: AWSDecodableShape {
        /// A NextToken string is returned when you call the ListOriginationNumbers operation if additional pages of records are available.
        public let nextToken: String?
        /// A list of the calling account's verified and pending origination numbers.
        @OptionalCustomCoding<StandardArrayCoder<PhoneNumberInformation>>
        public var phoneNumbers: [PhoneNumberInformation]?

        public init(nextToken: String? = nil, phoneNumbers: [PhoneNumberInformation]? = nil) {
            self.nextToken = nextToken
            self.phoneNumbers = phoneNumbers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case phoneNumbers = "PhoneNumbers"
        }
    }

    public struct ListPhoneNumbersOptedOutInput: AWSEncodableShape {
        /// A NextToken string is used when you call the ListPhoneNumbersOptedOut action to retrieve additional records that are available after the first page of results.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
        }
    }

    public struct ListPhoneNumbersOptedOutResponse: AWSDecodableShape {
        /// A NextToken string is returned when you call the ListPhoneNumbersOptedOut action if additional records are available after the first page of results.
        public let nextToken: String?
        /// A list of phone numbers that are opted out of receiving SMS messages. The list is paginated, and each page can contain up to 100 phone numbers.
        @OptionalCustomCoding<StandardArrayCoder<String>>
        public var phoneNumbers: [String]?

        public init(nextToken: String? = nil, phoneNumbers: [String]? = nil) {
            self.nextToken = nextToken
            self.phoneNumbers = phoneNumbers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case phoneNumbers = "phoneNumbers"
        }
    }

    public struct ListPlatformApplicationsInput: AWSEncodableShape {
        ///  NextToken string is used when calling ListPlatformApplications action to retrieve additional records that are available after the first page results.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct ListPlatformApplicationsResponse: AWSDecodableShape {
        ///  NextToken string is returned when calling ListPlatformApplications action if additional records are available after the first page results.
        public let nextToken: String?
        /// Platform applications returned when calling ListPlatformApplications action.
        @OptionalCustomCoding<StandardArrayCoder<PlatformApplication>>
        public var platformApplications: [PlatformApplication]?

        public init(nextToken: String? = nil, platformApplications: [PlatformApplication]? = nil) {
            self.nextToken = nextToken
            self.platformApplications = platformApplications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case platformApplications = "PlatformApplications"
        }
    }

    public struct ListSMSSandboxPhoneNumbersInput: AWSEncodableShape {
        /// The maximum number of phone numbers to return.
        public let maxResults: Int?
        /// Token that the previous ListSMSSandboxPhoneNumbersInput request returns.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListSMSSandboxPhoneNumbersResult: AWSDecodableShape {
        /// A NextToken string is returned when you call the ListSMSSandboxPhoneNumbersInput operation if additional pages of records are available.
        public let nextToken: String?
        /// A list of the calling account's pending and verified phone numbers.
        @CustomCoding<StandardArrayCoder<SMSSandboxPhoneNumber>>
        public var phoneNumbers: [SMSSandboxPhoneNumber]

        public init(nextToken: String? = nil, phoneNumbers: [SMSSandboxPhoneNumber]) {
            self.nextToken = nextToken
            self.phoneNumbers = phoneNumbers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case phoneNumbers = "PhoneNumbers"
        }
    }

    public struct ListSubscriptionsByTopicInput: AWSEncodableShape {
        /// Token returned by the previous ListSubscriptionsByTopic request.
        public let nextToken: String?
        /// The ARN of the topic for which you wish to find subscriptions.
        public let topicArn: String

        public init(nextToken: String? = nil, topicArn: String) {
            self.nextToken = nextToken
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case topicArn = "TopicArn"
        }
    }

    public struct ListSubscriptionsByTopicResponse: AWSDecodableShape {
        /// Token to pass along to the next ListSubscriptionsByTopic request. This element is returned if there are more subscriptions to retrieve.
        public let nextToken: String?
        /// A list of subscriptions.
        @OptionalCustomCoding<StandardArrayCoder<Subscription>>
        public var subscriptions: [Subscription]?

        public init(nextToken: String? = nil, subscriptions: [Subscription]? = nil) {
            self.nextToken = nextToken
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case subscriptions = "Subscriptions"
        }
    }

    public struct ListSubscriptionsInput: AWSEncodableShape {
        /// Token returned by the previous ListSubscriptions request.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct ListSubscriptionsResponse: AWSDecodableShape {
        /// Token to pass along to the next ListSubscriptions request. This element is returned if there are more subscriptions to retrieve.
        public let nextToken: String?
        /// A list of subscriptions.
        @OptionalCustomCoding<StandardArrayCoder<Subscription>>
        public var subscriptions: [Subscription]?

        public init(nextToken: String? = nil, subscriptions: [Subscription]? = nil) {
            self.nextToken = nextToken
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case subscriptions = "Subscriptions"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        /// The ARN of the topic for which to list tags.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The tags associated with the specified topic.
        @OptionalCustomCoding<StandardArrayCoder<Tag>>
        public var tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct ListTopicsInput: AWSEncodableShape {
        /// Token returned by the previous ListTopics request.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct ListTopicsResponse: AWSDecodableShape {
        /// Token to pass along to the next ListTopics request. This element is returned if there are additional topics to retrieve.
        public let nextToken: String?
        /// A list of topic ARNs.
        @OptionalCustomCoding<StandardArrayCoder<Topic>>
        public var topics: [Topic]?

        public init(nextToken: String? = nil, topics: [Topic]? = nil) {
            self.nextToken = nextToken
            self.topics = topics
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case topics = "Topics"
        }
    }

    public struct MessageAttributeValue: AWSEncodableShape {
        /// Binary type attributes can store any binary data, for example, compressed data, encrypted data, or images.
        public let binaryValue: AWSBase64Data?
        /// Amazon SNS supports the following logical data types: String, String.Array, Number, and Binary. For more information, see Message Attribute Data Types.
        public let dataType: String
        /// Strings are Unicode with UTF8 binary encoding. For a list of code values, see ASCII Printable Characters.
        public let stringValue: String?

        public init(binaryValue: AWSBase64Data? = nil, dataType: String, stringValue: String? = nil) {
            self.binaryValue = binaryValue
            self.dataType = dataType
            self.stringValue = stringValue
        }

        private enum CodingKeys: String, CodingKey {
            case binaryValue = "BinaryValue"
            case dataType = "DataType"
            case stringValue = "StringValue"
        }
    }

    public struct OptInPhoneNumberInput: AWSEncodableShape {
        /// The phone number to opt in. Use E.164 format.
        public let phoneNumber: String

        public init(phoneNumber: String) {
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumber = "phoneNumber"
        }
    }

    public struct OptInPhoneNumberResponse: AWSDecodableShape {
        public init() {}
    }

    public struct PhoneNumberInformation: AWSDecodableShape {
        /// The date and time when the phone number was created.
        public let createdAt: Date?
        /// The two-character code for the country or region, in ISO 3166-1 alpha-2 format.
        public let iso2CountryCode: String?
        /// The capabilities of each phone number.
        @OptionalCustomCoding<StandardArrayCoder<NumberCapability>>
        public var numberCapabilities: [NumberCapability]?
        /// The phone number.
        public let phoneNumber: String?
        /// The list of supported routes.
        public let routeType: RouteType?
        /// The status of the phone number.
        public let status: String?

        public init(createdAt: Date? = nil, iso2CountryCode: String? = nil, numberCapabilities: [NumberCapability]? = nil, phoneNumber: String? = nil, routeType: RouteType? = nil, status: String? = nil) {
            self.createdAt = createdAt
            self.iso2CountryCode = iso2CountryCode
            self.numberCapabilities = numberCapabilities
            self.phoneNumber = phoneNumber
            self.routeType = routeType
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case iso2CountryCode = "Iso2CountryCode"
            case numberCapabilities = "NumberCapabilities"
            case phoneNumber = "PhoneNumber"
            case routeType = "RouteType"
            case status = "Status"
        }
    }

    public struct PlatformApplication: AWSDecodableShape {
        /// Attributes for platform application object.
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?
        /// PlatformApplicationArn for platform application object.
        public let platformApplicationArn: String?

        public init(attributes: [String: String]? = nil, platformApplicationArn: String? = nil) {
            self.attributes = attributes
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct PublishBatchInput: AWSEncodableShape {
        /// A list of PublishBatch request entries to be sent to the SNS topic.
        @CustomCoding<StandardArrayCoder<PublishBatchRequestEntry>>
        public var publishBatchRequestEntries: [PublishBatchRequestEntry]
        /// The Amazon resource name (ARN) of the topic you want to batch publish to.
        public let topicArn: String

        public init(publishBatchRequestEntries: [PublishBatchRequestEntry], topicArn: String) {
            self.publishBatchRequestEntries = publishBatchRequestEntries
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case publishBatchRequestEntries = "PublishBatchRequestEntries"
            case topicArn = "TopicArn"
        }
    }

    public struct PublishBatchRequestEntry: AWSEncodableShape {
        public struct _MessageAttributesEncoding: DictionaryCoderProperties {
            public static let entry: String? = "entry"
            public static let key = "Name"
            public static let value = "Value"
        }

        /// An identifier for the message in this batch.  The Ids of a batch request must be unique within a request.  This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        public let id: String
        /// The body of the message.
        public let message: String
        /// Each message attribute consists of a Name, Type, and Value. For more information, see Amazon SNS message attributes in the Amazon SNS Developer Guide.
        @OptionalCustomCoding<DictionaryCoder<_MessageAttributesEncoding, String, MessageAttributeValue>>
        public var messageAttributes: [String: MessageAttributeValue]?
        /// This parameter applies only to FIFO (first-in-first-out) topics. The token used for deduplication of messages within a 5-minute minimum deduplication interval. If a message with a particular MessageDeduplicationId is sent successfully, subsequent messages with the same MessageDeduplicationId are accepted successfully but aren't delivered.   Every message must have a unique MessageDeduplicationId.   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your topic, Amazon SNS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).   If you don't provide a MessageDeduplicationId and the topic doesn't have ContentBasedDeduplication set, the action fails with an error.   If the topic has a ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.      When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled, and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.     The MessageDeduplicationId is available to the consumer of the message (this can be useful for troubleshooting delivery issues). If a message is sent successfully but the acknowledgement is lost and the message is resent with the same MessageDeduplicationId after the deduplication interval, Amazon SNS can't detect duplicate messages.  Amazon SNS continues to keep track of the message deduplication ID even after the message is received and deleted.   The length of MessageDeduplicationId is 128 characters.  MessageDeduplicationId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~).
        public let messageDeduplicationId: String?
        /// This parameter applies only to FIFO (first-in-first-out) topics. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single topic, use MessageGroupId values (for example, session data for multiple users). In this scenario, multiple consumers can process the topic, but the session data of each user is processed in a FIFO fashion.  You must associate a non-empty MessageGroupId with a message. If you don't provide a MessageGroupId, the action fails.  The length of MessageGroupId is 128 characters.  MessageGroupId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~).   MessageGroupId is required for FIFO topics. You can't use it for standard topics.
        public let messageGroupId: String?
        /// Set MessageStructure to json if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set MessageStructure to json, the value of the Message parameter must:    be a syntactically valid JSON object; and   contain at least a top-level JSON key of "default" with a value that is a string.   You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g. http).
        public let messageStructure: String?
        /// The subject of the batch message.
        public let subject: String?

        public init(id: String, message: String, messageAttributes: [String: MessageAttributeValue]? = nil, messageDeduplicationId: String? = nil, messageGroupId: String? = nil, messageStructure: String? = nil, subject: String? = nil) {
            self.id = id
            self.message = message
            self.messageAttributes = messageAttributes
            self.messageDeduplicationId = messageDeduplicationId
            self.messageGroupId = messageGroupId
            self.messageStructure = messageStructure
            self.subject = subject
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case message = "Message"
            case messageAttributes = "MessageAttributes"
            case messageDeduplicationId = "MessageDeduplicationId"
            case messageGroupId = "MessageGroupId"
            case messageStructure = "MessageStructure"
            case subject = "Subject"
        }
    }

    public struct PublishBatchResponse: AWSDecodableShape {
        /// A list of failed PublishBatch responses.
        @OptionalCustomCoding<StandardArrayCoder<BatchResultErrorEntry>>
        public var failed: [BatchResultErrorEntry]?
        /// A list of successful PublishBatch responses.
        @OptionalCustomCoding<StandardArrayCoder<PublishBatchResultEntry>>
        public var successful: [PublishBatchResultEntry]?

        public init(failed: [BatchResultErrorEntry]? = nil, successful: [PublishBatchResultEntry]? = nil) {
            self.failed = failed
            self.successful = successful
        }

        private enum CodingKeys: String, CodingKey {
            case failed = "Failed"
            case successful = "Successful"
        }
    }

    public struct PublishBatchResultEntry: AWSDecodableShape {
        /// The Id of an entry in a batch request.
        public let id: String?
        /// An identifier for the message.
        public let messageId: String?
        /// This parameter applies only to FIFO (first-in-first-out) topics. The large, non-consecutive number that Amazon SNS assigns to each message. The length of SequenceNumber is 128 bits. SequenceNumber continues to increase for a particular MessageGroupId.
        public let sequenceNumber: String?

        public init(id: String? = nil, messageId: String? = nil, sequenceNumber: String? = nil) {
            self.id = id
            self.messageId = messageId
            self.sequenceNumber = sequenceNumber
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case messageId = "MessageId"
            case sequenceNumber = "SequenceNumber"
        }
    }

    public struct PublishInput: AWSEncodableShape {
        public struct _MessageAttributesEncoding: DictionaryCoderProperties {
            public static let entry: String? = "entry"
            public static let key = "Name"
            public static let value = "Value"
        }

        /// The message you want to send. If you are publishing to a topic and you want to send the same message to all transport protocols, include the text of the message as a String value. If you want to send different messages for each transport protocol, set the value of the MessageStructure parameter to json and use a JSON object for the Message parameter.    Constraints:   With the exception of SMS, messages must be UTF-8 encoded strings and at most 256 KB in size (262,144 bytes, not 262,144 characters).   For SMS, each message can contain up to 140 characters. This character limit depends on the encoding schema. For example, an SMS message can contain 160 GSM characters, 140 ASCII characters, or 70 UCS-2 characters. If you publish a message that exceeds this size limit, Amazon SNS sends the message as multiple messages, each fitting within the size limit. Messages aren't truncated mid-word but are cut off at whole-word boundaries. The total size limit for a single SMS Publish action is 1,600 characters.   JSON-specific constraints:   Keys in the JSON object that correspond to supported transport protocols must have simple JSON string values.   The values will be parsed (unescaped) before they are used in outgoing messages.   Outbound notifications are JSON encoded (meaning that the characters will be reescaped for sending).   Values have a minimum length of 0 (the empty string, "", is allowed).   Values have a maximum length bounded by the overall message size (so, including multiple protocols may limit message sizes).   Non-string values will cause the key to be ignored.   Keys that do not correspond to supported transport protocols are ignored.   Duplicate keys are not allowed.   Failure to parse or validate any key or value in the message will cause the Publish call to return an error (no partial delivery).
        public let message: String
        /// Message attributes for Publish action.
        @OptionalCustomCoding<DictionaryCoder<_MessageAttributesEncoding, String, MessageAttributeValue>>
        public var messageAttributes: [String: MessageAttributeValue]?
        /// This parameter applies only to FIFO (first-in-first-out) topics. The MessageDeduplicationId can contain up to 128 alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~). Every message must have a unique MessageDeduplicationId, which is a token used for deduplication of sent messages. If a message with a particular MessageDeduplicationId is sent successfully, any message sent with the same MessageDeduplicationId during the 5-minute deduplication interval is treated as a duplicate.  If the topic has ContentBasedDeduplication set, the system generates a MessageDeduplicationId based on the contents of the message. Your MessageDeduplicationId overrides the generated one.
        public let messageDeduplicationId: String?
        /// This parameter applies only to FIFO (first-in-first-out) topics. The MessageGroupId can contain up to 128 alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~). The MessageGroupId is a tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). Every message must include a MessageGroupId.
        public let messageGroupId: String?
        /// Set MessageStructure to json if you want to send a different message for each protocol. For example, using one publish action, you can send a short message to your SMS subscribers and a longer message to your email subscribers. If you set MessageStructure to json, the value of the Message parameter must:    be a syntactically valid JSON object; and   contain at least a top-level JSON key of "default" with a value that is a string.   You can define other top-level keys that define the message you want to send to a specific transport protocol (e.g., "http"). Valid value: json
        public let messageStructure: String?
        /// The phone number to which you want to deliver an SMS message. Use E.164 format. If you don't specify a value for the PhoneNumber parameter, you must specify a value for the TargetArn or TopicArn parameters.
        public let phoneNumber: String?
        /// Optional parameter to be used as the "Subject" line when the message is delivered to email endpoints. This field will also be included, if present, in the standard JSON messages delivered to other endpoints. Constraints: Subjects must be ASCII text that begins with a letter, number, or punctuation mark; must not include line breaks or control characters; and must be less than 100 characters long.
        public let subject: String?
        /// If you don't specify a value for the TargetArn parameter, you must specify a value for the PhoneNumber or TopicArn parameters.
        public let targetArn: String?
        /// The topic you want to publish to. If you don't specify a value for the TopicArn parameter, you must specify a value for the PhoneNumber or TargetArn parameters.
        public let topicArn: String?

        public init(message: String, messageAttributes: [String: MessageAttributeValue]? = nil, messageDeduplicationId: String? = nil, messageGroupId: String? = nil, messageStructure: String? = nil, phoneNumber: String? = nil, subject: String? = nil, targetArn: String? = nil, topicArn: String? = nil) {
            self.message = message
            self.messageAttributes = messageAttributes
            self.messageDeduplicationId = messageDeduplicationId
            self.messageGroupId = messageGroupId
            self.messageStructure = messageStructure
            self.phoneNumber = phoneNumber
            self.subject = subject
            self.targetArn = targetArn
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case messageAttributes = "MessageAttributes"
            case messageDeduplicationId = "MessageDeduplicationId"
            case messageGroupId = "MessageGroupId"
            case messageStructure = "MessageStructure"
            case phoneNumber = "PhoneNumber"
            case subject = "Subject"
            case targetArn = "TargetArn"
            case topicArn = "TopicArn"
        }
    }

    public struct PublishResponse: AWSDecodableShape {
        /// Unique identifier assigned to the published message. Length Constraint: Maximum 100 characters
        public let messageId: String?
        /// This response element applies only to FIFO (first-in-first-out) topics.  The sequence number is a large, non-consecutive number that Amazon SNS assigns to each message. The length of SequenceNumber is 128 bits. SequenceNumber continues to increase for each MessageGroupId.
        public let sequenceNumber: String?

        public init(messageId: String? = nil, sequenceNumber: String? = nil) {
            self.messageId = messageId
            self.sequenceNumber = sequenceNumber
        }

        private enum CodingKeys: String, CodingKey {
            case messageId = "MessageId"
            case sequenceNumber = "SequenceNumber"
        }
    }

    public struct PutDataProtectionPolicyInput: AWSEncodableShape {
        /// The JSON serialization of the topic's DataProtectionPolicy. The DataProtectionPolicy must be in JSON string format. Length Constraints: Maximum length of 30,720.
        public let dataProtectionPolicy: String
        /// The ARN of the topic whose DataProtectionPolicy you want to add or update. For more information about ARNs, see Amazon Resource Names (ARNs) in the Amazon Web Services General Reference.
        public let resourceArn: String

        public init(dataProtectionPolicy: String, resourceArn: String) {
            self.dataProtectionPolicy = dataProtectionPolicy
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case dataProtectionPolicy = "DataProtectionPolicy"
            case resourceArn = "ResourceArn"
        }
    }

    public struct RemovePermissionInput: AWSEncodableShape {
        /// The unique label of the statement you want to remove.
        public let label: String
        /// The ARN of the topic whose access control policy you wish to modify.
        public let topicArn: String

        public init(label: String, topicArn: String) {
            self.label = label
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case label = "Label"
            case topicArn = "TopicArn"
        }
    }

    public struct SMSSandboxPhoneNumber: AWSDecodableShape {
        /// The destination phone number.
        public let phoneNumber: String?
        /// The destination phone number's verification status.
        public let status: SMSSandboxPhoneNumberVerificationStatus?

        public init(phoneNumber: String? = nil, status: SMSSandboxPhoneNumberVerificationStatus? = nil) {
            self.phoneNumber = phoneNumber
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case phoneNumber = "PhoneNumber"
            case status = "Status"
        }
    }

    public struct SetEndpointAttributesInput: AWSEncodableShape {
        /// A map of the endpoint attributes. Attributes in this map include the following:    CustomUserData – arbitrary user data to associate with the endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and less than 2KB.    Enabled – flag that enables/disables delivery to the endpoint. Amazon SNS will set this to false when a notification service indicates to Amazon SNS that the endpoint is invalid. Users can set it back to true, typically after updating Token.    Token – device token, also referred to as a registration id, for an app and mobile device. This is returned from the notification service when an app and mobile device are registered with the notification service.
        @CustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]
        /// EndpointArn used for SetEndpointAttributes action.
        public let endpointArn: String

        public init(attributes: [String: String], endpointArn: String) {
            self.attributes = attributes
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case endpointArn = "EndpointArn"
        }
    }

    public struct SetPlatformApplicationAttributesInput: AWSEncodableShape {
        /// A map of the platform application attributes. Attributes in this map include the following:    PlatformCredential – The credential received from the notification service.   For ADM, PlatformCredentialis client secret.   For Apple Services using certificate credentials, PlatformCredential is private key.   For Apple Services using token credentials, PlatformCredential is signing key.   For GCM (Firebase Cloud Messaging) using key credentials, there is no PlatformPrincipal. The PlatformCredential is API key.   For GCM (Firebase Cloud Messaging) using token credentials, there is no PlatformPrincipal. The PlatformCredential is a JSON formatted private key file. When using the Amazon Web Services CLI, the file must be in string format and special characters must be ignored. To format the file correctly, Amazon SNS recommends using the following command: SERVICE_JSON=`jq @json .        PlatformPrincipal – The principal received from the notification service.   For ADM, PlatformPrincipalis client id.   For Apple Services using certificate credentials, PlatformPrincipal is SSL certificate.   For Apple Services using token credentials, PlatformPrincipal is signing key ID.   For GCM (Firebase Cloud Messaging), there is no PlatformPrincipal.         EventEndpointCreated – Topic ARN to which EndpointCreated event notifications are sent.    EventEndpointDeleted – Topic ARN to which EndpointDeleted event notifications are sent.    EventEndpointUpdated – Topic ARN to which EndpointUpdate event notifications are sent.    EventDeliveryFailure – Topic ARN to which DeliveryFailure event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.    SuccessFeedbackRoleArn – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.    FailureFeedbackRoleArn – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.    SuccessFeedbackSampleRate – Sample rate percentage (0-100) of successfully delivered messages.   The following attributes only apply to APNs token-based authentication:    ApplePlatformTeamID – The identifier that's assigned to your Apple developer account team.    ApplePlatformBundleID – The bundle identifier that's assigned to your iOS app.
        @CustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]
        ///  PlatformApplicationArn for SetPlatformApplicationAttributes action.
        public let platformApplicationArn: String

        public init(attributes: [String: String], platformApplicationArn: String) {
            self.attributes = attributes
            self.platformApplicationArn = platformApplicationArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case platformApplicationArn = "PlatformApplicationArn"
        }
    }

    public struct SetSMSAttributesInput: AWSEncodableShape {
        /// The default settings for sending SMS messages from your Amazon Web Services account. You can set values for the following attribute names:  MonthlySpendLimit – The maximum amount in USD that you are willing to spend each month to send SMS messages. When Amazon SNS determines that sending an SMS message would incur a cost that exceeds this limit, it stops sending SMS messages within minutes.  Amazon SNS stops sending SMS messages within minutes of the limit being crossed. During that interval, if you continue to send SMS messages, you will incur costs that exceed your limit.  By default, the spend limit is set to the maximum allowed by Amazon SNS. If you want to raise the limit, submit an SNS Limit Increase case. For New limit value, enter your desired monthly spend limit. In the Use Case Description field, explain that you are requesting an SMS monthly spend limit increase.  DeliveryStatusIAMRole – The ARN of the IAM role that allows Amazon SNS to write logs about SMS deliveries in CloudWatch Logs. For each SMS message that you send, Amazon SNS writes a log that includes the message price, the success or failure status, the reason for failure (if the message failed), the message dwell time, and other information.  DeliveryStatusSuccessSamplingRate – The percentage of successful SMS deliveries for which Amazon SNS will write logs in CloudWatch Logs. The value can be an integer from 0 - 100. For example, to write logs only for failed deliveries, set this value to 0. To write logs for 10% of your successful deliveries, set it to 10.  DefaultSenderID – A string, such as your business brand, that is displayed as the sender on the receiving device. Support for sender IDs varies by country. The sender ID can be 1 - 11 alphanumeric characters, and it must contain at least one letter.  DefaultSMSType – The type of SMS message that you will send by default. You can assign the following values:    Promotional – (Default) Noncritical messages, such as marketing messages. Amazon SNS optimizes the message delivery to incur the lowest cost.    Transactional – Critical messages that support customer transactions, such as one-time passcodes for multi-factor authentication. Amazon SNS optimizes the message delivery to achieve the highest reliability.    UsageReportS3Bucket – The name of the Amazon S3 bucket to receive daily SMS usage reports from Amazon SNS. Each day, Amazon SNS will deliver a usage report as a CSV file to the bucket. The report includes the following information for each SMS message that was successfully delivered by your Amazon Web Services account:   Time that the message was published (in UTC)   Message ID   Destination phone number   Message type   Delivery status   Message price (in USD)   Part number (a message is split into multiple parts if it is too long for a single message)   Total number of parts   To receive the report, the bucket must have a policy that allows the Amazon SNS service principal to perform the s3:PutObject and s3:GetBucketLocation actions. For an example bucket policy and usage report, see Monitoring SMS Activity in the Amazon SNS Developer Guide.
        @CustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]

        public init(attributes: [String: String]) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct SetSMSAttributesResponse: AWSDecodableShape {
        public init() {}
    }

    public struct SetSubscriptionAttributesInput: AWSEncodableShape {
        /// A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that this action uses:    DeliveryPolicy – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.    FilterPolicy – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.    FilterPolicyScope – This attribute lets you choose the filtering scope by using one of the following string value types:    MessageAttributes (default) – The filter is applied on the message attributes.    MessageBody – The filter is applied on the message body.      RawMessageDelivery – When set to true, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.    RedrivePolicy – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.  Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held  in the dead-letter queue for further analysis or reprocessing.   The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:    SubscriptionRoleArn – The ARN of the IAM role that has the following:   Permission to write to the Kinesis Data Firehose delivery stream   Amazon SNS listed as a trusted entity   Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.  For more information, see Fanout  to Kinesis Data Firehose delivery streams in the Amazon SNS Developer Guide.
        public let attributeName: String
        /// The new value for the attribute in JSON format.
        public let attributeValue: String?
        /// The ARN of the subscription to modify.
        public let subscriptionArn: String

        public init(attributeName: String, attributeValue: String? = nil, subscriptionArn: String) {
            self.attributeName = attributeName
            self.attributeValue = attributeValue
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeValue = "AttributeValue"
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct SetTopicAttributesInput: AWSEncodableShape {
        /// A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that the SetTopicAttributes action uses:    ApplicationSuccessFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to a platform application endpoint.    DeliveryPolicy – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.    DisplayName – The display name to use for a topic with SMS subscriptions.    Policy – The policy that defines who can access your topic. By default, only the topic owner can publish or subscribe to the topic.    TracingConfig – Tracing mode of an Amazon SNS topic. By default TracingConfig is set to PassThrough, and the topic passes through the tracing header it receives from an Amazon SNS publisher to its subscriptions. If set to Active, Amazon SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. This is only supported on standard topics.   HTTP    HTTPSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.     HTTPSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an HTTP endpoint.    HTTPFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.     Amazon Kinesis Data Firehose    FirehoseSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.    FirehoseSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.    FirehoseFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.      Lambda    LambdaSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint.    LambdaSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Lambda endpoint.    LambdaFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Lambda endpoint.      Platform application endpoint    ApplicationSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.    ApplicationSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.    ApplicationFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Web Services application endpoint.    In addition to being able to configure topic attributes for message delivery status of notification messages sent to Amazon SNS application endpoints, you can also configure application attributes for the delivery status of push notification messages sent to push notification services. For example, For more information, see Using Amazon SNS Application Attributes for Message Delivery Status.     Amazon SQS    SQSSuccessFeedbackRoleArn – Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint.     SQSSuccessFeedbackSampleRate – Indicates percentage of successful messages to sample for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint.     SQSFailureFeedbackRoleArn – Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint.       The SuccessFeedbackRoleArn and FailureFeedbackRoleArn attributes are used to give Amazon SNS write access to use CloudWatch Logs on your behalf. The SuccessFeedbackSampleRate attribute is for specifying the sample rate percentage (0-100) of successfully delivered messages. After you configure the FailureFeedbackRoleArn attribute, then all failed message deliveries generate CloudWatch Logs.   The following attribute applies only to server-side-encryption:    KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see Key Terms. For more examples, see KeyId in the Key Management Service API Reference.     SignatureVersion – The signature version corresponds to the hashing algorithm used while creating the signature of the notifications, subscription confirmations, or unsubscribe confirmation messages sent by Amazon SNS. By default, SignatureVersion is set to 1.   The following attribute applies only to FIFO topics:    ContentBasedDeduplication – Enables content-based deduplication for FIFO topics.   By default, ContentBasedDeduplication is set to false. If you create a FIFO topic and this attribute is false, you must specify a value for the MessageDeduplicationId parameter for the Publish action.    When you set ContentBasedDeduplication to true,  Amazon SNS uses a SHA-256 hash to generate the MessageDeduplicationId using  the body of the message (but not the attributes of the message). (Optional) To override the generated value, you can specify a value for the MessageDeduplicationId parameter for the Publish action.
        public let attributeName: String
        /// The new value for the attribute.
        public let attributeValue: String?
        /// The ARN of the topic to modify.
        public let topicArn: String

        public init(attributeName: String, attributeValue: String? = nil, topicArn: String) {
            self.attributeName = attributeName
            self.attributeValue = attributeValue
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeValue = "AttributeValue"
            case topicArn = "TopicArn"
        }
    }

    public struct SubscribeInput: AWSEncodableShape {
        /// A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that the Subscribe action uses:    DeliveryPolicy – The policy that defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.    FilterPolicy – The simple JSON object that lets your subscriber receive only a subset of messages, rather than receiving every message published to the topic.    FilterPolicyScope – This attribute lets you choose the filtering scope by using one of the following string value types:    MessageAttributes (default) – The filter is applied on the message attributes.    MessageBody – The filter is applied on the message body.      RawMessageDelivery – When set to true, enables raw message delivery to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints to process JSON formatting, which is otherwise created for Amazon SNS metadata.    RedrivePolicy – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.  Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable) or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held  in the dead-letter queue for further analysis or reprocessing.   The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:    SubscriptionRoleArn – The ARN of the IAM role that has the following:   Permission to write to the Kinesis Data Firehose delivery stream   Amazon SNS listed as a trusted entity   Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.  For more information, see Fanout  to Kinesis Data Firehose delivery streams in the Amazon SNS Developer Guide.   The following attributes apply only to FIFO topics:    ReplayPolicy – Adds or updates an inline policy document for a subscription to replay messages stored in the specified Amazon SNS topic.    ReplayStatus – Retrieves the status of the subscription message replay, which can be one of the following:    Completed – The replay has successfully redelivered all messages, and is now delivering newly published messages. If an ending point was specified in the ReplayPolicy then the subscription will no longer receive newly published messages.    In progress – The replay is currently replaying the selected messages.    Failed – The replay was unable to complete.    Pending – The default state while the replay initiates.
        @OptionalCustomCoding<StandardDictionaryCoder<String, String>>
        public var attributes: [String: String]?
        /// The endpoint that you want to receive notifications. Endpoints vary by protocol:   For the http protocol, the (public) endpoint is a URL beginning with http://.   For the https protocol, the (public) endpoint is a URL beginning with https://.   For the email protocol, the endpoint is an email address.   For the email-json protocol, the endpoint is an email address.   For the sms protocol, the endpoint is a phone number of an SMS-enabled device.   For the sqs protocol, the endpoint is the ARN of an Amazon SQS queue.   For the application protocol, the endpoint is the EndpointArn of a mobile app and device.   For the lambda protocol, the endpoint is the ARN of an Lambda function.   For the firehose protocol, the endpoint is the ARN of an Amazon Kinesis Data Firehose delivery stream.
        public let endpoint: String?
        /// The protocol that you want to use. Supported protocols include:    http – delivery of JSON-encoded message via HTTP POST    https – delivery of JSON-encoded message via HTTPS POST    email – delivery of message via SMTP    email-json – delivery of JSON-encoded message via SMTP    sms – delivery of message via SMS    sqs – delivery of JSON-encoded message to an Amazon SQS queue    application – delivery of JSON-encoded message to an EndpointArn for a mobile app and device    lambda – delivery of JSON-encoded message to an Lambda function    firehose – delivery of JSON-encoded message to an Amazon Kinesis Data Firehose delivery stream.
        public let `protocol`: String
        /// Sets whether the response from the Subscribe request includes the subscription ARN, even if the subscription is not yet confirmed. If you set this parameter to true, the response includes the ARN in all cases, even if the subscription is not yet confirmed. In addition to the ARN for confirmed subscriptions, the response also includes the pending subscription ARN value for subscriptions that aren't yet confirmed. A subscription becomes confirmed when the subscriber calls the ConfirmSubscription action with a confirmation token.  The default value is false.
        public let returnSubscriptionArn: Bool?
        /// The ARN of the topic you want to subscribe to.
        public let topicArn: String

        public init(attributes: [String: String]? = nil, endpoint: String? = nil, protocol: String, returnSubscriptionArn: Bool? = nil, topicArn: String) {
            self.attributes = attributes
            self.endpoint = endpoint
            self.`protocol` = `protocol`
            self.returnSubscriptionArn = returnSubscriptionArn
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case endpoint = "Endpoint"
            case `protocol` = "Protocol"
            case returnSubscriptionArn = "ReturnSubscriptionArn"
            case topicArn = "TopicArn"
        }
    }

    public struct SubscribeResponse: AWSDecodableShape {
        /// The ARN of the subscription if it is confirmed, or the string "pending confirmation" if the subscription requires confirmation. However, if the API request parameter ReturnSubscriptionArn is true, then the value is always the subscription ARN, even if the subscription requires confirmation.
        public let subscriptionArn: String?

        public init(subscriptionArn: String? = nil) {
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct Subscription: AWSDecodableShape {
        /// The subscription's endpoint (format depends on the protocol).
        public let endpoint: String?
        /// The subscription's owner.
        public let owner: String?
        /// The subscription's protocol.
        public let `protocol`: String?
        /// The subscription's ARN.
        public let subscriptionArn: String?
        /// The ARN of the subscription's topic.
        public let topicArn: String?

        public init(endpoint: String? = nil, owner: String? = nil, protocol: String? = nil, subscriptionArn: String? = nil, topicArn: String? = nil) {
            self.endpoint = endpoint
            self.owner = owner
            self.`protocol` = `protocol`
            self.subscriptionArn = subscriptionArn
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "Endpoint"
            case owner = "Owner"
            case `protocol` = "Protocol"
            case subscriptionArn = "SubscriptionArn"
            case topicArn = "TopicArn"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The required key portion of the tag.
        public let key: String
        /// The optional value portion of the tag.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The ARN of the topic to which to add tags.
        public let resourceArn: String
        /// The tags to be added to the specified topic. A tag consists of a required key and an optional value.
        @CustomCoding<StandardArrayCoder<Tag>>
        public var tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Topic: AWSDecodableShape {
        /// The topic's ARN.
        public let topicArn: String?

        public init(topicArn: String? = nil) {
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicArn = "TopicArn"
        }
    }

    public struct UnsubscribeInput: AWSEncodableShape {
        /// The ARN of the subscription to be deleted.
        public let subscriptionArn: String

        public init(subscriptionArn: String) {
            self.subscriptionArn = subscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionArn = "SubscriptionArn"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The ARN of the topic from which to remove tags.
        public let resourceArn: String
        /// The list of tag keys to remove from the specified topic.
        @CustomCoding<StandardArrayCoder<String>>
        public var tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, max: 1011)
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, min: 1)
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct VerifySMSSandboxPhoneNumberInput: AWSEncodableShape {
        /// The OTP sent to the destination number from the CreateSMSSandBoxPhoneNumber call.
        public let oneTimePassword: String
        /// The destination phone number to verify.
        public let phoneNumber: String

        public init(oneTimePassword: String, phoneNumber: String) {
            self.oneTimePassword = oneTimePassword
            self.phoneNumber = phoneNumber
        }

        public func validate(name: String) throws {
            try self.validate(self.oneTimePassword, name: "oneTimePassword", parent: name, max: 8)
            try self.validate(self.oneTimePassword, name: "oneTimePassword", parent: name, min: 5)
            try self.validate(self.oneTimePassword, name: "oneTimePassword", parent: name, pattern: "^[0-9]+$")
            try self.validate(self.phoneNumber, name: "phoneNumber", parent: name, max: 20)
            try self.validate(self.phoneNumber, name: "phoneNumber", parent: name, pattern: "^(\\+[0-9]{8,}|[0-9]{0,9})$")
        }

        private enum CodingKeys: String, CodingKey {
            case oneTimePassword = "OneTimePassword"
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct VerifySMSSandboxPhoneNumberResult: AWSDecodableShape {
        public init() {}
    }
}

// MARK: - Errors

/// Error enum for SNS
public struct SNSErrorType: AWSErrorType {
    enum Code: String {
        case authorizationErrorException = "AuthorizationError"
        case batchEntryIdsNotDistinctException = "BatchEntryIdsNotDistinct"
        case batchRequestTooLongException = "BatchRequestTooLong"
        case concurrentAccessException = "ConcurrentAccess"
        case emptyBatchRequestException = "EmptyBatchRequest"
        case endpointDisabledException = "EndpointDisabled"
        case filterPolicyLimitExceededException = "FilterPolicyLimitExceeded"
        case internalErrorException = "InternalError"
        case invalidBatchEntryIdException = "InvalidBatchEntryId"
        case invalidParameterException = "InvalidParameter"
        case invalidParameterValueException = "ParameterValueInvalid"
        case invalidSecurityException = "InvalidSecurity"
        case invalidStateException = "InvalidState"
        case kmsAccessDeniedException = "KMSAccessDenied"
        case kmsDisabledException = "KMSDisabled"
        case kmsInvalidStateException = "KMSInvalidState"
        case kmsNotFoundException = "KMSNotFound"
        case kmsOptInRequired = "KMSOptInRequired"
        case kmsThrottlingException = "KMSThrottling"
        case notFoundException = "NotFound"
        case optedOutException = "OptedOut"
        case platformApplicationDisabledException = "PlatformApplicationDisabled"
        case replayLimitExceededException = "ReplayLimitExceeded"
        case resourceNotFoundException = "ResourceNotFound"
        case staleTagException = "StaleTag"
        case subscriptionLimitExceededException = "SubscriptionLimitExceeded"
        case tagLimitExceededException = "TagLimitExceeded"
        case tagPolicyException = "TagPolicy"
        case throttledException = "Throttled"
        case tooManyEntriesInBatchRequestException = "TooManyEntriesInBatchRequest"
        case topicLimitExceededException = "TopicLimitExceeded"
        case userErrorException = "UserError"
        case validationException = "ValidationException"
        case verificationException = "VerificationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize SNS
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// Indicates that the user has been denied access to the requested resource.
    public static var authorizationErrorException: Self { .init(.authorizationErrorException) }
    /// Two or more batch entries in the request have the same Id.
    public static var batchEntryIdsNotDistinctException: Self { .init(.batchEntryIdsNotDistinctException) }
    /// The length of all the batch messages put together is more than the limit.
    public static var batchRequestTooLongException: Self { .init(.batchRequestTooLongException) }
    /// Can't perform multiple operations on a tag simultaneously. Perform the operations sequentially.
    public static var concurrentAccessException: Self { .init(.concurrentAccessException) }
    /// The batch request doesn't contain any entries.
    public static var emptyBatchRequestException: Self { .init(.emptyBatchRequestException) }
    /// Exception error indicating endpoint disabled.
    public static var endpointDisabledException: Self { .init(.endpointDisabledException) }
    /// Indicates that the number of filter polices in your Amazon Web Services account exceeds the limit. To add more filter polices, submit an Amazon SNS Limit Increase case in the Amazon Web Services Support Center.
    public static var filterPolicyLimitExceededException: Self { .init(.filterPolicyLimitExceededException) }
    /// Indicates an internal service error.
    public static var internalErrorException: Self { .init(.internalErrorException) }
    /// The Id of a batch entry in a batch request doesn't abide by the specification.
    public static var invalidBatchEntryIdException: Self { .init(.invalidBatchEntryIdException) }
    /// Indicates that a request parameter does not comply with the associated constraints.
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    /// Indicates that a request parameter does not comply with the associated constraints.
    public static var invalidParameterValueException: Self { .init(.invalidParameterValueException) }
    /// The credential signature isn't valid. You must use an HTTPS endpoint and sign your request using Signature Version 4.
    public static var invalidSecurityException: Self { .init(.invalidSecurityException) }
    /// Indicates that the specified state is not a valid state for an event source.
    public static var invalidStateException: Self { .init(.invalidStateException) }
    /// The ciphertext references a key that doesn't exist or that you don't have access to.
    public static var kmsAccessDeniedException: Self { .init(.kmsAccessDeniedException) }
    /// The request was rejected because the specified Amazon Web Services KMS key isn't enabled.
    public static var kmsDisabledException: Self { .init(.kmsDisabledException) }
    /// The request was rejected because the state of the specified resource isn't valid for this request. For more information, see Key states of Amazon Web Services KMS keys in the Key Management Service Developer Guide.
    public static var kmsInvalidStateException: Self { .init(.kmsInvalidStateException) }
    /// The request was rejected because the specified entity or resource can't be found.
    public static var kmsNotFoundException: Self { .init(.kmsNotFoundException) }
    /// The Amazon Web Services access key ID needs a subscription for the service.
    public static var kmsOptInRequired: Self { .init(.kmsOptInRequired) }
    /// The request was denied due to request throttling. For more information about throttling, see Limits in the Key Management Service Developer Guide.
    public static var kmsThrottlingException: Self { .init(.kmsThrottlingException) }
    /// Indicates that the requested resource does not exist.
    public static var notFoundException: Self { .init(.notFoundException) }
    /// Indicates that the specified phone number opted out of receiving SMS messages from your Amazon Web Services account. You can't send SMS messages to phone numbers that opt out.
    public static var optedOutException: Self { .init(.optedOutException) }
    /// Exception error indicating platform application disabled.
    public static var platformApplicationDisabledException: Self { .init(.platformApplicationDisabledException) }
    /// Indicates that the request parameter has exceeded the maximum number of concurrent message replays.
    public static var replayLimitExceededException: Self { .init(.replayLimitExceededException) }
    /// Can’t perform the action on the specified resource. Make sure that the resource exists.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// A tag has been added to a resource with the same ARN as a deleted resource. Wait a short while and then retry the operation.
    public static var staleTagException: Self { .init(.staleTagException) }
    /// Indicates that the customer already owns the maximum allowed number of subscriptions.
    public static var subscriptionLimitExceededException: Self { .init(.subscriptionLimitExceededException) }
    /// Can't add more than 50 tags to a topic.
    public static var tagLimitExceededException: Self { .init(.tagLimitExceededException) }
    /// The request doesn't comply with the IAM tag policy. Correct your request and then retry it.
    public static var tagPolicyException: Self { .init(.tagPolicyException) }
    /// Indicates that the rate at which requests have been submitted for this action exceeds the limit for your Amazon Web Services account.
    public static var throttledException: Self { .init(.throttledException) }
    /// The batch request contains more entries than permissible.
    public static var tooManyEntriesInBatchRequestException: Self { .init(.tooManyEntriesInBatchRequestException) }
    /// Indicates that the customer already owns the maximum allowed number of topics.
    public static var topicLimitExceededException: Self { .init(.topicLimitExceededException) }
    /// Indicates that a request parameter does not comply with the associated constraints.
    public static var userErrorException: Self { .init(.userErrorException) }
    /// Indicates that a parameter in the request is invalid.
    public static var validationException: Self { .init(.validationException) }
    /// Indicates that the one-time password (OTP) used for verification is invalid.
    public static var verificationException: Self { .init(.verificationException) }
}

extension SNSErrorType: Equatable {
    public static func == (lhs: SNSErrorType, rhs: SNSErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SNSErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
