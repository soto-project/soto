//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS CustomerProfiles service.
///
/// Amazon Connect Customer Profiles    Customer Profiles actions     Customer Profiles data types    Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center.  For more information about the Amazon Connect Customer Profiles feature, see Use Customer Profiles in the Amazon Connect Administrator's Guide.
public struct CustomerProfiles: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the CustomerProfiles client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "CustomerProfiles",
            serviceIdentifier: "profile",
            serviceProtocol: .restjson,
            apiVersion: "2020-08-15",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: CustomerProfilesErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "ca-central-1": "profile-fips.ca-central-1.amazonaws.com",
            "us-east-1": "profile-fips.us-east-1.amazonaws.com",
            "us-west-2": "profile-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Associates a new key value with a specific profile, such as a Contact Record ContactId. A profile object can have a single unique key and any number of additional keys that can be used to identify the profile that it belongs to.
    @Sendable
    @inlinable
    public func addProfileKey(_ input: AddProfileKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddProfileKeyResponse {
        try await self.client.execute(
            operation: "AddProfileKey", 
            path: "/domains/{DomainName}/profiles/keys", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a new key value with a specific profile, such as a Contact Record ContactId. A profile object can have a single unique key and any number of additional keys that can be used to identify the profile that it belongs to.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - keyName: A searchable identifier of a customer profile. The predefined keys you can use include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.
    ///   - profileId: The unique identifier of a customer profile.
    ///   - values: A list of key values.
    ///   - logger: Logger use during operation
    @inlinable
    public func addProfileKey(
        domainName: String,
        keyName: String,
        profileId: String,
        values: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddProfileKeyResponse {
        let input = AddProfileKeyRequest(
            domainName: domainName, 
            keyName: keyName, 
            profileId: profileId, 
            values: values
        )
        return try await self.addProfileKey(input, logger: logger)
    }

    /// Fetch the possible attribute values given the attribute name.
    @Sendable
    @inlinable
    public func batchGetCalculatedAttributeForProfile(_ input: BatchGetCalculatedAttributeForProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetCalculatedAttributeForProfileResponse {
        try await self.client.execute(
            operation: "BatchGetCalculatedAttributeForProfile", 
            path: "/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}/batch-get-for-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Fetch the possible attribute values given the attribute name.
    ///
    /// Parameters:
    ///   - calculatedAttributeName: The unique name of the calculated attribute.
    ///   - conditionOverrides: Overrides the condition block within the original calculated attribute definition.
    ///   - domainName: The unique name of the domain.
    ///   - profileIds: List of unique identifiers for customer profiles to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchGetCalculatedAttributeForProfile(
        calculatedAttributeName: String,
        conditionOverrides: ConditionOverrides? = nil,
        domainName: String,
        profileIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchGetCalculatedAttributeForProfileResponse {
        let input = BatchGetCalculatedAttributeForProfileRequest(
            calculatedAttributeName: calculatedAttributeName, 
            conditionOverrides: conditionOverrides, 
            domainName: domainName, 
            profileIds: profileIds
        )
        return try await self.batchGetCalculatedAttributeForProfile(input, logger: logger)
    }

    /// Get a batch of profiles.
    @Sendable
    @inlinable
    public func batchGetProfile(_ input: BatchGetProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetProfileResponse {
        try await self.client.execute(
            operation: "BatchGetProfile", 
            path: "/domains/{DomainName}/batch-get-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get a batch of profiles.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - profileIds: List of unique identifiers for customer profiles to retrieve.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchGetProfile(
        domainName: String,
        profileIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchGetProfileResponse {
        let input = BatchGetProfileRequest(
            domainName: domainName, 
            profileIds: profileIds
        )
        return try await self.batchGetProfile(input, logger: logger)
    }

    /// Creates a new calculated attribute definition. After creation, new object data ingested into Customer Profiles will be included in the calculated attribute, which can be retrieved for a profile using the GetCalculatedAttributeForProfile API. Defining a calculated attribute makes it available for all profiles within a domain. Each calculated attribute can only reference one ObjectType and at most, two fields from that ObjectType.
    @Sendable
    @inlinable
    public func createCalculatedAttributeDefinition(_ input: CreateCalculatedAttributeDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCalculatedAttributeDefinitionResponse {
        try await self.client.execute(
            operation: "CreateCalculatedAttributeDefinition", 
            path: "/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new calculated attribute definition. After creation, new object data ingested into Customer Profiles will be included in the calculated attribute, which can be retrieved for a profile using the GetCalculatedAttributeForProfile API. Defining a calculated attribute makes it available for all profiles within a domain. Each calculated attribute can only reference one ObjectType and at most, two fields from that ObjectType.
    ///
    /// Parameters:
    ///   - attributeDetails: Mathematical expression and a list of attribute items specified in that expression.
    ///   - calculatedAttributeName: The unique name of the calculated attribute.
    ///   - conditions: The conditions including range, object count, and threshold for the calculated attribute.
    ///   - description: The description of the calculated attribute.
    ///   - displayName: The display name of the calculated attribute.
    ///   - domainName: The unique name of the domain.
    ///   - filter: Defines how to filter incoming objects to include part of the Calculated Attribute.
    ///   - statistic: The aggregation operation to perform for the calculated attribute.
    ///   - tags: The tags used to organize, track, or control access for this resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCalculatedAttributeDefinition(
        attributeDetails: AttributeDetails,
        calculatedAttributeName: String,
        conditions: Conditions? = nil,
        description: String? = nil,
        displayName: String? = nil,
        domainName: String,
        filter: Filter? = nil,
        statistic: Statistic,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCalculatedAttributeDefinitionResponse {
        let input = CreateCalculatedAttributeDefinitionRequest(
            attributeDetails: attributeDetails, 
            calculatedAttributeName: calculatedAttributeName, 
            conditions: conditions, 
            description: description, 
            displayName: displayName, 
            domainName: domainName, 
            filter: filter, 
            statistic: statistic, 
            tags: tags
        )
        return try await self.createCalculatedAttributeDefinition(input, logger: logger)
    }

    /// Creates a domain, which is a container for all customer data, such as customer profile attributes, object types, profile keys, and encryption keys. You can create multiple domains, and each domain can have multiple third-party integrations. Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain. Use this API or UpdateDomain to enable identity resolution: set Matching to true. To prevent cross-service impersonation when you call this API, see Cross-service confused deputy prevention for sample policies that you should apply.   It is not possible to associate a Customer Profiles domain with an Amazon Connect Instance directly from the API. If you would like to create a domain and associate a Customer Profiles domain, use the Amazon Connect admin website. For more information, see Enable Customer Profiles. Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.
    @Sendable
    @inlinable
    public func createDomain(_ input: CreateDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDomainResponse {
        try await self.client.execute(
            operation: "CreateDomain", 
            path: "/domains/{DomainName}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a domain, which is a container for all customer data, such as customer profile attributes, object types, profile keys, and encryption keys. You can create multiple domains, and each domain can have multiple third-party integrations. Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain. Use this API or UpdateDomain to enable identity resolution: set Matching to true. To prevent cross-service impersonation when you call this API, see Cross-service confused deputy prevention for sample policies that you should apply.   It is not possible to associate a Customer Profiles domain with an Amazon Connect Instance directly from the API. If you would like to create a domain and associate a Customer Profiles domain, use the Amazon Connect admin website. For more information, see Enable Customer Profiles. Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.
    ///
    /// Parameters:
    ///   - deadLetterQueueUrl: The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.
    ///   - defaultEncryptionKey: The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.
    ///   - defaultExpirationDays: The default number of days until the data within the domain expires.
    ///   - domainName: The unique name of the domain.
    ///   - matching: The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly
    ///   - ruleBasedMatching: The process of matching duplicate profiles using the Rule-Based matching. If RuleBasedMatching = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the RuleBasedMatchingRequest. You can use the ListRuleBasedMatches and GetSimilarProfiles API to return and review the results. Also, if you have configured ExportingConfig in the RuleBasedMatchingRequest, you can download the results from S3.
    ///   - tags: The tags used to organize, track, or control access for this resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDomain(
        deadLetterQueueUrl: String? = nil,
        defaultEncryptionKey: String? = nil,
        defaultExpirationDays: Int,
        domainName: String,
        matching: MatchingRequest? = nil,
        ruleBasedMatching: RuleBasedMatchingRequest? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDomainResponse {
        let input = CreateDomainRequest(
            deadLetterQueueUrl: deadLetterQueueUrl, 
            defaultEncryptionKey: defaultEncryptionKey, 
            defaultExpirationDays: defaultExpirationDays, 
            domainName: domainName, 
            matching: matching, 
            ruleBasedMatching: ruleBasedMatching, 
            tags: tags
        )
        return try await self.createDomain(input, logger: logger)
    }

    /// Creates an event stream, which is a subscription to real-time events, such as when profiles are created and updated through Amazon Connect Customer Profiles. Each event stream can be associated with only one Kinesis Data Stream destination in the same region and Amazon Web Services account as the customer profiles domain
    @Sendable
    @inlinable
    public func createEventStream(_ input: CreateEventStreamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEventStreamResponse {
        try await self.client.execute(
            operation: "CreateEventStream", 
            path: "/domains/{DomainName}/event-streams/{EventStreamName}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an event stream, which is a subscription to real-time events, such as when profiles are created and updated through Amazon Connect Customer Profiles. Each event stream can be associated with only one Kinesis Data Stream destination in the same region and Amazon Web Services account as the customer profiles domain
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - eventStreamName: The name of the event stream.
    ///   - tags: The tags used to organize, track, or control access for this resource.
    ///   - uri: The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name
    ///   - logger: Logger use during operation
    @inlinable
    public func createEventStream(
        domainName: String,
        eventStreamName: String,
        tags: [String: String]? = nil,
        uri: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEventStreamResponse {
        let input = CreateEventStreamRequest(
            domainName: domainName, 
            eventStreamName: eventStreamName, 
            tags: tags, 
            uri: uri
        )
        return try await self.createEventStream(input, logger: logger)
    }

    /// Creates an event trigger, which specifies the rules when to perform action based on customer's ingested data. Each event stream can be associated with only one integration in the same region and AWS account as the event stream.
    @Sendable
    @inlinable
    public func createEventTrigger(_ input: CreateEventTriggerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEventTriggerResponse {
        try await self.client.execute(
            operation: "CreateEventTrigger", 
            path: "/domains/{DomainName}/event-triggers/{EventTriggerName}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an event trigger, which specifies the rules when to perform action based on customer's ingested data. Each event stream can be associated with only one integration in the same region and AWS account as the event stream.
    ///
    /// Parameters:
    ///   - description: The description of the event trigger.
    ///   - domainName: The unique name of the domain.
    ///   - eventTriggerConditions: A list of conditions that determine when an event should trigger the destination.
    ///   - eventTriggerLimits: Defines limits controlling whether an event triggers the destination, based on ingestion latency and the number of invocations per profile over specific time periods.
    ///   - eventTriggerName: The unique name of the event trigger.
    ///   - objectTypeName: The unique name of the object type.
    ///   - segmentFilter: The destination is triggered only for profiles that meet the criteria of a segment definition.
    ///   - tags: An array of key-value pairs to apply to this resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEventTrigger(
        description: String? = nil,
        domainName: String,
        eventTriggerConditions: [EventTriggerCondition],
        eventTriggerLimits: EventTriggerLimits? = nil,
        eventTriggerName: String,
        objectTypeName: String,
        segmentFilter: String? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEventTriggerResponse {
        let input = CreateEventTriggerRequest(
            description: description, 
            domainName: domainName, 
            eventTriggerConditions: eventTriggerConditions, 
            eventTriggerLimits: eventTriggerLimits, 
            eventTriggerName: eventTriggerName, 
            objectTypeName: objectTypeName, 
            segmentFilter: segmentFilter, 
            tags: tags
        )
        return try await self.createEventTrigger(input, logger: logger)
    }

    ///  Creates an integration workflow. An integration workflow is an async process which ingests historic data and sets up an integration for ongoing updates. The supported Amazon AppFlow sources are Salesforce, ServiceNow, and Marketo.
    @Sendable
    @inlinable
    public func createIntegrationWorkflow(_ input: CreateIntegrationWorkflowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIntegrationWorkflowResponse {
        try await self.client.execute(
            operation: "CreateIntegrationWorkflow", 
            path: "/domains/{DomainName}/workflows/integrations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Creates an integration workflow. An integration workflow is an async process which ingests historic data and sets up an integration for ongoing updates. The supported Amazon AppFlow sources are Salesforce, ServiceNow, and Marketo.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - integrationConfig: Configuration data for integration workflow.
    ///   - objectTypeName: The name of the profile object type.
    ///   - roleArn: The Amazon Resource Name (ARN) of the IAM role. Customer Profiles assumes this role to create resources on your behalf as part of workflow execution.
    ///   - tags: The tags used to organize, track, or control access for this resource.
    ///   - workflowType: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIntegrationWorkflow(
        domainName: String,
        integrationConfig: IntegrationConfig,
        objectTypeName: String,
        roleArn: String,
        tags: [String: String]? = nil,
        workflowType: WorkflowType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIntegrationWorkflowResponse {
        let input = CreateIntegrationWorkflowRequest(
            domainName: domainName, 
            integrationConfig: integrationConfig, 
            objectTypeName: objectTypeName, 
            roleArn: roleArn, 
            tags: tags, 
            workflowType: workflowType
        )
        return try await self.createIntegrationWorkflow(input, logger: logger)
    }

    /// Creates a standard profile. A standard profile represents the following attributes for a customer profile in a domain.
    @Sendable
    @inlinable
    public func createProfile(_ input: CreateProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProfileResponse {
        try await self.client.execute(
            operation: "CreateProfile", 
            path: "/domains/{DomainName}/profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a standard profile. A standard profile represents the following attributes for a customer profile in a domain.
    ///
    /// Parameters:
    ///   - accountNumber: An account number that you have given to the customer.
    ///   - additionalInformation: Any additional information relevant to the customer’s profile.
    ///   - address: A generic address associated with the customer that is not mailing, shipping, or billing.
    ///   - attributes: A key value pair of attributes of a customer profile.
    ///   - billingAddress: The customer’s billing address.
    ///   - birthDate: The customer’s birth date.
    ///   - businessEmailAddress: The customer’s business email address.
    ///   - businessName: The name of the customer’s business.
    ///   - businessPhoneNumber: The customer’s business phone number.
    ///   - domainName: The unique name of the domain.
    ///   - emailAddress: The customer’s email address, which has not been specified as a personal or business address.
    ///   - firstName: The customer’s first name.
    ///   - gender: The gender with which the customer identifies.
    ///   - genderString: An alternative to Gender which accepts any string as input.
    ///   - homePhoneNumber: The customer’s home phone number.
    ///   - lastName: The customer’s last name.
    ///   - mailingAddress: The customer’s mailing address.
    ///   - middleName: The customer’s middle name.
    ///   - mobilePhoneNumber: The customer’s mobile phone number.
    ///   - partyType: The type of profile used to describe the customer.
    ///   - partyTypeString: An alternative to PartyType which accepts any string as input.
    ///   - personalEmailAddress: The customer’s personal email address.
    ///   - phoneNumber: The customer’s phone number, which has not been specified as a mobile, home, or business number.
    ///   - shippingAddress: The customer’s shipping address.
    ///   - logger: Logger use during operation
    @inlinable
    public func createProfile(
        accountNumber: String? = nil,
        additionalInformation: String? = nil,
        address: Address? = nil,
        attributes: [String: String]? = nil,
        billingAddress: Address? = nil,
        birthDate: String? = nil,
        businessEmailAddress: String? = nil,
        businessName: String? = nil,
        businessPhoneNumber: String? = nil,
        domainName: String,
        emailAddress: String? = nil,
        firstName: String? = nil,
        gender: Gender? = nil,
        genderString: String? = nil,
        homePhoneNumber: String? = nil,
        lastName: String? = nil,
        mailingAddress: Address? = nil,
        middleName: String? = nil,
        mobilePhoneNumber: String? = nil,
        partyType: PartyType? = nil,
        partyTypeString: String? = nil,
        personalEmailAddress: String? = nil,
        phoneNumber: String? = nil,
        shippingAddress: Address? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProfileResponse {
        let input = CreateProfileRequest(
            accountNumber: accountNumber, 
            additionalInformation: additionalInformation, 
            address: address, 
            attributes: attributes, 
            billingAddress: billingAddress, 
            birthDate: birthDate, 
            businessEmailAddress: businessEmailAddress, 
            businessName: businessName, 
            businessPhoneNumber: businessPhoneNumber, 
            domainName: domainName, 
            emailAddress: emailAddress, 
            firstName: firstName, 
            gender: gender, 
            genderString: genderString, 
            homePhoneNumber: homePhoneNumber, 
            lastName: lastName, 
            mailingAddress: mailingAddress, 
            middleName: middleName, 
            mobilePhoneNumber: mobilePhoneNumber, 
            partyType: partyType, 
            partyTypeString: partyTypeString, 
            personalEmailAddress: personalEmailAddress, 
            phoneNumber: phoneNumber, 
            shippingAddress: shippingAddress
        )
        return try await self.createProfile(input, logger: logger)
    }

    /// Creates a segment definition associated to the given domain.
    @Sendable
    @inlinable
    public func createSegmentDefinition(_ input: CreateSegmentDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSegmentDefinitionResponse {
        try await self.client.execute(
            operation: "CreateSegmentDefinition", 
            path: "/domains/{DomainName}/segment-definitions/{SegmentDefinitionName}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a segment definition associated to the given domain.
    ///
    /// Parameters:
    ///   - description: The description of the segment definition.
    ///   - displayName: The display name of the segment definition.
    ///   - domainName: The unique name of the domain.
    ///   - segmentDefinitionName: The unique name of the segment definition.
    ///   - segmentGroups: Specifies the base segments and dimensions for a segment definition along with their respective relationship.
    ///   - tags: The tags used to organize, track, or control access for this resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSegmentDefinition(
        description: String? = nil,
        displayName: String,
        domainName: String,
        segmentDefinitionName: String,
        segmentGroups: SegmentGroup,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSegmentDefinitionResponse {
        let input = CreateSegmentDefinitionRequest(
            description: description, 
            displayName: displayName, 
            domainName: domainName, 
            segmentDefinitionName: segmentDefinitionName, 
            segmentGroups: segmentGroups, 
            tags: tags
        )
        return try await self.createSegmentDefinition(input, logger: logger)
    }

    /// Creates a segment estimate query.
    @Sendable
    @inlinable
    public func createSegmentEstimate(_ input: CreateSegmentEstimateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSegmentEstimateResponse {
        try await self.client.execute(
            operation: "CreateSegmentEstimate", 
            path: "/domains/{DomainName}/segment-estimates", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a segment estimate query.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - segmentQuery: The segment query for calculating a segment estimate.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSegmentEstimate(
        domainName: String,
        segmentQuery: SegmentGroupStructure,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSegmentEstimateResponse {
        let input = CreateSegmentEstimateRequest(
            domainName: domainName, 
            segmentQuery: segmentQuery
        )
        return try await self.createSegmentEstimate(input, logger: logger)
    }

    /// Triggers a job to export a segment to a specified destination.
    @Sendable
    @inlinable
    public func createSegmentSnapshot(_ input: CreateSegmentSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSegmentSnapshotResponse {
        try await self.client.execute(
            operation: "CreateSegmentSnapshot", 
            path: "/domains/{DomainName}/segments/{SegmentDefinitionName}/snapshots", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Triggers a job to export a segment to a specified destination.
    ///
    /// Parameters:
    ///   - dataFormat: The format in which the segment will be exported.
    ///   - destinationUri: The destination to which the segment will be exported. This field must be provided if the request is not submitted from the Amazon Connect Admin Website.
    ///   - domainName: The unique name of the domain.
    ///   - encryptionKey: The Amazon Resource Name (ARN) of the KMS key used to encrypt the exported segment.
    ///   - roleArn: The Amazon Resource Name (ARN) of the IAM role that allows Customer Profiles service principal to assume the role for conducting KMS and S3 operations.
    ///   - segmentDefinitionName: The name of the segment definition used in this snapshot request.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSegmentSnapshot(
        dataFormat: DataFormat,
        destinationUri: String? = nil,
        domainName: String,
        encryptionKey: String? = nil,
        roleArn: String? = nil,
        segmentDefinitionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSegmentSnapshotResponse {
        let input = CreateSegmentSnapshotRequest(
            dataFormat: dataFormat, 
            destinationUri: destinationUri, 
            domainName: domainName, 
            encryptionKey: encryptionKey, 
            roleArn: roleArn, 
            segmentDefinitionName: segmentDefinitionName
        )
        return try await self.createSegmentSnapshot(input, logger: logger)
    }

    /// Deletes an existing calculated attribute definition. Note that deleting a default calculated attribute is possible, however once deleted, you will be unable to undo that action and will need to recreate it on your own using the CreateCalculatedAttributeDefinition API if you want it back.
    @Sendable
    @inlinable
    public func deleteCalculatedAttributeDefinition(_ input: DeleteCalculatedAttributeDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCalculatedAttributeDefinitionResponse {
        try await self.client.execute(
            operation: "DeleteCalculatedAttributeDefinition", 
            path: "/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an existing calculated attribute definition. Note that deleting a default calculated attribute is possible, however once deleted, you will be unable to undo that action and will need to recreate it on your own using the CreateCalculatedAttributeDefinition API if you want it back.
    ///
    /// Parameters:
    ///   - calculatedAttributeName: The unique name of the calculated attribute.
    ///   - domainName: The unique name of the domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCalculatedAttributeDefinition(
        calculatedAttributeName: String,
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteCalculatedAttributeDefinitionResponse {
        let input = DeleteCalculatedAttributeDefinitionRequest(
            calculatedAttributeName: calculatedAttributeName, 
            domainName: domainName
        )
        return try await self.deleteCalculatedAttributeDefinition(input, logger: logger)
    }

    /// Deletes a specific domain and all of its customer data, such as customer profile attributes and their related objects.
    @Sendable
    @inlinable
    public func deleteDomain(_ input: DeleteDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDomainResponse {
        try await self.client.execute(
            operation: "DeleteDomain", 
            path: "/domains/{DomainName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a specific domain and all of its customer data, such as customer profile attributes and their related objects.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDomain(
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteDomainResponse {
        let input = DeleteDomainRequest(
            domainName: domainName
        )
        return try await self.deleteDomain(input, logger: logger)
    }

    /// Disables and deletes the specified event stream.
    @Sendable
    @inlinable
    public func deleteEventStream(_ input: DeleteEventStreamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEventStreamResponse {
        try await self.client.execute(
            operation: "DeleteEventStream", 
            path: "/domains/{DomainName}/event-streams/{EventStreamName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables and deletes the specified event stream.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - eventStreamName: The name of the event stream
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEventStream(
        domainName: String,
        eventStreamName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteEventStreamResponse {
        let input = DeleteEventStreamRequest(
            domainName: domainName, 
            eventStreamName: eventStreamName
        )
        return try await self.deleteEventStream(input, logger: logger)
    }

    /// Disable and deletes the Event Trigger.  You cannot delete an Event Trigger with an active Integration associated.
    @Sendable
    @inlinable
    public func deleteEventTrigger(_ input: DeleteEventTriggerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEventTriggerResponse {
        try await self.client.execute(
            operation: "DeleteEventTrigger", 
            path: "/domains/{DomainName}/event-triggers/{EventTriggerName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disable and deletes the Event Trigger.  You cannot delete an Event Trigger with an active Integration associated.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - eventTriggerName: The unique name of the event trigger.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEventTrigger(
        domainName: String,
        eventTriggerName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteEventTriggerResponse {
        let input = DeleteEventTriggerRequest(
            domainName: domainName, 
            eventTriggerName: eventTriggerName
        )
        return try await self.deleteEventTrigger(input, logger: logger)
    }

    /// Removes an integration from a specific domain.
    @Sendable
    @inlinable
    public func deleteIntegration(_ input: DeleteIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIntegrationResponse {
        try await self.client.execute(
            operation: "DeleteIntegration", 
            path: "/domains/{DomainName}/integrations/delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes an integration from a specific domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - uri: The URI of the S3 bucket or any other type of data source.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIntegration(
        domainName: String,
        uri: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIntegrationResponse {
        let input = DeleteIntegrationRequest(
            domainName: domainName, 
            uri: uri
        )
        return try await self.deleteIntegration(input, logger: logger)
    }

    /// Deletes the standard customer profile and all data pertaining to the profile.
    @Sendable
    @inlinable
    public func deleteProfile(_ input: DeleteProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProfileResponse {
        try await self.client.execute(
            operation: "DeleteProfile", 
            path: "/domains/{DomainName}/profiles/delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the standard customer profile and all data pertaining to the profile.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - profileId: The unique identifier of a customer profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProfile(
        domainName: String,
        profileId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProfileResponse {
        let input = DeleteProfileRequest(
            domainName: domainName, 
            profileId: profileId
        )
        return try await self.deleteProfile(input, logger: logger)
    }

    /// Removes a searchable key from a customer profile.
    @Sendable
    @inlinable
    public func deleteProfileKey(_ input: DeleteProfileKeyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProfileKeyResponse {
        try await self.client.execute(
            operation: "DeleteProfileKey", 
            path: "/domains/{DomainName}/profiles/keys/delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a searchable key from a customer profile.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - keyName: A searchable identifier of a customer profile.
    ///   - profileId: The unique identifier of a customer profile.
    ///   - values: A list of key values.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProfileKey(
        domainName: String,
        keyName: String,
        profileId: String,
        values: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProfileKeyResponse {
        let input = DeleteProfileKeyRequest(
            domainName: domainName, 
            keyName: keyName, 
            profileId: profileId, 
            values: values
        )
        return try await self.deleteProfileKey(input, logger: logger)
    }

    /// Removes an object associated with a profile of a given ProfileObjectType.
    @Sendable
    @inlinable
    public func deleteProfileObject(_ input: DeleteProfileObjectRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProfileObjectResponse {
        try await self.client.execute(
            operation: "DeleteProfileObject", 
            path: "/domains/{DomainName}/profiles/objects/delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes an object associated with a profile of a given ProfileObjectType.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - objectTypeName: The name of the profile object type.
    ///   - profileId: The unique identifier of a customer profile.
    ///   - profileObjectUniqueKey: The unique identifier of the profile object generated by the service.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProfileObject(
        domainName: String,
        objectTypeName: String,
        profileId: String,
        profileObjectUniqueKey: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProfileObjectResponse {
        let input = DeleteProfileObjectRequest(
            domainName: domainName, 
            objectTypeName: objectTypeName, 
            profileId: profileId, 
            profileObjectUniqueKey: profileObjectUniqueKey
        )
        return try await self.deleteProfileObject(input, logger: logger)
    }

    /// Removes a ProfileObjectType from a specific domain as well as removes all the ProfileObjects of that type. It also disables integrations from this specific ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that were populated from this ProfileObjectType.
    @Sendable
    @inlinable
    public func deleteProfileObjectType(_ input: DeleteProfileObjectTypeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProfileObjectTypeResponse {
        try await self.client.execute(
            operation: "DeleteProfileObjectType", 
            path: "/domains/{DomainName}/object-types/{ObjectTypeName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a ProfileObjectType from a specific domain as well as removes all the ProfileObjects of that type. It also disables integrations from this specific ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that were populated from this ProfileObjectType.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - objectTypeName: The name of the profile object type.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProfileObjectType(
        domainName: String,
        objectTypeName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProfileObjectTypeResponse {
        let input = DeleteProfileObjectTypeRequest(
            domainName: domainName, 
            objectTypeName: objectTypeName
        )
        return try await self.deleteProfileObjectType(input, logger: logger)
    }

    /// Deletes a segment definition from the domain.
    @Sendable
    @inlinable
    public func deleteSegmentDefinition(_ input: DeleteSegmentDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSegmentDefinitionResponse {
        try await self.client.execute(
            operation: "DeleteSegmentDefinition", 
            path: "/domains/{DomainName}/segment-definitions/{SegmentDefinitionName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a segment definition from the domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - segmentDefinitionName: The unique name of the segment definition.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSegmentDefinition(
        domainName: String,
        segmentDefinitionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteSegmentDefinitionResponse {
        let input = DeleteSegmentDefinitionRequest(
            domainName: domainName, 
            segmentDefinitionName: segmentDefinitionName
        )
        return try await self.deleteSegmentDefinition(input, logger: logger)
    }

    /// Deletes the specified workflow and all its corresponding resources. This is an async process.
    @Sendable
    @inlinable
    public func deleteWorkflow(_ input: DeleteWorkflowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkflowResponse {
        try await self.client.execute(
            operation: "DeleteWorkflow", 
            path: "/domains/{DomainName}/workflows/{WorkflowId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified workflow and all its corresponding resources. This is an async process.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - workflowId: Unique identifier for the workflow.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteWorkflow(
        domainName: String,
        workflowId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteWorkflowResponse {
        let input = DeleteWorkflowRequest(
            domainName: domainName, 
            workflowId: workflowId
        )
        return try await self.deleteWorkflow(input, logger: logger)
    }

    /// The process of detecting profile object type mapping by using given objects.
    @Sendable
    @inlinable
    public func detectProfileObjectType(_ input: DetectProfileObjectTypeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DetectProfileObjectTypeResponse {
        try await self.client.execute(
            operation: "DetectProfileObjectType", 
            path: "/domains/{DomainName}/detect/object-types", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// The process of detecting profile object type mapping by using given objects.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - objects: A string that is serialized from a JSON object.
    ///   - logger: Logger use during operation
    @inlinable
    public func detectProfileObjectType(
        domainName: String,
        objects: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DetectProfileObjectTypeResponse {
        let input = DetectProfileObjectTypeRequest(
            domainName: domainName, 
            objects: objects
        )
        return try await self.detectProfileObjectType(input, logger: logger)
    }

    /// Tests the auto-merging settings of your Identity Resolution Job without merging your data. It randomly selects a sample of matching groups from the existing matching results, and applies the automerging settings that you provided. You can then view the number of profiles in the sample, the number of matches, and the number of profiles identified to be merged. This enables you to evaluate the accuracy of the attributes in your matching list.  You can't view which profiles are matched and would be merged.  We strongly recommend you use this API to do a dry run of the automerging process before running the Identity Resolution Job. Include at least two matching attributes. If your matching list includes too few attributes (such as only FirstName or only LastName), there may be a large number of matches. This increases the chances of erroneous merges.
    @Sendable
    @inlinable
    public func getAutoMergingPreview(_ input: GetAutoMergingPreviewRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAutoMergingPreviewResponse {
        try await self.client.execute(
            operation: "GetAutoMergingPreview", 
            path: "/domains/{DomainName}/identity-resolution-jobs/auto-merging-preview", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Tests the auto-merging settings of your Identity Resolution Job without merging your data. It randomly selects a sample of matching groups from the existing matching results, and applies the automerging settings that you provided. You can then view the number of profiles in the sample, the number of matches, and the number of profiles identified to be merged. This enables you to evaluate the accuracy of the attributes in your matching list.  You can't view which profiles are matched and would be merged.  We strongly recommend you use this API to do a dry run of the automerging process before running the Identity Resolution Job. Include at least two matching attributes. If your matching list includes too few attributes (such as only FirstName or only LastName), there may be a large number of matches. This increases the chances of erroneous merges.
    ///
    /// Parameters:
    ///   - conflictResolution: How the auto-merging process should resolve conflicts between different profiles.
    ///   - consolidation: A list of matching attributes that represent matching criteria.
    ///   - domainName: The unique name of the domain.
    ///   - minAllowedConfidenceScoreForMerging: Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAutoMergingPreview(
        conflictResolution: ConflictResolution,
        consolidation: Consolidation,
        domainName: String,
        minAllowedConfidenceScoreForMerging: Double? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAutoMergingPreviewResponse {
        let input = GetAutoMergingPreviewRequest(
            conflictResolution: conflictResolution, 
            consolidation: consolidation, 
            domainName: domainName, 
            minAllowedConfidenceScoreForMerging: minAllowedConfidenceScoreForMerging
        )
        return try await self.getAutoMergingPreview(input, logger: logger)
    }

    /// Provides more information on a calculated attribute definition for Customer Profiles.
    @Sendable
    @inlinable
    public func getCalculatedAttributeDefinition(_ input: GetCalculatedAttributeDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCalculatedAttributeDefinitionResponse {
        try await self.client.execute(
            operation: "GetCalculatedAttributeDefinition", 
            path: "/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides more information on a calculated attribute definition for Customer Profiles.
    ///
    /// Parameters:
    ///   - calculatedAttributeName: The unique name of the calculated attribute.
    ///   - domainName: The unique name of the domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCalculatedAttributeDefinition(
        calculatedAttributeName: String,
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCalculatedAttributeDefinitionResponse {
        let input = GetCalculatedAttributeDefinitionRequest(
            calculatedAttributeName: calculatedAttributeName, 
            domainName: domainName
        )
        return try await self.getCalculatedAttributeDefinition(input, logger: logger)
    }

    /// Retrieve a calculated attribute for a customer profile.
    @Sendable
    @inlinable
    public func getCalculatedAttributeForProfile(_ input: GetCalculatedAttributeForProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCalculatedAttributeForProfileResponse {
        try await self.client.execute(
            operation: "GetCalculatedAttributeForProfile", 
            path: "/domains/{DomainName}/profile/{ProfileId}/calculated-attributes/{CalculatedAttributeName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieve a calculated attribute for a customer profile.
    ///
    /// Parameters:
    ///   - calculatedAttributeName: The unique name of the calculated attribute.
    ///   - domainName: The unique name of the domain.
    ///   - profileId: The unique identifier of a customer profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCalculatedAttributeForProfile(
        calculatedAttributeName: String,
        domainName: String,
        profileId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCalculatedAttributeForProfileResponse {
        let input = GetCalculatedAttributeForProfileRequest(
            calculatedAttributeName: calculatedAttributeName, 
            domainName: domainName, 
            profileId: profileId
        )
        return try await self.getCalculatedAttributeForProfile(input, logger: logger)
    }

    /// Returns information about a specific domain.
    @Sendable
    @inlinable
    public func getDomain(_ input: GetDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDomainResponse {
        try await self.client.execute(
            operation: "GetDomain", 
            path: "/domains/{DomainName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about a specific domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDomain(
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDomainResponse {
        let input = GetDomainRequest(
            domainName: domainName
        )
        return try await self.getDomain(input, logger: logger)
    }

    /// Returns information about the specified event stream in a specific domain.
    @Sendable
    @inlinable
    public func getEventStream(_ input: GetEventStreamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEventStreamResponse {
        try await self.client.execute(
            operation: "GetEventStream", 
            path: "/domains/{DomainName}/event-streams/{EventStreamName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about the specified event stream in a specific domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - eventStreamName: The name of the event stream provided during create operations.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEventStream(
        domainName: String,
        eventStreamName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEventStreamResponse {
        let input = GetEventStreamRequest(
            domainName: domainName, 
            eventStreamName: eventStreamName
        )
        return try await self.getEventStream(input, logger: logger)
    }

    /// Get a specific Event Trigger from the domain.
    @Sendable
    @inlinable
    public func getEventTrigger(_ input: GetEventTriggerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEventTriggerResponse {
        try await self.client.execute(
            operation: "GetEventTrigger", 
            path: "/domains/{DomainName}/event-triggers/{EventTriggerName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get a specific Event Trigger from the domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - eventTriggerName: The unique name of the event trigger.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEventTrigger(
        domainName: String,
        eventTriggerName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEventTriggerResponse {
        let input = GetEventTriggerRequest(
            domainName: domainName, 
            eventTriggerName: eventTriggerName
        )
        return try await self.getEventTrigger(input, logger: logger)
    }

    /// Returns information about an Identity Resolution Job in a specific domain.  Identity Resolution Jobs are set up using the Amazon Connect admin console. For more information, see Use Identity Resolution to consolidate similar profiles.
    @Sendable
    @inlinable
    public func getIdentityResolutionJob(_ input: GetIdentityResolutionJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIdentityResolutionJobResponse {
        try await self.client.execute(
            operation: "GetIdentityResolutionJob", 
            path: "/domains/{DomainName}/identity-resolution-jobs/{JobId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about an Identity Resolution Job in a specific domain.  Identity Resolution Jobs are set up using the Amazon Connect admin console. For more information, see Use Identity Resolution to consolidate similar profiles.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - jobId: The unique identifier of the Identity Resolution Job.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIdentityResolutionJob(
        domainName: String,
        jobId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIdentityResolutionJobResponse {
        let input = GetIdentityResolutionJobRequest(
            domainName: domainName, 
            jobId: jobId
        )
        return try await self.getIdentityResolutionJob(input, logger: logger)
    }

    /// Returns an integration for a domain.
    @Sendable
    @inlinable
    public func getIntegration(_ input: GetIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIntegrationResponse {
        try await self.client.execute(
            operation: "GetIntegration", 
            path: "/domains/{DomainName}/integrations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns an integration for a domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - uri: The URI of the S3 bucket or any other type of data source.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIntegration(
        domainName: String,
        uri: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIntegrationResponse {
        let input = GetIntegrationRequest(
            domainName: domainName, 
            uri: uri
        )
        return try await self.getIntegration(input, logger: logger)
    }

    /// Before calling this API, use CreateDomain or UpdateDomain to enable identity resolution: set Matching to true. GetMatches returns potentially matching profiles, based on the results of the latest run of a machine learning process.   The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly
    /// batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every
    /// Saturday at 12AM UTC to detect duplicate profiles in your domains.  After the Identity Resolution Job completes, use the
    /// GetMatches
    /// API to return and review the results. Or, if you have configured ExportingConfig in the MatchingRequest, you can download the results from
    /// S3.  Amazon Connect uses the following profile attributes to identify matches:   PhoneNumber   HomePhoneNumber   BusinessPhoneNumber   MobilePhoneNumber   EmailAddress   PersonalEmailAddress   BusinessEmailAddress   FullName   For example, two or more profiles—with spelling mistakes such as John Doe and Jhn Doe, or different casing email addresses such as JOHN_DOE@ANYCOMPANY.COM and johndoe@anycompany.com, or different phone number formats such as 555-010-0000 and +1-555-010-0000—can be detected as belonging to the same customer John Doe and merged into a unified profile.
    @Sendable
    @inlinable
    public func getMatches(_ input: GetMatchesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMatchesResponse {
        try await self.client.execute(
            operation: "GetMatches", 
            path: "/domains/{DomainName}/matches", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Before calling this API, use CreateDomain or UpdateDomain to enable identity resolution: set Matching to true. GetMatches returns potentially matching profiles, based on the results of the latest run of a machine learning process.   The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly
    /// batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every
    /// Saturday at 12AM UTC to detect duplicate profiles in your domains.  After the Identity Resolution Job completes, use the
    /// GetMatches
    /// API to return and review the results. Or, if you have configured ExportingConfig in the MatchingRequest, you can download the results from
    /// S3.  Amazon Connect uses the following profile attributes to identify matches:   PhoneNumber   HomePhoneNumber   BusinessPhoneNumber   MobilePhoneNumber   EmailAddress   PersonalEmailAddress   BusinessEmailAddress   FullName   For example, two or more profiles—with spelling mistakes such as John Doe and Jhn Doe, or different casing email addresses such as JOHN_DOE@ANYCOMPANY.COM and johndoe@anycompany.com, or different phone number formats such as 555-010-0000 and +1-555-010-0000—can be detected as belonging to the same customer John Doe and merged into a unified profile.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of results to return per page.
    ///   - nextToken: The token for the next set of results. Use the value returned in the previous
    ///   - logger: Logger use during operation
    @inlinable
    public func getMatches(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMatchesResponse {
        let input = GetMatchesRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getMatches(input, logger: logger)
    }

    /// Returns the object types for a specific domain.
    @Sendable
    @inlinable
    public func getProfileObjectType(_ input: GetProfileObjectTypeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProfileObjectTypeResponse {
        try await self.client.execute(
            operation: "GetProfileObjectType", 
            path: "/domains/{DomainName}/object-types/{ObjectTypeName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the object types for a specific domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - objectTypeName: The name of the profile object type.
    ///   - logger: Logger use during operation
    @inlinable
    public func getProfileObjectType(
        domainName: String,
        objectTypeName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetProfileObjectTypeResponse {
        let input = GetProfileObjectTypeRequest(
            domainName: domainName, 
            objectTypeName: objectTypeName
        )
        return try await self.getProfileObjectType(input, logger: logger)
    }

    /// Returns the template information for a specific object type. A template is a predefined ProfileObjectType, such as “Salesforce-Account” or “Salesforce-Contact.” When a user sends a ProfileObject, using the PutProfileObject API, with an ObjectTypeName that matches one of the TemplateIds, it uses the mappings from the template.
    @Sendable
    @inlinable
    public func getProfileObjectTypeTemplate(_ input: GetProfileObjectTypeTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProfileObjectTypeTemplateResponse {
        try await self.client.execute(
            operation: "GetProfileObjectTypeTemplate", 
            path: "/templates/{TemplateId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the template information for a specific object type. A template is a predefined ProfileObjectType, such as “Salesforce-Account” or “Salesforce-Contact.” When a user sends a ProfileObject, using the PutProfileObject API, with an ObjectTypeName that matches one of the TemplateIds, it uses the mappings from the template.
    ///
    /// Parameters:
    ///   - templateId: A unique identifier for the object template.
    ///   - logger: Logger use during operation
    @inlinable
    public func getProfileObjectTypeTemplate(
        templateId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetProfileObjectTypeTemplateResponse {
        let input = GetProfileObjectTypeTemplateRequest(
            templateId: templateId
        )
        return try await self.getProfileObjectTypeTemplate(input, logger: logger)
    }

    /// Gets a segment definition from the domain.
    @Sendable
    @inlinable
    public func getSegmentDefinition(_ input: GetSegmentDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSegmentDefinitionResponse {
        try await self.client.execute(
            operation: "GetSegmentDefinition", 
            path: "/domains/{DomainName}/segment-definitions/{SegmentDefinitionName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a segment definition from the domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - segmentDefinitionName: The unique name of the segment definition.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSegmentDefinition(
        domainName: String,
        segmentDefinitionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSegmentDefinitionResponse {
        let input = GetSegmentDefinitionRequest(
            domainName: domainName, 
            segmentDefinitionName: segmentDefinitionName
        )
        return try await self.getSegmentDefinition(input, logger: logger)
    }

    /// Gets the result of a segment estimate query.
    @Sendable
    @inlinable
    public func getSegmentEstimate(_ input: GetSegmentEstimateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSegmentEstimateResponse {
        try await self.client.execute(
            operation: "GetSegmentEstimate", 
            path: "/domains/{DomainName}/segment-estimates/{EstimateId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the result of a segment estimate query.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - estimateId: The query Id passed by a previous CreateSegmentEstimate operation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSegmentEstimate(
        domainName: String,
        estimateId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSegmentEstimateResponse {
        let input = GetSegmentEstimateRequest(
            domainName: domainName, 
            estimateId: estimateId
        )
        return try await self.getSegmentEstimate(input, logger: logger)
    }

    /// Determines if the given profiles are within a segment.
    @Sendable
    @inlinable
    public func getSegmentMembership(_ input: GetSegmentMembershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSegmentMembershipResponse {
        try await self.client.execute(
            operation: "GetSegmentMembership", 
            path: "/domains/{DomainName}/segments/{SegmentDefinitionName}/membership", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Determines if the given profiles are within a segment.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - profileIds: The list of profile IDs to query for.
    ///   - segmentDefinitionName: The Id of the wanted segment. Needs to be a valid, and existing segment Id.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSegmentMembership(
        domainName: String,
        profileIds: [String],
        segmentDefinitionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSegmentMembershipResponse {
        let input = GetSegmentMembershipRequest(
            domainName: domainName, 
            profileIds: profileIds, 
            segmentDefinitionName: segmentDefinitionName
        )
        return try await self.getSegmentMembership(input, logger: logger)
    }

    /// Retrieve the latest status of a segment snapshot.
    @Sendable
    @inlinable
    public func getSegmentSnapshot(_ input: GetSegmentSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSegmentSnapshotResponse {
        try await self.client.execute(
            operation: "GetSegmentSnapshot", 
            path: "/domains/{DomainName}/segments/{SegmentDefinitionName}/snapshots/{SnapshotId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieve the latest status of a segment snapshot.
    ///
    /// Parameters:
    ///   - domainName: The unique identifier of the domain.
    ///   - segmentDefinitionName: The unique name of the segment definition.
    ///   - snapshotId: The unique identifier of the segment snapshot.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSegmentSnapshot(
        domainName: String,
        segmentDefinitionName: String,
        snapshotId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSegmentSnapshotResponse {
        let input = GetSegmentSnapshotRequest(
            domainName: domainName, 
            segmentDefinitionName: segmentDefinitionName, 
            snapshotId: snapshotId
        )
        return try await self.getSegmentSnapshot(input, logger: logger)
    }

    /// Returns a set of profiles that belong to the same matching group using the matchId or profileId. You can also specify the type of matching that you want for finding similar profiles using either RULE_BASED_MATCHING or ML_BASED_MATCHING.
    @Sendable
    @inlinable
    public func getSimilarProfiles(_ input: GetSimilarProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSimilarProfilesResponse {
        try await self.client.execute(
            operation: "GetSimilarProfiles", 
            path: "/domains/{DomainName}/matches", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a set of profiles that belong to the same matching group using the matchId or profileId. You can also specify the type of matching that you want for finding similar profiles using either RULE_BASED_MATCHING or ML_BASED_MATCHING.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - matchType: Specify the type of matching to get similar profiles for.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: The pagination token from the previous GetSimilarProfiles API call.
    ///   - searchKey: The string indicating the search key to be used.
    ///   - searchValue: The string based on SearchKey to be searched for similar profiles.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSimilarProfiles(
        domainName: String,
        matchType: MatchType,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        searchKey: String,
        searchValue: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSimilarProfilesResponse {
        let input = GetSimilarProfilesRequest(
            domainName: domainName, 
            matchType: matchType, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            searchKey: searchKey, 
            searchValue: searchValue
        )
        return try await self.getSimilarProfiles(input, logger: logger)
    }

    /// Get details of specified workflow.
    @Sendable
    @inlinable
    public func getWorkflow(_ input: GetWorkflowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkflowResponse {
        try await self.client.execute(
            operation: "GetWorkflow", 
            path: "/domains/{DomainName}/workflows/{WorkflowId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get details of specified workflow.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - workflowId: Unique identifier for the workflow.
    ///   - logger: Logger use during operation
    @inlinable
    public func getWorkflow(
        domainName: String,
        workflowId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetWorkflowResponse {
        let input = GetWorkflowRequest(
            domainName: domainName, 
            workflowId: workflowId
        )
        return try await self.getWorkflow(input, logger: logger)
    }

    /// Get granular list of steps in workflow.
    @Sendable
    @inlinable
    public func getWorkflowSteps(_ input: GetWorkflowStepsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkflowStepsResponse {
        try await self.client.execute(
            operation: "GetWorkflowSteps", 
            path: "/domains/{DomainName}/workflows/{WorkflowId}/steps", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get granular list of steps in workflow.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of results to return per page.
    ///   - nextToken: The token for the next set of results. Use the value returned in the previous
    ///   - workflowId: Unique identifier for the workflow.
    ///   - logger: Logger use during operation
    @inlinable
    public func getWorkflowSteps(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        workflowId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetWorkflowStepsResponse {
        let input = GetWorkflowStepsRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            workflowId: workflowId
        )
        return try await self.getWorkflowSteps(input, logger: logger)
    }

    /// Lists all of the integrations associated to a specific URI in the AWS account.
    @Sendable
    @inlinable
    public func listAccountIntegrations(_ input: ListAccountIntegrationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAccountIntegrationsResponse {
        try await self.client.execute(
            operation: "ListAccountIntegrations", 
            path: "/integrations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all of the integrations associated to a specific URI in the AWS account.
    ///
    /// Parameters:
    ///   - includeHidden: Boolean to indicate if hidden integration should be returned. Defaults to False.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: The pagination token from the previous ListAccountIntegrations API call.
    ///   - uri: The URI of the S3 bucket or any other type of data source.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAccountIntegrations(
        includeHidden: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        uri: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAccountIntegrationsResponse {
        let input = ListAccountIntegrationsRequest(
            includeHidden: includeHidden, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            uri: uri
        )
        return try await self.listAccountIntegrations(input, logger: logger)
    }

    /// Lists calculated attribute definitions for Customer Profiles
    @Sendable
    @inlinable
    public func listCalculatedAttributeDefinitions(_ input: ListCalculatedAttributeDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCalculatedAttributeDefinitionsResponse {
        try await self.client.execute(
            operation: "ListCalculatedAttributeDefinitions", 
            path: "/domains/{DomainName}/calculated-attributes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists calculated attribute definitions for Customer Profiles
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of calculated attribute definitions returned per page.
    ///   - nextToken: The pagination token from the previous call to ListCalculatedAttributeDefinitions.
    ///   - logger: Logger use during operation
    @inlinable
    public func listCalculatedAttributeDefinitions(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCalculatedAttributeDefinitionsResponse {
        let input = ListCalculatedAttributeDefinitionsRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listCalculatedAttributeDefinitions(input, logger: logger)
    }

    /// Retrieve a list of calculated attributes for a customer profile.
    @Sendable
    @inlinable
    public func listCalculatedAttributesForProfile(_ input: ListCalculatedAttributesForProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCalculatedAttributesForProfileResponse {
        try await self.client.execute(
            operation: "ListCalculatedAttributesForProfile", 
            path: "/domains/{DomainName}/profile/{ProfileId}/calculated-attributes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieve a list of calculated attributes for a customer profile.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of calculated attributes returned per page.
    ///   - nextToken: The pagination token from the previous call to ListCalculatedAttributesForProfile.
    ///   - profileId: The unique identifier of a customer profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func listCalculatedAttributesForProfile(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        profileId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCalculatedAttributesForProfileResponse {
        let input = ListCalculatedAttributesForProfileRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            profileId: profileId
        )
        return try await self.listCalculatedAttributesForProfile(input, logger: logger)
    }

    /// Returns a list of all the domains for an AWS account that have been created.
    @Sendable
    @inlinable
    public func listDomains(_ input: ListDomainsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainsResponse {
        try await self.client.execute(
            operation: "ListDomains", 
            path: "/domains", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of all the domains for an AWS account that have been created.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: The pagination token from the previous ListDomain API call.
    ///   - logger: Logger use during operation
    @inlinable
    public func listDomains(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDomainsResponse {
        let input = ListDomainsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listDomains(input, logger: logger)
    }

    /// Returns a list of all the event streams in a specific domain.
    @Sendable
    @inlinable
    public func listEventStreams(_ input: ListEventStreamsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEventStreamsResponse {
        try await self.client.execute(
            operation: "ListEventStreams", 
            path: "/domains/{DomainName}/event-streams", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of all the event streams in a specific domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: Identifies the next page of results to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEventStreams(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEventStreamsResponse {
        let input = ListEventStreamsRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listEventStreams(input, logger: logger)
    }

    /// List all Event Triggers under a domain.
    @Sendable
    @inlinable
    public func listEventTriggers(_ input: ListEventTriggersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEventTriggersResponse {
        try await self.client.execute(
            operation: "ListEventTriggers", 
            path: "/domains/{DomainName}/event-triggers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all Event Triggers under a domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of results to return per page.
    ///   - nextToken: The pagination token to use with ListEventTriggers.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEventTriggers(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEventTriggersResponse {
        let input = ListEventTriggersRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listEventTriggers(input, logger: logger)
    }

    /// Lists all of the Identity Resolution Jobs in your domain. The response sorts the list by JobStartTime.
    @Sendable
    @inlinable
    public func listIdentityResolutionJobs(_ input: ListIdentityResolutionJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIdentityResolutionJobsResponse {
        try await self.client.execute(
            operation: "ListIdentityResolutionJobs", 
            path: "/domains/{DomainName}/identity-resolution-jobs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all of the Identity Resolution Jobs in your domain. The response sorts the list by JobStartTime.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of results to return per page.
    ///   - nextToken: The token for the next set of results. Use the value returned in the previous
    ///   - logger: Logger use during operation
    @inlinable
    public func listIdentityResolutionJobs(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListIdentityResolutionJobsResponse {
        let input = ListIdentityResolutionJobsRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listIdentityResolutionJobs(input, logger: logger)
    }

    /// Lists all of the integrations in your domain.
    @Sendable
    @inlinable
    public func listIntegrations(_ input: ListIntegrationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIntegrationsResponse {
        try await self.client.execute(
            operation: "ListIntegrations", 
            path: "/domains/{DomainName}/integrations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all of the integrations in your domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - includeHidden: Boolean to indicate if hidden integration should be returned. Defaults to False.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: The pagination token from the previous ListIntegrations API call.
    ///   - logger: Logger use during operation
    @inlinable
    public func listIntegrations(
        domainName: String,
        includeHidden: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListIntegrationsResponse {
        let input = ListIntegrationsRequest(
            domainName: domainName, 
            includeHidden: includeHidden, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listIntegrations(input, logger: logger)
    }

    /// Fetch the possible attribute values given the attribute name.
    @Sendable
    @inlinable
    public func listObjectTypeAttributes(_ input: ListObjectTypeAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListObjectTypeAttributesResponse {
        try await self.client.execute(
            operation: "ListObjectTypeAttributes", 
            path: "/domains/{DomainName}/object-types/{ObjectTypeName}/attributes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Fetch the possible attribute values given the attribute name.
    ///
    /// Parameters:
    ///   - domainName: The unique identifier of the domain.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: The pagination token from the previous call.
    ///   - objectTypeName: The name of the profile object type.
    ///   - logger: Logger use during operation
    @inlinable
    public func listObjectTypeAttributes(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        objectTypeName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListObjectTypeAttributesResponse {
        let input = ListObjectTypeAttributesRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            objectTypeName: objectTypeName
        )
        return try await self.listObjectTypeAttributes(input, logger: logger)
    }

    /// Fetch the possible attribute values given the attribute name.
    @Sendable
    @inlinable
    public func listProfileAttributeValues(_ input: ProfileAttributeValuesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ProfileAttributeValuesResponse {
        try await self.client.execute(
            operation: "ListProfileAttributeValues", 
            path: "/domains/{DomainName}/profile-attributes/{AttributeName}/values", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Fetch the possible attribute values given the attribute name.
    ///
    /// Parameters:
    ///   - attributeName: The attribute name.
    ///   - domainName: The unique identifier of the domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProfileAttributeValues(
        attributeName: String,
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ProfileAttributeValuesResponse {
        let input = ProfileAttributeValuesRequest(
            attributeName: attributeName, 
            domainName: domainName
        )
        return try await self.listProfileAttributeValues(input, logger: logger)
    }

    /// Lists all of the template information for object types.
    @Sendable
    @inlinable
    public func listProfileObjectTypeTemplates(_ input: ListProfileObjectTypeTemplatesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProfileObjectTypeTemplatesResponse {
        try await self.client.execute(
            operation: "ListProfileObjectTypeTemplates", 
            path: "/templates", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all of the template information for object types.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: The pagination token from the previous ListObjectTypeTemplates API call.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProfileObjectTypeTemplates(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProfileObjectTypeTemplatesResponse {
        let input = ListProfileObjectTypeTemplatesRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listProfileObjectTypeTemplates(input, logger: logger)
    }

    /// Lists all of the templates available within the service.
    @Sendable
    @inlinable
    public func listProfileObjectTypes(_ input: ListProfileObjectTypesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProfileObjectTypesResponse {
        try await self.client.execute(
            operation: "ListProfileObjectTypes", 
            path: "/domains/{DomainName}/object-types", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all of the templates available within the service.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: Identifies the next page of results to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProfileObjectTypes(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProfileObjectTypesResponse {
        let input = ListProfileObjectTypesRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listProfileObjectTypes(input, logger: logger)
    }

    /// Returns a list of objects associated with a profile of a given ProfileObjectType.
    @Sendable
    @inlinable
    public func listProfileObjects(_ input: ListProfileObjectsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProfileObjectsResponse {
        try await self.client.execute(
            operation: "ListProfileObjects", 
            path: "/domains/{DomainName}/profiles/objects", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of objects associated with a profile of a given ProfileObjectType.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: The pagination token from the previous call to ListProfileObjects.
    ///   - objectFilter: Applies a filter to the response to include profile objects with the specified index values.
    ///   - objectTypeName: The name of the profile object type.
    ///   - profileId: The unique identifier of a customer profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProfileObjects(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        objectFilter: ObjectFilter? = nil,
        objectTypeName: String,
        profileId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProfileObjectsResponse {
        let input = ListProfileObjectsRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            objectFilter: objectFilter, 
            objectTypeName: objectTypeName, 
            profileId: profileId
        )
        return try await self.listProfileObjects(input, logger: logger)
    }

    /// Returns a set of MatchIds that belong to the given domain.
    @Sendable
    @inlinable
    public func listRuleBasedMatches(_ input: ListRuleBasedMatchesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRuleBasedMatchesResponse {
        try await self.client.execute(
            operation: "ListRuleBasedMatches", 
            path: "/domains/{DomainName}/profiles/ruleBasedMatches", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a set of MatchIds that belong to the given domain.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of MatchIds returned per page.
    ///   - nextToken: The pagination token from the previous ListRuleBasedMatches API call.
    ///   - logger: Logger use during operation
    @inlinable
    public func listRuleBasedMatches(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListRuleBasedMatchesResponse {
        let input = ListRuleBasedMatchesRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listRuleBasedMatches(input, logger: logger)
    }

    /// Lists all segment definitions under a domain.
    @Sendable
    @inlinable
    public func listSegmentDefinitions(_ input: ListSegmentDefinitionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSegmentDefinitionsResponse {
        try await self.client.execute(
            operation: "ListSegmentDefinitions", 
            path: "/domains/{DomainName}/segment-definitions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all segment definitions under a domain.
    ///
    /// Parameters:
    ///   - domainName: The unique identifier of the domain.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - nextToken: The pagination token from the previous call.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSegmentDefinitions(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSegmentDefinitionsResponse {
        let input = ListSegmentDefinitionsRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listSegmentDefinitions(input, logger: logger)
    }

    /// Displays the tags associated with an Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Displays the tags associated with an Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the resource for which you want to view tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Query to list all workflows.
    @Sendable
    @inlinable
    public func listWorkflows(_ input: ListWorkflowsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkflowsResponse {
        try await self.client.execute(
            operation: "ListWorkflows", 
            path: "/domains/{DomainName}/workflows", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Query to list all workflows.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of results to return per page.
    ///   - nextToken: The token for the next set of results. Use the value returned in the previous
    ///   - queryEndDate: Retrieve workflows ended after timestamp.
    ///   - queryStartDate: Retrieve workflows started after timestamp.
    ///   - status: Status of workflow execution.
    ///   - workflowType: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
    ///   - logger: Logger use during operation
    @inlinable
    public func listWorkflows(
        domainName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        queryEndDate: Date? = nil,
        queryStartDate: Date? = nil,
        status: Status? = nil,
        workflowType: WorkflowType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListWorkflowsResponse {
        let input = ListWorkflowsRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            queryEndDate: queryEndDate, 
            queryStartDate: queryStartDate, 
            status: status, 
            workflowType: workflowType
        )
        return try await self.listWorkflows(input, logger: logger)
    }

    /// Runs an AWS Lambda job that does the following:   All the profileKeys in the ProfileToBeMerged will be moved to the main profile.   All the objects in the ProfileToBeMerged will be moved to the main profile.   All the ProfileToBeMerged will be deleted at the end.   All the profileKeys in the ProfileIdsToBeMerged will be moved to the main profile.   Standard fields are merged as follows:   Fields are always "union"-ed if there are no conflicts in standard fields or attributeKeys.   When there are conflicting fields:   If no SourceProfileIds entry is specified, the main Profile value is always taken.    If a SourceProfileIds entry is specified, the specified profileId is always taken, even if it is a NULL value.       You can use MergeProfiles together with GetMatches, which returns potentially matching profiles, or use it with the results of another matching system. After profiles have been merged, they cannot be separated (unmerged).
    @Sendable
    @inlinable
    public func mergeProfiles(_ input: MergeProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> MergeProfilesResponse {
        try await self.client.execute(
            operation: "MergeProfiles", 
            path: "/domains/{DomainName}/profiles/objects/merge", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Runs an AWS Lambda job that does the following:   All the profileKeys in the ProfileToBeMerged will be moved to the main profile.   All the objects in the ProfileToBeMerged will be moved to the main profile.   All the ProfileToBeMerged will be deleted at the end.   All the profileKeys in the ProfileIdsToBeMerged will be moved to the main profile.   Standard fields are merged as follows:   Fields are always "union"-ed if there are no conflicts in standard fields or attributeKeys.   When there are conflicting fields:   If no SourceProfileIds entry is specified, the main Profile value is always taken.    If a SourceProfileIds entry is specified, the specified profileId is always taken, even if it is a NULL value.       You can use MergeProfiles together with GetMatches, which returns potentially matching profiles, or use it with the results of another matching system. After profiles have been merged, they cannot be separated (unmerged).
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - fieldSourceProfileIds: The identifiers of the fields in the profile that has the information you want to apply to the merge. For example, say you want to merge EmailAddress from Profile1 into MainProfile. This would be the identifier of the EmailAddress field in Profile1.
    ///   - mainProfileId: The identifier of the profile to be taken.
    ///   - profileIdsToBeMerged: The identifier of the profile to be merged into MainProfileId.
    ///   - logger: Logger use during operation
    @inlinable
    public func mergeProfiles(
        domainName: String,
        fieldSourceProfileIds: FieldSourceProfileIds? = nil,
        mainProfileId: String,
        profileIdsToBeMerged: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> MergeProfilesResponse {
        let input = MergeProfilesRequest(
            domainName: domainName, 
            fieldSourceProfileIds: fieldSourceProfileIds, 
            mainProfileId: mainProfileId, 
            profileIdsToBeMerged: profileIdsToBeMerged
        )
        return try await self.mergeProfiles(input, logger: logger)
    }

    /// Adds an integration between the service and a third-party service, which includes Amazon AppFlow and Amazon Connect. An integration can belong to only one domain. To add or remove tags on an existing Integration, see  TagResource / UntagResource.
    @Sendable
    @inlinable
    public func putIntegration(_ input: PutIntegrationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutIntegrationResponse {
        try await self.client.execute(
            operation: "PutIntegration", 
            path: "/domains/{DomainName}/integrations", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds an integration between the service and a third-party service, which includes Amazon AppFlow and Amazon Connect. An integration can belong to only one domain. To add or remove tags on an existing Integration, see  TagResource / UntagResource.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - eventTriggerNames: A list of unique names for active event triggers associated with the integration.
    ///   - flowDefinition: The configuration that controls how Customer Profiles retrieves data from the source.
    ///   - objectTypeName: The name of the profile object type.
    ///   - objectTypeNames: A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an ObjectTypeName (template) used to ingest the event.
    ///   - roleArn: The Amazon Resource Name (ARN) of the IAM role. The Integration uses this role to make Customer Profiles requests on your behalf.
    ///   - tags: The tags used to organize, track, or control access for this resource.
    ///   - uri: The URI of the S3 bucket or any other type of data source.
    ///   - logger: Logger use during operation
    @inlinable
    public func putIntegration(
        domainName: String,
        eventTriggerNames: [String]? = nil,
        flowDefinition: FlowDefinition? = nil,
        objectTypeName: String? = nil,
        objectTypeNames: [String: String]? = nil,
        roleArn: String? = nil,
        tags: [String: String]? = nil,
        uri: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutIntegrationResponse {
        let input = PutIntegrationRequest(
            domainName: domainName, 
            eventTriggerNames: eventTriggerNames, 
            flowDefinition: flowDefinition, 
            objectTypeName: objectTypeName, 
            objectTypeNames: objectTypeNames, 
            roleArn: roleArn, 
            tags: tags, 
            uri: uri
        )
        return try await self.putIntegration(input, logger: logger)
    }

    /// Adds additional objects to customer profiles of a given ObjectType. When adding a specific profile object, like a Contact Record, an inferred profile can get created if it is not mapped to an existing profile. The resulting profile will only have a phone number populated in the standard ProfileObject. Any additional Contact Records with the same phone number will be mapped to the same inferred profile. When a ProfileObject is created and if a ProfileObjectType already exists for the ProfileObject, it will provide data to a standard profile depending on the ProfileObjectType definition. PutProfileObject needs an ObjectType, which can be created using PutProfileObjectType.
    @Sendable
    @inlinable
    public func putProfileObject(_ input: PutProfileObjectRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutProfileObjectResponse {
        try await self.client.execute(
            operation: "PutProfileObject", 
            path: "/domains/{DomainName}/profiles/objects", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds additional objects to customer profiles of a given ObjectType. When adding a specific profile object, like a Contact Record, an inferred profile can get created if it is not mapped to an existing profile. The resulting profile will only have a phone number populated in the standard ProfileObject. Any additional Contact Records with the same phone number will be mapped to the same inferred profile. When a ProfileObject is created and if a ProfileObjectType already exists for the ProfileObject, it will provide data to a standard profile depending on the ProfileObjectType definition. PutProfileObject needs an ObjectType, which can be created using PutProfileObjectType.
    ///
    /// Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - object: A string that is serialized from a JSON object.
    ///   - objectTypeName: The name of the profile object type.
    ///   - logger: Logger use during operation
    @inlinable
    public func putProfileObject(
        domainName: String,
        object: String,
        objectTypeName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutProfileObjectResponse {
        let input = PutProfileObjectRequest(
            domainName: domainName, 
            object: object, 
            objectTypeName: objectTypeName
        )
        return try await self.putProfileObject(input, logger: logger)
    }

    /// Defines a ProfileObjectType. To add or remove tags on an existing ObjectType, see  TagResource/UntagResource.
    @Sendable
    @inlinable
    public func putProfileObjectType(_ input: PutProfileObjectTypeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutProfileObjectTypeResponse {
        try await self.client.execute(
            operation: "PutProfileObjectType", 
            path: "/domains/{DomainName}/object-types/{ObjectTypeName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Defines a ProfileObjectType. To add or remove tags on an existing ObjectType, see  TagResource/UntagResource.
    ///
    /// Parameters:
    ///   - allowProfileCreation: Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is FALSE. If the AllowProfileCreation flag is set to FALSE, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to TRUE, and if no match is found, then the service creates a new standard profile.
    ///   - description: Description of the profile object type.
    ///   - domainName: The unique name of the domain.
    ///   - encryptionKey: The customer-provided key to encrypt the profile object that will be created in this profile object type.
    ///   - expirationDays: The number of days until the data in the object expires.
    ///   - fields: A map of the name and ObjectType field.
    ///   - keys: A list of unique keys that can be used to map data to the profile.
    ///   - maxProfileObjectCount: The amount of profile object max count assigned to the object type
    ///   - objectTypeName: The name of the profile object type.
    ///   - sourceLastUpdatedTimestampFormat: The format of your sourceLastUpdatedTimestamp that was previously set up.
    ///   - tags: The tags used to organize, track, or control access for this resource.
    ///   - templateId: A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a BadRequestException. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a BadRequestException.
    ///   - logger: Logger use during operation
    @inlinable
    public func putProfileObjectType(
        allowProfileCreation: Bool? = nil,
        description: String,
        domainName: String,
        encryptionKey: String? = nil,
        expirationDays: Int? = nil,
        fields: [String: ObjectTypeField]? = nil,
        keys: [String: [ObjectTypeKey]]? = nil,
        maxProfileObjectCount: Int? = nil,
        objectTypeName: String,
        sourceLastUpdatedTimestampFormat: String? = nil,
        tags: [String: String]? = nil,
        templateId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutProfileObjectTypeResponse {
        let input = PutProfileObjectTypeRequest(
            allowProfileCreation: allowProfileCreation, 
            description: description, 
            domainName: domainName, 
            encryptionKey: encryptionKey, 
            expirationDays: expirationDays, 
            fields: fields, 
            keys: keys, 
            maxProfileObjectCount: maxProfileObjectCount, 
            objectTypeName: objectTypeName, 
            sourceLastUpdatedTimestampFormat: sourceLastUpdatedTimestampFormat, 
            tags: tags, 
            templateId: templateId
        )
        return try await self.putProfileObjectType(input, logger: logger)
    }

    /// Searches for profiles within a specific domain using one or more predefined search keys (e.g., _fullName, _phone, _email, _account, etc.) and/or custom-defined search keys. A search key is a data type pair that consists of a KeyName and Values list. This operation supports searching for profiles with a minimum of 1 key-value(s) pair and up to 5 key-value(s) pairs using either AND or OR logic.
    @Sendable
    @inlinable
    public func searchProfiles(_ input: SearchProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchProfilesResponse {
        try await self.client.execute(
            operation: "SearchProfiles", 
            path: "/domains/{DomainName}/profiles/search", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches for profiles within a specific domain using one or more predefined search keys (e.g., _fullName, _phone, _email, _account, etc.) and/or custom-defined search keys. A search key is a data type pair that consists of a KeyName and Values list. This operation supports searching for profiles with a minimum of 1 key-value(s) pair and up to 5 key-value(s) pairs using either AND or OR logic.
    ///
    /// Parameters:
    ///   - additionalSearchKeys: A list of AdditionalSearchKey objects that are each searchable identifiers of a profile. Each AdditionalSearchKey object contains a KeyName and a list of Values associated with that specific key (i.e., a key-value(s) pair). These additional search keys will be used in conjunction with the LogicalOperator and the required KeyName and Values parameters to search for profiles that satisfy the search criteria.
    ///   - domainName: The unique name of the domain.
    ///   - keyName: A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.
    ///   - logicalOperator: Relationship between all specified search keys that will be used to search for profiles. This includes the required KeyName and Values parameters as well as any key-value(s) pairs specified in the AdditionalSearchKeys list. This parameter influences which profiles will be returned in the response in the following manner:    AND - The response only includes profiles that match all of the search keys.    OR - The response includes profiles that match at least one of the search keys.   The OR relationship is the default behavior if this parameter is not included in the request.
    ///   - maxResults: The maximum number of objects returned per page. The default is 20 if this parameter is not included in the request.
    ///   - nextToken: The pagination token from the previous SearchProfiles API call.
    ///   - values: A list of key values.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchProfiles(
        additionalSearchKeys: [AdditionalSearchKey]? = nil,
        domainName: String,
        keyName: String,
        logicalOperator: LogicalOperator? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        values: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchProfilesResponse {
        let input = SearchProfilesRequest(
            additionalSearchKeys: additionalSearchKeys, 
            domainName: domainName, 
            keyName: keyName, 
            logicalOperator: logicalOperator, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            values: values
        )
        return try await self.searchProfiles(input, logger: logger)
    }

    /// Assigns one or more tags (key-value pairs) to the specified Amazon Connect Customer Profiles resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged. Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters. You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag. You can associate as many as 50 tags with a resource.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns one or more tags (key-value pairs) to the specified Amazon Connect Customer Profiles resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged. Tags don't have any semantic meaning to AWS and are interpreted strictly as strings of characters. You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag. You can associate as many as 50 tags with a resource.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the resource that you're adding tags to.
    ///   - tags: The tags used to organize, track, or control access for this resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Removes one or more tags from the specified Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes one or more tags from the specified Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.
    ///
    /// Parameters:
    ///   - resourceArn: The ARN of the resource from which you are removing tags.
    ///   - tagKeys: The list of tag keys to remove from the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates an existing calculated attribute definition. When updating the Conditions, note that increasing the date range of a calculated attribute will not trigger inclusion of historical data greater than the current date range.
    @Sendable
    @inlinable
    public func updateCalculatedAttributeDefinition(_ input: UpdateCalculatedAttributeDefinitionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCalculatedAttributeDefinitionResponse {
        try await self.client.execute(
            operation: "UpdateCalculatedAttributeDefinition", 
            path: "/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an existing calculated attribute definition. When updating the Conditions, note that increasing the date range of a calculated attribute will not trigger inclusion of historical data greater than the current date range.
    ///
    /// Parameters:
    ///   - calculatedAttributeName: The unique name of the calculated attribute.
    ///   - conditions: The conditions including range, object count, and threshold for the calculated attribute.
    ///   - description: The description of the calculated attribute.
    ///   - displayName: The display name of the calculated attribute.
    ///   - domainName: The unique name of the domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateCalculatedAttributeDefinition(
        calculatedAttributeName: String,
        conditions: Conditions? = nil,
        description: String? = nil,
        displayName: String? = nil,
        domainName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateCalculatedAttributeDefinitionResponse {
        let input = UpdateCalculatedAttributeDefinitionRequest(
            calculatedAttributeName: calculatedAttributeName, 
            conditions: conditions, 
            description: description, 
            displayName: displayName, 
            domainName: domainName
        )
        return try await self.updateCalculatedAttributeDefinition(input, logger: logger)
    }

    /// Updates the properties of a domain, including creating or selecting a dead letter queue or an encryption key. After a domain is created, the name can’t be changed. Use this API or CreateDomain to enable identity resolution: set Matching to true. To prevent cross-service impersonation when you call this API, see Cross-service confused deputy prevention for sample policies that you should apply.  To add or remove tags on an existing Domain, see TagResource/UntagResource.
    @Sendable
    @inlinable
    public func updateDomain(_ input: UpdateDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDomainResponse {
        try await self.client.execute(
            operation: "UpdateDomain", 
            path: "/domains/{DomainName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the properties of a domain, including creating or selecting a dead letter queue or an encryption key. After a domain is created, the name can’t be changed. Use this API or CreateDomain to enable identity resolution: set Matching to true. To prevent cross-service impersonation when you call this API, see Cross-service confused deputy prevention for sample policies that you should apply.  To add or remove tags on an existing Domain, see TagResource/UntagResource.
    ///
    /// Parameters:
    ///   - deadLetterQueueUrl: The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. If specified as an empty string, it will clear any existing value. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.
    ///   - defaultEncryptionKey: The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage. If specified as an empty string, it will clear any existing value.
    ///   - defaultExpirationDays: The default number of days until the data within the domain expires.
    ///   - domainName: The unique name of the domain.
    ///   - matching: The process of matching duplicate profiles. If Matching = true, Amazon Connect Customer Profiles starts a weekly
    ///   - ruleBasedMatching: The process of matching duplicate profiles using the rule-Based matching. If RuleBasedMatching = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the RuleBasedMatchingRequest. You can use the ListRuleBasedMatches and GetSimilarProfiles API to return and review the results. Also, if you have configured ExportingConfig in the RuleBasedMatchingRequest, you can download the results from S3.
    ///   - tags: The tags used to organize, track, or control access for this resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateDomain(
        deadLetterQueueUrl: String? = nil,
        defaultEncryptionKey: String? = nil,
        defaultExpirationDays: Int? = nil,
        domainName: String,
        matching: MatchingRequest? = nil,
        ruleBasedMatching: RuleBasedMatchingRequest? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDomainResponse {
        let input = UpdateDomainRequest(
            deadLetterQueueUrl: deadLetterQueueUrl, 
            defaultEncryptionKey: defaultEncryptionKey, 
            defaultExpirationDays: defaultExpirationDays, 
            domainName: domainName, 
            matching: matching, 
            ruleBasedMatching: ruleBasedMatching, 
            tags: tags
        )
        return try await self.updateDomain(input, logger: logger)
    }

    /// Update the properties of an Event Trigger.
    @Sendable
    @inlinable
    public func updateEventTrigger(_ input: UpdateEventTriggerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEventTriggerResponse {
        try await self.client.execute(
            operation: "UpdateEventTrigger", 
            path: "/domains/{DomainName}/event-triggers/{EventTriggerName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update the properties of an Event Trigger.
    ///
    /// Parameters:
    ///   - description: The description of the event trigger.
    ///   - domainName: The unique name of the domain.
    ///   - eventTriggerConditions: A list of conditions that determine when an event should trigger the destination.
    ///   - eventTriggerLimits: Defines limits controlling whether an event triggers the destination, based on ingestion latency and the number of invocations per profile over specific time periods.
    ///   - eventTriggerName: The unique name of the event trigger.
    ///   - objectTypeName: The unique name of the object type.
    ///   - segmentFilter: The destination is triggered only for profiles that meet the criteria of a segment definition.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateEventTrigger(
        description: String? = nil,
        domainName: String,
        eventTriggerConditions: [EventTriggerCondition]? = nil,
        eventTriggerLimits: EventTriggerLimits? = nil,
        eventTriggerName: String,
        objectTypeName: String? = nil,
        segmentFilter: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateEventTriggerResponse {
        let input = UpdateEventTriggerRequest(
            description: description, 
            domainName: domainName, 
            eventTriggerConditions: eventTriggerConditions, 
            eventTriggerLimits: eventTriggerLimits, 
            eventTriggerName: eventTriggerName, 
            objectTypeName: objectTypeName, 
            segmentFilter: segmentFilter
        )
        return try await self.updateEventTrigger(input, logger: logger)
    }

    /// Updates the properties of a profile. The ProfileId is required for updating a customer profile. When calling the UpdateProfile API, specifying an empty string value means that any existing value will be removed. Not specifying a string value means that any value already there will be kept.
    @Sendable
    @inlinable
    public func updateProfile(_ input: UpdateProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProfileResponse {
        try await self.client.execute(
            operation: "UpdateProfile", 
            path: "/domains/{DomainName}/profiles", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the properties of a profile. The ProfileId is required for updating a customer profile. When calling the UpdateProfile API, specifying an empty string value means that any existing value will be removed. Not specifying a string value means that any value already there will be kept.
    ///
    /// Parameters:
    ///   - accountNumber: An account number that you have given to the customer.
    ///   - additionalInformation: Any additional information relevant to the customer’s profile.
    ///   - address: A generic address associated with the customer that is not mailing, shipping, or billing.
    ///   - attributes: A key value pair of attributes of a customer profile.
    ///   - billingAddress: The customer’s billing address.
    ///   - birthDate: The customer’s birth date.
    ///   - businessEmailAddress: The customer’s business email address.
    ///   - businessName: The name of the customer’s business.
    ///   - businessPhoneNumber: The customer’s business phone number.
    ///   - domainName: The unique name of the domain.
    ///   - emailAddress: The customer’s email address, which has not been specified as a personal or business address.
    ///   - firstName: The customer’s first name.
    ///   - gender: The gender with which the customer identifies.
    ///   - genderString: An alternative to Gender which accepts any string as input.
    ///   - homePhoneNumber: The customer’s home phone number.
    ///   - lastName: The customer’s last name.
    ///   - mailingAddress: The customer’s mailing address.
    ///   - middleName: The customer’s middle name.
    ///   - mobilePhoneNumber: The customer’s mobile phone number.
    ///   - partyType: The type of profile used to describe the customer.
    ///   - partyTypeString: An alternative to PartyType which accepts any string as input.
    ///   - personalEmailAddress: The customer’s personal email address.
    ///   - phoneNumber: The customer’s phone number, which has not been specified as a mobile, home, or business number.
    ///   - profileId: The unique identifier of a customer profile.
    ///   - shippingAddress: The customer’s shipping address.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateProfile(
        accountNumber: String? = nil,
        additionalInformation: String? = nil,
        address: UpdateAddress? = nil,
        attributes: [String: String]? = nil,
        billingAddress: UpdateAddress? = nil,
        birthDate: String? = nil,
        businessEmailAddress: String? = nil,
        businessName: String? = nil,
        businessPhoneNumber: String? = nil,
        domainName: String,
        emailAddress: String? = nil,
        firstName: String? = nil,
        gender: Gender? = nil,
        genderString: String? = nil,
        homePhoneNumber: String? = nil,
        lastName: String? = nil,
        mailingAddress: UpdateAddress? = nil,
        middleName: String? = nil,
        mobilePhoneNumber: String? = nil,
        partyType: PartyType? = nil,
        partyTypeString: String? = nil,
        personalEmailAddress: String? = nil,
        phoneNumber: String? = nil,
        profileId: String,
        shippingAddress: UpdateAddress? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateProfileResponse {
        let input = UpdateProfileRequest(
            accountNumber: accountNumber, 
            additionalInformation: additionalInformation, 
            address: address, 
            attributes: attributes, 
            billingAddress: billingAddress, 
            birthDate: birthDate, 
            businessEmailAddress: businessEmailAddress, 
            businessName: businessName, 
            businessPhoneNumber: businessPhoneNumber, 
            domainName: domainName, 
            emailAddress: emailAddress, 
            firstName: firstName, 
            gender: gender, 
            genderString: genderString, 
            homePhoneNumber: homePhoneNumber, 
            lastName: lastName, 
            mailingAddress: mailingAddress, 
            middleName: middleName, 
            mobilePhoneNumber: mobilePhoneNumber, 
            partyType: partyType, 
            partyTypeString: partyTypeString, 
            personalEmailAddress: personalEmailAddress, 
            phoneNumber: phoneNumber, 
            profileId: profileId, 
            shippingAddress: shippingAddress
        )
        return try await self.updateProfile(input, logger: logger)
    }
}

extension CustomerProfiles {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: CustomerProfiles, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension CustomerProfiles {
    /// Return PaginatorSequence for operation ``getSimilarProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getSimilarProfilesPaginator(
        _ input: GetSimilarProfilesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetSimilarProfilesRequest, GetSimilarProfilesResponse> {
        return .init(
            input: input,
            command: self.getSimilarProfiles,
            inputKey: \GetSimilarProfilesRequest.nextToken,
            outputKey: \GetSimilarProfilesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getSimilarProfiles(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - matchType: Specify the type of matching to get similar profiles for.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - searchKey: The string indicating the search key to be used.
    ///   - searchValue: The string based on SearchKey to be searched for similar profiles.
    ///   - logger: Logger used for logging
    @inlinable
    public func getSimilarProfilesPaginator(
        domainName: String,
        matchType: MatchType,
        maxResults: Int? = nil,
        searchKey: String,
        searchValue: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetSimilarProfilesRequest, GetSimilarProfilesResponse> {
        let input = GetSimilarProfilesRequest(
            domainName: domainName, 
            matchType: matchType, 
            maxResults: maxResults, 
            searchKey: searchKey, 
            searchValue: searchValue
        )
        return self.getSimilarProfilesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEventStreams(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEventStreamsPaginator(
        _ input: ListEventStreamsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEventStreamsRequest, ListEventStreamsResponse> {
        return .init(
            input: input,
            command: self.listEventStreams,
            inputKey: \ListEventStreamsRequest.nextToken,
            outputKey: \ListEventStreamsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEventStreams(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEventStreamsPaginator(
        domainName: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEventStreamsRequest, ListEventStreamsResponse> {
        let input = ListEventStreamsRequest(
            domainName: domainName, 
            maxResults: maxResults
        )
        return self.listEventStreamsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEventTriggers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEventTriggersPaginator(
        _ input: ListEventTriggersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEventTriggersRequest, ListEventTriggersResponse> {
        return .init(
            input: input,
            command: self.listEventTriggers,
            inputKey: \ListEventTriggersRequest.nextToken,
            outputKey: \ListEventTriggersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEventTriggers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of results to return per page.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEventTriggersPaginator(
        domainName: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEventTriggersRequest, ListEventTriggersResponse> {
        let input = ListEventTriggersRequest(
            domainName: domainName, 
            maxResults: maxResults
        )
        return self.listEventTriggersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listObjectTypeAttributes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listObjectTypeAttributesPaginator(
        _ input: ListObjectTypeAttributesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListObjectTypeAttributesRequest, ListObjectTypeAttributesResponse> {
        return .init(
            input: input,
            command: self.listObjectTypeAttributes,
            inputKey: \ListObjectTypeAttributesRequest.nextToken,
            outputKey: \ListObjectTypeAttributesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listObjectTypeAttributes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainName: The unique identifier of the domain.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - objectTypeName: The name of the profile object type.
    ///   - logger: Logger used for logging
    @inlinable
    public func listObjectTypeAttributesPaginator(
        domainName: String,
        maxResults: Int? = nil,
        objectTypeName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListObjectTypeAttributesRequest, ListObjectTypeAttributesResponse> {
        let input = ListObjectTypeAttributesRequest(
            domainName: domainName, 
            maxResults: maxResults, 
            objectTypeName: objectTypeName
        )
        return self.listObjectTypeAttributesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listRuleBasedMatches(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listRuleBasedMatchesPaginator(
        _ input: ListRuleBasedMatchesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRuleBasedMatchesRequest, ListRuleBasedMatchesResponse> {
        return .init(
            input: input,
            command: self.listRuleBasedMatches,
            inputKey: \ListRuleBasedMatchesRequest.nextToken,
            outputKey: \ListRuleBasedMatchesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listRuleBasedMatches(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainName: The unique name of the domain.
    ///   - maxResults: The maximum number of MatchIds returned per page.
    ///   - logger: Logger used for logging
    @inlinable
    public func listRuleBasedMatchesPaginator(
        domainName: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListRuleBasedMatchesRequest, ListRuleBasedMatchesResponse> {
        let input = ListRuleBasedMatchesRequest(
            domainName: domainName, 
            maxResults: maxResults
        )
        return self.listRuleBasedMatchesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSegmentDefinitions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSegmentDefinitionsPaginator(
        _ input: ListSegmentDefinitionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSegmentDefinitionsRequest, ListSegmentDefinitionsResponse> {
        return .init(
            input: input,
            command: self.listSegmentDefinitions,
            inputKey: \ListSegmentDefinitionsRequest.nextToken,
            outputKey: \ListSegmentDefinitionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSegmentDefinitions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - domainName: The unique identifier of the domain.
    ///   - maxResults: The maximum number of objects returned per page.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSegmentDefinitionsPaginator(
        domainName: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSegmentDefinitionsRequest, ListSegmentDefinitionsResponse> {
        let input = ListSegmentDefinitionsRequest(
            domainName: domainName, 
            maxResults: maxResults
        )
        return self.listSegmentDefinitionsPaginator(input, logger: logger)
    }
}

extension CustomerProfiles.GetSimilarProfilesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CustomerProfiles.GetSimilarProfilesRequest {
        return .init(
            domainName: self.domainName,
            matchType: self.matchType,
            maxResults: self.maxResults,
            nextToken: token,
            searchKey: self.searchKey,
            searchValue: self.searchValue
        )
    }
}

extension CustomerProfiles.ListEventStreamsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CustomerProfiles.ListEventStreamsRequest {
        return .init(
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CustomerProfiles.ListEventTriggersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CustomerProfiles.ListEventTriggersRequest {
        return .init(
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CustomerProfiles.ListObjectTypeAttributesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CustomerProfiles.ListObjectTypeAttributesRequest {
        return .init(
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token,
            objectTypeName: self.objectTypeName
        )
    }
}

extension CustomerProfiles.ListRuleBasedMatchesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CustomerProfiles.ListRuleBasedMatchesRequest {
        return .init(
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension CustomerProfiles.ListSegmentDefinitionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> CustomerProfiles.ListSegmentDefinitionsRequest {
        return .init(
            domainName: self.domainName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
