//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension ECS {
    // MARK: Enums

    public enum AgentUpdateStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case failed = "FAILED"
        case pending = "PENDING"
        case staged = "STAGED"
        case staging = "STAGING"
        case updated = "UPDATED"
        case updating = "UPDATING"
        public var description: String { return self.rawValue }
    }

    public enum ApplicationProtocol: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case grpc = "grpc"
        case http = "http"
        case http2 = "http2"
        public var description: String { return self.rawValue }
    }

    public enum AssignPublicIp: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum CPUArchitecture: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case arm64 = "ARM64"
        case x8664 = "X86_64"
        public var description: String { return self.rawValue }
    }

    public enum CapacityProviderField: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum CapacityProviderStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum CapacityProviderUpdateStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case deleteComplete = "DELETE_COMPLETE"
        case deleteFailed = "DELETE_FAILED"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case updateComplete = "UPDATE_COMPLETE"
        case updateFailed = "UPDATE_FAILED"
        case updateInProgress = "UPDATE_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum ClusterField: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case attachments = "ATTACHMENTS"
        case configurations = "CONFIGURATIONS"
        case settings = "SETTINGS"
        case statistics = "STATISTICS"
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum ClusterSettingName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case containerInsights = "containerInsights"
        public var description: String { return self.rawValue }
    }

    public enum Compatibility: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ec2 = "EC2"
        case external = "EXTERNAL"
        case fargate = "FARGATE"
        public var description: String { return self.rawValue }
    }

    public enum Connectivity: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case connected = "CONNECTED"
        case disconnected = "DISCONNECTED"
        public var description: String { return self.rawValue }
    }

    public enum ContainerCondition: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case complete = "COMPLETE"
        case healthy = "HEALTHY"
        case start = "START"
        case success = "SUCCESS"
        public var description: String { return self.rawValue }
    }

    public enum ContainerInstanceField: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case containerInstanceHealth = "CONTAINER_INSTANCE_HEALTH"
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum ContainerInstanceStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case deregistering = "DEREGISTERING"
        case draining = "DRAINING"
        case registering = "REGISTERING"
        case registrationFailed = "REGISTRATION_FAILED"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentControllerType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case codeDeploy = "CODE_DEPLOY"
        case ecs = "ECS"
        case external = "EXTERNAL"
        public var description: String { return self.rawValue }
    }

    public enum DeploymentRolloutState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum DesiredStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case pending = "PENDING"
        case running = "RUNNING"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public enum DeviceCgroupPermission: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case mknod = "mknod"
        case read = "read"
        case write = "write"
        public var description: String { return self.rawValue }
    }

    public enum EBSResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case volume = "volume"
        public var description: String { return self.rawValue }
    }

    public enum EFSAuthorizationConfigIAM: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum EFSTransitEncryption: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum EnvironmentFileType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case s3 = "s3"
        public var description: String { return self.rawValue }
    }

    public enum ExecuteCommandLogging: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `default` = "DEFAULT"
        case none = "NONE"
        case override = "OVERRIDE"
        public var description: String { return self.rawValue }
    }

    public enum FirelensConfigurationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case fluentbit = "fluentbit"
        case fluentd = "fluentd"
        public var description: String { return self.rawValue }
    }

    public enum HealthStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum InstanceHealthCheckState: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case impaired = "IMPAIRED"
        case initializing = "INITIALIZING"
        case insufficientData = "INSUFFICIENT_DATA"
        case ok = "OK"
        public var description: String { return self.rawValue }
    }

    public enum InstanceHealthCheckType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case containerRuntime = "CONTAINER_RUNTIME"
        public var description: String { return self.rawValue }
    }

    public enum IpcMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case host = "host"
        case none = "none"
        case task = "task"
        public var description: String { return self.rawValue }
    }

    public enum LaunchType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ec2 = "EC2"
        case external = "EXTERNAL"
        case fargate = "FARGATE"
        public var description: String { return self.rawValue }
    }

    public enum LogDriver: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awsfirelens = "awsfirelens"
        case awslogs = "awslogs"
        case fluentd = "fluentd"
        case gelf = "gelf"
        case journald = "journald"
        case jsonFile = "json-file"
        case splunk = "splunk"
        case syslog = "syslog"
        public var description: String { return self.rawValue }
    }

    public enum ManagedAgentName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case executeCommandAgent = "ExecuteCommandAgent"
        public var description: String { return self.rawValue }
    }

    public enum ManagedDraining: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum ManagedScalingStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum ManagedTerminationProtection: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case disabled = "DISABLED"
        case enabled = "ENABLED"
        public var description: String { return self.rawValue }
    }

    public enum NetworkMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awsvpc = "awsvpc"
        case bridge = "bridge"
        case host = "host"
        case none = "none"
        public var description: String { return self.rawValue }
    }

    public enum OSFamily: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case linux = "LINUX"
        case windowsServer2004Core = "WINDOWS_SERVER_2004_CORE"
        case windowsServer2016Full = "WINDOWS_SERVER_2016_FULL"
        case windowsServer2019Core = "WINDOWS_SERVER_2019_CORE"
        case windowsServer2019Full = "WINDOWS_SERVER_2019_FULL"
        case windowsServer2022Core = "WINDOWS_SERVER_2022_CORE"
        case windowsServer2022Full = "WINDOWS_SERVER_2022_FULL"
        case windowsServer20H2Core = "WINDOWS_SERVER_20H2_CORE"
        public var description: String { return self.rawValue }
    }

    public enum PidMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case host = "host"
        case task = "task"
        public var description: String { return self.rawValue }
    }

    public enum PlacementConstraintType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case distinctInstance = "distinctInstance"
        case memberOf = "memberOf"
        public var description: String { return self.rawValue }
    }

    public enum PlacementStrategyType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case binpack = "binpack"
        case random = "random"
        case spread = "spread"
        public var description: String { return self.rawValue }
    }

    public enum PlatformDeviceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gpu = "GPU"
        public var description: String { return self.rawValue }
    }

    public enum PropagateTags: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case none = "NONE"
        case service = "SERVICE"
        case taskDefinition = "TASK_DEFINITION"
        public var description: String { return self.rawValue }
    }

    public enum ProxyConfigurationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case appmesh = "APPMESH"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case gpu = "GPU"
        case inferenceAccelerator = "InferenceAccelerator"
        public var description: String { return self.rawValue }
    }

    public enum ScaleUnit: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case percent = "PERCENT"
        public var description: String { return self.rawValue }
    }

    public enum SchedulingStrategy: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case daemon = "DAEMON"
        case replica = "REPLICA"
        public var description: String { return self.rawValue }
    }

    public enum Scope: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case shared = "shared"
        case task = "task"
        public var description: String { return self.rawValue }
    }

    public enum ServiceField: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum SettingName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awsvpcTrunking = "awsvpcTrunking"
        case containerInsights = "containerInsights"
        case containerInstanceLongArnFormat = "containerInstanceLongArnFormat"
        case fargateFipsMode = "fargateFIPSMode"
        case fargateTaskRetirementWaitPeriod = "fargateTaskRetirementWaitPeriod"
        case guardDutyActivate = "guardDutyActivate"
        case serviceLongArnFormat = "serviceLongArnFormat"
        case tagResourceAuthorization = "tagResourceAuthorization"
        case taskLongArnFormat = "taskLongArnFormat"
        public var description: String { return self.rawValue }
    }

    public enum SettingType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awsManaged = "aws_managed"
        case user = "user"
        public var description: String { return self.rawValue }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case asc = "ASC"
        case desc = "DESC"
        public var description: String { return self.rawValue }
    }

    public enum StabilityStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case stabilizing = "STABILIZING"
        case steadyState = "STEADY_STATE"
        public var description: String { return self.rawValue }
    }

    public enum TargetType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case containerInstance = "container-instance"
        public var description: String { return self.rawValue }
    }

    public enum TaskDefinitionFamilyStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case all = "ALL"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum TaskDefinitionField: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum TaskDefinitionPlacementConstraintType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case memberOf = "memberOf"
        public var description: String { return self.rawValue }
    }

    public enum TaskDefinitionStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case active = "ACTIVE"
        case deleteInProgress = "DELETE_IN_PROGRESS"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum TaskField: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum TaskFilesystemType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case ext3 = "ext3"
        case ext4 = "ext4"
        case xfs = "xfs"
        public var description: String { return self.rawValue }
    }

    public enum TaskSetField: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public enum TaskStopCode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case essentialContainerExited = "EssentialContainerExited"
        case serviceSchedulerInitiated = "ServiceSchedulerInitiated"
        case spotInterruption = "SpotInterruption"
        case taskFailedToStart = "TaskFailedToStart"
        case terminationNotice = "TerminationNotice"
        case userInitiated = "UserInitiated"
        public var description: String { return self.rawValue }
    }

    public enum TransportProtocol: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case tcp = "tcp"
        case udp = "udp"
        public var description: String { return self.rawValue }
    }

    public enum UlimitName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case core = "core"
        case cpu = "cpu"
        case data = "data"
        case fsize = "fsize"
        case locks = "locks"
        case memlock = "memlock"
        case msgqueue = "msgqueue"
        case nice = "nice"
        case nofile = "nofile"
        case nproc = "nproc"
        case rss = "rss"
        case rtprio = "rtprio"
        case rttime = "rttime"
        case sigpending = "sigpending"
        case stack = "stack"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct Attachment: AWSDecodableShape {
        /// Details of the attachment. For elastic network interfaces, this includes the network interface ID, the MAC
        /// 			address, the subnet ID, and the private IPv4 address. For Service Connect services, this includes portName,
        /// 				clientAliases, discoveryName, and
        /// 				ingressPortOverride. For Elastic Block Storage, this includes roleArn,
        /// 				deleteOnTermination, volumeName, volumeId,
        /// 			and statusReason (only when the attachment fails to create or
        /// 			attach).
        public let details: [KeyValuePair]?
        /// The unique identifier for the attachment.
        public let id: String?
        ///  The status of the attachment. Valid values are PRECREATED,
        /// 				CREATED, ATTACHING, ATTACHED,
        /// 				DETACHING, DETACHED, DELETED, and
        /// 				FAILED.
        public let status: String?
        /// The type of the attachment, such as ElasticNetworkInterface,
        /// 				Service Connect, and AmazonElasticBlockStorage.
        public let type: String?

        public init(details: [KeyValuePair]? = nil, id: String? = nil, status: String? = nil, type: String? = nil) {
            self.details = details
            self.id = id
            self.status = status
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case id = "id"
            case status = "status"
            case type = "type"
        }
    }

    public struct AttachmentStateChange: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the attachment.
        public let attachmentArn: String
        /// The status of the attachment.
        public let status: String

        public init(attachmentArn: String, status: String) {
            self.attachmentArn = attachmentArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentArn = "attachmentArn"
            case status = "status"
        }
    }

    public struct Attribute: AWSEncodableShape & AWSDecodableShape {
        /// The name of the attribute. The name must contain between 1 and 128
        /// 			characters. The name may contain letters (uppercase and lowercase), numbers, hyphens
        /// 			(-), underscores (_), forward slashes (/), back slashes (\), or periods (.).
        public let name: String
        /// The ID of the target. You can specify the short form ID for a resource or the full
        /// 			Amazon Resource Name (ARN).
        public let targetId: String?
        /// The type of the target to attach the attribute with. This parameter is required if you
        /// 			use the short form ID for a resource instead of the full ARN.
        public let targetType: TargetType?
        /// The value of the attribute. The value must contain between 1 and 128
        /// 			characters. It can contain letters (uppercase and lowercase), numbers, hyphens (-),
        /// 			underscores (_), periods (.), at signs (@), forward slashes (/), back slashes (\),
        /// 			colons (:), or spaces. The value can't start or end with a space.
        public let value: String?

        public init(name: String, targetId: String? = nil, targetType: TargetType? = nil, value: String? = nil) {
            self.name = name
            self.targetId = targetId
            self.targetType = targetType
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case targetId = "targetId"
            case targetType = "targetType"
            case value = "value"
        }
    }

    public struct AutoScalingGroupProvider: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that identifies the Auto Scaling group, or the Auto Scaling group
        /// 			name.
        public let autoScalingGroupArn: String
        /// The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
        public let managedDraining: ManagedDraining?
        /// The managed scaling settings for the Auto Scaling group capacity provider.
        public let managedScaling: ManagedScaling?
        /// The managed termination protection setting to use for the Auto Scaling group capacity
        /// 			provider. This determines whether the Auto Scaling group has managed termination
        /// 			protection. The default is off.  When using managed termination protection, managed scaling must also be used
        /// 				otherwise managed termination protection doesn't work.  When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an
        /// 			Auto Scaling group that contain tasks from being terminated during a scale-in action.
        /// 			The Auto Scaling group and each instance in the Auto Scaling group must have instance
        /// 			protection from scale-in actions on as well. For more information, see Instance Protection in the Auto Scaling User Guide. When managed termination protection is off, your Amazon EC2 instances aren't protected from
        /// 			termination when the Auto Scaling group scales in.
        public let managedTerminationProtection: ManagedTerminationProtection?

        public init(autoScalingGroupArn: String, managedDraining: ManagedDraining? = nil, managedScaling: ManagedScaling? = nil, managedTerminationProtection: ManagedTerminationProtection? = nil) {
            self.autoScalingGroupArn = autoScalingGroupArn
            self.managedDraining = managedDraining
            self.managedScaling = managedScaling
            self.managedTerminationProtection = managedTerminationProtection
        }

        public func validate(name: String) throws {
            try self.managedScaling?.validate(name: "\(name).managedScaling")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupArn = "autoScalingGroupArn"
            case managedDraining = "managedDraining"
            case managedScaling = "managedScaling"
            case managedTerminationProtection = "managedTerminationProtection"
        }
    }

    public struct AutoScalingGroupProviderUpdate: AWSEncodableShape {
        /// The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
        public let managedDraining: ManagedDraining?
        /// The managed scaling settings for the Auto Scaling group capacity provider.
        public let managedScaling: ManagedScaling?
        /// The managed termination protection setting to use for the Auto Scaling group capacity
        /// 			provider. This determines whether the Auto Scaling group has managed termination
        /// 			protection.  When using managed termination protection, managed scaling must also be used
        /// 				otherwise managed termination protection doesn't work.  When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an
        /// 			Auto Scaling group that contain tasks from being terminated during a scale-in action.
        /// 			The Auto Scaling group and each instance in the Auto Scaling group must have instance
        /// 			protection from scale-in actions on. For more information, see Instance Protection in the Auto Scaling User Guide. When managed termination protection is off, your Amazon EC2 instances aren't protected from
        /// 			termination when the Auto Scaling group scales in.
        public let managedTerminationProtection: ManagedTerminationProtection?

        public init(managedDraining: ManagedDraining? = nil, managedScaling: ManagedScaling? = nil, managedTerminationProtection: ManagedTerminationProtection? = nil) {
            self.managedDraining = managedDraining
            self.managedScaling = managedScaling
            self.managedTerminationProtection = managedTerminationProtection
        }

        public func validate(name: String) throws {
            try self.managedScaling?.validate(name: "\(name).managedScaling")
        }

        private enum CodingKeys: String, CodingKey {
            case managedDraining = "managedDraining"
            case managedScaling = "managedScaling"
            case managedTerminationProtection = "managedTerminationProtection"
        }
    }

    public struct AwsVpcConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Whether the task's elastic network interface receives a public IP address. The default
        /// 			value is DISABLED.
        public let assignPublicIp: AssignPublicIp?
        /// The IDs of the security groups associated with the task or service. If you don't
        /// 			specify a security group, the default security group for the VPC is used. There's a
        /// 			limit of 5 security groups that can be specified per
        /// 			AwsVpcConfiguration.  All specified security groups must be from the same VPC.
        public let securityGroups: [String]?
        /// The IDs of the subnets associated with the task or service. There's a limit of 16
        /// 			subnets that can be specified per AwsVpcConfiguration.  All specified subnets must be from the same VPC.
        public let subnets: [String]

        public init(assignPublicIp: AssignPublicIp? = nil, securityGroups: [String]? = nil, subnets: [String]) {
            self.assignPublicIp = assignPublicIp
            self.securityGroups = securityGroups
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case assignPublicIp = "assignPublicIp"
            case securityGroups = "securityGroups"
            case subnets = "subnets"
        }
    }

    public struct CapacityProvider: AWSDecodableShape {
        /// The Auto Scaling group settings for the capacity provider.
        public let autoScalingGroupProvider: AutoScalingGroupProvider?
        /// The Amazon Resource Name (ARN) that identifies the capacity provider.
        public let capacityProviderArn: String?
        /// The name of the capacity provider.
        public let name: String?
        /// The current status of the capacity provider. Only capacity providers in an
        /// 				ACTIVE state can be used in a cluster. When a capacity provider is
        /// 			successfully deleted, it has an INACTIVE status.
        public let status: CapacityProviderStatus?
        /// The metadata that you apply to the capacity provider to help you categorize and
        /// 			organize it. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The update status of the capacity provider. The following are the possible states that
        /// 			is returned.  DELETE_IN_PROGRESS  The capacity provider is in the process of being deleted.  DELETE_COMPLETE  The capacity provider was successfully deleted and has an
        /// 							INACTIVE status.  DELETE_FAILED  The capacity provider can't be deleted. The update status reason provides
        /// 						further details about why the delete failed.
        public let updateStatus: CapacityProviderUpdateStatus?
        /// The update status reason. This provides further details about the update status for
        /// 			the capacity provider.
        public let updateStatusReason: String?

        public init(autoScalingGroupProvider: AutoScalingGroupProvider? = nil, capacityProviderArn: String? = nil, name: String? = nil, status: CapacityProviderStatus? = nil, tags: [Tag]? = nil, updateStatus: CapacityProviderUpdateStatus? = nil, updateStatusReason: String? = nil) {
            self.autoScalingGroupProvider = autoScalingGroupProvider
            self.capacityProviderArn = capacityProviderArn
            self.name = name
            self.status = status
            self.tags = tags
            self.updateStatus = updateStatus
            self.updateStatusReason = updateStatusReason
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupProvider = "autoScalingGroupProvider"
            case capacityProviderArn = "capacityProviderArn"
            case name = "name"
            case status = "status"
            case tags = "tags"
            case updateStatus = "updateStatus"
            case updateStatusReason = "updateStatusReason"
        }
    }

    public struct CapacityProviderStrategyItem: AWSEncodableShape & AWSDecodableShape {
        /// The base value designates how many tasks, at a minimum, to run on
        /// 			the specified capacity provider. Only one capacity provider in a capacity provider
        /// 			strategy can have a base defined. If no value is specified, the
        /// 			default value of 0 is used.
        public let base: Int?
        /// The short name of the capacity provider.
        public let capacityProvider: String
        /// The weight value designates the relative percentage of the total
        /// 			number of tasks launched that should use the specified capacity provider. The
        /// 				weight value is taken into consideration after the base
        /// 			value, if defined, is satisfied. If no weight value is specified, the default value of 0 is
        /// 			used. When multiple capacity providers are specified within a capacity provider
        /// 			strategy, at least one of the capacity providers must have a weight value greater than
        /// 			zero and any capacity providers with a weight of 0 can't be used to place
        /// 			tasks. If you specify multiple capacity providers in a strategy that all have a weight
        /// 			of 0, any RunTask or CreateService actions using
        /// 			the capacity provider strategy will fail. An example scenario for using weights is defining a strategy that contains two
        /// 			capacity providers and both have a weight of 1, then when the
        /// 				base is satisfied, the tasks will be split evenly across the two
        /// 			capacity providers. Using that same logic, if you specify a weight of 1 for
        /// 				capacityProviderA and a weight of 4 for
        /// 				capacityProviderB, then for every one task that's run using
        /// 				capacityProviderA, four tasks would use
        /// 				capacityProviderB.
        public let weight: Int?

        public init(base: Int? = nil, capacityProvider: String, weight: Int? = nil) {
            self.base = base
            self.capacityProvider = capacityProvider
            self.weight = weight
        }

        public func validate(name: String) throws {
            try self.validate(self.base, name: "base", parent: name, max: 100000)
            try self.validate(self.base, name: "base", parent: name, min: 0)
            try self.validate(self.weight, name: "weight", parent: name, max: 1000)
            try self.validate(self.weight, name: "weight", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case base = "base"
            case capacityProvider = "capacityProvider"
            case weight = "weight"
        }
    }

    public struct Cluster: AWSDecodableShape {
        /// The number of services that are running on the cluster in an ACTIVE
        /// 			state. You can view these services with ListServices.
        public let activeServicesCount: Int?
        /// The resources attached to a cluster. When using a capacity provider with a cluster,
        /// 			the capacity provider and associated resources are returned as cluster
        /// 			attachments.
        public let attachments: [Attachment]?
        /// The status of the capacity providers associated with the cluster. The following are
        /// 			the states that are returned.  UPDATE_IN_PROGRESS  The available capacity providers for the cluster are updating.  UPDATE_COMPLETE  The capacity providers have successfully updated.  UPDATE_FAILED  The capacity provider updates failed.
        public let attachmentsStatus: String?
        /// The capacity providers associated with the cluster.
        public let capacityProviders: [String]?
        /// The Amazon Resource Name (ARN) that identifies the cluster. For more information about the ARN
        /// 			format, see Amazon Resource Name (ARN) in the Amazon ECS Developer Guide.
        public let clusterArn: String?
        /// A user-generated string that you use to identify your cluster.
        public let clusterName: String?
        /// The execute command configuration for the cluster.
        public let configuration: ClusterConfiguration?
        /// The default capacity provider strategy for the cluster. When services or tasks are run
        /// 			in the cluster with no launch type or capacity provider strategy specified, the default
        /// 			capacity provider strategy is used.
        public let defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The number of tasks in the cluster that are in the PENDING state.
        public let pendingTasksCount: Int?
        /// The number of container instances registered into the cluster. This includes container
        /// 			instances in both ACTIVE and DRAINING status.
        public let registeredContainerInstancesCount: Int?
        /// The number of tasks in the cluster that are in the RUNNING state.
        public let runningTasksCount: Int?
        /// Use this parameter to set a default Service Connect namespace. After you set a default
        /// 	Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as
        /// 	client services in the namespace. This setting only applies to new services that set the enabled parameter to
        /// 	true in the ServiceConnectConfiguration.
        /// 	You can set the namespace of each service individually in the ServiceConnectConfiguration to override this default
        /// 	parameter. Tasks that run in a namespace can use short names to connect
        /// 	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
        /// 	Tasks connect through a managed proxy container
        /// 	that collects logs and metrics for increased visibility.
        /// 	Only the tasks that Amazon ECS services create are supported with Service Connect.
        /// 	For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let serviceConnectDefaults: ClusterServiceConnectDefaults?
        /// The settings for the cluster. This parameter indicates whether CloudWatch Container Insights
        /// 			is on or off for a cluster.
        public let settings: [ClusterSetting]?
        /// Additional information about your clusters that are separated by launch type. They
        /// 			include the following:   runningEC2TasksCount   RunningFargateTasksCount   pendingEC2TasksCount   pendingFargateTasksCount   activeEC2ServiceCount   activeFargateServiceCount   drainingEC2ServiceCount   drainingFargateServiceCount
        public let statistics: [KeyValuePair]?
        /// The status of the cluster. The following are the possible states that are
        /// 			returned.  ACTIVE  The cluster is ready to accept tasks and if applicable you can register
        /// 						container instances with the cluster.  PROVISIONING  The cluster has capacity providers that are associated with it and the
        /// 						resources needed for the capacity provider are being created.  DEPROVISIONING  The cluster has capacity providers that are associated with it and the
        /// 						resources needed for the capacity provider are being deleted.  FAILED  The cluster has capacity providers that are associated with it and the
        /// 						resources needed for the capacity provider have failed to create.  INACTIVE  The cluster has been deleted. Clusters with an INACTIVE
        /// 						status may remain discoverable in your account for a period of time.
        /// 						However, this behavior is subject to change in the future. We don't
        /// 						recommend that you rely on INACTIVE clusters persisting.
        public let status: String?
        /// The metadata that you apply to the cluster to help you categorize and organize them.
        /// 			Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?

        public init(activeServicesCount: Int? = nil, attachments: [Attachment]? = nil, attachmentsStatus: String? = nil, capacityProviders: [String]? = nil, clusterArn: String? = nil, clusterName: String? = nil, configuration: ClusterConfiguration? = nil, defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, pendingTasksCount: Int? = nil, registeredContainerInstancesCount: Int? = nil, runningTasksCount: Int? = nil, serviceConnectDefaults: ClusterServiceConnectDefaults? = nil, settings: [ClusterSetting]? = nil, statistics: [KeyValuePair]? = nil, status: String? = nil, tags: [Tag]? = nil) {
            self.activeServicesCount = activeServicesCount
            self.attachments = attachments
            self.attachmentsStatus = attachmentsStatus
            self.capacityProviders = capacityProviders
            self.clusterArn = clusterArn
            self.clusterName = clusterName
            self.configuration = configuration
            self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
            self.pendingTasksCount = pendingTasksCount
            self.registeredContainerInstancesCount = registeredContainerInstancesCount
            self.runningTasksCount = runningTasksCount
            self.serviceConnectDefaults = serviceConnectDefaults
            self.settings = settings
            self.statistics = statistics
            self.status = status
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case activeServicesCount = "activeServicesCount"
            case attachments = "attachments"
            case attachmentsStatus = "attachmentsStatus"
            case capacityProviders = "capacityProviders"
            case clusterArn = "clusterArn"
            case clusterName = "clusterName"
            case configuration = "configuration"
            case defaultCapacityProviderStrategy = "defaultCapacityProviderStrategy"
            case pendingTasksCount = "pendingTasksCount"
            case registeredContainerInstancesCount = "registeredContainerInstancesCount"
            case runningTasksCount = "runningTasksCount"
            case serviceConnectDefaults = "serviceConnectDefaults"
            case settings = "settings"
            case statistics = "statistics"
            case status = "status"
            case tags = "tags"
        }
    }

    public struct ClusterConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The details of the execute command configuration.
        public let executeCommandConfiguration: ExecuteCommandConfiguration?

        public init(executeCommandConfiguration: ExecuteCommandConfiguration? = nil) {
            self.executeCommandConfiguration = executeCommandConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case executeCommandConfiguration = "executeCommandConfiguration"
        }
    }

    public struct ClusterServiceConnectDefaults: AWSDecodableShape {
        /// The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace. When you create a service and don't specify a
        /// 			Service Connect configuration, this namespace is used.
        public let namespace: String?

        public init(namespace: String? = nil) {
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case namespace = "namespace"
        }
    }

    public struct ClusterServiceConnectDefaultsRequest: AWSEncodableShape {
        /// The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace that's used when you create a service and don't specify
        /// 			a Service Connect configuration. The namespace name can include up to 1024 characters.
        /// 			The name is case-sensitive. The name can't include hyphens (-), tilde (~), greater than
        /// 			(>), less than ( If you enter an existing namespace name or ARN, then that namespace will be used.
        /// 			Any namespace type is supported. The namespace must be in this account and this Amazon Web Services
        /// 			Region. If you enter a new name, a Cloud Map namespace will be created. Amazon ECS creates a
        /// 			Cloud Map namespace with the "API calls" method of instance discovery only. This instance
        /// 			discovery method is the "HTTP" namespace type in the Command Line Interface. Other types of instance
        /// 			discovery aren't used by Service Connect. If you update the cluster with an empty string "" for the namespace name,
        /// 			the cluster configuration for Service Connect is removed. Note that the namespace will
        /// 			remain in Cloud Map and must be deleted separately. For more information about Cloud Map, see Working with Services
        /// 			in the Cloud Map Developer Guide.
        public let namespace: String

        public init(namespace: String) {
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case namespace = "namespace"
        }
    }

    public struct ClusterSetting: AWSEncodableShape & AWSDecodableShape {
        /// The name of the cluster setting. The value is containerInsights .
        public let name: ClusterSettingName?
        /// The value to set for the cluster setting. The supported values are
        /// 				enabled and disabled.  If you set name to containerInsights and value
        /// 			to enabled, CloudWatch Container Insights will be on for the cluster, otherwise
        /// 			it will be off unless the containerInsights account setting is turned on.
        /// 			If a cluster value is specified, it will override the containerInsights
        /// 			value set with PutAccountSetting or PutAccountSettingDefault.
        public let value: String?

        public init(name: ClusterSettingName? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case value = "value"
        }
    }

    public struct Container: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the container.
        public let containerArn: String?
        /// The number of CPU units set for the container. The value is 0 if no value
        /// 			was specified in the container definition when the task definition was
        /// 			registered.
        public let cpu: String?
        /// The exit code returned from the container.
        public let exitCode: Int?
        /// The IDs of each GPU assigned to the container.
        public let gpuIds: [String]?
        /// The health status of the container. If health checks aren't configured for this
        /// 			container in its task definition, then it reports the health status as
        /// 				UNKNOWN.
        public let healthStatus: HealthStatus?
        /// The image used for the container.
        public let image: String?
        /// The container image manifest digest.
        public let imageDigest: String?
        /// The last known status of the container.
        public let lastStatus: String?
        /// The details of any Amazon ECS managed agents associated with the container.
        public let managedAgents: [ManagedAgent]?
        /// The hard limit (in MiB) of memory set for the container.
        public let memory: String?
        /// The soft limit (in MiB) of memory set for the container.
        public let memoryReservation: String?
        /// The name of the container.
        public let name: String?
        /// The network bindings associated with the container.
        public let networkBindings: [NetworkBinding]?
        /// The network interfaces associated with the container.
        public let networkInterfaces: [NetworkInterface]?
        /// A short (255 max characters) human-readable string to provide additional details about
        /// 			a running or stopped container.
        public let reason: String?
        /// The ID of the Docker container.
        public let runtimeId: String?
        /// The ARN of the task.
        public let taskArn: String?

        public init(containerArn: String? = nil, cpu: String? = nil, exitCode: Int? = nil, gpuIds: [String]? = nil, healthStatus: HealthStatus? = nil, image: String? = nil, imageDigest: String? = nil, lastStatus: String? = nil, managedAgents: [ManagedAgent]? = nil, memory: String? = nil, memoryReservation: String? = nil, name: String? = nil, networkBindings: [NetworkBinding]? = nil, networkInterfaces: [NetworkInterface]? = nil, reason: String? = nil, runtimeId: String? = nil, taskArn: String? = nil) {
            self.containerArn = containerArn
            self.cpu = cpu
            self.exitCode = exitCode
            self.gpuIds = gpuIds
            self.healthStatus = healthStatus
            self.image = image
            self.imageDigest = imageDigest
            self.lastStatus = lastStatus
            self.managedAgents = managedAgents
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.name = name
            self.networkBindings = networkBindings
            self.networkInterfaces = networkInterfaces
            self.reason = reason
            self.runtimeId = runtimeId
            self.taskArn = taskArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerArn = "containerArn"
            case cpu = "cpu"
            case exitCode = "exitCode"
            case gpuIds = "gpuIds"
            case healthStatus = "healthStatus"
            case image = "image"
            case imageDigest = "imageDigest"
            case lastStatus = "lastStatus"
            case managedAgents = "managedAgents"
            case memory = "memory"
            case memoryReservation = "memoryReservation"
            case name = "name"
            case networkBindings = "networkBindings"
            case networkInterfaces = "networkInterfaces"
            case reason = "reason"
            case runtimeId = "runtimeId"
            case taskArn = "taskArn"
        }
    }

    public struct ContainerDefinition: AWSEncodableShape & AWSDecodableShape {
        /// The command that's passed to the container. This parameter maps to Cmd in
        /// 			the Create a container section of the Docker Remote API and the
        /// 				COMMAND parameter to docker
        /// 				run. For more information, see https://docs.docker.com/engine/reference/builder/#cmd. If there are multiple arguments, each
        /// 			argument is a separated string in the array.
        public let command: [String]?
        /// The number of cpu units reserved for the container. This parameter maps
        /// 			to CpuShares in the Create a container section of the
        /// 			Docker Remote API and the --cpu-shares option to docker run. This field is optional for tasks using the Fargate launch type, and the
        /// 			only requirement is that the total amount of CPU reserved for all containers within a
        /// 			task be lower than the task-level cpu value.  You can determine the number of CPU units that are available per EC2 instance type
        /// 				by multiplying the vCPUs listed for that instance type on the Amazon EC2 Instances detail page
        /// 				by 1,024.  Linux containers share unallocated CPU units with other containers on the container
        /// 			instance with the same ratio as their allocated amount. For example, if you run a
        /// 			single-container task on a single-core instance type with 512 CPU units specified for
        /// 			that container, and that's the only task running on the container instance, that
        /// 			container could use the full 1,024 CPU unit share at any given time. However, if you
        /// 			launched another copy of the same task on that container instance, each task is
        /// 			guaranteed a minimum of 512 CPU units when needed. Moreover, each container could float
        /// 			to higher CPU usage if the other container was not using it. If both tasks were 100%
        /// 			active all of the time, they would be limited to 512 CPU units. On Linux container instances, the Docker daemon on the container instance uses the CPU
        /// 			value to calculate the relative CPU share ratios for running containers. For more
        /// 			information, see CPU share
        /// 				constraint in the Docker documentation. The minimum valid CPU share value
        /// 			that the Linux kernel allows is 2. However, the CPU parameter isn't required, and you
        /// 			can use CPU values below 2 in your container definitions. For CPU values below 2
        /// 			(including null), the behavior varies based on your Amazon ECS container agent
        /// 			version:    Agent versions less than or equal to 1.1.0:
        /// 					Null and zero CPU values are passed to Docker as 0, which Docker then converts
        /// 					to 1,024 CPU shares. CPU values of 1 are passed to Docker as 1, which the Linux
        /// 					kernel converts to two CPU shares.    Agent versions greater than or equal to 1.2.0:
        /// 					Null, zero, and CPU values of 1 are passed to Docker as 2.   On Windows container instances, the CPU limit is enforced as an absolute limit, or a
        /// 			quota. Windows containers only have access to the specified amount of CPU that's
        /// 			described in the task definition. A null or zero CPU value is passed to Docker as
        /// 				0, which Windows interprets as 1% of one CPU.
        public let cpu: Int?
        /// A list of ARNs in SSM or Amazon S3 to a credential spec (CredSpec) file that
        /// 			configures the container for Active Directory authentication. We recommend that you use
        /// 			this parameter instead of the dockerSecurityOptions. The maximum number of
        /// 			ARNs is 1. There are two formats for each ARN.  credentialspecdomainless:MyARN  You use credentialspecdomainless:MyARN to provide a
        /// 							CredSpec with an additional section for a secret in Secrets Manager.
        /// 						You provide the login credentials to the domain in the secret. Each task that runs on any container instance can join different
        /// 						domains. You can use this format without joining the container instance to a
        /// 						domain.  credentialspec:MyARN  You use credentialspec:MyARN to provide a
        /// 							CredSpec for a single domain. You must join the container instance to the domain before you start any
        /// 						tasks that use this task definition.   In both formats, replace MyARN with the ARN in SSM or Amazon S3. If you provide a credentialspecdomainless:MyARN, the
        /// 				credspec must provide a ARN in Secrets Manager for a secret containing the
        /// 			username, password, and the domain to connect to. For better security, the instance
        /// 			isn't joined to the domain for domainless authentication. Other applications on the
        /// 			instance can't use the domainless credentials. You can use this parameter to run tasks
        /// 			on the same instance, even it the tasks need to join different domains. For more
        /// 			information, see Using gMSAs for Windows
        /// 				Containers and Using gMSAs for Linux
        /// 				Containers.
        public let credentialSpecs: [String]?
        /// The dependencies defined for container startup and shutdown. A container can contain
        /// 			multiple dependencies on other containers in a task definition. When a dependency is
        /// 			defined for container startup, for container shutdown it is reversed. For tasks using the EC2 launch type, the container instances require at
        /// 			least version 1.26.0 of the container agent to turn on container dependencies. However,
        /// 			we recommend using the latest container agent version. For information about checking
        /// 			your agent version and updating to the latest version, see Updating the Amazon ECS
        /// 				Container Agent in the Amazon Elastic Container Service Developer Guide. If you're using an Amazon ECS-optimized Linux AMI,
        /// 			your instance needs at least version 1.26.0-1 of the ecs-init package. If
        /// 			your container instances are launched from version 20190301 or later, then
        /// 			they contain the required versions of the container agent and ecs-init. For
        /// 			more information, see Amazon ECS-optimized Linux AMI
        /// 			in the Amazon Elastic Container Service Developer Guide. For tasks using the Fargate launch type, the task or service requires
        /// 			the following platforms:   Linux platform version 1.3.0 or later.   Windows platform version 1.0.0 or later.
        public let dependsOn: [ContainerDependency]?
        /// When this parameter is true, networking is off within the container. This parameter
        /// 			maps to NetworkDisabled in the Create a container section
        /// 			of the Docker Remote API.  This parameter is not supported for Windows containers.
        public let disableNetworking: Bool?
        /// A list of DNS search domains that are presented to the container. This parameter maps
        /// 			to DnsSearch in the Create a container section of the
        /// 			Docker Remote API and the --dns-search option to docker run.  This parameter is not supported for Windows containers.
        public let dnsSearchDomains: [String]?
        /// A list of DNS servers that are presented to the container. This parameter maps to
        /// 				Dns in the Create a container section of the
        /// 			Docker Remote API and the --dns option to docker run.  This parameter is not supported for Windows containers.
        public let dnsServers: [String]?
        /// A key/value map of labels to add to the container. This parameter maps to
        /// 				Labels in the Create a container section of the
        /// 			Docker Remote API and the --label option to docker run. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'
        public let dockerLabels: [String: String]?
        /// A list of strings to provide custom configuration for multiple security systems. For
        /// 			more information about valid values, see Docker
        /// 				Run Security Configuration. This field isn't valid for containers in tasks
        /// 			using the Fargate launch type. For Linux tasks on EC2, this parameter can be used to reference custom
        /// 			labels for SELinux and AppArmor multi-level security systems. For any tasks on EC2, this parameter can be used to reference a
        /// 			credential spec file that configures a container for Active Directory authentication.
        /// 			For more information, see Using gMSAs for Windows
        /// 				Containers and Using gMSAs for Linux
        /// 				Containers in the Amazon Elastic Container Service Developer Guide. This parameter maps to SecurityOpt in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--security-opt option to docker
        /// 				run.  The Amazon ECS container agent running on a container instance must register with the
        /// 					ECS_SELINUX_CAPABLE=true or ECS_APPARMOR_CAPABLE=true
        /// 				environment variables before containers placed on that instance can use these
        /// 				security options. For more information, see Amazon ECS Container
        /// 					Agent Configuration in the Amazon Elastic Container Service Developer Guide.  For more information about valid values, see Docker
        /// 				Run Security Configuration.  Valid values: "no-new-privileges" | "apparmor:PROFILE" | "label:value" |
        /// 			"credentialspec:CredentialSpecFilePath"
        public let dockerSecurityOptions: [String]?
        ///  Early versions of the Amazon ECS container agent don't properly handle
        /// 					entryPoint parameters. If you have problems using
        /// 					entryPoint, update your container agent or enter your commands and
        /// 				arguments as command array items instead.  The entry point that's passed to the container. This parameter maps to
        /// 				Entrypoint in the Create a container section of the
        /// 			Docker Remote API and the --entrypoint option to docker run. For more information, see https://docs.docker.com/engine/reference/builder/#entrypoint.
        public let entryPoint: [String]?
        /// The environment variables to pass to a container. This parameter maps to
        /// 				Env in the Create a container section of the
        /// 			Docker Remote API and the --env option to docker run.  We don't recommend that you use plaintext environment variables for sensitive
        /// 				information, such as credential data.
        public let environment: [KeyValuePair]?
        /// A list of files containing the environment variables to pass to a container. This
        /// 			parameter maps to the --env-file option to docker run. You can specify up to ten environment files. The file must have a .env
        /// 			file extension. Each line in an environment file contains an environment variable in
        /// 				VARIABLE=VALUE format. Lines beginning with # are treated
        /// 			as comments and are ignored. For more information about the environment variable file
        /// 			syntax, see Declare default
        /// 				environment variables in file. If there are environment variables specified using the environment
        /// 			parameter in a container definition, they take precedence over the variables contained
        /// 			within an environment file. If multiple environment files are specified that contain the
        /// 			same variable, they're processed from the top down. We recommend that you use unique
        /// 			variable names. For more information, see Specifying Environment
        /// 				Variables in the Amazon Elastic Container Service Developer Guide.
        public let environmentFiles: [EnvironmentFile]?
        /// If the essential parameter of a container is marked as true,
        /// 			and that container fails or stops for any reason, all other containers that are part of
        /// 			the task are stopped. If the essential parameter of a container is marked
        /// 			as false, its failure doesn't affect the rest of the containers in a task.
        /// 			If this parameter is omitted, a container is assumed to be essential. All tasks must have at least one essential container. If you have an application
        /// 			that's composed of multiple containers, group containers that are used for a common
        /// 			purpose into components, and separate the different components into multiple task
        /// 			definitions. For more information, see Application
        /// 				Architecture in the Amazon Elastic Container Service Developer Guide.
        public let essential: Bool?
        /// A list of hostnames and IP address mappings to append to the /etc/hosts
        /// 			file on the container. This parameter maps to ExtraHosts in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--add-host option to docker
        /// 				run.  This parameter isn't supported for Windows containers or tasks that use the
        /// 					awsvpc network mode.
        public let extraHosts: [HostEntry]?
        /// The FireLens configuration for the container. This is used to specify and configure a
        /// 			log router for container logs. For more information, see Custom Log Routing
        /// 			in the Amazon Elastic Container Service Developer Guide.
        public let firelensConfiguration: FirelensConfiguration?
        /// The container health check command and associated configuration parameters for the
        /// 			container. This parameter maps to HealthCheck in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				HEALTHCHECK parameter of docker
        /// 				run.
        public let healthCheck: HealthCheck?
        /// The hostname to use for your container. This parameter maps to Hostname
        /// 			in the Create a container section of the Docker Remote API and the
        /// 				--hostname option to docker
        /// 				run.  The hostname parameter is not supported if you're using the
        /// 					awsvpc network mode.
        public let hostname: String?
        /// The image used to start a container. This string is passed directly to the Docker
        /// 			daemon. By default, images in the Docker Hub registry are available. Other repositories
        /// 			are specified with either  repository-url/image:tag or  repository-url/image@digest . Up to 255 letters (uppercase and lowercase), numbers, hyphens, underscores, colons, periods, forward slashes, and number signs are allowed. This parameter maps to Image in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				IMAGE parameter of docker
        /// 				run.   When a new task starts, the Amazon ECS container agent pulls the latest version of
        /// 					the specified image and tag for the container to use. However, subsequent
        /// 					updates to a repository image aren't propagated to already running tasks.   Images in Amazon ECR repositories can be specified by either using the full
        /// 						registry/repository:tag or
        /// 						registry/repository@digest. For example,
        /// 						012345678910.dkr.ecr..amazonaws.com/:latest
        /// 					or
        /// 						012345678910.dkr.ecr..amazonaws.com/@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE.
        /// 				   Images in official repositories on Docker Hub use a single name (for example,
        /// 						ubuntu or mongo).   Images in other repositories on Docker Hub are qualified with an organization
        /// 					name (for example, amazon/amazon-ecs-agent).   Images in other online repositories are qualified further by a domain name
        /// 					(for example, quay.io/assemblyline/ubuntu).
        public let image: String?
        /// When this parameter is true, you can deploy containerized applications
        /// 			that require stdin or a tty to be allocated. This parameter
        /// 			maps to OpenStdin in the Create a container section of the
        /// 			Docker Remote API and the --interactive option to docker run.
        public let interactive: Bool?
        /// The links parameter allows containers to communicate with each other
        /// 			without the need for port mappings. This parameter is only supported if the network mode
        /// 			of a task definition is bridge. The name:internalName
        /// 			construct is analogous to name:alias in Docker links.
        /// 			Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. For more information about linking Docker containers, go to
        /// 				Legacy container links
        /// 			in the Docker documentation. This parameter maps to Links in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--link option to docker
        /// 			run.  This parameter is not supported for Windows containers.   Containers that are collocated on a single container instance may be able to
        /// 				communicate with each other without requiring links or host port mappings. Network
        /// 				isolation is achieved on the container instance using security groups and VPC
        /// 				settings.
        public let links: [String]?
        /// Linux-specific modifications that are applied to the container, such as Linux kernel
        /// 			capabilities. For more information see KernelCapabilities.  This parameter is not supported for Windows containers.
        public let linuxParameters: LinuxParameters?
        /// The log configuration specification for the container. This parameter maps to LogConfig in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--log-driver option to docker
        /// 				run. By default, containers use the same logging driver that the Docker
        /// 			daemon uses. However the container can use a different logging driver than the Docker
        /// 			daemon by specifying a log driver with this parameter in the container definition. To
        /// 			use a different logging driver for a container, the log system must be configured
        /// 			properly on the container instance (or on a different log server for remote logging
        /// 			options). For more information about the options for different supported log drivers,
        /// 			see Configure
        /// 				logging drivers in the Docker documentation.  Amazon ECS currently supports a subset of the logging drivers available to the Docker
        /// 				daemon (shown in the LogConfiguration data type). Additional log
        /// 				drivers may be available in future releases of the Amazon ECS container agent.  This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'   The Amazon ECS container agent running on a container instance must register the
        /// 				logging drivers available on that instance with the
        /// 					ECS_AVAILABLE_LOGGING_DRIVERS environment variable before
        /// 				containers placed on that instance can use these log configuration options. For more
        /// 				information, see Amazon ECS Container
        /// 					Agent Configuration in the Amazon Elastic Container Service Developer Guide.
        public let logConfiguration: LogConfiguration?
        /// The amount (in MiB) of memory to present to the container. If your container attempts
        /// 			to exceed the memory specified here, the container is killed. The total amount of memory
        /// 			reserved for all containers within a task must be lower than the task
        /// 				memory value, if one is specified. This parameter maps to
        /// 				Memory in the Create a container section of the
        /// 			Docker Remote API and the --memory option to docker run. If using the Fargate launch type, this parameter is optional. If using the EC2 launch type, you must specify either a task-level
        /// 			memory value or a container-level memory value. If you specify both a container-level
        /// 				memory and memoryReservation value, memory
        /// 			must be greater than memoryReservation. If you specify
        /// 				memoryReservation, then that value is subtracted from the available
        /// 			memory resources for the container instance where the container is placed. Otherwise,
        /// 			the value of memory is used. The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a
        /// 			container. So, don't specify less than 6 MiB of memory for your containers.  The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a
        /// 			container. So, don't specify less than 4 MiB of memory for your containers.
        public let memory: Int?
        /// The soft limit (in MiB) of memory to reserve for the container. When system memory is
        /// 			under heavy contention, Docker attempts to keep the container memory to this soft limit.
        /// 			However, your container can consume more memory when it needs to, up to either the hard
        /// 			limit specified with the memory parameter (if applicable), or all of the
        /// 			available memory on the container instance, whichever comes first. This parameter maps
        /// 			to MemoryReservation in the Create a container section of
        /// 			the Docker Remote API and the --memory-reservation option to docker run. If a task-level memory value is not specified, you must specify a non-zero integer for
        /// 			one or both of memory or memoryReservation in a container
        /// 			definition. If you specify both, memory must be greater than
        /// 				memoryReservation. If you specify memoryReservation, then
        /// 			that value is subtracted from the available memory resources for the container instance
        /// 			where the container is placed. Otherwise, the value of memory is
        /// 			used. For example, if your container normally uses 128 MiB of memory, but occasionally
        /// 			bursts to 256 MiB of memory for short periods of time, you can set a
        /// 				memoryReservation of 128 MiB, and a memory hard limit of
        /// 			300 MiB. This configuration would allow the container to only reserve 128 MiB of memory
        /// 			from the remaining resources on the container instance, but also allow the container to
        /// 			consume more memory resources when needed. The Docker 20.10.0 or later daemon reserves a minimum of 6 MiB of memory for a
        /// 			container. So, don't specify less than 6 MiB of memory for your containers.  The Docker 19.03.13-ce or earlier daemon reserves a minimum of 4 MiB of memory for a
        /// 			container. So, don't specify less than 4 MiB of memory for your containers.
        public let memoryReservation: Int?
        /// The mount points for data volumes in your container. This parameter maps to Volumes in the Create a container
        /// 			section of the Docker Remote API and the --volume option to docker run. Windows containers can mount whole directories on the same drive as
        /// 				$env:ProgramData. Windows containers can't mount directories on a
        /// 			different drive, and mount point can't be across drives.
        public let mountPoints: [MountPoint]?
        /// The name of a container. If you're linking multiple containers together in a task
        /// 			definition, the name of one container can be entered in the
        /// 				links of another container to connect the containers.
        /// 			Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. This parameter maps to name in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--name option to docker
        /// 			run.
        public let name: String?
        /// The list of port mappings for the container. Port mappings allow containers to access
        /// 			ports on the host container instance to send or receive traffic. For task definitions that use the awsvpc network mode, only specify the
        /// 				containerPort. The hostPort can be left blank or it must
        /// 			be the same value as the containerPort. Port mappings on Windows use the NetNAT gateway address rather than
        /// 				localhost. There's no loopback for port mappings on Windows, so you
        /// 			can't access a container's mapped port from the host itself.  This parameter maps to PortBindings in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--publish option to docker
        /// 				run. If the network mode of a task definition is set to none,
        /// 			then you can't specify port mappings. If the network mode of a task definition is set to
        /// 				host, then host ports must either be undefined or they must match the
        /// 			container port in the port mapping.  After a task reaches the RUNNING status, manual and automatic host
        /// 				and container port assignments are visible in the Network
        /// 					Bindings section of a container description for a selected task in
        /// 				the Amazon ECS console. The assignments are also visible in the
        /// 					networkBindings section DescribeTasks
        /// 				responses.
        public let portMappings: [PortMapping]?
        /// When this parameter is true, the container is given elevated privileges on the host
        /// 			container instance (similar to the root user). This parameter maps to
        /// 				Privileged in the Create a container section of the
        /// 			Docker Remote API and the --privileged option to docker run.  This parameter is not supported for Windows containers or tasks run on Fargate.
        public let privileged: Bool?
        /// When this parameter is true, a TTY is allocated. This parameter maps to
        /// 				Tty in the Create a container section of the
        /// 			Docker Remote API and the --tty option to docker run.
        public let pseudoTerminal: Bool?
        /// When this parameter is true, the container is given read-only access to its root file
        /// 			system. This parameter maps to ReadonlyRootfs in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--read-only option to docker
        /// 				run.  This parameter is not supported for Windows containers.
        public let readonlyRootFilesystem: Bool?
        /// The private repository authentication credentials to use.
        public let repositoryCredentials: RepositoryCredentials?
        /// The type and amount of a resource to assign to a container. The only supported
        /// 			resource is a GPU.
        public let resourceRequirements: [ResourceRequirement]?
        /// The secrets to pass to the container. For more information, see Specifying
        /// 				Sensitive Data in the Amazon Elastic Container Service Developer Guide.
        public let secrets: [Secret]?
        /// Time duration (in seconds) to wait before giving up on resolving dependencies for a
        /// 			container. For example, you specify two containers in a task definition with containerA
        /// 			having a dependency on containerB reaching a COMPLETE,
        /// 			SUCCESS, or HEALTHY status. If a startTimeout
        /// 			value is specified for containerB and it doesn't reach the desired status within that
        /// 			time then containerA gives up and not start. This results in the task transitioning to a
        /// 				STOPPED state.  When the ECS_CONTAINER_START_TIMEOUT container agent configuration
        /// 				variable is used, it's enforced independently from this start timeout value.  For tasks using the Fargate launch type, the task or service requires
        /// 			the following platforms:   Linux platform version 1.3.0 or later.   Windows platform version 1.0.0 or later.   For tasks using the EC2 launch type, your container instances require at
        /// 			least version 1.26.0 of the container agent to use a container start
        /// 			timeout value. However, we recommend using the latest container agent version. For
        /// 			information about checking your agent version and updating to the latest version, see
        /// 				Updating the Amazon ECS
        /// 				Container Agent in the Amazon Elastic Container Service Developer Guide. If you're using an Amazon ECS-optimized Linux AMI,
        /// 			your instance needs at least version 1.26.0-1 of the ecs-init
        /// 			package. If your container instances are launched from version 20190301 or
        /// 			later, then they contain the required versions of the container agent and
        /// 				ecs-init. For more information, see Amazon ECS-optimized Linux AMI
        /// 			in the Amazon Elastic Container Service Developer Guide. The valid values are 2-120 seconds.
        public let startTimeout: Int?
        /// Time duration (in seconds) to wait before the container is forcefully killed if it
        /// 			doesn't exit normally on its own. For tasks using the Fargate launch type, the task or service requires
        /// 			the following platforms:   Linux platform version 1.3.0 or later.   Windows platform version 1.0.0 or later.   The max stop timeout value is 120 seconds and if the parameter is not specified, the
        /// 			default value of 30 seconds is used. For tasks that use the EC2 launch type, if the stopTimeout
        /// 			parameter isn't specified, the value set for the Amazon ECS container agent configuration
        /// 			variable ECS_CONTAINER_STOP_TIMEOUT is used. If neither the
        /// 				stopTimeout parameter or the ECS_CONTAINER_STOP_TIMEOUT
        /// 			agent configuration variable are set, then the default values of 30 seconds for Linux
        /// 			containers and 30 seconds on Windows containers are used. Your container instances
        /// 			require at least version 1.26.0 of the container agent to use a container stop timeout
        /// 			value. However, we recommend using the latest container agent version. For information
        /// 			about checking your agent version and updating to the latest version, see Updating the Amazon ECS Container Agent in the Amazon Elastic Container Service Developer Guide. If you're using
        /// 			an Amazon ECS-optimized Linux AMI, your instance needs at least version 1.26.0-1 of the
        /// 				ecs-init package. If your container instances are launched from version
        /// 				20190301 or later, then they contain the required versions of the
        /// 			container agent and ecs-init. For more information, see Amazon ECS-optimized Linux AMI in the Amazon Elastic Container Service Developer Guide. The valid values are 2-120 seconds.
        public let stopTimeout: Int?
        /// A list of namespaced kernel parameters to set in the container. This parameter maps to
        /// 				Sysctls in the Create a container section of the
        /// 			Docker Remote API and the --sysctl option to docker run. For example, you can configure
        /// 				net.ipv4.tcp_keepalive_time setting to maintain longer lived
        /// 			connections.
        public let systemControls: [SystemControl]?
        /// A list of ulimits to set in the container. If a ulimit value
        /// 			is specified in a task definition, it overrides the default values set by Docker. This
        /// 			parameter maps to Ulimits in the Create a container section
        /// 			of the Docker Remote API and the --ulimit option to docker run. Valid naming values are displayed
        /// 			in the Ulimit data type. Amazon ECS tasks hosted on Fargate use the default
        /// 							resource limit values set by the operating system with the exception of
        /// 							the nofile resource limit parameter which Fargate
        /// 							overrides. The nofile resource limit sets a restriction on
        /// 							the number of open files that a container can use. The default
        /// 								nofile soft limit is 1024 and the default hard limit
        /// 							is 65535. This parameter requires version 1.18 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'   This parameter is not supported for Windows containers.
        public let ulimits: [Ulimit]?
        /// The user to use inside the container. This parameter maps to User in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--user option to docker
        /// 			run.  When running tasks using the host network mode, don't run containers
        /// 				using the root user (UID 0). We recommend using a non-root user for better
        /// 				security.  You can specify the user using the following formats. If specifying a UID
        /// 			or GID, you must specify it as a positive integer.    user     user:group     uid     uid:gid     user:gid     uid:group     This parameter is not supported for Windows containers.
        public let user: String?
        /// Data volumes to mount from another container. This parameter maps to
        /// 				VolumesFrom in the Create a container section of the
        /// 			Docker Remote API and the --volumes-from option to docker run.
        public let volumesFrom: [VolumeFrom]?
        /// The working directory to run commands inside the container in. This parameter maps to
        /// 				WorkingDir in the Create a container section of the
        /// 			Docker Remote API and the --workdir option to docker run.
        public let workingDirectory: String?

        public init(command: [String]? = nil, cpu: Int? = nil, credentialSpecs: [String]? = nil, dependsOn: [ContainerDependency]? = nil, disableNetworking: Bool? = nil, dnsSearchDomains: [String]? = nil, dnsServers: [String]? = nil, dockerLabels: [String: String]? = nil, dockerSecurityOptions: [String]? = nil, entryPoint: [String]? = nil, environment: [KeyValuePair]? = nil, environmentFiles: [EnvironmentFile]? = nil, essential: Bool? = nil, extraHosts: [HostEntry]? = nil, firelensConfiguration: FirelensConfiguration? = nil, healthCheck: HealthCheck? = nil, hostname: String? = nil, image: String? = nil, interactive: Bool? = nil, links: [String]? = nil, linuxParameters: LinuxParameters? = nil, logConfiguration: LogConfiguration? = nil, memory: Int? = nil, memoryReservation: Int? = nil, mountPoints: [MountPoint]? = nil, name: String? = nil, portMappings: [PortMapping]? = nil, privileged: Bool? = nil, pseudoTerminal: Bool? = nil, readonlyRootFilesystem: Bool? = nil, repositoryCredentials: RepositoryCredentials? = nil, resourceRequirements: [ResourceRequirement]? = nil, secrets: [Secret]? = nil, startTimeout: Int? = nil, stopTimeout: Int? = nil, systemControls: [SystemControl]? = nil, ulimits: [Ulimit]? = nil, user: String? = nil, volumesFrom: [VolumeFrom]? = nil, workingDirectory: String? = nil) {
            self.command = command
            self.cpu = cpu
            self.credentialSpecs = credentialSpecs
            self.dependsOn = dependsOn
            self.disableNetworking = disableNetworking
            self.dnsSearchDomains = dnsSearchDomains
            self.dnsServers = dnsServers
            self.dockerLabels = dockerLabels
            self.dockerSecurityOptions = dockerSecurityOptions
            self.entryPoint = entryPoint
            self.environment = environment
            self.environmentFiles = environmentFiles
            self.essential = essential
            self.extraHosts = extraHosts
            self.firelensConfiguration = firelensConfiguration
            self.healthCheck = healthCheck
            self.hostname = hostname
            self.image = image
            self.interactive = interactive
            self.links = links
            self.linuxParameters = linuxParameters
            self.logConfiguration = logConfiguration
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.mountPoints = mountPoints
            self.name = name
            self.portMappings = portMappings
            self.privileged = privileged
            self.pseudoTerminal = pseudoTerminal
            self.readonlyRootFilesystem = readonlyRootFilesystem
            self.repositoryCredentials = repositoryCredentials
            self.resourceRequirements = resourceRequirements
            self.secrets = secrets
            self.startTimeout = startTimeout
            self.stopTimeout = stopTimeout
            self.systemControls = systemControls
            self.ulimits = ulimits
            self.user = user
            self.volumesFrom = volumesFrom
            self.workingDirectory = workingDirectory
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case cpu = "cpu"
            case credentialSpecs = "credentialSpecs"
            case dependsOn = "dependsOn"
            case disableNetworking = "disableNetworking"
            case dnsSearchDomains = "dnsSearchDomains"
            case dnsServers = "dnsServers"
            case dockerLabels = "dockerLabels"
            case dockerSecurityOptions = "dockerSecurityOptions"
            case entryPoint = "entryPoint"
            case environment = "environment"
            case environmentFiles = "environmentFiles"
            case essential = "essential"
            case extraHosts = "extraHosts"
            case firelensConfiguration = "firelensConfiguration"
            case healthCheck = "healthCheck"
            case hostname = "hostname"
            case image = "image"
            case interactive = "interactive"
            case links = "links"
            case linuxParameters = "linuxParameters"
            case logConfiguration = "logConfiguration"
            case memory = "memory"
            case memoryReservation = "memoryReservation"
            case mountPoints = "mountPoints"
            case name = "name"
            case portMappings = "portMappings"
            case privileged = "privileged"
            case pseudoTerminal = "pseudoTerminal"
            case readonlyRootFilesystem = "readonlyRootFilesystem"
            case repositoryCredentials = "repositoryCredentials"
            case resourceRequirements = "resourceRequirements"
            case secrets = "secrets"
            case startTimeout = "startTimeout"
            case stopTimeout = "stopTimeout"
            case systemControls = "systemControls"
            case ulimits = "ulimits"
            case user = "user"
            case volumesFrom = "volumesFrom"
            case workingDirectory = "workingDirectory"
        }
    }

    public struct ContainerDependency: AWSEncodableShape & AWSDecodableShape {
        /// The dependency condition of the container. The following are the available conditions
        /// 			and their behavior:    START - This condition emulates the behavior of links and
        /// 					volumes today. It validates that a dependent container is started before
        /// 					permitting other containers to start.    COMPLETE - This condition validates that a dependent
        /// 					container runs to completion (exits) before permitting other containers to
        /// 					start. This can be useful for nonessential containers that run a script and then
        /// 					exit. This condition can't be set on an essential container.    SUCCESS - This condition is the same as
        /// 						COMPLETE, but it also requires that the container exits with a
        /// 						zero status. This condition can't be set on an essential
        /// 					container.    HEALTHY - This condition validates that the dependent
        /// 					container passes its Docker health check before permitting other containers to
        /// 					start. This requires that the dependent container has health checks configured.
        /// 					This condition is confirmed only at task startup.
        public let condition: ContainerCondition
        /// The name of a container.
        public let containerName: String

        public init(condition: ContainerCondition, containerName: String) {
            self.condition = condition
            self.containerName = containerName
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "condition"
            case containerName = "containerName"
        }
    }

    public struct ContainerInstance: AWSDecodableShape {
        /// This parameter returns true if the agent is connected to Amazon ECS. An
        /// 			instance with an agent that may be unhealthy or stopped return false. Only
        /// 			instances connected to an agent can accept task placement requests.
        public let agentConnected: Bool?
        /// The status of the most recent agent update. If an update wasn't ever requested, this
        /// 			value is NULL.
        public let agentUpdateStatus: AgentUpdateStatus?
        /// The resources attached to a container instance, such as an elastic network
        /// 			interface.
        public let attachments: [Attachment]?
        /// The attributes set for the container instance, either by the Amazon ECS container agent at
        /// 			instance registration or manually with the PutAttributes
        /// 			operation.
        public let attributes: [Attribute]?
        /// The capacity provider that's associated with the container instance.
        public let capacityProviderName: String?
        /// The Amazon Resource Name (ARN) of the container instance. For more information about the ARN format,
        /// 			see Amazon Resource Name (ARN) in the Amazon ECS Developer Guide.
        public let containerInstanceArn: String?
        /// The ID of the container instance. For Amazon EC2 instances, this value is the Amazon EC2
        /// 			instance ID. For external instances, this value is the Amazon Web Services Systems Manager managed instance ID.
        public let ec2InstanceId: String?
        /// An object representing the health status of the container instance.
        public let healthStatus: ContainerInstanceHealthStatus?
        /// The number of tasks on the container instance that are in the PENDING
        /// 			status.
        public let pendingTasksCount: Int?
        /// The Unix timestamp for the time when the container instance was registered.
        public let registeredAt: Date?
        /// For CPU and memory resource types, this parameter describes the amount of each
        /// 			resource that was available on the container instance when the container agent
        /// 			registered it with Amazon ECS. This value represents the total amount of CPU and memory that
        /// 			can be allocated on this container instance to tasks. For port resource types, this
        /// 			parameter describes the ports that were reserved by the Amazon ECS container agent when it
        /// 			registered the container instance with Amazon ECS.
        public let registeredResources: [Resource]?
        /// For CPU and memory resource types, this parameter describes the remaining CPU and
        /// 			memory that wasn't already allocated to tasks and is therefore available for new tasks.
        /// 			For port resource types, this parameter describes the ports that were reserved by the
        /// 			Amazon ECS container agent (at instance registration time) and any task containers that have
        /// 			reserved port mappings on the host (with the host or bridge
        /// 			network mode). Any port that's not specified here is available for new tasks.
        public let remainingResources: [Resource]?
        /// The number of tasks on the container instance that have a desired status
        /// 				(desiredStatus) of RUNNING.
        public let runningTasksCount: Int?
        /// The status of the container instance. The valid values are REGISTERING,
        /// 				REGISTRATION_FAILED, ACTIVE, INACTIVE,
        /// 				DEREGISTERING, or DRAINING. If your account has opted in to the awsvpcTrunking account setting, then
        /// 			any newly registered container instance will transition to a REGISTERING
        /// 			status while the trunk elastic network interface is provisioned for the instance. If the
        /// 			registration fails, the instance will transition to a REGISTRATION_FAILED
        /// 			status. You can describe the container instance and see the reason for failure in the
        /// 				statusReason parameter. Once the container instance is terminated, the
        /// 			instance transitions to a DEREGISTERING status while the trunk elastic
        /// 			network interface is deprovisioned. The instance then transitions to an
        /// 				INACTIVE status. The ACTIVE status indicates that the container instance can accept tasks.
        /// 			The DRAINING indicates that new tasks aren't placed on the container
        /// 			instance and any service tasks running on the container instance are removed if
        /// 			possible. For more information, see Container instance draining in the
        /// 			Amazon Elastic Container Service Developer Guide.
        public let status: String?
        /// The reason that the container instance reached its current status.
        public let statusReason: String?
        /// The metadata that you apply to the container instance to help you categorize and
        /// 			organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The version counter for the container instance. Every time a container instance
        /// 			experiences a change that triggers a CloudWatch event, the version counter is
        /// 			incremented. If you're replicating your Amazon ECS container instance state with CloudWatch
        /// 			Events, you can compare the version of a container instance reported by the Amazon ECS APIs
        /// 			with the version reported in CloudWatch Events for the container instance (inside the
        /// 				detail object) to verify that the version in your event stream is
        /// 			current.
        public let version: Int64?
        /// The version information for the Amazon ECS container agent and Docker daemon running on the
        /// 			container instance.
        public let versionInfo: VersionInfo?

        public init(agentConnected: Bool? = nil, agentUpdateStatus: AgentUpdateStatus? = nil, attachments: [Attachment]? = nil, attributes: [Attribute]? = nil, capacityProviderName: String? = nil, containerInstanceArn: String? = nil, ec2InstanceId: String? = nil, healthStatus: ContainerInstanceHealthStatus? = nil, pendingTasksCount: Int? = nil, registeredAt: Date? = nil, registeredResources: [Resource]? = nil, remainingResources: [Resource]? = nil, runningTasksCount: Int? = nil, status: String? = nil, statusReason: String? = nil, tags: [Tag]? = nil, version: Int64? = nil, versionInfo: VersionInfo? = nil) {
            self.agentConnected = agentConnected
            self.agentUpdateStatus = agentUpdateStatus
            self.attachments = attachments
            self.attributes = attributes
            self.capacityProviderName = capacityProviderName
            self.containerInstanceArn = containerInstanceArn
            self.ec2InstanceId = ec2InstanceId
            self.healthStatus = healthStatus
            self.pendingTasksCount = pendingTasksCount
            self.registeredAt = registeredAt
            self.registeredResources = registeredResources
            self.remainingResources = remainingResources
            self.runningTasksCount = runningTasksCount
            self.status = status
            self.statusReason = statusReason
            self.tags = tags
            self.version = version
            self.versionInfo = versionInfo
        }

        private enum CodingKeys: String, CodingKey {
            case agentConnected = "agentConnected"
            case agentUpdateStatus = "agentUpdateStatus"
            case attachments = "attachments"
            case attributes = "attributes"
            case capacityProviderName = "capacityProviderName"
            case containerInstanceArn = "containerInstanceArn"
            case ec2InstanceId = "ec2InstanceId"
            case healthStatus = "healthStatus"
            case pendingTasksCount = "pendingTasksCount"
            case registeredAt = "registeredAt"
            case registeredResources = "registeredResources"
            case remainingResources = "remainingResources"
            case runningTasksCount = "runningTasksCount"
            case status = "status"
            case statusReason = "statusReason"
            case tags = "tags"
            case version = "version"
            case versionInfo = "versionInfo"
        }
    }

    public struct ContainerInstanceHealthStatus: AWSDecodableShape {
        /// An array of objects representing the details of the container instance health
        /// 			status.
        public let details: [InstanceHealthCheckResult]?
        /// The overall health status of the container instance. This is an aggregate status of
        /// 			all container instance health checks.
        public let overallStatus: InstanceHealthCheckState?

        public init(details: [InstanceHealthCheckResult]? = nil, overallStatus: InstanceHealthCheckState? = nil) {
            self.details = details
            self.overallStatus = overallStatus
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case overallStatus = "overallStatus"
        }
    }

    public struct ContainerOverride: AWSEncodableShape & AWSDecodableShape {
        /// The command to send to the container that overrides the default command from the
        /// 			Docker image or the task definition. You must also specify a container name.
        public let command: [String]?
        /// The number of cpu units reserved for the container, instead of the
        /// 			default value from the task definition. You must also specify a container name.
        public let cpu: Int?
        /// The environment variables to send to the container. You can add new environment
        /// 			variables, which are added to the container at launch, or you can override the existing
        /// 			environment variables from the Docker image or the task definition. You must also
        /// 			specify a container name.
        public let environment: [KeyValuePair]?
        /// A list of files containing the environment variables to pass to a container, instead
        /// 			of the value from the container definition.
        public let environmentFiles: [EnvironmentFile]?
        /// The hard limit (in MiB) of memory to present to the container, instead of the default
        /// 			value from the task definition. If your container attempts to exceed the memory
        /// 			specified here, the container is killed. You must also specify a container name.
        public let memory: Int?
        /// The soft limit (in MiB) of memory to reserve for the container, instead of the default
        /// 			value from the task definition. You must also specify a container name.
        public let memoryReservation: Int?
        /// The name of the container that receives the override. This parameter is required if
        /// 			any override is specified.
        public let name: String?
        /// The type and amount of a resource to assign to a container, instead of the default
        /// 			value from the task definition. The only supported resource is a GPU.
        public let resourceRequirements: [ResourceRequirement]?

        public init(command: [String]? = nil, cpu: Int? = nil, environment: [KeyValuePair]? = nil, environmentFiles: [EnvironmentFile]? = nil, memory: Int? = nil, memoryReservation: Int? = nil, name: String? = nil, resourceRequirements: [ResourceRequirement]? = nil) {
            self.command = command
            self.cpu = cpu
            self.environment = environment
            self.environmentFiles = environmentFiles
            self.memory = memory
            self.memoryReservation = memoryReservation
            self.name = name
            self.resourceRequirements = resourceRequirements
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case cpu = "cpu"
            case environment = "environment"
            case environmentFiles = "environmentFiles"
            case memory = "memory"
            case memoryReservation = "memoryReservation"
            case name = "name"
            case resourceRequirements = "resourceRequirements"
        }
    }

    public struct ContainerStateChange: AWSEncodableShape {
        /// The name of the container.
        public let containerName: String?
        /// The exit code for the container, if the state change is a result of the container
        /// 			exiting.
        public let exitCode: Int?
        /// The container image SHA 256 digest.
        public let imageDigest: String?
        /// Any network bindings that are associated with the container.
        public let networkBindings: [NetworkBinding]?
        /// The reason for the state change.
        public let reason: String?
        /// The ID of the Docker container.
        public let runtimeId: String?
        /// The status of the container.
        public let status: String?

        public init(containerName: String? = nil, exitCode: Int? = nil, imageDigest: String? = nil, networkBindings: [NetworkBinding]? = nil, reason: String? = nil, runtimeId: String? = nil, status: String? = nil) {
            self.containerName = containerName
            self.exitCode = exitCode
            self.imageDigest = imageDigest
            self.networkBindings = networkBindings
            self.reason = reason
            self.runtimeId = runtimeId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case containerName = "containerName"
            case exitCode = "exitCode"
            case imageDigest = "imageDigest"
            case networkBindings = "networkBindings"
            case reason = "reason"
            case runtimeId = "runtimeId"
            case status = "status"
        }
    }

    public struct CreateCapacityProviderRequest: AWSEncodableShape {
        /// The details of the Auto Scaling group for the capacity provider.
        public let autoScalingGroupProvider: AutoScalingGroupProvider
        /// The name of the capacity provider. Up to 255 characters are allowed. They include
        /// 			letters (both upper and lowercase letters), numbers, underscores (_), and hyphens (-).
        /// 			The name can't be prefixed with "aws", "ecs", or
        /// 				"fargate".
        public let name: String
        /// The metadata that you apply to the capacity provider to categorize and organize them
        /// 			more conveniently. Each tag consists of a key and an optional value. You define both of
        /// 			them. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?

        public init(autoScalingGroupProvider: AutoScalingGroupProvider, name: String, tags: [Tag]? = nil) {
            self.autoScalingGroupProvider = autoScalingGroupProvider
            self.name = name
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.autoScalingGroupProvider.validate(name: "\(name).autoScalingGroupProvider")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupProvider = "autoScalingGroupProvider"
            case name = "name"
            case tags = "tags"
        }
    }

    public struct CreateCapacityProviderResponse: AWSDecodableShape {
        /// The full description of the new capacity provider.
        public let capacityProvider: CapacityProvider?

        public init(capacityProvider: CapacityProvider? = nil) {
            self.capacityProvider = capacityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProvider = "capacityProvider"
        }
    }

    public struct CreateClusterRequest: AWSEncodableShape {
        /// The short name of one or more capacity providers to associate with the cluster. A
        /// 			capacity provider must be associated with a cluster before it can be included as part of
        /// 			the default capacity provider strategy of the cluster or used in a capacity provider
        /// 			strategy when calling the CreateService or
        /// 				RunTask actions. If specifying a capacity provider that uses an Auto Scaling group, the capacity
        /// 			provider must be created but not associated with another cluster. New Auto Scaling group
        /// 			capacity providers can be created with the CreateCapacityProvider API operation. To use a Fargate capacity provider, specify either the FARGATE or
        /// 				FARGATE_SPOT capacity providers. The Fargate capacity providers are
        /// 			available to all accounts and only need to be associated with a cluster to be
        /// 			used. The PutCapacityProvider API operation is used to update the list of available
        /// 			capacity providers for a cluster after the cluster is created.
        public let capacityProviders: [String]?
        /// The name of your cluster. If you don't specify a name for your cluster, you create a
        /// 			cluster that's named default. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
        public let clusterName: String?
        /// The execute command configuration for the cluster.
        public let configuration: ClusterConfiguration?
        /// The capacity provider strategy to set as the default for the cluster. After a default
        /// 			capacity provider strategy is set for a cluster, when you call the CreateService or RunTask APIs with no
        /// 			capacity provider strategy or launch type specified, the default capacity provider
        /// 			strategy for the cluster is used. If a default capacity provider strategy isn't defined for a cluster when it was
        /// 			created, it can be defined later with the PutClusterCapacityProviders
        /// 			API operation.
        public let defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// Use this parameter to set a default Service Connect namespace. After you set a default
        /// 	Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as
        /// 	client services in the namespace. This setting only applies to new services that set the enabled parameter to
        /// 	true in the ServiceConnectConfiguration.
        /// 	You can set the namespace of each service individually in the ServiceConnectConfiguration to override this default
        /// 	parameter. Tasks that run in a namespace can use short names to connect
        /// 	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
        /// 	Tasks connect through a managed proxy container
        /// 	that collects logs and metrics for increased visibility.
        /// 	Only the tasks that Amazon ECS services create are supported with Service Connect.
        /// 	For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let serviceConnectDefaults: ClusterServiceConnectDefaultsRequest?
        /// The setting to use when creating a cluster. This parameter is used to turn on CloudWatch
        /// 			Container Insights for a cluster. If this value is specified, it overrides the
        /// 				containerInsights value set with PutAccountSetting or
        /// 				PutAccountSettingDefault.
        public let settings: [ClusterSetting]?
        /// The metadata that you apply to the cluster to help you categorize and organize them.
        /// 			Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?

        public init(capacityProviders: [String]? = nil, clusterName: String? = nil, configuration: ClusterConfiguration? = nil, defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, serviceConnectDefaults: ClusterServiceConnectDefaultsRequest? = nil, settings: [ClusterSetting]? = nil, tags: [Tag]? = nil) {
            self.capacityProviders = capacityProviders
            self.clusterName = clusterName
            self.configuration = configuration
            self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
            self.serviceConnectDefaults = serviceConnectDefaults
            self.settings = settings
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.defaultCapacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).defaultCapacityProviderStrategy[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviders = "capacityProviders"
            case clusterName = "clusterName"
            case configuration = "configuration"
            case defaultCapacityProviderStrategy = "defaultCapacityProviderStrategy"
            case serviceConnectDefaults = "serviceConnectDefaults"
            case settings = "settings"
            case tags = "tags"
        }
    }

    public struct CreateClusterResponse: AWSDecodableShape {
        /// The full description of your new cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct CreateServiceRequest: AWSEncodableShape {
        /// The capacity provider strategy to use for the service. If a capacityProviderStrategy is specified, the launchType
        /// 			parameter must be omitted. If no capacityProviderStrategy or
        /// 				launchType is specified, the
        /// 				defaultCapacityProviderStrategy for the cluster is used. A capacity provider strategy may contain a maximum of 6 capacity providers.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// An identifier that you provide to ensure the idempotency of the request. It must be
        /// 			unique and is case sensitive. Up to 36 ASCII characters in the range of 33-126 (inclusive) are allowed.
        public let clientToken: String?
        /// The short name or full Amazon Resource Name (ARN) of the cluster that you run your service on.
        /// 			If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// Optional deployment parameters that control how many tasks run during the deployment
        /// 			and the ordering of stopping and starting tasks.
        public let deploymentConfiguration: DeploymentConfiguration?
        /// The deployment controller to use for the service. If no deployment controller is
        /// 			specified, the default value of ECS is used.
        public let deploymentController: DeploymentController?
        /// The number of instantiations of the specified task definition to place and keep
        /// 			running in your service. This is required if schedulingStrategy is REPLICA or isn't
        /// 			specified. If schedulingStrategy is DAEMON then this isn't
        /// 			required.
        public let desiredCount: Int?
        /// Specifies whether to turn on Amazon ECS managed tags for the tasks within the service. For
        /// 			more information, see Tagging your Amazon ECS
        /// 				resources in the Amazon Elastic Container Service Developer Guide. When you use Amazon ECS managed tags, you need to set the propagateTags
        /// 			request parameter.
        public let enableECSManagedTags: Bool?
        /// Determines whether the execute command functionality is turned on for the service. If
        /// 				true, this enables execute command functionality on all containers in
        /// 			the service tasks.
        public let enableExecuteCommand: Bool?
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
        /// 			Elastic Load Balancing target health checks after a task has first started. This is only used when your
        /// 			service is configured to use a load balancer. If your service has a load balancer
        /// 			defined and you don't specify a health check grace period value, the default value of
        /// 				0 is used. If you do not use an Elastic Load Balancing, we recommend that you use the startPeriod in
        /// 			the task definition health check parameters. For more information, see Health
        /// 				check. If your service's tasks take a while to start and respond to Elastic Load Balancing health checks, you can
        /// 			specify a health check grace period of up to 2,147,483,647 seconds (about 69 years).
        /// 			During that time, the Amazon ECS service scheduler ignores health check status. This grace
        /// 			period can prevent the service scheduler from marking tasks as unhealthy and stopping
        /// 			them before they have time to come up.
        public let healthCheckGracePeriodSeconds: Int?
        /// The infrastructure that you run your service on. For more information, see Amazon ECS
        /// 				launch types in the Amazon Elastic Container Service Developer Guide. The FARGATE launch type runs your tasks on Fargate On-Demand
        /// 			infrastructure.  Fargate Spot infrastructure is available for use but a capacity provider
        /// 				strategy must be used. For more information, see Fargate capacity providers in the
        /// 					Amazon ECS Developer Guide.  The EC2 launch type runs your tasks on Amazon EC2 instances registered to your
        /// 			cluster. The EXTERNAL launch type runs your tasks on your on-premises server or
        /// 			virtual machine (VM) capacity registered to your cluster. A service can use either a launch type or a capacity provider strategy. If a
        /// 				launchType is specified, the capacityProviderStrategy
        /// 			parameter must be omitted.
        public let launchType: LaunchType?
        /// A load balancer object representing the load balancers to use with your service. For
        /// 			more information, see Service load balancing in the Amazon Elastic Container Service Developer Guide. If the service uses the rolling update (ECS) deployment controller and
        /// 			using either an Application Load Balancer or Network Load Balancer, you must specify one or more target group ARNs to attach
        /// 			to the service. The service-linked role is required for services that use multiple
        /// 			target groups. For more information, see Using service-linked roles for Amazon ECS in the
        /// 			Amazon Elastic Container Service Developer Guide. If the service uses the CODE_DEPLOY deployment controller, the service is
        /// 			required to use either an Application Load Balancer or Network Load Balancer. When creating an CodeDeploy deployment group, you
        /// 			specify two target groups (referred to as a targetGroupPair). During a
        /// 			deployment, CodeDeploy determines which task set in your service has the status
        /// 				PRIMARY, and it associates one target group with it. Then, it also
        /// 			associates the other target group with the replacement task set. The load balancer can
        /// 			also have up to two listeners: a required listener for production traffic and an
        /// 			optional listener that you can use to perform validation tests with Lambda functions
        /// 			before routing production traffic to it. If you use the CODE_DEPLOY deployment controller, these values can be
        /// 			changed when updating the service. For Application Load Balancers and Network Load Balancers, this object must contain the load balancer target group ARN,
        /// 			the container name, and the container port to access from the load balancer. The
        /// 			container name must be as it appears in a container definition. The load balancer name
        /// 			parameter must be omitted. When a task from this service is placed on a container
        /// 			instance, the container instance and port combination is registered as a target in the
        /// 			target group that's specified here. For Classic Load Balancers, this object must contain the load balancer name, the container name , and
        /// 			the container port to access from the load balancer. The container name must be as it
        /// 			appears in a container definition. The target group ARN parameter must be omitted.
        /// 			When a task from this service is placed on a container instance, the container instance
        /// 			is registered with the load balancer that's specified here. Services with tasks that use the awsvpc network mode (for example, those
        /// 			with the Fargate launch type) only support Application Load Balancers and Network Load Balancers. Classic Load Balancers
        /// 			aren't supported. Also, when you create any target groups for these services, you must
        /// 			choose ip as the target type, not instance. This is because
        /// 			tasks that use the awsvpc network mode are associated with an elastic
        /// 			network interface, not an Amazon EC2 instance.
        public let loadBalancers: [LoadBalancer]?
        /// The network configuration for the service. This parameter is required for task
        /// 			definitions that use the awsvpc network mode to receive their own elastic
        /// 			network interface, and it isn't supported for other network modes. For more information,
        /// 			see Task networking
        /// 			in the Amazon Elastic Container Service Developer Guide.
        public let networkConfiguration: NetworkConfiguration?
        /// An array of placement constraint objects to use for tasks in your service. You can
        /// 			specify a maximum of 10 constraints for each task. This limit includes constraints in
        /// 			the task definition and those specified at runtime.
        public let placementConstraints: [PlacementConstraint]?
        /// The placement strategy objects to use for tasks in your service. You can specify a
        /// 			maximum of 5 strategy rules for each service.
        public let placementStrategy: [PlacementStrategy]?
        /// The platform version that your tasks in the service are running on. A platform version
        /// 			is specified only for tasks using the Fargate launch type. If one isn't
        /// 			specified, the LATEST platform version is used. For more information, see
        /// 				Fargate platform versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// Specifies whether to propagate the tags from the task definition to the task. If no
        /// 			value is specified, the tags aren't propagated. Tags can only be propagated to the task
        /// 			during task creation. To add tags to a task after task creation, use the TagResource API action. You must set this to a value other than NONE when you use Cost Explorer. For more information, see Amazon ECS usage reports in the Amazon Elastic Container Service Developer Guide. The default is NONE.
        public let propagateTags: PropagateTags?
        /// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon ECS to make calls to your
        /// 			load balancer on your behalf. This parameter is only permitted if you are using a load
        /// 			balancer with your service and your task definition doesn't use the awsvpc
        /// 			network mode. If you specify the role parameter, you must also specify a
        /// 			load balancer object with the loadBalancers parameter.  If your account has already created the Amazon ECS service-linked role, that role is
        /// 				used for your service unless you specify a role here. The service-linked role is
        /// 				required if your task definition uses the awsvpc network mode or if the
        /// 				service is configured to use service discovery, an external deployment controller,
        /// 				multiple target groups, or Elastic Inference accelerators in which case you don't
        /// 				specify a role here. For more information, see Using
        /// 					service-linked roles for Amazon ECS in the Amazon Elastic Container Service Developer Guide.  If your specified role has a path other than /, then you must either
        /// 			specify the full role ARN (this is recommended) or prefix the role name with the path.
        /// 			For example, if a role with the name bar has a path of /foo/
        /// 			then you would specify /foo/bar as the role name. For more information, see
        /// 				Friendly names and paths in the IAM User
        /// 			Guide.
        public let role: String?
        /// The scheduling strategy to use for the service. For more information, see Services. There are two service scheduler strategies available:    REPLICA-The replica scheduling strategy places and
        /// 					maintains the desired number of tasks across your cluster. By default, the
        /// 					service scheduler spreads tasks across Availability Zones. You can use task
        /// 					placement strategies and constraints to customize task placement decisions. This
        /// 					scheduler strategy is required if the service uses the CODE_DEPLOY
        /// 					or EXTERNAL deployment controller types.    DAEMON-The daemon scheduling strategy deploys exactly one
        /// 					task on each active container instance that meets all of the task placement
        /// 					constraints that you specify in your cluster. The service scheduler also
        /// 					evaluates the task placement constraints for running tasks and will stop tasks
        /// 					that don't meet the placement constraints. When you're using this strategy, you
        /// 					don't need to specify a desired number of tasks, a task placement strategy, or
        /// 					use Service Auto Scaling policies.  Tasks using the Fargate launch type or the
        /// 							CODE_DEPLOY or EXTERNAL deployment controller
        /// 						types don't support the DAEMON scheduling strategy.
        public let schedulingStrategy: SchedulingStrategy?
        /// The configuration for this service to discover and connect to
        /// 	services, and be discovered by, and connected from, other services within a namespace. Tasks that run in a namespace can use short names to connect
        /// 	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
        /// 	Tasks connect through a managed proxy container
        /// 	that collects logs and metrics for increased visibility.
        /// 	Only the tasks that Amazon ECS services create are supported with Service Connect.
        /// 	For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let serviceConnectConfiguration: ServiceConnectConfiguration?
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within
        /// 			a cluster, but you can have similarly named services in multiple clusters within a
        /// 			Region or across multiple Regions.
        public let serviceName: String
        /// The details of the service discovery registry to associate with this service. For more
        /// 			information, see Service
        /// 				discovery.  Each service may be associated with one service registry. Multiple service
        /// 				registries for each service isn't supported.
        public let serviceRegistries: [ServiceRegistry]?
        /// The metadata that you apply to the service to help you categorize and organize them.
        /// 			Each tag consists of a key and an optional value, both of which you define. When a
        /// 			service is deleted, the tags are deleted as well. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The family and revision (family:revision) or
        /// 			full ARN of the task definition to run in your service. If a revision
        /// 			isn't specified, the latest ACTIVE revision is used. A task definition must be specified if the service uses either the ECS or
        /// 				CODE_DEPLOY deployment controllers. For more information about deployment types, see Amazon ECS deployment
        /// 				types.
        public let taskDefinition: String?
        /// The configuration for a volume specified in the task definition as a volume that is
        /// 			configured at launch time. Currently, the only supported volume type is an Amazon EBS
        /// 			volume.
        public let volumeConfigurations: [ServiceVolumeConfiguration]?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, clientToken: String? = nil, cluster: String? = nil, deploymentConfiguration: DeploymentConfiguration? = nil, deploymentController: DeploymentController? = nil, desiredCount: Int? = nil, enableECSManagedTags: Bool? = nil, enableExecuteCommand: Bool? = nil, healthCheckGracePeriodSeconds: Int? = nil, launchType: LaunchType? = nil, loadBalancers: [LoadBalancer]? = nil, networkConfiguration: NetworkConfiguration? = nil, placementConstraints: [PlacementConstraint]? = nil, placementStrategy: [PlacementStrategy]? = nil, platformVersion: String? = nil, propagateTags: PropagateTags? = nil, role: String? = nil, schedulingStrategy: SchedulingStrategy? = nil, serviceConnectConfiguration: ServiceConnectConfiguration? = nil, serviceName: String, serviceRegistries: [ServiceRegistry]? = nil, tags: [Tag]? = nil, taskDefinition: String? = nil, volumeConfigurations: [ServiceVolumeConfiguration]? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clientToken = clientToken
            self.cluster = cluster
            self.deploymentConfiguration = deploymentConfiguration
            self.deploymentController = deploymentController
            self.desiredCount = desiredCount
            self.enableECSManagedTags = enableECSManagedTags
            self.enableExecuteCommand = enableExecuteCommand
            self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.role = role
            self.schedulingStrategy = schedulingStrategy
            self.serviceConnectConfiguration = serviceConnectConfiguration
            self.serviceName = serviceName
            self.serviceRegistries = serviceRegistries
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.volumeConfigurations = volumeConfigurations
        }

        public func validate(name: String) throws {
            try self.capacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).capacityProviderStrategy[]")
            }
            try self.serviceConnectConfiguration?.validate(name: "\(name).serviceConnectConfiguration")
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.volumeConfigurations?.forEach {
                try $0.validate(name: "\(name).volumeConfigurations[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case clientToken = "clientToken"
            case cluster = "cluster"
            case deploymentConfiguration = "deploymentConfiguration"
            case deploymentController = "deploymentController"
            case desiredCount = "desiredCount"
            case enableECSManagedTags = "enableECSManagedTags"
            case enableExecuteCommand = "enableExecuteCommand"
            case healthCheckGracePeriodSeconds = "healthCheckGracePeriodSeconds"
            case launchType = "launchType"
            case loadBalancers = "loadBalancers"
            case networkConfiguration = "networkConfiguration"
            case placementConstraints = "placementConstraints"
            case placementStrategy = "placementStrategy"
            case platformVersion = "platformVersion"
            case propagateTags = "propagateTags"
            case role = "role"
            case schedulingStrategy = "schedulingStrategy"
            case serviceConnectConfiguration = "serviceConnectConfiguration"
            case serviceName = "serviceName"
            case serviceRegistries = "serviceRegistries"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
            case volumeConfigurations = "volumeConfigurations"
        }
    }

    public struct CreateServiceResponse: AWSDecodableShape {
        /// The full description of your service following the create call. A service will return either a capacityProviderStrategy or
        /// 				launchType parameter, but not both, depending where one was specified
        /// 			when it was created. If a service is using the ECS deployment controller, the
        /// 				deploymentController and taskSets parameters will not be
        /// 			returned. if the service uses the CODE_DEPLOY deployment controller, the
        /// 				deploymentController, taskSets and
        /// 				deployments parameters will be returned, however the
        /// 				deployments parameter will be an empty list.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "service"
        }
    }

    public struct CreateTaskSetRequest: AWSEncodableShape {
        /// The capacity provider strategy to use for the task set. A capacity provider strategy consists of one or more capacity providers along with the
        /// 				base and weight to assign to them. A capacity provider
        /// 			must be associated with the cluster to be used in a capacity provider strategy. The
        /// 				PutClusterCapacityProviders API is used to associate a capacity
        /// 			provider with a cluster. Only capacity providers with an ACTIVE or
        /// 				UPDATING status can be used. If a capacityProviderStrategy is specified, the launchType
        /// 			parameter must be omitted. If no capacityProviderStrategy or
        /// 				launchType is specified, the
        /// 				defaultCapacityProviderStrategy for the cluster is used. If specifying a capacity provider that uses an Auto Scaling group, the capacity
        /// 			provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a Fargate capacity provider, specify either the FARGATE or
        /// 				FARGATE_SPOT capacity providers. The Fargate capacity providers are
        /// 			available to all accounts and only need to be associated with a cluster to be
        /// 			used. The PutClusterCapacityProviders API operation is used to update the
        /// 			list of available capacity providers for a cluster after the cluster is created.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// An identifier that you provide to ensure the idempotency of the request. It must be
        /// 			unique and is case sensitive. Up to 36 ASCII characters in the range of 33-126 (inclusive) are allowed.
        public let clientToken: String?
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to create the
        /// 			task set in.
        public let cluster: String
        /// An optional non-unique tag that identifies this task set in external systems. If the
        /// 			task set is associated with a service discovery registry, the tasks in this task set
        /// 			will have the ECS_TASK_SET_EXTERNAL_ID Cloud Map attribute set to the provided
        /// 			value.
        public let externalId: String?
        /// The launch type that new tasks in the task set uses. For more information, see Amazon ECS
        /// 				launch types in the Amazon Elastic Container Service Developer Guide. If a launchType is specified, the capacityProviderStrategy
        /// 			parameter must be omitted.
        public let launchType: LaunchType?
        /// A load balancer object representing the load balancer to use with the task set. The
        /// 			supported load balancer types are either an Application Load Balancer or a Network Load Balancer.
        public let loadBalancers: [LoadBalancer]?
        /// An object representing the network configuration for a task set.
        public let networkConfiguration: NetworkConfiguration?
        /// The platform version that the tasks in the task set uses. A platform version is
        /// 			specified only for tasks using the Fargate launch type. If one isn't
        /// 			specified, the LATEST platform version is used.
        public let platformVersion: String?
        /// A floating-point percentage of the desired number of tasks to place and keep running
        /// 			in the task set.
        public let scale: Scale?
        /// The short name or full Amazon Resource Name (ARN) of the service to create the task set in.
        public let service: String
        /// The details of the service discovery registries to assign to this task set. For more
        /// 			information, see Service
        /// 				discovery.
        public let serviceRegistries: [ServiceRegistry]?
        /// The metadata that you apply to the task set to help you categorize and organize them.
        /// 			Each tag consists of a key and an optional value. You define both. When a service is
        /// 			deleted, the tags are deleted. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The task definition for the tasks in the task set to use. If a revision isn't
        /// 			specified, the latest ACTIVE revision is used.
        public let taskDefinition: String

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, clientToken: String? = nil, cluster: String, externalId: String? = nil, launchType: LaunchType? = nil, loadBalancers: [LoadBalancer]? = nil, networkConfiguration: NetworkConfiguration? = nil, platformVersion: String? = nil, scale: Scale? = nil, service: String, serviceRegistries: [ServiceRegistry]? = nil, tags: [Tag]? = nil, taskDefinition: String) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clientToken = clientToken
            self.cluster = cluster
            self.externalId = externalId
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.platformVersion = platformVersion
            self.scale = scale
            self.service = service
            self.serviceRegistries = serviceRegistries
            self.tags = tags
            self.taskDefinition = taskDefinition
        }

        public func validate(name: String) throws {
            try self.capacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).capacityProviderStrategy[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case clientToken = "clientToken"
            case cluster = "cluster"
            case externalId = "externalId"
            case launchType = "launchType"
            case loadBalancers = "loadBalancers"
            case networkConfiguration = "networkConfiguration"
            case platformVersion = "platformVersion"
            case scale = "scale"
            case service = "service"
            case serviceRegistries = "serviceRegistries"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct CreateTaskSetResponse: AWSDecodableShape {
        /// Information about a set of Amazon ECS tasks in either an CodeDeploy or an
        /// 				EXTERNAL deployment. A task set includes details such as the desired
        /// 			number of tasks, how many tasks are running, and whether the task set serves production
        /// 			traffic.
        public let taskSet: TaskSet?

        public init(taskSet: TaskSet? = nil) {
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case taskSet = "taskSet"
        }
    }

    public struct DeleteAccountSettingRequest: AWSEncodableShape {
        /// The resource name to disable the account setting for. If
        /// 				serviceLongArnFormat is specified, the ARN for your Amazon ECS services is
        /// 			affected. If taskLongArnFormat is specified, the ARN and resource ID for
        /// 			your Amazon ECS tasks is affected. If containerInstanceLongArnFormat is
        /// 			specified, the ARN and resource ID for your Amazon ECS container instances is affected. If
        /// 				awsvpcTrunking is specified, the ENI limit for your Amazon ECS container
        /// 			instances is affected.
        public let name: SettingName
        /// The Amazon Resource Name (ARN) of the principal. It can be an user, role, or the
        /// 			root user. If you specify the root user, it disables the account setting for all users, roles,
        /// 			and the root user of the account unless a user or role explicitly overrides these settings.
        /// 			If this field is omitted, the setting is changed only for the authenticated user.
        public let principalArn: String?

        public init(name: SettingName, principalArn: String? = nil) {
            self.name = name
            self.principalArn = principalArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case principalArn = "principalArn"
        }
    }

    public struct DeleteAccountSettingResponse: AWSDecodableShape {
        /// The account setting for the specified principal ARN.
        public let setting: Setting?

        public init(setting: Setting? = nil) {
            self.setting = setting
        }

        private enum CodingKeys: String, CodingKey {
            case setting = "setting"
        }
    }

    public struct DeleteAttributesRequest: AWSEncodableShape {
        /// The attributes to delete from your resource. You can specify up to 10 attributes for
        /// 			each request. For custom attributes, specify the attribute name and target ID, but don't
        /// 			specify the value. If you specify the target ID using the short form, you must also
        /// 			specify the target type.
        public let attributes: [Attribute]
        /// The short name or full Amazon Resource Name (ARN) of the cluster that contains the resource to delete
        /// 			attributes. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?

        public init(attributes: [Attribute], cluster: String? = nil) {
            self.attributes = attributes
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case cluster = "cluster"
        }
    }

    public struct DeleteAttributesResponse: AWSDecodableShape {
        /// A list of attribute objects that were successfully deleted from your resource.
        public let attributes: [Attribute]?

        public init(attributes: [Attribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct DeleteCapacityProviderRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the capacity provider to delete.
        public let capacityProvider: String

        public init(capacityProvider: String) {
            self.capacityProvider = capacityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProvider = "capacityProvider"
        }
    }

    public struct DeleteCapacityProviderResponse: AWSDecodableShape {
        /// The details of the capacity provider.
        public let capacityProvider: CapacityProvider?

        public init(capacityProvider: CapacityProvider? = nil) {
            self.capacityProvider = capacityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProvider = "capacityProvider"
        }
    }

    public struct DeleteClusterRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster to delete.
        public let cluster: String

        public init(cluster: String) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct DeleteClusterResponse: AWSDecodableShape {
        /// The full description of the deleted cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct DeleteServiceRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service to delete.
        /// 			If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// If true, allows you to delete a service even if it wasn't scaled down to
        /// 			zero tasks. It's only necessary to use this if the service uses the REPLICA
        /// 			scheduling strategy.
        public let force: Bool?
        /// The name of the service to delete.
        public let service: String

        public init(cluster: String? = nil, force: Bool? = nil, service: String) {
            self.cluster = cluster
            self.force = force
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case force = "force"
            case service = "service"
        }
    }

    public struct DeleteServiceResponse: AWSDecodableShape {
        /// The full description of the deleted service.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "service"
        }
    }

    public struct DeleteTaskDefinitionsRequest: AWSEncodableShape {
        /// The family and revision (family:revision) or
        /// 			full Amazon Resource Name (ARN) of the task definition to delete. You must specify a
        /// 				revision. You can specify up to 10 task definitions as a comma separated list.
        public let taskDefinitions: [String]

        public init(taskDefinitions: [String]) {
            self.taskDefinitions = taskDefinitions
        }

        private enum CodingKeys: String, CodingKey {
            case taskDefinitions = "taskDefinitions"
        }
    }

    public struct DeleteTaskDefinitionsResponse: AWSDecodableShape {
        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// The list of deleted task definitions.
        public let taskDefinitions: [TaskDefinition]?

        public init(failures: [Failure]? = nil, taskDefinitions: [TaskDefinition]? = nil) {
            self.failures = failures
            self.taskDefinitions = taskDefinitions
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case taskDefinitions = "taskDefinitions"
        }
    }

    public struct DeleteTaskSetRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
        /// 			set found in to delete.
        public let cluster: String
        /// If true, you can delete a task set even if it hasn't been scaled down to
        /// 			zero.
        public let force: Bool?
        /// The short name or full Amazon Resource Name (ARN) of the service that hosts the task set to
        /// 			delete.
        public let service: String
        /// The task set ID or full Amazon Resource Name (ARN) of the task set to delete.
        public let taskSet: String

        public init(cluster: String, force: Bool? = nil, service: String, taskSet: String) {
            self.cluster = cluster
            self.force = force
            self.service = service
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case force = "force"
            case service = "service"
            case taskSet = "taskSet"
        }
    }

    public struct DeleteTaskSetResponse: AWSDecodableShape {
        /// Details about the task set.
        public let taskSet: TaskSet?

        public init(taskSet: TaskSet? = nil) {
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case taskSet = "taskSet"
        }
    }

    public struct Deployment: AWSDecodableShape {
        /// The capacity provider strategy that the deployment is using.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The Unix timestamp for the time when the service deployment was created.
        public let createdAt: Date?
        /// The most recent desired count of tasks that was specified for the service to deploy or
        /// 			maintain.
        public let desiredCount: Int?
        /// The number of consecutively failed tasks in the deployment. A task is considered a
        /// 			failure if the service scheduler can't launch the task, the task doesn't transition to a
        /// 				RUNNING state, or if it fails any of its defined health checks and is
        /// 			stopped.  Once a service deployment has one or more successfully running tasks, the failed
        /// 				task count resets to zero and stops being evaluated.
        public let failedTasks: Int?
        /// The ID of the deployment.
        public let id: String?
        /// The launch type the tasks in the service are using. For more information, see Amazon ECS
        /// 				Launch Types in the Amazon Elastic Container Service Developer Guide.
        public let launchType: LaunchType?
        /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
        public let networkConfiguration: NetworkConfiguration?
        /// The number of tasks in the deployment that are in the PENDING
        /// 			status.
        public let pendingCount: Int?
        /// The operating system that your tasks in the service, or tasks are running on. A
        /// 			platform family is specified only for tasks using the Fargate launch type.  All tasks that run as part of this service must use the same
        /// 				platformFamily value as the service, for example,
        /// 			LINUX..
        public let platformFamily: String?
        /// The platform version that your tasks in the service run on. A platform version is only
        /// 			specified for tasks using the Fargate launch type. If one isn't specified,
        /// 			the LATEST platform version is used. For more information, see Fargate Platform Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        ///  The rolloutState of a service is only returned for services that use
        /// 				the rolling update (ECS) deployment type that aren't behind a
        /// 				Classic Load Balancer.  The rollout state of the deployment. When a service deployment is started, it begins
        /// 			in an IN_PROGRESS state. When the service reaches a steady state, the
        /// 			deployment transitions to a COMPLETED state. If the service fails to reach
        /// 			a steady state and circuit breaker is turned on, the deployment transitions to a
        /// 				FAILED state. A deployment in FAILED state doesn't launch
        /// 			any new tasks. For more information, see DeploymentCircuitBreaker.
        public let rolloutState: DeploymentRolloutState?
        /// A description of the rollout state of a deployment.
        public let rolloutStateReason: String?
        /// The number of tasks in the deployment that are in the RUNNING
        /// 			status.
        public let runningCount: Int?
        /// The details of the Service Connect configuration that's used by this deployment.
        /// 			Compare the configuration between multiple deployments when troubleshooting issues with
        /// 			new deployments. The configuration for this service to discover and connect to
        /// 	services, and be discovered by, and connected from, other services within a namespace. Tasks that run in a namespace can use short names to connect
        /// 	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
        /// 	Tasks connect through a managed proxy container
        /// 	that collects logs and metrics for increased visibility.
        /// 	Only the tasks that Amazon ECS services create are supported with Service Connect.
        /// 	For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let serviceConnectConfiguration: ServiceConnectConfiguration?
        /// The list of Service Connect resources that are associated with this deployment. Each
        /// 			list entry maps a discovery name to a Cloud Map service name.
        public let serviceConnectResources: [ServiceConnectServiceResource]?
        /// The status of the deployment. The following describes each state.  PRIMARY  The most recent deployment of a service.  ACTIVE  A service deployment that still has running tasks, but are in the process
        /// 						of being replaced with a new PRIMARY deployment.  INACTIVE  A deployment that has been completely replaced.
        public let status: String?
        /// The most recent task definition that was specified for the tasks in the service to
        /// 			use.
        public let taskDefinition: String?
        /// The Unix timestamp for the time when the service deployment was last updated.
        public let updatedAt: Date?
        /// The details of the volume that was configuredAtLaunch. You can configure
        /// 			different settings like the size, throughput, volumeType, and ecryption in ServiceManagedEBSVolumeConfiguration. The name of the volume
        /// 			must match the name from the task definition.
        public let volumeConfigurations: [ServiceVolumeConfiguration]?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, createdAt: Date? = nil, desiredCount: Int? = nil, failedTasks: Int? = nil, id: String? = nil, launchType: LaunchType? = nil, networkConfiguration: NetworkConfiguration? = nil, pendingCount: Int? = nil, platformFamily: String? = nil, platformVersion: String? = nil, rolloutState: DeploymentRolloutState? = nil, rolloutStateReason: String? = nil, runningCount: Int? = nil, serviceConnectConfiguration: ServiceConnectConfiguration? = nil, serviceConnectResources: [ServiceConnectServiceResource]? = nil, status: String? = nil, taskDefinition: String? = nil, updatedAt: Date? = nil, volumeConfigurations: [ServiceVolumeConfiguration]? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.createdAt = createdAt
            self.desiredCount = desiredCount
            self.failedTasks = failedTasks
            self.id = id
            self.launchType = launchType
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.rolloutState = rolloutState
            self.rolloutStateReason = rolloutStateReason
            self.runningCount = runningCount
            self.serviceConnectConfiguration = serviceConnectConfiguration
            self.serviceConnectResources = serviceConnectResources
            self.status = status
            self.taskDefinition = taskDefinition
            self.updatedAt = updatedAt
            self.volumeConfigurations = volumeConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case createdAt = "createdAt"
            case desiredCount = "desiredCount"
            case failedTasks = "failedTasks"
            case id = "id"
            case launchType = "launchType"
            case networkConfiguration = "networkConfiguration"
            case pendingCount = "pendingCount"
            case platformFamily = "platformFamily"
            case platformVersion = "platformVersion"
            case rolloutState = "rolloutState"
            case rolloutStateReason = "rolloutStateReason"
            case runningCount = "runningCount"
            case serviceConnectConfiguration = "serviceConnectConfiguration"
            case serviceConnectResources = "serviceConnectResources"
            case status = "status"
            case taskDefinition = "taskDefinition"
            case updatedAt = "updatedAt"
            case volumeConfigurations = "volumeConfigurations"
        }
    }

    public struct DeploymentAlarms: AWSEncodableShape & AWSDecodableShape {
        /// One or more CloudWatch alarm names. Use a "," to separate the alarms.
        public let alarmNames: [String]
        /// Determines whether to use the CloudWatch alarm option in the service deployment
        /// 			process.
        public let enable: Bool
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment
        /// 			fails. If rollback is used, when a service deployment fails, the service is rolled back
        /// 			to the last deployment that completed successfully.
        public let rollback: Bool

        public init(alarmNames: [String], enable: Bool, rollback: Bool) {
            self.alarmNames = alarmNames
            self.enable = enable
            self.rollback = rollback
        }

        private enum CodingKeys: String, CodingKey {
            case alarmNames = "alarmNames"
            case enable = "enable"
            case rollback = "rollback"
        }
    }

    public struct DeploymentCircuitBreaker: AWSEncodableShape & AWSDecodableShape {
        /// Determines whether to use the deployment circuit breaker logic for the service.
        public let enable: Bool
        /// Determines whether to configure Amazon ECS to roll back the service if a service deployment
        /// 			fails. If rollback is on, when a service deployment fails, the service is rolled back to
        /// 			the last deployment that completed successfully.
        public let rollback: Bool

        public init(enable: Bool, rollback: Bool) {
            self.enable = enable
            self.rollback = rollback
        }

        private enum CodingKeys: String, CodingKey {
            case enable = "enable"
            case rollback = "rollback"
        }
    }

    public struct DeploymentConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Information about the CloudWatch alarms.
        public let alarms: DeploymentAlarms?
        ///  The deployment circuit breaker can only be used for services using the rolling
        /// 				update (ECS) deployment type.  The deployment circuit breaker determines whether a
        /// 			service deployment will fail if the service can't reach a steady state. If you use the
        /// 			deployment circuit breaker, a service deployment will transition to a failed state and
        /// 			stop launching new tasks. If you use the rollback option, when a service deployment
        /// 			fails, the service is rolled back to the last deployment that completed successfully.
        /// 			For more information, see Rolling
        /// 				update in the Amazon Elastic Container Service Developer
        /// 				Guide
        public let deploymentCircuitBreaker: DeploymentCircuitBreaker?
        /// If a service is using the rolling update (ECS) deployment type, the
        /// 				maximumPercent parameter represents an upper limit on the number of
        /// 			your service's tasks that are allowed in the RUNNING or
        /// 				PENDING state during a deployment, as a percentage of the
        /// 				desiredCount (rounded down to the nearest integer). This parameter
        /// 			enables you to define the deployment batch size. For example, if your service is using
        /// 			the REPLICA service scheduler and has a desiredCount of four
        /// 			tasks and a maximumPercent value of 200%, the scheduler may start four new
        /// 			tasks before stopping the four older tasks (provided that the cluster resources required
        /// 			to do this are available). The default maximumPercent value for a service
        /// 			using the REPLICA service scheduler is 200%. If a service is using either the blue/green (CODE_DEPLOY) or
        /// 				EXTERNAL deployment types and tasks that use the EC2
        /// 			launch type, the maximum percent value is set to the
        /// 			default value and is used to define the upper limit on the number of the tasks in the
        /// 			service that remain in the RUNNING state while the container instances are
        /// 			in the DRAINING state. If the tasks in the service use the
        /// 			Fargate launch type, the maximum percent value is not used, although it is
        /// 			returned when describing your service.
        public let maximumPercent: Int?
        /// If a service is using the rolling update (ECS) deployment type, the
        /// 				minimumHealthyPercent represents a lower limit on the number of your
        /// 			service's tasks that must remain in the RUNNING state during a deployment,
        /// 			as a percentage of the desiredCount (rounded up to the nearest integer).
        /// 			This parameter enables you to deploy without using additional cluster capacity. For
        /// 			example, if your service has a desiredCount of four tasks and a
        /// 				minimumHealthyPercent of 50%, the service scheduler may stop two
        /// 			existing tasks to free up cluster capacity before starting two new tasks.  For services that do not use a load balancer, the following
        /// 			should be noted:   A service is considered healthy if all essential containers within the tasks
        /// 					in the service pass their health checks.   If a task has no essential containers with a health check defined, the service
        /// 					scheduler will wait for 40 seconds after a task reaches a RUNNING
        /// 					state before the task is counted towards the minimum healthy percent
        /// 					total.   If a task has one or more essential containers with a health check defined,
        /// 					the service scheduler will wait for the task to reach a healthy status before
        /// 					counting it towards the minimum healthy percent total. A task is considered
        /// 					healthy when all essential containers within the task have passed their health
        /// 					checks. The amount of time the service scheduler can wait for is determined by
        /// 					the container health check settings.    For services that do use a load balancer, the following should be
        /// 			noted:   If a task has no essential containers with a health check defined, the service
        /// 					scheduler will wait for the load balancer target group health check to return a
        /// 					healthy status before counting the task towards the minimum healthy percent
        /// 					total.   If a task has an essential container with a health check defined, the service
        /// 					scheduler will wait for both the task to reach a healthy status and the load
        /// 					balancer target group health check to return a healthy status before counting
        /// 					the task towards the minimum healthy percent total.   The default value for a replica service for
        /// 			minimumHealthyPercent is 100%. The default
        /// 			minimumHealthyPercent value for a service using
        /// 			the DAEMON service schedule is 0% for the CLI,
        /// 			the Amazon Web Services SDKs, and the APIs and 50% for the Amazon Web Services Management Console. The minimum number of healthy tasks during a deployment is the
        /// 			desiredCount multiplied by the
        /// 			minimumHealthyPercent/100, rounded up to the
        /// 			nearest integer value. If a service is using either the blue/green (CODE_DEPLOY) or
        /// 				EXTERNAL deployment types and is running tasks that use the
        /// 			EC2 launch type, the minimum healthy
        /// 				percent value is set to the default value and is used to define the lower
        /// 			limit on the number of the tasks in the service that remain in the RUNNING
        /// 			state while the container instances are in the DRAINING state. If a service
        /// 			is using either the blue/green (CODE_DEPLOY) or EXTERNAL
        /// 			deployment types and is running tasks that use the Fargate launch type,
        /// 			the minimum healthy percent value is not used, although it is returned when describing
        /// 			your service.
        public let minimumHealthyPercent: Int?

        public init(alarms: DeploymentAlarms? = nil, deploymentCircuitBreaker: DeploymentCircuitBreaker? = nil, maximumPercent: Int? = nil, minimumHealthyPercent: Int? = nil) {
            self.alarms = alarms
            self.deploymentCircuitBreaker = deploymentCircuitBreaker
            self.maximumPercent = maximumPercent
            self.minimumHealthyPercent = minimumHealthyPercent
        }

        private enum CodingKeys: String, CodingKey {
            case alarms = "alarms"
            case deploymentCircuitBreaker = "deploymentCircuitBreaker"
            case maximumPercent = "maximumPercent"
            case minimumHealthyPercent = "minimumHealthyPercent"
        }
    }

    public struct DeploymentController: AWSEncodableShape & AWSDecodableShape {
        /// The deployment controller type to use. There are three deployment controller types available:  ECS  The rolling update (ECS) deployment type involves replacing
        /// 						the current running version of the container with the latest version. The
        /// 						number of containers Amazon ECS adds or removes from the service during a rolling
        /// 						update is controlled by adjusting the minimum and maximum number of healthy
        /// 						tasks allowed during a service deployment, as specified in the DeploymentConfiguration.  CODE_DEPLOY  The blue/green (CODE_DEPLOY) deployment type uses the
        /// 						blue/green deployment model powered by CodeDeploy, which allows you to verify a
        /// 						new deployment of a service before sending production traffic to it.  EXTERNAL  The external (EXTERNAL) deployment type enables you to use
        /// 						any third-party deployment controller for full control over the deployment
        /// 						process for an Amazon ECS service.
        public let type: DeploymentControllerType

        public init(type: DeploymentControllerType) {
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case type = "type"
        }
    }

    public struct DeregisterContainerInstanceRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to
        /// 			deregister. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The container instance ID or full ARN of the container instance to deregister. For
        /// 			more information about the ARN format, see Amazon Resource Name (ARN) in the Amazon ECS Developer Guide.
        public let containerInstance: String
        /// Forces the container instance to be deregistered. If you have tasks running on the
        /// 			container instance when you deregister it with the force option, these
        /// 			tasks remain running until you terminate the instance or the tasks stop through some
        /// 			other means, but they're orphaned (no longer monitored or accounted for by Amazon ECS). If an
        /// 			orphaned task on your container instance is part of an Amazon ECS service, then the service
        /// 			scheduler starts another copy of that task, on a different container instance if
        /// 			possible.  Any containers in orphaned service tasks that are registered with a Classic Load Balancer or an Application Load Balancer
        /// 			target group are deregistered. They begin connection draining according to the settings
        /// 			on the load balancer or target group.
        public let force: Bool?

        public init(cluster: String? = nil, containerInstance: String, force: Bool? = nil) {
            self.cluster = cluster
            self.containerInstance = containerInstance
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstance = "containerInstance"
            case force = "force"
        }
    }

    public struct DeregisterContainerInstanceResponse: AWSDecodableShape {
        /// The container instance that was deregistered.
        public let containerInstance: ContainerInstance?

        public init(containerInstance: ContainerInstance? = nil) {
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstance = "containerInstance"
        }
    }

    public struct DeregisterTaskDefinitionRequest: AWSEncodableShape {
        /// The family and revision (family:revision) or
        /// 			full Amazon Resource Name (ARN) of the task definition to deregister. You must specify a
        /// 				revision.
        public let taskDefinition: String

        public init(taskDefinition: String) {
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case taskDefinition = "taskDefinition"
        }
    }

    public struct DeregisterTaskDefinitionResponse: AWSDecodableShape {
        /// The full description of the deregistered task.
        public let taskDefinition: TaskDefinition?

        public init(taskDefinition: TaskDefinition? = nil) {
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case taskDefinition = "taskDefinition"
        }
    }

    public struct DescribeCapacityProvidersRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of one or more capacity providers. Up to
        /// 				100 capacity providers can be described in an action.
        public let capacityProviders: [String]?
        /// Specifies whether or not you want to see the resource tags for the capacity provider.
        /// 			If TAGS is specified, the tags are included in the response. If this field
        /// 			is omitted, tags aren't included in the response.
        public let include: [CapacityProviderField]?
        /// The maximum number of account setting results returned by
        /// 				DescribeCapacityProviders in paginated output. When this parameter is
        /// 			used, DescribeCapacityProviders only returns maxResults
        /// 			results in a single page along with a nextToken response element. The
        /// 			remaining results of the initial request can be seen by sending another
        /// 				DescribeCapacityProviders request with the returned
        /// 				nextToken value. This value can be between
        /// 			1 and 10. If this
        /// 			parameter is not used, then DescribeCapacityProviders returns up to
        /// 			10 results and a nextToken value
        /// 			if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a previous paginated
        /// 				DescribeCapacityProviders request where maxResults was
        /// 			used and the results exceeded the value of that parameter. Pagination continues from the
        /// 			end of the previous results that returned the nextToken value.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(capacityProviders: [String]? = nil, include: [CapacityProviderField]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityProviders = capacityProviders
            self.include = include
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviders = "capacityProviders"
            case include = "include"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCapacityProvidersResponse: AWSDecodableShape {
        /// The list of capacity providers.
        public let capacityProviders: [CapacityProvider]?
        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// The nextToken value to include in a future
        /// 				DescribeCapacityProviders request. When the results of a
        /// 				DescribeCapacityProviders request exceed maxResults, this
        /// 			value can be used to retrieve the next page of results. This value is null
        /// 			when there are no more results to return.
        public let nextToken: String?

        public init(capacityProviders: [CapacityProvider]? = nil, failures: [Failure]? = nil, nextToken: String? = nil) {
            self.capacityProviders = capacityProviders
            self.failures = failures
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviders = "capacityProviders"
            case failures = "failures"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeClustersRequest: AWSEncodableShape {
        /// A list of up to 100 cluster names or full cluster Amazon Resource Name (ARN) entries.
        /// 			If you do not specify a cluster, the default cluster is assumed.
        public let clusters: [String]?
        /// Determines whether to include additional information about the clusters in the
        /// 			response. If this field is omitted, this information isn't included. If ATTACHMENTS is specified, the attachments for the container instances
        /// 			or tasks within the cluster are included, for example the capacity providers. If SETTINGS is specified, the settings for the cluster are
        /// 			included. If CONFIGURATIONS is specified, the configuration for the cluster is
        /// 			included. If STATISTICS is specified, the task and service count is included,
        /// 			separated by launch type. If TAGS is specified, the metadata tags associated with the cluster are
        /// 			included.
        public let include: [ClusterField]?

        public init(clusters: [String]? = nil, include: [ClusterField]? = nil) {
            self.clusters = clusters
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case clusters = "clusters"
            case include = "include"
        }
    }

    public struct DescribeClustersResponse: AWSDecodableShape {
        /// The list of clusters.
        public let clusters: [Cluster]?
        /// Any failures associated with the call.
        public let failures: [Failure]?

        public init(clusters: [Cluster]? = nil, failures: [Failure]? = nil) {
            self.clusters = clusters
            self.failures = failures
        }

        private enum CodingKeys: String, CodingKey {
            case clusters = "clusters"
            case failures = "failures"
        }
    }

    public struct DescribeContainerInstancesRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instances to
        /// 			describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required if the container instance
        /// 			or container instances you are describing were launched in any cluster other than the
        /// 			default cluster.
        public let cluster: String?
        /// A list of up to 100 container instance IDs or full Amazon Resource Name (ARN) entries.
        public let containerInstances: [String]
        /// Specifies whether you want to see the resource tags for the container instance. If
        /// 				TAGS is specified, the tags are included in the response. If
        /// 				CONTAINER_INSTANCE_HEALTH is specified, the container instance health
        /// 			is included in the response. If this field is omitted, tags and container instance
        /// 			health status aren't included in the response.
        public let include: [ContainerInstanceField]?

        public init(cluster: String? = nil, containerInstances: [String], include: [ContainerInstanceField]? = nil) {
            self.cluster = cluster
            self.containerInstances = containerInstances
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstances = "containerInstances"
            case include = "include"
        }
    }

    public struct DescribeContainerInstancesResponse: AWSDecodableShape {
        /// The list of container instances.
        public let containerInstances: [ContainerInstance]?
        /// Any failures associated with the call.
        public let failures: [Failure]?

        public init(containerInstances: [ContainerInstance]? = nil, failures: [Failure]? = nil) {
            self.containerInstances = containerInstances
            self.failures = failures
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstances = "containerInstances"
            case failures = "failures"
        }
    }

    public struct DescribeServicesRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN)the cluster that hosts the service to describe.
        /// 			If you do not specify a cluster, the default cluster is assumed. This parameter is required if the service or services you are
        /// 			describing were launched in any cluster other than the default cluster.
        public let cluster: String?
        /// Determines whether you want to see the resource tags for the service. If
        /// 				TAGS is specified, the tags are included in the response. If this field
        /// 			is omitted, tags aren't included in the response.
        public let include: [ServiceField]?
        /// A list of services to describe. You may specify up to 10 services to describe in a
        /// 			single operation.
        public let services: [String]

        public init(cluster: String? = nil, include: [ServiceField]? = nil, services: [String]) {
            self.cluster = cluster
            self.include = include
            self.services = services
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case include = "include"
            case services = "services"
        }
    }

    public struct DescribeServicesResponse: AWSDecodableShape {
        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// The list of services described.
        public let services: [Service]?

        public init(failures: [Failure]? = nil, services: [Service]? = nil) {
            self.failures = failures
            self.services = services
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case services = "services"
        }
    }

    public struct DescribeTaskDefinitionRequest: AWSEncodableShape {
        /// Determines whether to see the resource tags for the task definition. If
        /// 				TAGS is specified, the tags are included in the response. If this field
        /// 			is omitted, tags aren't included in the response.
        public let include: [TaskDefinitionField]?
        /// The family for the latest ACTIVE revision,
        /// 				family and revision (family:revision) for a
        /// 			specific revision in the family, or full Amazon Resource Name (ARN) of the task definition to
        /// 			describe.
        public let taskDefinition: String

        public init(include: [TaskDefinitionField]? = nil, taskDefinition: String) {
            self.include = include
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case include = "include"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct DescribeTaskDefinitionResponse: AWSDecodableShape {
        /// The metadata that's applied to the task definition to help you categorize and organize
        /// 			them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The full task definition description.
        public let taskDefinition: TaskDefinition?

        public init(tags: [Tag]? = nil, taskDefinition: TaskDefinition? = nil) {
            self.tags = tags
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct DescribeTaskSetsRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
        /// 			sets exist in.
        public let cluster: String
        /// Specifies whether to see the resource tags for the task set. If TAGS is
        /// 			specified, the tags are included in the response. If this field is omitted, tags aren't
        /// 			included in the response.
        public let include: [TaskSetField]?
        /// The short name or full Amazon Resource Name (ARN) of the service that the task sets exist in.
        public let service: String
        /// The ID or full Amazon Resource Name (ARN) of task sets to
        /// 			describe.
        public let taskSets: [String]?

        public init(cluster: String, include: [TaskSetField]? = nil, service: String, taskSets: [String]? = nil) {
            self.cluster = cluster
            self.include = include
            self.service = service
            self.taskSets = taskSets
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case include = "include"
            case service = "service"
            case taskSets = "taskSets"
        }
    }

    public struct DescribeTaskSetsResponse: AWSDecodableShape {
        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// The list of task sets described.
        public let taskSets: [TaskSet]?

        public init(failures: [Failure]? = nil, taskSets: [TaskSet]? = nil) {
            self.failures = failures
            self.taskSets = taskSets
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case taskSets = "taskSets"
        }
    }

    public struct DescribeTasksRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task or tasks to
        /// 			describe. If you do not specify a cluster, the default cluster is assumed. This parameter is required if the task or tasks you
        /// 			are describing were launched in any cluster other than the default cluster.
        public let cluster: String?
        /// Specifies whether you want to see the resource tags for the task. If TAGS
        /// 			is specified, the tags are included in the response. If this field is omitted, tags
        /// 			aren't included in the response.
        public let include: [TaskField]?
        /// A list of up to 100 task IDs or full ARN entries.
        public let tasks: [String]

        public init(cluster: String? = nil, include: [TaskField]? = nil, tasks: [String]) {
            self.cluster = cluster
            self.include = include
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case include = "include"
            case tasks = "tasks"
        }
    }

    public struct DescribeTasksResponse: AWSDecodableShape {
        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// The list of tasks.
        public let tasks: [Task]?

        public init(failures: [Failure]? = nil, tasks: [Task]? = nil) {
            self.failures = failures
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case tasks = "tasks"
        }
    }

    public struct Device: AWSEncodableShape & AWSDecodableShape {
        /// The path inside the container at which to expose the host device.
        public let containerPath: String?
        /// The path for the device on the host container instance.
        public let hostPath: String
        /// The explicit permissions to provide to the container for the device. By default, the
        /// 			container has permissions for read, write, and
        /// 				mknod for the device.
        public let permissions: [DeviceCgroupPermission]?

        public init(containerPath: String? = nil, hostPath: String, permissions: [DeviceCgroupPermission]? = nil) {
            self.containerPath = containerPath
            self.hostPath = hostPath
            self.permissions = permissions
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath = "containerPath"
            case hostPath = "hostPath"
            case permissions = "permissions"
        }
    }

    public struct DiscoverPollEndpointRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that the container instance belongs
        /// 			to.
        public let cluster: String?
        /// The container instance ID or full ARN of the container instance. For more
        /// 			information about the ARN format, see Amazon Resource Name (ARN) in the Amazon ECS Developer Guide.
        public let containerInstance: String?

        public init(cluster: String? = nil, containerInstance: String? = nil) {
            self.cluster = cluster
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstance = "containerInstance"
        }
    }

    public struct DiscoverPollEndpointResponse: AWSDecodableShape {
        /// The endpoint for the Amazon ECS agent to poll.
        public let endpoint: String?
        /// The endpoint for the Amazon ECS agent to poll for Service Connect configuration.
        /// 			For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let serviceConnectEndpoint: String?
        /// The telemetry endpoint for the Amazon ECS agent.
        public let telemetryEndpoint: String?

        public init(endpoint: String? = nil, serviceConnectEndpoint: String? = nil, telemetryEndpoint: String? = nil) {
            self.endpoint = endpoint
            self.serviceConnectEndpoint = serviceConnectEndpoint
            self.telemetryEndpoint = telemetryEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "endpoint"
            case serviceConnectEndpoint = "serviceConnectEndpoint"
            case telemetryEndpoint = "telemetryEndpoint"
        }
    }

    public struct DockerVolumeConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// If this value is true, the Docker volume is created if it doesn't already
        /// 			exist.  This field is only used if the scope is shared.
        public let autoprovision: Bool?
        /// The Docker volume driver to use. The driver value must match the driver name provided
        /// 			by Docker because it is used for task placement. If the driver was installed using the
        /// 			Docker plugin CLI, use docker plugin ls to retrieve the driver name from
        /// 			your container instance. If the driver was installed using another method, use Docker
        /// 			plugin discovery to retrieve the driver name. For more information, see Docker
        /// 				plugin discovery. This parameter maps to Driver in the
        /// 			Create a volume section of the Docker Remote API and the
        /// 				xxdriver option to docker
        /// 				volume create.
        public let driver: String?
        /// A map of Docker driver-specific options passed through. This parameter maps to
        /// 				DriverOpts in the Create a volume section of the
        /// 			Docker Remote API and the xxopt option to docker
        /// 				volume create.
        public let driverOpts: [String: String]?
        /// Custom metadata to add to your Docker volume. This parameter maps to
        /// 				Labels in the Create a volume section of the
        /// 			Docker Remote API and the xxlabel option to docker
        /// 				volume create.
        public let labels: [String: String]?
        /// The scope for the Docker volume that determines its lifecycle. Docker volumes that are
        /// 			scoped to a task are automatically provisioned when the task starts and
        /// 			destroyed when the task stops. Docker volumes that are scoped as shared
        /// 			persist after the task stops.
        public let scope: Scope?

        public init(autoprovision: Bool? = nil, driver: String? = nil, driverOpts: [String: String]? = nil, labels: [String: String]? = nil, scope: Scope? = nil) {
            self.autoprovision = autoprovision
            self.driver = driver
            self.driverOpts = driverOpts
            self.labels = labels
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case autoprovision = "autoprovision"
            case driver = "driver"
            case driverOpts = "driverOpts"
            case labels = "labels"
            case scope = "scope"
        }
    }

    public struct EBSTagSpecification: AWSEncodableShape & AWSDecodableShape {
        /// Determines whether to propagate the tags from the task definition to  the Amazon EBS
        /// 			volume. Tags can only propagate to a SERVICE specified in
        /// 				 ServiceVolumeConfiguration. If no value is specified, the tags aren't
        /// 			 propagated.
        public let propagateTags: PropagateTags?
        /// The type of volume resource.
        public let resourceType: EBSResourceType
        /// The tags applied to this Amazon EBS volume. AmazonECSCreated and
        /// 				AmazonECSManaged are reserved tags that can't be used.
        public let tags: [Tag]?

        public init(propagateTags: PropagateTags? = nil, resourceType: EBSResourceType, tags: [Tag]? = nil) {
            self.propagateTags = propagateTags
            self.resourceType = resourceType
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case propagateTags = "propagateTags"
            case resourceType = "resourceType"
            case tags = "tags"
        }
    }

    public struct EFSAuthorizationConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon EFS access point ID to use. If an access point is specified, the root directory
        /// 			value specified in the EFSVolumeConfiguration must either be omitted or set
        /// 			to / which will enforce the path set on the EFS access point. If an access
        /// 			point is used, transit encryption must be on in the EFSVolumeConfiguration.
        /// 			For more information, see Working with Amazon EFS access
        /// 				points in the Amazon Elastic File System User Guide.
        public let accessPointId: String?
        /// Determines whether to use the Amazon ECS task role defined in a task definition when
        /// 			mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on
        /// 			in the EFSVolumeConfiguration. If this parameter is omitted, the default
        /// 			value of DISABLED is used. For more information, see Using
        /// 				Amazon EFS access points in the Amazon Elastic Container Service Developer Guide.
        public let iam: EFSAuthorizationConfigIAM?

        public init(accessPointId: String? = nil, iam: EFSAuthorizationConfigIAM? = nil) {
            self.accessPointId = accessPointId
            self.iam = iam
        }

        private enum CodingKeys: String, CodingKey {
            case accessPointId = "accessPointId"
            case iam = "iam"
        }
    }

    public struct EFSVolumeConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The authorization configuration details for the Amazon EFS file system.
        public let authorizationConfig: EFSAuthorizationConfig?
        /// The Amazon EFS file system ID to use.
        public let fileSystemId: String
        /// The directory within the Amazon EFS file system to mount as the root directory inside the
        /// 			host. If this parameter is omitted, the root of the Amazon EFS volume will be used.
        /// 			Specifying / will have the same effect as omitting this parameter.  If an EFS access point is specified in the authorizationConfig, the
        /// 				root directory parameter must either be omitted or set to / which will
        /// 				enforce the path set on the EFS access point.
        public let rootDirectory: String?
        /// Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host
        /// 			and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization
        /// 			is used. If this parameter is omitted, the default value of DISABLED is
        /// 			used. For more information, see Encrypting data in transit in
        /// 			the Amazon Elastic File System User Guide.
        public let transitEncryption: EFSTransitEncryption?
        /// The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS
        /// 			server. If you do not specify a transit encryption port, it will use the port selection
        /// 			strategy that the Amazon EFS mount helper uses. For more information, see EFS mount
        /// 				helper in the Amazon Elastic File System User Guide.
        public let transitEncryptionPort: Int?

        public init(authorizationConfig: EFSAuthorizationConfig? = nil, fileSystemId: String, rootDirectory: String? = nil, transitEncryption: EFSTransitEncryption? = nil, transitEncryptionPort: Int? = nil) {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
            self.transitEncryption = transitEncryption
            self.transitEncryptionPort = transitEncryptionPort
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationConfig = "authorizationConfig"
            case fileSystemId = "fileSystemId"
            case rootDirectory = "rootDirectory"
            case transitEncryption = "transitEncryption"
            case transitEncryptionPort = "transitEncryptionPort"
        }
    }

    public struct EnvironmentFile: AWSEncodableShape & AWSDecodableShape {
        /// The file type to use.  Environment files are objects in Amazon S3. The only supported value is
        /// 				s3.
        public let type: EnvironmentFileType
        /// The Amazon Resource Name (ARN) of the Amazon S3 object containing the environment
        /// 			variable file.
        public let value: String

        public init(type: EnvironmentFileType, value: String) {
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case type = "type"
            case value = "value"
        }
    }

    public struct EphemeralStorage: AWSEncodableShape & AWSDecodableShape {
        /// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported
        /// 			value is 20 GiB and the maximum supported value is
        /// 				200 GiB.
        public let sizeInGiB: Int

        public init(sizeInGiB: Int) {
            self.sizeInGiB = sizeInGiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInGiB = "sizeInGiB"
        }
    }

    public struct ExecuteCommandConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Specify an Key Management Service key ID to encrypt the data between the local client
        /// 			and the container.
        public let kmsKeyId: String?
        /// The log configuration for the results of the execute command actions. The logs can be
        /// 			sent to CloudWatch Logs or an Amazon S3 bucket. When logging=OVERRIDE is
        /// 			specified, a logConfiguration must be provided.
        public let logConfiguration: ExecuteCommandLogConfiguration?
        /// The log setting to use for redirecting logs for your execute command results. The
        /// 			following log settings are available.    NONE: The execute command session is not logged.    DEFAULT: The awslogs configuration in the task
        /// 					definition is used. If no logging parameter is specified, it defaults to this
        /// 					value. If no awslogs log driver is configured in the task
        /// 					definition, the output won't be logged.    OVERRIDE: Specify the logging details as a part of
        /// 						logConfiguration. If the OVERRIDE logging option
        /// 					is specified, the logConfiguration is required.
        public let logging: ExecuteCommandLogging?

        public init(kmsKeyId: String? = nil, logConfiguration: ExecuteCommandLogConfiguration? = nil, logging: ExecuteCommandLogging? = nil) {
            self.kmsKeyId = kmsKeyId
            self.logConfiguration = logConfiguration
            self.logging = logging
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "kmsKeyId"
            case logConfiguration = "logConfiguration"
            case logging = "logging"
        }
    }

    public struct ExecuteCommandLogConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Determines whether to use encryption on the CloudWatch logs. If not specified,
        /// 			encryption will be off.
        public let cloudWatchEncryptionEnabled: Bool?
        /// The name of the CloudWatch log group to send logs to.  The CloudWatch log group must already be created.
        public let cloudWatchLogGroupName: String?
        /// The name of the S3 bucket to send logs to.  The S3 bucket must already be created.
        public let s3BucketName: String?
        /// Determines whether to use encryption on the S3 logs. If not specified, encryption is
        /// 			not used.
        public let s3EncryptionEnabled: Bool?
        /// An optional folder in the S3 bucket to place logs in.
        public let s3KeyPrefix: String?

        public init(cloudWatchEncryptionEnabled: Bool? = nil, cloudWatchLogGroupName: String? = nil, s3BucketName: String? = nil, s3EncryptionEnabled: Bool? = nil, s3KeyPrefix: String? = nil) {
            self.cloudWatchEncryptionEnabled = cloudWatchEncryptionEnabled
            self.cloudWatchLogGroupName = cloudWatchLogGroupName
            self.s3BucketName = s3BucketName
            self.s3EncryptionEnabled = s3EncryptionEnabled
            self.s3KeyPrefix = s3KeyPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchEncryptionEnabled = "cloudWatchEncryptionEnabled"
            case cloudWatchLogGroupName = "cloudWatchLogGroupName"
            case s3BucketName = "s3BucketName"
            case s3EncryptionEnabled = "s3EncryptionEnabled"
            case s3KeyPrefix = "s3KeyPrefix"
        }
    }

    public struct ExecuteCommandRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) or short name of the cluster the task is running in.
        /// 			If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The command to run on the container.
        public let command: String
        /// The name of the container to execute the command on. A container name only needs to be
        /// 			specified for tasks containing multiple containers.
        public let container: String?
        /// Use this flag to run your command in interactive mode.
        public let interactive: Bool
        /// The Amazon Resource Name (ARN) or ID of the task the container is part of.
        public let task: String

        public init(cluster: String? = nil, command: String, container: String? = nil, interactive: Bool = false, task: String) {
            self.cluster = cluster
            self.command = command
            self.container = container
            self.interactive = interactive
            self.task = task
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case command = "command"
            case container = "container"
            case interactive = "interactive"
            case task = "task"
        }
    }

    public struct ExecuteCommandResponse: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the cluster.
        public let clusterArn: String?
        /// The Amazon Resource Name (ARN) of the container.
        public let containerArn: String?
        /// The name of the container.
        public let containerName: String?
        /// Determines whether the execute command session is running in interactive mode. Amazon ECS
        /// 			only supports initiating interactive sessions, so you must specify true for
        /// 			this value.
        public let interactive: Bool?
        /// The details of the SSM session that was created for this instance of
        /// 			execute-command.
        public let session: Session?
        /// The Amazon Resource Name (ARN) of the task.
        public let taskArn: String?

        public init(clusterArn: String? = nil, containerArn: String? = nil, containerName: String? = nil, interactive: Bool? = nil, session: Session? = nil, taskArn: String? = nil) {
            self.clusterArn = clusterArn
            self.containerArn = containerArn
            self.containerName = containerName
            self.interactive = interactive
            self.session = session
            self.taskArn = taskArn
        }

        private enum CodingKeys: String, CodingKey {
            case clusterArn = "clusterArn"
            case containerArn = "containerArn"
            case containerName = "containerName"
            case interactive = "interactive"
            case session = "session"
            case taskArn = "taskArn"
        }
    }

    public struct FSxWindowsFileServerAuthorizationConfig: AWSEncodableShape & AWSDecodableShape {
        /// The authorization credential option to use. The authorization credential options can
        /// 			be provided using either the Amazon Resource Name (ARN) of an Secrets Manager secret or SSM Parameter Store
        /// 			parameter. The ARN refers to the stored credentials.
        public let credentialsParameter: String
        /// A fully qualified domain name hosted by an Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on
        /// 			Amazon EC2.
        public let domain: String

        public init(credentialsParameter: String, domain: String) {
            self.credentialsParameter = credentialsParameter
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case credentialsParameter = "credentialsParameter"
            case domain = "domain"
        }
    }

    public struct FSxWindowsFileServerVolumeConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The authorization configuration details for the Amazon FSx for Windows File Server file system.
        public let authorizationConfig: FSxWindowsFileServerAuthorizationConfig
        /// The Amazon FSx for Windows File Server file system ID to use.
        public let fileSystemId: String
        /// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory
        /// 			inside the host.
        public let rootDirectory: String

        public init(authorizationConfig: FSxWindowsFileServerAuthorizationConfig, fileSystemId: String, rootDirectory: String) {
            self.authorizationConfig = authorizationConfig
            self.fileSystemId = fileSystemId
            self.rootDirectory = rootDirectory
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationConfig = "authorizationConfig"
            case fileSystemId = "fileSystemId"
            case rootDirectory = "rootDirectory"
        }
    }

    public struct Failure: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the failed resource.
        public let arn: String?
        /// The details of the failure.
        public let detail: String?
        /// The reason for the failure.
        public let reason: String?

        public init(arn: String? = nil, detail: String? = nil, reason: String? = nil) {
            self.arn = arn
            self.detail = detail
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case detail = "detail"
            case reason = "reason"
        }
    }

    public struct FirelensConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The options to use when configuring the log router. This field is optional and can be
        /// 			used to specify a custom configuration file or to add additional metadata, such as the
        /// 			task, task definition, cluster, and container instance details to the log event. If
        /// 			specified, the syntax to use is
        /// 				"options":{"enable-ecs-log-metadata":"true|false","config-file-type:"s3|file","config-file-value":"arn:aws:s3:::mybucket/fluent.conf|filepath"}.
        /// 			For more information, see Creating
        /// 				a task definition that uses a FireLens configuration in the
        /// 			Amazon Elastic Container Service Developer Guide.  Tasks hosted on Fargate only support the file configuration file
        /// 				type.
        public let options: [String: String]?
        /// The log router to use. The valid values are fluentd or
        /// 				fluentbit.
        public let type: FirelensConfigurationType

        public init(options: [String: String]? = nil, type: FirelensConfigurationType) {
            self.options = options
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case options = "options"
            case type = "type"
        }
    }

    public struct GetTaskProtectionRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
        /// 			sets exist in.
        public let cluster: String
        /// A list of up to 100 task IDs or full ARN entries.
        public let tasks: [String]?

        public init(cluster: String, tasks: [String]? = nil) {
            self.cluster = cluster
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case tasks = "tasks"
        }
    }

    public struct GetTaskProtectionResponse: AWSDecodableShape {
        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// A list of tasks with the following information.    taskArn: The task ARN.    protectionEnabled: The protection status of the task. If scale-in
        /// 					protection is turned on for a task, the value is true. Otherwise,
        /// 					it is false.    expirationDate: The epoch time when protection for the task will
        /// 					expire.
        public let protectedTasks: [ProtectedTask]?

        public init(failures: [Failure]? = nil, protectedTasks: [ProtectedTask]? = nil) {
            self.failures = failures
            self.protectedTasks = protectedTasks
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case protectedTasks = "protectedTasks"
        }
    }

    public struct HealthCheck: AWSEncodableShape & AWSDecodableShape {
        /// A string array representing the command that the container runs to determine if it is
        /// 			healthy. The string array must start with CMD to run the command arguments
        /// 			directly, or CMD-SHELL to run the command with the container's default
        /// 			shell.  When you use the Amazon Web Services Management Console JSON panel, the Command Line Interface, or the APIs, enclose the list
        /// 			of commands in double quotes and brackets.  [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]  You don't include the double quotes and brackets when you use the Amazon Web Services Management Console.  CMD-SHELL, curl -f http://localhost/ || exit 1  An exit code of 0 indicates success, and non-zero exit code indicates failure. For
        /// 			more information, see HealthCheck in the Create a container
        /// 			section of the Docker Remote API.
        public let command: [String]
        /// The time period in seconds between each health check execution. You may specify
        /// 			between 5 and 300 seconds. The default value is 30 seconds.
        public let interval: Int?
        /// The number of times to retry a failed health check before the container is considered
        /// 			unhealthy. You may specify between 1 and 10 retries. The default value is 3.
        public let retries: Int?
        /// The optional grace period to provide containers time to bootstrap before failed health
        /// 			checks count towards the maximum number of retries. You can specify between 0 and 300
        /// 			seconds. By default, the startPeriod is off.  If a health check succeeds within the startPeriod, then the container
        /// 				is considered healthy and any subsequent failures count toward the maximum number of
        /// 				retries.
        public let startPeriod: Int?
        /// The time period in seconds to wait for a health check to succeed before it is
        /// 			considered a failure. You may specify between 2 and 60 seconds. The default value is
        /// 			5.
        public let timeout: Int?

        public init(command: [String], interval: Int? = nil, retries: Int? = nil, startPeriod: Int? = nil, timeout: Int? = nil) {
            self.command = command
            self.interval = interval
            self.retries = retries
            self.startPeriod = startPeriod
            self.timeout = timeout
        }

        private enum CodingKeys: String, CodingKey {
            case command = "command"
            case interval = "interval"
            case retries = "retries"
            case startPeriod = "startPeriod"
            case timeout = "timeout"
        }
    }

    public struct HostEntry: AWSEncodableShape & AWSDecodableShape {
        /// The hostname to use in the /etc/hosts entry.
        public let hostname: String
        /// The IP address to use in the /etc/hosts entry.
        public let ipAddress: String

        public init(hostname: String, ipAddress: String) {
            self.hostname = hostname
            self.ipAddress = ipAddress
        }

        private enum CodingKeys: String, CodingKey {
            case hostname = "hostname"
            case ipAddress = "ipAddress"
        }
    }

    public struct HostVolumeProperties: AWSEncodableShape & AWSDecodableShape {
        /// When the host parameter is used, specify a sourcePath to
        /// 			declare the path on the host container instance that's presented to the container. If
        /// 			this parameter is empty, then the Docker daemon has assigned a host path for you. If the
        /// 				host parameter contains a sourcePath file location, then
        /// 			the data volume persists at the specified location on the host container instance until
        /// 			you delete it manually. If the sourcePath value doesn't exist on the host
        /// 			container instance, the Docker daemon creates it. If the location does exist, the
        /// 			contents of the source path folder are exported. If you're using the Fargate launch type, the sourcePath
        /// 			parameter is not supported.
        public let sourcePath: String?

        public init(sourcePath: String? = nil) {
            self.sourcePath = sourcePath
        }

        private enum CodingKeys: String, CodingKey {
            case sourcePath = "sourcePath"
        }
    }

    public struct InferenceAccelerator: AWSEncodableShape & AWSDecodableShape {
        /// The Elastic Inference accelerator device name. The deviceName must also
        /// 			be referenced in a container definition as a ResourceRequirement.
        public let deviceName: String
        /// The Elastic Inference accelerator type to use.
        public let deviceType: String

        public init(deviceName: String, deviceType: String) {
            self.deviceName = deviceName
            self.deviceType = deviceType
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case deviceType = "deviceType"
        }
    }

    public struct InferenceAcceleratorOverride: AWSEncodableShape & AWSDecodableShape {
        /// The Elastic Inference accelerator device name to override for the task. This parameter
        /// 			must match a deviceName specified in the task definition.
        public let deviceName: String?
        /// The Elastic Inference accelerator type to use.
        public let deviceType: String?

        public init(deviceName: String? = nil, deviceType: String? = nil) {
            self.deviceName = deviceName
            self.deviceType = deviceType
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "deviceName"
            case deviceType = "deviceType"
        }
    }

    public struct InstanceHealthCheckResult: AWSDecodableShape {
        /// The Unix timestamp for when the container instance health status last changed.
        public let lastStatusChange: Date?
        /// The Unix timestamp for when the container instance health status was last
        /// 			updated.
        public let lastUpdated: Date?
        /// The container instance health status.
        public let status: InstanceHealthCheckState?
        /// The type of container instance health status that was verified.
        public let type: InstanceHealthCheckType?

        public init(lastStatusChange: Date? = nil, lastUpdated: Date? = nil, status: InstanceHealthCheckState? = nil, type: InstanceHealthCheckType? = nil) {
            self.lastStatusChange = lastStatusChange
            self.lastUpdated = lastUpdated
            self.status = status
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case lastStatusChange = "lastStatusChange"
            case lastUpdated = "lastUpdated"
            case status = "status"
            case type = "type"
        }
    }

    public struct KernelCapabilities: AWSEncodableShape & AWSDecodableShape {
        /// The Linux capabilities for the container that have been added to the default
        /// 			configuration provided by Docker. This parameter maps to CapAdd in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--cap-add option to docker
        /// 				run.  Tasks launched on Fargate only support adding the SYS_PTRACE kernel
        /// 				capability.  Valid values: "ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" |
        /// 				"CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
        /// 				"IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
        /// 				"MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP"
        /// 				| "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" |
        /// 				"SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" |
        /// 				"SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" |
        /// 			"WAKE_ALARM"
        public let add: [String]?
        /// The Linux capabilities for the container that have been removed from the default
        /// 			configuration provided by Docker. This parameter maps to CapDrop in the
        /// 			Create a container section of the Docker Remote API and the
        /// 				--cap-drop option to docker
        /// 				run. Valid values: "ALL" | "AUDIT_CONTROL" | "AUDIT_WRITE" | "BLOCK_SUSPEND" |
        /// 				"CHOWN" | "DAC_OVERRIDE" | "DAC_READ_SEARCH" | "FOWNER" | "FSETID" | "IPC_LOCK" |
        /// 				"IPC_OWNER" | "KILL" | "LEASE" | "LINUX_IMMUTABLE" | "MAC_ADMIN" | "MAC_OVERRIDE" |
        /// 				"MKNOD" | "NET_ADMIN" | "NET_BIND_SERVICE" | "NET_BROADCAST" | "NET_RAW" | "SETFCAP"
        /// 				| "SETGID" | "SETPCAP" | "SETUID" | "SYS_ADMIN" | "SYS_BOOT" | "SYS_CHROOT" |
        /// 				"SYS_MODULE" | "SYS_NICE" | "SYS_PACCT" | "SYS_PTRACE" | "SYS_RAWIO" |
        /// 				"SYS_RESOURCE" | "SYS_TIME" | "SYS_TTY_CONFIG" | "SYSLOG" |
        /// 			"WAKE_ALARM"
        public let drop: [String]?

        public init(add: [String]? = nil, drop: [String]? = nil) {
            self.add = add
            self.drop = drop
        }

        private enum CodingKeys: String, CodingKey {
            case add = "add"
            case drop = "drop"
        }
    }

    public struct KeyValuePair: AWSEncodableShape & AWSDecodableShape {
        /// The name of the key-value pair. For environment variables, this is the name of the
        /// 			environment variable.
        public let name: String?
        /// The value of the key-value pair. For environment variables, this is the value of the
        /// 			environment variable.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case value = "value"
        }
    }

    public struct LinuxParameters: AWSEncodableShape & AWSDecodableShape {
        /// The Linux capabilities for the container that are added to or dropped from the default
        /// 			configuration provided by Docker.  For tasks that use the Fargate launch type,
        /// 					capabilities is supported for all platform versions but the
        /// 					add parameter is only supported if using platform version 1.4.0 or
        /// 				later.
        public let capabilities: KernelCapabilities?
        /// Any host devices to expose to the container. This parameter maps to
        /// 				Devices in the Create a container section of the
        /// 			Docker Remote API and the --device option to docker run.  If you're using tasks that use the Fargate launch type, the
        /// 					devices parameter isn't supported.
        public let devices: [Device]?
        /// Run an init process inside the container that forwards signals and reaps
        /// 			processes. This parameter maps to the --init option to docker run. This parameter requires version 1.25 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'
        public let initProcessEnabled: Bool?
        /// The total amount of swap memory (in MiB) a container can use. This parameter will be
        /// 			translated to the --memory-swap option to docker run where the value would be the sum of
        /// 			the container memory plus the maxSwap value. If a maxSwap value of 0 is specified, the container will not
        /// 			use swap. Accepted values are 0 or any positive integer. If the
        /// 				maxSwap parameter is omitted, the container will use the swap
        /// 			configuration for the container instance it is running on. A maxSwap value
        /// 			must be set for the swappiness parameter to be used.  If you're using tasks that use the Fargate launch type, the
        /// 					maxSwap parameter isn't supported. If you're using tasks on Amazon Linux 2023 the swappiness parameter isn't
        /// 				supported.
        public let maxSwap: Int?
        /// The value for the size (in MiB) of the /dev/shm volume. This parameter
        /// 			maps to the --shm-size option to docker
        /// 				run.  If you are using tasks that use the Fargate launch type, the
        /// 					sharedMemorySize parameter is not supported.
        public let sharedMemorySize: Int?
        /// This allows you to tune a container's memory swappiness behavior. A
        /// 				swappiness value of 0 will cause swapping to not happen
        /// 			unless absolutely necessary. A swappiness value of 100 will
        /// 			cause pages to be swapped very aggressively. Accepted values are whole numbers between
        /// 				0 and 100. If the swappiness parameter is not
        /// 			specified, a default value of 60 is used. If a value is not specified for
        /// 				maxSwap then this parameter is ignored. This parameter maps to the
        /// 				--memory-swappiness option to docker run.  If you're using tasks that use the Fargate launch type, the
        /// 					swappiness parameter isn't supported. If you're using tasks on Amazon Linux 2023 the swappiness parameter isn't
        /// 				supported.
        public let swappiness: Int?
        /// The container path, mount options, and size (in MiB) of the tmpfs mount. This
        /// 			parameter maps to the --tmpfs option to docker run.  If you're using tasks that use the Fargate launch type, the
        /// 					tmpfs parameter isn't supported.
        public let tmpfs: [Tmpfs]?

        public init(capabilities: KernelCapabilities? = nil, devices: [Device]? = nil, initProcessEnabled: Bool? = nil, maxSwap: Int? = nil, sharedMemorySize: Int? = nil, swappiness: Int? = nil, tmpfs: [Tmpfs]? = nil) {
            self.capabilities = capabilities
            self.devices = devices
            self.initProcessEnabled = initProcessEnabled
            self.maxSwap = maxSwap
            self.sharedMemorySize = sharedMemorySize
            self.swappiness = swappiness
            self.tmpfs = tmpfs
        }

        private enum CodingKeys: String, CodingKey {
            case capabilities = "capabilities"
            case devices = "devices"
            case initProcessEnabled = "initProcessEnabled"
            case maxSwap = "maxSwap"
            case sharedMemorySize = "sharedMemorySize"
            case swappiness = "swappiness"
            case tmpfs = "tmpfs"
        }
    }

    public struct ListAccountSettingsRequest: AWSEncodableShape {
        /// Determines whether to return the effective settings. If true, the account
        /// 			settings for the root user or the default setting for the principalArn are
        /// 			returned. If false, the account settings for the principalArn
        /// 			are returned if they're set. Otherwise, no account settings are returned.
        public let effectiveSettings: Bool?
        /// The maximum number of account setting results returned by
        /// 				ListAccountSettings in paginated output. When this parameter is used,
        /// 				ListAccountSettings only returns maxResults results in a
        /// 			single page along with a nextToken response element. The remaining results
        /// 			of the initial request can be seen by sending another ListAccountSettings
        /// 			request with the returned nextToken value. This value can be between
        /// 			1 and 10. If this
        /// 			parameter isn't used, then ListAccountSettings returns up to
        /// 			10 results and a nextToken value
        /// 			if applicable.
        public let maxResults: Int?
        /// The name of the account setting you want to list the settings for.
        public let name: SettingName?
        /// The nextToken value returned from a ListAccountSettings
        /// 			request indicating that more results are available to fulfill the request and further
        /// 			calls will be needed. If maxResults was provided, it's possible the number
        /// 			of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The ARN of the principal, which can be a user, role, or the root user. If this field is
        /// 			omitted, the account settings are listed only for the authenticated user.  Federated users assume the account setting of the root user and can't have explicit
        /// 				account settings set for them.
        public let principalArn: String?
        /// The value of the account settings to filter results with. You must also specify an
        /// 			account setting name to use this parameter.
        public let value: String?

        public init(effectiveSettings: Bool? = nil, maxResults: Int? = nil, name: SettingName? = nil, nextToken: String? = nil, principalArn: String? = nil, value: String? = nil) {
            self.effectiveSettings = effectiveSettings
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
            self.principalArn = principalArn
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case effectiveSettings = "effectiveSettings"
            case maxResults = "maxResults"
            case name = "name"
            case nextToken = "nextToken"
            case principalArn = "principalArn"
            case value = "value"
        }
    }

    public struct ListAccountSettingsResponse: AWSDecodableShape {
        /// The nextToken value to include in a future
        /// 				ListAccountSettings request. When the results of a
        /// 				ListAccountSettings request exceed maxResults, this value
        /// 			can be used to retrieve the next page of results. This value is null when
        /// 			there are no more results to return.
        public let nextToken: String?
        /// The account settings for the resource.
        public let settings: [Setting]?

        public init(nextToken: String? = nil, settings: [Setting]? = nil) {
            self.nextToken = nextToken
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case settings = "settings"
        }
    }

    public struct ListAttributesRequest: AWSEncodableShape {
        /// The name of the attribute to filter the results with.
        public let attributeName: String?
        /// The value of the attribute to filter results with. You must also specify an attribute
        /// 			name to use this parameter.
        public let attributeValue: String?
        /// The short name or full Amazon Resource Name (ARN) of the cluster to list attributes.
        /// 			If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The maximum number of cluster results that ListAttributes returned in
        /// 			paginated output. When this parameter is used, ListAttributes only returns
        /// 				maxResults results in a single page along with a nextToken
        /// 			response element. The remaining results of the initial request can be seen by sending
        /// 			another ListAttributes request with the returned nextToken
        /// 			value. This value can be between 1 and 100. If this
        /// 			parameter isn't used, then ListAttributes returns up to
        /// 			100 results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListAttributes request
        /// 			indicating that more results are available to fulfill the request and further calls are
        /// 			needed. If maxResults was provided, it's possible the number of results to
        /// 			be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The type of the target to list attributes with.
        public let targetType: TargetType

        public init(attributeName: String? = nil, attributeValue: String? = nil, cluster: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, targetType: TargetType) {
            self.attributeName = attributeName
            self.attributeValue = attributeValue
            self.cluster = cluster
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.targetType = targetType
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case attributeValue = "attributeValue"
            case cluster = "cluster"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case targetType = "targetType"
        }
    }

    public struct ListAttributesResponse: AWSDecodableShape {
        /// A list of attribute objects that meet the criteria of the request.
        public let attributes: [Attribute]?
        /// The nextToken value to include in a future ListAttributes
        /// 			request. When the results of a ListAttributes request exceed
        /// 				maxResults, this value can be used to retrieve the next page of
        /// 			results. This value is null when there are no more results to
        /// 			return.
        public let nextToken: String?

        public init(attributes: [Attribute]? = nil, nextToken: String? = nil) {
            self.attributes = attributes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case nextToken = "nextToken"
        }
    }

    public struct ListClustersRequest: AWSEncodableShape {
        /// The maximum number of cluster results that ListClusters returned in
        /// 			paginated output. When this parameter is used, ListClusters only returns
        /// 				maxResults results in a single page along with a nextToken
        /// 			response element. The remaining results of the initial request can be seen by sending
        /// 			another ListClusters request with the returned nextToken
        /// 			value. This value can be between 1 and 100. If this
        /// 			parameter isn't used, then ListClusters returns up to 100
        /// 			results and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListClusters request
        /// 			indicating that more results are available to fulfill the request and further calls are
        /// 			needed. If maxResults was provided, it's possible the number of results to
        /// 			be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListClustersResponse: AWSDecodableShape {
        /// The list of full Amazon Resource Name (ARN) entries for each cluster that's associated with your
        /// 			account.
        public let clusterArns: [String]?
        /// The nextToken value to include in a future ListClusters
        /// 			request. When the results of a ListClusters request exceed
        /// 				maxResults, this value can be used to retrieve the next page of
        /// 			results. This value is null when there are no more results to
        /// 			return.
        public let nextToken: String?

        public init(clusterArns: [String]? = nil, nextToken: String? = nil) {
            self.clusterArns = clusterArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clusterArns = "clusterArns"
            case nextToken = "nextToken"
        }
    }

    public struct ListContainerInstancesRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instances to
        /// 			list. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// You can filter the results of a ListContainerInstances operation with
        /// 			cluster query language statements. For more information, see Cluster Query Language in the Amazon Elastic Container Service Developer Guide.
        public let filter: String?
        /// The maximum number of container instance results that
        /// 				ListContainerInstances returned in paginated output. When this
        /// 			parameter is used, ListContainerInstances only returns
        /// 				maxResults results in a single page along with a nextToken
        /// 			response element. The remaining results of the initial request can be seen by sending
        /// 			another ListContainerInstances request with the returned
        /// 				nextToken value. This value can be between 1 and
        /// 			100. If this parameter isn't used, then
        /// 				ListContainerInstances returns up to 100 results and
        /// 			a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListContainerInstances
        /// 			request indicating that more results are available to fulfill the request and further
        /// 			calls are needed. If maxResults was provided, it's possible the number of
        /// 			results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// Filters the container instances by status. For example, if you specify the
        /// 				DRAINING status, the results include only container instances that have
        /// 			been set to DRAINING using UpdateContainerInstancesState.
        /// 			If you don't specify this parameter, the default is to include container instances set
        /// 			to all states other than INACTIVE.
        public let status: ContainerInstanceStatus?

        public init(cluster: String? = nil, filter: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: ContainerInstanceStatus? = nil) {
            self.cluster = cluster
            self.filter = filter
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case filter = "filter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case status = "status"
        }
    }

    public struct ListContainerInstancesResponse: AWSDecodableShape {
        /// The list of container instances with full ARN entries for each container instance
        /// 			associated with the specified cluster.
        public let containerInstanceArns: [String]?
        /// The nextToken value to include in a future
        /// 				ListContainerInstances request. When the results of a
        /// 				ListContainerInstances request exceed maxResults, this
        /// 			value can be used to retrieve the next page of results. This value is null
        /// 			when there are no more results to return.
        public let nextToken: String?

        public init(containerInstanceArns: [String]? = nil, nextToken: String? = nil) {
            self.containerInstanceArns = containerInstanceArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstanceArns = "containerInstanceArns"
            case nextToken = "nextToken"
        }
    }

    public struct ListServicesByNamespaceRequest: AWSEncodableShape {
        /// The maximum number of service results that ListServicesByNamespace
        /// 			returns in paginated output. When this parameter is used,
        /// 				ListServicesByNamespace only returns maxResults results in
        /// 			a single page along with a nextToken response element. The remaining
        /// 			results of the initial request can be seen by sending another
        /// 				ListServicesByNamespace request with the returned
        /// 				nextToken value. This value can be between 1 and
        /// 			100. If this parameter isn't used, then
        /// 				ListServicesByNamespace returns up to
        /// 			10 results and a nextToken
        /// 			value if applicable.
        public let maxResults: Int?
        /// The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace to list the services in. Tasks that run in a namespace can use short names to connect
        /// 	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
        /// 	Tasks connect through a managed proxy container
        /// 	that collects logs and metrics for increased visibility.
        /// 	Only the tasks that Amazon ECS services create are supported with Service Connect.
        /// 	For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let namespace: String
        /// The nextToken value that's returned from a
        /// 				ListServicesByNamespace request. It indicates that more results are
        /// 			available to fulfill the request and further calls are needed. If
        /// 				maxResults is returned, it is possible the number of results is less
        /// 			than maxResults.
        public let nextToken: String?

        public init(maxResults: Int? = nil, namespace: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.namespace = namespace
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case namespace = "namespace"
            case nextToken = "nextToken"
        }
    }

    public struct ListServicesByNamespaceResponse: AWSDecodableShape {
        /// The nextToken value to include in a future
        /// 				ListServicesByNamespace request. When the results of a
        /// 				ListServicesByNamespace request exceed maxResults, this
        /// 			value can be used to retrieve the next page of results. When there are no more results
        /// 			to return, this value is null.
        public let nextToken: String?
        /// The list of full ARN entries for each service that's associated with the specified
        /// 			namespace.
        public let serviceArns: [String]?

        public init(nextToken: String? = nil, serviceArns: [String]? = nil) {
            self.nextToken = nextToken
            self.serviceArns = serviceArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case serviceArns = "serviceArns"
        }
    }

    public struct ListServicesRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster to use when filtering the
        /// 				ListServices results. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The launch type to use when filtering the ListServices results.
        public let launchType: LaunchType?
        /// The maximum number of service results that ListServices returned in
        /// 			paginated output. When this parameter is used, ListServices only returns
        /// 				maxResults results in a single page along with a nextToken
        /// 			response element. The remaining results of the initial request can be seen by sending
        /// 			another ListServices request with the returned nextToken
        /// 			value. This value can be between 1 and 100. If
        /// 			this parameter isn't used, then ListServices returns up to
        /// 			10 results and a nextToken value if
        /// 			applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListServices request
        /// 			indicating that more results are available to fulfill the request and further calls will
        /// 			be needed. If maxResults was provided, it is possible the number of results
        /// 			to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The scheduling strategy to use when filtering the ListServices
        /// 			results.
        public let schedulingStrategy: SchedulingStrategy?

        public init(cluster: String? = nil, launchType: LaunchType? = nil, maxResults: Int? = nil, nextToken: String? = nil, schedulingStrategy: SchedulingStrategy? = nil) {
            self.cluster = cluster
            self.launchType = launchType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.schedulingStrategy = schedulingStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case launchType = "launchType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case schedulingStrategy = "schedulingStrategy"
        }
    }

    public struct ListServicesResponse: AWSDecodableShape {
        /// The nextToken value to include in a future ListServices
        /// 			request. When the results of a ListServices request exceed
        /// 				maxResults, this value can be used to retrieve the next page of
        /// 			results. This value is null when there are no more results to
        /// 			return.
        public let nextToken: String?
        /// The list of full ARN entries for each service that's associated with the specified
        /// 			cluster.
        public let serviceArns: [String]?

        public init(nextToken: String? = nil, serviceArns: [String]? = nil) {
            self.nextToken = nextToken
            self.serviceArns = serviceArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case serviceArns = "serviceArns"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the
        /// 			supported resources are Amazon ECS tasks, services, task definitions, clusters, and container
        /// 			instances.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        /// The tags for the resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct ListTaskDefinitionFamiliesRequest: AWSEncodableShape {
        /// The familyPrefix is a string that's used to filter the results of
        /// 				ListTaskDefinitionFamilies. If you specify a familyPrefix,
        /// 			only task definition family names that begin with the familyPrefix string
        /// 			are returned.
        public let familyPrefix: String?
        /// The maximum number of task definition family results that
        /// 				ListTaskDefinitionFamilies returned in paginated output. When this
        /// 			parameter is used, ListTaskDefinitions only returns maxResults
        /// 			results in a single page along with a nextToken response element. The
        /// 			remaining results of the initial request can be seen by sending another
        /// 				ListTaskDefinitionFamilies request with the returned
        /// 				nextToken value. This value can be between 1 and
        /// 			100. If this parameter isn't used, then
        /// 				ListTaskDefinitionFamilies returns up to 100 results
        /// 			and a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a
        /// 				ListTaskDefinitionFamilies request indicating that more results are
        /// 			available to fulfill the request and further calls will be needed. If
        /// 				maxResults was provided, it is possible the number of results to be
        /// 			fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The task definition family status to filter the
        /// 				ListTaskDefinitionFamilies results with. By default, both
        /// 				ACTIVE and INACTIVE task definition families are listed.
        /// 			If this parameter is set to ACTIVE, only task definition families that have
        /// 			an ACTIVE task definition revision are returned. If this parameter is set
        /// 			to INACTIVE, only task definition families that do not have any
        /// 				ACTIVE task definition revisions are returned. If you paginate the
        /// 			resulting output, be sure to keep the status value constant in each
        /// 			subsequent request.
        public let status: TaskDefinitionFamilyStatus?

        public init(familyPrefix: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, status: TaskDefinitionFamilyStatus? = nil) {
            self.familyPrefix = familyPrefix
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case familyPrefix = "familyPrefix"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case status = "status"
        }
    }

    public struct ListTaskDefinitionFamiliesResponse: AWSDecodableShape {
        /// The list of task definition family names that match the
        /// 				ListTaskDefinitionFamilies request.
        public let families: [String]?
        /// The nextToken value to include in a future
        /// 				ListTaskDefinitionFamilies request. When the results of a
        /// 				ListTaskDefinitionFamilies request exceed maxResults, this
        /// 			value can be used to retrieve the next page of results. This value is null
        /// 			when there are no more results to return.
        public let nextToken: String?

        public init(families: [String]? = nil, nextToken: String? = nil) {
            self.families = families
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case families = "families"
            case nextToken = "nextToken"
        }
    }

    public struct ListTaskDefinitionsRequest: AWSEncodableShape {
        /// The full family name to filter the ListTaskDefinitions results with.
        /// 			Specifying a familyPrefix limits the listed task definitions to task
        /// 			definition revisions that belong to that family.
        public let familyPrefix: String?
        /// The maximum number of task definition results that ListTaskDefinitions
        /// 			returned in paginated output. When this parameter is used,
        /// 				ListTaskDefinitions only returns maxResults results in a
        /// 			single page along with a nextToken response element. The remaining results
        /// 			of the initial request can be seen by sending another ListTaskDefinitions
        /// 			request with the returned nextToken value. This value can be between
        /// 			1 and 100. If this parameter isn't used, then
        /// 				ListTaskDefinitions returns up to 100 results and a
        /// 				nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListTaskDefinitions
        /// 			request indicating that more results are available to fulfill the request and further
        /// 			calls will be needed. If maxResults was provided, it is possible the number
        /// 			of results to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The order to sort the results in. Valid values are ASC and
        /// 				DESC. By default, (ASC) task definitions are listed
        /// 			lexicographically by family name and in ascending numerical order by revision so that
        /// 			the newest task definitions in a family are listed last. Setting this parameter to
        /// 				DESC reverses the sort order on family name and revision. This is so
        /// 			that the newest task definitions in a family are listed first.
        public let sort: SortOrder?
        /// The task definition status to filter the ListTaskDefinitions results
        /// 			with. By default, only ACTIVE task definitions are listed. By setting this
        /// 			parameter to INACTIVE, you can view task definitions that are
        /// 				INACTIVE as long as an active task or service still references them. If
        /// 			you paginate the resulting output, be sure to keep the status value
        /// 			constant in each subsequent request.
        public let status: TaskDefinitionStatus?

        public init(familyPrefix: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, sort: SortOrder? = nil, status: TaskDefinitionStatus? = nil) {
            self.familyPrefix = familyPrefix
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.sort = sort
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case familyPrefix = "familyPrefix"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case sort = "sort"
            case status = "status"
        }
    }

    public struct ListTaskDefinitionsResponse: AWSDecodableShape {
        /// The nextToken value to include in a future
        /// 				ListTaskDefinitions request. When the results of a
        /// 				ListTaskDefinitions request exceed maxResults, this value
        /// 			can be used to retrieve the next page of results. This value is null when
        /// 			there are no more results to return.
        public let nextToken: String?
        /// The list of task definition Amazon Resource Name (ARN) entries for the ListTaskDefinitions
        /// 			request.
        public let taskDefinitionArns: [String]?

        public init(nextToken: String? = nil, taskDefinitionArns: [String]? = nil) {
            self.nextToken = nextToken
            self.taskDefinitionArns = taskDefinitionArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case taskDefinitionArns = "taskDefinitionArns"
        }
    }

    public struct ListTasksRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster to use when filtering the
        /// 				ListTasks results. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The container instance ID or full ARN of the container instance to use when
        /// 			filtering the ListTasks results. Specifying a
        /// 				containerInstance limits the results to tasks that belong to that
        /// 			container instance.
        public let containerInstance: String?
        /// The task desired status to use when filtering the ListTasks results.
        /// 			Specifying a desiredStatus of STOPPED limits the results to
        /// 			tasks that Amazon ECS has set the desired status to STOPPED. This can be useful
        /// 			for debugging tasks that aren't starting properly or have died or finished. The default
        /// 			status filter is RUNNING, which shows tasks that Amazon ECS has set the desired
        /// 			status to RUNNING.  Although you can filter results based on a desired status of PENDING,
        /// 				this doesn't return any results. Amazon ECS never sets the desired status of a task to
        /// 				that value (only a task's lastStatus may have a value of
        /// 					PENDING).
        public let desiredStatus: DesiredStatus?
        /// The name of the task definition family to use when filtering the
        /// 				ListTasks results. Specifying a family limits the results
        /// 			to tasks that belong to that family.
        public let family: String?
        /// The launch type to use when filtering the ListTasks results.
        public let launchType: LaunchType?
        /// The maximum number of task results that ListTasks returned in paginated
        /// 			output. When this parameter is used, ListTasks only returns
        /// 				maxResults results in a single page along with a nextToken
        /// 			response element. The remaining results of the initial request can be seen by sending
        /// 			another ListTasks request with the returned nextToken value.
        /// 			This value can be between 1 and 100. If this parameter
        /// 			isn't used, then ListTasks returns up to 100 results and
        /// 			a nextToken value if applicable.
        public let maxResults: Int?
        /// The nextToken value returned from a ListTasks request
        /// 			indicating that more results are available to fulfill the request and further calls will
        /// 			be needed. If maxResults was provided, it's possible the number of results
        /// 			to be fewer than maxResults.  This token should be treated as an opaque identifier that is only used to retrieve the next items in a list and not for other programmatic purposes.
        public let nextToken: String?
        /// The name of the service to use when filtering the ListTasks results.
        /// 			Specifying a serviceName limits the results to tasks that belong to that
        /// 			service.
        public let serviceName: String?
        /// The startedBy value to filter the task results with. Specifying a
        /// 				startedBy value limits the results to tasks that were started with that
        /// 			value. When you specify startedBy as the filter, it must be the only filter that
        /// 			you use.
        public let startedBy: String?

        public init(cluster: String? = nil, containerInstance: String? = nil, desiredStatus: DesiredStatus? = nil, family: String? = nil, launchType: LaunchType? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceName: String? = nil, startedBy: String? = nil) {
            self.cluster = cluster
            self.containerInstance = containerInstance
            self.desiredStatus = desiredStatus
            self.family = family
            self.launchType = launchType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceName = serviceName
            self.startedBy = startedBy
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstance = "containerInstance"
            case desiredStatus = "desiredStatus"
            case family = "family"
            case launchType = "launchType"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case serviceName = "serviceName"
            case startedBy = "startedBy"
        }
    }

    public struct ListTasksResponse: AWSDecodableShape {
        /// The nextToken value to include in a future ListTasks
        /// 			request. When the results of a ListTasks request exceed
        /// 				maxResults, this value can be used to retrieve the next page of
        /// 			results. This value is null when there are no more results to
        /// 			return.
        public let nextToken: String?
        /// The list of task ARN entries for the ListTasks request.
        public let taskArns: [String]?

        public init(nextToken: String? = nil, taskArns: [String]? = nil) {
            self.nextToken = nextToken
            self.taskArns = taskArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case taskArns = "taskArns"
        }
    }

    public struct LoadBalancer: AWSEncodableShape & AWSDecodableShape {
        /// The name of the container (as it appears in a container definition) to associate with
        /// 			the load balancer. You need to specify the container name when configuring the target group for an Amazon ECS
        /// 			load balancer.
        public let containerName: String?
        /// The port on the container to associate with the load balancer. This port must
        /// 			correspond to a containerPort in the task definition the tasks in the
        /// 			service are using. For tasks that use the EC2 launch type, the container
        /// 			instance they're launched on must allow ingress traffic on the hostPort of
        /// 			the port mapping.
        public let containerPort: Int?
        /// The name of the load balancer to associate with the Amazon ECS service or task set. If you are using an Application Load Balancer or a Network Load Balancer the load balancer name parameter should be
        /// 			omitted.
        public let loadBalancerName: String?
        /// The full Amazon Resource Name (ARN) of the Elastic Load Balancing target group or groups associated with a service or
        /// 			task set. A target group ARN is only specified when using an Application Load Balancer or Network Load Balancer.  For services using the ECS deployment controller, you can specify one or
        /// 			multiple target groups. For more information, see Registering multiple target groups with a service in
        /// 			the Amazon Elastic Container Service Developer Guide. For services using the CODE_DEPLOY deployment controller, you're required
        /// 			to define two target groups for the load balancer. For more information, see Blue/green deployment with CodeDeploy in the
        /// 			Amazon Elastic Container Service Developer Guide.  If your service's task definition uses the awsvpc network mode, you
        /// 				must choose ip as the target type, not instance. Do this
        /// 				when creating your target groups because tasks that use the awsvpc
        /// 				network mode are associated with an elastic network interface, not an Amazon EC2
        /// 				instance. This network mode is required for the Fargate launch
        /// 				type.
        public let targetGroupArn: String?

        public init(containerName: String? = nil, containerPort: Int? = nil, loadBalancerName: String? = nil, targetGroupArn: String? = nil) {
            self.containerName = containerName
            self.containerPort = containerPort
            self.loadBalancerName = loadBalancerName
            self.targetGroupArn = targetGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerName = "containerName"
            case containerPort = "containerPort"
            case loadBalancerName = "loadBalancerName"
            case targetGroupArn = "targetGroupArn"
        }
    }

    public struct LogConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The log driver to use for the container. For tasks on Fargate, the supported log drivers are awslogs,
        /// 				splunk, and awsfirelens. For tasks hosted on Amazon EC2 instances, the supported log drivers are
        /// 				awslogs, fluentd, gelf,
        /// 				json-file, journald,
        /// 				logentries,syslog, splunk, and
        /// 				awsfirelens. For more information about using the awslogs log driver, see Using
        /// 				the awslogs log driver in the Amazon Elastic Container Service Developer Guide. For more information about using the awsfirelens log driver, see Custom log routing in the Amazon Elastic Container Service Developer Guide.  If you have a custom driver that isn't listed, you can fork the Amazon ECS container
        /// 				agent project that's available
        /// 					on GitHub and customize it to work with that driver. We encourage you to
        /// 				submit pull requests for changes that you would like to have included. However, we
        /// 				don't currently provide support for running modified copies of this software.
        public let logDriver: LogDriver
        /// The configuration options to send to the log driver. This parameter requires version 1.19 of the Docker Remote API or greater on your container instance. To check the Docker Remote API version on your container instance, log in to your container instance and run the following command: sudo docker version --format '{{.Server.APIVersion}}'
        public let options: [String: String]?
        /// The secrets to pass to the log configuration. For more information, see Specifying
        /// 				sensitive data in the Amazon Elastic Container Service Developer Guide.
        public let secretOptions: [Secret]?

        public init(logDriver: LogDriver, options: [String: String]? = nil, secretOptions: [Secret]? = nil) {
            self.logDriver = logDriver
            self.options = options
            self.secretOptions = secretOptions
        }

        private enum CodingKeys: String, CodingKey {
            case logDriver = "logDriver"
            case options = "options"
            case secretOptions = "secretOptions"
        }
    }

    public struct ManagedAgent: AWSDecodableShape {
        /// The Unix timestamp for the time when the managed agent was last started.
        public let lastStartedAt: Date?
        /// The last known status of the managed agent.
        public let lastStatus: String?
        /// The name of the managed agent. When the execute command feature is turned on, the
        /// 			managed agent name is ExecuteCommandAgent.
        public let name: ManagedAgentName?
        /// The reason for why the managed agent is in the state it is in.
        public let reason: String?

        public init(lastStartedAt: Date? = nil, lastStatus: String? = nil, name: ManagedAgentName? = nil, reason: String? = nil) {
            self.lastStartedAt = lastStartedAt
            self.lastStatus = lastStatus
            self.name = name
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case lastStartedAt = "lastStartedAt"
            case lastStatus = "lastStatus"
            case name = "name"
            case reason = "reason"
        }
    }

    public struct ManagedAgentStateChange: AWSEncodableShape {
        /// The name of the container that's associated with the managed agent.
        public let containerName: String
        /// The name of the managed agent.
        public let managedAgentName: ManagedAgentName
        /// The reason for the status of the managed agent.
        public let reason: String?
        /// The status of the managed agent.
        public let status: String

        public init(containerName: String, managedAgentName: ManagedAgentName, reason: String? = nil, status: String) {
            self.containerName = containerName
            self.managedAgentName = managedAgentName
            self.reason = reason
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case containerName = "containerName"
            case managedAgentName = "managedAgentName"
            case reason = "reason"
            case status = "status"
        }
    }

    public struct ManagedScaling: AWSEncodableShape & AWSDecodableShape {
        /// The period of time, in seconds, after a newly launched Amazon EC2 instance can contribute
        /// 			to CloudWatch metrics for Auto Scaling group. If this parameter is omitted, the default value
        /// 			of 300 seconds is used.
        public let instanceWarmupPeriod: Int?
        /// The maximum number of Amazon EC2 instances that Amazon ECS will scale out at one time. The scale
        /// 			in process is not affected by this parameter. If this parameter is omitted, the default
        /// 			value of 10000 is used.
        public let maximumScalingStepSize: Int?
        /// The minimum number of Amazon EC2 instances that Amazon ECS will scale out at one time. The scale
        /// 			in process is not affected by this parameter If this parameter is omitted, the default
        /// 			value of 1 is used. When additional capacity is required, Amazon ECS will scale up the minimum scaling step
        /// 			size even if the actual demand is less than the minimum scaling step size. If you use a capacity provider with an Auto Scaling group configured with more than
        /// 			one Amazon EC2 instance type or Availability Zone, Amazon ECS will scale up by the exact minimum
        /// 			scaling step size value and will ignore both the maximum scaling step size as well as
        /// 			the capacity demand.
        public let minimumScalingStepSize: Int?
        /// Determines whether to use managed scaling for the capacity provider.
        public let status: ManagedScalingStatus?
        /// The target capacity utilization as a percentage for the capacity provider. The
        /// 			specified value must be greater than 0 and less than or equal to
        /// 				100. For example, if you want the capacity provider to maintain 10%
        /// 			spare capacity, then that means the utilization is 90%, so use a
        /// 				targetCapacity of 90. The default value of
        /// 				100 percent results in the Amazon EC2 instances in your Auto Scaling group
        /// 			being completely used.
        public let targetCapacity: Int?

        public init(instanceWarmupPeriod: Int? = nil, maximumScalingStepSize: Int? = nil, minimumScalingStepSize: Int? = nil, status: ManagedScalingStatus? = nil, targetCapacity: Int? = nil) {
            self.instanceWarmupPeriod = instanceWarmupPeriod
            self.maximumScalingStepSize = maximumScalingStepSize
            self.minimumScalingStepSize = minimumScalingStepSize
            self.status = status
            self.targetCapacity = targetCapacity
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceWarmupPeriod, name: "instanceWarmupPeriod", parent: name, max: 10000)
            try self.validate(self.instanceWarmupPeriod, name: "instanceWarmupPeriod", parent: name, min: 0)
            try self.validate(self.maximumScalingStepSize, name: "maximumScalingStepSize", parent: name, max: 10000)
            try self.validate(self.maximumScalingStepSize, name: "maximumScalingStepSize", parent: name, min: 1)
            try self.validate(self.minimumScalingStepSize, name: "minimumScalingStepSize", parent: name, max: 10000)
            try self.validate(self.minimumScalingStepSize, name: "minimumScalingStepSize", parent: name, min: 1)
            try self.validate(self.targetCapacity, name: "targetCapacity", parent: name, max: 100)
            try self.validate(self.targetCapacity, name: "targetCapacity", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case instanceWarmupPeriod = "instanceWarmupPeriod"
            case maximumScalingStepSize = "maximumScalingStepSize"
            case minimumScalingStepSize = "minimumScalingStepSize"
            case status = "status"
            case targetCapacity = "targetCapacity"
        }
    }

    public struct MountPoint: AWSEncodableShape & AWSDecodableShape {
        /// The path on the container to mount the host volume at.
        public let containerPath: String?
        /// If this value is true, the container has read-only access to the volume.
        /// 			If this value is false, then the container can write to the volume. The
        /// 			default value is false.
        public let readOnly: Bool?
        /// The name of the volume to mount. Must be a volume name referenced in the
        /// 				name parameter of task definition volume.
        public let sourceVolume: String?

        public init(containerPath: String? = nil, readOnly: Bool? = nil, sourceVolume: String? = nil) {
            self.containerPath = containerPath
            self.readOnly = readOnly
            self.sourceVolume = sourceVolume
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath = "containerPath"
            case readOnly = "readOnly"
            case sourceVolume = "sourceVolume"
        }
    }

    public struct NetworkBinding: AWSEncodableShape & AWSDecodableShape {
        /// The IP address that the container is bound to on the container instance.
        public let bindIP: String?
        /// The port number on the container that's used with the network binding.
        public let containerPort: Int?
        /// The port number range on the container that's bound to the dynamically mapped host
        /// 			port range. The following rules apply when you specify a containerPortRange:   You must use either the bridge network mode or the awsvpc
        /// 					network mode.   This parameter is available for both the EC2 and Fargate launch types.   This parameter is available for both the Linux and Windows operating systems.   The container instance must have at least version 1.67.0 of the container agent
        /// 					and at least version 1.67.0-1 of the ecs-init package    You can specify a maximum of 100 port ranges per container.   You do not specify a hostPortRange. The value of the hostPortRange is set
        /// 					as follows:   For containers in a task with the awsvpc network mode,
        /// 							the hostPortRange is set to the same value as the
        /// 								containerPortRange. This is a static mapping
        /// 							strategy.   For containers in a task with the bridge network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.     The containerPortRange valid values are between 1 and
        /// 					65535.   A port can only be included in one port mapping per container.   You cannot specify overlapping port ranges.   The first port in the range must be less than last port in the range.   Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports. For more information, see  Issue #11185 on the Github website. For information about how to  turn off the docker-proxy in the Docker daemon config file, see Docker daemon in the Amazon ECS Developer Guide.   You can call  DescribeTasks to view the hostPortRange which
        /// 			are the host ports that are bound to the container ports.
        public let containerPortRange: String?
        /// The port number on the host that's used with the network binding.
        public let hostPort: Int?
        /// The port number range on the host that's used with the network binding. This is
        /// 			assigned is assigned by Docker and delivered by the Amazon ECS agent.
        public let hostPortRange: String?
        /// The protocol used for the network binding.
        public let `protocol`: TransportProtocol?

        public init(bindIP: String? = nil, containerPort: Int? = nil, containerPortRange: String? = nil, hostPort: Int? = nil, hostPortRange: String? = nil, protocol: TransportProtocol? = nil) {
            self.bindIP = bindIP
            self.containerPort = containerPort
            self.containerPortRange = containerPortRange
            self.hostPort = hostPort
            self.hostPortRange = hostPortRange
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case bindIP = "bindIP"
            case containerPort = "containerPort"
            case containerPortRange = "containerPortRange"
            case hostPort = "hostPort"
            case hostPortRange = "hostPortRange"
            case `protocol` = "protocol"
        }
    }

    public struct NetworkConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The VPC subnets and security groups that are associated with a task.  All specified subnets and security groups must be from the same VPC.
        public let awsvpcConfiguration: AwsVpcConfiguration?

        public init(awsvpcConfiguration: AwsVpcConfiguration? = nil) {
            self.awsvpcConfiguration = awsvpcConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case awsvpcConfiguration = "awsvpcConfiguration"
        }
    }

    public struct NetworkInterface: AWSDecodableShape {
        /// The attachment ID for the network interface.
        public let attachmentId: String?
        /// The private IPv6 address for the network interface.
        public let ipv6Address: String?
        /// The private IPv4 address for the network interface.
        public let privateIpv4Address: String?

        public init(attachmentId: String? = nil, ipv6Address: String? = nil, privateIpv4Address: String? = nil) {
            self.attachmentId = attachmentId
            self.ipv6Address = ipv6Address
            self.privateIpv4Address = privateIpv4Address
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId = "attachmentId"
            case ipv6Address = "ipv6Address"
            case privateIpv4Address = "privateIpv4Address"
        }
    }

    public struct PlacementConstraint: AWSEncodableShape & AWSDecodableShape {
        /// A cluster query language expression to apply to the constraint. The expression can
        /// 			have a maximum length of 2000 characters. You can't specify an expression if the
        /// 			constraint type is distinctInstance. For more information, see Cluster query language in the Amazon Elastic Container Service Developer Guide.
        public let expression: String?
        /// The type of constraint. Use distinctInstance to ensure that each task in
        /// 			a particular group is running on a different container instance. Use
        /// 				memberOf to restrict the selection to a group of valid
        /// 			candidates.
        public let type: PlacementConstraintType?

        public init(expression: String? = nil, type: PlacementConstraintType? = nil) {
            self.expression = expression
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case expression = "expression"
            case type = "type"
        }
    }

    public struct PlacementStrategy: AWSEncodableShape & AWSDecodableShape {
        /// The field to apply the placement strategy against. For the spread
        /// 			placement strategy, valid values are instanceId (or host,
        /// 			which has the same effect), or any platform or custom attribute that's applied to a
        /// 			container instance, such as attribute:ecs.availability-zone. For the
        /// 				binpack placement strategy, valid values are cpu and
        /// 				memory. For the random placement strategy, this field is
        /// 			not used.
        public let field: String?
        /// The type of placement strategy. The random placement strategy randomly
        /// 			places tasks on available candidates. The spread placement strategy spreads
        /// 			placement across available candidates evenly based on the field parameter.
        /// 			The binpack strategy places tasks on available candidates that have the
        /// 			least available amount of the resource that's specified with the field
        /// 			parameter. For example, if you binpack on memory, a task is placed on the instance with
        /// 			the least amount of remaining memory but still enough to run the task.
        public let type: PlacementStrategyType?

        public init(field: String? = nil, type: PlacementStrategyType? = nil) {
            self.field = field
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case field = "field"
            case type = "type"
        }
    }

    public struct PlatformDevice: AWSEncodableShape {
        /// The ID for the GPUs on the container instance. The available GPU IDs can also be
        /// 			obtained on the container instance in the
        /// 				/var/lib/ecs/gpu/nvidia_gpu_info.json file.
        public let id: String
        /// The type of device that's available on the container instance. The only supported
        /// 			value is GPU.
        public let type: PlatformDeviceType

        public init(id: String, type: PlatformDeviceType) {
            self.id = id
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case type = "type"
        }
    }

    public struct PortMapping: AWSEncodableShape & AWSDecodableShape {
        /// The application protocol that's used for the port mapping. This parameter only applies
        /// 			to Service Connect. We recommend that you set this parameter to be consistent with the
        /// 			protocol that your application uses. If you set this parameter, Amazon ECS adds
        /// 			protocol-specific connection handling to the Service Connect proxy. If you set this
        /// 			parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch. If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't
        /// 			add protocol-specific telemetry for TCP.  appProtocol is immutable in a Service Connect service. Updating this
        /// 			field requires a service deletion and redeployment. Tasks that run in a namespace can use short names to connect
        /// 	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
        /// 	Tasks connect through a managed proxy container
        /// 	that collects logs and metrics for increased visibility.
        /// 	Only the tasks that Amazon ECS services create are supported with Service Connect.
        /// 	For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let appProtocol: ApplicationProtocol?
        /// The port number on the container that's bound to the user-specified or automatically
        /// 			assigned host port. If you use containers in a task with the awsvpc or host
        /// 			network mode, specify the exposed ports using containerPort. If you use containers in a task with the bridge network mode and you
        /// 			specify a container port and not a host port, your container automatically receives a
        /// 			host port in the ephemeral port range. For more information, see hostPort.
        /// 			Port mappings that are automatically assigned in this way do not count toward the 100
        /// 			reserved ports limit of a container instance.
        public let containerPort: Int?
        /// The port number range on the container that's bound to the dynamically mapped host
        /// 			port range.  The following rules apply when you specify a containerPortRange:   You must use either the bridge network mode or the awsvpc
        /// 					network mode.   This parameter is available for both the EC2 and Fargate launch types.   This parameter is available for both the Linux and Windows operating systems.   The container instance must have at least version 1.67.0 of the container agent
        /// 					and at least version 1.67.0-1 of the ecs-init package    You can specify a maximum of 100 port ranges per container.   You do not specify a hostPortRange. The value of the hostPortRange is set
        /// 					as follows:   For containers in a task with the awsvpc network mode,
        /// 							the hostPortRange is set to the same value as the
        /// 								containerPortRange. This is a static mapping
        /// 							strategy.   For containers in a task with the bridge network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.     The containerPortRange valid values are between 1 and
        /// 					65535.   A port can only be included in one port mapping per container.   You cannot specify overlapping port ranges.   The first port in the range must be less than last port in the range.   Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports. For more information, see  Issue #11185 on the Github website. For information about how to  turn off the docker-proxy in the Docker daemon config file, see Docker daemon in the Amazon ECS Developer Guide.   You can call  DescribeTasks to view the hostPortRange which
        /// 			are the host ports that are bound to the container ports.
        public let containerPortRange: String?
        /// The port number on the container instance to reserve for your container. If you specify a containerPortRange, leave this field empty and the value
        /// 			of the hostPort is set as follows:   For containers in a task with the awsvpc network mode, the
        /// 						hostPort is set to the same value as the
        /// 						containerPort. This is a static mapping strategy.   For containers in a task with the bridge network mode, the Amazon ECS
        /// 					agent finds open ports on the host and automatically binds them to the container
        /// 					ports. This is a dynamic mapping strategy.   If you use containers in a task with the awsvpc or host
        /// 			network mode, the hostPort can either be left blank or set to the same
        /// 			value as the containerPort. If you use containers in a task with the bridge network mode, you can
        /// 			specify a non-reserved host port for your container port mapping, or you can omit the
        /// 				hostPort (or set it to 0) while specifying a
        /// 				containerPort and your container automatically receives a port in the
        /// 			ephemeral port range for your container instance operating system and Docker
        /// 			version. The default ephemeral port range for Docker version 1.6.0 and later is listed on the
        /// 			instance under /proc/sys/net/ipv4/ip_local_port_range. If this kernel
        /// 			parameter is unavailable, the default ephemeral port range from 49153 through 65535
        /// 			(Linux) or 49152 through 65535 (Windows) is used. Do not attempt to specify a host port
        /// 			in the ephemeral port range as these are reserved for automatic assignment. In general,
        /// 			ports below 32768 are outside of the ephemeral port range. The default reserved ports are 22 for SSH, the Docker ports 2375 and 2376, and the
        /// 			Amazon ECS container agent ports 51678-51680. Any host port that was previously specified in
        /// 			a running task is also reserved while the task is running. That is, after a task stops,
        /// 			the host port is released. The current reserved ports are displayed in the
        /// 				remainingResources of DescribeContainerInstances output. A container instance can have up to 100
        /// 			reserved ports at a time. This number includes the default reserved ports. Automatically
        /// 			assigned ports aren't included in the 100 reserved ports quota.
        public let hostPort: Int?
        /// The name that's used for the port mapping. This parameter only applies to
        /// 			Service Connect. This parameter is the name that you use in the
        /// 				serviceConnectConfiguration of a service. The name can include up to 64
        /// 			characters. The characters can include lowercase letters, numbers, underscores (_), and
        /// 			hyphens (-). The name can't start with a hyphen. For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let name: String?
        /// The protocol used for the port mapping. Valid values are tcp and
        /// 				udp. The default is tcp. protocol is
        /// 			immutable in a Service Connect service. Updating this field requires a service deletion
        /// 			and redeployment.
        public let `protocol`: TransportProtocol?

        public init(appProtocol: ApplicationProtocol? = nil, containerPort: Int? = nil, containerPortRange: String? = nil, hostPort: Int? = nil, name: String? = nil, protocol: TransportProtocol? = nil) {
            self.appProtocol = appProtocol
            self.containerPort = containerPort
            self.containerPortRange = containerPortRange
            self.hostPort = hostPort
            self.name = name
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case appProtocol = "appProtocol"
            case containerPort = "containerPort"
            case containerPortRange = "containerPortRange"
            case hostPort = "hostPort"
            case name = "name"
            case `protocol` = "protocol"
        }
    }

    public struct ProtectedTask: AWSDecodableShape {
        /// The epoch time when protection for the task will expire.
        public let expirationDate: Date?
        /// The protection status of the task. If scale-in protection is on for a task, the value
        /// 			is true. Otherwise, it is false.
        public let protectionEnabled: Bool?
        /// The task ARN.
        public let taskArn: String?

        public init(expirationDate: Date? = nil, protectionEnabled: Bool? = nil, taskArn: String? = nil) {
            self.expirationDate = expirationDate
            self.protectionEnabled = protectionEnabled
            self.taskArn = taskArn
        }

        private enum CodingKeys: String, CodingKey {
            case expirationDate = "expirationDate"
            case protectionEnabled = "protectionEnabled"
            case taskArn = "taskArn"
        }
    }

    public struct ProxyConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The name of the container that will serve as the App Mesh proxy.
        public let containerName: String
        /// The set of network configuration parameters to provide the Container Network Interface
        /// 			(CNI) plugin, specified as key-value pairs.    IgnoredUID - (Required) The user ID (UID) of the proxy
        /// 					container as defined by the user parameter in a container
        /// 					definition. This is used to ensure the proxy ignores its own traffic. If
        /// 						IgnoredGID is specified, this field can be empty.    IgnoredGID - (Required) The group ID (GID) of the proxy
        /// 					container as defined by the user parameter in a container
        /// 					definition. This is used to ensure the proxy ignores its own traffic. If
        /// 						IgnoredUID is specified, this field can be empty.    AppPorts - (Required) The list of ports that the
        /// 					application uses. Network traffic to these ports is forwarded to the
        /// 						ProxyIngressPort and ProxyEgressPort.    ProxyIngressPort - (Required) Specifies the port that
        /// 					incoming traffic to the AppPorts is directed to.    ProxyEgressPort - (Required) Specifies the port that
        /// 					outgoing traffic from the AppPorts is directed to.    EgressIgnoredPorts - (Required) The egress traffic going to
        /// 					the specified ports is ignored and not redirected to the
        /// 						ProxyEgressPort. It can be an empty list.    EgressIgnoredIPs - (Required) The egress traffic going to
        /// 					the specified IP addresses is ignored and not redirected to the
        /// 						ProxyEgressPort. It can be an empty list.
        public let properties: [KeyValuePair]?
        /// The proxy type. The only supported value is APPMESH.
        public let type: ProxyConfigurationType?

        public init(containerName: String, properties: [KeyValuePair]? = nil, type: ProxyConfigurationType? = nil) {
            self.containerName = containerName
            self.properties = properties
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case containerName = "containerName"
            case properties = "properties"
            case type = "type"
        }
    }

    public struct PutAccountSettingDefaultRequest: AWSEncodableShape {
        /// The resource name for which to modify the account setting. The following are the valid values for the account setting name.    serviceLongArnFormat - When modified, the Amazon Resource Name
        /// 					(ARN) and resource ID format of the resource type for a specified user, role, or
        /// 					the root user for an account is affected. The opt-in and opt-out account setting
        /// 					must be set for each Amazon ECS resource separately. The ARN and resource ID format
        /// 					of a resource is defined by the opt-in status of the user or role that created
        /// 					the resource. You must turn on this setting to use Amazon ECS features such as
        /// 					resource tagging.    taskLongArnFormat - When modified, the Amazon Resource Name (ARN)
        /// 					and resource ID format of the resource type for a specified user, role, or the
        /// 					root user for an account is affected. The opt-in and opt-out account setting must
        /// 					be set for each Amazon ECS resource separately. The ARN and resource ID format of a
        /// 					resource is defined by the opt-in status of the user or role that created the
        /// 					resource. You must turn on this setting to use Amazon ECS features such as resource
        /// 					tagging.    containerInstanceLongArnFormat - When modified, the Amazon
        /// 					Resource Name (ARN) and resource ID format of the resource type for a specified
        /// 					user, role, or the root user for an account is affected. The opt-in and opt-out
        /// 					account setting must be set for each Amazon ECS resource separately. The ARN and
        /// 					resource ID format of a resource is defined by the opt-in status of the user or
        /// 					role that created the resource. You must turn on this setting to use Amazon ECS
        /// 					features such as resource tagging.    awsvpcTrunking - When modified, the elastic network interface
        /// 					(ENI) limit for any new container instances that support the feature is changed.
        /// 					If awsvpcTrunking is turned on, any new container instances that
        /// 					support the feature are launched have the increased ENI limits available to
        /// 					them. For more information, see Elastic
        /// 						Network Interface Trunking in the Amazon Elastic Container Service Developer Guide.    containerInsights - When modified, the default setting indicating
        /// 					whether Amazon Web Services CloudWatch Container Insights is turned on for your clusters is changed.
        /// 					If containerInsights is turned on, any new clusters that are
        /// 					created will have Container Insights turned on unless you disable it during
        /// 					cluster creation. For more information, see CloudWatch Container Insights in the Amazon Elastic Container Service Developer Guide.    dualStackIPv6 - When turned on, when using a VPC in dual stack
        /// 					mode, your tasks using the awsvpc network mode can have an IPv6
        /// 					address assigned. For more information on using IPv6 with tasks launched on
        /// 					Amazon EC2 instances, see Using a VPC in dual-stack mode. For more information on using IPv6
        /// 					with tasks launched on Fargate, see Using a VPC in dual-stack mode.    fargateFIPSMode - If you specify fargateFIPSMode,
        /// 					Fargate FIPS 140 compliance is affected.    fargateTaskRetirementWaitPeriod - When Amazon Web Services determines that a
        /// 					security or infrastructure update is needed for an Amazon ECS task hosted on
        /// 					Fargate, the tasks need to be stopped and new tasks launched to replace them.
        /// 					Use fargateTaskRetirementWaitPeriod to configure the wait time to
        /// 					retire a Fargate task. For information about the Fargate tasks maintenance,
        /// 					see Amazon Web Services Fargate
        /// 						task maintenance in the Amazon ECS Developer
        /// 					Guide.    tagResourceAuthorization - Amazon ECS is introducing tagging
        /// 					authorization for resource creation. Users must have permissions for actions
        /// 					that create the resource, such as ecsCreateCluster. If tags are
        /// 					specified when you create a resource, Amazon Web Services performs additional authorization to
        /// 					verify if users or roles have permissions to create tags. Therefore, you must
        /// 					grant explicit permissions to use the ecs:TagResource action. For
        /// 					more information, see Grant permission to tag resources on creation in the
        /// 						Amazon ECS Developer Guide.    guardDutyActivate - The guardDutyActivate parameter is read-only in Amazon ECS and indicates whether
        /// 			Amazon ECS Runtime Monitoring is enabled or disabled by your security administrator in your
        /// 			Amazon ECS account. Amazon GuardDuty controls this account setting on your behalf. For more information, see Protecting Amazon ECS workloads with Amazon ECS Runtime Monitoring.
        public let name: SettingName
        /// The account setting value for the specified principal ARN. Accepted values are
        /// 				enabled, disabled, on, and
        /// 			off. When you specify fargateTaskRetirementWaitPeriod for the
        /// 				name, the following are the valid values:    0 - Amazon Web Services sends the notification, and immediately retires the
        /// 					affected tasks.    7 - Amazon Web Services sends the notification, and waits 7 calendar days to
        /// 					retire the tasks.    14 - Amazon Web Services sends the notification, and waits 14 calendar days to
        /// 					retire the tasks.
        public let value: String

        public init(name: SettingName, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case value = "value"
        }
    }

    public struct PutAccountSettingDefaultResponse: AWSDecodableShape {
        /// The current setting for a resource.
        public let setting: Setting?

        public init(setting: Setting? = nil) {
            self.setting = setting
        }

        private enum CodingKeys: String, CodingKey {
            case setting = "setting"
        }
    }

    public struct PutAccountSettingRequest: AWSEncodableShape {
        /// The Amazon ECS account setting name to modify. The following are the valid values for the account setting name.    serviceLongArnFormat - When modified, the Amazon Resource Name
        /// 					(ARN) and resource ID format of the resource type for a specified user, role, or
        /// 					the root user for an account is affected. The opt-in and opt-out account setting
        /// 					must be set for each Amazon ECS resource separately. The ARN and resource ID format
        /// 					of a resource is defined by the opt-in status of the user or role that created
        /// 					the resource. You must turn on this setting to use Amazon ECS features such as
        /// 					resource tagging.    taskLongArnFormat - When modified, the Amazon Resource Name (ARN)
        /// 					and resource ID format of the resource type for a specified user, role, or the
        /// 					root user for an account is affected. The opt-in and opt-out account setting must
        /// 					be set for each Amazon ECS resource separately. The ARN and resource ID format of a
        /// 					resource is defined by the opt-in status of the user or role that created the
        /// 					resource. You must turn on this setting to use Amazon ECS features such as resource
        /// 					tagging.    containerInstanceLongArnFormat - When modified, the Amazon
        /// 					Resource Name (ARN) and resource ID format of the resource type for a specified
        /// 					user, role, or the root user for an account is affected. The opt-in and opt-out
        /// 					account setting must be set for each Amazon ECS resource separately. The ARN and
        /// 					resource ID format of a resource is defined by the opt-in status of the user or
        /// 					role that created the resource. You must turn on this setting to use Amazon ECS
        /// 					features such as resource tagging.    awsvpcTrunking - When modified, the elastic network interface
        /// 					(ENI) limit for any new container instances that support the feature is changed.
        /// 					If awsvpcTrunking is turned on, any new container instances that
        /// 					support the feature are launched have the increased ENI limits available to
        /// 					them. For more information, see Elastic
        /// 						Network Interface Trunking in the Amazon Elastic Container Service Developer Guide.    containerInsights - When modified, the default setting indicating
        /// 					whether Amazon Web Services CloudWatch Container Insights is turned on for your clusters is changed.
        /// 					If containerInsights is turned on, any new clusters that are
        /// 					created will have Container Insights turned on unless you disable it during
        /// 					cluster creation. For more information, see CloudWatch Container Insights in the Amazon Elastic Container Service Developer Guide.    dualStackIPv6 - When turned on, when using a VPC in dual stack
        /// 					mode, your tasks using the awsvpc network mode can have an IPv6
        /// 					address assigned. For more information on using IPv6 with tasks launched on
        /// 					Amazon EC2 instances, see Using a VPC in dual-stack mode. For more information on using IPv6
        /// 					with tasks launched on Fargate, see Using a VPC in dual-stack mode.    fargateFIPSMode - If you specify fargateFIPSMode,
        /// 					Fargate FIPS 140 compliance is affected.    fargateTaskRetirementWaitPeriod - When Amazon Web Services determines that a
        /// 					security or infrastructure update is needed for an Amazon ECS task hosted on
        /// 					Fargate, the tasks need to be stopped and new tasks launched to replace them.
        /// 					Use fargateTaskRetirementWaitPeriod to configure the wait time to
        /// 					retire a Fargate task. For information about the Fargate tasks maintenance,
        /// 					see Amazon Web Services Fargate
        /// 						task maintenance in the Amazon ECS Developer
        /// 					Guide.    tagResourceAuthorization - Amazon ECS is introducing tagging
        /// 					authorization for resource creation. Users must have permissions for actions
        /// 					that create the resource, such as ecsCreateCluster. If tags are
        /// 					specified when you create a resource, Amazon Web Services performs additional authorization to
        /// 					verify if users or roles have permissions to create tags. Therefore, you must
        /// 					grant explicit permissions to use the ecs:TagResource action. For
        /// 					more information, see Grant permission to tag resources on creation in the
        /// 						Amazon ECS Developer Guide.    guardDutyActivate - The guardDutyActivate parameter is read-only in Amazon ECS and indicates whether
        /// 			Amazon ECS Runtime Monitoring is enabled or disabled by your security administrator in your
        /// 			Amazon ECS account. Amazon GuardDuty controls this account setting on your behalf. For more information, see Protecting Amazon ECS workloads with Amazon ECS Runtime Monitoring.
        public let name: SettingName
        /// The ARN of the principal, which can be a user, role, or the root user. If you specify
        /// 			the root user, it modifies the account setting for all users, roles, and the root user of the
        /// 			account unless a user or role explicitly overrides these settings. If this field is
        /// 			omitted, the setting is changed only for the authenticated user.  You must use the root user when you set the Fargate wait time
        /// 					(fargateTaskRetirementWaitPeriod).  Federated users assume the account setting of the root user and can't have explicit
        /// 				account settings set for them.
        public let principalArn: String?
        /// The account setting value for the specified principal ARN. Accepted values are
        /// 				enabled, disabled, on, and
        /// 			off. When you specify fargateTaskRetirementWaitPeriod for the
        /// 				name, the following are the valid values:    0 - Amazon Web Services sends the notification, and immediately retires the
        /// 					affected tasks.    7 - Amazon Web Services sends the notification, and waits 7 calendar days to
        /// 					retire the tasks.    14 - Amazon Web Services sends the notification, and waits 14 calendar days to
        /// 					retire the tasks.
        public let value: String

        public init(name: SettingName, principalArn: String? = nil, value: String) {
            self.name = name
            self.principalArn = principalArn
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case principalArn = "principalArn"
            case value = "value"
        }
    }

    public struct PutAccountSettingResponse: AWSDecodableShape {
        /// The current account setting for a resource.
        public let setting: Setting?

        public init(setting: Setting? = nil) {
            self.setting = setting
        }

        private enum CodingKeys: String, CodingKey {
            case setting = "setting"
        }
    }

    public struct PutAttributesRequest: AWSEncodableShape {
        /// The attributes to apply to your resource. You can specify up to 10 custom attributes
        /// 			for each resource. You can specify up to 10 attributes in a single call.
        public let attributes: [Attribute]
        /// The short name or full Amazon Resource Name (ARN) of the cluster that contains the resource to apply
        /// 			attributes. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?

        public init(attributes: [Attribute], cluster: String? = nil) {
            self.attributes = attributes
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case cluster = "cluster"
        }
    }

    public struct PutAttributesResponse: AWSDecodableShape {
        /// The attributes applied to your resource.
        public let attributes: [Attribute]?

        public init(attributes: [Attribute]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct PutClusterCapacityProvidersRequest: AWSEncodableShape {
        /// The name of one or more capacity providers to associate with the cluster. If specifying a capacity provider that uses an Auto Scaling group, the capacity
        /// 			provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a Fargate capacity provider, specify either the FARGATE or
        /// 				FARGATE_SPOT capacity providers. The Fargate capacity providers are
        /// 			available to all accounts and only need to be associated with a cluster to be
        /// 			used.
        public let capacityProviders: [String]
        /// The short name or full Amazon Resource Name (ARN) of the cluster to modify the capacity provider
        /// 			settings for. If you don't specify a cluster, the default cluster is assumed.
        public let cluster: String
        /// The capacity provider strategy to use by default for the cluster. When creating a service or running a task on a cluster, if no capacity provider or
        /// 			launch type is specified then the default capacity provider strategy for the cluster is
        /// 			used. A capacity provider strategy consists of one or more capacity providers along with the
        /// 				base and weight to assign to them. A capacity provider
        /// 			must be associated with the cluster to be used in a capacity provider strategy. The
        /// 				PutClusterCapacityProviders API is used to associate a capacity
        /// 			provider with a cluster. Only capacity providers with an ACTIVE or
        /// 				UPDATING status can be used. If specifying a capacity provider that uses an Auto Scaling group, the capacity
        /// 			provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a Fargate capacity provider, specify either the FARGATE or
        /// 				FARGATE_SPOT capacity providers. The Fargate capacity providers are
        /// 			available to all accounts and only need to be associated with a cluster to be
        /// 			used.
        public let defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]

        public init(capacityProviders: [String], cluster: String, defaultCapacityProviderStrategy: [CapacityProviderStrategyItem]) {
            self.capacityProviders = capacityProviders
            self.cluster = cluster
            self.defaultCapacityProviderStrategy = defaultCapacityProviderStrategy
        }

        public func validate(name: String) throws {
            try self.defaultCapacityProviderStrategy.forEach {
                try $0.validate(name: "\(name).defaultCapacityProviderStrategy[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviders = "capacityProviders"
            case cluster = "cluster"
            case defaultCapacityProviderStrategy = "defaultCapacityProviderStrategy"
        }
    }

    public struct PutClusterCapacityProvidersResponse: AWSDecodableShape {
        /// Details about the cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct RegisterContainerInstanceRequest: AWSEncodableShape {
        /// The container instance attributes that this container instance supports.
        public let attributes: [Attribute]?
        /// The short name or full Amazon Resource Name (ARN) of the cluster to register your container instance
        /// 			with. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The ARN of the container instance (if it was previously registered).
        public let containerInstanceArn: String?
        /// The instance identity document for the EC2 instance to register. This document can be
        /// 			found by running the following command from the instance: curl
        /// 				http://169.254.169.254/latest/dynamic/instance-identity/document/
        public let instanceIdentityDocument: String?
        /// The instance identity document signature for the EC2 instance to register. This
        /// 			signature can be found by running the following command from the instance: curl
        /// 				http://169.254.169.254/latest/dynamic/instance-identity/signature/
        public let instanceIdentityDocumentSignature: String?
        /// The devices that are available on the container instance. The only supported device
        /// 			type is a GPU.
        public let platformDevices: [PlatformDevice]?
        /// The metadata that you apply to the container instance to help you categorize and
        /// 			organize them. Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The resources available on the instance.
        public let totalResources: [Resource]?
        /// The version information for the Amazon ECS container agent and Docker daemon that runs on
        /// 			the container instance.
        public let versionInfo: VersionInfo?

        public init(attributes: [Attribute]? = nil, cluster: String? = nil, containerInstanceArn: String? = nil, instanceIdentityDocument: String? = nil, instanceIdentityDocumentSignature: String? = nil, platformDevices: [PlatformDevice]? = nil, tags: [Tag]? = nil, totalResources: [Resource]? = nil, versionInfo: VersionInfo? = nil) {
            self.attributes = attributes
            self.cluster = cluster
            self.containerInstanceArn = containerInstanceArn
            self.instanceIdentityDocument = instanceIdentityDocument
            self.instanceIdentityDocumentSignature = instanceIdentityDocumentSignature
            self.platformDevices = platformDevices
            self.tags = tags
            self.totalResources = totalResources
            self.versionInfo = versionInfo
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case cluster = "cluster"
            case containerInstanceArn = "containerInstanceArn"
            case instanceIdentityDocument = "instanceIdentityDocument"
            case instanceIdentityDocumentSignature = "instanceIdentityDocumentSignature"
            case platformDevices = "platformDevices"
            case tags = "tags"
            case totalResources = "totalResources"
            case versionInfo = "versionInfo"
        }
    }

    public struct RegisterContainerInstanceResponse: AWSDecodableShape {
        /// The container instance that was registered.
        public let containerInstance: ContainerInstance?

        public init(containerInstance: ContainerInstance? = nil) {
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstance = "containerInstance"
        }
    }

    public struct RegisterTaskDefinitionRequest: AWSEncodableShape {
        /// A list of container definitions in JSON format that describe the different containers
        /// 			that make up your task.
        public let containerDefinitions: [ContainerDefinition]
        /// The number of CPU units used by the task. It can be expressed as an integer using CPU
        /// 			units (for example, 1024) or as a string using vCPUs (for example, 1
        /// 				vCPU or 1 vcpu) in a task definition. String values are
        /// 			converted to an integer indicating the CPU units when the task definition is
        /// 			registered.  Task-level CPU and memory parameters are ignored for Windows containers. We
        /// 				recommend specifying container-level resources for Windows containers.  If you're using the EC2 launch type, this field is optional. Supported
        /// 			values are between 128 CPU units (0.125 vCPUs) and
        /// 				10240 CPU units (10 vCPUs). If you do not specify a value,
        /// 			the parameter is ignored. If you're using the Fargate launch type, this field is required and you
        /// 			must use one of the following values, which determines your range of supported values
        /// 			for the memory parameter: The CPU units cannot be less than 1 vCPU when you use Windows containers on
        /// 			Fargate.   256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)   512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)   1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)   2048 (2 vCPU) - Available memory values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)   4096 (4 vCPU) - Available memory values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)   8192 (8 vCPU)  - Available memory values: 16 GB and 60 GB in 4 GB increments This option requires Linux platform 1.4.0 or later.   16384 (16vCPU)  - Available memory values: 32GB and 120 GB in 8 GB increments This option requires Linux platform 1.4.0 or later.
        public let cpu: String?
        /// The amount of ephemeral storage to allocate for the task. This parameter is used to
        /// 			expand the total amount of ephemeral storage available, beyond the default amount, for
        /// 			tasks hosted on Fargate. For more information, see Using data volumes in
        /// 				tasks in the Amazon ECS Developer Guide.  For tasks using the Fargate launch type, the task requires the
        /// 				following platforms:   Linux platform version 1.4.0 or later.   Windows platform version 1.0.0 or later.
        public let ephemeralStorage: EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make Amazon Web Services API calls on your behalf. The task execution IAM role is required depending on the requirements of your task. For more information, see Amazon ECS task execution IAM role in the Amazon Elastic Container Service Developer Guide.
        public let executionRoleArn: String?
        /// You must specify a family for a task definition. You can use it track
        /// 			multiple versions of the same task definition. The family is used as a name
        /// 			for your task definition. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed.
        public let family: String
        /// The Elastic Inference accelerators to use for the containers in the task.
        public let inferenceAccelerators: [InferenceAccelerator]?
        /// The IPC resource namespace to use for the containers in the task. The valid values are host, task, or none. If host is specified, then all containers within the tasks that specified the host IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same IPC resources. If none is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see IPC settings in the Docker run reference. If the host IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see Docker security. If you are setting namespaced kernel parameters using systemControls for the containers in the task, the following will apply to your IPC resource namespace. For more information, see System Controls in the Amazon Elastic Container Service Developer Guide.   For tasks that use the host IPC mode, IPC namespace related systemControls are not supported.   For tasks that use the task IPC mode, IPC namespace related systemControls will apply to all containers within a task.    This parameter is not supported for Windows containers or tasks run on Fargate.
        public let ipcMode: IpcMode?
        /// The amount of memory (in MiB) used by the task. It can be expressed as an integer
        /// 			using MiB (for example ,1024) or as a string using GB (for example,
        /// 				1GB or 1 GB) in a task definition. String values are
        /// 			converted to an integer indicating the MiB when the task definition is
        /// 			registered.  Task-level CPU and memory parameters are ignored for Windows containers. We
        /// 				recommend specifying container-level resources for Windows containers.  If using the EC2 launch type, this field is optional. If using the Fargate launch type, this field is required and you must
        /// 			use one of the following values. This determines your range of supported values for the
        /// 				cpu parameter. The CPU units cannot be less than 1 vCPU when you use Windows containers on
        /// 			Fargate.   512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)   1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)   2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)   Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)   Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)   Between 16 GB and 60 GB in 4 GB increments - Available cpu values: 8192 (8 vCPU) This option requires Linux platform 1.4.0 or later.   Between 32GB and 120 GB in 8 GB increments - Available cpu values: 16384 (16 vCPU) This option requires Linux platform 1.4.0 or later.
        public let memory: String?
        /// The Docker networking mode to use for the containers in the task. The valid values are none, bridge, awsvpc, and host. If no network mode is specified, the default is bridge. For Amazon ECS tasks on Fargate, the awsvpc network mode is required.  For Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used.  For Amazon ECS tasks on Amazon EC2 Windows instances,  or awsvpc can be used. If the network mode is set to none, you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The host and awsvpc network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the bridge mode. With the host and awsvpc network modes, exposed container ports are mapped directly to the corresponding host port (for the host network mode) or the attached elastic network interface port (for the awsvpc network mode), so you cannot take advantage of dynamic host port mappings.   When using the host network mode, you should not run containers using the root user (UID 0). It is considered best practice to use a non-root user.  If the network mode is awsvpc, the task is allocated an elastic network interface, and you must specify a NetworkConfiguration value when you create a service or run a task with the task definition. For more information, see Task Networking in the Amazon Elastic Container Service Developer Guide. If the network mode is host, you cannot run multiple instantiations of the same task on a single container instance when port mappings are used. For more information, see Network settings in the Docker run reference.
        public let networkMode: NetworkMode?
        /// The process namespace to use for the containers in the task. The valid values are host or task. On Fargate for Linux containers, the only valid value is task. For example, monitoring sidecars might need pidMode to access information about other containers running in the same task. If host is specified, all containers within the tasks that specified the host PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace for each container. For more information, see PID settings in the Docker run reference. If the host PID mode is used, there's a heightened risk of undesired process namespace exposure. For more information, see Docker security.  This parameter is not supported for Windows containers.   This parameter is only supported for tasks that are hosted on Fargate if the tasks are using platform version 1.4.0 or later (Linux). This isn't supported for Windows containers on Fargate.
        public let pidMode: PidMode?
        /// An array of placement constraint objects to use for the task. You can specify a
        /// 			maximum of 10 constraints for each task. This limit includes constraints in the task
        /// 			definition and those specified at runtime.
        public let placementConstraints: [TaskDefinitionPlacementConstraint]?
        /// The configuration details for the App Mesh proxy. For tasks hosted on Amazon EC2 instances, the container instances require at least version
        /// 				1.26.0 of the container agent and at least version
        /// 				1.26.0-1 of the ecs-init package to use a proxy
        /// 			configuration. If your container instances are launched from the Amazon ECS-optimized
        /// 			AMI version 20190301 or later, then they contain the required versions of
        /// 			the container agent and ecs-init. For more information, see Amazon ECS-optimized AMI versions in the Amazon Elastic Container Service Developer Guide.
        public let proxyConfiguration: ProxyConfiguration?
        /// The task launch type that Amazon ECS validates the task definition against. A client
        /// 			exception is returned if the task definition doesn't validate against the
        /// 			compatibilities specified. If no value is specified, the parameter is omitted from the
        /// 			response.
        public let requiresCompatibilities: [Compatibility]?
        /// The operating system that your tasks definitions run on. A platform family is
        /// 			specified only for tasks using the Fargate launch type.  When you specify a task definition in a service, this value must match the
        /// 				runtimePlatform value of the service.
        public let runtimePlatform: RuntimePlatform?
        /// The metadata that you apply to the task definition to help you categorize and organize
        /// 			them. Each tag consists of a key and an optional value. You define both of them. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The short name or full Amazon Resource Name (ARN) of the IAM role that containers in this task can
        /// 			assume. All containers in this task are granted the permissions that are specified in
        /// 			this role. For more information, see IAM Roles for
        /// 				Tasks in the Amazon Elastic Container Service Developer Guide.
        public let taskRoleArn: String?
        /// A list of volume definitions in JSON format that containers in your task might
        /// 			use.
        public let volumes: [Volume]?

        public init(containerDefinitions: [ContainerDefinition], cpu: String? = nil, ephemeralStorage: EphemeralStorage? = nil, executionRoleArn: String? = nil, family: String, inferenceAccelerators: [InferenceAccelerator]? = nil, ipcMode: IpcMode? = nil, memory: String? = nil, networkMode: NetworkMode? = nil, pidMode: PidMode? = nil, placementConstraints: [TaskDefinitionPlacementConstraint]? = nil, proxyConfiguration: ProxyConfiguration? = nil, requiresCompatibilities: [Compatibility]? = nil, runtimePlatform: RuntimePlatform? = nil, tags: [Tag]? = nil, taskRoleArn: String? = nil, volumes: [Volume]? = nil) {
            self.containerDefinitions = containerDefinitions
            self.cpu = cpu
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.family = family
            self.inferenceAccelerators = inferenceAccelerators
            self.ipcMode = ipcMode
            self.memory = memory
            self.networkMode = networkMode
            self.pidMode = pidMode
            self.placementConstraints = placementConstraints
            self.proxyConfiguration = proxyConfiguration
            self.requiresCompatibilities = requiresCompatibilities
            self.runtimePlatform = runtimePlatform
            self.tags = tags
            self.taskRoleArn = taskRoleArn
            self.volumes = volumes
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case containerDefinitions = "containerDefinitions"
            case cpu = "cpu"
            case ephemeralStorage = "ephemeralStorage"
            case executionRoleArn = "executionRoleArn"
            case family = "family"
            case inferenceAccelerators = "inferenceAccelerators"
            case ipcMode = "ipcMode"
            case memory = "memory"
            case networkMode = "networkMode"
            case pidMode = "pidMode"
            case placementConstraints = "placementConstraints"
            case proxyConfiguration = "proxyConfiguration"
            case requiresCompatibilities = "requiresCompatibilities"
            case runtimePlatform = "runtimePlatform"
            case tags = "tags"
            case taskRoleArn = "taskRoleArn"
            case volumes = "volumes"
        }
    }

    public struct RegisterTaskDefinitionResponse: AWSDecodableShape {
        /// The list of tags associated with the task definition.
        public let tags: [Tag]?
        /// The full description of the registered task definition.
        public let taskDefinition: TaskDefinition?

        public init(tags: [Tag]? = nil, taskDefinition: TaskDefinition? = nil) {
            self.tags = tags
            self.taskDefinition = taskDefinition
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case taskDefinition = "taskDefinition"
        }
    }

    public struct RepositoryCredentials: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the secret containing the private repository
        /// 			credentials.  When you use the Amazon ECS API, CLI, or Amazon Web Services SDK, if the secret exists in the same
        /// 				Region as the task that you're launching then you can use either the full ARN or
        /// 				the name of the secret. When you use the Amazon Web Services Management Console, you must specify the full ARN
        /// 				of the secret.
        public let credentialsParameter: String

        public init(credentialsParameter: String) {
            self.credentialsParameter = credentialsParameter
        }

        private enum CodingKeys: String, CodingKey {
            case credentialsParameter = "credentialsParameter"
        }
    }

    public struct Resource: AWSEncodableShape & AWSDecodableShape {
        /// When the doubleValue type is set, the value of the resource must be a
        /// 			double precision floating-point type.
        public let doubleValue: Double?
        /// When the integerValue type is set, the value of the resource must be an
        /// 			integer.
        public let integerValue: Int?
        /// When the longValue type is set, the value of the resource must be an
        /// 			extended precision floating-point type.
        public let longValue: Int64?
        /// The name of the resource, such as CPU, MEMORY,
        /// 				PORTS, PORTS_UDP, or a user-defined resource.
        public let name: String?
        /// When the stringSetValue type is set, the value of the resource must be a
        /// 			string type.
        public let stringSetValue: [String]?
        /// The type of the resource. Valid values: INTEGER, DOUBLE,
        /// 				LONG, or STRINGSET.
        public let type: String?

        public init(doubleValue: Double? = nil, integerValue: Int? = nil, longValue: Int64? = nil, name: String? = nil, stringSetValue: [String]? = nil, type: String? = nil) {
            self.doubleValue = doubleValue
            self.integerValue = integerValue
            self.longValue = longValue
            self.name = name
            self.stringSetValue = stringSetValue
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case doubleValue = "doubleValue"
            case integerValue = "integerValue"
            case longValue = "longValue"
            case name = "name"
            case stringSetValue = "stringSetValue"
            case type = "type"
        }
    }

    public struct ResourceRequirement: AWSEncodableShape & AWSDecodableShape {
        /// The type of resource to assign to a container. The supported values are
        /// 				GPU or InferenceAccelerator.
        public let type: ResourceType
        /// The value for the specified resource type. If the GPU type is used, the value is the number of physical
        /// 				GPUs the Amazon ECS container agent reserves for the container. The number
        /// 			of GPUs that's reserved for all containers in a task can't exceed the number of
        /// 			available GPUs on the container instance that the task is launched on. If the InferenceAccelerator type is used, the value matches
        /// 			the deviceName for an InferenceAccelerator specified in a task definition.
        public let value: String

        public init(type: ResourceType, value: String) {
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case type = "type"
            case value = "value"
        }
    }

    public struct RunTaskRequest: AWSEncodableShape {
        /// The capacity provider strategy to use for the task. If a capacityProviderStrategy is specified, the launchType
        /// 			parameter must be omitted. If no capacityProviderStrategy or
        /// 				launchType is specified, the
        /// 				defaultCapacityProviderStrategy for the cluster is used. When you use cluster auto scaling, you must specify
        /// 				capacityProviderStrategy and not launchType.  A capacity provider strategy may contain a maximum of 6 capacity providers.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// An identifier that you provide to ensure the idempotency of the request. It must be
        /// 			unique and is case sensitive. Up to 64 characters are allowed. The valid characters are
        /// 			characters in the range of 33-126, inclusive. For more information, see Ensuring idempotency.
        public let clientToken: String?
        /// The short name or full Amazon Resource Name (ARN) of the cluster to run your task on.
        /// 			If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The number of instantiations of the specified task to place on your cluster. You can
        /// 			specify up to 10 tasks for each call.
        public let count: Int?
        /// Specifies whether to use Amazon ECS managed tags for the task. For more information, see
        /// 				Tagging Your Amazon ECS
        /// 				Resources in the Amazon Elastic Container Service Developer Guide.
        public let enableECSManagedTags: Bool?
        /// Determines whether to use the execute command functionality for the containers in this
        /// 			task. If true, this enables execute command functionality on all containers
        /// 			in the task. If true, then the task definition must have a task role, or you must
        /// 			provide one as an override.
        public let enableExecuteCommand: Bool?
        /// The name of the task group to associate with the task. The default value is the family
        /// 			name of the task definition (for example, family:my-family-name).
        public let group: String?
        /// The infrastructure to run your standalone task on. For more information, see Amazon ECS
        /// 				launch types in the Amazon Elastic Container Service Developer Guide. The FARGATE launch type runs your tasks on Fargate On-Demand
        /// 			infrastructure.  Fargate Spot infrastructure is available for use but a capacity provider
        /// 				strategy must be used. For more information, see Fargate capacity providers in the
        /// 					Amazon ECS Developer Guide.  The EC2 launch type runs your tasks on Amazon EC2 instances registered to your
        /// 			cluster. The EXTERNAL launch type runs your tasks on your on-premises server or
        /// 			virtual machine (VM) capacity registered to your cluster. A task can use either a launch type or a capacity provider strategy. If a
        /// 				launchType is specified, the capacityProviderStrategy
        /// 			parameter must be omitted. When you use cluster auto scaling, you must specify
        /// 				capacityProviderStrategy and not launchType.
        public let launchType: LaunchType?
        /// The network configuration for the task. This parameter is required for task
        /// 			definitions that use the awsvpc network mode to receive their own elastic
        /// 			network interface, and it isn't supported for other network modes. For more information,
        /// 			see Task networking
        /// 			in the Amazon Elastic Container Service Developer Guide.
        public let networkConfiguration: NetworkConfiguration?
        /// A list of container overrides in JSON format that specify the name of a container in
        /// 			the specified task definition and the overrides it should receive. You can override the
        /// 			default command for a container (that's specified in the task definition or Docker
        /// 			image) with a command override. You can also override existing environment
        /// 			variables (that are specified in the task definition or Docker image) on a container or
        /// 			add new environment variables to it with an environment override. A total of 8192 characters are allowed for overrides. This limit includes the JSON
        /// 			formatting characters of the override structure.
        public let overrides: TaskOverride?
        /// An array of placement constraint objects to use for the task. You can specify up to 10
        /// 			constraints for each task (including constraints in the task definition and those
        /// 			specified at runtime).
        public let placementConstraints: [PlacementConstraint]?
        /// The placement strategy objects to use for the task. You can specify a maximum of 5
        /// 			strategy rules for each task.
        public let placementStrategy: [PlacementStrategy]?
        /// The platform version the task uses. A platform version is only specified for tasks
        /// 			hosted on Fargate. If one isn't specified, the LATEST
        /// 			platform version is used. For more information, see Fargate platform
        /// 				versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// Specifies whether to propagate the tags from the task definition to the task. If no
        /// 			value is specified, the tags aren't propagated. Tags can only be propagated to the task
        /// 			during task creation. To add tags to a task after task creation, use the TagResource API action.  An error will be received if you specify the SERVICE option when
        /// 				running a task.
        public let propagateTags: PropagateTags?
        /// The reference ID to use for the task. The reference ID can have a maximum length of
        /// 			1024 characters.
        public let referenceId: String?
        /// An optional tag specified when a task is started. For example, if you automatically
        /// 			trigger a task to run a batch process job, you could apply a unique identifier for that
        /// 			job to your task with the startedBy parameter. You can then identify which
        /// 			tasks belong to that job by filtering the results of a ListTasks call
        /// 			with the startedBy value. Up to 128 letters (uppercase and lowercase),
        /// 			numbers, hyphens (-), and underscores (_) are allowed. If a task is started by an Amazon ECS service, then the startedBy parameter
        /// 			contains the deployment ID of the service that starts it.
        public let startedBy: String?
        /// The metadata that you apply to the task to help you categorize and organize them. Each
        /// 			tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The family and revision (family:revision) or
        /// 			full ARN of the task definition to run. If a revision isn't specified,
        /// 			the latest ACTIVE revision is used. The full ARN value must match the value that you specified as the
        /// 				Resource of the principal's permissions policy. When you specify a task definition, you must either specify a specific revision, or
        /// 			all revisions in the ARN. To specify a specific revision, include the revision number in the ARN. For example,
        /// 			to specify revision 2, use
        /// 				arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:2. To specify all revisions, use the wildcard (*) in the ARN. For example, to specify all
        /// 			revisions, use
        /// 				arn:aws:ecs:us-east-1:111122223333:task-definition/TaskFamilyName:*. For more information, see Policy Resources for Amazon ECS in the Amazon Elastic Container Service Developer Guide.
        public let taskDefinition: String
        /// The details of the volume that was configuredAtLaunch. You can configure
        /// 			the size, volumeType, IOPS, throughput, snapshot and encryption in in TaskManagedEBSVolumeConfiguration. The name of the volume must
        /// 			match the name from the task definition.
        public let volumeConfigurations: [TaskVolumeConfiguration]?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, clientToken: String? = RunTaskRequest.idempotencyToken(), cluster: String? = nil, count: Int? = nil, enableECSManagedTags: Bool? = nil, enableExecuteCommand: Bool? = nil, group: String? = nil, launchType: LaunchType? = nil, networkConfiguration: NetworkConfiguration? = nil, overrides: TaskOverride? = nil, placementConstraints: [PlacementConstraint]? = nil, placementStrategy: [PlacementStrategy]? = nil, platformVersion: String? = nil, propagateTags: PropagateTags? = nil, referenceId: String? = nil, startedBy: String? = nil, tags: [Tag]? = nil, taskDefinition: String, volumeConfigurations: [TaskVolumeConfiguration]? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clientToken = clientToken
            self.cluster = cluster
            self.count = count
            self.enableECSManagedTags = enableECSManagedTags
            self.enableExecuteCommand = enableExecuteCommand
            self.group = group
            self.launchType = launchType
            self.networkConfiguration = networkConfiguration
            self.overrides = overrides
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.referenceId = referenceId
            self.startedBy = startedBy
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.volumeConfigurations = volumeConfigurations
        }

        public func validate(name: String) throws {
            try self.capacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).capacityProviderStrategy[]")
            }
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.volumeConfigurations?.forEach {
                try $0.validate(name: "\(name).volumeConfigurations[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case clientToken = "clientToken"
            case cluster = "cluster"
            case count = "count"
            case enableECSManagedTags = "enableECSManagedTags"
            case enableExecuteCommand = "enableExecuteCommand"
            case group = "group"
            case launchType = "launchType"
            case networkConfiguration = "networkConfiguration"
            case overrides = "overrides"
            case placementConstraints = "placementConstraints"
            case placementStrategy = "placementStrategy"
            case platformVersion = "platformVersion"
            case propagateTags = "propagateTags"
            case referenceId = "referenceId"
            case startedBy = "startedBy"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
            case volumeConfigurations = "volumeConfigurations"
        }
    }

    public struct RunTaskResponse: AWSDecodableShape {
        /// Any failures associated with the call. For information about how to address failures, see Service event messages and API failure
        /// 				reasons in the Amazon Elastic Container Service Developer Guide.
        public let failures: [Failure]?
        /// A full description of the tasks that were run. The tasks that were successfully placed
        /// 			on your cluster are described here.
        public let tasks: [Task]?

        public init(failures: [Failure]? = nil, tasks: [Task]? = nil) {
            self.failures = failures
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case tasks = "tasks"
        }
    }

    public struct RuntimePlatform: AWSEncodableShape & AWSDecodableShape {
        /// The CPU architecture. You can run your Linux tasks on an ARM-based platform by setting the value to
        /// 				ARM64. This option is available for tasks that run on Linux Amazon EC2
        /// 			instance or Linux containers on Fargate.
        public let cpuArchitecture: CPUArchitecture?
        /// The operating system.
        public let operatingSystemFamily: OSFamily?

        public init(cpuArchitecture: CPUArchitecture? = nil, operatingSystemFamily: OSFamily? = nil) {
            self.cpuArchitecture = cpuArchitecture
            self.operatingSystemFamily = operatingSystemFamily
        }

        private enum CodingKeys: String, CodingKey {
            case cpuArchitecture = "cpuArchitecture"
            case operatingSystemFamily = "operatingSystemFamily"
        }
    }

    public struct Scale: AWSEncodableShape & AWSDecodableShape {
        /// The unit of measure for the scale value.
        public let unit: ScaleUnit?
        /// The value, specified as a percent total of a service's desiredCount, to
        /// 			scale the task set. Accepted values are numbers between 0 and 100.
        public let value: Double?

        public init(unit: ScaleUnit? = nil, value: Double? = nil) {
            self.unit = unit
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case unit = "unit"
            case value = "value"
        }
    }

    public struct Secret: AWSEncodableShape & AWSDecodableShape {
        /// The name of the secret.
        public let name: String
        /// The secret to expose to the container. The supported values are either the full ARN
        /// 			of the Secrets Manager secret or the full ARN of the parameter in the SSM
        /// 			Parameter Store. For information about the require Identity and Access Management permissions, see Required IAM permissions for Amazon ECS secrets (for Secrets Manager) or
        /// 				Required IAM permissions for Amazon ECS secrets (for Systems Manager Parameter
        /// 			store) in the Amazon Elastic Container Service Developer Guide.  If the SSM Parameter Store parameter exists in the same Region as the task
        /// 				you're launching, then you can use either the full ARN or name of the parameter.
        /// 				If the parameter exists in a different Region, then the full ARN must be
        /// 				specified.
        public let valueFrom: String

        public init(name: String, valueFrom: String) {
            self.name = name
            self.valueFrom = valueFrom
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case valueFrom = "valueFrom"
        }
    }

    public struct Service: AWSDecodableShape {
        /// The capacity provider strategy the service uses. When using the DescribeServices API,
        /// 			this field is omitted if the service was created using a launch type.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The Amazon Resource Name (ARN) of the cluster that hosts the service.
        public let clusterArn: String?
        /// The Unix timestamp for the time when the service was created.
        public let createdAt: Date?
        /// The principal that created the service.
        public let createdBy: String?
        /// Optional deployment parameters that control how many tasks run during the deployment
        /// 			and the ordering of stopping and starting tasks.
        public let deploymentConfiguration: DeploymentConfiguration?
        /// The deployment controller type the service is using.
        public let deploymentController: DeploymentController?
        /// The current state of deployments for the service.
        public let deployments: [Deployment]?
        /// The desired number of instantiations of the task definition to keep running on the
        /// 			service. This value is specified when the service is created with CreateService, and it can be modified with UpdateService.
        public let desiredCount: Int?
        /// Determines whether to use Amazon ECS managed tags for the tasks in the service. For more
        /// 			information, see Tagging Your Amazon ECS
        /// 				Resources in the Amazon Elastic Container Service Developer Guide.
        public let enableECSManagedTags: Bool?
        /// Determines whether the execute command functionality is turned on for the service. If
        /// 				true, the execute command functionality is turned on for all containers
        /// 			in tasks as part of the service.
        public let enableExecuteCommand: Bool?
        /// The event stream for your service. A maximum of 100 of the latest events are
        /// 			displayed.
        public let events: [ServiceEvent]?
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
        /// 			Elastic Load Balancing target health checks after a task has first started.
        public let healthCheckGracePeriodSeconds: Int?
        /// The launch type the service is using. When using the DescribeServices API, this field
        /// 			is omitted if the service was created using a capacity provider strategy.
        public let launchType: LaunchType?
        /// A list of Elastic Load Balancing load balancer objects. It contains the load balancer name, the
        /// 			container name, and the container port to access from the load balancer. The container
        /// 			name is as it appears in a container definition.
        public let loadBalancers: [LoadBalancer]?
        /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
        public let networkConfiguration: NetworkConfiguration?
        /// The number of tasks in the cluster that are in the PENDING state.
        public let pendingCount: Int?
        /// The placement constraints for the tasks in the service.
        public let placementConstraints: [PlacementConstraint]?
        /// The placement strategy that determines how tasks for the service are placed.
        public let placementStrategy: [PlacementStrategy]?
        /// The operating system that your tasks in the service run on. A platform family is
        /// 			specified only for tasks using the Fargate launch type.  All tasks that run as part of this service must use the same
        /// 				platformFamily value as the service (for example,
        /// 			LINUX).
        public let platformFamily: String?
        /// The platform version to run your service on. A platform version is only specified for
        /// 			tasks that are hosted on Fargate. If one isn't specified, the LATEST
        /// 			platform version is used. For more information, see Fargate Platform
        /// 				Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// Determines whether to propagate the tags from the task definition or the service to
        /// 			the task. If no value is specified, the tags aren't propagated.
        public let propagateTags: PropagateTags?
        /// The ARN of the IAM role that's associated with the service. It allows the Amazon ECS
        /// 			container agent to register container instances with an Elastic Load Balancing load balancer.
        public let roleArn: String?
        /// The number of tasks in the cluster that are in the RUNNING state.
        public let runningCount: Int?
        /// The scheduling strategy to use for the service. For more information, see Services. There are two service scheduler strategies available.    REPLICA-The replica scheduling strategy places and
        /// 					maintains the desired number of tasks across your cluster. By default, the
        /// 					service scheduler spreads tasks across Availability Zones. You can use task
        /// 					placement strategies and constraints to customize task placement
        /// 					decisions.    DAEMON-The daemon scheduling strategy deploys exactly one
        /// 					task on each active container instance. This task meets all of the task
        /// 					placement constraints that you specify in your cluster. The service scheduler
        /// 					also evaluates the task placement constraints for running tasks. It stop tasks
        /// 					that don't meet the placement constraints.  Fargate tasks don't support the DAEMON
        /// 						scheduling strategy.
        public let schedulingStrategy: SchedulingStrategy?
        /// The ARN that identifies the service. For more information about the ARN format,
        /// 			see Amazon Resource Name (ARN) in the Amazon ECS Developer Guide.
        public let serviceArn: String?
        /// The name of your service. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. Service names must be unique within
        /// 			a cluster. However, you can have similarly named services in multiple clusters within a
        /// 			Region or across multiple Regions.
        public let serviceName: String?
        /// The details for the service discovery registries to assign to this service. For more
        /// 			information, see Service
        /// 				Discovery.
        public let serviceRegistries: [ServiceRegistry]?
        /// The status of the service. The valid values are ACTIVE,
        /// 				DRAINING, or INACTIVE.
        public let status: String?
        /// The metadata that you apply to the service to help you categorize and organize them.
        /// 			Each tag consists of a key and an optional value. You define bot the key and
        /// 			value. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The task definition to use for tasks in the service. This value is specified when the
        /// 			service is created with CreateService, and it can be modified with
        /// 				UpdateService.
        public let taskDefinition: String?
        /// Information about a set of Amazon ECS tasks in either an CodeDeploy or an EXTERNAL
        /// 			deployment. An Amazon ECS task set includes details such as the desired number of tasks, how
        /// 			many tasks are running, and whether the task set serves production traffic.
        public let taskSets: [TaskSet]?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, clusterArn: String? = nil, createdAt: Date? = nil, createdBy: String? = nil, deploymentConfiguration: DeploymentConfiguration? = nil, deploymentController: DeploymentController? = nil, deployments: [Deployment]? = nil, desiredCount: Int? = nil, enableECSManagedTags: Bool? = nil, enableExecuteCommand: Bool? = nil, events: [ServiceEvent]? = nil, healthCheckGracePeriodSeconds: Int? = nil, launchType: LaunchType? = nil, loadBalancers: [LoadBalancer]? = nil, networkConfiguration: NetworkConfiguration? = nil, pendingCount: Int? = nil, placementConstraints: [PlacementConstraint]? = nil, placementStrategy: [PlacementStrategy]? = nil, platformFamily: String? = nil, platformVersion: String? = nil, propagateTags: PropagateTags? = nil, roleArn: String? = nil, runningCount: Int? = nil, schedulingStrategy: SchedulingStrategy? = nil, serviceArn: String? = nil, serviceName: String? = nil, serviceRegistries: [ServiceRegistry]? = nil, status: String? = nil, tags: [Tag]? = nil, taskDefinition: String? = nil, taskSets: [TaskSet]? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clusterArn = clusterArn
            self.createdAt = createdAt
            self.createdBy = createdBy
            self.deploymentConfiguration = deploymentConfiguration
            self.deploymentController = deploymentController
            self.deployments = deployments
            self.desiredCount = desiredCount
            self.enableECSManagedTags = enableECSManagedTags
            self.enableExecuteCommand = enableExecuteCommand
            self.events = events
            self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.roleArn = roleArn
            self.runningCount = runningCount
            self.schedulingStrategy = schedulingStrategy
            self.serviceArn = serviceArn
            self.serviceName = serviceName
            self.serviceRegistries = serviceRegistries
            self.status = status
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.taskSets = taskSets
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case clusterArn = "clusterArn"
            case createdAt = "createdAt"
            case createdBy = "createdBy"
            case deploymentConfiguration = "deploymentConfiguration"
            case deploymentController = "deploymentController"
            case deployments = "deployments"
            case desiredCount = "desiredCount"
            case enableECSManagedTags = "enableECSManagedTags"
            case enableExecuteCommand = "enableExecuteCommand"
            case events = "events"
            case healthCheckGracePeriodSeconds = "healthCheckGracePeriodSeconds"
            case launchType = "launchType"
            case loadBalancers = "loadBalancers"
            case networkConfiguration = "networkConfiguration"
            case pendingCount = "pendingCount"
            case placementConstraints = "placementConstraints"
            case placementStrategy = "placementStrategy"
            case platformFamily = "platformFamily"
            case platformVersion = "platformVersion"
            case propagateTags = "propagateTags"
            case roleArn = "roleArn"
            case runningCount = "runningCount"
            case schedulingStrategy = "schedulingStrategy"
            case serviceArn = "serviceArn"
            case serviceName = "serviceName"
            case serviceRegistries = "serviceRegistries"
            case status = "status"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
            case taskSets = "taskSets"
        }
    }

    public struct ServiceConnectClientAlias: AWSEncodableShape & AWSDecodableShape {
        /// The dnsName is the name that you use in the applications of client tasks
        /// 			to connect to this service. The name must be a valid DNS name but doesn't need to be
        /// 			fully-qualified. The name can include up to 127 characters. The name can include
        /// 			lowercase letters, numbers, underscores (_), hyphens (-), and periods (.). The name
        /// 			can't start with a hyphen. If this parameter isn't specified, the default value of discoveryName.namespace is used. If the discoveryName isn't specified, the port mapping name from the task definition is used in portName.namespace. To avoid changing your applications in client Amazon ECS services, set this to the same
        /// 			name that the client application uses by default. For example, a few common names are
        /// 				database, db, or the lowercase name of a database, such as
        /// 				mysql or redis. For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let dnsName: String?
        /// The listening port number for the Service Connect proxy. This port is available
        /// 			inside of all of the tasks within the same namespace. To avoid changing your applications in client Amazon ECS services, set this to the same
        /// 			port that the client application uses by default. For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let port: Int

        public init(dnsName: String? = nil, port: Int) {
            self.dnsName = dnsName
            self.port = port
        }

        public func validate(name: String) throws {
            try self.validate(self.port, name: "port", parent: name, max: 65535)
            try self.validate(self.port, name: "port", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dnsName = "dnsName"
            case port = "port"
        }
    }

    public struct ServiceConnectConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Specifies whether to use Service Connect with this service.
        public let enabled: Bool
        public let logConfiguration: LogConfiguration?
        /// The namespace name or full Amazon Resource Name (ARN) of the Cloud Map namespace for use with Service Connect. The namespace must be in
        /// 			the same Amazon Web Services Region as the Amazon ECS service and cluster. The type of namespace doesn't
        /// 			affect Service Connect. For more information about Cloud Map, see Working
        /// 				with Services in the Cloud Map Developer Guide.
        public let namespace: String?
        /// The list of Service Connect service objects. These are names and aliases (also known
        /// 			as endpoints) that are used by other Amazon ECS services to connect to this service.
        /// 			 This field is not required for a "client" Amazon ECS service that's a member of a namespace
        /// 			only to connect to other services within the namespace. An example of this would be a
        /// 			frontend application that accepts incoming requests from either a load balancer that's
        /// 			attached to the service or by other means. An object selects a port from the task definition, assigns a name for the Cloud Map
        /// 			service, and a list of aliases (endpoints) and ports for client applications to refer to
        /// 			this service.
        public let services: [ServiceConnectService]?

        public init(enabled: Bool, logConfiguration: LogConfiguration? = nil, namespace: String? = nil, services: [ServiceConnectService]? = nil) {
            self.enabled = enabled
            self.logConfiguration = logConfiguration
            self.namespace = namespace
            self.services = services
        }

        public func validate(name: String) throws {
            try self.services?.forEach {
                try $0.validate(name: "\(name).services[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
            case logConfiguration = "logConfiguration"
            case namespace = "namespace"
            case services = "services"
        }
    }

    public struct ServiceConnectService: AWSEncodableShape & AWSDecodableShape {
        /// The list of client aliases for this Service Connect service. You use these to assign
        /// 			names that can be used by client applications. The maximum number of client aliases that
        /// 			you can have in this list is 1. Each alias ("endpoint") is a fully-qualified name and port number that other Amazon ECS
        /// 			tasks ("clients") can use to connect to this service. Each name and port mapping must be unique within the namespace. For each ServiceConnectService, you must provide at least one
        /// 				clientAlias with one port.
        public let clientAliases: [ServiceConnectClientAlias]?
        /// The discoveryName is the name of the new Cloud Map service that Amazon ECS creates
        /// 			for this Amazon ECS service. This must be unique within the Cloud Map namespace. The name can contain up to 64 characters. The name can include lowercase letters,
        /// 			numbers, underscores (_), and hyphens (-). The name can't start with a hyphen. If the discoveryName isn't specified, the port mapping name from the task definition is used in portName.namespace.
        public let discoveryName: String?
        /// The port number for the Service Connect proxy to listen on. Use the value of this field to bypass the proxy for traffic on the port number
        /// 			specified in the named portMapping in the task definition of this
        /// 			application, and then use it in your VPC security groups to allow traffic into the proxy
        /// 			for this Amazon ECS service. In awsvpc mode and Fargate, the default value is the container port
        /// 			number. The container port number is in the portMapping in the task
        /// 			definition. In bridge mode, the default value is the ephemeral port of the
        /// 			Service Connect proxy.
        public let ingressPortOverride: Int?
        /// The portName must match the name of one of the portMappings
        /// 			from all the containers in the task definition of this Amazon ECS service.
        public let portName: String
        /// A reference to an object that represents the configured timeouts for
        /// 			Service Connect.
        public let timeout: TimeoutConfiguration?
        /// A reference to an object that represents a Transport Layer Security (TLS)
        /// 			configuration.
        public let tls: ServiceConnectTlsConfiguration?

        public init(clientAliases: [ServiceConnectClientAlias]? = nil, discoveryName: String? = nil, ingressPortOverride: Int? = nil, portName: String, timeout: TimeoutConfiguration? = nil, tls: ServiceConnectTlsConfiguration? = nil) {
            self.clientAliases = clientAliases
            self.discoveryName = discoveryName
            self.ingressPortOverride = ingressPortOverride
            self.portName = portName
            self.timeout = timeout
            self.tls = tls
        }

        public func validate(name: String) throws {
            try self.clientAliases?.forEach {
                try $0.validate(name: "\(name).clientAliases[]")
            }
            try self.validate(self.ingressPortOverride, name: "ingressPortOverride", parent: name, max: 65535)
            try self.validate(self.ingressPortOverride, name: "ingressPortOverride", parent: name, min: 0)
            try self.timeout?.validate(name: "\(name).timeout")
        }

        private enum CodingKeys: String, CodingKey {
            case clientAliases = "clientAliases"
            case discoveryName = "discoveryName"
            case ingressPortOverride = "ingressPortOverride"
            case portName = "portName"
            case timeout = "timeout"
            case tls = "tls"
        }
    }

    public struct ServiceConnectServiceResource: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) for the namespace in Cloud Map that matches the discovery name for this
        /// 			Service Connect resource. You can use this ARN in other integrations with Cloud Map.
        /// 			However, Service Connect can't ensure connectivity outside of Amazon ECS.
        public let discoveryArn: String?
        /// The discovery name of this Service Connect resource. The discoveryName is the name of the new Cloud Map service that Amazon ECS creates
        /// 			for this Amazon ECS service. This must be unique within the Cloud Map namespace. The name can contain up to 64 characters. The name can include lowercase letters,
        /// 			numbers, underscores (_), and hyphens (-). The name can't start with a hyphen. If the discoveryName isn't specified, the port mapping name from the task definition is used in portName.namespace.
        public let discoveryName: String?

        public init(discoveryArn: String? = nil, discoveryName: String? = nil) {
            self.discoveryArn = discoveryArn
            self.discoveryName = discoveryName
        }

        private enum CodingKeys: String, CodingKey {
            case discoveryArn = "discoveryArn"
            case discoveryName = "discoveryName"
        }
    }

    public struct ServiceConnectTlsCertificateAuthority: AWSEncodableShape & AWSDecodableShape {
        /// The ARN of the Amazon Web Services Private Certificate Authority certificate.
        public let awsPcaAuthorityArn: String?

        public init(awsPcaAuthorityArn: String? = nil) {
            self.awsPcaAuthorityArn = awsPcaAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case awsPcaAuthorityArn = "awsPcaAuthorityArn"
        }
    }

    public struct ServiceConnectTlsConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The signer certificate authority.
        public let issuerCertificateAuthority: ServiceConnectTlsCertificateAuthority
        /// The Amazon Web Services Key Management Service key.
        public let kmsKey: String?
        /// The Amazon Resource Name (ARN) of the IAM role that's associated with the Service Connect TLS.
        public let roleArn: String?

        public init(issuerCertificateAuthority: ServiceConnectTlsCertificateAuthority, kmsKey: String? = nil, roleArn: String? = nil) {
            self.issuerCertificateAuthority = issuerCertificateAuthority
            self.kmsKey = kmsKey
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case issuerCertificateAuthority = "issuerCertificateAuthority"
            case kmsKey = "kmsKey"
            case roleArn = "roleArn"
        }
    }

    public struct ServiceEvent: AWSDecodableShape {
        /// The Unix timestamp for the time when the event was triggered.
        public let createdAt: Date?
        /// The ID string for the event.
        public let id: String?
        /// The event message.
        public let message: String?

        public init(createdAt: Date? = nil, id: String? = nil, message: String? = nil) {
            self.createdAt = createdAt
            self.id = id
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case id = "id"
            case message = "message"
        }
    }

    public struct ServiceManagedEBSVolumeConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether the volume should be encrypted. If no value is specified, encryption
        /// 			is turned on by default. This parameter maps 1:1 with the Encrypted
        /// 			parameter of the CreateVolume API in
        /// 			the Amazon EC2 API Reference.
        public let encrypted: Bool?
        /// The Linux filesystem type for the volume. For volumes created from a snapshot, you
        /// 			must specify the same filesystem type that the volume was using when the snapshot was
        /// 			created. If there is a filesystem type mismatch, the task will fail to start. The available filesystem types are  ext3, ext4, and
        /// 				xfs. If no value is specified, the xfs filesystem type is
        /// 			used by default.
        public let filesystemType: TaskFilesystemType?
        /// The number of I/O operations per second (IOPS). For gp3,
        /// 			io1, and io2 volumes, this represents the number of IOPS that
        /// 			are provisioned for the volume. For gp2 volumes, this represents the
        /// 			baseline performance of the volume and the rate at which the volume accumulates I/O
        /// 			credits for bursting. The following are the supported values for each volume type.    gp3: 3,000 - 16,000 IOPS    io1: 100 - 64,000 IOPS    io2: 100 - 256,000 IOPS   This parameter is required for io1 and io2 volume types. The
        /// 			default for gp3 volumes is 3,000 IOPS. This parameter is not
        /// 			supported for st1, sc1, or standard volume
        /// 			types. This parameter maps 1:1 with the Iops parameter of the CreateVolume API in the Amazon EC2 API Reference.
        public let iops: Int?
        /// The Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption. When
        /// 			encryption is turned on and no Amazon Web Services Key Management Service key is specified, the default Amazon Web Services managed key
        /// 			for Amazon EBS volumes is used. This parameter maps 1:1 with the KmsKeyId
        /// 			parameter of the CreateVolume API in
        /// 			the Amazon EC2 API Reference.  Amazon Web Services authenticates the Amazon Web Services Key Management Service key asynchronously. Therefore, if you specify an
        /// 				ID, alias, or ARN that is invalid, the action can appear to complete, but
        /// 				eventually fails.
        public let kmsKeyId: String?
        /// The ARN of the IAM role to associate with this volume. This is the Amazon ECS
        /// 			infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. We recommend
        /// 			using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM
        /// 			policy with this role. For more information, see Amazon ECS
        /// 				infrastructure IAM role in the Amazon ECS Developer
        /// 			Guide.
        public let roleArn: String
        /// The size of the volume in GiB. You must specify either a volume size or a snapshot ID.
        /// 			If you specify a snapshot ID, the snapshot size is used for the volume size by default.
        /// 			You can optionally specify a volume size greater than or equal to the snapshot size.
        /// 			This parameter maps 1:1 with the Size parameter of the CreateVolume API in the Amazon EC2 API Reference. The following are the supported volume size values for each volume type.    gp2 and gp3: 1-16,384    io1 and io2: 4-16,384    st1 and sc1: 125-16,384    standard: 1-1,024
        public let sizeInGiB: Int?
        /// The snapshot that Amazon ECS uses to create the volume. You must specify either a snapshot
        /// 			ID or a volume size. This parameter maps 1:1 with the SnapshotId parameter
        /// 			of the CreateVolume API in
        /// 			the Amazon EC2 API Reference.
        public let snapshotId: String?
        /// The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This
        /// 			parameter maps 1:1 with the TagSpecifications.N parameter of the CreateVolume API in the Amazon EC2 API Reference.
        public let tagSpecifications: [EBSTagSpecification]?
        /// The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.
        /// 			This parameter maps 1:1 with the Throughput parameter of the CreateVolume API in the Amazon EC2 API Reference.  This parameter is only supported for the gp3 volume type.
        public let throughput: Int?
        /// The volume type. This parameter maps 1:1 with the VolumeType parameter of
        /// 			the CreateVolume API in the Amazon EC2 API Reference. For more
        /// 			information, see Amazon EBS volume types in
        /// 			the Amazon EC2 User Guide. The following are the supported volume types.   General Purpose SSD: gp2|gp3    Provisioned IOPS SSD: io1|io2    Throughput Optimized HDD: st1    Cold HDD: sc1    Magnetic: standard   The magnetic volume type is not supported on Fargate.
        public let volumeType: String?

        public init(encrypted: Bool? = nil, filesystemType: TaskFilesystemType? = nil, iops: Int? = nil, kmsKeyId: String? = nil, roleArn: String, sizeInGiB: Int? = nil, snapshotId: String? = nil, tagSpecifications: [EBSTagSpecification]? = nil, throughput: Int? = nil, volumeType: String? = nil) {
            self.encrypted = encrypted
            self.filesystemType = filesystemType
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.roleArn = roleArn
            self.sizeInGiB = sizeInGiB
            self.snapshotId = snapshotId
            self.tagSpecifications = tagSpecifications
            self.throughput = throughput
            self.volumeType = volumeType
        }

        public func validate(name: String) throws {
            try self.tagSpecifications?.forEach {
                try $0.validate(name: "\(name).tagSpecifications[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case encrypted = "encrypted"
            case filesystemType = "filesystemType"
            case iops = "iops"
            case kmsKeyId = "kmsKeyId"
            case roleArn = "roleArn"
            case sizeInGiB = "sizeInGiB"
            case snapshotId = "snapshotId"
            case tagSpecifications = "tagSpecifications"
            case throughput = "throughput"
            case volumeType = "volumeType"
        }
    }

    public struct ServiceRegistry: AWSEncodableShape & AWSDecodableShape {
        /// The container name value to be used for your service discovery service. It's already
        /// 			specified in the task definition. If the task definition that your service task
        /// 			specifies uses the bridge or host network mode, you must
        /// 			specify a containerName and containerPort combination from the
        /// 			task definition. If the task definition that your service task specifies uses the
        /// 				awsvpc network mode and a type SRV DNS record is used, you must specify
        /// 			either a containerName and containerPort combination or a
        /// 				port value. However, you can't specify both.
        public let containerName: String?
        /// The port value to be used for your service discovery service. It's already specified
        /// 			in the task definition. If the task definition your service task specifies uses the
        /// 				bridge or host network mode, you must specify a
        /// 				containerName and containerPort combination from the task
        /// 			definition. If the task definition your service task specifies uses the
        /// 				awsvpc network mode and a type SRV DNS record is used, you must specify
        /// 			either a containerName and containerPort combination or a
        /// 				port value. However, you can't specify both.
        public let containerPort: Int?
        /// The port value used if your service discovery service specified an SRV record. This
        /// 			field might be used if both the awsvpc network mode and SRV records are
        /// 			used.
        public let port: Int?
        /// The Amazon Resource Name (ARN) of the service registry. The currently supported service registry is
        /// 			Cloud Map. For more information, see CreateService.
        public let registryArn: String?

        public init(containerName: String? = nil, containerPort: Int? = nil, port: Int? = nil, registryArn: String? = nil) {
            self.containerName = containerName
            self.containerPort = containerPort
            self.port = port
            self.registryArn = registryArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerName = "containerName"
            case containerPort = "containerPort"
            case port = "port"
            case registryArn = "registryArn"
        }
    }

    public struct ServiceVolumeConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf.
        /// 			These settings are used to create each Amazon EBS volume, with one volume created for each
        /// 			task in the service. The Amazon EBS volumes are visible in your account in the Amazon EC2 console
        /// 			once they are created.
        public let managedEBSVolume: ServiceManagedEBSVolumeConfiguration?
        /// The name of the volume. This value must match the volume name from the
        /// 				Volume object in the task definition.
        public let name: String

        public init(managedEBSVolume: ServiceManagedEBSVolumeConfiguration? = nil, name: String) {
            self.managedEBSVolume = managedEBSVolume
            self.name = name
        }

        public func validate(name: String) throws {
            try self.managedEBSVolume?.validate(name: "\(name).managedEBSVolume")
        }

        private enum CodingKeys: String, CodingKey {
            case managedEBSVolume = "managedEBSVolume"
            case name = "name"
        }
    }

    public struct Session: AWSDecodableShape {
        /// The ID of the execute command session.
        public let sessionId: String?
        /// A URL to the managed agent on the container that the SSM Session Manager client uses
        /// 			to send commands and receive output from the container.
        public let streamUrl: String?
        /// An encrypted token value containing session and caller information. It's used to
        /// 			authenticate the connection to the container.
        public let tokenValue: String?

        public init(sessionId: String? = nil, streamUrl: String? = nil, tokenValue: String? = nil) {
            self.sessionId = sessionId
            self.streamUrl = streamUrl
            self.tokenValue = tokenValue
        }

        private enum CodingKeys: String, CodingKey {
            case sessionId = "sessionId"
            case streamUrl = "streamUrl"
            case tokenValue = "tokenValue"
        }
    }

    public struct Setting: AWSDecodableShape {
        /// The Amazon ECS resource name.
        public let name: SettingName?
        /// The ARN of the principal. It can be a user, role, or the root user. If this field is
        /// 			omitted, the authenticated user is assumed.
        public let principalArn: String?
        /// Indicates whether Amazon Web Services manages the account setting, or if the user manages it.  aws_managed account settings are read-only, as Amazon Web Services manages such on the
        /// 			customer's behalf. Currently, the guardDutyActivate account setting is the
        /// 			only one Amazon Web Services manages.
        public let type: SettingType?
        /// Determines whether the account setting is on or off for the specified resource.
        public let value: String?

        public init(name: SettingName? = nil, principalArn: String? = nil, type: SettingType? = nil, value: String? = nil) {
            self.name = name
            self.principalArn = principalArn
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case principalArn = "principalArn"
            case type = "type"
            case value = "value"
        }
    }

    public struct StartTaskRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster where to start your task.
        /// 			If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The container instance IDs or full ARN entries for the container instances where you
        /// 			would like to place your task. You can specify up to 10 container instances.
        public let containerInstances: [String]
        /// Specifies whether to use Amazon ECS managed tags for the task. For more information, see
        /// 				Tagging Your Amazon ECS
        /// 				Resources in the Amazon Elastic Container Service Developer Guide.
        public let enableECSManagedTags: Bool?
        /// Whether or not the execute command functionality is turned on for the task. If
        /// 				true, this turns on the execute command functionality on all containers
        /// 			in the task.
        public let enableExecuteCommand: Bool?
        /// The name of the task group to associate with the task. The default value is the family
        /// 			name of the task definition (for example, family:my-family-name).
        public let group: String?
        /// The VPC subnet and security group configuration for tasks that receive their own elastic network interface by using the awsvpc networking mode.
        public let networkConfiguration: NetworkConfiguration?
        /// A list of container overrides in JSON format that specify the name of a container in
        /// 			the specified task definition and the overrides it receives. You can override the
        /// 			default command for a container (that's specified in the task definition or Docker
        /// 			image) with a command override. You can also override existing environment
        /// 			variables (that are specified in the task definition or Docker image) on a container or
        /// 			add new environment variables to it with an environment override.  A total of 8192 characters are allowed for overrides. This limit includes the JSON
        /// 				formatting characters of the override structure.
        public let overrides: TaskOverride?
        /// Specifies whether to propagate the tags from the task definition or the service to the
        /// 			task. If no value is specified, the tags aren't propagated.
        public let propagateTags: PropagateTags?
        /// The reference ID to use for the task.
        public let referenceId: String?
        /// An optional tag specified when a task is started. For example, if you automatically
        /// 			trigger a task to run a batch process job, you could apply a unique identifier for that
        /// 			job to your task with the startedBy parameter. You can then identify which
        /// 			tasks belong to that job by filtering the results of a ListTasks call
        /// 			with the startedBy value. Up to 36 letters (uppercase and lowercase),
        /// 			numbers, hyphens (-), and underscores (_) are allowed. If a task is started by an Amazon ECS service, the startedBy parameter
        /// 			contains the deployment ID of the service that starts it.
        public let startedBy: String?
        /// The metadata that you apply to the task to help you categorize and organize them. Each
        /// 			tag consists of a key and an optional value, both of which you define. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The family and revision (family:revision) or
        /// 			full ARN of the task definition to start. If a revision isn't specified,
        /// 			the latest ACTIVE revision is used.
        public let taskDefinition: String
        /// The details of the volume that was configuredAtLaunch. You can configure
        /// 			the size, volumeType, IOPS, throughput, snapshot and encryption in TaskManagedEBSVolumeConfiguration. The name of the volume must
        /// 			match the name from the task definition.
        public let volumeConfigurations: [TaskVolumeConfiguration]?

        public init(cluster: String? = nil, containerInstances: [String], enableECSManagedTags: Bool? = nil, enableExecuteCommand: Bool? = nil, group: String? = nil, networkConfiguration: NetworkConfiguration? = nil, overrides: TaskOverride? = nil, propagateTags: PropagateTags? = nil, referenceId: String? = nil, startedBy: String? = nil, tags: [Tag]? = nil, taskDefinition: String, volumeConfigurations: [TaskVolumeConfiguration]? = nil) {
            self.cluster = cluster
            self.containerInstances = containerInstances
            self.enableECSManagedTags = enableECSManagedTags
            self.enableExecuteCommand = enableExecuteCommand
            self.group = group
            self.networkConfiguration = networkConfiguration
            self.overrides = overrides
            self.propagateTags = propagateTags
            self.referenceId = referenceId
            self.startedBy = startedBy
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.volumeConfigurations = volumeConfigurations
        }

        public func validate(name: String) throws {
            try self.tags?.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
            try self.volumeConfigurations?.forEach {
                try $0.validate(name: "\(name).volumeConfigurations[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstances = "containerInstances"
            case enableECSManagedTags = "enableECSManagedTags"
            case enableExecuteCommand = "enableExecuteCommand"
            case group = "group"
            case networkConfiguration = "networkConfiguration"
            case overrides = "overrides"
            case propagateTags = "propagateTags"
            case referenceId = "referenceId"
            case startedBy = "startedBy"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
            case volumeConfigurations = "volumeConfigurations"
        }
    }

    public struct StartTaskResponse: AWSDecodableShape {
        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// A full description of the tasks that were started. Each task that was successfully
        /// 			placed on your container instances is described.
        public let tasks: [Task]?

        public init(failures: [Failure]? = nil, tasks: [Task]? = nil) {
            self.failures = failures
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case tasks = "tasks"
        }
    }

    public struct StopTaskRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task to stop.
        /// 			If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// An optional message specified when a task is stopped. For example, if you're using a
        /// 			custom scheduler, you can use this parameter to specify the reason for stopping the task
        /// 			here, and the message appears in subsequent DescribeTasks API
        /// 			operations on this task.
        public let reason: String?
        /// The task ID of the task to stop.
        public let task: String

        public init(cluster: String? = nil, reason: String? = nil, task: String) {
            self.cluster = cluster
            self.reason = reason
            self.task = task
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case reason = "reason"
            case task = "task"
        }
    }

    public struct StopTaskResponse: AWSDecodableShape {
        /// The task that was stopped.
        public let task: Task?

        public init(task: Task? = nil) {
            self.task = task
        }

        private enum CodingKeys: String, CodingKey {
            case task = "task"
        }
    }

    public struct SubmitAttachmentStateChangesRequest: AWSEncodableShape {
        /// Any attachments associated with the state change request.
        public let attachments: [AttachmentStateChange]
        /// The short name or full ARN of the cluster that hosts the container instance the
        /// 			attachment belongs to.
        public let cluster: String?

        public init(attachments: [AttachmentStateChange], cluster: String? = nil) {
            self.attachments = attachments
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachments"
            case cluster = "cluster"
        }
    }

    public struct SubmitAttachmentStateChangesResponse: AWSDecodableShape {
        /// Acknowledgement of the state change.
        public let acknowledgment: String?

        public init(acknowledgment: String? = nil) {
            self.acknowledgment = acknowledgment
        }

        private enum CodingKeys: String, CodingKey {
            case acknowledgment = "acknowledgment"
        }
    }

    public struct SubmitContainerStateChangeRequest: AWSEncodableShape {
        /// The short name or full ARN of the cluster that hosts the container.
        public let cluster: String?
        /// The name of the container.
        public let containerName: String?
        /// The exit code that's returned for the state change request.
        public let exitCode: Int?
        /// The network bindings of the container.
        public let networkBindings: [NetworkBinding]?
        /// The reason for the state change request.
        public let reason: String?
        /// The ID of the Docker container.
        public let runtimeId: String?
        /// The status of the state change request.
        public let status: String?
        /// The task ID or full Amazon Resource Name (ARN) of the task that hosts the container.
        public let task: String?

        public init(cluster: String? = nil, containerName: String? = nil, exitCode: Int? = nil, networkBindings: [NetworkBinding]? = nil, reason: String? = nil, runtimeId: String? = nil, status: String? = nil, task: String? = nil) {
            self.cluster = cluster
            self.containerName = containerName
            self.exitCode = exitCode
            self.networkBindings = networkBindings
            self.reason = reason
            self.runtimeId = runtimeId
            self.status = status
            self.task = task
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerName = "containerName"
            case exitCode = "exitCode"
            case networkBindings = "networkBindings"
            case reason = "reason"
            case runtimeId = "runtimeId"
            case status = "status"
            case task = "task"
        }
    }

    public struct SubmitContainerStateChangeResponse: AWSDecodableShape {
        /// Acknowledgement of the state change.
        public let acknowledgment: String?

        public init(acknowledgment: String? = nil) {
            self.acknowledgment = acknowledgment
        }

        private enum CodingKeys: String, CodingKey {
            case acknowledgment = "acknowledgment"
        }
    }

    public struct SubmitTaskStateChangeRequest: AWSEncodableShape {
        /// Any attachments associated with the state change request.
        public let attachments: [AttachmentStateChange]?
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the task.
        public let cluster: String?
        /// Any containers that's associated with the state change request.
        public let containers: [ContainerStateChange]?
        /// The Unix timestamp for the time when the task execution stopped.
        public let executionStoppedAt: Date?
        /// The details for the managed agent that's associated with the task.
        public let managedAgents: [ManagedAgentStateChange]?
        /// The Unix timestamp for the time when the container image pull started.
        public let pullStartedAt: Date?
        /// The Unix timestamp for the time when the container image pull completed.
        public let pullStoppedAt: Date?
        /// The reason for the state change request.
        public let reason: String?
        /// The status of the state change request.
        public let status: String?
        /// The task ID or full ARN of the task in the state change request.
        public let task: String?

        public init(attachments: [AttachmentStateChange]? = nil, cluster: String? = nil, containers: [ContainerStateChange]? = nil, executionStoppedAt: Date? = nil, managedAgents: [ManagedAgentStateChange]? = nil, pullStartedAt: Date? = nil, pullStoppedAt: Date? = nil, reason: String? = nil, status: String? = nil, task: String? = nil) {
            self.attachments = attachments
            self.cluster = cluster
            self.containers = containers
            self.executionStoppedAt = executionStoppedAt
            self.managedAgents = managedAgents
            self.pullStartedAt = pullStartedAt
            self.pullStoppedAt = pullStoppedAt
            self.reason = reason
            self.status = status
            self.task = task
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachments"
            case cluster = "cluster"
            case containers = "containers"
            case executionStoppedAt = "executionStoppedAt"
            case managedAgents = "managedAgents"
            case pullStartedAt = "pullStartedAt"
            case pullStoppedAt = "pullStoppedAt"
            case reason = "reason"
            case status = "status"
            case task = "task"
        }
    }

    public struct SubmitTaskStateChangeResponse: AWSDecodableShape {
        /// Acknowledgement of the state change.
        public let acknowledgment: String?

        public init(acknowledgment: String? = nil) {
            self.acknowledgment = acknowledgment
        }

        private enum CodingKeys: String, CodingKey {
            case acknowledgment = "acknowledgment"
        }
    }

    public struct SystemControl: AWSEncodableShape & AWSDecodableShape {
        /// The namespaced kernel parameter to set a value for.
        public let namespace: String?
        /// The namespaced kernel parameter to set a value for. Valid IPC namespace values: "kernel.msgmax" | "kernel.msgmnb" | "kernel.msgmni"
        /// 				| "kernel.sem" | "kernel.shmall" | "kernel.shmmax" | "kernel.shmmni" |
        /// 				"kernel.shm_rmid_forced", and Sysctls that start with
        /// 				"fs.mqueue.*"  Valid network namespace values: Sysctls that start with
        /// 				"net.*"  All of these values are supported by Fargate.
        public let value: String?

        public init(namespace: String? = nil, value: String? = nil) {
            self.namespace = namespace
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case namespace = "namespace"
            case value = "value"
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// One part of a key-value pair that make up a tag. A key is a general label
        /// 			that acts like a category for more specific tag values.
        public let key: String?
        /// The optional part of a key-value pair that make up a tag. A value acts as
        /// 			a descriptor within a tag category (key).
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.key, name: "key", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to add tags to. Currently, the supported resources are
        /// 			Amazon ECS capacity providers, tasks, services, task definitions, clusters, and container
        /// 			instances.
        public let resourceArn: String
        /// The tags to add to the resource. A tag is an array of key-value pairs. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.tags.forEach {
                try $0.validate(name: "\(name).tags[]")
            }
            try self.validate(self.tags, name: "tags", parent: name, max: 50)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Task: AWSDecodableShape {
        /// The Elastic Network Adapter that's associated with the task if the task uses the
        /// 				awsvpc network mode.
        public let attachments: [Attachment]?
        /// The attributes of the task
        public let attributes: [Attribute]?
        /// The Availability Zone for the task.
        public let availabilityZone: String?
        /// The capacity provider that's associated with the task.
        public let capacityProviderName: String?
        /// The ARN of the cluster that hosts the task.
        public let clusterArn: String?
        /// The connectivity status of a task.
        public let connectivity: Connectivity?
        /// The Unix timestamp for the time when the task last went into CONNECTED
        /// 			status.
        public let connectivityAt: Date?
        /// The ARN of the container instances that host the task.
        public let containerInstanceArn: String?
        /// The containers that's associated with the task.
        public let containers: [Container]?
        /// The number of CPU units used by the task as expressed in a task definition. It can be
        /// 			expressed as an integer using CPU units (for example, 1024). It can also be
        /// 			expressed as a string using vCPUs (for example, 1 vCPU or 1
        /// 				vcpu). String values are converted to an integer that indicates the CPU units
        /// 			when the task definition is registered. If you use the EC2 launch type, this field is optional. Supported values
        /// 			are between 128 CPU units (0.125 vCPUs) and 10240
        /// 			CPU units (10 vCPUs). If you use the Fargate launch type, this field is required. You must use
        /// 			one of the following values. These values determine the range of supported values for
        /// 			the memory parameter: The CPU units cannot be less than 1 vCPU when you use Windows containers on
        /// 			Fargate.   256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)   512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)   1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)   2048 (2 vCPU) - Available memory values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)   4096 (4 vCPU) - Available memory values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)   8192 (8 vCPU)  - Available memory values: 16 GB and 60 GB in 4 GB increments This option requires Linux platform 1.4.0 or later.   16384 (16vCPU)  - Available memory values: 32GB and 120 GB in 8 GB increments This option requires Linux platform 1.4.0 or later.
        public let cpu: String?
        /// The Unix timestamp for the time when the task was created. More specifically, it's for
        /// 			the time when the task entered the PENDING state.
        public let createdAt: Date?
        /// The desired status of the task. For more information, see Task
        /// 			Lifecycle.
        public let desiredStatus: String?
        /// Determines whether execute command functionality is turned on for this task. If
        /// 				true, execute command functionality is turned on all the containers in
        /// 			the task.
        public let enableExecuteCommand: Bool?
        /// The ephemeral storage settings for the task.
        public let ephemeralStorage: EphemeralStorage?
        /// The Unix timestamp for the time when the task execution stopped.
        public let executionStoppedAt: Date?
        /// The name of the task group that's associated with the task.
        public let group: String?
        /// The health status for the task. It's determined by the health of the essential
        /// 			containers in the task. If all essential containers in the task are reporting as
        /// 				HEALTHY, the task status also reports as HEALTHY. If any
        /// 			essential containers in the task are reporting as UNHEALTHY or
        /// 				UNKNOWN, the task status also reports as UNHEALTHY or
        /// 				UNKNOWN.  The Amazon ECS container agent doesn't monitor or report on Docker health checks that
        /// 				are embedded in a container image and not specified in the container definition. For
        /// 				example, this includes those specified in a parent image or from the image's
        /// 				Dockerfile. Health check parameters that are specified in a container definition
        /// 				override any Docker health checks that are found in the container image.
        public let healthStatus: HealthStatus?
        /// The Elastic Inference accelerator that's associated with the task.
        public let inferenceAccelerators: [InferenceAccelerator]?
        /// The last known status for the task. For more information, see Task
        /// 				Lifecycle.
        public let lastStatus: String?
        /// The infrastructure where your task runs on. For more information, see Amazon ECS
        /// 				launch types in the Amazon Elastic Container Service Developer Guide.
        public let launchType: LaunchType?
        /// The amount of memory (in MiB) that the task uses as expressed in a task definition. It
        /// 			can be expressed as an integer using MiB (for example, 1024). If it's
        /// 			expressed as a string using GB (for example, 1GB or 1 GB),
        /// 			it's converted to an integer indicating the MiB when the task definition is
        /// 			registered. If you use the EC2 launch type, this field is optional. If you use the Fargate launch type, this field is required. You must use
        /// 			one of the following values. The value that you choose determines the range of supported
        /// 			values for the cpu parameter.   512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)   1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)   2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)   Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)   Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)   Between 16 GB and 60 GB in 4 GB increments - Available cpu values: 8192 (8 vCPU) This option requires Linux platform 1.4.0 or later.   Between 32GB and 120 GB in 8 GB increments - Available cpu values: 16384 (16 vCPU) This option requires Linux platform 1.4.0 or later.
        public let memory: String?
        /// One or more container overrides.
        public let overrides: TaskOverride?
        /// The operating system that your tasks are running on. A platform family is specified
        /// 			only for tasks that use the Fargate launch type.  All tasks that run as part of this service must use the same
        /// 				platformFamily value as the service (for example,
        /// 			LINUX.).
        public let platformFamily: String?
        /// The platform version where your task runs on. A platform version is only specified for
        /// 			tasks that use the Fargate launch type. If you didn't specify one, the
        /// 				LATEST platform version is used. For more information, see Fargate Platform Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// The Unix timestamp for the time when the container image pull began.
        public let pullStartedAt: Date?
        /// The Unix timestamp for the time when the container image pull completed.
        public let pullStoppedAt: Date?
        /// The Unix timestamp for the time when the task started. More specifically, it's for the
        /// 			time when the task transitioned from the PENDING state to the
        /// 				RUNNING state.
        public let startedAt: Date?
        /// The tag specified when a task is started. If an Amazon ECS service started the task, the
        /// 				startedBy parameter contains the deployment ID of that service.
        public let startedBy: String?
        /// The stop code indicating why a task was stopped. The stoppedReason might
        /// 			contain additional details.  For more information about stop code, see Stopped tasks
        /// 				error codes in the Amazon ECS Developer Guide.
        public let stopCode: TaskStopCode?
        /// The Unix timestamp for the time when the task was stopped. More specifically, it's for
        /// 			the time when the task transitioned from the RUNNING state to the
        /// 				STOPPED state.
        public let stoppedAt: Date?
        /// The reason that the task was stopped.
        public let stoppedReason: String?
        /// The Unix timestamp for the time when the task stops. More specifically, it's for the
        /// 			time when the task transitions from the RUNNING state to
        /// 				STOPPING.
        public let stoppingAt: Date?
        /// The metadata that you apply to the task to help you categorize and organize the task.
        /// 			Each tag consists of a key and an optional value. You define both the key and
        /// 			value. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the task.
        public let taskArn: String?
        /// The ARN of the task definition that creates the task.
        public let taskDefinitionArn: String?
        /// The version counter for the task. Every time a task experiences a change that starts a
        /// 			CloudWatch event, the version counter is incremented. If you replicate your Amazon ECS task state
        /// 			with CloudWatch Events, you can compare the version of a task reported by the Amazon ECS API
        /// 			actions with the version reported in CloudWatch Events for the task (inside the
        /// 				detail object) to verify that the version in your event stream is
        /// 			current.
        public let version: Int64?

        public init(attachments: [Attachment]? = nil, attributes: [Attribute]? = nil, availabilityZone: String? = nil, capacityProviderName: String? = nil, clusterArn: String? = nil, connectivity: Connectivity? = nil, connectivityAt: Date? = nil, containerInstanceArn: String? = nil, containers: [Container]? = nil, cpu: String? = nil, createdAt: Date? = nil, desiredStatus: String? = nil, enableExecuteCommand: Bool? = nil, ephemeralStorage: EphemeralStorage? = nil, executionStoppedAt: Date? = nil, group: String? = nil, healthStatus: HealthStatus? = nil, inferenceAccelerators: [InferenceAccelerator]? = nil, lastStatus: String? = nil, launchType: LaunchType? = nil, memory: String? = nil, overrides: TaskOverride? = nil, platformFamily: String? = nil, platformVersion: String? = nil, pullStartedAt: Date? = nil, pullStoppedAt: Date? = nil, startedAt: Date? = nil, startedBy: String? = nil, stopCode: TaskStopCode? = nil, stoppedAt: Date? = nil, stoppedReason: String? = nil, stoppingAt: Date? = nil, tags: [Tag]? = nil, taskArn: String? = nil, taskDefinitionArn: String? = nil, version: Int64? = nil) {
            self.attachments = attachments
            self.attributes = attributes
            self.availabilityZone = availabilityZone
            self.capacityProviderName = capacityProviderName
            self.clusterArn = clusterArn
            self.connectivity = connectivity
            self.connectivityAt = connectivityAt
            self.containerInstanceArn = containerInstanceArn
            self.containers = containers
            self.cpu = cpu
            self.createdAt = createdAt
            self.desiredStatus = desiredStatus
            self.enableExecuteCommand = enableExecuteCommand
            self.ephemeralStorage = ephemeralStorage
            self.executionStoppedAt = executionStoppedAt
            self.group = group
            self.healthStatus = healthStatus
            self.inferenceAccelerators = inferenceAccelerators
            self.lastStatus = lastStatus
            self.launchType = launchType
            self.memory = memory
            self.overrides = overrides
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.pullStartedAt = pullStartedAt
            self.pullStoppedAt = pullStoppedAt
            self.startedAt = startedAt
            self.startedBy = startedBy
            self.stopCode = stopCode
            self.stoppedAt = stoppedAt
            self.stoppedReason = stoppedReason
            self.stoppingAt = stoppingAt
            self.tags = tags
            self.taskArn = taskArn
            self.taskDefinitionArn = taskDefinitionArn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachments"
            case attributes = "attributes"
            case availabilityZone = "availabilityZone"
            case capacityProviderName = "capacityProviderName"
            case clusterArn = "clusterArn"
            case connectivity = "connectivity"
            case connectivityAt = "connectivityAt"
            case containerInstanceArn = "containerInstanceArn"
            case containers = "containers"
            case cpu = "cpu"
            case createdAt = "createdAt"
            case desiredStatus = "desiredStatus"
            case enableExecuteCommand = "enableExecuteCommand"
            case ephemeralStorage = "ephemeralStorage"
            case executionStoppedAt = "executionStoppedAt"
            case group = "group"
            case healthStatus = "healthStatus"
            case inferenceAccelerators = "inferenceAccelerators"
            case lastStatus = "lastStatus"
            case launchType = "launchType"
            case memory = "memory"
            case overrides = "overrides"
            case platformFamily = "platformFamily"
            case platformVersion = "platformVersion"
            case pullStartedAt = "pullStartedAt"
            case pullStoppedAt = "pullStoppedAt"
            case startedAt = "startedAt"
            case startedBy = "startedBy"
            case stopCode = "stopCode"
            case stoppedAt = "stoppedAt"
            case stoppedReason = "stoppedReason"
            case stoppingAt = "stoppingAt"
            case tags = "tags"
            case taskArn = "taskArn"
            case taskDefinitionArn = "taskDefinitionArn"
            case version = "version"
        }
    }

    public struct TaskDefinition: AWSDecodableShape {
        /// The task launch types the task definition validated against during task definition
        /// 			registration. For more information, see Amazon ECS launch types
        /// 			in the Amazon Elastic Container Service Developer Guide.
        public let compatibilities: [Compatibility]?
        /// A list of container definitions in JSON format that describe the different containers
        /// 			that make up your task. For more information about container definition parameters and
        /// 			defaults, see Amazon ECS Task
        /// 				Definitions in the Amazon Elastic Container Service Developer Guide.
        public let containerDefinitions: [ContainerDefinition]?
        /// The number of cpu units used by the task. If you use the EC2 launch type,
        /// 			this field is optional. Any value can be used. If you use the Fargate launch type, this
        /// 			field is required. You must use one of the following values. The value that you choose
        /// 			determines your range of valid values for the memory parameter. The CPU units cannot be less than 1 vCPU when you use Windows containers on
        /// 			Fargate.   256 (.25 vCPU) - Available memory values: 512 (0.5 GB), 1024 (1 GB), 2048 (2 GB)   512 (.5 vCPU) - Available memory values: 1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB)   1024 (1 vCPU) - Available memory values: 2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB)   2048 (2 vCPU) - Available memory values: 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB)   4096 (4 vCPU) - Available memory values: 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB)   8192 (8 vCPU)  - Available memory values: 16 GB and 60 GB in 4 GB increments This option requires Linux platform 1.4.0 or later.   16384 (16vCPU)  - Available memory values: 32GB and 120 GB in 8 GB increments This option requires Linux platform 1.4.0 or later.
        public let cpu: String?
        /// The Unix timestamp for the time when the task definition was deregistered.
        public let deregisteredAt: Date?
        /// The ephemeral storage settings to use for tasks run with the task definition.
        public let ephemeralStorage: EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the task execution role that grants the Amazon ECS container agent permission to make Amazon Web Services API calls on your behalf. The task execution IAM role is required depending on the requirements of your task. For more information, see Amazon ECS task execution IAM role in the Amazon Elastic Container Service Developer Guide.
        public let executionRoleArn: String?
        /// The name of a family that this task definition is registered to. Up to 255 characters
        /// 			are allowed. Letters (both uppercase and lowercase letters), numbers, hyphens (-), and
        /// 			underscores (_) are allowed. A family groups multiple versions of a task definition. Amazon ECS gives the first task
        /// 			definition that you registered to a family a revision number of 1. Amazon ECS gives
        /// 			sequential revision numbers to each task definition that you add.
        public let family: String?
        /// The Elastic Inference accelerator that's associated with the task.
        public let inferenceAccelerators: [InferenceAccelerator]?
        /// The IPC resource namespace to use for the containers in the task. The valid values are host, task, or none. If host is specified, then all containers within the tasks that specified the host IPC mode on the same container instance share the same IPC resources with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same IPC resources. If none is specified, then IPC resources within the containers of a task are private and not shared with other containers in a task or on the container instance. If no value is specified, then the IPC resource namespace sharing depends on the Docker daemon setting on the container instance. For more information, see IPC settings in the Docker run reference. If the host IPC mode is used, be aware that there is a heightened risk of undesired IPC namespace expose. For more information, see Docker security. If you are setting namespaced kernel parameters using systemControls for the containers in the task, the following will apply to your IPC resource namespace. For more information, see System Controls in the Amazon Elastic Container Service Developer Guide.   For tasks that use the host IPC mode, IPC namespace related systemControls are not supported.   For tasks that use the task IPC mode, IPC namespace related systemControls will apply to all containers within a task.    This parameter is not supported for Windows containers or tasks run on Fargate.
        public let ipcMode: IpcMode?
        /// The amount (in MiB) of memory used by the task. If your tasks runs on Amazon EC2 instances, you must specify either a task-level memory
        /// 			value or a container-level memory value. This field is optional and any value can be
        /// 			used. If a task-level memory value is specified, the container-level memory value is
        /// 			optional. For more information regarding container-level memory and memory reservation,
        /// 			see ContainerDefinition. If your tasks runs on Fargate, this field is required. You must use one of the
        /// 			following values. The value you choose determines your range of valid values for the
        /// 				cpu parameter.   512 (0.5 GB), 1024 (1 GB), 2048 (2 GB) - Available cpu values: 256 (.25 vCPU)   1024 (1 GB), 2048 (2 GB), 3072 (3 GB), 4096 (4 GB) - Available cpu values: 512 (.5 vCPU)   2048 (2 GB), 3072 (3 GB), 4096 (4 GB), 5120 (5 GB), 6144 (6 GB), 7168 (7 GB), 8192 (8 GB) - Available cpu values: 1024 (1 vCPU)   Between 4096 (4 GB) and 16384 (16 GB) in increments of 1024 (1 GB) - Available cpu values: 2048 (2 vCPU)   Between 8192 (8 GB) and 30720 (30 GB) in increments of 1024 (1 GB) - Available cpu values: 4096 (4 vCPU)   Between 16 GB and 60 GB in 4 GB increments - Available cpu values: 8192 (8 vCPU) This option requires Linux platform 1.4.0 or later.   Between 32GB and 120 GB in 8 GB increments - Available cpu values: 16384 (16 vCPU) This option requires Linux platform 1.4.0 or later.
        public let memory: String?
        /// The Docker networking mode to use for the containers in the task. The valid values are none, bridge, awsvpc, and host. If no network mode is specified, the default is bridge. For Amazon ECS tasks on Fargate, the awsvpc network mode is required.  For Amazon ECS tasks on Amazon EC2 Linux instances, any network mode can be used.  For Amazon ECS tasks on Amazon EC2 Windows instances,  or awsvpc can be used. If the network mode is set to none, you cannot specify port mappings in your container definitions, and the tasks containers do not have external connectivity. The host and awsvpc network modes offer the highest networking performance for containers because they use the EC2 network stack instead of the virtualized network stack provided by the bridge mode. With the host and awsvpc network modes, exposed container ports are mapped directly to the corresponding host port (for the host network mode) or the attached elastic network interface port (for the awsvpc network mode), so you cannot take advantage of dynamic host port mappings.   When using the host network mode, you should not run containers using the root user (UID 0). It is considered best practice to use a non-root user.  If the network mode is awsvpc, the task is allocated an elastic network interface, and you must specify a NetworkConfiguration value when you create a service or run a task with the task definition. For more information, see Task Networking in the Amazon Elastic Container Service Developer Guide. If the network mode is host, you cannot run multiple instantiations of the same task on a single container instance when port mappings are used. For more information, see Network settings in the Docker run reference.
        public let networkMode: NetworkMode?
        /// The process namespace to use for the containers in the task. The valid values are host or task. On Fargate for Linux containers, the only valid value is task. For example, monitoring sidecars might need pidMode to access information about other containers running in the same task. If host is specified, all containers within the tasks that specified the host PID mode on the same container instance share the same process namespace with the host Amazon EC2 instance. If task is specified, all containers within the specified task share the same process namespace. If no value is specified, the default is a private namespace for each container. For more information, see PID settings in the Docker run reference. If the host PID mode is used, there's a heightened risk of undesired process namespace exposure. For more information, see Docker security.  This parameter is not supported for Windows containers.   This parameter is only supported for tasks that are hosted on Fargate if the tasks are using platform version 1.4.0 or later (Linux). This isn't supported for Windows containers on Fargate.
        public let pidMode: PidMode?
        /// An array of placement constraint objects to use for tasks.  This parameter isn't supported for tasks run on Fargate.
        public let placementConstraints: [TaskDefinitionPlacementConstraint]?
        /// The configuration details for the App Mesh proxy. Your Amazon ECS container instances require at least version 1.26.0 of the container agent
        /// 			and at least version 1.26.0-1 of the ecs-init package to use a proxy
        /// 			configuration. If your container instances are launched from the Amazon ECS optimized AMI
        /// 			version 20190301 or later, they contain the required versions of the
        /// 			container agent and ecs-init. For more information, see Amazon ECS-optimized Linux AMI in the Amazon Elastic Container Service Developer Guide.
        public let proxyConfiguration: ProxyConfiguration?
        /// The Unix timestamp for the time when the task definition was registered.
        public let registeredAt: Date?
        /// The principal that registered the task definition.
        public let registeredBy: String?
        /// The container instance attributes required by your task. When an Amazon EC2 instance is
        /// 			registered to your cluster, the Amazon ECS container agent assigns some standard attributes
        /// 			to the instance. You can apply custom attributes. These are specified as key-value pairs
        /// 			using the Amazon ECS console or the PutAttributes API. These attributes are
        /// 			used when determining task placement for tasks hosted on Amazon EC2 instances. For more
        /// 			information, see Attributes in the Amazon Elastic Container Service Developer Guide.  This parameter isn't supported for tasks run on Fargate.
        public let requiresAttributes: [Attribute]?
        /// The task launch types the task definition was validated against. The valid values are
        /// 				EC2, FARGATE, and EXTERNAL. For more
        /// 			information, see Amazon ECS launch types
        /// 			in the Amazon Elastic Container Service Developer Guide.
        public let requiresCompatibilities: [Compatibility]?
        /// The revision of the task in a particular family. The revision is a version number of a
        /// 			task definition in a family. When you register a task definition for the first time, the
        /// 			revision is 1. Each time that you register a new revision of a task
        /// 			definition in the same family, the revision value always increases by one. This is even
        /// 			if you deregistered previous revisions in this family.
        public let revision: Int?
        /// The operating system that your task definitions are running on. A platform family is
        /// 			specified only for tasks using the Fargate launch type.  When you specify a task in a service, this value must match the
        /// 				runtimePlatform value of the service.
        public let runtimePlatform: RuntimePlatform?
        /// The status of the task definition.
        public let status: TaskDefinitionStatus?
        /// The full Amazon Resource Name (ARN) of the task definition.
        public let taskDefinitionArn: String?
        /// The short name or full Amazon Resource Name (ARN) of the Identity and Access Management role that grants containers in the
        /// 			task permission to call Amazon Web Services APIs on your behalf. For more information, see Amazon ECS
        /// 				Task Role in the Amazon Elastic Container Service Developer Guide. IAM roles for tasks on Windows require that the -EnableTaskIAMRole
        /// 			option is set when you launch the Amazon ECS-optimized Windows AMI. Your containers must also run some
        /// 			configuration code to use the feature. For more information, see Windows IAM roles
        /// 				for tasks in the Amazon Elastic Container Service Developer Guide.
        public let taskRoleArn: String?
        /// The list of data volume definitions for the task. For more information, see Using data volumes in tasks in the Amazon Elastic Container Service Developer Guide.  The host and sourcePath parameters aren't supported for
        /// 				tasks run on Fargate.
        public let volumes: [Volume]?

        public init(compatibilities: [Compatibility]? = nil, containerDefinitions: [ContainerDefinition]? = nil, cpu: String? = nil, deregisteredAt: Date? = nil, ephemeralStorage: EphemeralStorage? = nil, executionRoleArn: String? = nil, family: String? = nil, inferenceAccelerators: [InferenceAccelerator]? = nil, ipcMode: IpcMode? = nil, memory: String? = nil, networkMode: NetworkMode? = nil, pidMode: PidMode? = nil, placementConstraints: [TaskDefinitionPlacementConstraint]? = nil, proxyConfiguration: ProxyConfiguration? = nil, registeredAt: Date? = nil, registeredBy: String? = nil, requiresAttributes: [Attribute]? = nil, requiresCompatibilities: [Compatibility]? = nil, revision: Int? = nil, runtimePlatform: RuntimePlatform? = nil, status: TaskDefinitionStatus? = nil, taskDefinitionArn: String? = nil, taskRoleArn: String? = nil, volumes: [Volume]? = nil) {
            self.compatibilities = compatibilities
            self.containerDefinitions = containerDefinitions
            self.cpu = cpu
            self.deregisteredAt = deregisteredAt
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.family = family
            self.inferenceAccelerators = inferenceAccelerators
            self.ipcMode = ipcMode
            self.memory = memory
            self.networkMode = networkMode
            self.pidMode = pidMode
            self.placementConstraints = placementConstraints
            self.proxyConfiguration = proxyConfiguration
            self.registeredAt = registeredAt
            self.registeredBy = registeredBy
            self.requiresAttributes = requiresAttributes
            self.requiresCompatibilities = requiresCompatibilities
            self.revision = revision
            self.runtimePlatform = runtimePlatform
            self.status = status
            self.taskDefinitionArn = taskDefinitionArn
            self.taskRoleArn = taskRoleArn
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case compatibilities = "compatibilities"
            case containerDefinitions = "containerDefinitions"
            case cpu = "cpu"
            case deregisteredAt = "deregisteredAt"
            case ephemeralStorage = "ephemeralStorage"
            case executionRoleArn = "executionRoleArn"
            case family = "family"
            case inferenceAccelerators = "inferenceAccelerators"
            case ipcMode = "ipcMode"
            case memory = "memory"
            case networkMode = "networkMode"
            case pidMode = "pidMode"
            case placementConstraints = "placementConstraints"
            case proxyConfiguration = "proxyConfiguration"
            case registeredAt = "registeredAt"
            case registeredBy = "registeredBy"
            case requiresAttributes = "requiresAttributes"
            case requiresCompatibilities = "requiresCompatibilities"
            case revision = "revision"
            case runtimePlatform = "runtimePlatform"
            case status = "status"
            case taskDefinitionArn = "taskDefinitionArn"
            case taskRoleArn = "taskRoleArn"
            case volumes = "volumes"
        }
    }

    public struct TaskDefinitionPlacementConstraint: AWSEncodableShape & AWSDecodableShape {
        /// A cluster query language expression to apply to the constraint. For more information,
        /// 			see Cluster query language in the Amazon Elastic Container Service Developer Guide.
        public let expression: String?
        /// The type of constraint. The MemberOf constraint restricts selection to be
        /// 			from a group of valid candidates.
        public let type: TaskDefinitionPlacementConstraintType?

        public init(expression: String? = nil, type: TaskDefinitionPlacementConstraintType? = nil) {
            self.expression = expression
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case expression = "expression"
            case type = "type"
        }
    }

    public struct TaskManagedEBSVolumeConfiguration: AWSEncodableShape {
        /// Indicates whether the volume should be encrypted. If no value is specified, encryption
        /// 			is turned on by default. This parameter maps 1:1 with the Encrypted
        /// 			parameter of the CreateVolume API in
        /// 			the Amazon EC2 API Reference.
        public let encrypted: Bool?
        /// The Linux filesystem type for the volume. For volumes created from a snapshot, you
        /// 			must specify the same filesystem type that the volume was using when the snapshot was
        /// 			created. If there is a filesystem type mismatch, the task will fail to start. The available filesystem types are  ext3, ext4, and
        /// 				xfs. If no value is specified, the xfs filesystem type is
        /// 			used by default.
        public let filesystemType: TaskFilesystemType?
        /// The number of I/O operations per second (IOPS). For gp3,
        /// 			io1, and io2 volumes, this represents the number of IOPS that
        /// 			are provisioned for the volume. For gp2 volumes, this represents the
        /// 			baseline performance of the volume and the rate at which the volume accumulates I/O
        /// 			credits for bursting. The following are the supported values for each volume type.    gp3: 3,000 - 16,000 IOPS    io1: 100 - 64,000 IOPS    io2: 100 - 256,000 IOPS   This parameter is required for io1 and io2 volume types. The
        /// 			default for gp3 volumes is 3,000 IOPS. This parameter is not
        /// 			supported for st1, sc1, or standard volume
        /// 			types. This parameter maps 1:1 with the Iops parameter of the CreateVolume API in the Amazon EC2 API Reference.
        public let iops: Int?
        /// The Amazon Resource Name (ARN) identifier of the Amazon Web Services Key Management Service key to use for Amazon EBS encryption. When
        /// 			encryption is turned on and no Amazon Web Services Key Management Service key is specified, the default Amazon Web Services managed key
        /// 			for Amazon EBS volumes is used. This parameter maps 1:1 with the KmsKeyId
        /// 			parameter of the CreateVolume API in
        /// 			the Amazon EC2 API Reference.  Amazon Web Services authenticates the Amazon Web Services Key Management Service key asynchronously. Therefore, if you specify an
        /// 				ID, alias, or ARN that is invalid, the action can appear to complete, but
        /// 				eventually fails.
        public let kmsKeyId: String?
        /// The ARN of the IAM role to associate with this volume. This is the Amazon ECS
        /// 			infrastructure IAM role that is used to manage your Amazon Web Services infrastructure. We recommend
        /// 			using the Amazon ECS-managed AmazonECSInfrastructureRolePolicyForVolumes IAM
        /// 			policy with this role. For more information, see Amazon ECS
        /// 				infrastructure IAM role in the Amazon ECS Developer
        /// 			Guide.
        public let roleArn: String
        /// The size of the volume in GiB. You must specify either a volume size or a snapshot ID.
        /// 			If you specify a snapshot ID, the snapshot size is used for the volume size by default.
        /// 			You can optionally specify a volume size greater than or equal to the snapshot size.
        /// 			This parameter maps 1:1 with the Size parameter of the CreateVolume API in the Amazon EC2 API Reference. The following are the supported volume size values for each volume type.    gp2 and gp3: 1-16,384    io1 and io2: 4-16,384    st1 and sc1: 125-16,384    standard: 1-1,024
        public let sizeInGiB: Int?
        /// The snapshot that Amazon ECS uses to create the volume. You must specify either a snapshot
        /// 			ID or a volume size. This parameter maps 1:1 with the SnapshotId parameter
        /// 			of the CreateVolume API in
        /// 			the Amazon EC2 API Reference.
        public let snapshotId: String?
        /// The tags to apply to the volume. Amazon ECS applies service-managed tags by default. This
        /// 			parameter maps 1:1 with the TagSpecifications.N parameter of the CreateVolume API in the Amazon EC2 API Reference.
        public let tagSpecifications: [EBSTagSpecification]?
        /// The termination policy for the volume when the task exits. This provides a way to
        /// 			control whether Amazon ECS terminates the Amazon EBS volume when the task stops.
        public let terminationPolicy: TaskManagedEBSVolumeTerminationPolicy?
        /// The throughput to provision for a volume, in MiB/s, with a maximum of 1,000 MiB/s.
        /// 			This parameter maps 1:1 with the Throughput parameter of the CreateVolume API in the Amazon EC2 API Reference.  This parameter is only supported for the gp3 volume type.
        public let throughput: Int?
        /// The volume type. This parameter maps 1:1 with the VolumeType parameter of
        /// 			the CreateVolume API in the Amazon EC2 API Reference. For more
        /// 			information, see Amazon EBS volume types in
        /// 			the Amazon EC2 User Guide. The following are the supported volume types.   General Purpose SSD: gp2|gp3    Provisioned IOPS SSD: io1|io2    Throughput Optimized HDD: st1    Cold HDD: sc1    Magnetic: standard   The magnetic volume type is not supported on Fargate.
        public let volumeType: String?

        public init(encrypted: Bool? = nil, filesystemType: TaskFilesystemType? = nil, iops: Int? = nil, kmsKeyId: String? = nil, roleArn: String, sizeInGiB: Int? = nil, snapshotId: String? = nil, tagSpecifications: [EBSTagSpecification]? = nil, terminationPolicy: TaskManagedEBSVolumeTerminationPolicy? = nil, throughput: Int? = nil, volumeType: String? = nil) {
            self.encrypted = encrypted
            self.filesystemType = filesystemType
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.roleArn = roleArn
            self.sizeInGiB = sizeInGiB
            self.snapshotId = snapshotId
            self.tagSpecifications = tagSpecifications
            self.terminationPolicy = terminationPolicy
            self.throughput = throughput
            self.volumeType = volumeType
        }

        public func validate(name: String) throws {
            try self.tagSpecifications?.forEach {
                try $0.validate(name: "\(name).tagSpecifications[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case encrypted = "encrypted"
            case filesystemType = "filesystemType"
            case iops = "iops"
            case kmsKeyId = "kmsKeyId"
            case roleArn = "roleArn"
            case sizeInGiB = "sizeInGiB"
            case snapshotId = "snapshotId"
            case tagSpecifications = "tagSpecifications"
            case terminationPolicy = "terminationPolicy"
            case throughput = "throughput"
            case volumeType = "volumeType"
        }
    }

    public struct TaskManagedEBSVolumeTerminationPolicy: AWSEncodableShape {
        /// Indicates whether the volume should be deleted on when the task stops. If a value of
        /// 				true is specified,  Amazon ECS deletes the Amazon EBS volume on your behalf when
        /// 			the task goes into the STOPPED state. If no value is specified, the
        /// 			 default value is true is used. When set to false, Amazon ECS
        /// 			leaves the volume in your  account.
        public let deleteOnTermination: Bool

        public init(deleteOnTermination: Bool) {
            self.deleteOnTermination = deleteOnTermination
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "deleteOnTermination"
        }
    }

    public struct TaskOverride: AWSEncodableShape & AWSDecodableShape {
        /// One or more container overrides that are sent to a task.
        public let containerOverrides: [ContainerOverride]?
        /// The CPU override for the task.
        public let cpu: String?
        /// The ephemeral storage setting override for the task.  This parameter is only supported for tasks hosted on Fargate that
        /// 				use the following platform versions:   Linux platform version 1.4.0 or later.   Windows platform version 1.0.0 or later.
        public let ephemeralStorage: EphemeralStorage?
        /// The Amazon Resource Name (ARN) of the task execution role override for the task. For more information,
        /// 			see Amazon ECS task
        /// 				execution IAM role in the Amazon Elastic Container Service Developer Guide.
        public let executionRoleArn: String?
        /// The Elastic Inference accelerator override for the task.
        public let inferenceAcceleratorOverrides: [InferenceAcceleratorOverride]?
        /// The memory override for the task.
        public let memory: String?
        /// The Amazon Resource Name (ARN) of the role that containers in this task can assume. All containers in
        /// 			this task are granted the permissions that are specified in this role. For more
        /// 			information, see IAM Role for Tasks
        /// 			in the Amazon Elastic Container Service Developer Guide.
        public let taskRoleArn: String?

        public init(containerOverrides: [ContainerOverride]? = nil, cpu: String? = nil, ephemeralStorage: EphemeralStorage? = nil, executionRoleArn: String? = nil, inferenceAcceleratorOverrides: [InferenceAcceleratorOverride]? = nil, memory: String? = nil, taskRoleArn: String? = nil) {
            self.containerOverrides = containerOverrides
            self.cpu = cpu
            self.ephemeralStorage = ephemeralStorage
            self.executionRoleArn = executionRoleArn
            self.inferenceAcceleratorOverrides = inferenceAcceleratorOverrides
            self.memory = memory
            self.taskRoleArn = taskRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case containerOverrides = "containerOverrides"
            case cpu = "cpu"
            case ephemeralStorage = "ephemeralStorage"
            case executionRoleArn = "executionRoleArn"
            case inferenceAcceleratorOverrides = "inferenceAcceleratorOverrides"
            case memory = "memory"
            case taskRoleArn = "taskRoleArn"
        }
    }

    public struct TaskSet: AWSDecodableShape {
        /// The capacity provider strategy that are associated with the task set.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The Amazon Resource Name (ARN) of the cluster that the service that hosts the task set exists
        /// 			in.
        public let clusterArn: String?
        /// The computed desired count for the task set. This is calculated by multiplying the
        /// 			service's desiredCount by the task set's scale percentage. The
        /// 			result is always rounded up. For example, if the computed desired count is 1.2, it
        /// 			rounds up to 2 tasks.
        public let computedDesiredCount: Int?
        /// The Unix timestamp for the time when the task set was created.
        public let createdAt: Date?
        /// The external ID associated with the task set. If an CodeDeploy deployment created a task set, the externalId parameter
        /// 			contains the CodeDeploy deployment ID. If a task set is created for an external deployment and is associated with a service
        /// 			discovery registry, the externalId parameter contains the
        /// 				ECS_TASK_SET_EXTERNAL_ID Cloud Map attribute.
        public let externalId: String?
        /// The ID of the task set.
        public let id: String?
        /// The launch type the tasks in the task set are using. For more information, see Amazon ECS
        /// 				launch types in the Amazon Elastic Container Service Developer Guide.
        public let launchType: LaunchType?
        /// Details on a load balancer that are used with a task set.
        public let loadBalancers: [LoadBalancer]?
        /// The network configuration for the task set.
        public let networkConfiguration: NetworkConfiguration?
        /// The number of tasks in the task set that are in the PENDING status during
        /// 			a deployment. A task in the PENDING state is preparing to enter the
        /// 				RUNNING state. A task set enters the PENDING status when
        /// 			it launches for the first time or when it's restarted after being in the
        /// 				STOPPED state.
        public let pendingCount: Int?
        /// The operating system that your tasks in the set are running on. A platform family is
        /// 			specified only for tasks that use the Fargate launch type.  All tasks in the set must have the same value.
        public let platformFamily: String?
        /// The Fargate platform version where the tasks in the task set are running. A platform
        /// 			version is only specified for tasks run on Fargate. For more information, see Fargate platform versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// The number of tasks in the task set that are in the RUNNING status during
        /// 			a deployment. A task in the RUNNING state is running and ready for
        /// 			use.
        public let runningCount: Int?
        /// A floating-point percentage of your desired number of tasks to place and keep running
        /// 			in the task set.
        public let scale: Scale?
        /// The Amazon Resource Name (ARN) of the service the task set exists in.
        public let serviceArn: String?
        /// The details for the service discovery registries to assign to this task set. For more
        /// 			information, see Service
        /// 				discovery.
        public let serviceRegistries: [ServiceRegistry]?
        /// The stability status. This indicates whether the task set has reached a steady state.
        /// 			If the following conditions are met, the task set are in
        /// 			STEADY_STATE:   The task runningCount is equal to the
        /// 						computedDesiredCount.   The pendingCount is 0.   There are no tasks that are running on container instances in the
        /// 						DRAINING status.   All tasks are reporting a healthy status from the load balancers, service
        /// 					discovery, and container health checks.   If any of those conditions aren't met, the stability status returns
        /// 				STABILIZING.
        public let stabilityStatus: StabilityStatus?
        /// The Unix timestamp for the time when the task set stability status was
        /// 			retrieved.
        public let stabilityStatusAt: Date?
        /// The tag specified when a task set is started. If an CodeDeploy deployment created the task
        /// 			set, the startedBy parameter is CODE_DEPLOY. If an external
        /// 			deployment created the task set, the startedBy field isn't used.
        public let startedBy: String?
        /// The status of the task set. The following describes each state.  PRIMARY  The task set is serving production traffic.  ACTIVE  The task set isn't serving production traffic.  DRAINING  The tasks in the task set are being stopped, and their corresponding
        /// 						targets are being deregistered from their target group.
        public let status: String?
        /// The metadata that you apply to the task set to help you categorize and organize them.
        /// 			Each tag consists of a key and an optional value. You define both. The following basic restrictions apply to tags:   Maximum number of tags per resource - 50   For each resource, each tag key must be unique, and each tag key can have only one value.   Maximum key length - 128 Unicode characters in UTF-8   Maximum value length - 256 Unicode characters in UTF-8   If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.   Tag keys and values are case-sensitive.   Do not use aws:, AWS:, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.
        public let tags: [Tag]?
        /// The task definition that the task set is using.
        public let taskDefinition: String?
        /// The Amazon Resource Name (ARN) of the task set.
        public let taskSetArn: String?
        /// The Unix timestamp for the time when the task set was last updated.
        public let updatedAt: Date?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, clusterArn: String? = nil, computedDesiredCount: Int? = nil, createdAt: Date? = nil, externalId: String? = nil, id: String? = nil, launchType: LaunchType? = nil, loadBalancers: [LoadBalancer]? = nil, networkConfiguration: NetworkConfiguration? = nil, pendingCount: Int? = nil, platformFamily: String? = nil, platformVersion: String? = nil, runningCount: Int? = nil, scale: Scale? = nil, serviceArn: String? = nil, serviceRegistries: [ServiceRegistry]? = nil, stabilityStatus: StabilityStatus? = nil, stabilityStatusAt: Date? = nil, startedBy: String? = nil, status: String? = nil, tags: [Tag]? = nil, taskDefinition: String? = nil, taskSetArn: String? = nil, updatedAt: Date? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.clusterArn = clusterArn
            self.computedDesiredCount = computedDesiredCount
            self.createdAt = createdAt
            self.externalId = externalId
            self.id = id
            self.launchType = launchType
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.pendingCount = pendingCount
            self.platformFamily = platformFamily
            self.platformVersion = platformVersion
            self.runningCount = runningCount
            self.scale = scale
            self.serviceArn = serviceArn
            self.serviceRegistries = serviceRegistries
            self.stabilityStatus = stabilityStatus
            self.stabilityStatusAt = stabilityStatusAt
            self.startedBy = startedBy
            self.status = status
            self.tags = tags
            self.taskDefinition = taskDefinition
            self.taskSetArn = taskSetArn
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case clusterArn = "clusterArn"
            case computedDesiredCount = "computedDesiredCount"
            case createdAt = "createdAt"
            case externalId = "externalId"
            case id = "id"
            case launchType = "launchType"
            case loadBalancers = "loadBalancers"
            case networkConfiguration = "networkConfiguration"
            case pendingCount = "pendingCount"
            case platformFamily = "platformFamily"
            case platformVersion = "platformVersion"
            case runningCount = "runningCount"
            case scale = "scale"
            case serviceArn = "serviceArn"
            case serviceRegistries = "serviceRegistries"
            case stabilityStatus = "stabilityStatus"
            case stabilityStatusAt = "stabilityStatusAt"
            case startedBy = "startedBy"
            case status = "status"
            case tags = "tags"
            case taskDefinition = "taskDefinition"
            case taskSetArn = "taskSetArn"
            case updatedAt = "updatedAt"
        }
    }

    public struct TaskVolumeConfiguration: AWSEncodableShape {
        /// The configuration for the Amazon EBS volume that Amazon ECS creates and manages on your behalf.
        /// 			These settings are used to create each Amazon EBS volume, with one volume created for each
        /// 			task. The Amazon EBS volumes are visible in your account in the Amazon EC2 console once they are
        /// 			created.
        public let managedEBSVolume: TaskManagedEBSVolumeConfiguration?
        /// The name of the volume. This value must match the volume name from the
        /// 				Volume object in the task definition.
        public let name: String

        public init(managedEBSVolume: TaskManagedEBSVolumeConfiguration? = nil, name: String) {
            self.managedEBSVolume = managedEBSVolume
            self.name = name
        }

        public func validate(name: String) throws {
            try self.managedEBSVolume?.validate(name: "\(name).managedEBSVolume")
        }

        private enum CodingKeys: String, CodingKey {
            case managedEBSVolume = "managedEBSVolume"
            case name = "name"
        }
    }

    public struct TimeoutConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The amount of time in seconds a connection will stay active while idle. A value of
        /// 				0 can be set to disable idleTimeout. The idleTimeout default for
        /// 				HTTP/HTTP2/GRPC is 5 minutes. The idleTimeout default for TCP is 1 hour.
        public let idleTimeoutSeconds: Int?
        /// The amount of time waiting for the upstream to respond with a complete response per
        /// 			request. A value of 0 can be set to disable perRequestTimeout.
        /// 				perRequestTimeout can only be set if Service Connect
        /// 				appProtocol isn't TCP. Only idleTimeout is
        /// 			allowed for TCP appProtocol.
        public let perRequestTimeoutSeconds: Int?

        public init(idleTimeoutSeconds: Int? = nil, perRequestTimeoutSeconds: Int? = nil) {
            self.idleTimeoutSeconds = idleTimeoutSeconds
            self.perRequestTimeoutSeconds = perRequestTimeoutSeconds
        }

        public func validate(name: String) throws {
            try self.validate(self.idleTimeoutSeconds, name: "idleTimeoutSeconds", parent: name, max: 2147483647)
            try self.validate(self.idleTimeoutSeconds, name: "idleTimeoutSeconds", parent: name, min: 0)
            try self.validate(self.perRequestTimeoutSeconds, name: "perRequestTimeoutSeconds", parent: name, max: 2147483647)
            try self.validate(self.perRequestTimeoutSeconds, name: "perRequestTimeoutSeconds", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case idleTimeoutSeconds = "idleTimeoutSeconds"
            case perRequestTimeoutSeconds = "perRequestTimeoutSeconds"
        }
    }

    public struct Tmpfs: AWSEncodableShape & AWSDecodableShape {
        /// The absolute file path where the tmpfs volume is to be mounted.
        public let containerPath: String
        /// The list of tmpfs volume mount options. Valid values: "defaults" | "ro" | "rw" | "suid" | "nosuid" | "dev" | "nodev" |
        /// 				"exec" | "noexec" | "sync" | "async" | "dirsync" | "remount" | "mand" | "nomand" |
        /// 				"atime" | "noatime" | "diratime" | "nodiratime" | "bind" | "rbind" | "unbindable" |
        /// 				"runbindable" | "private" | "rprivate" | "shared" | "rshared" | "slave" | "rslave" |
        /// 				"relatime" | "norelatime" | "strictatime" | "nostrictatime" | "mode" | "uid" | "gid"
        /// 				| "nr_inodes" | "nr_blocks" | "mpol"
        public let mountOptions: [String]?
        /// The maximum size (in MiB) of the tmpfs volume.
        public let size: Int

        public init(containerPath: String, mountOptions: [String]? = nil, size: Int) {
            self.containerPath = containerPath
            self.mountOptions = mountOptions
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case containerPath = "containerPath"
            case mountOptions = "mountOptions"
            case size = "size"
        }
    }

    public struct Ulimit: AWSEncodableShape & AWSDecodableShape {
        /// The hard limit for the ulimit type.
        public let hardLimit: Int
        /// The type of the ulimit.
        public let name: UlimitName
        /// The soft limit for the ulimit type.
        public let softLimit: Int

        public init(hardLimit: Int, name: UlimitName, softLimit: Int) {
            self.hardLimit = hardLimit
            self.name = name
            self.softLimit = softLimit
        }

        private enum CodingKeys: String, CodingKey {
            case hardLimit = "hardLimit"
            case name = "name"
            case softLimit = "softLimit"
        }
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource to delete tags from. Currently, the supported resources
        /// 			are Amazon ECS capacity providers, tasks, services, task definitions, clusters, and container
        /// 			instances.
        public let resourceArn: String
        /// The keys of the tags to be removed.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func validate(name: String) throws {
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, max: 128)
                try validate($0, name: "tagKeys[]", parent: name, min: 1)
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateCapacityProviderRequest: AWSEncodableShape {
        /// An object that represent the parameters to update for the Auto Scaling group capacity
        /// 			provider.
        public let autoScalingGroupProvider: AutoScalingGroupProviderUpdate
        /// The name of the capacity provider to update.
        public let name: String

        public init(autoScalingGroupProvider: AutoScalingGroupProviderUpdate, name: String) {
            self.autoScalingGroupProvider = autoScalingGroupProvider
            self.name = name
        }

        public func validate(name: String) throws {
            try self.autoScalingGroupProvider.validate(name: "\(name).autoScalingGroupProvider")
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupProvider = "autoScalingGroupProvider"
            case name = "name"
        }
    }

    public struct UpdateCapacityProviderResponse: AWSDecodableShape {
        /// Details about the capacity provider.
        public let capacityProvider: CapacityProvider?

        public init(capacityProvider: CapacityProvider? = nil) {
            self.capacityProvider = capacityProvider
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProvider = "capacityProvider"
        }
    }

    public struct UpdateClusterRequest: AWSEncodableShape {
        /// The name of the cluster to modify the settings for.
        public let cluster: String
        /// The execute command configuration for the cluster.
        public let configuration: ClusterConfiguration?
        /// Use this parameter to set a default Service Connect namespace. After you set a default
        /// 	Service Connect namespace, any new services with Service Connect turned on that are created in the cluster are added as
        /// 	client services in the namespace. This setting only applies to new services that set the enabled parameter to
        /// 	true in the ServiceConnectConfiguration.
        /// 	You can set the namespace of each service individually in the ServiceConnectConfiguration to override this default
        /// 	parameter. Tasks that run in a namespace can use short names to connect
        /// 	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
        /// 	Tasks connect through a managed proxy container
        /// 	that collects logs and metrics for increased visibility.
        /// 	Only the tasks that Amazon ECS services create are supported with Service Connect.
        /// 	For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let serviceConnectDefaults: ClusterServiceConnectDefaultsRequest?
        /// The cluster settings for your cluster.
        public let settings: [ClusterSetting]?

        public init(cluster: String, configuration: ClusterConfiguration? = nil, serviceConnectDefaults: ClusterServiceConnectDefaultsRequest? = nil, settings: [ClusterSetting]? = nil) {
            self.cluster = cluster
            self.configuration = configuration
            self.serviceConnectDefaults = serviceConnectDefaults
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case configuration = "configuration"
            case serviceConnectDefaults = "serviceConnectDefaults"
            case settings = "settings"
        }
    }

    public struct UpdateClusterResponse: AWSDecodableShape {
        /// Details about the cluster.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct UpdateClusterSettingsRequest: AWSEncodableShape {
        /// The name of the cluster to modify the settings for.
        public let cluster: String
        /// The setting to use by default for a cluster. This parameter is used to turn on CloudWatch
        /// 			Container Insights for a cluster. If this value is specified, it overrides the
        /// 				containerInsights value set with PutAccountSetting or
        /// 				PutAccountSettingDefault.  Currently, if you delete an existing cluster that does not have Container Insights
        /// 				turned on, and then create a new cluster with the same name with Container Insights
        /// 				tuned on, Container Insights will not actually be turned on. If you want to preserve
        /// 				the same name for your existing cluster and turn on Container Insights, you must
        /// 				wait 7 days before you can re-create it.
        public let settings: [ClusterSetting]

        public init(cluster: String, settings: [ClusterSetting]) {
            self.cluster = cluster
            self.settings = settings
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case settings = "settings"
        }
    }

    public struct UpdateClusterSettingsResponse: AWSDecodableShape {
        /// Details about the cluster
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
        }
    }

    public struct UpdateContainerAgentRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that your container instance is
        /// 			running on. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// The container instance ID or full ARN entries for the container instance where you
        /// 			would like to update the Amazon ECS container agent.
        public let containerInstance: String

        public init(cluster: String? = nil, containerInstance: String) {
            self.cluster = cluster
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstance = "containerInstance"
        }
    }

    public struct UpdateContainerAgentResponse: AWSDecodableShape {
        /// The container instance that the container agent was updated for.
        public let containerInstance: ContainerInstance?

        public init(containerInstance: ContainerInstance? = nil) {
            self.containerInstance = containerInstance
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstance = "containerInstance"
        }
    }

    public struct UpdateContainerInstancesStateRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the container instance to
        /// 			update. If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// A list of up to 10 container instance IDs or full ARN entries.
        public let containerInstances: [String]
        /// The container instance state to update the container instance with. The only valid
        /// 			values for this action are ACTIVE and DRAINING. A container
        /// 			instance can only be updated to DRAINING status once it has reached an
        /// 				ACTIVE state. If a container instance is in REGISTERING,
        /// 				DEREGISTERING, or REGISTRATION_FAILED state you can
        /// 			describe the container instance but can't update the container instance state.
        public let status: ContainerInstanceStatus

        public init(cluster: String? = nil, containerInstances: [String], status: ContainerInstanceStatus) {
            self.cluster = cluster
            self.containerInstances = containerInstances
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case containerInstances = "containerInstances"
            case status = "status"
        }
    }

    public struct UpdateContainerInstancesStateResponse: AWSDecodableShape {
        /// The list of container instances.
        public let containerInstances: [ContainerInstance]?
        /// Any failures associated with the call.
        public let failures: [Failure]?

        public init(containerInstances: [ContainerInstance]? = nil, failures: [Failure]? = nil) {
            self.containerInstances = containerInstances
            self.failures = failures
        }

        private enum CodingKeys: String, CodingKey {
            case containerInstances = "containerInstances"
            case failures = "failures"
        }
    }

    public struct UpdateServicePrimaryTaskSetRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
        /// 			set exists in.
        public let cluster: String
        /// The short name or full Amazon Resource Name (ARN) of the task set to set as the primary task set in the
        /// 			deployment.
        public let primaryTaskSet: String
        /// The short name or full Amazon Resource Name (ARN) of the service that the task set exists in.
        public let service: String

        public init(cluster: String, primaryTaskSet: String, service: String) {
            self.cluster = cluster
            self.primaryTaskSet = primaryTaskSet
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case primaryTaskSet = "primaryTaskSet"
            case service = "service"
        }
    }

    public struct UpdateServicePrimaryTaskSetResponse: AWSDecodableShape {
        /// The details about the task set.
        public let taskSet: TaskSet?

        public init(taskSet: TaskSet? = nil) {
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case taskSet = "taskSet"
        }
    }

    public struct UpdateServiceRequest: AWSEncodableShape {
        /// The capacity provider strategy to update the service to use. if the service uses the default capacity provider strategy for the cluster, the
        /// 			service can be updated to use one or more capacity providers as opposed to the default
        /// 			capacity provider strategy. However, when a service is using a capacity provider
        /// 			strategy that's not the default capacity provider strategy, the service can't be updated
        /// 			to use the cluster's default capacity provider strategy. A capacity provider strategy consists of one or more capacity providers along with the
        /// 				base and weight to assign to them. A capacity provider
        /// 			must be associated with the cluster to be used in a capacity provider strategy. The
        /// 				PutClusterCapacityProviders API is used to associate a capacity
        /// 			provider with a cluster. Only capacity providers with an ACTIVE or
        /// 				UPDATING status can be used. If specifying a capacity provider that uses an Auto Scaling group, the capacity
        /// 			provider must already be created. New capacity providers can be created with the CreateCapacityProvider API operation. To use a Fargate capacity provider, specify either the FARGATE or
        /// 				FARGATE_SPOT capacity providers. The Fargate capacity providers are
        /// 			available to all accounts and only need to be associated with a cluster to be
        /// 			used. The PutClusterCapacityProviders API operation is used to update the
        /// 			list of available capacity providers for a cluster after the cluster is created.
        public let capacityProviderStrategy: [CapacityProviderStrategyItem]?
        /// The short name or full Amazon Resource Name (ARN) of the cluster that your service runs on.
        /// 			If you do not specify a cluster, the default cluster is assumed.
        public let cluster: String?
        /// Optional deployment parameters that control how many tasks run during the deployment
        /// 			and the ordering of stopping and starting tasks.
        public let deploymentConfiguration: DeploymentConfiguration?
        /// The number of instantiations of the task to place and keep running in your
        /// 			service.
        public let desiredCount: Int?
        /// Determines whether to turn on Amazon ECS managed tags for the tasks in the service. For
        /// 			more information, see Tagging Your Amazon ECS
        /// 				Resources in the Amazon Elastic Container Service Developer Guide. Only tasks launched after the update will reflect the update. To update the tags on
        /// 			all tasks, set forceNewDeployment to true, so that Amazon ECS
        /// 			starts new tasks with the updated tags.
        public let enableECSManagedTags: Bool?
        /// If true, this enables execute command functionality on all task
        /// 			containers. If you do not want to override the value that was set when the service was created,
        /// 			you can set this to null when performing this action.
        public let enableExecuteCommand: Bool?
        /// Determines whether to force a new deployment of the service. By default, deployments
        /// 			aren't forced. You can use this option to start a new deployment with no service
        /// 			definition changes. For example, you can update a service's tasks to use a newer Docker
        /// 			image with the same image/tag combination (my_image:latest) or to roll
        /// 			Fargate tasks onto a newer platform version.
        public let forceNewDeployment: Bool?
        /// The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy
        /// 			Elastic Load Balancing target health checks after a task has first started. This is only valid if your
        /// 			service is configured to use a load balancer. If your service's tasks take a while to
        /// 			start and respond to Elastic Load Balancing health checks, you can specify a health check grace period of
        /// 			up to 2,147,483,647 seconds. During that time, the Amazon ECS service scheduler ignores
        /// 			the Elastic Load Balancing health check status. This grace period can prevent the ECS service scheduler
        /// 			from marking tasks as unhealthy and stopping them before they have time to come
        /// 			up.
        public let healthCheckGracePeriodSeconds: Int?
        /// A list of Elastic Load Balancing load balancer objects. It contains the load balancer name, the
        /// 			container name, and the container port to access from the load balancer. The container
        /// 			name is as it appears in a container definition. When you add, update, or remove a load balancer configuration, Amazon ECS starts new tasks
        /// 			with the updated Elastic Load Balancing configuration, and then stops the old tasks when the new tasks
        /// 			are running. For services that use rolling updates, you can add, update, or remove Elastic Load Balancing target
        /// 			groups. You can update from a single target group to multiple target groups and from
        /// 			multiple target groups to a single target group. For services that use blue/green deployments, you can update Elastic Load Balancing target groups by
        /// 			using  CreateDeployment through CodeDeploy. Note that multiple target groups
        /// 			are not supported for blue/green deployments. For more information see Register
        /// 				multiple target groups with a service in the Amazon Elastic Container Service Developer Guide.  For services that use the external deployment controller, you can add, update, or
        /// 			remove load balancers by using CreateTaskSet.
        /// 			Note that multiple target groups are not supported for external deployments. For more
        /// 			information see Register
        /// 				multiple target groups with a service in the Amazon Elastic Container Service Developer Guide.  You can remove existing loadBalancers by passing an empty list.
        public let loadBalancers: [LoadBalancer]?
        /// An object representing the network configuration for the service.
        public let networkConfiguration: NetworkConfiguration?
        /// An array of task placement constraint objects to update the service to use. If no
        /// 			value is specified, the existing placement constraints for the service will remain
        /// 			unchanged. If this value is specified, it will override any existing placement
        /// 			constraints defined for the service. To remove all existing placement constraints,
        /// 			specify an empty array. You can specify a maximum of 10 constraints for each task. This limit includes
        /// 			constraints in the task definition and those specified at runtime.
        public let placementConstraints: [PlacementConstraint]?
        /// The task placement strategy objects to update the service to use. If no value is
        /// 			specified, the existing placement strategy for the service will remain unchanged. If
        /// 			this value is specified, it will override the existing placement strategy defined for
        /// 			the service. To remove an existing placement strategy, specify an empty object. You can specify a maximum of five strategy rules for each service.
        public let placementStrategy: [PlacementStrategy]?
        /// The platform version that your tasks in the service run on. A platform version is only
        /// 			specified for tasks using the Fargate launch type. If a platform version
        /// 			is not specified, the LATEST platform version is used. For more
        /// 			information, see Fargate Platform
        /// 				Versions in the Amazon Elastic Container Service Developer Guide.
        public let platformVersion: String?
        /// Determines whether to propagate the tags from the task definition or the service to
        /// 			the task. If no value is specified, the tags aren't propagated. Only tasks launched after the update will reflect the update. To update the tags on
        /// 			all tasks, set forceNewDeployment to true, so that Amazon ECS
        /// 			starts new tasks with the updated tags.
        public let propagateTags: PropagateTags?
        /// The name of the service to update.
        public let service: String
        /// The configuration for this service to discover and connect to
        /// 	services, and be discovered by, and connected from, other services within a namespace. Tasks that run in a namespace can use short names to connect
        /// 	to services in the namespace. Tasks can connect to services across all of the clusters in the namespace.
        /// 	Tasks connect through a managed proxy container
        /// 	that collects logs and metrics for increased visibility.
        /// 	Only the tasks that Amazon ECS services create are supported with Service Connect.
        /// 	For more information, see Service Connect in the Amazon Elastic Container Service Developer Guide.
        public let serviceConnectConfiguration: ServiceConnectConfiguration?
        /// The details for the service discovery registries to assign to this service. For more
        /// 			information, see Service
        /// 				Discovery. When you add, update, or remove the service registries configuration, Amazon ECS starts new
        /// 			tasks with the updated service registries configuration, and then stops the old tasks
        /// 			when the new tasks are running. You can remove existing serviceRegistries by passing an empty
        /// 			list.
        public let serviceRegistries: [ServiceRegistry]?
        /// The family and revision (family:revision) or
        /// 			full ARN of the task definition to run in your service. If a revision is
        /// 			not specified, the latest ACTIVE revision is used. If you modify the task
        /// 			definition with UpdateService, Amazon ECS spawns a task with the new version of
        /// 			the task definition and then stops an old task after the new version is running.
        public let taskDefinition: String?
        /// The details of the volume that was configuredAtLaunch. You can configure
        /// 			the size, volumeType, IOPS, throughput, snapshot and encryption in ServiceManagedEBSVolumeConfiguration. The name of the volume
        /// 			must match the name from the task definition. If set to null, no new
        /// 			deployment is triggered. Otherwise, if this configuration differs from the existing one,
        /// 			it triggers a new deployment.
        public let volumeConfigurations: [ServiceVolumeConfiguration]?

        public init(capacityProviderStrategy: [CapacityProviderStrategyItem]? = nil, cluster: String? = nil, deploymentConfiguration: DeploymentConfiguration? = nil, desiredCount: Int? = nil, enableECSManagedTags: Bool? = nil, enableExecuteCommand: Bool? = nil, forceNewDeployment: Bool? = nil, healthCheckGracePeriodSeconds: Int? = nil, loadBalancers: [LoadBalancer]? = nil, networkConfiguration: NetworkConfiguration? = nil, placementConstraints: [PlacementConstraint]? = nil, placementStrategy: [PlacementStrategy]? = nil, platformVersion: String? = nil, propagateTags: PropagateTags? = nil, service: String, serviceConnectConfiguration: ServiceConnectConfiguration? = nil, serviceRegistries: [ServiceRegistry]? = nil, taskDefinition: String? = nil, volumeConfigurations: [ServiceVolumeConfiguration]? = nil) {
            self.capacityProviderStrategy = capacityProviderStrategy
            self.cluster = cluster
            self.deploymentConfiguration = deploymentConfiguration
            self.desiredCount = desiredCount
            self.enableECSManagedTags = enableECSManagedTags
            self.enableExecuteCommand = enableExecuteCommand
            self.forceNewDeployment = forceNewDeployment
            self.healthCheckGracePeriodSeconds = healthCheckGracePeriodSeconds
            self.loadBalancers = loadBalancers
            self.networkConfiguration = networkConfiguration
            self.placementConstraints = placementConstraints
            self.placementStrategy = placementStrategy
            self.platformVersion = platformVersion
            self.propagateTags = propagateTags
            self.service = service
            self.serviceConnectConfiguration = serviceConnectConfiguration
            self.serviceRegistries = serviceRegistries
            self.taskDefinition = taskDefinition
            self.volumeConfigurations = volumeConfigurations
        }

        public func validate(name: String) throws {
            try self.capacityProviderStrategy?.forEach {
                try $0.validate(name: "\(name).capacityProviderStrategy[]")
            }
            try self.serviceConnectConfiguration?.validate(name: "\(name).serviceConnectConfiguration")
            try self.volumeConfigurations?.forEach {
                try $0.validate(name: "\(name).volumeConfigurations[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case capacityProviderStrategy = "capacityProviderStrategy"
            case cluster = "cluster"
            case deploymentConfiguration = "deploymentConfiguration"
            case desiredCount = "desiredCount"
            case enableECSManagedTags = "enableECSManagedTags"
            case enableExecuteCommand = "enableExecuteCommand"
            case forceNewDeployment = "forceNewDeployment"
            case healthCheckGracePeriodSeconds = "healthCheckGracePeriodSeconds"
            case loadBalancers = "loadBalancers"
            case networkConfiguration = "networkConfiguration"
            case placementConstraints = "placementConstraints"
            case placementStrategy = "placementStrategy"
            case platformVersion = "platformVersion"
            case propagateTags = "propagateTags"
            case service = "service"
            case serviceConnectConfiguration = "serviceConnectConfiguration"
            case serviceRegistries = "serviceRegistries"
            case taskDefinition = "taskDefinition"
            case volumeConfigurations = "volumeConfigurations"
        }
    }

    public struct UpdateServiceResponse: AWSDecodableShape {
        /// The full description of your service following the update call.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "service"
        }
    }

    public struct UpdateTaskProtectionRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
        /// 			sets exist in.
        public let cluster: String
        /// If you set protectionEnabled to true, you can specify the
        /// 			duration for task protection in minutes. You can specify a value from 1 minute to up to
        /// 			2,880 minutes (48 hours). During this time, your task will not be terminated by scale-in
        /// 			events from Service Auto Scaling or deployments. After this time period lapses,
        /// 				protectionEnabled will be reset to false. If you don’t specify the time, then the task is automatically protected for 120
        /// 			minutes (2 hours).
        public let expiresInMinutes: Int?
        /// Specify true to mark a task for protection and false to
        /// 			unset protection, making it eligible for termination.
        public let protectionEnabled: Bool
        /// A list of up to 10 task IDs or full ARN entries.
        public let tasks: [String]

        public init(cluster: String, expiresInMinutes: Int? = nil, protectionEnabled: Bool = false, tasks: [String]) {
            self.cluster = cluster
            self.expiresInMinutes = expiresInMinutes
            self.protectionEnabled = protectionEnabled
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case expiresInMinutes = "expiresInMinutes"
            case protectionEnabled = "protectionEnabled"
            case tasks = "tasks"
        }
    }

    public struct UpdateTaskProtectionResponse: AWSDecodableShape {
        /// Any failures associated with the call.
        public let failures: [Failure]?
        /// A list of tasks with the following information.    taskArn: The task ARN.    protectionEnabled: The protection status of the task. If scale-in
        /// 					protection is turned on for a task, the value is true. Otherwise,
        /// 					it is false.    expirationDate: The epoch time when protection for the task will
        /// 					expire.
        public let protectedTasks: [ProtectedTask]?

        public init(failures: [Failure]? = nil, protectedTasks: [ProtectedTask]? = nil) {
            self.failures = failures
            self.protectedTasks = protectedTasks
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "failures"
            case protectedTasks = "protectedTasks"
        }
    }

    public struct UpdateTaskSetRequest: AWSEncodableShape {
        /// The short name or full Amazon Resource Name (ARN) of the cluster that hosts the service that the task
        /// 			set is found in.
        public let cluster: String
        /// A floating-point percentage of the desired number of tasks to place and keep running
        /// 			in the task set.
        public let scale: Scale
        /// The short name or full Amazon Resource Name (ARN) of the service that the task set is found in.
        public let service: String
        /// The short name or full Amazon Resource Name (ARN) of the task set to update.
        public let taskSet: String

        public init(cluster: String, scale: Scale, service: String, taskSet: String) {
            self.cluster = cluster
            self.scale = scale
            self.service = service
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "cluster"
            case scale = "scale"
            case service = "service"
            case taskSet = "taskSet"
        }
    }

    public struct UpdateTaskSetResponse: AWSDecodableShape {
        /// Details about the task set.
        public let taskSet: TaskSet?

        public init(taskSet: TaskSet? = nil) {
            self.taskSet = taskSet
        }

        private enum CodingKeys: String, CodingKey {
            case taskSet = "taskSet"
        }
    }

    public struct VersionInfo: AWSEncodableShape & AWSDecodableShape {
        /// The Git commit hash for the Amazon ECS container agent build on the amazon-ecs-agent
        /// 			 GitHub repository.
        public let agentHash: String?
        /// The version number of the Amazon ECS container agent.
        public let agentVersion: String?
        /// The Docker version that's running on the container instance.
        public let dockerVersion: String?

        public init(agentHash: String? = nil, agentVersion: String? = nil, dockerVersion: String? = nil) {
            self.agentHash = agentHash
            self.agentVersion = agentVersion
            self.dockerVersion = dockerVersion
        }

        private enum CodingKeys: String, CodingKey {
            case agentHash = "agentHash"
            case agentVersion = "agentVersion"
            case dockerVersion = "dockerVersion"
        }
    }

    public struct Volume: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether the volume should be configured at launch time. This is used to
        /// 			create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each
        /// 			task definition revision may only have one volume configured at launch in the volume
        /// 			configuration. To configure a volume at launch time, use this task definition revision and specify a
        /// 				volumeConfigurations object when calling the
        /// 			CreateService, UpdateService, RunTask or
        /// 				StartTask APIs.
        public let configuredAtLaunch: Bool?
        /// This parameter is specified when you use Docker volumes. Windows containers only support the use of the local driver. To use bind
        /// 			mounts, specify the host parameter instead.  Docker volumes aren't supported by tasks run on Fargate.
        public let dockerVolumeConfiguration: DockerVolumeConfiguration?
        /// This parameter is specified when you use an Amazon Elastic File System file system for task
        /// 			storage.
        public let efsVolumeConfiguration: EFSVolumeConfiguration?
        /// This parameter is specified when you use Amazon FSx for Windows File Server file system for task
        /// 			storage.
        public let fsxWindowsFileServerVolumeConfiguration: FSxWindowsFileServerVolumeConfiguration?
        /// This parameter is specified when you use bind mount host volumes. The contents of the
        /// 				host parameter determine whether your bind mount host volume persists
        /// 			on the host container instance and where it's stored. If the host parameter
        /// 			is empty, then the Docker daemon assigns a host path for your data volume. However, the
        /// 			data isn't guaranteed to persist after the containers that are associated with it stop
        /// 			running. Windows containers can mount whole directories on the same drive as
        /// 				$env:ProgramData. Windows containers can't mount directories on a
        /// 			different drive, and mount point can't be across drives. For example, you can mount
        /// 				C:\my\path:C:\my\path and D:\:D:\, but not
        /// 				D:\my\path:C:\my\path or D:\:C:\my\path.
        public let host: HostVolumeProperties?
        /// The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and hyphens are allowed. When using a volume configured at launch, the name is required and must
        /// 			also be specified as the volume name in the ServiceVolumeConfiguration or
        /// 				TaskVolumeConfiguration parameter when creating your service or
        /// 			standalone task. For all other types of volumes, this name is referenced in the
        /// 				sourceVolume parameter of the mountPoints object in the
        /// 			container definition. When a volume is using the efsVolumeConfiguration, the name is
        /// 			required.
        public let name: String?

        public init(configuredAtLaunch: Bool? = nil, dockerVolumeConfiguration: DockerVolumeConfiguration? = nil, efsVolumeConfiguration: EFSVolumeConfiguration? = nil, fsxWindowsFileServerVolumeConfiguration: FSxWindowsFileServerVolumeConfiguration? = nil, host: HostVolumeProperties? = nil, name: String? = nil) {
            self.configuredAtLaunch = configuredAtLaunch
            self.dockerVolumeConfiguration = dockerVolumeConfiguration
            self.efsVolumeConfiguration = efsVolumeConfiguration
            self.fsxWindowsFileServerVolumeConfiguration = fsxWindowsFileServerVolumeConfiguration
            self.host = host
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case configuredAtLaunch = "configuredAtLaunch"
            case dockerVolumeConfiguration = "dockerVolumeConfiguration"
            case efsVolumeConfiguration = "efsVolumeConfiguration"
            case fsxWindowsFileServerVolumeConfiguration = "fsxWindowsFileServerVolumeConfiguration"
            case host = "host"
            case name = "name"
        }
    }

    public struct VolumeFrom: AWSEncodableShape & AWSDecodableShape {
        /// If this value is true, the container has read-only access to the volume.
        /// 			If this value is false, then the container can write to the volume. The
        /// 			default value is false.
        public let readOnly: Bool?
        /// The name of another container within the same task definition to mount volumes
        /// 			from.
        public let sourceContainer: String?

        public init(readOnly: Bool? = nil, sourceContainer: String? = nil) {
            self.readOnly = readOnly
            self.sourceContainer = sourceContainer
        }

        private enum CodingKeys: String, CodingKey {
            case readOnly = "readOnly"
            case sourceContainer = "sourceContainer"
        }
    }
}

// MARK: - Errors

/// Error enum for ECS
public struct ECSErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case attributeLimitExceededException = "AttributeLimitExceededException"
        case blockedException = "BlockedException"
        case clientException = "ClientException"
        case clusterContainsContainerInstancesException = "ClusterContainsContainerInstancesException"
        case clusterContainsServicesException = "ClusterContainsServicesException"
        case clusterContainsTasksException = "ClusterContainsTasksException"
        case clusterNotFoundException = "ClusterNotFoundException"
        case conflictException = "ConflictException"
        case invalidParameterException = "InvalidParameterException"
        case limitExceededException = "LimitExceededException"
        case missingVersionException = "MissingVersionException"
        case namespaceNotFoundException = "NamespaceNotFoundException"
        case noUpdateAvailableException = "NoUpdateAvailableException"
        case platformTaskDefinitionIncompatibilityException = "PlatformTaskDefinitionIncompatibilityException"
        case platformUnknownException = "PlatformUnknownException"
        case resourceInUseException = "ResourceInUseException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case serverException = "ServerException"
        case serviceNotActiveException = "ServiceNotActiveException"
        case serviceNotFoundException = "ServiceNotFoundException"
        case targetNotConnectedException = "TargetNotConnectedException"
        case targetNotFoundException = "TargetNotFoundException"
        case taskSetNotFoundException = "TaskSetNotFoundException"
        case unsupportedFeatureException = "UnsupportedFeatureException"
        case updateInProgressException = "UpdateInProgressException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize ECS
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// You don't have authorization to perform the requested action.
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// You can apply up to 10 custom attributes for each resource. You can view the
    /// 			attributes of a resource with ListAttributes. You can remove existing
    /// 			attributes on a resource with DeleteAttributes.
    public static var attributeLimitExceededException: Self { .init(.attributeLimitExceededException) }
    /// Your Amazon Web Services account was blocked. For more information, contact
    /// 				Amazon Web Services Support.
    public static var blockedException: Self { .init(.blockedException) }
    /// These errors are usually caused by a client action. This client action might be using
    /// 			an action or resource on behalf of a user that doesn't have permissions to use the
    /// 			action or resource. Or, it might be specifying an identifier that isn't valid.
    public static var clientException: Self { .init(.clientException) }
    /// You can't delete a cluster that has registered container instances. First, deregister
    /// 			the container instances before you can delete the cluster. For more information, see
    /// 				DeregisterContainerInstance.
    public static var clusterContainsContainerInstancesException: Self { .init(.clusterContainsContainerInstancesException) }
    /// You can't delete a cluster that contains services. First, update the service to reduce
    /// 			its desired task count to 0, and then delete the service. For more information, see
    /// 				UpdateService and DeleteService.
    public static var clusterContainsServicesException: Self { .init(.clusterContainsServicesException) }
    /// You can't delete a cluster that has active tasks.
    public static var clusterContainsTasksException: Self { .init(.clusterContainsTasksException) }
    /// The specified cluster wasn't found. You can view your available clusters with ListClusters. Amazon ECS clusters are Region specific.
    public static var clusterNotFoundException: Self { .init(.clusterNotFoundException) }
    /// The RunTask request could not be processed due to conflicts. The provided
    /// 				clientToken is already in use with a different RunTask
    /// 			request. The resourceIds are the existing task ARNs which are already
    /// 			associated with the clientToken.  To fix this issue:   Run RunTask with a unique clientToken.   Run RunTask with the clientToken and the original
    /// 					set of parameters
    public static var conflictException: Self { .init(.conflictException) }
    /// The specified parameter isn't valid. Review the available parameters for the API
    /// 			request.
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    /// The limit for the resource was exceeded.
    public static var limitExceededException: Self { .init(.limitExceededException) }
    /// Amazon ECS can't determine the current version of the Amazon ECS container agent on the
    /// 			container instance and doesn't have enough information to proceed with an update. This
    /// 			could be because the agent running on the container instance is a previous or custom
    /// 			version that doesn't use our version information.
    public static var missingVersionException: Self { .init(.missingVersionException) }
    /// The specified namespace wasn't found.
    public static var namespaceNotFoundException: Self { .init(.namespaceNotFoundException) }
    /// There's no update available for this Amazon ECS container agent. This might be because the
    /// 			agent is already running the latest version or because it's so old that there's no
    /// 			update path to the current version.
    public static var noUpdateAvailableException: Self { .init(.noUpdateAvailableException) }
    /// The specified platform version doesn't satisfy the required capabilities of the task
    /// 			definition.
    public static var platformTaskDefinitionIncompatibilityException: Self { .init(.platformTaskDefinitionIncompatibilityException) }
    /// The specified platform version doesn't exist.
    public static var platformUnknownException: Self { .init(.platformUnknownException) }
    /// The specified resource is in-use and can't be removed.
    public static var resourceInUseException: Self { .init(.resourceInUseException) }
    /// The specified resource wasn't found.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// These errors are usually caused by a server issue.
    public static var serverException: Self { .init(.serverException) }
    /// The specified service isn't active. You can't update a service that's inactive. If you
    /// 			have previously deleted a service, you can re-create it with CreateService.
    public static var serviceNotActiveException: Self { .init(.serviceNotActiveException) }
    /// The specified service wasn't found. You can view your available services with ListServices. Amazon ECS services are cluster specific and Region
    /// 			specific.
    public static var serviceNotFoundException: Self { .init(.serviceNotFoundException) }
    /// The execute command cannot run. This error can be caused by any of the following
    /// 			configuration issues:   Incorrect IAM permissions   The SSM agent is not installed or is not running   There is an interface Amazon VPC endpoint for Amazon ECS, but there is not one for
    /// 					Systems Manager Session Manager   For information about how to troubleshoot the issues, see Troubleshooting issues with ECS
    /// 				Exec in the Amazon Elastic Container Service Developer Guide.
    public static var targetNotConnectedException: Self { .init(.targetNotConnectedException) }
    /// The specified target wasn't found. You can view your available container instances
    /// 			with ListContainerInstances. Amazon ECS container instances are
    /// 			cluster-specific and Region-specific.
    public static var targetNotFoundException: Self { .init(.targetNotFoundException) }
    /// The specified task set wasn't found. You can view your available task sets with DescribeTaskSets. Task sets are specific to each cluster, service and
    /// 			Region.
    public static var taskSetNotFoundException: Self { .init(.taskSetNotFoundException) }
    /// The specified task isn't supported in this Region.
    public static var unsupportedFeatureException: Self { .init(.unsupportedFeatureException) }
    /// There's already a current Amazon ECS container agent update in progress on the container
    /// 			instance that's specified. If the container agent becomes disconnected while it's in a
    /// 			transitional stage, such as PENDING or STAGING, the update
    /// 			process can get stuck in that state. However, when the agent reconnects, it resumes
    /// 			where it stopped previously.
    public static var updateInProgressException: Self { .init(.updateInProgressException) }
}

extension ECSErrorType: Equatable {
    public static func == (lhs: ECSErrorType, rhs: ECSErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension ECSErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
