//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS NetworkManager service.
///
/// Amazon Web Services enables you to centrally manage your Amazon Web Services Cloud WAN core network and your Transit Gateway network across Amazon Web Services accounts, Regions, and on-premises locations.
public struct NetworkManager: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the NetworkManager client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: nil,
            partition: partition,
            serviceName: "NetworkManager",
            serviceIdentifier: "networkmanager",
            serviceProtocol: .restjson,
            apiVersion: "2019-07-05",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            partitionEndpoints: Self.partitionEndpoints,
            errorType: NetworkManagerErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "aws-global": "networkmanager.us-west-2.amazonaws.com",
        "aws-us-gov-global": "networkmanager.us-gov-west-1.amazonaws.com"
    ]}

    /// Default endpoint and region to use for each partition
    static var partitionEndpoints: [AWSPartition: (endpoint: String, region: SotoCore.Region)] {[
        .aws: (endpoint: "aws-global", region: .uswest2),
        .awsusgov: (endpoint: "aws-us-gov-global", region: .usgovwest1)
    ]}


    // MARK: API Calls

    /// Accepts a core network attachment request.  Once the attachment request is accepted by a core network owner, the attachment is created and connected to a core network.
    @Sendable
    public func acceptAttachment(_ input: AcceptAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptAttachmentResponse {
        return try await self.client.execute(
            operation: "AcceptAttachment", 
            path: "/attachments/{AttachmentId}/accept", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates a core network Connect peer with a device and optionally, with a link.  If you specify a link, it must be associated with the specified device. You can only associate core network Connect peers that have been created on a core network Connect attachment on a core network.
    @Sendable
    public func associateConnectPeer(_ input: AssociateConnectPeerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateConnectPeerResponse {
        return try await self.client.execute(
            operation: "AssociateConnectPeer", 
            path: "/global-networks/{GlobalNetworkId}/connect-peer-associations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates a customer gateway with a device and optionally, with a link. If you specify a link, it must be associated with the specified device.  You can only associate customer gateways that are connected to a VPN attachment on a transit gateway or core network registered in your global network. When you register a transit gateway or core network, customer gateways that are connected to the transit gateway are automatically included in the global network. To list customer gateways that are connected to a transit gateway, use the DescribeVpnConnections EC2 API and filter by transit-gateway-id. You cannot associate a customer gateway with more than one device and link.
    @Sendable
    public func associateCustomerGateway(_ input: AssociateCustomerGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateCustomerGatewayResponse {
        return try await self.client.execute(
            operation: "AssociateCustomerGateway", 
            path: "/global-networks/{GlobalNetworkId}/customer-gateway-associations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site.
    @Sendable
    public func associateLink(_ input: AssociateLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateLinkResponse {
        return try await self.client.execute(
            operation: "AssociateLink", 
            path: "/global-networks/{GlobalNetworkId}/link-associations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates a transit gateway Connect peer with a device, and optionally, with a link. If you specify a link, it must be associated with the specified device.  You can only associate transit gateway Connect peers that have been created on a transit gateway that's registered in your global network. You cannot associate a transit gateway Connect peer with more than one device and link.
    @Sendable
    public func associateTransitGatewayConnectPeer(_ input: AssociateTransitGatewayConnectPeerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateTransitGatewayConnectPeerResponse {
        return try await self.client.execute(
            operation: "AssociateTransitGatewayConnectPeer", 
            path: "/global-networks/{GlobalNetworkId}/transit-gateway-connect-peer-associations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a core network Connect attachment from a specified core network attachment.  A core network Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a core network and an appliance. A core network Connect attachment uses an existing VPC attachment as the underlying transport mechanism.
    @Sendable
    public func createConnectAttachment(_ input: CreateConnectAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConnectAttachmentResponse {
        return try await self.client.execute(
            operation: "CreateConnectAttachment", 
            path: "/connect-attachments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a core network Connect peer for a specified core network connect attachment between a core network and an appliance. The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).
    @Sendable
    public func createConnectPeer(_ input: CreateConnectPeerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConnectPeerResponse {
        return try await self.client.execute(
            operation: "CreateConnectPeer", 
            path: "/connect-peers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a connection between two devices. The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network.
    @Sendable
    public func createConnection(_ input: CreateConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConnectionResponse {
        return try await self.client.execute(
            operation: "CreateConnection", 
            path: "/global-networks/{GlobalNetworkId}/connections", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a core network as part of your global network, and optionally, with a core network policy.
    @Sendable
    public func createCoreNetwork(_ input: CreateCoreNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCoreNetworkResponse {
        return try await self.client.execute(
            operation: "CreateCoreNetwork", 
            path: "/core-networks", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new device in a global network. If you specify both a site ID and a location, the location of the site is used for visualization in the Network Manager console.
    @Sendable
    public func createDevice(_ input: CreateDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDeviceResponse {
        return try await self.client.execute(
            operation: "CreateDevice", 
            path: "/global-networks/{GlobalNetworkId}/devices", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new, empty global network.
    @Sendable
    public func createGlobalNetwork(_ input: CreateGlobalNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateGlobalNetworkResponse {
        return try await self.client.execute(
            operation: "CreateGlobalNetwork", 
            path: "/global-networks", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new link for a specified site.
    @Sendable
    public func createLink(_ input: CreateLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLinkResponse {
        return try await self.client.execute(
            operation: "CreateLink", 
            path: "/global-networks/{GlobalNetworkId}/links", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new site in a global network.
    @Sendable
    public func createSite(_ input: CreateSiteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSiteResponse {
        return try await self.client.execute(
            operation: "CreateSite", 
            path: "/global-networks/{GlobalNetworkId}/sites", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Amazon Web Services site-to-site VPN attachment on an edge location of a core network.
    @Sendable
    public func createSiteToSiteVpnAttachment(_ input: CreateSiteToSiteVpnAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSiteToSiteVpnAttachmentResponse {
        return try await self.client.execute(
            operation: "CreateSiteToSiteVpnAttachment", 
            path: "/site-to-site-vpn-attachments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a transit gateway peering connection.
    @Sendable
    public func createTransitGatewayPeering(_ input: CreateTransitGatewayPeeringRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayPeeringResponse {
        return try await self.client.execute(
            operation: "CreateTransitGatewayPeering", 
            path: "/transit-gateway-peerings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a transit gateway route table attachment.
    @Sendable
    public func createTransitGatewayRouteTableAttachment(_ input: CreateTransitGatewayRouteTableAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayRouteTableAttachmentResponse {
        return try await self.client.execute(
            operation: "CreateTransitGatewayRouteTableAttachment", 
            path: "/transit-gateway-route-table-attachments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a VPC attachment on an edge location of a core network.
    @Sendable
    public func createVpcAttachment(_ input: CreateVpcAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcAttachmentResponse {
        return try await self.client.execute(
            operation: "CreateVpcAttachment", 
            path: "/vpc-attachments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an attachment. Supports all attachment types.
    @Sendable
    public func deleteAttachment(_ input: DeleteAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAttachmentResponse {
        return try await self.client.execute(
            operation: "DeleteAttachment", 
            path: "/attachments/{AttachmentId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Connect peer.
    @Sendable
    public func deleteConnectPeer(_ input: DeleteConnectPeerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConnectPeerResponse {
        return try await self.client.execute(
            operation: "DeleteConnectPeer", 
            path: "/connect-peers/{ConnectPeerId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the specified connection in your global network.
    @Sendable
    public func deleteConnection(_ input: DeleteConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConnectionResponse {
        return try await self.client.execute(
            operation: "DeleteConnection", 
            path: "/global-networks/{GlobalNetworkId}/connections/{ConnectionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a core network along with all core network policies. This can only be done if there are no attachments on a core network.
    @Sendable
    public func deleteCoreNetwork(_ input: DeleteCoreNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCoreNetworkResponse {
        return try await self.client.execute(
            operation: "DeleteCoreNetwork", 
            path: "/core-networks/{CoreNetworkId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a policy version from a core network. You can't delete the current LIVE policy.
    @Sendable
    public func deleteCoreNetworkPolicyVersion(_ input: DeleteCoreNetworkPolicyVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCoreNetworkPolicyVersionResponse {
        return try await self.client.execute(
            operation: "DeleteCoreNetworkPolicyVersion", 
            path: "/core-networks/{CoreNetworkId}/core-network-policy-versions/{PolicyVersionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an existing device. You must first disassociate the device from any links and customer gateways.
    @Sendable
    public func deleteDevice(_ input: DeleteDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDeviceResponse {
        return try await self.client.execute(
            operation: "DeleteDevice", 
            path: "/global-networks/{GlobalNetworkId}/devices/{DeviceId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an existing global network. You must first delete all global network objects (devices, links, and sites), deregister all transit gateways, and delete any core networks.
    @Sendable
    public func deleteGlobalNetwork(_ input: DeleteGlobalNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteGlobalNetworkResponse {
        return try await self.client.execute(
            operation: "DeleteGlobalNetwork", 
            path: "/global-networks/{GlobalNetworkId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an existing link. You must first disassociate the link from any devices and customer gateways.
    @Sendable
    public func deleteLink(_ input: DeleteLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLinkResponse {
        return try await self.client.execute(
            operation: "DeleteLink", 
            path: "/global-networks/{GlobalNetworkId}/links/{LinkId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an existing peering connection.
    @Sendable
    public func deletePeering(_ input: DeletePeeringRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePeeringResponse {
        return try await self.client.execute(
            operation: "DeletePeering", 
            path: "/peerings/{PeeringId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a resource policy for the specified resource. This revokes the access of the principals specified in the resource policy.
    @Sendable
    public func deleteResourcePolicy(_ input: DeleteResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteResourcePolicyResponse {
        return try await self.client.execute(
            operation: "DeleteResourcePolicy", 
            path: "/resource-policy/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an existing site. The site cannot be associated with any device or link.
    @Sendable
    public func deleteSite(_ input: DeleteSiteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSiteResponse {
        return try await self.client.execute(
            operation: "DeleteSite", 
            path: "/global-networks/{GlobalNetworkId}/sites/{SiteId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deregisters a transit gateway from your global network. This action does not delete your transit gateway, or modify any of its attachments. This action removes any customer gateway associations.
    @Sendable
    public func deregisterTransitGateway(_ input: DeregisterTransitGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterTransitGatewayResponse {
        return try await self.client.execute(
            operation: "DeregisterTransitGateway", 
            path: "/global-networks/{GlobalNetworkId}/transit-gateway-registrations/{TransitGatewayArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes one or more global networks. By default, all global networks are described. To describe the objects in your global network, you must use the appropriate Get* action. For example, to list the transit gateways in your global network, use GetTransitGatewayRegistrations.
    @Sendable
    public func describeGlobalNetworks(_ input: DescribeGlobalNetworksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeGlobalNetworksResponse {
        return try await self.client.execute(
            operation: "DescribeGlobalNetworks", 
            path: "/global-networks", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates a core network Connect peer from a device and a link.
    @Sendable
    public func disassociateConnectPeer(_ input: DisassociateConnectPeerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateConnectPeerResponse {
        return try await self.client.execute(
            operation: "DisassociateConnectPeer", 
            path: "/global-networks/{GlobalNetworkId}/connect-peer-associations/{ConnectPeerId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates a customer gateway from a device and a link.
    @Sendable
    public func disassociateCustomerGateway(_ input: DisassociateCustomerGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateCustomerGatewayResponse {
        return try await self.client.execute(
            operation: "DisassociateCustomerGateway", 
            path: "/global-networks/{GlobalNetworkId}/customer-gateway-associations/{CustomerGatewayArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates an existing device from a link. You must first disassociate any customer gateways that are associated with the link.
    @Sendable
    public func disassociateLink(_ input: DisassociateLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateLinkResponse {
        return try await self.client.execute(
            operation: "DisassociateLink", 
            path: "/global-networks/{GlobalNetworkId}/link-associations", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates a transit gateway Connect peer from a device and link.
    @Sendable
    public func disassociateTransitGatewayConnectPeer(_ input: DisassociateTransitGatewayConnectPeerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateTransitGatewayConnectPeerResponse {
        return try await self.client.execute(
            operation: "DisassociateTransitGatewayConnectPeer", 
            path: "/global-networks/{GlobalNetworkId}/transit-gateway-connect-peer-associations/{TransitGatewayConnectPeerArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Executes a change set on your core network. Deploys changes globally based on the policy submitted..
    @Sendable
    public func executeCoreNetworkChangeSet(_ input: ExecuteCoreNetworkChangeSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteCoreNetworkChangeSetResponse {
        return try await self.client.execute(
            operation: "ExecuteCoreNetworkChangeSet", 
            path: "/core-networks/{CoreNetworkId}/core-network-change-sets/{PolicyVersionId}/execute", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a core network Connect attachment.
    @Sendable
    public func getConnectAttachment(_ input: GetConnectAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConnectAttachmentResponse {
        return try await self.client.execute(
            operation: "GetConnectAttachment", 
            path: "/connect-attachments/{AttachmentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a core network Connect peer.
    @Sendable
    public func getConnectPeer(_ input: GetConnectPeerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConnectPeerResponse {
        return try await self.client.execute(
            operation: "GetConnectPeer", 
            path: "/connect-peers/{ConnectPeerId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a core network Connect peer associations.
    @Sendable
    public func getConnectPeerAssociations(_ input: GetConnectPeerAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConnectPeerAssociationsResponse {
        return try await self.client.execute(
            operation: "GetConnectPeerAssociations", 
            path: "/global-networks/{GlobalNetworkId}/connect-peer-associations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about one or more of your connections in a global network.
    @Sendable
    public func getConnections(_ input: GetConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConnectionsResponse {
        return try await self.client.execute(
            operation: "GetConnections", 
            path: "/global-networks/{GlobalNetworkId}/connections", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the LIVE policy for a core network.
    @Sendable
    public func getCoreNetwork(_ input: GetCoreNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCoreNetworkResponse {
        return try await self.client.execute(
            operation: "GetCoreNetwork", 
            path: "/core-networks/{CoreNetworkId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a core network change event.
    @Sendable
    public func getCoreNetworkChangeEvents(_ input: GetCoreNetworkChangeEventsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCoreNetworkChangeEventsResponse {
        return try await self.client.execute(
            operation: "GetCoreNetworkChangeEvents", 
            path: "/core-networks/{CoreNetworkId}/core-network-change-events/{PolicyVersionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a change set between the LIVE core network policy and a submitted policy.
    @Sendable
    public func getCoreNetworkChangeSet(_ input: GetCoreNetworkChangeSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCoreNetworkChangeSetResponse {
        return try await self.client.execute(
            operation: "GetCoreNetworkChangeSet", 
            path: "/core-networks/{CoreNetworkId}/core-network-change-sets/{PolicyVersionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details about a core network policy. You can get details about your current live policy or any previous policy version.
    @Sendable
    public func getCoreNetworkPolicy(_ input: GetCoreNetworkPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCoreNetworkPolicyResponse {
        return try await self.client.execute(
            operation: "GetCoreNetworkPolicy", 
            path: "/core-networks/{CoreNetworkId}/core-network-policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the association information for customer gateways that are associated with devices and links in your global network.
    @Sendable
    public func getCustomerGatewayAssociations(_ input: GetCustomerGatewayAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCustomerGatewayAssociationsResponse {
        return try await self.client.execute(
            operation: "GetCustomerGatewayAssociations", 
            path: "/global-networks/{GlobalNetworkId}/customer-gateway-associations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about one or more of your devices in a global network.
    @Sendable
    public func getDevices(_ input: GetDevicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDevicesResponse {
        return try await self.client.execute(
            operation: "GetDevices", 
            path: "/global-networks/{GlobalNetworkId}/devices", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the link associations for a device or a link. Either the device ID or the link ID must be specified.
    @Sendable
    public func getLinkAssociations(_ input: GetLinkAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLinkAssociationsResponse {
        return try await self.client.execute(
            operation: "GetLinkAssociations", 
            path: "/global-networks/{GlobalNetworkId}/link-associations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about one or more links in a specified global network. If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.
    @Sendable
    public func getLinks(_ input: GetLinksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLinksResponse {
        return try await self.client.execute(
            operation: "GetLinks", 
            path: "/global-networks/{GlobalNetworkId}/links", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the count of network resources, by resource type, for the specified global network.
    @Sendable
    public func getNetworkResourceCounts(_ input: GetNetworkResourceCountsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNetworkResourceCountsResponse {
        return try await self.client.execute(
            operation: "GetNetworkResourceCounts", 
            path: "/global-networks/{GlobalNetworkId}/network-resource-count", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the network resource relationships for the specified global network.
    @Sendable
    public func getNetworkResourceRelationships(_ input: GetNetworkResourceRelationshipsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNetworkResourceRelationshipsResponse {
        return try await self.client.execute(
            operation: "GetNetworkResourceRelationships", 
            path: "/global-networks/{GlobalNetworkId}/network-resource-relationships", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes the network resources for the specified global network. The results include information from the corresponding Describe call for the resource, minus any sensitive information such as pre-shared keys.
    @Sendable
    public func getNetworkResources(_ input: GetNetworkResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNetworkResourcesResponse {
        return try await self.client.execute(
            operation: "GetNetworkResources", 
            path: "/global-networks/{GlobalNetworkId}/network-resources", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the network routes of the specified global network.
    @Sendable
    public func getNetworkRoutes(_ input: GetNetworkRoutesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNetworkRoutesResponse {
        return try await self.client.execute(
            operation: "GetNetworkRoutes", 
            path: "/global-networks/{GlobalNetworkId}/network-routes", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the network telemetry of the specified global network.
    @Sendable
    public func getNetworkTelemetry(_ input: GetNetworkTelemetryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNetworkTelemetryResponse {
        return try await self.client.execute(
            operation: "GetNetworkTelemetry", 
            path: "/global-networks/{GlobalNetworkId}/network-telemetry", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a resource policy.
    @Sendable
    public func getResourcePolicy(_ input: GetResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourcePolicyResponse {
        return try await self.client.execute(
            operation: "GetResourcePolicy", 
            path: "/resource-policy/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about the specified route analysis.
    @Sendable
    public func getRouteAnalysis(_ input: GetRouteAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRouteAnalysisResponse {
        return try await self.client.execute(
            operation: "GetRouteAnalysis", 
            path: "/global-networks/{GlobalNetworkId}/route-analyses/{RouteAnalysisId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a site-to-site VPN attachment.
    @Sendable
    public func getSiteToSiteVpnAttachment(_ input: GetSiteToSiteVpnAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSiteToSiteVpnAttachmentResponse {
        return try await self.client.execute(
            operation: "GetSiteToSiteVpnAttachment", 
            path: "/site-to-site-vpn-attachments/{AttachmentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about one or more of your sites in a global network.
    @Sendable
    public func getSites(_ input: GetSitesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSitesResponse {
        return try await self.client.execute(
            operation: "GetSites", 
            path: "/global-networks/{GlobalNetworkId}/sites", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about one or more of your transit gateway Connect peer associations in a global network.
    @Sendable
    public func getTransitGatewayConnectPeerAssociations(_ input: GetTransitGatewayConnectPeerAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayConnectPeerAssociationsResponse {
        return try await self.client.execute(
            operation: "GetTransitGatewayConnectPeerAssociations", 
            path: "/global-networks/{GlobalNetworkId}/transit-gateway-connect-peer-associations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a transit gateway peer.
    @Sendable
    public func getTransitGatewayPeering(_ input: GetTransitGatewayPeeringRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayPeeringResponse {
        return try await self.client.execute(
            operation: "GetTransitGatewayPeering", 
            path: "/transit-gateway-peerings/{PeeringId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets information about the transit gateway registrations in a specified global network.
    @Sendable
    public func getTransitGatewayRegistrations(_ input: GetTransitGatewayRegistrationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayRegistrationsResponse {
        return try await self.client.execute(
            operation: "GetTransitGatewayRegistrations", 
            path: "/global-networks/{GlobalNetworkId}/transit-gateway-registrations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a transit gateway route table attachment.
    @Sendable
    public func getTransitGatewayRouteTableAttachment(_ input: GetTransitGatewayRouteTableAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayRouteTableAttachmentResponse {
        return try await self.client.execute(
            operation: "GetTransitGatewayRouteTableAttachment", 
            path: "/transit-gateway-route-table-attachments/{AttachmentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a VPC attachment.
    @Sendable
    public func getVpcAttachment(_ input: GetVpcAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVpcAttachmentResponse {
        return try await self.client.execute(
            operation: "GetVpcAttachment", 
            path: "/vpc-attachments/{AttachmentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of core network attachments.
    @Sendable
    public func listAttachments(_ input: ListAttachmentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAttachmentsResponse {
        return try await self.client.execute(
            operation: "ListAttachments", 
            path: "/attachments", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of core network Connect peers.
    @Sendable
    public func listConnectPeers(_ input: ListConnectPeersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConnectPeersResponse {
        return try await self.client.execute(
            operation: "ListConnectPeers", 
            path: "/connect-peers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of core network policy versions.
    @Sendable
    public func listCoreNetworkPolicyVersions(_ input: ListCoreNetworkPolicyVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCoreNetworkPolicyVersionsResponse {
        return try await self.client.execute(
            operation: "ListCoreNetworkPolicyVersions", 
            path: "/core-networks/{CoreNetworkId}/core-network-policy-versions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of owned and shared core networks.
    @Sendable
    public func listCoreNetworks(_ input: ListCoreNetworksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCoreNetworksResponse {
        return try await self.client.execute(
            operation: "ListCoreNetworks", 
            path: "/core-networks", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets the status of the Service Linked Role (SLR) deployment for the accounts in a given Amazon Web Services Organization.
    @Sendable
    public func listOrganizationServiceAccessStatus(_ input: ListOrganizationServiceAccessStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOrganizationServiceAccessStatusResponse {
        return try await self.client.execute(
            operation: "ListOrganizationServiceAccessStatus", 
            path: "/organizations/service-access", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the peerings for a core network.
    @Sendable
    public func listPeerings(_ input: ListPeeringsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPeeringsResponse {
        return try await self.client.execute(
            operation: "ListPeerings", 
            path: "/peerings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the tags for a specified resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and the submitted policy.
    @Sendable
    public func putCoreNetworkPolicy(_ input: PutCoreNetworkPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutCoreNetworkPolicyResponse {
        return try await self.client.execute(
            operation: "PutCoreNetworkPolicy", 
            path: "/core-networks/{CoreNetworkId}/core-network-policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates or updates a resource policy.
    @Sendable
    public func putResourcePolicy(_ input: PutResourcePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutResourcePolicyResponse {
        return try await self.client.execute(
            operation: "PutResourcePolicy", 
            path: "/resource-policy/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Registers a transit gateway in your global network. Not all Regions support transit gateways for global networks. For a list of the supported Regions, see Region Availability in the Amazon Web Services Transit Gateways for Global Networks User Guide. The transit gateway can be in any of the supported Amazon Web Services Regions, but it must be owned by the same Amazon Web Services account that owns the global network. You cannot register a transit gateway in more than one global network.
    @Sendable
    public func registerTransitGateway(_ input: RegisterTransitGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterTransitGatewayResponse {
        return try await self.client.execute(
            operation: "RegisterTransitGateway", 
            path: "/global-networks/{GlobalNetworkId}/transit-gateway-registrations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Rejects a core network attachment request.
    @Sendable
    public func rejectAttachment(_ input: RejectAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectAttachmentResponse {
        return try await self.client.execute(
            operation: "RejectAttachment", 
            path: "/attachments/{AttachmentId}/reject", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Restores a previous policy version as a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and restored policy.
    @Sendable
    public func restoreCoreNetworkPolicyVersion(_ input: RestoreCoreNetworkPolicyVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreCoreNetworkPolicyVersionResponse {
        return try await self.client.execute(
            operation: "RestoreCoreNetworkPolicyVersion", 
            path: "/core-networks/{CoreNetworkId}/core-network-policy-versions/{PolicyVersionId}/restore", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Enables the Network Manager service for an Amazon Web Services Organization. This can only be called by a management account within the organization.
    @Sendable
    public func startOrganizationServiceAccessUpdate(_ input: StartOrganizationServiceAccessUpdateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartOrganizationServiceAccessUpdateResponse {
        return try await self.client.execute(
            operation: "StartOrganizationServiceAccessUpdate", 
            path: "/organizations/service-access", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts analyzing the routing path between the specified source and destination. For more information,  see Route Analyzer.
    @Sendable
    public func startRouteAnalysis(_ input: StartRouteAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartRouteAnalysisResponse {
        return try await self.client.execute(
            operation: "StartRouteAnalysis", 
            path: "/global-networks/{GlobalNetworkId}/route-analyses", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Tags a specified resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes tags from a specified resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the information for an existing connection. To remove information for any of the parameters, specify an empty string.
    @Sendable
    public func updateConnection(_ input: UpdateConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateConnectionResponse {
        return try await self.client.execute(
            operation: "UpdateConnection", 
            path: "/global-networks/{GlobalNetworkId}/connections/{ConnectionId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the description of a core network.
    @Sendable
    public func updateCoreNetwork(_ input: UpdateCoreNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCoreNetworkResponse {
        return try await self.client.execute(
            operation: "UpdateCoreNetwork", 
            path: "/core-networks/{CoreNetworkId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the details for an existing device. To remove information for any of the parameters, specify an empty string.
    @Sendable
    public func updateDevice(_ input: UpdateDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDeviceResponse {
        return try await self.client.execute(
            operation: "UpdateDevice", 
            path: "/global-networks/{GlobalNetworkId}/devices/{DeviceId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing global network. To remove information for any of the parameters, specify an empty string.
    @Sendable
    public func updateGlobalNetwork(_ input: UpdateGlobalNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateGlobalNetworkResponse {
        return try await self.client.execute(
            operation: "UpdateGlobalNetwork", 
            path: "/global-networks/{GlobalNetworkId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the details for an existing link. To remove information for any of the parameters, specify an empty string.
    @Sendable
    public func updateLink(_ input: UpdateLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateLinkResponse {
        return try await self.client.execute(
            operation: "UpdateLink", 
            path: "/global-networks/{GlobalNetworkId}/links/{LinkId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the resource metadata for the specified global network.
    @Sendable
    public func updateNetworkResourceMetadata(_ input: UpdateNetworkResourceMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateNetworkResourceMetadataResponse {
        return try await self.client.execute(
            operation: "UpdateNetworkResourceMetadata", 
            path: "/global-networks/{GlobalNetworkId}/network-resources/{ResourceArn}/metadata", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the information for an existing site. To remove information for any of the parameters, specify an empty string.
    @Sendable
    public func updateSite(_ input: UpdateSiteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSiteResponse {
        return try await self.client.execute(
            operation: "UpdateSite", 
            path: "/global-networks/{GlobalNetworkId}/sites/{SiteId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a VPC attachment.
    @Sendable
    public func updateVpcAttachment(_ input: UpdateVpcAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateVpcAttachmentResponse {
        return try await self.client.execute(
            operation: "UpdateVpcAttachment", 
            path: "/vpc-attachments/{AttachmentId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension NetworkManager {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: NetworkManager, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension NetworkManager {
    /// Describes one or more global networks. By default, all global networks are described. To describe the objects in your global network, you must use the appropriate Get* action. For example, to list the transit gateways in your global network, use GetTransitGatewayRegistrations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeGlobalNetworksPaginator(
        _ input: DescribeGlobalNetworksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeGlobalNetworksRequest, DescribeGlobalNetworksResponse> {
        return .init(
            input: input,
            command: self.describeGlobalNetworks,
            inputKey: \DescribeGlobalNetworksRequest.nextToken,
            outputKey: \DescribeGlobalNetworksResponse.nextToken,
            logger: logger
        )
    }

    /// Returns information about a core network Connect peer associations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getConnectPeerAssociationsPaginator(
        _ input: GetConnectPeerAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetConnectPeerAssociationsRequest, GetConnectPeerAssociationsResponse> {
        return .init(
            input: input,
            command: self.getConnectPeerAssociations,
            inputKey: \GetConnectPeerAssociationsRequest.nextToken,
            outputKey: \GetConnectPeerAssociationsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets information about one or more of your connections in a global network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getConnectionsPaginator(
        _ input: GetConnectionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetConnectionsRequest, GetConnectionsResponse> {
        return .init(
            input: input,
            command: self.getConnections,
            inputKey: \GetConnectionsRequest.nextToken,
            outputKey: \GetConnectionsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns information about a core network change event.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getCoreNetworkChangeEventsPaginator(
        _ input: GetCoreNetworkChangeEventsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetCoreNetworkChangeEventsRequest, GetCoreNetworkChangeEventsResponse> {
        return .init(
            input: input,
            command: self.getCoreNetworkChangeEvents,
            inputKey: \GetCoreNetworkChangeEventsRequest.nextToken,
            outputKey: \GetCoreNetworkChangeEventsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a change set between the LIVE core network policy and a submitted policy.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getCoreNetworkChangeSetPaginator(
        _ input: GetCoreNetworkChangeSetRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetCoreNetworkChangeSetRequest, GetCoreNetworkChangeSetResponse> {
        return .init(
            input: input,
            command: self.getCoreNetworkChangeSet,
            inputKey: \GetCoreNetworkChangeSetRequest.nextToken,
            outputKey: \GetCoreNetworkChangeSetResponse.nextToken,
            logger: logger
        )
    }

    /// Gets the association information for customer gateways that are associated with devices and links in your global network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getCustomerGatewayAssociationsPaginator(
        _ input: GetCustomerGatewayAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetCustomerGatewayAssociationsRequest, GetCustomerGatewayAssociationsResponse> {
        return .init(
            input: input,
            command: self.getCustomerGatewayAssociations,
            inputKey: \GetCustomerGatewayAssociationsRequest.nextToken,
            outputKey: \GetCustomerGatewayAssociationsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets information about one or more of your devices in a global network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getDevicesPaginator(
        _ input: GetDevicesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetDevicesRequest, GetDevicesResponse> {
        return .init(
            input: input,
            command: self.getDevices,
            inputKey: \GetDevicesRequest.nextToken,
            outputKey: \GetDevicesResponse.nextToken,
            logger: logger
        )
    }

    /// Gets the link associations for a device or a link. Either the device ID or the link ID must be specified.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getLinkAssociationsPaginator(
        _ input: GetLinkAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetLinkAssociationsRequest, GetLinkAssociationsResponse> {
        return .init(
            input: input,
            command: self.getLinkAssociations,
            inputKey: \GetLinkAssociationsRequest.nextToken,
            outputKey: \GetLinkAssociationsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets information about one or more links in a specified global network. If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getLinksPaginator(
        _ input: GetLinksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetLinksRequest, GetLinksResponse> {
        return .init(
            input: input,
            command: self.getLinks,
            inputKey: \GetLinksRequest.nextToken,
            outputKey: \GetLinksResponse.nextToken,
            logger: logger
        )
    }

    /// Gets the count of network resources, by resource type, for the specified global network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getNetworkResourceCountsPaginator(
        _ input: GetNetworkResourceCountsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetNetworkResourceCountsRequest, GetNetworkResourceCountsResponse> {
        return .init(
            input: input,
            command: self.getNetworkResourceCounts,
            inputKey: \GetNetworkResourceCountsRequest.nextToken,
            outputKey: \GetNetworkResourceCountsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets the network resource relationships for the specified global network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getNetworkResourceRelationshipsPaginator(
        _ input: GetNetworkResourceRelationshipsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetNetworkResourceRelationshipsRequest, GetNetworkResourceRelationshipsResponse> {
        return .init(
            input: input,
            command: self.getNetworkResourceRelationships,
            inputKey: \GetNetworkResourceRelationshipsRequest.nextToken,
            outputKey: \GetNetworkResourceRelationshipsResponse.nextToken,
            logger: logger
        )
    }

    /// Describes the network resources for the specified global network. The results include information from the corresponding Describe call for the resource, minus any sensitive information such as pre-shared keys.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getNetworkResourcesPaginator(
        _ input: GetNetworkResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetNetworkResourcesRequest, GetNetworkResourcesResponse> {
        return .init(
            input: input,
            command: self.getNetworkResources,
            inputKey: \GetNetworkResourcesRequest.nextToken,
            outputKey: \GetNetworkResourcesResponse.nextToken,
            logger: logger
        )
    }

    /// Gets the network telemetry of the specified global network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getNetworkTelemetryPaginator(
        _ input: GetNetworkTelemetryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetNetworkTelemetryRequest, GetNetworkTelemetryResponse> {
        return .init(
            input: input,
            command: self.getNetworkTelemetry,
            inputKey: \GetNetworkTelemetryRequest.nextToken,
            outputKey: \GetNetworkTelemetryResponse.nextToken,
            logger: logger
        )
    }

    /// Gets information about one or more of your sites in a global network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getSitesPaginator(
        _ input: GetSitesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetSitesRequest, GetSitesResponse> {
        return .init(
            input: input,
            command: self.getSites,
            inputKey: \GetSitesRequest.nextToken,
            outputKey: \GetSitesResponse.nextToken,
            logger: logger
        )
    }

    /// Gets information about one or more of your transit gateway Connect peer associations in a global network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getTransitGatewayConnectPeerAssociationsPaginator(
        _ input: GetTransitGatewayConnectPeerAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayConnectPeerAssociationsRequest, GetTransitGatewayConnectPeerAssociationsResponse> {
        return .init(
            input: input,
            command: self.getTransitGatewayConnectPeerAssociations,
            inputKey: \GetTransitGatewayConnectPeerAssociationsRequest.nextToken,
            outputKey: \GetTransitGatewayConnectPeerAssociationsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets information about the transit gateway registrations in a specified global network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getTransitGatewayRegistrationsPaginator(
        _ input: GetTransitGatewayRegistrationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayRegistrationsRequest, GetTransitGatewayRegistrationsResponse> {
        return .init(
            input: input,
            command: self.getTransitGatewayRegistrations,
            inputKey: \GetTransitGatewayRegistrationsRequest.nextToken,
            outputKey: \GetTransitGatewayRegistrationsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of core network attachments.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAttachmentsPaginator(
        _ input: ListAttachmentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAttachmentsRequest, ListAttachmentsResponse> {
        return .init(
            input: input,
            command: self.listAttachments,
            inputKey: \ListAttachmentsRequest.nextToken,
            outputKey: \ListAttachmentsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of core network Connect peers.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listConnectPeersPaginator(
        _ input: ListConnectPeersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConnectPeersRequest, ListConnectPeersResponse> {
        return .init(
            input: input,
            command: self.listConnectPeers,
            inputKey: \ListConnectPeersRequest.nextToken,
            outputKey: \ListConnectPeersResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of core network policy versions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCoreNetworkPolicyVersionsPaginator(
        _ input: ListCoreNetworkPolicyVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCoreNetworkPolicyVersionsRequest, ListCoreNetworkPolicyVersionsResponse> {
        return .init(
            input: input,
            command: self.listCoreNetworkPolicyVersions,
            inputKey: \ListCoreNetworkPolicyVersionsRequest.nextToken,
            outputKey: \ListCoreNetworkPolicyVersionsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of owned and shared core networks.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCoreNetworksPaginator(
        _ input: ListCoreNetworksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCoreNetworksRequest, ListCoreNetworksResponse> {
        return .init(
            input: input,
            command: self.listCoreNetworks,
            inputKey: \ListCoreNetworksRequest.nextToken,
            outputKey: \ListCoreNetworksResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the peerings for a core network.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPeeringsPaginator(
        _ input: ListPeeringsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPeeringsRequest, ListPeeringsResponse> {
        return .init(
            input: input,
            command: self.listPeerings,
            inputKey: \ListPeeringsRequest.nextToken,
            outputKey: \ListPeeringsResponse.nextToken,
            logger: logger
        )
    }
}

extension NetworkManager.DescribeGlobalNetworksRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.DescribeGlobalNetworksRequest {
        return .init(
            globalNetworkIds: self.globalNetworkIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension NetworkManager.GetConnectPeerAssociationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetConnectPeerAssociationsRequest {
        return .init(
            connectPeerIds: self.connectPeerIds,
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension NetworkManager.GetConnectionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetConnectionsRequest {
        return .init(
            connectionIds: self.connectionIds,
            deviceId: self.deviceId,
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension NetworkManager.GetCoreNetworkChangeEventsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetCoreNetworkChangeEventsRequest {
        return .init(
            coreNetworkId: self.coreNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            policyVersionId: self.policyVersionId
        )
    }
}

extension NetworkManager.GetCoreNetworkChangeSetRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetCoreNetworkChangeSetRequest {
        return .init(
            coreNetworkId: self.coreNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            policyVersionId: self.policyVersionId
        )
    }
}

extension NetworkManager.GetCustomerGatewayAssociationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetCustomerGatewayAssociationsRequest {
        return .init(
            customerGatewayArns: self.customerGatewayArns,
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension NetworkManager.GetDevicesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetDevicesRequest {
        return .init(
            deviceIds: self.deviceIds,
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            siteId: self.siteId
        )
    }
}

extension NetworkManager.GetLinkAssociationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetLinkAssociationsRequest {
        return .init(
            deviceId: self.deviceId,
            globalNetworkId: self.globalNetworkId,
            linkId: self.linkId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension NetworkManager.GetLinksRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetLinksRequest {
        return .init(
            globalNetworkId: self.globalNetworkId,
            linkIds: self.linkIds,
            maxResults: self.maxResults,
            nextToken: token,
            provider: self.provider,
            siteId: self.siteId,
            type: self.type
        )
    }
}

extension NetworkManager.GetNetworkResourceCountsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetNetworkResourceCountsRequest {
        return .init(
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            resourceType: self.resourceType
        )
    }
}

extension NetworkManager.GetNetworkResourceRelationshipsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetNetworkResourceRelationshipsRequest {
        return .init(
            accountId: self.accountId,
            awsRegion: self.awsRegion,
            coreNetworkId: self.coreNetworkId,
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            registeredGatewayArn: self.registeredGatewayArn,
            resourceArn: self.resourceArn,
            resourceType: self.resourceType
        )
    }
}

extension NetworkManager.GetNetworkResourcesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetNetworkResourcesRequest {
        return .init(
            accountId: self.accountId,
            awsRegion: self.awsRegion,
            coreNetworkId: self.coreNetworkId,
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            registeredGatewayArn: self.registeredGatewayArn,
            resourceArn: self.resourceArn,
            resourceType: self.resourceType
        )
    }
}

extension NetworkManager.GetNetworkTelemetryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetNetworkTelemetryRequest {
        return .init(
            accountId: self.accountId,
            awsRegion: self.awsRegion,
            coreNetworkId: self.coreNetworkId,
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            registeredGatewayArn: self.registeredGatewayArn,
            resourceArn: self.resourceArn,
            resourceType: self.resourceType
        )
    }
}

extension NetworkManager.GetSitesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetSitesRequest {
        return .init(
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            siteIds: self.siteIds
        )
    }
}

extension NetworkManager.GetTransitGatewayConnectPeerAssociationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetTransitGatewayConnectPeerAssociationsRequest {
        return .init(
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayConnectPeerArns: self.transitGatewayConnectPeerArns
        )
    }
}

extension NetworkManager.GetTransitGatewayRegistrationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.GetTransitGatewayRegistrationsRequest {
        return .init(
            globalNetworkId: self.globalNetworkId,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayArns: self.transitGatewayArns
        )
    }
}

extension NetworkManager.ListAttachmentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.ListAttachmentsRequest {
        return .init(
            attachmentType: self.attachmentType,
            coreNetworkId: self.coreNetworkId,
            edgeLocation: self.edgeLocation,
            maxResults: self.maxResults,
            nextToken: token,
            state: self.state
        )
    }
}

extension NetworkManager.ListConnectPeersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.ListConnectPeersRequest {
        return .init(
            connectAttachmentId: self.connectAttachmentId,
            coreNetworkId: self.coreNetworkId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension NetworkManager.ListCoreNetworkPolicyVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.ListCoreNetworkPolicyVersionsRequest {
        return .init(
            coreNetworkId: self.coreNetworkId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension NetworkManager.ListCoreNetworksRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.ListCoreNetworksRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension NetworkManager.ListPeeringsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> NetworkManager.ListPeeringsRequest {
        return .init(
            coreNetworkId: self.coreNetworkId,
            edgeLocation: self.edgeLocation,
            maxResults: self.maxResults,
            nextToken: token,
            peeringType: self.peeringType,
            state: self.state
        )
    }
}
