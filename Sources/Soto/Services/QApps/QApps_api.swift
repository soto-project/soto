//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS QApps service.
///
/// The Amazon Q Apps feature capability within Amazon Q Business allows web experience  users to create lightweight, purpose-built AI apps to fulfill specific tasks from  within their web experience. For example, users can create an Q Appthat exclusively  generates marketing-related content to improve your marketing team's productivity or a  Q App for marketing content-generation like writing customer emails and creating  promotional content using a certain style of voice, tone, and branding.  For more information, see Amazon Q App in the  Amazon Q Business User Guide.
public struct QApps: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the QApps client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "QApps",
            serviceIdentifier: "data.qapps",
            signingName: "qapps",
            serviceProtocol: .restjson,
            apiVersion: "2023-11-27",
            endpoint: endpoint,
            errorType: QAppsErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Associates a rating or review for a library item with the user submitting  the request. This increments the rating count for the specified library item.
    @Sendable
    public func associateLibraryItemReview(_ input: AssociateLibraryItemReviewInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "AssociateLibraryItemReview", 
            path: "/catalog.associateItemRating", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// This operation creates a link between the user's identity calling the operation and a specific Q App. This is useful to mark the Q App as a favorite for the user if the user doesn't own the Amazon Q App so they can still run it and see it in their inventory of Q Apps.
    @Sendable
    public func associateQAppWithUser(_ input: AssociateQAppWithUserInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "AssociateQAppWithUser", 
            path: "/apps.install", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new library item for an Amazon Q App, allowing it to be discovered and  used by other allowed users.
    @Sendable
    public func createLibraryItem(_ input: CreateLibraryItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLibraryItemOutput {
        return try await self.client.execute(
            operation: "CreateLibraryItem", 
            path: "/catalog.createItem", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new Amazon Q App based on the provided definition. The Q App definition specifies the cards and flow of the Q App. This operation also calculates the dependencies between the cards by inspecting the references in the prompts.
    @Sendable
    public func createQApp(_ input: CreateQAppInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateQAppOutput {
        return try await self.client.execute(
            operation: "CreateQApp", 
            path: "/apps.create", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a library item for an Amazon Q App, removing it from the library  so it can no longer be discovered or used by other users.
    @Sendable
    public func deleteLibraryItem(_ input: DeleteLibraryItemInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteLibraryItem", 
            path: "/catalog.deleteItem", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon Q App owned by the user. If the Q App was previously published to the library, it is also removed from the library.
    @Sendable
    public func deleteQApp(_ input: DeleteQAppInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteQApp", 
            path: "/apps.delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes a rating or review previously submitted by the user for a library item.
    @Sendable
    public func disassociateLibraryItemReview(_ input: DisassociateLibraryItemReviewInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DisassociateLibraryItemReview", 
            path: "/catalog.disassociateItemRating", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates a Q App from a user removing the user's access to run the Q App.
    @Sendable
    public func disassociateQAppFromUser(_ input: DisassociateQAppFromUserInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DisassociateQAppFromUser", 
            path: "/apps.uninstall", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves details about a library item for an Amazon Q App, including its metadata,  categories, ratings, and usage statistics.
    @Sendable
    public func getLibraryItem(_ input: GetLibraryItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLibraryItemOutput {
        return try await self.client.execute(
            operation: "GetLibraryItem", 
            path: "/catalog.getItem", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the full details of an Q App, including its definition specifying the cards and flow.
    @Sendable
    public func getQApp(_ input: GetQAppInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQAppOutput {
        return try await self.client.execute(
            operation: "GetQApp", 
            path: "/apps.get", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the current state and results for an active session of an Amazon Q App.
    @Sendable
    public func getQAppSession(_ input: GetQAppSessionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQAppSessionOutput {
        return try await self.client.execute(
            operation: "GetQAppSession", 
            path: "/runtime.getQAppSession", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Uploads a file that can then be used either as a default in a  FileUploadCard from Q App definition or as a file that  is used inside a single Q App run. The purpose of the document is  determined by a scope parameter that indicates whether it is at the  app definition level or at the app session level.
    @Sendable
    public func importDocument(_ input: ImportDocumentInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportDocumentOutput {
        return try await self.client.execute(
            operation: "ImportDocument", 
            path: "/apps.importDocument", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the library items for Amazon Q Apps that are published and available for users in your Amazon Web Services account.
    @Sendable
    public func listLibraryItems(_ input: ListLibraryItemsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLibraryItemsOutput {
        return try await self.client.execute(
            operation: "ListLibraryItems", 
            path: "/catalog.list", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the Amazon Q Apps owned by or associated with the user either because  they created it or because they used it from the library in the past. The user  identity is extracted from the credentials used to invoke this operation..
    @Sendable
    public func listQApps(_ input: ListQAppsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListQAppsOutput {
        return try await self.client.execute(
            operation: "ListQApps", 
            path: "/apps.list", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the tags associated with an Amazon Q Apps resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceARN}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Generates an Amazon Q App definition based on either a conversation or  a problem statement provided as input.The resulting app definition can be used to call CreateQApp. This API doesn't create  Amazon Q Apps directly.
    @Sendable
    public func predictQApp(_ input: PredictQAppInput, logger: Logger = AWSClient.loggingDisabled) async throws -> PredictQAppOutput {
        return try await self.client.execute(
            operation: "PredictQApp", 
            path: "/apps.predictQApp", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Starts a new session for an Amazon Q App, allowing inputs to be provided  and the app to be run.  Each Q App session will be condensed into a single conversation  in the web experience.
    @Sendable
    public func startQAppSession(_ input: StartQAppSessionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> StartQAppSessionOutput {
        return try await self.client.execute(
            operation: "StartQAppSession", 
            path: "/runtime.startQAppSession", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops an active session for an Amazon Q App.This deletes all data  related to the session and makes it invalid for future uses. The  results of the session will be persisted as part of the conversation.
    @Sendable
    public func stopQAppSession(_ input: StopQAppSessionInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "StopQAppSession", 
            path: "/runtime.deleteMiniAppRun", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Associates tags with an Amazon Q Apps resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceARN}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates tags from an Amazon Q Apps resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceARN}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the metadata and status of a library item for an Amazon Q App.
    @Sendable
    public func updateLibraryItem(_ input: UpdateLibraryItemInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateLibraryItemOutput {
        return try await self.client.execute(
            operation: "UpdateLibraryItem", 
            path: "/catalog.updateItem", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an existing Amazon Q App, allowing modifications to its title, description, and definition.
    @Sendable
    public func updateQApp(_ input: UpdateQAppInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateQAppOutput {
        return try await self.client.execute(
            operation: "UpdateQApp", 
            path: "/apps.update", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the session for a given Q App sessionId. This is only  valid when at least one card of the session is in the WAITING state.  Data for each WAITING card can be provided as input. If inputs  are not provided, the call will be accepted but session will not move forward.  Inputs for cards that are not in the WAITING status will be ignored.
    @Sendable
    public func updateQAppSession(_ input: UpdateQAppSessionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateQAppSessionOutput {
        return try await self.client.execute(
            operation: "UpdateQAppSession", 
            path: "/runtime.updateQAppSession", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension QApps {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: QApps, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension QApps {
    /// Lists the library items for Amazon Q Apps that are published and available for users in your Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLibraryItemsPaginator(
        _ input: ListLibraryItemsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLibraryItemsInput, ListLibraryItemsOutput> {
        return .init(
            input: input,
            command: self.listLibraryItems,
            inputKey: \ListLibraryItemsInput.nextToken,
            outputKey: \ListLibraryItemsOutput.nextToken,
            logger: logger
        )
    }

    /// Lists the Amazon Q Apps owned by or associated with the user either because  they created it or because they used it from the library in the past. The user  identity is extracted from the credentials used to invoke this operation..
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listQAppsPaginator(
        _ input: ListQAppsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListQAppsInput, ListQAppsOutput> {
        return .init(
            input: input,
            command: self.listQApps,
            inputKey: \ListQAppsInput.nextToken,
            outputKey: \ListQAppsOutput.nextToken,
            logger: logger
        )
    }
}

extension QApps.ListLibraryItemsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QApps.ListLibraryItemsInput {
        return .init(
            categoryId: self.categoryId,
            instanceId: self.instanceId,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension QApps.ListQAppsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> QApps.ListQAppsInput {
        return .init(
            instanceId: self.instanceId,
            limit: self.limit,
            nextToken: token
        )
    }
}
