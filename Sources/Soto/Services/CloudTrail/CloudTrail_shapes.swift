//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2022 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import Foundation
import SotoCore

extension CloudTrail {
    // MARK: Enums

    public enum DeliveryStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case accessDenied = "ACCESS_DENIED"
        case accessDeniedSigningFile = "ACCESS_DENIED_SIGNING_FILE"
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        case failedSigningFile = "FAILED_SIGNING_FILE"
        case pending = "PENDING"
        case resourceNotFound = "RESOURCE_NOT_FOUND"
        case success = "SUCCESS"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum DestinationType: String, CustomStringConvertible, Codable, _SotoSendable {
        case awsService = "AWS_SERVICE"
        case eventDataStore = "EVENT_DATA_STORE"
        public var description: String { return self.rawValue }
    }

    public enum EventCategory: String, CustomStringConvertible, Codable, _SotoSendable {
        case insight
        public var description: String { return self.rawValue }
    }

    public enum EventDataStoreStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case created = "CREATED"
        case enabled = "ENABLED"
        case pendingDeletion = "PENDING_DELETION"
        public var description: String { return self.rawValue }
    }

    public enum ImportFailureStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case failed = "FAILED"
        case retry = "RETRY"
        case succeeded = "SUCCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum ImportStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case inProgress = "IN_PROGRESS"
        case initializing = "INITIALIZING"
        case stopped = "STOPPED"
        public var description: String { return self.rawValue }
    }

    public enum InsightType: String, CustomStringConvertible, Codable, _SotoSendable {
        case apiCallRateInsight = "ApiCallRateInsight"
        case apiErrorRateInsight = "ApiErrorRateInsight"
        public var description: String { return self.rawValue }
    }

    public enum LookupAttributeKey: String, CustomStringConvertible, Codable, _SotoSendable {
        case accessKeyId = "AccessKeyId"
        case eventId = "EventId"
        case eventName = "EventName"
        case eventSource = "EventSource"
        case readOnly = "ReadOnly"
        case resourceName = "ResourceName"
        case resourceType = "ResourceType"
        case username = "Username"
        public var description: String { return self.rawValue }
    }

    public enum QueryStatus: String, CustomStringConvertible, Codable, _SotoSendable {
        case cancelled = "CANCELLED"
        case failed = "FAILED"
        case finished = "FINISHED"
        case queued = "QUEUED"
        case running = "RUNNING"
        case timedOut = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public enum ReadWriteType: String, CustomStringConvertible, Codable, _SotoSendable {
        case all = "All"
        case readOnly = "ReadOnly"
        case writeOnly = "WriteOnly"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AddTagsRequest: AWSEncodableShape {
        /// Specifies the ARN of the trail or event data store to which one or more tags will be added. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let resourceId: String
        /// Contains a list of tags, up to a limit of 50
        public let tagsList: [Tag]

        public init(resourceId: String, tagsList: [Tag]) {
            self.resourceId = resourceId
            self.tagsList = tagsList
        }

        public func validate(name: String) throws {
            try self.tagsList.forEach {
                try $0.validate(name: "\(name).tagsList[]")
            }
            try self.validate(self.tagsList, name: "tagsList", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagsList = "TagsList"
        }
    }

    public struct AddTagsResponse: AWSDecodableShape {
        public init() {}
    }

    public struct AdvancedEventSelector: AWSEncodableShape & AWSDecodableShape {
        /// Contains all selector statements in an advanced event selector.
        public let fieldSelectors: [AdvancedFieldSelector]
        /// An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".
        public let name: String?

        public init(fieldSelectors: [AdvancedFieldSelector], name: String? = nil) {
            self.fieldSelectors = fieldSelectors
            self.name = name
        }

        public func validate(name: String) throws {
            try self.fieldSelectors.forEach {
                try $0.validate(name: "\(name).fieldSelectors[]")
            }
            try self.validate(self.fieldSelectors, name: "fieldSelectors", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, max: 1000)
            try self.validate(self.name, name: "name", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case fieldSelectors = "FieldSelectors"
            case name = "Name"
        }
    }

    public struct AdvancedFieldSelector: AWSEncodableShape & AWSDecodableShape {
        /// An operator that includes events that match the last few characters of the event record field specified as the value of Field.
        public let endsWith: [String]?
        ///  An operator that includes events that match the exact value of the event record field specified as the value of Field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
        public let equals: [String]?
        ///  A field in an event record on which to filter events to be logged. Supported fields include readOnly, eventCategory,  eventSource (for management events), eventName, resources.type, and resources.ARN.      readOnly - Optional. Can be set to Equals a value of true or false. If you do not add this field, CloudTrail logs both read and write events. A value of true logs only read events. A value of false  logs only write events.     eventSource - For filtering management events only.  This can be set only to NotEquals kms.amazonaws.com.     eventName - Can use any operator. You can use it to ﬁlter in or ﬁlter out any data event logged to CloudTrail, such as PutBucket or GetSnapshotBlock. You can have multiple values for this ﬁeld, separated by commas.     eventCategory - This is required. It must be set to Equals, and  the value must be Management or Data.     resources.type - This ﬁeld is required. resources.type can only use the Equals operator, and the value can be one of the following:    AWS::S3::Object     AWS::Lambda::Function     AWS::DynamoDB::Table     AWS::S3Outposts::Object     AWS::ManagedBlockchain::Node     AWS::S3ObjectLambda::AccessPoint     AWS::EC2::Snapshot     AWS::S3::AccessPoint     AWS::DynamoDB::Stream     AWS::Glue::Table     You can have only one resources.type ﬁeld per selector. To log data events on more than one resource type, add another selector.     resources.ARN - You can use any operator with resources.ARN, but if you use Equals or NotEquals, the value must exactly match the ARN of a valid resource of the type you've speciﬁed in the template as the value of resources.type. For example, if resources.type equals AWS::S3::Object, the ARN must be in one of the following formats. To log all data events for all objects in a specific S3 bucket, use the StartsWith operator, and include only the bucket ARN as the matching value. The trailing slash is intentional; do not exclude it. Replace the text between less than and greater than symbols (<>) with resource-specific information.     arn::s3:::/     arn::s3::://    When resources.type equals AWS::S3::AccessPoint, and the operator is set to Equals or NotEquals, the ARN must be in one of the following formats. To log events on all objects in an S3 access point, we recommend that you use only the access point ARN, don’t include the object path, and use the StartsWith or NotStartsWith operators.    arn::s3:::accesspoint/     arn::s3:::accesspoint//object/    When resources.type equals AWS::Lambda::Function, and the operator is set to Equals or NotEquals, the ARN must be in the following format:    arn::lambda:::function:    When resources.type equals AWS::DynamoDB::Table, and the operator is set to Equals or NotEquals, the ARN must be in the following format:    arn::dynamodb:::table/    When resources.type equals AWS::S3Outposts::Object, and the operator  is set to Equals or NotEquals, the ARN must be in the following format:    arn::s3-outposts:::    When resources.type equals AWS::ManagedBlockchain::Node, and the operator is set to Equals or NotEquals, the ARN must be in the following format:    arn::managedblockchain:::nodes/    When resources.type equals AWS::S3ObjectLambda::AccessPoint, and the operator is set to Equals or NotEquals, the ARN must be in the following format:    arn::s3-object-lambda:::accesspoint/    When resources.type equals AWS::EC2::Snapshot, and the operator is set to Equals or NotEquals, the ARN must be in the following format:    arn::ec2:::snapshot/    When resources.type equals AWS::DynamoDB::Stream, and the operator is set to Equals or NotEquals, the ARN must be in the following format:    arn::dynamodb:::table//stream/    When resources.type equals AWS::Glue::Table, and the operator is set to Equals or NotEquals, the ARN must be in the following format:    arn::glue:::table//
        public let field: String
        ///  An operator that excludes events that match the last few characters of the event record field specified as the value of Field.
        public let notEndsWith: [String]?
        ///  An operator that excludes events that match the exact value of the event record field specified as the value of Field.
        public let notEquals: [String]?
        ///  An operator that excludes events that match the first few characters of the event record field specified as the value of Field.
        public let notStartsWith: [String]?
        /// An operator that includes events that match the first few characters of the event record field specified as the value of Field.
        public let startsWith: [String]?

        public init(endsWith: [String]? = nil, equals: [String]? = nil, field: String, notEndsWith: [String]? = nil, notEquals: [String]? = nil, notStartsWith: [String]? = nil, startsWith: [String]? = nil) {
            self.endsWith = endsWith
            self.equals = equals
            self.field = field
            self.notEndsWith = notEndsWith
            self.notEquals = notEquals
            self.notStartsWith = notStartsWith
            self.startsWith = startsWith
        }

        public func validate(name: String) throws {
            try self.endsWith?.forEach {
                try validate($0, name: "endsWith[]", parent: name, max: 2048)
                try validate($0, name: "endsWith[]", parent: name, min: 1)
                try validate($0, name: "endsWith[]", parent: name, pattern: "^.+$")
            }
            try self.validate(self.endsWith, name: "endsWith", parent: name, min: 1)
            try self.equals?.forEach {
                try validate($0, name: "equals[]", parent: name, max: 2048)
                try validate($0, name: "equals[]", parent: name, min: 1)
                try validate($0, name: "equals[]", parent: name, pattern: "^.+$")
            }
            try self.validate(self.equals, name: "equals", parent: name, min: 1)
            try self.validate(self.field, name: "field", parent: name, max: 1000)
            try self.validate(self.field, name: "field", parent: name, min: 1)
            try self.validate(self.field, name: "field", parent: name, pattern: "^[\\w|\\d|\\.|_]+$")
            try self.notEndsWith?.forEach {
                try validate($0, name: "notEndsWith[]", parent: name, max: 2048)
                try validate($0, name: "notEndsWith[]", parent: name, min: 1)
                try validate($0, name: "notEndsWith[]", parent: name, pattern: "^.+$")
            }
            try self.validate(self.notEndsWith, name: "notEndsWith", parent: name, min: 1)
            try self.notEquals?.forEach {
                try validate($0, name: "notEquals[]", parent: name, max: 2048)
                try validate($0, name: "notEquals[]", parent: name, min: 1)
                try validate($0, name: "notEquals[]", parent: name, pattern: "^.+$")
            }
            try self.validate(self.notEquals, name: "notEquals", parent: name, min: 1)
            try self.notStartsWith?.forEach {
                try validate($0, name: "notStartsWith[]", parent: name, max: 2048)
                try validate($0, name: "notStartsWith[]", parent: name, min: 1)
                try validate($0, name: "notStartsWith[]", parent: name, pattern: "^.+$")
            }
            try self.validate(self.notStartsWith, name: "notStartsWith", parent: name, min: 1)
            try self.startsWith?.forEach {
                try validate($0, name: "startsWith[]", parent: name, max: 2048)
                try validate($0, name: "startsWith[]", parent: name, min: 1)
                try validate($0, name: "startsWith[]", parent: name, pattern: "^.+$")
            }
            try self.validate(self.startsWith, name: "startsWith", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case endsWith = "EndsWith"
            case equals = "Equals"
            case field = "Field"
            case notEndsWith = "NotEndsWith"
            case notEquals = "NotEquals"
            case notStartsWith = "NotStartsWith"
            case startsWith = "StartsWith"
        }
    }

    public struct CancelQueryRequest: AWSEncodableShape {
        /// The ARN (or the ID suffix of the ARN) of an event data store on which the specified query is running.
        public let eventDataStore: String?
        /// The ID of the query that you want to cancel. The QueryId comes from the response of a StartQuery  operation.
        public let queryId: String

        public init(queryId: String) {
            self.eventDataStore = nil
            self.queryId = queryId
        }

        @available(*, deprecated, message: "Members eventDataStore have been deprecated")
        public init(eventDataStore: String? = nil, queryId: String) {
            self.eventDataStore = eventDataStore
            self.queryId = queryId
        }

        public func validate(name: String) throws {
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, max: 256)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, min: 3)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
            try self.validate(self.queryId, name: "queryId", parent: name, max: 36)
            try self.validate(self.queryId, name: "queryId", parent: name, min: 36)
            try self.validate(self.queryId, name: "queryId", parent: name, pattern: "^[a-f0-9\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case eventDataStore = "EventDataStore"
            case queryId = "QueryId"
        }
    }

    public struct CancelQueryResponse: AWSDecodableShape {
        /// The ID of the canceled query.
        public let queryId: String
        /// Shows the status of a query after a CancelQuery request. Typically, the values shown are either  RUNNING or CANCELLED.
        public let queryStatus: QueryStatus

        public init(queryId: String, queryStatus: QueryStatus) {
            self.queryId = queryId
            self.queryStatus = queryStatus
        }

        private enum CodingKeys: String, CodingKey {
            case queryId = "QueryId"
            case queryStatus = "QueryStatus"
        }
    }

    public struct Channel: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of a channel.
        public let channelArn: String?
        ///  The name of the CloudTrail channel. For service-linked channels, the name is aws-service-channel/service-name/custom-suffix where service-name represents the name of the  Amazon Web Services service that created the channel and custom-suffix represents the suffix created by the Amazon Web Services service.
        public let name: String?

        public init(channelArn: String? = nil, name: String? = nil) {
            self.channelArn = channelArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case channelArn = "ChannelArn"
            case name = "Name"
        }
    }

    public struct CreateEventDataStoreRequest: AWSEncodableShape {
        /// The advanced event selectors to use to select the events for the data store. For more information about how to use advanced event  selectors, see Log events by using advanced event selectors in the CloudTrail  User Guide.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by alias/, a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.  Disabling or deleting the KMS key, or removing CloudTrail  permissions on the key, prevents CloudTrail from logging events to the event data store, and prevents users  from querying the data in the event data store that was encrypted with the key.  After you associate an event data store with a KMS key, the KMS key cannot be removed or changed. Before you disable or delete a KMS key that you are using with an event data store, delete or back up your event data store.  CloudTrail also supports KMS multi-Region keys. For more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide. Examples:    alias/MyAliasName     arn:aws:kms:us-east-2:123456789012:alias/MyAliasName     arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012     12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Specifies whether the event data store includes events from all regions, or only from the region in which the event data store  is created.
        public let multiRegionEnabled: Bool?
        /// The name of the event data store.
        public let name: String
        /// Specifies whether an event data store collects events logged for an organization in Organizations.
        public let organizationEnabled: Bool?
        /// The retention period of the event data store, in days. You can set a retention period of up to 2557 days,  the equivalent of seven years.
        public let retentionPeriod: Int?
        public let tagsList: [Tag]?
        /// Specifies whether termination protection is enabled for the event data store. If termination protection is enabled, you  cannot delete the event data store until termination protection is disabled.
        public let terminationProtectionEnabled: Bool?

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, kmsKeyId: String? = nil, multiRegionEnabled: Bool? = nil, name: String, organizationEnabled: Bool? = nil, retentionPeriod: Int? = nil, tagsList: [Tag]? = nil, terminationProtectionEnabled: Bool? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.kmsKeyId = kmsKeyId
            self.multiRegionEnabled = multiRegionEnabled
            self.name = name
            self.organizationEnabled = organizationEnabled
            self.retentionPeriod = retentionPeriod
            self.tagsList = tagsList
            self.terminationProtectionEnabled = terminationProtectionEnabled
        }

        public func validate(name: String) throws {
            try self.advancedEventSelectors?.forEach {
                try $0.validate(name: "\(name).advancedEventSelectors[]")
            }
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 350)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, min: 1)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 3)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9._\\-]+$")
            try self.validate(self.retentionPeriod, name: "retentionPeriod", parent: name, max: 2557)
            try self.validate(self.retentionPeriod, name: "retentionPeriod", parent: name, min: 7)
            try self.tagsList?.forEach {
                try $0.validate(name: "\(name).tagsList[]")
            }
            try self.validate(self.tagsList, name: "tagsList", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case kmsKeyId = "KmsKeyId"
            case multiRegionEnabled = "MultiRegionEnabled"
            case name = "Name"
            case organizationEnabled = "OrganizationEnabled"
            case retentionPeriod = "RetentionPeriod"
            case tagsList = "TagsList"
            case terminationProtectionEnabled = "TerminationProtectionEnabled"
        }
    }

    public struct CreateEventDataStoreResponse: AWSDecodableShape {
        /// The advanced event selectors that were used to select the events for the data store.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// The timestamp that shows when the event data store was created.
        public let createdTimestamp: Date?
        /// The ARN of the event data store.
        public let eventDataStoreArn: String?
        /// Specifies the KMS key ID that encrypts the events delivered by CloudTrail.  The value is a fully specified ARN to a KMS key in the following format.  arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Indicates whether the event data store collects events from all regions, or only from the region in which it was created.
        public let multiRegionEnabled: Bool?
        /// The name of the event data store.
        public let name: String?
        /// Indicates whether an event data store is collecting logged events for an organization in Organizations.
        public let organizationEnabled: Bool?
        /// The retention period of an event data store, in days.
        public let retentionPeriod: Int?
        /// The status of event data store creation.
        public let status: EventDataStoreStatus?
        public let tagsList: [Tag]?
        /// Indicates whether termination protection is enabled for the event data store.
        public let terminationProtectionEnabled: Bool?
        /// The timestamp that shows when an event data store was updated, if applicable.  UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
        public let updatedTimestamp: Date?

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, createdTimestamp: Date? = nil, eventDataStoreArn: String? = nil, kmsKeyId: String? = nil, multiRegionEnabled: Bool? = nil, name: String? = nil, organizationEnabled: Bool? = nil, retentionPeriod: Int? = nil, status: EventDataStoreStatus? = nil, tagsList: [Tag]? = nil, terminationProtectionEnabled: Bool? = nil, updatedTimestamp: Date? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.createdTimestamp = createdTimestamp
            self.eventDataStoreArn = eventDataStoreArn
            self.kmsKeyId = kmsKeyId
            self.multiRegionEnabled = multiRegionEnabled
            self.name = name
            self.organizationEnabled = organizationEnabled
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.tagsList = tagsList
            self.terminationProtectionEnabled = terminationProtectionEnabled
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case createdTimestamp = "CreatedTimestamp"
            case eventDataStoreArn = "EventDataStoreArn"
            case kmsKeyId = "KmsKeyId"
            case multiRegionEnabled = "MultiRegionEnabled"
            case name = "Name"
            case organizationEnabled = "OrganizationEnabled"
            case retentionPeriod = "RetentionPeriod"
            case status = "Status"
            case tagsList = "TagsList"
            case terminationProtectionEnabled = "TerminationProtectionEnabled"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct CreateTrailRequest: AWSEncodableShape {
        /// Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group  to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies whether log file integrity validation is enabled. The default is false.  When you disable log file integrity validation, the chain of digest files is broken after one hour. CloudTrail does  not create digest files for log files that were delivered during a period in which log file integrity validation was disabled.  For example, if you enable log file integrity validation at noon on January 1, disable it at noon on January 2, and re-enable  it at noon on January 10, digest files will not be created for the log files delivered from noon on January 2 to noon on  January 10. The same applies whenever you stop CloudTrail logging or delete a trail.
        public let enableLogFileValidation: Bool?
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        public let includeGlobalServiceEvents: Bool?
        /// Specifies whether the trail is created in the current region or in all regions. The default is false, which creates a trail only in the region where you are signed in. As a best practice, consider creating trails that log events in all regions.
        public let isMultiRegionTrail: Bool?
        /// Specifies whether the trail is created for all accounts in an organization in Organizations, or only for the current Amazon Web Services account.  The default is false, and cannot be true unless the call is made on behalf of an Amazon Web Services account that is the management account for an organization in  Organizations.
        public let isOrganizationTrail: Bool?
        /// Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by alias/, a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier. CloudTrail also supports KMS multi-Region keys. For more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide. Examples:    alias/MyAliasName     arn:aws:kms:us-east-2:123456789012:alias/MyAliasName     arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012     12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Specifies the name of the trail. The name must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are not valid.   Not be in IP address format (for example, 192.168.5.4)
        public let name: String
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
        public let s3BucketName: String
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
        public let s3KeyPrefix: String?
        /// Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
        public let snsTopicName: String?
        public let tagsList: [Tag]?

        public init(cloudWatchLogsLogGroupArn: String? = nil, cloudWatchLogsRoleArn: String? = nil, enableLogFileValidation: Bool? = nil, includeGlobalServiceEvents: Bool? = nil, isMultiRegionTrail: Bool? = nil, isOrganizationTrail: Bool? = nil, kmsKeyId: String? = nil, name: String, s3BucketName: String, s3KeyPrefix: String? = nil, snsTopicName: String? = nil, tagsList: [Tag]? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.enableLogFileValidation = enableLogFileValidation
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.isMultiRegionTrail = isMultiRegionTrail
            self.isOrganizationTrail = isOrganizationTrail
            self.kmsKeyId = kmsKeyId
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.snsTopicName = snsTopicName
            self.tagsList = tagsList
        }

        public func validate(name: String) throws {
            try self.tagsList?.forEach {
                try $0.validate(name: "\(name).tagsList[]")
            }
            try self.validate(self.tagsList, name: "tagsList", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case enableLogFileValidation = "EnableLogFileValidation"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
            case isMultiRegionTrail = "IsMultiRegionTrail"
            case isOrganizationTrail = "IsOrganizationTrail"
            case kmsKeyId = "KmsKeyId"
            case name = "Name"
            case s3BucketName = "S3BucketName"
            case s3KeyPrefix = "S3KeyPrefix"
            case snsTopicName = "SnsTopicName"
            case tagsList = "TagsList"
        }
    }

    public struct CreateTrailResponse: AWSDecodableShape {
        /// Specifies the Amazon Resource Name (ARN) of the log group to which CloudTrail logs will be delivered.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        public let includeGlobalServiceEvents: Bool?
        /// Specifies whether the trail exists in one region or in all regions.
        public let isMultiRegionTrail: Bool?
        /// Specifies whether the trail is an organization trail.
        public let isOrganizationTrail: Bool?
        /// Specifies the KMS key ID that encrypts the events delivered by CloudTrail.  The value is a fully specified ARN to a KMS key in the following format.  arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Specifies whether log file integrity validation is enabled.
        public let logFileValidationEnabled: Bool?
        /// Specifies the name of the trail.
        public let name: String?
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files.
        public let s3BucketName: String?
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files.
        public let s3KeyPrefix: String?
        /// Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered. The format of a topic ARN is:  arn:aws:sns:us-east-2:123456789012:MyTopic
        public let snsTopicARN: String?
        /// This field is no longer in use. Use SnsTopicARN.
        public let snsTopicName: String?
        /// Specifies the ARN of the trail that was created. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let trailARN: String?

        public init(cloudWatchLogsLogGroupArn: String? = nil, cloudWatchLogsRoleArn: String? = nil, includeGlobalServiceEvents: Bool? = nil, isMultiRegionTrail: Bool? = nil, isOrganizationTrail: Bool? = nil, kmsKeyId: String? = nil, logFileValidationEnabled: Bool? = nil, name: String? = nil, s3BucketName: String? = nil, s3KeyPrefix: String? = nil, snsTopicARN: String? = nil, trailARN: String? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.isMultiRegionTrail = isMultiRegionTrail
            self.isOrganizationTrail = isOrganizationTrail
            self.kmsKeyId = kmsKeyId
            self.logFileValidationEnabled = logFileValidationEnabled
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.snsTopicARN = snsTopicARN
            self.snsTopicName = nil
            self.trailARN = trailARN
        }

        @available(*, deprecated, message: "Members snsTopicName have been deprecated")
        public init(cloudWatchLogsLogGroupArn: String? = nil, cloudWatchLogsRoleArn: String? = nil, includeGlobalServiceEvents: Bool? = nil, isMultiRegionTrail: Bool? = nil, isOrganizationTrail: Bool? = nil, kmsKeyId: String? = nil, logFileValidationEnabled: Bool? = nil, name: String? = nil, s3BucketName: String? = nil, s3KeyPrefix: String? = nil, snsTopicARN: String? = nil, snsTopicName: String? = nil, trailARN: String? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.isMultiRegionTrail = isMultiRegionTrail
            self.isOrganizationTrail = isOrganizationTrail
            self.kmsKeyId = kmsKeyId
            self.logFileValidationEnabled = logFileValidationEnabled
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.snsTopicARN = snsTopicARN
            self.snsTopicName = snsTopicName
            self.trailARN = trailARN
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
            case isMultiRegionTrail = "IsMultiRegionTrail"
            case isOrganizationTrail = "IsOrganizationTrail"
            case kmsKeyId = "KmsKeyId"
            case logFileValidationEnabled = "LogFileValidationEnabled"
            case name = "Name"
            case s3BucketName = "S3BucketName"
            case s3KeyPrefix = "S3KeyPrefix"
            case snsTopicARN = "SnsTopicARN"
            case snsTopicName = "SnsTopicName"
            case trailARN = "TrailARN"
        }
    }

    public struct DataResource: AWSEncodableShape & AWSDecodableShape {
        /// The resource type in which you want to log data events. You can specify the following basic event selector resource types:    AWS::S3::Object     AWS::Lambda::Function     AWS::DynamoDB::Table    The following resource types are also available through advanced event selectors. Basic event selector resource types are valid in advanced event selectors, but advanced event selector resource types are not valid in basic event selectors. For more information, see AdvancedFieldSelector$Field.    AWS::S3Outposts::Object     AWS::ManagedBlockchain::Node     AWS::S3ObjectLambda::AccessPoint     AWS::EC2::Snapshot     AWS::S3::AccessPoint     AWS::DynamoDB::Stream     AWS::Glue::Table
        public let type: String?
        /// An array of Amazon Resource Name (ARN) strings or partial ARN strings for the specified objects.   To log data events for all objects in all S3 buckets in your Amazon Web Services account, specify the  prefix as arn:aws:s3.  This also enables logging of data event activity performed by any user or role in your Amazon Web Services account,  even if that activity is performed on a bucket that belongs to another Amazon Web Services account.    To log data events for all objects in an S3 bucket, specify the bucket and an empty object prefix such as arn:aws:s3:::bucket-1/. The trail logs data events for all objects in this S3 bucket.   To log data events for specific objects, specify the S3 bucket and object prefix such as arn:aws:s3:::bucket-1/example-images. The trail logs data events for objects in this S3 bucket that match the prefix.   To log data events for all Lambda functions in your Amazon Web Services account, specify the prefix as arn:aws:lambda.  This also enables logging of Invoke activity performed by any user or role in your Amazon Web Services account,  even if that activity is performed on a function that belongs to another Amazon Web Services account.     To log data events for a specific Lambda function, specify the function ARN.  Lambda function ARNs are exact. For example, if you specify a  function ARN arn:aws:lambda:us-west-2:111111111111:function:helloworld, data events will only be logged for arn:aws:lambda:us-west-2:111111111111:function:helloworld. They will not be logged for arn:aws:lambda:us-west-2:111111111111:function:helloworld2.    To log data events for all DynamoDB tables in your Amazon Web Services account, specify the prefix as arn:aws:dynamodb.
        public let values: [String]?

        public init(type: String? = nil, values: [String]? = nil) {
            self.type = type
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case type = "Type"
            case values = "Values"
        }
    }

    public struct DeleteEventDataStoreRequest: AWSEncodableShape {
        /// The ARN (or the ID suffix of the ARN) of the event data store to delete.
        public let eventDataStore: String

        public init(eventDataStore: String) {
            self.eventDataStore = eventDataStore
        }

        public func validate(name: String) throws {
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, max: 256)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, min: 3)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case eventDataStore = "EventDataStore"
        }
    }

    public struct DeleteEventDataStoreResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeleteTrailRequest: AWSEncodableShape {
        /// Specifies the name or the CloudTrail ARN of the trail to be deleted. The following is the format of a trail ARN. arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteTrailResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DeregisterOrganizationDelegatedAdminRequest: AWSEncodableShape {
        /// A delegated administrator account ID. This is a member account in an organization  that is currently designated as a delegated administrator.
        public let delegatedAdminAccountId: String

        public init(delegatedAdminAccountId: String) {
            self.delegatedAdminAccountId = delegatedAdminAccountId
        }

        public func validate(name: String) throws {
            try self.validate(self.delegatedAdminAccountId, name: "delegatedAdminAccountId", parent: name, max: 16)
            try self.validate(self.delegatedAdminAccountId, name: "delegatedAdminAccountId", parent: name, min: 12)
            try self.validate(self.delegatedAdminAccountId, name: "delegatedAdminAccountId", parent: name, pattern: "^\\d+$")
        }

        private enum CodingKeys: String, CodingKey {
            case delegatedAdminAccountId = "DelegatedAdminAccountId"
        }
    }

    public struct DeregisterOrganizationDelegatedAdminResponse: AWSDecodableShape {
        public init() {}
    }

    public struct DescribeQueryRequest: AWSEncodableShape {
        /// The ARN (or the ID suffix of the ARN) of an event data store on which the specified query was run.
        public let eventDataStore: String?
        /// The query ID.
        public let queryId: String

        public init(queryId: String) {
            self.eventDataStore = nil
            self.queryId = queryId
        }

        @available(*, deprecated, message: "Members eventDataStore have been deprecated")
        public init(eventDataStore: String? = nil, queryId: String) {
            self.eventDataStore = eventDataStore
            self.queryId = queryId
        }

        public func validate(name: String) throws {
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, max: 256)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, min: 3)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
            try self.validate(self.queryId, name: "queryId", parent: name, max: 36)
            try self.validate(self.queryId, name: "queryId", parent: name, min: 36)
            try self.validate(self.queryId, name: "queryId", parent: name, pattern: "^[a-f0-9\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case eventDataStore = "EventDataStore"
            case queryId = "QueryId"
        }
    }

    public struct DescribeQueryResponse: AWSDecodableShape {
        /// The URI for the S3 bucket where CloudTrail delivered query results, if applicable.
        public let deliveryS3Uri: String?
        /// The delivery status.
        public let deliveryStatus: DeliveryStatus?
        /// The error message returned if a query failed.
        public let errorMessage: String?
        /// The ID of the query.
        public let queryId: String?
        /// Metadata about a query, including the number of events that were matched, the total number of events scanned, the query run time  in milliseconds, and the query's creation time.
        public let queryStatistics: QueryStatisticsForDescribeQuery?
        /// The status of a query. Values for QueryStatus include QUEUED, RUNNING,  FINISHED, FAILED, TIMED_OUT, or CANCELLED
        public let queryStatus: QueryStatus?
        /// The SQL code of a query.
        public let queryString: String?

        public init(deliveryS3Uri: String? = nil, deliveryStatus: DeliveryStatus? = nil, errorMessage: String? = nil, queryId: String? = nil, queryStatistics: QueryStatisticsForDescribeQuery? = nil, queryStatus: QueryStatus? = nil, queryString: String? = nil) {
            self.deliveryS3Uri = deliveryS3Uri
            self.deliveryStatus = deliveryStatus
            self.errorMessage = errorMessage
            self.queryId = queryId
            self.queryStatistics = queryStatistics
            self.queryStatus = queryStatus
            self.queryString = queryString
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryS3Uri = "DeliveryS3Uri"
            case deliveryStatus = "DeliveryStatus"
            case errorMessage = "ErrorMessage"
            case queryId = "QueryId"
            case queryStatistics = "QueryStatistics"
            case queryStatus = "QueryStatus"
            case queryString = "QueryString"
        }
    }

    public struct DescribeTrailsRequest: AWSEncodableShape {
        /// Specifies whether to include shadow trails in the response. A shadow trail is the replication in a region of a trail that was created in a different region, or in the case of an organization trail, the replication of an organization trail in member accounts. If you do not include shadow trails, organization trails in a member account and region replication trails will not be returned. The default is true.
        public let includeShadowTrails: Bool?
        /// Specifies a list of trail names, trail ARNs, or both, of the trails to describe. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail  If an empty list is specified, information for the trail in the current region is returned.   If an empty list is specified and IncludeShadowTrails is false, then information for all trails in the current region is returned.   If an empty list is specified and IncludeShadowTrails is null or true, then information for all trails in the current region and any associated shadow trails in other regions is returned.    If one or more trail names are specified, information is returned only if the names match the names of trails belonging only to the current region. To return information about a trail in another region, you must specify its trail ARN.
        public let trailNameList: [String]?

        public init(includeShadowTrails: Bool? = nil, trailNameList: [String]? = nil) {
            self.includeShadowTrails = includeShadowTrails
            self.trailNameList = trailNameList
        }

        private enum CodingKeys: String, CodingKey {
            case includeShadowTrails
            case trailNameList
        }
    }

    public struct DescribeTrailsResponse: AWSDecodableShape {
        /// The list of trail objects. Trail objects with string values are only returned if values for the objects exist in a trail's configuration.  For example, SNSTopicName and SNSTopicARN are only returned in results if a trail is configured to send SNS notifications. Similarly,  KMSKeyId only appears in results if a trail's log files are encrypted with KMS customer managed keys.
        public let trailList: [Trail]?

        public init(trailList: [Trail]? = nil) {
            self.trailList = trailList
        }

        private enum CodingKeys: String, CodingKey {
            case trailList
        }
    }

    public struct Destination: AWSDecodableShape {
        /// For service-linked channels, the value is the name of the Amazon Web Services service.
        public let location: String
        /// The type of destination for events arriving from a channel. For service-linked channels,  the value is AWS_SERVICE.
        public let type: DestinationType

        public init(location: String, type: DestinationType) {
            self.location = location
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case location = "Location"
            case type = "Type"
        }
    }

    public struct Event: AWSDecodableShape {
        /// The Amazon Web Services access key ID that was used to sign the request. If the request was made  with temporary security credentials, this is the access key ID of the temporary credentials.
        public let accessKeyId: String?
        /// A JSON string that contains a representation of the event returned.
        public let cloudTrailEvent: String?
        /// The CloudTrail ID of the event returned.
        public let eventId: String?
        /// The name of the event returned.
        public let eventName: String?
        /// The Amazon Web Services service to which the request was made.
        public let eventSource: String?
        /// The date and time of the event returned.
        public let eventTime: Date?
        /// Information about whether the event is a write event or a read event.
        public let readOnly: String?
        /// A list of resources referenced by the event returned.
        public let resources: [Resource]?
        /// A user name or role name of the requester that called the API in the event returned.
        public let username: String?

        public init(accessKeyId: String? = nil, cloudTrailEvent: String? = nil, eventId: String? = nil, eventName: String? = nil, eventSource: String? = nil, eventTime: Date? = nil, readOnly: String? = nil, resources: [Resource]? = nil, username: String? = nil) {
            self.accessKeyId = accessKeyId
            self.cloudTrailEvent = cloudTrailEvent
            self.eventId = eventId
            self.eventName = eventName
            self.eventSource = eventSource
            self.eventTime = eventTime
            self.readOnly = readOnly
            self.resources = resources
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId = "AccessKeyId"
            case cloudTrailEvent = "CloudTrailEvent"
            case eventId = "EventId"
            case eventName = "EventName"
            case eventSource = "EventSource"
            case eventTime = "EventTime"
            case readOnly = "ReadOnly"
            case resources = "Resources"
            case username = "Username"
        }
    }

    public struct EventDataStore: AWSDecodableShape {
        /// This field is being deprecated. The advanced event selectors that were used to select events for the data store.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// This field is being deprecated. The timestamp of the event data store's creation.
        public let createdTimestamp: Date?
        /// The ARN of the event data store.
        public let eventDataStoreArn: String?
        /// This field is being deprecated. Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
        public let multiRegionEnabled: Bool?
        /// The name of the event data store.
        public let name: String?
        /// This field is being deprecated. Indicates that an event data store is collecting logged events for an organization.
        public let organizationEnabled: Bool?
        /// This field is being deprecated. The retention period, in days.
        public let retentionPeriod: Int?
        /// This field is being deprecated. The status of an event data store. Values are ENABLED and PENDING_DELETION.
        public let status: EventDataStoreStatus?
        /// This field is being deprecated. Indicates whether the event data store is protected from termination.
        public let terminationProtectionEnabled: Bool?
        /// This field is being deprecated. The timestamp showing when an event data store was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
        public let updatedTimestamp: Date?

        public init(eventDataStoreArn: String? = nil, name: String? = nil) {
            self.advancedEventSelectors = nil
            self.createdTimestamp = nil
            self.eventDataStoreArn = eventDataStoreArn
            self.multiRegionEnabled = nil
            self.name = name
            self.organizationEnabled = nil
            self.retentionPeriod = nil
            self.status = nil
            self.terminationProtectionEnabled = nil
            self.updatedTimestamp = nil
        }

        @available(*, deprecated, message: "Members advancedEventSelectors, createdTimestamp, multiRegionEnabled, organizationEnabled, retentionPeriod, status, terminationProtectionEnabled, updatedTimestamp have been deprecated")
        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, createdTimestamp: Date? = nil, eventDataStoreArn: String? = nil, multiRegionEnabled: Bool? = nil, name: String? = nil, organizationEnabled: Bool? = nil, retentionPeriod: Int? = nil, status: EventDataStoreStatus? = nil, terminationProtectionEnabled: Bool? = nil, updatedTimestamp: Date? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.createdTimestamp = createdTimestamp
            self.eventDataStoreArn = eventDataStoreArn
            self.multiRegionEnabled = multiRegionEnabled
            self.name = name
            self.organizationEnabled = organizationEnabled
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.terminationProtectionEnabled = terminationProtectionEnabled
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case createdTimestamp = "CreatedTimestamp"
            case eventDataStoreArn = "EventDataStoreArn"
            case multiRegionEnabled = "MultiRegionEnabled"
            case name = "Name"
            case organizationEnabled = "OrganizationEnabled"
            case retentionPeriod = "RetentionPeriod"
            case status = "Status"
            case terminationProtectionEnabled = "TerminationProtectionEnabled"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct EventSelector: AWSEncodableShape & AWSDecodableShape {
        /// CloudTrail supports data event logging for Amazon S3 objects, Lambda functions,  and Amazon DynamoDB tables  with basic event selectors. You can specify up to 250 resources for an individual event selector, but the total number of data resources cannot exceed 250 across all event selectors in a trail. This limit does not apply if you configure resource logging for all data events. For more information, see Data Events and Limits in CloudTrail  in the CloudTrail User Guide.
        public let dataResources: [DataResource]?
        /// An optional list of service event sources from which you do not want management events to be logged on your trail. In this release, the list can be empty (disables the filter),  or it can filter out Key Management Service or Amazon RDS Data API events by  containing kms.amazonaws.com or rdsdata.amazonaws.com. By default, ExcludeManagementEventSources is empty, and KMS and  Amazon RDS Data API events are logged to your trail. You can exclude management event sources only in regions that support the event source.
        public let excludeManagementEventSources: [String]?
        /// Specify if you want your event selector to include management events for your trail.  For more information, see Management Events in the CloudTrail User Guide. By default, the value is true. The first copy of management events is free. You are charged for additional copies of management  events that you are logging on any subsequent trail in the same region. For more information about  CloudTrail pricing, see CloudTrail Pricing.
        public let includeManagementEvents: Bool?
        /// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation. By default, the value is All.
        public let readWriteType: ReadWriteType?

        public init(dataResources: [DataResource]? = nil, excludeManagementEventSources: [String]? = nil, includeManagementEvents: Bool? = nil, readWriteType: ReadWriteType? = nil) {
            self.dataResources = dataResources
            self.excludeManagementEventSources = excludeManagementEventSources
            self.includeManagementEvents = includeManagementEvents
            self.readWriteType = readWriteType
        }

        private enum CodingKeys: String, CodingKey {
            case dataResources = "DataResources"
            case excludeManagementEventSources = "ExcludeManagementEventSources"
            case includeManagementEvents = "IncludeManagementEvents"
            case readWriteType = "ReadWriteType"
        }
    }

    public struct GetChannelRequest: AWSEncodableShape {
        /// The ARN or UUID of a channel.
        public let channel: String

        public init(channel: String) {
            self.channel = channel
        }

        public func validate(name: String) throws {
            try self.validate(self.channel, name: "channel", parent: name, max: 256)
            try self.validate(self.channel, name: "channel", parent: name, min: 3)
            try self.validate(self.channel, name: "channel", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case channel = "Channel"
        }
    }

    public struct GetChannelResponse: AWSDecodableShape {
        /// The ARN of an channel returned by a GetChannel request.
        public let channelArn: String?
        /// The Amazon Web Services service that created the service-linked channel.
        public let destinations: [Destination]?
        ///  The name of the CloudTrail channel. For service-linked channels, the value is aws-service-channel/service-name/custom-suffix  where service-name represents the name of the  Amazon Web Services service that created the channel and custom-suffix represents the suffix generated by the Amazon Web Services service.
        public let name: String?
        /// The event source for the CloudTrail channel.
        public let source: String?
        ///  Provides information about the advanced event selectors configured for the channel, and  whether the channel applies to all regions or a single region.
        public let sourceConfig: SourceConfig?

        public init(channelArn: String? = nil, destinations: [Destination]? = nil, name: String? = nil, source: String? = nil, sourceConfig: SourceConfig? = nil) {
            self.channelArn = channelArn
            self.destinations = destinations
            self.name = name
            self.source = source
            self.sourceConfig = sourceConfig
        }

        private enum CodingKeys: String, CodingKey {
            case channelArn = "ChannelArn"
            case destinations = "Destinations"
            case name = "Name"
            case source = "Source"
            case sourceConfig = "SourceConfig"
        }
    }

    public struct GetEventDataStoreRequest: AWSEncodableShape {
        /// The ARN (or ID suffix of the ARN) of the event data store about which you want information.
        public let eventDataStore: String

        public init(eventDataStore: String) {
            self.eventDataStore = eventDataStore
        }

        public func validate(name: String) throws {
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, max: 256)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, min: 3)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case eventDataStore = "EventDataStore"
        }
    }

    public struct GetEventDataStoreResponse: AWSDecodableShape {
        /// The advanced event selectors used to select events for the data store.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// The timestamp of the event data store's creation.
        public let createdTimestamp: Date?
        /// The event data store Amazon Resource Number (ARN).
        public let eventDataStoreArn: String?
        /// Specifies the KMS key ID that encrypts the events delivered by CloudTrail.  The value is a fully specified ARN to a KMS key in the following format.  arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
        public let multiRegionEnabled: Bool?
        /// The name of the event data store.
        public let name: String?
        /// Indicates whether an event data store is collecting logged events for an organization in Organizations.
        public let organizationEnabled: Bool?
        /// The retention period of the event data store, in days.
        public let retentionPeriod: Int?
        /// The status of an event data store. Values can be ENABLED and PENDING_DELETION.
        public let status: EventDataStoreStatus?
        /// Indicates that termination protection is enabled.
        public let terminationProtectionEnabled: Bool?
        /// Shows the time that an event data store was updated, if applicable. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
        public let updatedTimestamp: Date?

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, createdTimestamp: Date? = nil, eventDataStoreArn: String? = nil, kmsKeyId: String? = nil, multiRegionEnabled: Bool? = nil, name: String? = nil, organizationEnabled: Bool? = nil, retentionPeriod: Int? = nil, status: EventDataStoreStatus? = nil, terminationProtectionEnabled: Bool? = nil, updatedTimestamp: Date? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.createdTimestamp = createdTimestamp
            self.eventDataStoreArn = eventDataStoreArn
            self.kmsKeyId = kmsKeyId
            self.multiRegionEnabled = multiRegionEnabled
            self.name = name
            self.organizationEnabled = organizationEnabled
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.terminationProtectionEnabled = terminationProtectionEnabled
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case createdTimestamp = "CreatedTimestamp"
            case eventDataStoreArn = "EventDataStoreArn"
            case kmsKeyId = "KmsKeyId"
            case multiRegionEnabled = "MultiRegionEnabled"
            case name = "Name"
            case organizationEnabled = "OrganizationEnabled"
            case retentionPeriod = "RetentionPeriod"
            case status = "Status"
            case terminationProtectionEnabled = "TerminationProtectionEnabled"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct GetEventSelectorsRequest: AWSEncodableShape {
        /// Specifies the name of the trail or trail ARN. If you specify a trail name, the string must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are not valid.   Not be in IP address format (for example, 192.168.5.4)   If you specify a trail ARN, it must be in the format:  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let trailName: String

        public init(trailName: String) {
            self.trailName = trailName
        }

        private enum CodingKeys: String, CodingKey {
            case trailName = "TrailName"
        }
    }

    public struct GetEventSelectorsResponse: AWSDecodableShape {
        ///  The advanced event selectors that are configured for the trail.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// The event selectors that are configured for the trail.
        public let eventSelectors: [EventSelector]?
        /// The specified trail ARN that has the event selectors.
        public let trailARN: String?

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, eventSelectors: [EventSelector]? = nil, trailARN: String? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.eventSelectors = eventSelectors
            self.trailARN = trailARN
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case eventSelectors = "EventSelectors"
            case trailARN = "TrailARN"
        }
    }

    public struct GetImportRequest: AWSEncodableShape {
        ///  The ID for the import.
        public let importId: String

        public init(importId: String) {
            self.importId = importId
        }

        public func validate(name: String) throws {
            try self.validate(self.importId, name: "importId", parent: name, max: 36)
            try self.validate(self.importId, name: "importId", parent: name, min: 36)
            try self.validate(self.importId, name: "importId", parent: name, pattern: "^[a-f0-9\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case importId = "ImportId"
        }
    }

    public struct GetImportResponse: AWSDecodableShape {
        ///  The timestamp of the import's creation.
        public let createdTimestamp: Date?
        ///  The ARN of the destination event data store.
        public let destinations: [String]?
        ///  Used with StartEventTime to bound a StartImport request, and limit imported trail events  to only those events logged within a specified time period.
        public let endEventTime: Date?
        ///  The ID of the import.
        public let importId: String?
        ///  The source S3 bucket.
        public let importSource: ImportSource?
        ///  Provides statistics for the import. CloudTrail does not update import statistics in real-time.   Returned values for parameters such as EventsCompleted may be lower than the actual value, because  CloudTrail updates statistics incrementally over the course of the import.
        public let importStatistics: ImportStatistics?
        ///  The status of the import.
        public let importStatus: ImportStatus?
        ///  Used with EndEventTime to bound a StartImport request, and limit imported trail events  to only those events logged within a specified time period.
        public let startEventTime: Date?
        ///  The timestamp of when the import was updated.
        public let updatedTimestamp: Date?

        public init(createdTimestamp: Date? = nil, destinations: [String]? = nil, endEventTime: Date? = nil, importId: String? = nil, importSource: ImportSource? = nil, importStatistics: ImportStatistics? = nil, importStatus: ImportStatus? = nil, startEventTime: Date? = nil, updatedTimestamp: Date? = nil) {
            self.createdTimestamp = createdTimestamp
            self.destinations = destinations
            self.endEventTime = endEventTime
            self.importId = importId
            self.importSource = importSource
            self.importStatistics = importStatistics
            self.importStatus = importStatus
            self.startEventTime = startEventTime
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "CreatedTimestamp"
            case destinations = "Destinations"
            case endEventTime = "EndEventTime"
            case importId = "ImportId"
            case importSource = "ImportSource"
            case importStatistics = "ImportStatistics"
            case importStatus = "ImportStatus"
            case startEventTime = "StartEventTime"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct GetInsightSelectorsRequest: AWSEncodableShape {
        /// Specifies the name of the trail or trail ARN. If you specify a trail name, the string must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are not valid.   Not be in IP address format (for example, 192.168.5.4)   If you specify a trail ARN, it must be in the format:  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let trailName: String

        public init(trailName: String) {
            self.trailName = trailName
        }

        private enum CodingKeys: String, CodingKey {
            case trailName = "TrailName"
        }
    }

    public struct GetInsightSelectorsResponse: AWSDecodableShape {
        /// A JSON string that contains the insight types you want to log on a trail. In this release, ApiErrorRateInsight and  ApiCallRateInsight are supported as insight types.
        public let insightSelectors: [InsightSelector]?
        /// The Amazon Resource Name (ARN) of a trail for which you want to get Insights selectors.
        public let trailARN: String?

        public init(insightSelectors: [InsightSelector]? = nil, trailARN: String? = nil) {
            self.insightSelectors = insightSelectors
            self.trailARN = trailARN
        }

        private enum CodingKeys: String, CodingKey {
            case insightSelectors = "InsightSelectors"
            case trailARN = "TrailARN"
        }
    }

    public struct GetQueryResultsRequest: AWSEncodableShape {
        /// The ARN (or ID suffix of the ARN) of the event data store against which the query was run.
        public let eventDataStore: String?
        /// The maximum number of query results to display on a single page.
        public let maxQueryResults: Int?
        /// A token you can use to get the next page of query results.
        public let nextToken: String?
        /// The ID of the query for which you want to get results.
        public let queryId: String

        public init(maxQueryResults: Int? = nil, nextToken: String? = nil, queryId: String) {
            self.eventDataStore = nil
            self.maxQueryResults = maxQueryResults
            self.nextToken = nextToken
            self.queryId = queryId
        }

        @available(*, deprecated, message: "Members eventDataStore have been deprecated")
        public init(eventDataStore: String? = nil, maxQueryResults: Int? = nil, nextToken: String? = nil, queryId: String) {
            self.eventDataStore = eventDataStore
            self.maxQueryResults = maxQueryResults
            self.nextToken = nextToken
            self.queryId = queryId
        }

        public func validate(name: String) throws {
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, max: 256)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, min: 3)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
            try self.validate(self.maxQueryResults, name: "maxQueryResults", parent: name, max: 1000)
            try self.validate(self.maxQueryResults, name: "maxQueryResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1000)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 4)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
            try self.validate(self.queryId, name: "queryId", parent: name, max: 36)
            try self.validate(self.queryId, name: "queryId", parent: name, min: 36)
            try self.validate(self.queryId, name: "queryId", parent: name, pattern: "^[a-f0-9\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case eventDataStore = "EventDataStore"
            case maxQueryResults = "MaxQueryResults"
            case nextToken = "NextToken"
            case queryId = "QueryId"
        }
    }

    public struct GetQueryResultsResponse: AWSDecodableShape {
        /// The error message returned if a query failed.
        public let errorMessage: String?
        /// A token you can use to get the next page of query results.
        public let nextToken: String?
        /// Contains the individual event results of the query.
        public let queryResultRows: [[[String: String]]]?
        /// Shows the count of query results.
        public let queryStatistics: QueryStatistics?
        /// The status of the query. Values include QUEUED, RUNNING, FINISHED, FAILED,  TIMED_OUT, or CANCELLED.
        public let queryStatus: QueryStatus?

        public init(errorMessage: String? = nil, nextToken: String? = nil, queryResultRows: [[[String: String]]]? = nil, queryStatistics: QueryStatistics? = nil, queryStatus: QueryStatus? = nil) {
            self.errorMessage = errorMessage
            self.nextToken = nextToken
            self.queryResultRows = queryResultRows
            self.queryStatistics = queryStatistics
            self.queryStatus = queryStatus
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case nextToken = "NextToken"
            case queryResultRows = "QueryResultRows"
            case queryStatistics = "QueryStatistics"
            case queryStatus = "QueryStatus"
        }
    }

    public struct GetTrailRequest: AWSEncodableShape {
        /// The name or the Amazon Resource Name (ARN) of the trail for which you want to retrieve settings information.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct GetTrailResponse: AWSDecodableShape {
        public let trail: Trail?

        public init(trail: Trail? = nil) {
            self.trail = trail
        }

        private enum CodingKeys: String, CodingKey {
            case trail = "Trail"
        }
    }

    public struct GetTrailStatusRequest: AWSEncodableShape {
        /// Specifies the name or the CloudTrail ARN of the trail for which you are requesting status. To get the status of a  shadow trail (a replication of the trail in another region), you must specify its ARN. The following is the format of a trail ARN.  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct GetTrailStatusResponse: AWSDecodableShape {
        /// Whether the CloudTrail trail is currently logging Amazon Web Services API calls.
        public let isLogging: Bool?
        /// Displays any CloudWatch Logs error that CloudTrail encountered when attempting to deliver logs to CloudWatch Logs.
        public let latestCloudWatchLogsDeliveryError: String?
        /// Displays the most recent date and time when CloudTrail delivered logs to CloudWatch Logs.
        public let latestCloudWatchLogsDeliveryTime: Date?
        /// This field is no longer in use.
        public let latestDeliveryAttemptSucceeded: String?
        /// This field is no longer in use.
        public let latestDeliveryAttemptTime: String?
        /// Displays any Amazon S3 error that CloudTrail encountered when attempting to deliver log files to the designated bucket. For more information, see Error Responses in the Amazon S3 API Reference.   This error occurs only when there is a problem with the destination S3 bucket, and does not occur for requests that time out. To resolve the issue, create a new bucket, and then call UpdateTrail to specify the new bucket; or fix the existing objects so that CloudTrail can again write to the bucket.
        public let latestDeliveryError: String?
        /// Specifies the date and time that CloudTrail last delivered log files to an account's Amazon S3 bucket.
        public let latestDeliveryTime: Date?
        /// Displays any Amazon S3 error that CloudTrail encountered when attempting to deliver a digest file to the designated bucket. For more information, see Error Responses in the Amazon S3 API Reference.   This error occurs only when there is a problem with the destination S3 bucket, and does not occur for requests that time out. To resolve the issue, create a new bucket, and then call UpdateTrail to specify the new bucket; or fix the existing objects so that CloudTrail can again write to the bucket.
        public let latestDigestDeliveryError: String?
        /// Specifies the date and time that CloudTrail last delivered a digest file to an account's Amazon S3 bucket.
        public let latestDigestDeliveryTime: Date?
        /// This field is no longer in use.
        public let latestNotificationAttemptSucceeded: String?
        /// This field is no longer in use.
        public let latestNotificationAttemptTime: String?
        /// Displays any Amazon SNS error that CloudTrail encountered when attempting to send a notification. For more information about Amazon SNS errors, see the Amazon SNS Developer Guide.
        public let latestNotificationError: String?
        /// Specifies the date and time of the most recent Amazon SNS notification that CloudTrail has written a new log file to an account's Amazon S3 bucket.
        public let latestNotificationTime: Date?
        /// Specifies the most recent date and time when CloudTrail started recording API calls for an Amazon Web Services account.
        public let startLoggingTime: Date?
        /// Specifies the most recent date and time when CloudTrail stopped recording API calls for an Amazon Web Services account.
        public let stopLoggingTime: Date?
        /// This field is no longer in use.
        public let timeLoggingStarted: String?
        /// This field is no longer in use.
        public let timeLoggingStopped: String?

        public init(isLogging: Bool? = nil, latestCloudWatchLogsDeliveryError: String? = nil, latestCloudWatchLogsDeliveryTime: Date? = nil, latestDeliveryAttemptSucceeded: String? = nil, latestDeliveryAttemptTime: String? = nil, latestDeliveryError: String? = nil, latestDeliveryTime: Date? = nil, latestDigestDeliveryError: String? = nil, latestDigestDeliveryTime: Date? = nil, latestNotificationAttemptSucceeded: String? = nil, latestNotificationAttemptTime: String? = nil, latestNotificationError: String? = nil, latestNotificationTime: Date? = nil, startLoggingTime: Date? = nil, stopLoggingTime: Date? = nil, timeLoggingStarted: String? = nil, timeLoggingStopped: String? = nil) {
            self.isLogging = isLogging
            self.latestCloudWatchLogsDeliveryError = latestCloudWatchLogsDeliveryError
            self.latestCloudWatchLogsDeliveryTime = latestCloudWatchLogsDeliveryTime
            self.latestDeliveryAttemptSucceeded = latestDeliveryAttemptSucceeded
            self.latestDeliveryAttemptTime = latestDeliveryAttemptTime
            self.latestDeliveryError = latestDeliveryError
            self.latestDeliveryTime = latestDeliveryTime
            self.latestDigestDeliveryError = latestDigestDeliveryError
            self.latestDigestDeliveryTime = latestDigestDeliveryTime
            self.latestNotificationAttemptSucceeded = latestNotificationAttemptSucceeded
            self.latestNotificationAttemptTime = latestNotificationAttemptTime
            self.latestNotificationError = latestNotificationError
            self.latestNotificationTime = latestNotificationTime
            self.startLoggingTime = startLoggingTime
            self.stopLoggingTime = stopLoggingTime
            self.timeLoggingStarted = timeLoggingStarted
            self.timeLoggingStopped = timeLoggingStopped
        }

        private enum CodingKeys: String, CodingKey {
            case isLogging = "IsLogging"
            case latestCloudWatchLogsDeliveryError = "LatestCloudWatchLogsDeliveryError"
            case latestCloudWatchLogsDeliveryTime = "LatestCloudWatchLogsDeliveryTime"
            case latestDeliveryAttemptSucceeded = "LatestDeliveryAttemptSucceeded"
            case latestDeliveryAttemptTime = "LatestDeliveryAttemptTime"
            case latestDeliveryError = "LatestDeliveryError"
            case latestDeliveryTime = "LatestDeliveryTime"
            case latestDigestDeliveryError = "LatestDigestDeliveryError"
            case latestDigestDeliveryTime = "LatestDigestDeliveryTime"
            case latestNotificationAttemptSucceeded = "LatestNotificationAttemptSucceeded"
            case latestNotificationAttemptTime = "LatestNotificationAttemptTime"
            case latestNotificationError = "LatestNotificationError"
            case latestNotificationTime = "LatestNotificationTime"
            case startLoggingTime = "StartLoggingTime"
            case stopLoggingTime = "StopLoggingTime"
            case timeLoggingStarted = "TimeLoggingStarted"
            case timeLoggingStopped = "TimeLoggingStopped"
        }
    }

    public struct ImportFailureListItem: AWSDecodableShape {
        ///  Provides the reason the import failed.
        public let errorMessage: String?
        ///  The type of import error.
        public let errorType: String?
        ///  When the import was last updated.
        public let lastUpdatedTime: Date?
        ///  The location of the failure in the S3 bucket.
        public let location: String?
        ///  The status of the import.
        public let status: ImportFailureStatus?

        public init(errorMessage: String? = nil, errorType: String? = nil, lastUpdatedTime: Date? = nil, location: String? = nil, status: ImportFailureStatus? = nil) {
            self.errorMessage = errorMessage
            self.errorType = errorType
            self.lastUpdatedTime = lastUpdatedTime
            self.location = location
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case errorType = "ErrorType"
            case lastUpdatedTime = "LastUpdatedTime"
            case location = "Location"
            case status = "Status"
        }
    }

    public struct ImportSource: AWSEncodableShape & AWSDecodableShape {
        ///  The source S3 bucket.
        public let s3: S3ImportSource

        public init(s3: S3ImportSource) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct ImportStatistics: AWSDecodableShape {
        ///  The number of trail events imported into the event data store.
        public let eventsCompleted: Int64?
        ///  The number of failed entries.
        public let failedEntries: Int64?
        /// The number of log files that completed import.
        public let filesCompleted: Int64?
        ///  The number of S3 prefixes that completed import.
        public let prefixesCompleted: Int64?
        ///  The number of S3 prefixes found for the import.
        public let prefixesFound: Int64?

        public init(eventsCompleted: Int64? = nil, failedEntries: Int64? = nil, filesCompleted: Int64? = nil, prefixesCompleted: Int64? = nil, prefixesFound: Int64? = nil) {
            self.eventsCompleted = eventsCompleted
            self.failedEntries = failedEntries
            self.filesCompleted = filesCompleted
            self.prefixesCompleted = prefixesCompleted
            self.prefixesFound = prefixesFound
        }

        private enum CodingKeys: String, CodingKey {
            case eventsCompleted = "EventsCompleted"
            case failedEntries = "FailedEntries"
            case filesCompleted = "FilesCompleted"
            case prefixesCompleted = "PrefixesCompleted"
            case prefixesFound = "PrefixesFound"
        }
    }

    public struct ImportsListItem: AWSDecodableShape {
        ///  The timestamp of the import's creation.
        public let createdTimestamp: Date?
        ///  The ARN of the destination event data store.
        public let destinations: [String]?
        ///  The ID of the import.
        public let importId: String?
        ///  The status of the import.
        public let importStatus: ImportStatus?
        ///  The timestamp of the import's last update.
        public let updatedTimestamp: Date?

        public init(createdTimestamp: Date? = nil, destinations: [String]? = nil, importId: String? = nil, importStatus: ImportStatus? = nil, updatedTimestamp: Date? = nil) {
            self.createdTimestamp = createdTimestamp
            self.destinations = destinations
            self.importId = importId
            self.importStatus = importStatus
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "CreatedTimestamp"
            case destinations = "Destinations"
            case importId = "ImportId"
            case importStatus = "ImportStatus"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct InsightSelector: AWSEncodableShape & AWSDecodableShape {
        /// The type of insights to log on a trail. ApiCallRateInsight and ApiErrorRateInsight are valid insight types.
        public let insightType: InsightType?

        public init(insightType: InsightType? = nil) {
            self.insightType = insightType
        }

        private enum CodingKeys: String, CodingKey {
            case insightType = "InsightType"
        }
    }

    public struct ListChannelsRequest: AWSEncodableShape {
        ///  The maximum number of CloudTrail channels to display on a single page.
        public let maxResults: Int?
        /// The token to use to get the next page of results after a previous API call. This token must be  passed in with the same parameters that were specified in the original call.  For example, if the original call specified an AttributeKey of 'Username' with a value of 'root',  the call with NextToken should include those same parameters.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1000)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 4)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListChannelsResponse: AWSDecodableShape {
        ///  The list of channels in the account.
        public let channels: [Channel]?
        /// The token to use to get the next page of results after a previous API call.
        public let nextToken: String?

        public init(channels: [Channel]? = nil, nextToken: String? = nil) {
            self.channels = channels
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case channels = "Channels"
            case nextToken = "NextToken"
        }
    }

    public struct ListEventDataStoresRequest: AWSEncodableShape {
        /// The maximum number of event data stores to display on a single page.
        public let maxResults: Int?
        /// A token you can use to get the next page of event data store results.
        public let nextToken: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1000)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 4)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListEventDataStoresResponse: AWSDecodableShape {
        /// Contains information about event data stores in the account, in the current region.
        public let eventDataStores: [EventDataStore]?
        /// A token you can use to get the next page of results.
        public let nextToken: String?

        public init(eventDataStores: [EventDataStore]? = nil, nextToken: String? = nil) {
            self.eventDataStores = eventDataStores
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case eventDataStores = "EventDataStores"
            case nextToken = "NextToken"
        }
    }

    public struct ListImportFailuresRequest: AWSEncodableShape {
        ///  The ID of the import.
        public let importId: String
        ///  The maximum number of failures to display on a single page.
        public let maxResults: Int?
        ///  A token you can use to get the next page of import failures.
        public let nextToken: String?

        public init(importId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.importId = importId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.importId, name: "importId", parent: name, max: 36)
            try self.validate(self.importId, name: "importId", parent: name, min: 36)
            try self.validate(self.importId, name: "importId", parent: name, pattern: "^[a-f0-9\\-]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1000)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 4)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case importId = "ImportId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListImportFailuresResponse: AWSDecodableShape {
        ///  Contains information about the import failures.
        public let failures: [ImportFailureListItem]?
        ///  A token you can use to get the next page of results.
        public let nextToken: String?

        public init(failures: [ImportFailureListItem]? = nil, nextToken: String? = nil) {
            self.failures = failures
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case failures = "Failures"
            case nextToken = "NextToken"
        }
    }

    public struct ListImportsRequest: AWSEncodableShape {
        ///  The ARN of the destination event data store.
        public let destination: String?
        ///  The status of the import.
        public let importStatus: ImportStatus?
        ///  The maximum number of imports to display on a single page.
        public let maxResults: Int?
        ///  A token you can use to get the next page of import results.
        public let nextToken: String?

        public init(destination: String? = nil, importStatus: ImportStatus? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.destination = destination
            self.importStatus = importStatus
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.destination, name: "destination", parent: name, max: 256)
            try self.validate(self.destination, name: "destination", parent: name, min: 3)
            try self.validate(self.destination, name: "destination", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1000)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 4)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "Destination"
            case importStatus = "ImportStatus"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListImportsResponse: AWSDecodableShape {
        ///  The list of returned imports.
        public let imports: [ImportsListItem]?
        ///  A token you can use to get the next page of import results.
        public let nextToken: String?

        public init(imports: [ImportsListItem]? = nil, nextToken: String? = nil) {
            self.imports = imports
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case imports = "Imports"
            case nextToken = "NextToken"
        }
    }

    public struct ListPublicKeysRequest: AWSEncodableShape {
        /// Optionally specifies, in UTC, the end of the time range to look up public keys for CloudTrail digest files. If not  specified, the current time is used.
        public let endTime: Date?
        /// Reserved for future use.
        public let nextToken: String?
        /// Optionally specifies, in UTC, the start of the time range to look up public keys for CloudTrail digest files.  If not specified, the current time is used, and the current public key is returned.
        public let startTime: Date?

        public init(endTime: Date? = nil, nextToken: String? = nil, startTime: Date? = nil) {
            self.endTime = endTime
            self.nextToken = nextToken
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case nextToken = "NextToken"
            case startTime = "StartTime"
        }
    }

    public struct ListPublicKeysResponse: AWSDecodableShape {
        /// Reserved for future use.
        public let nextToken: String?
        /// Contains an array of PublicKey objects.  The returned public keys may have validity time ranges that overlap.
        public let publicKeyList: [PublicKey]?

        public init(nextToken: String? = nil, publicKeyList: [PublicKey]? = nil) {
            self.nextToken = nextToken
            self.publicKeyList = publicKeyList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case publicKeyList = "PublicKeyList"
        }
    }

    public struct ListQueriesRequest: AWSEncodableShape {
        /// Use with StartTime to bound a ListQueries request, and limit its results to only those queries run  within a specified time period.
        public let endTime: Date?
        /// The ARN (or the ID suffix of the ARN) of an event data store on which queries were run.
        public let eventDataStore: String
        /// The maximum number of queries to show on a page.
        public let maxResults: Int?
        /// A token you can use to get the next page of results.
        public let nextToken: String?
        /// The status of queries that you want to return in results. Valid values for QueryStatus include QUEUED, RUNNING,  FINISHED, FAILED, TIMED_OUT, or CANCELLED.
        public let queryStatus: QueryStatus?
        /// Use with EndTime to bound a ListQueries request, and limit its results to only those queries run  within a specified time period.
        public let startTime: Date?

        public init(endTime: Date? = nil, eventDataStore: String, maxResults: Int? = nil, nextToken: String? = nil, queryStatus: QueryStatus? = nil, startTime: Date? = nil) {
            self.endTime = endTime
            self.eventDataStore = eventDataStore
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.queryStatus = queryStatus
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, max: 256)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, min: 3)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1000)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 4)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: ".*")
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case eventDataStore = "EventDataStore"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case queryStatus = "QueryStatus"
            case startTime = "StartTime"
        }
    }

    public struct ListQueriesResponse: AWSDecodableShape {
        /// A token you can use to get the next page of results.
        public let nextToken: String?
        /// Lists matching query results, and shows query ID, status, and creation time of each query.
        public let queries: [Query]?

        public init(nextToken: String? = nil, queries: [Query]? = nil) {
            self.nextToken = nextToken
            self.queries = queries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case queries = "Queries"
        }
    }

    public struct ListTagsRequest: AWSEncodableShape {
        /// Reserved for future use.
        public let nextToken: String?
        /// Specifies a list of trail and event data store ARNs whose tags will be listed. The list  has a limit of 20 ARNs.
        public let resourceIdList: [String]

        public init(nextToken: String? = nil, resourceIdList: [String]) {
            self.nextToken = nextToken
            self.resourceIdList = resourceIdList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceIdList = "ResourceIdList"
        }
    }

    public struct ListTagsResponse: AWSDecodableShape {
        /// Reserved for future use.
        public let nextToken: String?
        /// A list of resource tags.
        public let resourceTagList: [ResourceTag]?

        public init(nextToken: String? = nil, resourceTagList: [ResourceTag]? = nil) {
            self.nextToken = nextToken
            self.resourceTagList = resourceTagList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceTagList = "ResourceTagList"
        }
    }

    public struct ListTrailsRequest: AWSEncodableShape {
        /// The token to use to get the next page of results after a previous API call. This token must be passed  in with the same parameters that were specified in the original call. For example, if the original  call specified an AttributeKey of 'Username' with a value of 'root', the call with NextToken should  include those same parameters.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct ListTrailsResponse: AWSDecodableShape {
        /// The token to use to get the next page of results after a previous API call. If the token does not appear,  there are no more results to return. The token must be passed in with the same parameters as the previous call.  For example, if the original call specified an AttributeKey of 'Username' with a value of 'root', the call with  NextToken should include those same parameters.
        public let nextToken: String?
        /// Returns the name, ARN, and home region of trails in the current account.
        public let trails: [TrailInfo]?

        public init(nextToken: String? = nil, trails: [TrailInfo]? = nil) {
            self.nextToken = nextToken
            self.trails = trails
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case trails = "Trails"
        }
    }

    public struct LookupAttribute: AWSEncodableShape {
        /// Specifies an attribute on which to filter the events returned.
        public let attributeKey: LookupAttributeKey
        /// Specifies a value for the specified AttributeKey.
        public let attributeValue: String

        public init(attributeKey: LookupAttributeKey, attributeValue: String) {
            self.attributeKey = attributeKey
            self.attributeValue = attributeValue
        }

        public func validate(name: String) throws {
            try self.validate(self.attributeValue, name: "attributeValue", parent: name, max: 2000)
            try self.validate(self.attributeValue, name: "attributeValue", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case attributeKey = "AttributeKey"
            case attributeValue = "AttributeValue"
        }
    }

    public struct LookupEventsRequest: AWSEncodableShape {
        /// Specifies that only events that occur before or at the specified time are returned. If the specified end time is before the specified start time, an error is returned.
        public let endTime: Date?
        /// Specifies the event category. If you do not specify an event category, events of the category are not returned in the response. For example,  if you do not specify insight as the value of EventCategory, no Insights events are returned.
        public let eventCategory: EventCategory?
        /// Contains a list of lookup attributes. Currently the list can contain only one item.
        public let lookupAttributes: [LookupAttribute]?
        /// The number of events to return. Possible values are 1 through 50. The default is 50.
        public let maxResults: Int?
        /// The token to use to get the next page of results after a previous API call. This token must be passed in with the same parameters that were specified in the original call.  For example, if the original call specified an AttributeKey of 'Username' with a value of 'root', the call with NextToken should include those same parameters.
        public let nextToken: String?
        /// Specifies that only events that occur after or at the specified time are returned. If the specified start time is after the specified end time, an error is returned.
        public let startTime: Date?

        public init(endTime: Date? = nil, eventCategory: EventCategory? = nil, lookupAttributes: [LookupAttribute]? = nil, maxResults: Int? = nil, nextToken: String? = nil, startTime: Date? = nil) {
            self.endTime = endTime
            self.eventCategory = eventCategory
            self.lookupAttributes = lookupAttributes
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.lookupAttributes?.forEach {
                try $0.validate(name: "\(name).lookupAttributes[]")
            }
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 50)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case eventCategory = "EventCategory"
            case lookupAttributes = "LookupAttributes"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startTime = "StartTime"
        }
    }

    public struct LookupEventsResponse: AWSDecodableShape {
        /// A list of events returned based on the lookup attributes specified and the CloudTrail event. The events list is sorted by time. The most recent event is listed first.
        public let events: [Event]?
        /// The token to use to get the next page of results after a previous API call. If the token does not appear,  there are no more results to return. The token must be passed in with the same parameters as the previous call.  For example, if the original call specified an AttributeKey of 'Username' with a value of 'root', the call with  NextToken should include those same parameters.
        public let nextToken: String?

        public init(events: [Event]? = nil, nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case nextToken = "NextToken"
        }
    }

    public struct PublicKey: AWSDecodableShape {
        /// The fingerprint of the public key.
        public let fingerprint: String?
        /// The ending time of validity of the public key.
        public let validityEndTime: Date?
        /// The starting time of validity of the public key.
        public let validityStartTime: Date?
        /// The DER encoded public key value in PKCS#1 format.
        public let value: AWSBase64Data?

        public init(fingerprint: String? = nil, validityEndTime: Date? = nil, validityStartTime: Date? = nil, value: AWSBase64Data? = nil) {
            self.fingerprint = fingerprint
            self.validityEndTime = validityEndTime
            self.validityStartTime = validityStartTime
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case fingerprint = "Fingerprint"
            case validityEndTime = "ValidityEndTime"
            case validityStartTime = "ValidityStartTime"
            case value = "Value"
        }
    }

    public struct PutEventSelectorsRequest: AWSEncodableShape {
        ///  Specifies the settings for advanced event selectors. You can add advanced event selectors, and conditions for your advanced  event selectors, up to a maximum of 500 values for all conditions and selectors on a trail.  You can use either AdvancedEventSelectors or EventSelectors, but not both. If you apply AdvancedEventSelectors  to a trail, any existing EventSelectors are overwritten. For more information about  advanced event selectors, see  Logging  data events for trails in the CloudTrail User Guide.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// Specifies the settings for your event selectors. You can configure up to five event selectors for a trail.  You can use either EventSelectors or AdvancedEventSelectors in a PutEventSelectors request, but not both.  If you apply EventSelectors to a trail, any existing AdvancedEventSelectors are overwritten.
        public let eventSelectors: [EventSelector]?
        /// Specifies the name of the trail or trail ARN. If you specify a trail name, the string must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are not valid.   Not be in IP address format (for example, 192.168.5.4)   If you specify a trail ARN, it must be in the following format.  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let trailName: String

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, eventSelectors: [EventSelector]? = nil, trailName: String) {
            self.advancedEventSelectors = advancedEventSelectors
            self.eventSelectors = eventSelectors
            self.trailName = trailName
        }

        public func validate(name: String) throws {
            try self.advancedEventSelectors?.forEach {
                try $0.validate(name: "\(name).advancedEventSelectors[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case eventSelectors = "EventSelectors"
            case trailName = "TrailName"
        }
    }

    public struct PutEventSelectorsResponse: AWSDecodableShape {
        /// Specifies the advanced event selectors configured for your trail.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// Specifies the event selectors configured for your trail.
        public let eventSelectors: [EventSelector]?
        /// Specifies the ARN of the trail that was updated with event selectors. The following is the format of a trail ARN.  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let trailARN: String?

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, eventSelectors: [EventSelector]? = nil, trailARN: String? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.eventSelectors = eventSelectors
            self.trailARN = trailARN
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case eventSelectors = "EventSelectors"
            case trailARN = "TrailARN"
        }
    }

    public struct PutInsightSelectorsRequest: AWSEncodableShape {
        /// A JSON string that contains the insight types you want to log on a trail. ApiCallRateInsight and ApiErrorRateInsight are valid insight types.
        public let insightSelectors: [InsightSelector]
        /// The name of the CloudTrail trail for which you want to change or add Insights selectors.
        public let trailName: String

        public init(insightSelectors: [InsightSelector], trailName: String) {
            self.insightSelectors = insightSelectors
            self.trailName = trailName
        }

        private enum CodingKeys: String, CodingKey {
            case insightSelectors = "InsightSelectors"
            case trailName = "TrailName"
        }
    }

    public struct PutInsightSelectorsResponse: AWSDecodableShape {
        /// A JSON string that contains the Insights event types that you want to log on a trail. The valid Insights types in this release are  ApiErrorRateInsight and ApiCallRateInsight.
        public let insightSelectors: [InsightSelector]?
        /// The Amazon Resource Name (ARN) of a trail for which you want to change or add Insights selectors.
        public let trailARN: String?

        public init(insightSelectors: [InsightSelector]? = nil, trailARN: String? = nil) {
            self.insightSelectors = insightSelectors
            self.trailARN = trailARN
        }

        private enum CodingKeys: String, CodingKey {
            case insightSelectors = "InsightSelectors"
            case trailARN = "TrailARN"
        }
    }

    public struct Query: AWSDecodableShape {
        /// The creation time of a query.
        public let creationTime: Date?
        /// The ID of a query.
        public let queryId: String?
        /// The status of the query. This can be QUEUED, RUNNING, FINISHED, FAILED,  TIMED_OUT, or CANCELLED.
        public let queryStatus: QueryStatus?

        public init(creationTime: Date? = nil, queryId: String? = nil, queryStatus: QueryStatus? = nil) {
            self.creationTime = creationTime
            self.queryId = queryId
            self.queryStatus = queryStatus
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime = "CreationTime"
            case queryId = "QueryId"
            case queryStatus = "QueryStatus"
        }
    }

    public struct QueryStatistics: AWSDecodableShape {
        /// The total bytes that the query scanned in the event data store. This value matches the number of bytes for which your account is billed for the query, unless the query is still running.
        public let bytesScanned: Int64?
        /// The number of results returned.
        public let resultsCount: Int?
        /// The total number of results returned by a query.
        public let totalResultsCount: Int?

        public init(bytesScanned: Int64? = nil, resultsCount: Int? = nil, totalResultsCount: Int? = nil) {
            self.bytesScanned = bytesScanned
            self.resultsCount = resultsCount
            self.totalResultsCount = totalResultsCount
        }

        private enum CodingKeys: String, CodingKey {
            case bytesScanned = "BytesScanned"
            case resultsCount = "ResultsCount"
            case totalResultsCount = "TotalResultsCount"
        }
    }

    public struct QueryStatisticsForDescribeQuery: AWSDecodableShape {
        /// The total bytes that the query scanned in the event data store. This value matches the number of  bytes for which your account is billed for the query, unless the query is still running.
        public let bytesScanned: Int64?
        /// The creation time of the query.
        public let creationTime: Date?
        /// The number of events that matched a query.
        public let eventsMatched: Int64?
        /// The number of events that the query scanned in the event data store.
        public let eventsScanned: Int64?
        /// The query's run time, in milliseconds.
        public let executionTimeInMillis: Int?

        public init(bytesScanned: Int64? = nil, creationTime: Date? = nil, eventsMatched: Int64? = nil, eventsScanned: Int64? = nil, executionTimeInMillis: Int? = nil) {
            self.bytesScanned = bytesScanned
            self.creationTime = creationTime
            self.eventsMatched = eventsMatched
            self.eventsScanned = eventsScanned
            self.executionTimeInMillis = executionTimeInMillis
        }

        private enum CodingKeys: String, CodingKey {
            case bytesScanned = "BytesScanned"
            case creationTime = "CreationTime"
            case eventsMatched = "EventsMatched"
            case eventsScanned = "EventsScanned"
            case executionTimeInMillis = "ExecutionTimeInMillis"
        }
    }

    public struct RegisterOrganizationDelegatedAdminRequest: AWSEncodableShape {
        /// An organization member account ID that you want to designate as a delegated administrator.
        public let memberAccountId: String

        public init(memberAccountId: String) {
            self.memberAccountId = memberAccountId
        }

        public func validate(name: String) throws {
            try self.validate(self.memberAccountId, name: "memberAccountId", parent: name, max: 16)
            try self.validate(self.memberAccountId, name: "memberAccountId", parent: name, min: 12)
            try self.validate(self.memberAccountId, name: "memberAccountId", parent: name, pattern: "^\\d+$")
        }

        private enum CodingKeys: String, CodingKey {
            case memberAccountId = "MemberAccountId"
        }
    }

    public struct RegisterOrganizationDelegatedAdminResponse: AWSDecodableShape {
        public init() {}
    }

    public struct RemoveTagsRequest: AWSEncodableShape {
        /// Specifies the ARN of the trail or event data store from which tags should be removed.  Example trail ARN format: arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail  Example event data store ARN format: arn:aws:cloudtrail:us-east-2:12345678910:eventdatastore/EXAMPLE-f852-4e8f-8bd1-bcf6cEXAMPLE
        public let resourceId: String
        /// Specifies a list of tags to be removed.
        public let tagsList: [Tag]

        public init(resourceId: String, tagsList: [Tag]) {
            self.resourceId = resourceId
            self.tagsList = tagsList
        }

        public func validate(name: String) throws {
            try self.tagsList.forEach {
                try $0.validate(name: "\(name).tagsList[]")
            }
            try self.validate(self.tagsList, name: "tagsList", parent: name, max: 200)
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagsList = "TagsList"
        }
    }

    public struct RemoveTagsResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Resource: AWSDecodableShape {
        /// The name of the resource referenced by the event returned. These are user-created names whose values will depend on the environment. For example, the resource name might be "auto-scaling-test-group" for an Auto Scaling Group or "i-1234567" for an EC2 Instance.
        public let resourceName: String?
        /// The type of a resource referenced by the event returned. When the resource type cannot be determined, null is returned. Some examples of resource types are: Instance for EC2, Trail for CloudTrail, DBInstance for Amazon RDS, and AccessKey for IAM. To learn more about how to look up and filter events by the resource types supported for a service, see Filtering CloudTrail Events.
        public let resourceType: String?

        public init(resourceName: String? = nil, resourceType: String? = nil) {
            self.resourceName = resourceName
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case resourceType = "ResourceType"
        }
    }

    public struct ResourceTag: AWSDecodableShape {
        /// Specifies the ARN of the resource.
        public let resourceId: String?
        /// A list of tags.
        public let tagsList: [Tag]?

        public init(resourceId: String? = nil, tagsList: [Tag]? = nil) {
            self.resourceId = resourceId
            self.tagsList = tagsList
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagsList = "TagsList"
        }
    }

    public struct RestoreEventDataStoreRequest: AWSEncodableShape {
        /// The ARN (or the ID suffix of the ARN) of the event data store that you want to restore.
        public let eventDataStore: String

        public init(eventDataStore: String) {
            self.eventDataStore = eventDataStore
        }

        public func validate(name: String) throws {
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, max: 256)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, min: 3)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case eventDataStore = "EventDataStore"
        }
    }

    public struct RestoreEventDataStoreResponse: AWSDecodableShape {
        /// The advanced event selectors that were used to select events.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// The timestamp of an event data store's creation.
        public let createdTimestamp: Date?
        /// The event data store ARN.
        public let eventDataStoreArn: String?
        /// Specifies the KMS key ID that encrypts the events delivered by CloudTrail.  The value is a fully specified ARN to a KMS key in the following format.  arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Indicates whether the event data store is collecting events from all regions, or only from the region in which the event data  store was created.
        public let multiRegionEnabled: Bool?
        /// The name of the event data store.
        public let name: String?
        /// Indicates whether an event data store is collecting logged events for an organization in Organizations.
        public let organizationEnabled: Bool?
        /// The retention period, in days.
        public let retentionPeriod: Int?
        /// The status of the event data store.
        public let status: EventDataStoreStatus?
        /// Indicates that termination protection is enabled and the event data store cannot be automatically deleted.
        public let terminationProtectionEnabled: Bool?
        /// The timestamp that shows when an event data store was updated, if applicable.  UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
        public let updatedTimestamp: Date?

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, createdTimestamp: Date? = nil, eventDataStoreArn: String? = nil, kmsKeyId: String? = nil, multiRegionEnabled: Bool? = nil, name: String? = nil, organizationEnabled: Bool? = nil, retentionPeriod: Int? = nil, status: EventDataStoreStatus? = nil, terminationProtectionEnabled: Bool? = nil, updatedTimestamp: Date? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.createdTimestamp = createdTimestamp
            self.eventDataStoreArn = eventDataStoreArn
            self.kmsKeyId = kmsKeyId
            self.multiRegionEnabled = multiRegionEnabled
            self.name = name
            self.organizationEnabled = organizationEnabled
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.terminationProtectionEnabled = terminationProtectionEnabled
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case createdTimestamp = "CreatedTimestamp"
            case eventDataStoreArn = "EventDataStoreArn"
            case kmsKeyId = "KmsKeyId"
            case multiRegionEnabled = "MultiRegionEnabled"
            case name = "Name"
            case organizationEnabled = "OrganizationEnabled"
            case retentionPeriod = "RetentionPeriod"
            case status = "Status"
            case terminationProtectionEnabled = "TerminationProtectionEnabled"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct S3ImportSource: AWSEncodableShape & AWSDecodableShape {
        ///  The IAM ARN role used to access the source S3 bucket.
        public let s3BucketAccessRoleArn: String
        ///  The region associated with the source S3 bucket.
        public let s3BucketRegion: String
        ///  The URI for the source S3 bucket.
        public let s3LocationUri: String

        public init(s3BucketAccessRoleArn: String, s3BucketRegion: String, s3LocationUri: String) {
            self.s3BucketAccessRoleArn = s3BucketAccessRoleArn
            self.s3BucketRegion = s3BucketRegion
            self.s3LocationUri = s3LocationUri
        }

        private enum CodingKeys: String, CodingKey {
            case s3BucketAccessRoleArn = "S3BucketAccessRoleArn"
            case s3BucketRegion = "S3BucketRegion"
            case s3LocationUri = "S3LocationUri"
        }
    }

    public struct SourceConfig: AWSDecodableShape {
        ///  The advanced event selectors that are configured for the channel.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        ///  Specifies whether the channel applies to a single region or to all regions.
        public let applyToAllRegions: Bool?

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, applyToAllRegions: Bool? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.applyToAllRegions = applyToAllRegions
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case applyToAllRegions = "ApplyToAllRegions"
        }
    }

    public struct StartImportRequest: AWSEncodableShape {
        ///  The ARN of the destination event data store. Use this parameter for a new import.
        public let destinations: [String]?
        ///  Use with StartEventTime to bound a StartImport request, and limit imported trail events  to only those events logged within a specified time period. When you specify a time range, CloudTrail checks the prefix and log  file names to verify the names contain a date between the specified StartEventTime and EndEventTime before attempting  to import events.
        public let endEventTime: Date?
        ///  The ID of the import. Use this parameter when you are retrying an import.
        public let importId: String?
        ///  The source S3 bucket for the import. Use this parameter for a new import.
        public let importSource: ImportSource?
        ///  Use with EndEventTime to bound a StartImport request, and limit imported trail events  to only those events logged within a specified time period. When you specify a time range, CloudTrail checks the prefix and log  file names to verify the names contain a date between the specified StartEventTime and EndEventTime before attempting  to import events.
        public let startEventTime: Date?

        public init(destinations: [String]? = nil, endEventTime: Date? = nil, importId: String? = nil, importSource: ImportSource? = nil, startEventTime: Date? = nil) {
            self.destinations = destinations
            self.endEventTime = endEventTime
            self.importId = importId
            self.importSource = importSource
            self.startEventTime = startEventTime
        }

        public func validate(name: String) throws {
            try self.destinations?.forEach {
                try validate($0, name: "destinations[]", parent: name, max: 256)
                try validate($0, name: "destinations[]", parent: name, min: 3)
                try validate($0, name: "destinations[]", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
            }
            try self.validate(self.destinations, name: "destinations", parent: name, max: 1)
            try self.validate(self.destinations, name: "destinations", parent: name, min: 1)
            try self.validate(self.importId, name: "importId", parent: name, max: 36)
            try self.validate(self.importId, name: "importId", parent: name, min: 36)
            try self.validate(self.importId, name: "importId", parent: name, pattern: "^[a-f0-9\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "Destinations"
            case endEventTime = "EndEventTime"
            case importId = "ImportId"
            case importSource = "ImportSource"
            case startEventTime = "StartEventTime"
        }
    }

    public struct StartImportResponse: AWSDecodableShape {
        ///  The timestamp for the import's creation.
        public let createdTimestamp: Date?
        ///  The ARN of the destination event data store.
        public let destinations: [String]?
        ///  Used with StartEventTime to bound a StartImport request, and limit imported trail events  to only those events logged within a specified time period.
        public let endEventTime: Date?
        ///  The ID of the import.
        public let importId: String?
        ///  The source S3 bucket for the import.
        public let importSource: ImportSource?
        ///  Shows the status of the import after a StartImport request. An import finishes with a status of COMPLETED if there were no failures, or FAILED  if there were failures.
        public let importStatus: ImportStatus?
        ///  Used with EndEventTime to bound a StartImport request, and limit imported trail events  to only those events logged within a specified time period.
        public let startEventTime: Date?
        ///  The timestamp of the import's last update, if applicable.
        public let updatedTimestamp: Date?

        public init(createdTimestamp: Date? = nil, destinations: [String]? = nil, endEventTime: Date? = nil, importId: String? = nil, importSource: ImportSource? = nil, importStatus: ImportStatus? = nil, startEventTime: Date? = nil, updatedTimestamp: Date? = nil) {
            self.createdTimestamp = createdTimestamp
            self.destinations = destinations
            self.endEventTime = endEventTime
            self.importId = importId
            self.importSource = importSource
            self.importStatus = importStatus
            self.startEventTime = startEventTime
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "CreatedTimestamp"
            case destinations = "Destinations"
            case endEventTime = "EndEventTime"
            case importId = "ImportId"
            case importSource = "ImportSource"
            case importStatus = "ImportStatus"
            case startEventTime = "StartEventTime"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct StartLoggingRequest: AWSEncodableShape {
        /// Specifies the name or the CloudTrail ARN of the trail for which CloudTrail logs Amazon Web Services API calls.  The following is the format of a trail ARN.  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct StartLoggingResponse: AWSDecodableShape {
        public init() {}
    }

    public struct StartQueryRequest: AWSEncodableShape {
        ///  The URI for the S3 bucket where CloudTrail delivers the query results.
        public let deliveryS3Uri: String?
        /// The SQL code of your query.
        public let queryStatement: String

        public init(deliveryS3Uri: String? = nil, queryStatement: String) {
            self.deliveryS3Uri = deliveryS3Uri
            self.queryStatement = queryStatement
        }

        public func validate(name: String) throws {
            try self.validate(self.deliveryS3Uri, name: "deliveryS3Uri", parent: name, max: 1024)
            try self.validate(self.deliveryS3Uri, name: "deliveryS3Uri", parent: name, pattern: "^s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?$")
            try self.validate(self.queryStatement, name: "queryStatement", parent: name, max: 10000)
            try self.validate(self.queryStatement, name: "queryStatement", parent: name, min: 1)
            try self.validate(self.queryStatement, name: "queryStatement", parent: name, pattern: "^(?s)")
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryS3Uri = "DeliveryS3Uri"
            case queryStatement = "QueryStatement"
        }
    }

    public struct StartQueryResponse: AWSDecodableShape {
        /// The ID of the started query.
        public let queryId: String?

        public init(queryId: String? = nil) {
            self.queryId = queryId
        }

        private enum CodingKeys: String, CodingKey {
            case queryId = "QueryId"
        }
    }

    public struct StopImportRequest: AWSEncodableShape {
        ///  The ID of the import.
        public let importId: String

        public init(importId: String) {
            self.importId = importId
        }

        public func validate(name: String) throws {
            try self.validate(self.importId, name: "importId", parent: name, max: 36)
            try self.validate(self.importId, name: "importId", parent: name, min: 36)
            try self.validate(self.importId, name: "importId", parent: name, pattern: "^[a-f0-9\\-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case importId = "ImportId"
        }
    }

    public struct StopImportResponse: AWSDecodableShape {
        ///  The timestamp of the import's creation.
        public let createdTimestamp: Date?
        ///  The ARN of the destination event data store.
        public let destinations: [String]?
        ///  Used with StartEventTime to bound a StartImport request, and limit imported trail events  to only those events logged within a specified time period.
        public let endEventTime: Date?
        ///  The ID for the import.
        public let importId: String?
        ///  The source S3 bucket for the import.
        public let importSource: ImportSource?
        ///  Returns information on the stopped import.
        public let importStatistics: ImportStatistics?
        ///  The status of the import.
        public let importStatus: ImportStatus?
        ///  Used with EndEventTime to bound a StartImport request, and limit imported trail events  to only those events logged within a specified time period.
        public let startEventTime: Date?
        ///  The timestamp of the import's last update.
        public let updatedTimestamp: Date?

        public init(createdTimestamp: Date? = nil, destinations: [String]? = nil, endEventTime: Date? = nil, importId: String? = nil, importSource: ImportSource? = nil, importStatistics: ImportStatistics? = nil, importStatus: ImportStatus? = nil, startEventTime: Date? = nil, updatedTimestamp: Date? = nil) {
            self.createdTimestamp = createdTimestamp
            self.destinations = destinations
            self.endEventTime = endEventTime
            self.importId = importId
            self.importSource = importSource
            self.importStatistics = importStatistics
            self.importStatus = importStatus
            self.startEventTime = startEventTime
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "CreatedTimestamp"
            case destinations = "Destinations"
            case endEventTime = "EndEventTime"
            case importId = "ImportId"
            case importSource = "ImportSource"
            case importStatistics = "ImportStatistics"
            case importStatus = "ImportStatus"
            case startEventTime = "StartEventTime"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct StopLoggingRequest: AWSEncodableShape {
        /// Specifies the name or the CloudTrail ARN of the trail for which CloudTrail will stop logging Amazon Web Services  API calls. The following is the format of a trail ARN.  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct StopLoggingResponse: AWSDecodableShape {
        public init() {}
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key in a key-value pair. The key must be must be no longer than 128 Unicode characters.  The key must be unique for the resource to which it applies.
        public let key: String
        /// The value in a key-value pair of a tag. The value must be no longer than 256 Unicode characters.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.key, name: "key", parent: name, max: 128)
            try self.validate(self.key, name: "key", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 256)
            try self.validate(self.value, name: "value", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct Trail: AWSDecodableShape {
        /// Specifies an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies if the trail has custom event selectors.
        public let hasCustomEventSelectors: Bool?
        /// Specifies whether a trail has insight types specified in an InsightSelector list.
        public let hasInsightSelectors: Bool?
        /// The region in which the trail was created.
        public let homeRegion: String?
        /// Set to True to include Amazon Web Services API calls from Amazon Web Services global services such as IAM. Otherwise, False.
        public let includeGlobalServiceEvents: Bool?
        /// Specifies whether the trail exists only in one region or exists in all regions.
        public let isMultiRegionTrail: Bool?
        /// Specifies whether the trail is an organization trail.
        public let isOrganizationTrail: Bool?
        /// Specifies the KMS key ID that encrypts the logs delivered by CloudTrail.  The value is a fully specified ARN to a KMS key in the following format.  arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Specifies whether log file validation is enabled.
        public let logFileValidationEnabled: Bool?
        /// Name of the trail set by calling CreateTrail. The maximum length is 128 characters.
        public let name: String?
        /// Name of the Amazon S3 bucket into which CloudTrail delivers your trail files. See Amazon S3 Bucket Naming Requirements.
        public let s3BucketName: String?
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files.  The maximum length is 200 characters.
        public let s3KeyPrefix: String?
        /// Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered. The following is the format of a topic ARN.  arn:aws:sns:us-east-2:123456789012:MyTopic
        public let snsTopicARN: String?
        /// This field is no longer in use. Use SnsTopicARN.
        public let snsTopicName: String?
        /// Specifies the ARN of the trail. The following is the format of a trail ARN.  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let trailARN: String?

        public init(cloudWatchLogsLogGroupArn: String? = nil, cloudWatchLogsRoleArn: String? = nil, hasCustomEventSelectors: Bool? = nil, hasInsightSelectors: Bool? = nil, homeRegion: String? = nil, includeGlobalServiceEvents: Bool? = nil, isMultiRegionTrail: Bool? = nil, isOrganizationTrail: Bool? = nil, kmsKeyId: String? = nil, logFileValidationEnabled: Bool? = nil, name: String? = nil, s3BucketName: String? = nil, s3KeyPrefix: String? = nil, snsTopicARN: String? = nil, trailARN: String? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.hasCustomEventSelectors = hasCustomEventSelectors
            self.hasInsightSelectors = hasInsightSelectors
            self.homeRegion = homeRegion
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.isMultiRegionTrail = isMultiRegionTrail
            self.isOrganizationTrail = isOrganizationTrail
            self.kmsKeyId = kmsKeyId
            self.logFileValidationEnabled = logFileValidationEnabled
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.snsTopicARN = snsTopicARN
            self.snsTopicName = nil
            self.trailARN = trailARN
        }

        @available(*, deprecated, message: "Members snsTopicName have been deprecated")
        public init(cloudWatchLogsLogGroupArn: String? = nil, cloudWatchLogsRoleArn: String? = nil, hasCustomEventSelectors: Bool? = nil, hasInsightSelectors: Bool? = nil, homeRegion: String? = nil, includeGlobalServiceEvents: Bool? = nil, isMultiRegionTrail: Bool? = nil, isOrganizationTrail: Bool? = nil, kmsKeyId: String? = nil, logFileValidationEnabled: Bool? = nil, name: String? = nil, s3BucketName: String? = nil, s3KeyPrefix: String? = nil, snsTopicARN: String? = nil, snsTopicName: String? = nil, trailARN: String? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.hasCustomEventSelectors = hasCustomEventSelectors
            self.hasInsightSelectors = hasInsightSelectors
            self.homeRegion = homeRegion
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.isMultiRegionTrail = isMultiRegionTrail
            self.isOrganizationTrail = isOrganizationTrail
            self.kmsKeyId = kmsKeyId
            self.logFileValidationEnabled = logFileValidationEnabled
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.snsTopicARN = snsTopicARN
            self.snsTopicName = snsTopicName
            self.trailARN = trailARN
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case hasCustomEventSelectors = "HasCustomEventSelectors"
            case hasInsightSelectors = "HasInsightSelectors"
            case homeRegion = "HomeRegion"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
            case isMultiRegionTrail = "IsMultiRegionTrail"
            case isOrganizationTrail = "IsOrganizationTrail"
            case kmsKeyId = "KmsKeyId"
            case logFileValidationEnabled = "LogFileValidationEnabled"
            case name = "Name"
            case s3BucketName = "S3BucketName"
            case s3KeyPrefix = "S3KeyPrefix"
            case snsTopicARN = "SnsTopicARN"
            case snsTopicName = "SnsTopicName"
            case trailARN = "TrailARN"
        }
    }

    public struct TrailInfo: AWSDecodableShape {
        /// The Amazon Web Services Region in which a trail was created.
        public let homeRegion: String?
        /// The name of a trail.
        public let name: String?
        /// The ARN of a trail.
        public let trailARN: String?

        public init(homeRegion: String? = nil, name: String? = nil, trailARN: String? = nil) {
            self.homeRegion = homeRegion
            self.name = name
            self.trailARN = trailARN
        }

        private enum CodingKeys: String, CodingKey {
            case homeRegion = "HomeRegion"
            case name = "Name"
            case trailARN = "TrailARN"
        }
    }

    public struct UpdateEventDataStoreRequest: AWSEncodableShape {
        /// The advanced event selectors used to select events for the event data store. You can configure up to five advanced event selectors for each event data store.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// The ARN (or the ID suffix of the ARN) of the event data store that you want to update.
        public let eventDataStore: String
        /// Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by alias/, a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.  Disabling or deleting the KMS key, or removing CloudTrail  permissions on the key, prevents CloudTrail from logging events to the event data store, and prevents users  from querying the data in the event data store that was encrypted with the key.  After you associate an event data store with a KMS key, the KMS key cannot be removed or changed. Before you disable or delete a KMS key that you are using with an event data store, delete or back up your event data store.  CloudTrail also supports KMS multi-Region keys. For more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide. Examples:    alias/MyAliasName     arn:aws:kms:us-east-2:123456789012:alias/MyAliasName     arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012     12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Specifies whether an event data store collects events from all regions, or only from the region in which it was created.
        public let multiRegionEnabled: Bool?
        /// The event data store name.
        public let name: String?
        /// Specifies whether an event data store collects events logged for an organization in Organizations.
        public let organizationEnabled: Bool?
        /// The retention period, in days.
        public let retentionPeriod: Int?
        /// Indicates that termination protection is enabled and the event data store cannot be automatically deleted.
        public let terminationProtectionEnabled: Bool?

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, eventDataStore: String, kmsKeyId: String? = nil, multiRegionEnabled: Bool? = nil, name: String? = nil, organizationEnabled: Bool? = nil, retentionPeriod: Int? = nil, terminationProtectionEnabled: Bool? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.eventDataStore = eventDataStore
            self.kmsKeyId = kmsKeyId
            self.multiRegionEnabled = multiRegionEnabled
            self.name = name
            self.organizationEnabled = organizationEnabled
            self.retentionPeriod = retentionPeriod
            self.terminationProtectionEnabled = terminationProtectionEnabled
        }

        public func validate(name: String) throws {
            try self.advancedEventSelectors?.forEach {
                try $0.validate(name: "\(name).advancedEventSelectors[]")
            }
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, max: 256)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, min: 3)
            try self.validate(self.eventDataStore, name: "eventDataStore", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, max: 350)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, min: 1)
            try self.validate(self.kmsKeyId, name: "kmsKeyId", parent: name, pattern: "^[a-zA-Z0-9._/\\-:]+$")
            try self.validate(self.name, name: "name", parent: name, max: 128)
            try self.validate(self.name, name: "name", parent: name, min: 3)
            try self.validate(self.name, name: "name", parent: name, pattern: "^[a-zA-Z0-9._\\-]+$")
            try self.validate(self.retentionPeriod, name: "retentionPeriod", parent: name, max: 2557)
            try self.validate(self.retentionPeriod, name: "retentionPeriod", parent: name, min: 7)
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case eventDataStore = "EventDataStore"
            case kmsKeyId = "KmsKeyId"
            case multiRegionEnabled = "MultiRegionEnabled"
            case name = "Name"
            case organizationEnabled = "OrganizationEnabled"
            case retentionPeriod = "RetentionPeriod"
            case terminationProtectionEnabled = "TerminationProtectionEnabled"
        }
    }

    public struct UpdateEventDataStoreResponse: AWSDecodableShape {
        /// The advanced event selectors that are applied to the event data store.
        public let advancedEventSelectors: [AdvancedEventSelector]?
        /// The timestamp that shows when an event data store was first created.
        public let createdTimestamp: Date?
        /// The ARN of the event data store.
        public let eventDataStoreArn: String?
        /// Specifies the KMS key ID that encrypts the events delivered by CloudTrail.  The value is a fully specified ARN to a KMS key in the following format.  arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Indicates whether the event data store includes events from all regions, or only from the region in which it was created.
        public let multiRegionEnabled: Bool?
        /// The name of the event data store.
        public let name: String?
        /// Indicates whether an event data store is collecting logged events for an organization in Organizations.
        public let organizationEnabled: Bool?
        /// The retention period, in days.
        public let retentionPeriod: Int?
        /// The status of an event data store. Values can be ENABLED and PENDING_DELETION.
        public let status: EventDataStoreStatus?
        /// Indicates whether termination protection is enabled for the event data store.
        public let terminationProtectionEnabled: Bool?
        /// The timestamp that shows when the event data store was last updated. UpdatedTimestamp is always either the same or newer than the time shown in CreatedTimestamp.
        public let updatedTimestamp: Date?

        public init(advancedEventSelectors: [AdvancedEventSelector]? = nil, createdTimestamp: Date? = nil, eventDataStoreArn: String? = nil, kmsKeyId: String? = nil, multiRegionEnabled: Bool? = nil, name: String? = nil, organizationEnabled: Bool? = nil, retentionPeriod: Int? = nil, status: EventDataStoreStatus? = nil, terminationProtectionEnabled: Bool? = nil, updatedTimestamp: Date? = nil) {
            self.advancedEventSelectors = advancedEventSelectors
            self.createdTimestamp = createdTimestamp
            self.eventDataStoreArn = eventDataStoreArn
            self.kmsKeyId = kmsKeyId
            self.multiRegionEnabled = multiRegionEnabled
            self.name = name
            self.organizationEnabled = organizationEnabled
            self.retentionPeriod = retentionPeriod
            self.status = status
            self.terminationProtectionEnabled = terminationProtectionEnabled
            self.updatedTimestamp = updatedTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case advancedEventSelectors = "AdvancedEventSelectors"
            case createdTimestamp = "CreatedTimestamp"
            case eventDataStoreArn = "EventDataStoreArn"
            case kmsKeyId = "KmsKeyId"
            case multiRegionEnabled = "MultiRegionEnabled"
            case name = "Name"
            case organizationEnabled = "OrganizationEnabled"
            case retentionPeriod = "RetentionPeriod"
            case status = "Status"
            case terminationProtectionEnabled = "TerminationProtectionEnabled"
            case updatedTimestamp = "UpdatedTimestamp"
        }
    }

    public struct UpdateTrailRequest: AWSEncodableShape {
        /// Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs are delivered. Not required unless you specify CloudWatchLogsRoleArn.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies whether log file validation is enabled. The default is false.  When you disable log file integrity validation, the chain of digest files is broken after one hour. CloudTrail  does not create digest files for log files that were delivered during a period in which log file integrity validation  was disabled. For example, if you enable log file integrity validation at noon on January 1, disable it at noon on  January 2, and re-enable it at noon on January 10, digest files will not be created for the log files delivered from noon  on January 2 to noon on January 10. The same applies whenever you stop CloudTrail logging or delete a trail.
        public let enableLogFileValidation: Bool?
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        public let includeGlobalServiceEvents: Bool?
        /// Specifies whether the trail applies only to the current region or to all regions. The default is false. If the trail exists only in the current region and this value is set to true,  shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all regions and this value is set to false, the trail will remain in the region  where it was created, and its shadow trails in other regions will be deleted. As a best practice, consider using trails that log events in all regions.
        public let isMultiRegionTrail: Bool?
        /// Specifies whether the trail is applied to all accounts in an organization in Organizations, or only for the current Amazon Web Services account.  The default is false, and cannot be true unless the call is made on behalf of an Amazon Web Services account that is the management account for an organization in  Organizations. If the trail is not an organization trail and this is set to true, the trail will be created in all Amazon Web Services accounts that belong to the organization. If the trail is an organization trail and this is set to false, the trail will remain in the current Amazon Web Services account but be  deleted from all member accounts in the organization.
        public let isOrganizationTrail: Bool?
        /// Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by "alias/", a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier. CloudTrail also supports KMS multi-Region keys. For more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide. Examples:   alias/MyAliasName   arn:aws:kms:us-east-2:123456789012:alias/MyAliasName   arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012   12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Specifies the name of the trail or trail ARN. If Name is a trail name, the string must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are not valid.   Not be in IP address format (for example, 192.168.5.4)   If Name is a trail ARN, it must be in the following format.  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let name: String
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
        public let s3BucketName: String?
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
        public let s3KeyPrefix: String?
        /// Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
        public let snsTopicName: String?

        public init(cloudWatchLogsLogGroupArn: String? = nil, cloudWatchLogsRoleArn: String? = nil, enableLogFileValidation: Bool? = nil, includeGlobalServiceEvents: Bool? = nil, isMultiRegionTrail: Bool? = nil, isOrganizationTrail: Bool? = nil, kmsKeyId: String? = nil, name: String, s3BucketName: String? = nil, s3KeyPrefix: String? = nil, snsTopicName: String? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.enableLogFileValidation = enableLogFileValidation
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.isMultiRegionTrail = isMultiRegionTrail
            self.isOrganizationTrail = isOrganizationTrail
            self.kmsKeyId = kmsKeyId
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.snsTopicName = snsTopicName
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case enableLogFileValidation = "EnableLogFileValidation"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
            case isMultiRegionTrail = "IsMultiRegionTrail"
            case isOrganizationTrail = "IsOrganizationTrail"
            case kmsKeyId = "KmsKeyId"
            case name = "Name"
            case s3BucketName = "S3BucketName"
            case s3KeyPrefix = "S3KeyPrefix"
            case snsTopicName = "SnsTopicName"
        }
    }

    public struct UpdateTrailResponse: AWSDecodableShape {
        /// Specifies the Amazon Resource Name (ARN) of the log group to which CloudTrail logs are delivered.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        public let includeGlobalServiceEvents: Bool?
        /// Specifies whether the trail exists in one region or in all regions.
        public let isMultiRegionTrail: Bool?
        /// Specifies whether the trail is an organization trail.
        public let isOrganizationTrail: Bool?
        /// Specifies the KMS key ID that encrypts the logs delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the following format.  arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012
        public let kmsKeyId: String?
        /// Specifies whether log file integrity validation is enabled.
        public let logFileValidationEnabled: Bool?
        /// Specifies the name of the trail.
        public let name: String?
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files.
        public let s3BucketName: String?
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery.  For more information, see Finding Your IAM Log Files.
        public let s3KeyPrefix: String?
        /// Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered. The following is the format of a topic ARN.  arn:aws:sns:us-east-2:123456789012:MyTopic
        public let snsTopicARN: String?
        /// This field is no longer in use. Use UpdateTrailResponse$SnsTopicARN.
        public let snsTopicName: String?
        /// Specifies the ARN of the trail that was updated. The following is the format of a trail ARN.  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
        public let trailARN: String?

        public init(cloudWatchLogsLogGroupArn: String? = nil, cloudWatchLogsRoleArn: String? = nil, includeGlobalServiceEvents: Bool? = nil, isMultiRegionTrail: Bool? = nil, isOrganizationTrail: Bool? = nil, kmsKeyId: String? = nil, logFileValidationEnabled: Bool? = nil, name: String? = nil, s3BucketName: String? = nil, s3KeyPrefix: String? = nil, snsTopicARN: String? = nil, trailARN: String? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.isMultiRegionTrail = isMultiRegionTrail
            self.isOrganizationTrail = isOrganizationTrail
            self.kmsKeyId = kmsKeyId
            self.logFileValidationEnabled = logFileValidationEnabled
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.snsTopicARN = snsTopicARN
            self.snsTopicName = nil
            self.trailARN = trailARN
        }

        @available(*, deprecated, message: "Members snsTopicName have been deprecated")
        public init(cloudWatchLogsLogGroupArn: String? = nil, cloudWatchLogsRoleArn: String? = nil, includeGlobalServiceEvents: Bool? = nil, isMultiRegionTrail: Bool? = nil, isOrganizationTrail: Bool? = nil, kmsKeyId: String? = nil, logFileValidationEnabled: Bool? = nil, name: String? = nil, s3BucketName: String? = nil, s3KeyPrefix: String? = nil, snsTopicARN: String? = nil, snsTopicName: String? = nil, trailARN: String? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.isMultiRegionTrail = isMultiRegionTrail
            self.isOrganizationTrail = isOrganizationTrail
            self.kmsKeyId = kmsKeyId
            self.logFileValidationEnabled = logFileValidationEnabled
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.snsTopicARN = snsTopicARN
            self.snsTopicName = snsTopicName
            self.trailARN = trailARN
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
            case isMultiRegionTrail = "IsMultiRegionTrail"
            case isOrganizationTrail = "IsOrganizationTrail"
            case kmsKeyId = "KmsKeyId"
            case logFileValidationEnabled = "LogFileValidationEnabled"
            case name = "Name"
            case s3BucketName = "S3BucketName"
            case s3KeyPrefix = "S3KeyPrefix"
            case snsTopicARN = "SnsTopicARN"
            case snsTopicName = "SnsTopicName"
            case trailARN = "TrailARN"
        }
    }
}

// MARK: - Errors

/// Error enum for CloudTrail
public struct CloudTrailErrorType: AWSErrorType {
    enum Code: String {
        case accountHasOngoingImportException = "AccountHasOngoingImportException"
        case accountNotFoundException = "AccountNotFoundException"
        case accountNotRegisteredException = "AccountNotRegisteredException"
        case accountRegisteredException = "AccountRegisteredException"
        case cannotDelegateManagementAccountException = "CannotDelegateManagementAccountException"
        case channelARNInvalidException = "ChannelARNInvalidException"
        case channelNotFoundException = "ChannelNotFoundException"
        case cloudTrailARNInvalidException = "CloudTrailARNInvalidException"
        case cloudTrailAccessNotEnabledException = "CloudTrailAccessNotEnabledException"
        case cloudTrailInvalidClientTokenIdException = "CloudTrailInvalidClientTokenIdException"
        case cloudWatchLogsDeliveryUnavailableException = "CloudWatchLogsDeliveryUnavailableException"
        case conflictException = "ConflictException"
        case delegatedAdminAccountLimitExceededException = "DelegatedAdminAccountLimitExceededException"
        case eventDataStoreARNInvalidException = "EventDataStoreARNInvalidException"
        case eventDataStoreAlreadyExistsException = "EventDataStoreAlreadyExistsException"
        case eventDataStoreHasOngoingImportException = "EventDataStoreHasOngoingImportException"
        case eventDataStoreMaxLimitExceededException = "EventDataStoreMaxLimitExceededException"
        case eventDataStoreNotFoundException = "EventDataStoreNotFoundException"
        case eventDataStoreTerminationProtectedException = "EventDataStoreTerminationProtectedException"
        case importNotFoundException = "ImportNotFoundException"
        case inactiveEventDataStoreException = "InactiveEventDataStoreException"
        case inactiveQueryException = "InactiveQueryException"
        case insightNotEnabledException = "InsightNotEnabledException"
        case insufficientDependencyServiceAccessPermissionException = "InsufficientDependencyServiceAccessPermissionException"
        case insufficientEncryptionPolicyException = "InsufficientEncryptionPolicyException"
        case insufficientS3BucketPolicyException = "InsufficientS3BucketPolicyException"
        case insufficientSnsTopicPolicyException = "InsufficientSnsTopicPolicyException"
        case invalidCloudWatchLogsLogGroupArnException = "InvalidCloudWatchLogsLogGroupArnException"
        case invalidCloudWatchLogsRoleArnException = "InvalidCloudWatchLogsRoleArnException"
        case invalidDateRangeException = "InvalidDateRangeException"
        case invalidEventCategoryException = "InvalidEventCategoryException"
        case invalidEventDataStoreCategoryException = "InvalidEventDataStoreCategoryException"
        case invalidEventDataStoreStatusException = "InvalidEventDataStoreStatusException"
        case invalidEventSelectorsException = "InvalidEventSelectorsException"
        case invalidHomeRegionException = "InvalidHomeRegionException"
        case invalidImportSourceException = "InvalidImportSourceException"
        case invalidInsightSelectorsException = "InvalidInsightSelectorsException"
        case invalidKmsKeyIdException = "InvalidKmsKeyIdException"
        case invalidLookupAttributesException = "InvalidLookupAttributesException"
        case invalidMaxResultsException = "InvalidMaxResultsException"
        case invalidNextTokenException = "InvalidNextTokenException"
        case invalidParameterCombinationException = "InvalidParameterCombinationException"
        case invalidParameterException = "InvalidParameterException"
        case invalidQueryStatementException = "InvalidQueryStatementException"
        case invalidQueryStatusException = "InvalidQueryStatusException"
        case invalidS3BucketNameException = "InvalidS3BucketNameException"
        case invalidS3PrefixException = "InvalidS3PrefixException"
        case invalidSnsTopicNameException = "InvalidSnsTopicNameException"
        case invalidTagParameterException = "InvalidTagParameterException"
        case invalidTimeRangeException = "InvalidTimeRangeException"
        case invalidTokenException = "InvalidTokenException"
        case invalidTrailNameException = "InvalidTrailNameException"
        case kmsException = "KmsException"
        case kmsKeyDisabledException = "KmsKeyDisabledException"
        case kmsKeyNotFoundException = "KmsKeyNotFoundException"
        case maxConcurrentQueriesException = "MaxConcurrentQueriesException"
        case maximumNumberOfTrailsExceededException = "MaximumNumberOfTrailsExceededException"
        case noManagementAccountSLRExistsException = "NoManagementAccountSLRExistsException"
        case notOrganizationManagementAccountException = "NotOrganizationManagementAccountException"
        case notOrganizationMasterAccountException = "NotOrganizationMasterAccountException"
        case operationNotPermittedException = "OperationNotPermittedException"
        case organizationNotInAllFeaturesModeException = "OrganizationNotInAllFeaturesModeException"
        case organizationsNotInUseException = "OrganizationsNotInUseException"
        case queryIdNotFoundException = "QueryIdNotFoundException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case resourceTypeNotSupportedException = "ResourceTypeNotSupportedException"
        case s3BucketDoesNotExistException = "S3BucketDoesNotExistException"
        case tagsLimitExceededException = "TagsLimitExceededException"
        case trailAlreadyExistsException = "TrailAlreadyExistsException"
        case trailNotFoundException = "TrailNotFoundException"
        case trailNotProvidedException = "TrailNotProvidedException"
        case unsupportedOperationException = "UnsupportedOperationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize CloudTrail
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    ///  This exception is thrown when you start a new import and a  previous import is still in progress.
    public static var accountHasOngoingImportException: Self { .init(.accountHasOngoingImportException) }
    /// This exception is thrown when when the specified account is not found or not part of an organization.
    public static var accountNotFoundException: Self { .init(.accountNotFoundException) }
    /// This exception is thrown when the specified account is not registered as the CloudTrail delegated administrator.
    public static var accountNotRegisteredException: Self { .init(.accountNotRegisteredException) }
    /// This exception is thrown when the account is already registered as the CloudTrail delegated administrator.
    public static var accountRegisteredException: Self { .init(.accountRegisteredException) }
    /// This exception is thrown when the management account of an organization is registered as the CloudTrail delegated administrator.
    public static var cannotDelegateManagementAccountException: Self { .init(.cannotDelegateManagementAccountException) }
    /// This exception is thrown when the specified value of ChannelARN is not valid.
    public static var channelARNInvalidException: Self { .init(.channelARNInvalidException) }
    ///  The specified channel was not found.
    public static var channelNotFoundException: Self { .init(.channelNotFoundException) }
    /// This exception is thrown when an operation is called with a trail ARN that is not valid. The following is the format of a trail ARN.  arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail
    public static var cloudTrailARNInvalidException: Self { .init(.cloudTrailARNInvalidException) }
    /// This exception is thrown when trusted access has not been enabled between CloudTrail and Organizations. For more information,  see Enabling Trusted Access with Other Amazon Web Services Services and Prepare For Creating a Trail For Your Organization.
    public static var cloudTrailAccessNotEnabledException: Self { .init(.cloudTrailAccessNotEnabledException) }
    /// This exception is thrown when a call results in the InvalidClientTokenId error code.  This can occur when you are creating or updating a trail to send notifications to an Amazon SNS topic that  is in a suspended Amazon Web Services account.
    public static var cloudTrailInvalidClientTokenIdException: Self { .init(.cloudTrailInvalidClientTokenIdException) }
    /// Cannot set a CloudWatch Logs delivery for this region.
    public static var cloudWatchLogsDeliveryUnavailableException: Self { .init(.cloudWatchLogsDeliveryUnavailableException) }
    /// This exception is thrown when the specified resource is not ready for an operation.  This can occur when you try to run an operation on a resource before CloudTrail has time to fully load the resource.  If this exception occurs, wait a few minutes, and then try the operation again.
    public static var conflictException: Self { .init(.conflictException) }
    /// This exception is thrown when the maximum number of CloudTrail delegated administrators is reached.
    public static var delegatedAdminAccountLimitExceededException: Self { .init(.delegatedAdminAccountLimitExceededException) }
    /// The specified event data store ARN is not valid or does not map to an event data store in your account.
    public static var eventDataStoreARNInvalidException: Self { .init(.eventDataStoreARNInvalidException) }
    /// An event data store with that name already exists.
    public static var eventDataStoreAlreadyExistsException: Self { .init(.eventDataStoreAlreadyExistsException) }
    ///  This exception is thrown when you try to update or delete an event data store that currently has an import in progress.
    public static var eventDataStoreHasOngoingImportException: Self { .init(.eventDataStoreHasOngoingImportException) }
    /// Your account has used the maximum number of event data stores.
    public static var eventDataStoreMaxLimitExceededException: Self { .init(.eventDataStoreMaxLimitExceededException) }
    /// The specified event data store was not found.
    public static var eventDataStoreNotFoundException: Self { .init(.eventDataStoreNotFoundException) }
    /// The event data store cannot be deleted because termination protection is enabled for it.
    public static var eventDataStoreTerminationProtectedException: Self { .init(.eventDataStoreTerminationProtectedException) }
    ///  The specified import was not found.
    public static var importNotFoundException: Self { .init(.importNotFoundException) }
    /// The event data store is inactive.
    public static var inactiveEventDataStoreException: Self { .init(.inactiveEventDataStoreException) }
    /// The specified query cannot be canceled because it is in the FINISHED, FAILED, TIMED_OUT, or CANCELLED state.
    public static var inactiveQueryException: Self { .init(.inactiveQueryException) }
    /// If you run GetInsightSelectors on a trail that does not have Insights events enabled, the operation throws the exception InsightNotEnabledException.
    public static var insightNotEnabledException: Self { .init(.insightNotEnabledException) }
    /// This exception is thrown when the IAM user or role that is used to create  the organization resource lacks one or more required permissions for  creating an organization resource in a required service.
    public static var insufficientDependencyServiceAccessPermissionException: Self { .init(.insufficientDependencyServiceAccessPermissionException) }
    /// This exception is thrown when the policy on the S3 bucket or KMS key does not have sufficient permissions for the operation.
    public static var insufficientEncryptionPolicyException: Self { .init(.insufficientEncryptionPolicyException) }
    /// This exception is thrown when the policy on the S3 bucket is not sufficient.
    public static var insufficientS3BucketPolicyException: Self { .init(.insufficientS3BucketPolicyException) }
    /// This exception is thrown when the policy on the Amazon SNS topic is not sufficient.
    public static var insufficientSnsTopicPolicyException: Self { .init(.insufficientSnsTopicPolicyException) }
    /// This exception is thrown when the provided CloudWatch Logs log group is not valid.
    public static var invalidCloudWatchLogsLogGroupArnException: Self { .init(.invalidCloudWatchLogsLogGroupArnException) }
    /// This exception is thrown when the provided role is not valid.
    public static var invalidCloudWatchLogsRoleArnException: Self { .init(.invalidCloudWatchLogsRoleArnException) }
    /// A date range for the query was specified that is not valid. Be sure that the start time is chronologically   before the end time. For more information  about writing a query, see Create  or edit a query in the CloudTrail User Guide.
    public static var invalidDateRangeException: Self { .init(.invalidDateRangeException) }
    /// Occurs if an event category that is not valid is specified as a value of EventCategory.
    public static var invalidEventCategoryException: Self { .init(.invalidEventCategoryException) }
    /// This exception is thrown when event categories of specified event data stores are not valid.
    public static var invalidEventDataStoreCategoryException: Self { .init(.invalidEventDataStoreCategoryException) }
    /// The event data store is not in a status that supports the operation.
    public static var invalidEventDataStoreStatusException: Self { .init(.invalidEventDataStoreStatusException) }
    /// This exception is thrown when the PutEventSelectors operation is called with a number of event  selectors, advanced event selectors, or data resources that is not valid. The combination of event selectors or advanced event selectors and  data resources is not valid. A trail can have up to 5 event selectors. If a trail uses advanced event selectors, a maximum  of 500 total values for all conditions in all advanced event selectors is allowed. A trail is limited to 250 data resources. These data resources can be distributed across event selectors, but the overall total cannot exceed 250. You can:   Specify a valid number of event selectors (1 to 5) for a trail.   Specify a valid number of data resources (1 to 250) for an event selector.  The limit of number of resources on an individual event selector is configurable up to 250.  However, this upper limit is allowed only if the total number of data resources does not  exceed 250 across all event selectors for a trail.   Specify up to 500 values for all conditions in all advanced event selectors for a trail.   Specify a valid value for a parameter. For example, specifying the ReadWriteType  parameter with a value of read-only is not valid.
    public static var invalidEventSelectorsException: Self { .init(.invalidEventSelectorsException) }
    /// This exception is thrown when an operation is called on a trail from a region other than the region in which the trail was created.
    public static var invalidHomeRegionException: Self { .init(.invalidHomeRegionException) }
    ///  This exception is thrown when the provided source S3 bucket is not valid for import.
    public static var invalidImportSourceException: Self { .init(.invalidImportSourceException) }
    /// The formatting or syntax of the InsightSelectors JSON statement in your PutInsightSelectors or GetInsightSelectors request  is not valid, or the specified insight type in the InsightSelectors statement is not a valid insight type.
    public static var invalidInsightSelectorsException: Self { .init(.invalidInsightSelectorsException) }
    /// This exception is thrown when the KMS key ARN is not valid.
    public static var invalidKmsKeyIdException: Self { .init(.invalidKmsKeyIdException) }
    /// Occurs when a lookup attribute is specified that is not valid.
    public static var invalidLookupAttributesException: Self { .init(.invalidLookupAttributesException) }
    /// This exception is thrown if the limit specified is not valid.
    public static var invalidMaxResultsException: Self { .init(.invalidMaxResultsException) }
    /// A token that is not valid, or a token that was previously used in a request with different parameters. This exception is thrown if the token is not valid.
    public static var invalidNextTokenException: Self { .init(.invalidNextTokenException) }
    /// This exception is thrown when the combination of parameters provided is not valid.
    public static var invalidParameterCombinationException: Self { .init(.invalidParameterCombinationException) }
    /// The request includes a parameter that is not valid.
    public static var invalidParameterException: Self { .init(.invalidParameterException) }
    /// The query that was submitted has validation errors, or uses incorrect syntax or unsupported keywords. For more information  about writing a query, see Create  or edit a query in the CloudTrail User Guide.
    public static var invalidQueryStatementException: Self { .init(.invalidQueryStatementException) }
    /// The query status is not valid for the operation.
    public static var invalidQueryStatusException: Self { .init(.invalidQueryStatusException) }
    /// This exception is thrown when the provided S3 bucket name is not valid.
    public static var invalidS3BucketNameException: Self { .init(.invalidS3BucketNameException) }
    /// This exception is thrown when the provided S3 prefix is not valid.
    public static var invalidS3PrefixException: Self { .init(.invalidS3PrefixException) }
    /// This exception is thrown when the provided SNS topic name is not valid.
    public static var invalidSnsTopicNameException: Self { .init(.invalidSnsTopicNameException) }
    /// This exception is thrown when the specified tag key or values are not valid.  It can also occur if there are duplicate tags or too many tags on the resource.
    public static var invalidTagParameterException: Self { .init(.invalidTagParameterException) }
    /// Occurs if the timestamp values are not valid. Either the start time occurs after the end time, or the time range is outside the range of possible values.
    public static var invalidTimeRangeException: Self { .init(.invalidTimeRangeException) }
    /// Reserved for future use.
    public static var invalidTokenException: Self { .init(.invalidTokenException) }
    /// This exception is thrown when the provided trail name is not valid. Trail names must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are not valid.   Not be in IP address format (for example, 192.168.5.4)
    public static var invalidTrailNameException: Self { .init(.invalidTrailNameException) }
    /// This exception is thrown when there is an issue with the specified KMS key and the trail or event data store can&#39;t be updated.
    public static var kmsException: Self { .init(.kmsException) }
    /// This exception is no longer in use.
    public static var kmsKeyDisabledException: Self { .init(.kmsKeyDisabledException) }
    /// This exception is thrown when the KMS key does not exist, when the S3 bucket and the KMS key are not in the same region, or when the KMS key associated with the Amazon SNS topic either does not exist or is not in the same region.
    public static var kmsKeyNotFoundException: Self { .init(.kmsKeyNotFoundException) }
    /// You are already running the maximum number of concurrent queries. Wait a minute for some queries to finish, and then  run the query again.
    public static var maxConcurrentQueriesException: Self { .init(.maxConcurrentQueriesException) }
    /// This exception is thrown when the maximum number of trails is reached.
    public static var maximumNumberOfTrailsExceededException: Self { .init(.maximumNumberOfTrailsExceededException) }
    ///  This exception is thrown when the management account does not have a service-linked role.
    public static var noManagementAccountSLRExistsException: Self { .init(.noManagementAccountSLRExistsException) }
    ///  This exception is thrown when the account making the request is not the organization&#39;s management account.
    public static var notOrganizationManagementAccountException: Self { .init(.notOrganizationManagementAccountException) }
    /// This exception is thrown when the Amazon Web Services account making the request to create  or update an organization trail or event data store is not the management account for an  organization in Organizations. For more information, see  Prepare For Creating a Trail For Your Organization or Create an event data store.
    public static var notOrganizationMasterAccountException: Self { .init(.notOrganizationMasterAccountException) }
    /// This exception is thrown when the requested operation is not permitted.
    public static var operationNotPermittedException: Self { .init(.operationNotPermittedException) }
    /// This exception is thrown when Organizations is not configured to support all  features. All features must be enabled in Organizations to support creating an organization trail or event data store.
    public static var organizationNotInAllFeaturesModeException: Self { .init(.organizationNotInAllFeaturesModeException) }
    /// This exception is thrown when the request is made from an Amazon Web Services account that is not a member of an organization.  To make this request, sign in using the credentials of an account that belongs to an organization.
    public static var organizationsNotInUseException: Self { .init(.organizationsNotInUseException) }
    /// The query ID does not exist or does not map to a query.
    public static var queryIdNotFoundException: Self { .init(.queryIdNotFoundException) }
    /// This exception is thrown when the specified resource is not found.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// This exception is thrown when the specified resource type is not supported by CloudTrail.
    public static var resourceTypeNotSupportedException: Self { .init(.resourceTypeNotSupportedException) }
    /// This exception is thrown when the specified S3 bucket does not exist.
    public static var s3BucketDoesNotExistException: Self { .init(.s3BucketDoesNotExistException) }
    /// The number of tags per trail has exceeded the permitted amount. Currently, the limit is 50.
    public static var tagsLimitExceededException: Self { .init(.tagsLimitExceededException) }
    /// This exception is thrown when the specified trail already exists.
    public static var trailAlreadyExistsException: Self { .init(.trailAlreadyExistsException) }
    /// This exception is thrown when the trail with the given name is not found.
    public static var trailNotFoundException: Self { .init(.trailNotFoundException) }
    /// This exception is no longer in use.
    public static var trailNotProvidedException: Self { .init(.trailNotProvidedException) }
    /// This exception is thrown when the requested operation is not supported.
    public static var unsupportedOperationException: Self { .init(.unsupportedOperationException) }
}

extension CloudTrailErrorType: Equatable {
    public static func == (lhs: CloudTrailErrorType, rhs: CloudTrailErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension CloudTrailErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
