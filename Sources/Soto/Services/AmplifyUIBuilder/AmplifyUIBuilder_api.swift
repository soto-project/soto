//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS AmplifyUIBuilder service.
///
/// The Amplify UI Builder API provides a programmatic interface for creating and configuring user interface (UI) component libraries and themes for use in your Amplify applications. You can then connect these UI components to an application's backend Amazon Web Services resources. You can also use the Amplify Studio visual designer to create UI components and model data for an app. For more information, see Introduction in the Amplify Docs. The Amplify Framework is a comprehensive set of SDKs, libraries, tools, and documentation for client app development. For more information, see the Amplify Framework. For more information about deploying an Amplify application to Amazon Web Services, see the Amplify User Guide.
public struct AmplifyUIBuilder: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the AmplifyUIBuilder client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "AmplifyUIBuilder",
            serviceIdentifier: "amplifyuibuilder",
            serviceProtocol: .restjson,
            apiVersion: "2021-08-11",
            endpoint: endpoint,
            errorType: AmplifyUIBuilderErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates a new component for an Amplify app.
    @Sendable
    @inlinable
    public func createComponent(_ input: CreateComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateComponentResponse {
        try await self.client.execute(
            operation: "CreateComponent", 
            path: "/app/{appId}/environment/{environmentName}/components", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new component for an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app to associate with the component.
    ///   - clientToken: The unique client token.
    ///   - componentToCreate: Represents the configuration of the component to create.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - logger: Logger use during operation
    @inlinable
    public func createComponent(
        appId: String,
        clientToken: String? = CreateComponentRequest.idempotencyToken(),
        componentToCreate: CreateComponentData,
        environmentName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateComponentResponse {
        let input = CreateComponentRequest(
            appId: appId, 
            clientToken: clientToken, 
            componentToCreate: componentToCreate, 
            environmentName: environmentName
        )
        return try await self.createComponent(input, logger: logger)
    }

    /// Creates a new form for an Amplify app.
    @Sendable
    @inlinable
    public func createForm(_ input: CreateFormRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFormResponse {
        try await self.client.execute(
            operation: "CreateForm", 
            path: "/app/{appId}/environment/{environmentName}/forms", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new form for an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app to associate with the form.
    ///   - clientToken: The unique client token.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - formToCreate: Represents the configuration of the form to create.
    ///   - logger: Logger use during operation
    @inlinable
    public func createForm(
        appId: String,
        clientToken: String? = CreateFormRequest.idempotencyToken(),
        environmentName: String,
        formToCreate: CreateFormData,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFormResponse {
        let input = CreateFormRequest(
            appId: appId, 
            clientToken: clientToken, 
            environmentName: environmentName, 
            formToCreate: formToCreate
        )
        return try await self.createForm(input, logger: logger)
    }

    /// Creates a theme to apply to the components in an Amplify app.
    @Sendable
    @inlinable
    public func createTheme(_ input: CreateThemeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateThemeResponse {
        try await self.client.execute(
            operation: "CreateTheme", 
            path: "/app/{appId}/environment/{environmentName}/themes", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a theme to apply to the components in an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app associated with the theme.
    ///   - clientToken: The unique client token.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - themeToCreate: Represents the configuration of the theme to create.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTheme(
        appId: String,
        clientToken: String? = CreateThemeRequest.idempotencyToken(),
        environmentName: String,
        themeToCreate: CreateThemeData,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateThemeResponse {
        let input = CreateThemeRequest(
            appId: appId, 
            clientToken: clientToken, 
            environmentName: environmentName, 
            themeToCreate: themeToCreate
        )
        return try await self.createTheme(input, logger: logger)
    }

    /// Deletes a component from an Amplify app.
    @Sendable
    @inlinable
    public func deleteComponent(_ input: DeleteComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteComponent", 
            path: "/app/{appId}/environment/{environmentName}/components/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a component from an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app associated with the component to delete.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - id: The unique ID of the component to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteComponent(
        appId: String,
        environmentName: String,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteComponentRequest(
            appId: appId, 
            environmentName: environmentName, 
            id: id
        )
        return try await self.deleteComponent(input, logger: logger)
    }

    /// Deletes a form from an Amplify app.
    @Sendable
    @inlinable
    public func deleteForm(_ input: DeleteFormRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteForm", 
            path: "/app/{appId}/environment/{environmentName}/forms/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a form from an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app associated with the form to delete.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - id: The unique ID of the form to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteForm(
        appId: String,
        environmentName: String,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteFormRequest(
            appId: appId, 
            environmentName: environmentName, 
            id: id
        )
        return try await self.deleteForm(input, logger: logger)
    }

    /// Deletes a theme from an Amplify app.
    @Sendable
    @inlinable
    public func deleteTheme(_ input: DeleteThemeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteTheme", 
            path: "/app/{appId}/environment/{environmentName}/themes/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a theme from an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app associated with the theme to delete.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - id: The unique ID of the theme to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTheme(
        appId: String,
        environmentName: String,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteThemeRequest(
            appId: appId, 
            environmentName: environmentName, 
            id: id
        )
        return try await self.deleteTheme(input, logger: logger)
    }

    ///  This is for internal use.  Amplify uses this action to exchange an access code for a token.
    @Sendable
    @inlinable
    public func exchangeCodeForToken(_ input: ExchangeCodeForTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExchangeCodeForTokenResponse {
        try await self.client.execute(
            operation: "ExchangeCodeForToken", 
            path: "/tokens/{provider}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This is for internal use.  Amplify uses this action to exchange an access code for a token.
    ///
    /// Parameters:
    ///   - provider: The third-party provider for the token. The only valid value is figma.
    ///   - request: Describes the configuration of the request.
    ///   - logger: Logger use during operation
    @inlinable
    public func exchangeCodeForToken(
        provider: TokenProviders,
        request: ExchangeCodeForTokenRequestBody,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExchangeCodeForTokenResponse {
        let input = ExchangeCodeForTokenRequest(
            provider: provider, 
            request: request
        )
        return try await self.exchangeCodeForToken(input, logger: logger)
    }

    /// Exports component configurations to code that is ready to integrate into an Amplify app.
    @Sendable
    @inlinable
    public func exportComponents(_ input: ExportComponentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportComponentsResponse {
        try await self.client.execute(
            operation: "ExportComponents", 
            path: "/export/app/{appId}/environment/{environmentName}/components", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Exports component configurations to code that is ready to integrate into an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app to export components to.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportComponents(
        appId: String,
        environmentName: String,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportComponentsResponse {
        let input = ExportComponentsRequest(
            appId: appId, 
            environmentName: environmentName, 
            nextToken: nextToken
        )
        return try await self.exportComponents(input, logger: logger)
    }

    /// Exports form configurations to code that is ready to integrate into an Amplify app.
    @Sendable
    @inlinable
    public func exportForms(_ input: ExportFormsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportFormsResponse {
        try await self.client.execute(
            operation: "ExportForms", 
            path: "/export/app/{appId}/environment/{environmentName}/forms", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Exports form configurations to code that is ready to integrate into an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app to export forms to.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportForms(
        appId: String,
        environmentName: String,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportFormsResponse {
        let input = ExportFormsRequest(
            appId: appId, 
            environmentName: environmentName, 
            nextToken: nextToken
        )
        return try await self.exportForms(input, logger: logger)
    }

    /// Exports theme configurations to code that is ready to integrate into an Amplify app.
    @Sendable
    @inlinable
    public func exportThemes(_ input: ExportThemesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportThemesResponse {
        try await self.client.execute(
            operation: "ExportThemes", 
            path: "/export/app/{appId}/environment/{environmentName}/themes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Exports theme configurations to code that is ready to integrate into an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app to export the themes to.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportThemes(
        appId: String,
        environmentName: String,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportThemesResponse {
        let input = ExportThemesRequest(
            appId: appId, 
            environmentName: environmentName, 
            nextToken: nextToken
        )
        return try await self.exportThemes(input, logger: logger)
    }

    /// Returns an existing code generation job.
    @Sendable
    @inlinable
    public func getCodegenJob(_ input: GetCodegenJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCodegenJobResponse {
        try await self.client.execute(
            operation: "GetCodegenJob", 
            path: "/app/{appId}/environment/{environmentName}/codegen-jobs/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns an existing code generation job.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app associated with the code generation job.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app associated with the code generation job.
    ///   - id: The unique ID of the code generation job.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCodegenJob(
        appId: String,
        environmentName: String,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCodegenJobResponse {
        let input = GetCodegenJobRequest(
            appId: appId, 
            environmentName: environmentName, 
            id: id
        )
        return try await self.getCodegenJob(input, logger: logger)
    }

    /// Returns an existing component for an Amplify app.
    @Sendable
    @inlinable
    public func getComponent(_ input: GetComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetComponentResponse {
        try await self.client.execute(
            operation: "GetComponent", 
            path: "/app/{appId}/environment/{environmentName}/components/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns an existing component for an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - id: The unique ID of the component.
    ///   - logger: Logger use during operation
    @inlinable
    public func getComponent(
        appId: String,
        environmentName: String,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetComponentResponse {
        let input = GetComponentRequest(
            appId: appId, 
            environmentName: environmentName, 
            id: id
        )
        return try await self.getComponent(input, logger: logger)
    }

    /// Returns an existing form for an Amplify app.
    @Sendable
    @inlinable
    public func getForm(_ input: GetFormRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFormResponse {
        try await self.client.execute(
            operation: "GetForm", 
            path: "/app/{appId}/environment/{environmentName}/forms/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns an existing form for an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - id: The unique ID of the form.
    ///   - logger: Logger use during operation
    @inlinable
    public func getForm(
        appId: String,
        environmentName: String,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFormResponse {
        let input = GetFormRequest(
            appId: appId, 
            environmentName: environmentName, 
            id: id
        )
        return try await self.getForm(input, logger: logger)
    }

    /// Returns existing metadata for an Amplify app.
    @Sendable
    @inlinable
    public func getMetadata(_ input: GetMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMetadataResponse {
        try await self.client.execute(
            operation: "GetMetadata", 
            path: "/app/{appId}/environment/{environmentName}/metadata", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns existing metadata for an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - logger: Logger use during operation
    @inlinable
    public func getMetadata(
        appId: String,
        environmentName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetMetadataResponse {
        let input = GetMetadataRequest(
            appId: appId, 
            environmentName: environmentName
        )
        return try await self.getMetadata(input, logger: logger)
    }

    /// Returns an existing theme for an Amplify app.
    @Sendable
    @inlinable
    public func getTheme(_ input: GetThemeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetThemeResponse {
        try await self.client.execute(
            operation: "GetTheme", 
            path: "/app/{appId}/environment/{environmentName}/themes/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns an existing theme for an Amplify app.
    ///
    /// Parameters:
    ///   - appId: The unique ID of the Amplify app.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - id: The unique ID for the theme.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTheme(
        appId: String,
        environmentName: String,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetThemeResponse {
        let input = GetThemeRequest(
            appId: appId, 
            environmentName: environmentName, 
            id: id
        )
        return try await self.getTheme(input, logger: logger)
    }

    /// Retrieves a list of code generation jobs for a specified Amplify app and backend environment.
    @Sendable
    @inlinable
    public func listCodegenJobs(_ input: ListCodegenJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCodegenJobsResponse {
        try await self.client.execute(
            operation: "ListCodegenJobs", 
            path: "/app/{appId}/environment/{environmentName}/codegen-jobs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of code generation jobs for a specified Amplify app and backend environment.
    ///
    /// Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - maxResults: The maximum number of jobs to retrieve.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listCodegenJobs(
        appId: String,
        environmentName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCodegenJobsResponse {
        let input = ListCodegenJobsRequest(
            appId: appId, 
            environmentName: environmentName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listCodegenJobs(input, logger: logger)
    }

    /// Retrieves a list of components for a specified Amplify app and backend environment.
    @Sendable
    @inlinable
    public func listComponents(_ input: ListComponentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListComponentsResponse {
        try await self.client.execute(
            operation: "ListComponents", 
            path: "/app/{appId}/environment/{environmentName}/components", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of components for a specified Amplify app and backend environment.
    ///
    /// Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - maxResults: The maximum number of components to retrieve.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listComponents(
        appId: String,
        environmentName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListComponentsResponse {
        let input = ListComponentsRequest(
            appId: appId, 
            environmentName: environmentName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listComponents(input, logger: logger)
    }

    /// Retrieves a list of forms for a specified Amplify app and backend environment.
    @Sendable
    @inlinable
    public func listForms(_ input: ListFormsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFormsResponse {
        try await self.client.execute(
            operation: "ListForms", 
            path: "/app/{appId}/environment/{environmentName}/forms", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of forms for a specified Amplify app and backend environment.
    ///
    /// Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - maxResults: The maximum number of forms to retrieve.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listForms(
        appId: String,
        environmentName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListFormsResponse {
        let input = ListFormsRequest(
            appId: appId, 
            environmentName: environmentName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listForms(input, logger: logger)
    }

    /// Returns a list of tags for a specified Amazon Resource Name (ARN).
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of tags for a specified Amazon Resource Name (ARN).
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) to use to list tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Retrieves a list of themes for a specified Amplify app and backend environment.
    @Sendable
    @inlinable
    public func listThemes(_ input: ListThemesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListThemesResponse {
        try await self.client.execute(
            operation: "ListThemes", 
            path: "/app/{appId}/environment/{environmentName}/themes", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of themes for a specified Amplify app and backend environment.
    ///
    /// Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - maxResults: The maximum number of theme results to return in the response.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listThemes(
        appId: String,
        environmentName: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListThemesResponse {
        let input = ListThemesRequest(
            appId: appId, 
            environmentName: environmentName, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listThemes(input, logger: logger)
    }

    /// Stores the metadata information about a feature on a form.
    @Sendable
    @inlinable
    public func putMetadataFlag(_ input: PutMetadataFlagRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutMetadataFlag", 
            path: "/app/{appId}/environment/{environmentName}/metadata/features/{featureName}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stores the metadata information about a feature on a form.
    ///
    /// Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - body: The metadata information to store.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - featureName: The name of the feature associated with the metadata.
    ///   - logger: Logger use during operation
    @inlinable
    public func putMetadataFlag(
        appId: String,
        body: PutMetadataFlagBody,
        environmentName: String,
        featureName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutMetadataFlagRequest(
            appId: appId, 
            body: body, 
            environmentName: environmentName, 
            featureName: featureName
        )
        return try await self.putMetadataFlag(input, logger: logger)
    }

    ///  This is for internal use.  Amplify uses this action to refresh a previously issued access token that might have expired.
    @Sendable
    @inlinable
    public func refreshToken(_ input: RefreshTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RefreshTokenResponse {
        try await self.client.execute(
            operation: "RefreshToken", 
            path: "/tokens/{provider}/refresh", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This is for internal use.  Amplify uses this action to refresh a previously issued access token that might have expired.
    ///
    /// Parameters:
    ///   - provider: The third-party provider for the token. The only valid value is figma.
    ///   - refreshTokenBody: Information about the refresh token request.
    ///   - logger: Logger use during operation
    @inlinable
    public func refreshToken(
        provider: TokenProviders,
        refreshTokenBody: RefreshTokenRequestBody,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RefreshTokenResponse {
        let input = RefreshTokenRequest(
            provider: provider, 
            refreshTokenBody: refreshTokenBody
        )
        return try await self.refreshToken(input, logger: logger)
    }

    /// Starts a code generation job for a specified Amplify app and backend environment.
    @Sendable
    @inlinable
    public func startCodegenJob(_ input: StartCodegenJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartCodegenJobResponse {
        try await self.client.execute(
            operation: "StartCodegenJob", 
            path: "/app/{appId}/environment/{environmentName}/codegen-jobs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a code generation job for a specified Amplify app and backend environment.
    ///
    /// Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - clientToken: The idempotency token used to ensure that the code generation job request completes only once.
    ///   - codegenJobToCreate: The code generation job resource configuration.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - logger: Logger use during operation
    @inlinable
    public func startCodegenJob(
        appId: String,
        clientToken: String? = StartCodegenJobRequest.idempotencyToken(),
        codegenJobToCreate: StartCodegenJobData,
        environmentName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartCodegenJobResponse {
        let input = StartCodegenJobRequest(
            appId: appId, 
            clientToken: clientToken, 
            codegenJobToCreate: codegenJobToCreate, 
            environmentName: environmentName
        )
        return try await self.startCodegenJob(input, logger: logger)
    }

    /// Tags the resource with a tag key and value.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Tags the resource with a tag key and value.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) to use to tag a resource.
    ///   - tags: A list of tag key value pairs for a specified Amazon Resource Name (ARN).
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Untags a resource with a specified Amazon Resource Name (ARN).
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Untags a resource with a specified Amazon Resource Name (ARN).
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) to use to untag a resource.
    ///   - tagKeys: The tag keys to use to untag a resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates an existing component.
    @Sendable
    @inlinable
    public func updateComponent(_ input: UpdateComponentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateComponentResponse {
        try await self.client.execute(
            operation: "UpdateComponent", 
            path: "/app/{appId}/environment/{environmentName}/components/{id}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an existing component.
    ///
    /// Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - clientToken: The unique client token.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - id: The unique ID for the component.
    ///   - updatedComponent: The configuration of the updated component.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateComponent(
        appId: String,
        clientToken: String? = UpdateComponentRequest.idempotencyToken(),
        environmentName: String,
        id: String,
        updatedComponent: UpdateComponentData,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateComponentResponse {
        let input = UpdateComponentRequest(
            appId: appId, 
            clientToken: clientToken, 
            environmentName: environmentName, 
            id: id, 
            updatedComponent: updatedComponent
        )
        return try await self.updateComponent(input, logger: logger)
    }

    /// Updates an existing form.
    @Sendable
    @inlinable
    public func updateForm(_ input: UpdateFormRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFormResponse {
        try await self.client.execute(
            operation: "UpdateForm", 
            path: "/app/{appId}/environment/{environmentName}/forms/{id}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an existing form.
    ///
    /// Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - clientToken: The unique client token.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - id: The unique ID for the form.
    ///   - updatedForm: The request accepts the following data in JSON format.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateForm(
        appId: String,
        clientToken: String? = UpdateFormRequest.idempotencyToken(),
        environmentName: String,
        id: String,
        updatedForm: UpdateFormData,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateFormResponse {
        let input = UpdateFormRequest(
            appId: appId, 
            clientToken: clientToken, 
            environmentName: environmentName, 
            id: id, 
            updatedForm: updatedForm
        )
        return try await self.updateForm(input, logger: logger)
    }

    /// Updates an existing theme.
    @Sendable
    @inlinable
    public func updateTheme(_ input: UpdateThemeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateThemeResponse {
        try await self.client.execute(
            operation: "UpdateTheme", 
            path: "/app/{appId}/environment/{environmentName}/themes/{id}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an existing theme.
    ///
    /// Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - clientToken: The unique client token.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - id: The unique ID for the theme.
    ///   - updatedTheme: The configuration of the updated theme.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateTheme(
        appId: String,
        clientToken: String? = UpdateThemeRequest.idempotencyToken(),
        environmentName: String,
        id: String,
        updatedTheme: UpdateThemeData,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateThemeResponse {
        let input = UpdateThemeRequest(
            appId: appId, 
            clientToken: clientToken, 
            environmentName: environmentName, 
            id: id, 
            updatedTheme: updatedTheme
        )
        return try await self.updateTheme(input, logger: logger)
    }
}

extension AmplifyUIBuilder {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: AmplifyUIBuilder, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension AmplifyUIBuilder {
    /// Return PaginatorSequence for operation ``exportComponents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func exportComponentsPaginator(
        _ input: ExportComponentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ExportComponentsRequest, ExportComponentsResponse> {
        return .init(
            input: input,
            command: self.exportComponents,
            inputKey: \ExportComponentsRequest.nextToken,
            outputKey: \ExportComponentsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``exportComponents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appId: The unique ID of the Amplify app to export components to.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - logger: Logger used for logging
    @inlinable
    public func exportComponentsPaginator(
        appId: String,
        environmentName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ExportComponentsRequest, ExportComponentsResponse> {
        let input = ExportComponentsRequest(
            appId: appId, 
            environmentName: environmentName
        )
        return self.exportComponentsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``exportForms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func exportFormsPaginator(
        _ input: ExportFormsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ExportFormsRequest, ExportFormsResponse> {
        return .init(
            input: input,
            command: self.exportForms,
            inputKey: \ExportFormsRequest.nextToken,
            outputKey: \ExportFormsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``exportForms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appId: The unique ID of the Amplify app to export forms to.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - logger: Logger used for logging
    @inlinable
    public func exportFormsPaginator(
        appId: String,
        environmentName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ExportFormsRequest, ExportFormsResponse> {
        let input = ExportFormsRequest(
            appId: appId, 
            environmentName: environmentName
        )
        return self.exportFormsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``exportThemes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func exportThemesPaginator(
        _ input: ExportThemesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ExportThemesRequest, ExportThemesResponse> {
        return .init(
            input: input,
            command: self.exportThemes,
            inputKey: \ExportThemesRequest.nextToken,
            outputKey: \ExportThemesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``exportThemes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appId: The unique ID of the Amplify app to export the themes to.
    ///   - environmentName: The name of the backend environment that is part of the Amplify app.
    ///   - logger: Logger used for logging
    @inlinable
    public func exportThemesPaginator(
        appId: String,
        environmentName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ExportThemesRequest, ExportThemesResponse> {
        let input = ExportThemesRequest(
            appId: appId, 
            environmentName: environmentName
        )
        return self.exportThemesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listCodegenJobs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listCodegenJobsPaginator(
        _ input: ListCodegenJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCodegenJobsRequest, ListCodegenJobsResponse> {
        return .init(
            input: input,
            command: self.listCodegenJobs,
            inputKey: \ListCodegenJobsRequest.nextToken,
            outputKey: \ListCodegenJobsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listCodegenJobs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - maxResults: The maximum number of jobs to retrieve.
    ///   - logger: Logger used for logging
    @inlinable
    public func listCodegenJobsPaginator(
        appId: String,
        environmentName: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListCodegenJobsRequest, ListCodegenJobsResponse> {
        let input = ListCodegenJobsRequest(
            appId: appId, 
            environmentName: environmentName, 
            maxResults: maxResults
        )
        return self.listCodegenJobsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listComponents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listComponentsPaginator(
        _ input: ListComponentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListComponentsRequest, ListComponentsResponse> {
        return .init(
            input: input,
            command: self.listComponents,
            inputKey: \ListComponentsRequest.nextToken,
            outputKey: \ListComponentsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listComponents(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - maxResults: The maximum number of components to retrieve.
    ///   - logger: Logger used for logging
    @inlinable
    public func listComponentsPaginator(
        appId: String,
        environmentName: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListComponentsRequest, ListComponentsResponse> {
        let input = ListComponentsRequest(
            appId: appId, 
            environmentName: environmentName, 
            maxResults: maxResults
        )
        return self.listComponentsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listForms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listFormsPaginator(
        _ input: ListFormsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFormsRequest, ListFormsResponse> {
        return .init(
            input: input,
            command: self.listForms,
            inputKey: \ListFormsRequest.nextToken,
            outputKey: \ListFormsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listForms(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - maxResults: The maximum number of forms to retrieve.
    ///   - logger: Logger used for logging
    @inlinable
    public func listFormsPaginator(
        appId: String,
        environmentName: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListFormsRequest, ListFormsResponse> {
        let input = ListFormsRequest(
            appId: appId, 
            environmentName: environmentName, 
            maxResults: maxResults
        )
        return self.listFormsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listThemes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listThemesPaginator(
        _ input: ListThemesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListThemesRequest, ListThemesResponse> {
        return .init(
            input: input,
            command: self.listThemes,
            inputKey: \ListThemesRequest.nextToken,
            outputKey: \ListThemesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listThemes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appId: The unique ID for the Amplify app.
    ///   - environmentName: The name of the backend environment that is a part of the Amplify app.
    ///   - maxResults: The maximum number of theme results to return in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func listThemesPaginator(
        appId: String,
        environmentName: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListThemesRequest, ListThemesResponse> {
        let input = ListThemesRequest(
            appId: appId, 
            environmentName: environmentName, 
            maxResults: maxResults
        )
        return self.listThemesPaginator(input, logger: logger)
    }
}

extension AmplifyUIBuilder.ExportComponentsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AmplifyUIBuilder.ExportComponentsRequest {
        return .init(
            appId: self.appId,
            environmentName: self.environmentName,
            nextToken: token
        )
    }
}

extension AmplifyUIBuilder.ExportFormsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AmplifyUIBuilder.ExportFormsRequest {
        return .init(
            appId: self.appId,
            environmentName: self.environmentName,
            nextToken: token
        )
    }
}

extension AmplifyUIBuilder.ExportThemesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AmplifyUIBuilder.ExportThemesRequest {
        return .init(
            appId: self.appId,
            environmentName: self.environmentName,
            nextToken: token
        )
    }
}

extension AmplifyUIBuilder.ListCodegenJobsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AmplifyUIBuilder.ListCodegenJobsRequest {
        return .init(
            appId: self.appId,
            environmentName: self.environmentName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension AmplifyUIBuilder.ListComponentsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AmplifyUIBuilder.ListComponentsRequest {
        return .init(
            appId: self.appId,
            environmentName: self.environmentName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension AmplifyUIBuilder.ListFormsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AmplifyUIBuilder.ListFormsRequest {
        return .init(
            appId: self.appId,
            environmentName: self.environmentName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension AmplifyUIBuilder.ListThemesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> AmplifyUIBuilder.ListThemesRequest {
        return .init(
            appId: self.appId,
            environmentName: self.environmentName,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
