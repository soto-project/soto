//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS MigrationHubOrchestrator service.
///
/// This API reference provides descriptions, syntax, and other details about each of the actions and data types for AWS Migration Hub Orchestrator. The topic for each action shows the API request parameters and responses. Alternatively, you can use one of the AWS SDKs to access an API that is tailored to the programming language or platform that you're using.
public struct MigrationHubOrchestrator: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the MigrationHubOrchestrator client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "MigrationHubOrchestrator",
            serviceIdentifier: "migrationhub-orchestrator",
            serviceProtocol: .restjson,
            apiVersion: "2021-08-28",
            endpoint: endpoint,
            errorType: MigrationHubOrchestratorErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates a migration workflow template.
    @Sendable
    public func createTemplate(_ input: CreateTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTemplateResponse {
        return try await self.client.execute(
            operation: "CreateTemplate", 
            path: "/template", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a workflow to orchestrate your migrations.
    @Sendable
    public func createWorkflow(_ input: CreateMigrationWorkflowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMigrationWorkflowResponse {
        return try await self.client.execute(
            operation: "CreateWorkflow", 
            path: "/migrationworkflow/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a step in the migration workflow.
    @Sendable
    public func createWorkflowStep(_ input: CreateWorkflowStepRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkflowStepResponse {
        return try await self.client.execute(
            operation: "CreateWorkflowStep", 
            path: "/workflowstep", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Create a step group in a migration workflow.
    @Sendable
    public func createWorkflowStepGroup(_ input: CreateWorkflowStepGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkflowStepGroupResponse {
        return try await self.client.execute(
            operation: "CreateWorkflowStepGroup", 
            path: "/workflowstepgroups", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a migration workflow template.
    @Sendable
    public func deleteTemplate(_ input: DeleteTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTemplateResponse {
        return try await self.client.execute(
            operation: "DeleteTemplate", 
            path: "/template/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a migration workflow. You must pause a running workflow in Migration Hub Orchestrator console to delete it.
    @Sendable
    public func deleteWorkflow(_ input: DeleteMigrationWorkflowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMigrationWorkflowResponse {
        return try await self.client.execute(
            operation: "DeleteWorkflow", 
            path: "/migrationworkflow/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a step in a migration workflow. Pause the workflow to delete a running step.
    @Sendable
    public func deleteWorkflowStep(_ input: DeleteWorkflowStepRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkflowStepResponse {
        return try await self.client.execute(
            operation: "DeleteWorkflowStep", 
            path: "/workflowstep/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a step group in a migration workflow.
    @Sendable
    public func deleteWorkflowStepGroup(_ input: DeleteWorkflowStepGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkflowStepGroupResponse {
        return try await self.client.execute(
            operation: "DeleteWorkflowStepGroup", 
            path: "/workflowstepgroup/{id}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the template you want to use for creating a migration workflow.
    @Sendable
    public func getTemplate(_ input: GetMigrationWorkflowTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMigrationWorkflowTemplateResponse {
        return try await self.client.execute(
            operation: "GetTemplate", 
            path: "/migrationworkflowtemplate/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get a specific step in a template.
    @Sendable
    public func getTemplateStep(_ input: GetTemplateStepRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemplateStepResponse {
        return try await self.client.execute(
            operation: "GetTemplateStep", 
            path: "/templatestep/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get a step group in a template.
    @Sendable
    public func getTemplateStepGroup(_ input: GetTemplateStepGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTemplateStepGroupResponse {
        return try await self.client.execute(
            operation: "GetTemplateStepGroup", 
            path: "/templates/{templateId}/stepgroups/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get migration workflow.
    @Sendable
    public func getWorkflow(_ input: GetMigrationWorkflowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMigrationWorkflowResponse {
        return try await self.client.execute(
            operation: "GetWorkflow", 
            path: "/migrationworkflow/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get a step in the migration workflow.
    @Sendable
    public func getWorkflowStep(_ input: GetWorkflowStepRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkflowStepResponse {
        return try await self.client.execute(
            operation: "GetWorkflowStep", 
            path: "/workflowstep/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Get the step group of a migration workflow.
    @Sendable
    public func getWorkflowStepGroup(_ input: GetWorkflowStepGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkflowStepGroupResponse {
        return try await self.client.execute(
            operation: "GetWorkflowStepGroup", 
            path: "/workflowstepgroup/{id}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List AWS Migration Hub Orchestrator plugins.
    @Sendable
    public func listPlugins(_ input: ListPluginsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPluginsResponse {
        return try await self.client.execute(
            operation: "ListPlugins", 
            path: "/plugins", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the tags added to a resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the step groups in a template.
    @Sendable
    public func listTemplateStepGroups(_ input: ListTemplateStepGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTemplateStepGroupsResponse {
        return try await self.client.execute(
            operation: "ListTemplateStepGroups", 
            path: "/templatestepgroups/{templateId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the steps in a template.
    @Sendable
    public func listTemplateSteps(_ input: ListTemplateStepsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTemplateStepsResponse {
        return try await self.client.execute(
            operation: "ListTemplateSteps", 
            path: "/templatesteps", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the templates available in Migration Hub Orchestrator to create a migration workflow.
    @Sendable
    public func listTemplates(_ input: ListMigrationWorkflowTemplatesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMigrationWorkflowTemplatesResponse {
        return try await self.client.execute(
            operation: "ListTemplates", 
            path: "/migrationworkflowtemplates", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the step groups in a migration workflow.
    @Sendable
    public func listWorkflowStepGroups(_ input: ListWorkflowStepGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkflowStepGroupsResponse {
        return try await self.client.execute(
            operation: "ListWorkflowStepGroups", 
            path: "/workflowstepgroups", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the steps in a workflow.
    @Sendable
    public func listWorkflowSteps(_ input: ListWorkflowStepsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkflowStepsResponse {
        return try await self.client.execute(
            operation: "ListWorkflowSteps", 
            path: "/workflow/{workflowId}/workflowstepgroups/{stepGroupId}/workflowsteps", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the migration workflows.
    @Sendable
    public func listWorkflows(_ input: ListMigrationWorkflowsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMigrationWorkflowsResponse {
        return try await self.client.execute(
            operation: "ListWorkflows", 
            path: "/migrationworkflows", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retry a failed step in a migration workflow.
    @Sendable
    public func retryWorkflowStep(_ input: RetryWorkflowStepRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RetryWorkflowStepResponse {
        return try await self.client.execute(
            operation: "RetryWorkflowStep", 
            path: "/retryworkflowstep/{id}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Start a migration workflow.
    @Sendable
    public func startWorkflow(_ input: StartMigrationWorkflowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMigrationWorkflowResponse {
        return try await self.client.execute(
            operation: "StartWorkflow", 
            path: "/migrationworkflow/{id}/start", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stop an ongoing migration workflow.
    @Sendable
    public func stopWorkflow(_ input: StopMigrationWorkflowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopMigrationWorkflowResponse {
        return try await self.client.execute(
            operation: "StopWorkflow", 
            path: "/migrationworkflow/{id}/stop", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Tag a resource by specifying its Amazon Resource Name (ARN).
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the tags for a resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a migration workflow template.
    @Sendable
    public func updateTemplate(_ input: UpdateTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTemplateResponse {
        return try await self.client.execute(
            operation: "UpdateTemplate", 
            path: "/template/{id}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a migration workflow.
    @Sendable
    public func updateWorkflow(_ input: UpdateMigrationWorkflowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateMigrationWorkflowResponse {
        return try await self.client.execute(
            operation: "UpdateWorkflow", 
            path: "/migrationworkflow/{id}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update a step in a migration workflow.
    @Sendable
    public func updateWorkflowStep(_ input: UpdateWorkflowStepRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkflowStepResponse {
        return try await self.client.execute(
            operation: "UpdateWorkflowStep", 
            path: "/workflowstep/{id}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the step group in a migration workflow.
    @Sendable
    public func updateWorkflowStepGroup(_ input: UpdateWorkflowStepGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkflowStepGroupResponse {
        return try await self.client.execute(
            operation: "UpdateWorkflowStepGroup", 
            path: "/workflowstepgroup/{id}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension MigrationHubOrchestrator {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: MigrationHubOrchestrator, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension MigrationHubOrchestrator {
    /// List AWS Migration Hub Orchestrator plugins.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPluginsPaginator(
        _ input: ListPluginsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPluginsRequest, ListPluginsResponse> {
        return .init(
            input: input,
            command: self.listPlugins,
            inputKey: \ListPluginsRequest.nextToken,
            outputKey: \ListPluginsResponse.nextToken,
            logger: logger
        )
    }

    /// List the step groups in a template.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTemplateStepGroupsPaginator(
        _ input: ListTemplateStepGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTemplateStepGroupsRequest, ListTemplateStepGroupsResponse> {
        return .init(
            input: input,
            command: self.listTemplateStepGroups,
            inputKey: \ListTemplateStepGroupsRequest.nextToken,
            outputKey: \ListTemplateStepGroupsResponse.nextToken,
            logger: logger
        )
    }

    /// List the steps in a template.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTemplateStepsPaginator(
        _ input: ListTemplateStepsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTemplateStepsRequest, ListTemplateStepsResponse> {
        return .init(
            input: input,
            command: self.listTemplateSteps,
            inputKey: \ListTemplateStepsRequest.nextToken,
            outputKey: \ListTemplateStepsResponse.nextToken,
            logger: logger
        )
    }

    /// List the templates available in Migration Hub Orchestrator to create a migration workflow.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTemplatesPaginator(
        _ input: ListMigrationWorkflowTemplatesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMigrationWorkflowTemplatesRequest, ListMigrationWorkflowTemplatesResponse> {
        return .init(
            input: input,
            command: self.listTemplates,
            inputKey: \ListMigrationWorkflowTemplatesRequest.nextToken,
            outputKey: \ListMigrationWorkflowTemplatesResponse.nextToken,
            logger: logger
        )
    }

    /// List the step groups in a migration workflow.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkflowStepGroupsPaginator(
        _ input: ListWorkflowStepGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkflowStepGroupsRequest, ListWorkflowStepGroupsResponse> {
        return .init(
            input: input,
            command: self.listWorkflowStepGroups,
            inputKey: \ListWorkflowStepGroupsRequest.nextToken,
            outputKey: \ListWorkflowStepGroupsResponse.nextToken,
            logger: logger
        )
    }

    /// List the steps in a workflow.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkflowStepsPaginator(
        _ input: ListWorkflowStepsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkflowStepsRequest, ListWorkflowStepsResponse> {
        return .init(
            input: input,
            command: self.listWorkflowSteps,
            inputKey: \ListWorkflowStepsRequest.nextToken,
            outputKey: \ListWorkflowStepsResponse.nextToken,
            logger: logger
        )
    }

    /// List the migration workflows.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkflowsPaginator(
        _ input: ListMigrationWorkflowsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMigrationWorkflowsRequest, ListMigrationWorkflowsResponse> {
        return .init(
            input: input,
            command: self.listWorkflows,
            inputKey: \ListMigrationWorkflowsRequest.nextToken,
            outputKey: \ListMigrationWorkflowsResponse.nextToken,
            logger: logger
        )
    }
}

extension MigrationHubOrchestrator.ListMigrationWorkflowTemplatesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubOrchestrator.ListMigrationWorkflowTemplatesRequest {
        return .init(
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token
        )
    }
}

extension MigrationHubOrchestrator.ListMigrationWorkflowsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubOrchestrator.ListMigrationWorkflowsRequest {
        return .init(
            adsApplicationConfigurationName: self.adsApplicationConfigurationName,
            maxResults: self.maxResults,
            name: self.name,
            nextToken: token,
            status: self.status,
            templateId: self.templateId
        )
    }
}

extension MigrationHubOrchestrator.ListPluginsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubOrchestrator.ListPluginsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension MigrationHubOrchestrator.ListTemplateStepGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubOrchestrator.ListTemplateStepGroupsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            templateId: self.templateId
        )
    }
}

extension MigrationHubOrchestrator.ListTemplateStepsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubOrchestrator.ListTemplateStepsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            stepGroupId: self.stepGroupId,
            templateId: self.templateId
        )
    }
}

extension MigrationHubOrchestrator.ListWorkflowStepGroupsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubOrchestrator.ListWorkflowStepGroupsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workflowId: self.workflowId
        )
    }
}

extension MigrationHubOrchestrator.ListWorkflowStepsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MigrationHubOrchestrator.ListWorkflowStepsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            stepGroupId: self.stepGroupId,
            workflowId: self.workflowId
        )
    }
}
