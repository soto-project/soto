//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS DAX service.
///
/// DAX is a managed caching service engineered for Amazon DynamoDB. DAX dramatically speeds up database reads by caching frequently-accessed data from DynamoDB, so applications can access that data with sub-millisecond latency. You can create a DAX cluster easily, using the AWS Management Console. With a few simple modifications to your code, your application can begin taking advantage of the DAX cluster and realize significant improvements in read performance.
public struct DAX: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the DAX client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AmazonDAXV3",
            serviceName: "DAX",
            serviceIdentifier: "dax",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2017-04-19",
            endpoint: endpoint,
            errorType: DAXErrorType.self,
            xmlNamespace: "http://dax.amazonaws.com/doc/2017-04-19/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates a DAX cluster. All nodes in the cluster run the same DAX caching software.
    @Sendable
    @inlinable
    public func createCluster(_ input: CreateClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateClusterResponse {
        try await self.client.execute(
            operation: "CreateCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a DAX cluster. All nodes in the cluster run the same DAX caching software.
    ///
    /// Parameters:
    ///   - availabilityZones: The Availability Zones (AZs) in which the cluster nodes will reside after the cluster has been created or updated. If provided, the length of this list must equal the ReplicationFactor parameter. If you omit this parameter, DAX will spread the nodes across Availability Zones for the highest availability.
    ///   - clusterEndpointEncryptionType: The type of encryption the cluster's endpoint should support. Values are:    NONE for no encryption    TLS for Transport Layer Security
    ///   - clusterName: The cluster identifier. This parameter is stored as a lowercase string.  Constraints:    A name must contain from 1 to 20 alphanumeric characters or hyphens.   The first character must be a letter.   A name cannot end with a hyphen or contain two consecutive hyphens.
    ///   - description: A description of the cluster.
    ///   - iamRoleArn: A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.
    ///   - nodeType: The compute and memory capacity of the nodes in the cluster.
    ///   - notificationTopicArn: The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications will be sent.  The Amazon SNS topic owner must be same as the DAX cluster owner.
    ///   - parameterGroupName: The parameter group to be associated with the DAX cluster.
    ///   - preferredMaintenanceWindow: Specifies the weekly time range during which maintenance on the DAX cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:05:00-sun:09:00   If you don't specify a preferred maintenance window when you create or modify a cache cluster, DAX assigns a 60-minute maintenance window on a randomly selected day of the week.
    ///   - replicationFactor: The number of nodes in the DAX cluster. A replication factor of 1 will create a single-node cluster, without any read replicas. For additional fault tolerance, you can create a multiple node cluster with one or more read replicas. To do this, set ReplicationFactor to a number between 3 (one primary and two read replicas) and 10 (one primary and nine read replicas).  If the AvailabilityZones parameter is provided, its length must equal the ReplicationFactor.  AWS recommends that you have at least two read replicas per cluster.
    ///   - securityGroupIds: A list of security group IDs to be assigned to each node in the DAX cluster. (Each of the  security group ID is system-generated.) If this parameter is not specified, DAX assigns the default VPC security group to each node.
    ///   - sseSpecification: Represents the settings used to enable server-side encryption on the cluster.
    ///   - subnetGroupName: The name of the subnet group to be used for the replication group.  DAX clusters can only run in an Amazon VPC environment. All of the subnets that you specify in a subnet group must exist in the same VPC.
    ///   - tags: A set of tags to associate with the DAX cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCluster(
        availabilityZones: [String]? = nil,
        clusterEndpointEncryptionType: ClusterEndpointEncryptionType? = nil,
        clusterName: String,
        description: String? = nil,
        iamRoleArn: String,
        nodeType: String,
        notificationTopicArn: String? = nil,
        parameterGroupName: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        replicationFactor: Int = 0,
        securityGroupIds: [String]? = nil,
        sseSpecification: SSESpecification? = nil,
        subnetGroupName: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateClusterResponse {
        let input = CreateClusterRequest(
            availabilityZones: availabilityZones, 
            clusterEndpointEncryptionType: clusterEndpointEncryptionType, 
            clusterName: clusterName, 
            description: description, 
            iamRoleArn: iamRoleArn, 
            nodeType: nodeType, 
            notificationTopicArn: notificationTopicArn, 
            parameterGroupName: parameterGroupName, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            replicationFactor: replicationFactor, 
            securityGroupIds: securityGroupIds, 
            sseSpecification: sseSpecification, 
            subnetGroupName: subnetGroupName, 
            tags: tags
        )
        return try await self.createCluster(input, logger: logger)
    }

    /// Creates a new parameter group. A parameter group is a collection of parameters that you apply to all of the nodes in a DAX cluster.
    @Sendable
    @inlinable
    public func createParameterGroup(_ input: CreateParameterGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateParameterGroupResponse {
        try await self.client.execute(
            operation: "CreateParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new parameter group. A parameter group is a collection of parameters that you apply to all of the nodes in a DAX cluster.
    ///
    /// Parameters:
    ///   - description: A description of the parameter group.
    ///   - parameterGroupName: The name of the parameter group to apply to all of the clusters in this replication group.
    ///   - logger: Logger use during operation
    @inlinable
    public func createParameterGroup(
        description: String? = nil,
        parameterGroupName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateParameterGroupResponse {
        let input = CreateParameterGroupRequest(
            description: description, 
            parameterGroupName: parameterGroupName
        )
        return try await self.createParameterGroup(input, logger: logger)
    }

    /// Creates a new subnet group.
    @Sendable
    @inlinable
    public func createSubnetGroup(_ input: CreateSubnetGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSubnetGroupResponse {
        try await self.client.execute(
            operation: "CreateSubnetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new subnet group.
    ///
    /// Parameters:
    ///   - description: A description for the subnet group
    ///   - subnetGroupName: A name for the subnet group. This value is stored as a lowercase string.
    ///   - subnetIds: A list of VPC subnet IDs for the subnet group.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSubnetGroup(
        description: String? = nil,
        subnetGroupName: String,
        subnetIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSubnetGroupResponse {
        let input = CreateSubnetGroupRequest(
            description: description, 
            subnetGroupName: subnetGroupName, 
            subnetIds: subnetIds
        )
        return try await self.createSubnetGroup(input, logger: logger)
    }

    /// Removes one or more nodes from a DAX cluster.  You cannot use DecreaseReplicationFactor to remove the last node in a DAX cluster. If you need to do this, use DeleteCluster instead.
    @Sendable
    @inlinable
    public func decreaseReplicationFactor(_ input: DecreaseReplicationFactorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DecreaseReplicationFactorResponse {
        try await self.client.execute(
            operation: "DecreaseReplicationFactor", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes one or more nodes from a DAX cluster.  You cannot use DecreaseReplicationFactor to remove the last node in a DAX cluster. If you need to do this, use DeleteCluster instead.
    ///
    /// Parameters:
    ///   - availabilityZones: The Availability Zone(s) from which to remove nodes.
    ///   - clusterName: The name of the DAX cluster from which you want to remove nodes.
    ///   - newReplicationFactor: The new number of nodes for the DAX cluster.
    ///   - nodeIdsToRemove: The unique identifiers of the nodes to be removed from the cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func decreaseReplicationFactor(
        availabilityZones: [String]? = nil,
        clusterName: String,
        newReplicationFactor: Int = 0,
        nodeIdsToRemove: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DecreaseReplicationFactorResponse {
        let input = DecreaseReplicationFactorRequest(
            availabilityZones: availabilityZones, 
            clusterName: clusterName, 
            newReplicationFactor: newReplicationFactor, 
            nodeIdsToRemove: nodeIdsToRemove
        )
        return try await self.decreaseReplicationFactor(input, logger: logger)
    }

    /// Deletes a previously provisioned DAX cluster. DeleteCluster deletes all associated nodes, node endpoints and the DAX cluster itself. When you receive a successful response from this action, DAX immediately begins deleting the cluster; you cannot cancel or revert this action.
    @Sendable
    @inlinable
    public func deleteCluster(_ input: DeleteClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteClusterResponse {
        try await self.client.execute(
            operation: "DeleteCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a previously provisioned DAX cluster. DeleteCluster deletes all associated nodes, node endpoints and the DAX cluster itself. When you receive a successful response from this action, DAX immediately begins deleting the cluster; you cannot cancel or revert this action.
    ///
    /// Parameters:
    ///   - clusterName: The name of the cluster to be deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCluster(
        clusterName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteClusterResponse {
        let input = DeleteClusterRequest(
            clusterName: clusterName
        )
        return try await self.deleteCluster(input, logger: logger)
    }

    /// Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any DAX clusters.
    @Sendable
    @inlinable
    public func deleteParameterGroup(_ input: DeleteParameterGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteParameterGroupResponse {
        try await self.client.execute(
            operation: "DeleteParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified parameter group. You cannot delete a parameter group if it is associated with any DAX clusters.
    ///
    /// Parameters:
    ///   - parameterGroupName: The name of the parameter group to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteParameterGroup(
        parameterGroupName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteParameterGroupResponse {
        let input = DeleteParameterGroupRequest(
            parameterGroupName: parameterGroupName
        )
        return try await self.deleteParameterGroup(input, logger: logger)
    }

    /// Deletes a subnet group.  You cannot delete a subnet group if it is associated with any DAX clusters.
    @Sendable
    @inlinable
    public func deleteSubnetGroup(_ input: DeleteSubnetGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSubnetGroupResponse {
        try await self.client.execute(
            operation: "DeleteSubnetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a subnet group.  You cannot delete a subnet group if it is associated with any DAX clusters.
    ///
    /// Parameters:
    ///   - subnetGroupName: The name of the subnet group to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSubnetGroup(
        subnetGroupName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteSubnetGroupResponse {
        let input = DeleteSubnetGroupRequest(
            subnetGroupName: subnetGroupName
        )
        return try await self.deleteSubnetGroup(input, logger: logger)
    }

    /// Returns information about all provisioned DAX clusters if no cluster identifier is specified, or about a specific DAX cluster if a cluster identifier is supplied. If the cluster is in the CREATING state, only cluster level information will be displayed until all of the nodes are successfully provisioned. If the cluster is in the DELETING state, only cluster level information will be displayed. If nodes are currently being added to the DAX cluster, node endpoint information and creation time for the additional nodes will not be displayed until they are completely provisioned. When the DAX cluster state is available, the cluster is ready for use. If nodes are currently being removed from the DAX cluster, no endpoint information for the removed nodes is displayed.
    @Sendable
    @inlinable
    public func describeClusters(_ input: DescribeClustersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClustersResponse {
        try await self.client.execute(
            operation: "DescribeClusters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about all provisioned DAX clusters if no cluster identifier is specified, or about a specific DAX cluster if a cluster identifier is supplied. If the cluster is in the CREATING state, only cluster level information will be displayed until all of the nodes are successfully provisioned. If the cluster is in the DELETING state, only cluster level information will be displayed. If nodes are currently being added to the DAX cluster, node endpoint information and creation time for the additional nodes will not be displayed until they are completely provisioned. When the DAX cluster state is available, the cluster is ready for use. If nodes are currently being removed from the DAX cluster, no endpoint information for the removed nodes is displayed.
    ///
    /// Parameters:
    ///   - clusterNames: The names of the DAX clusters being described.
    ///   - maxResults: The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
    ///   - nextToken: An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeClusters(
        clusterNames: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClustersResponse {
        let input = DescribeClustersRequest(
            clusterNames: clusterNames, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeClusters(input, logger: logger)
    }

    /// Returns the default system parameter information for the DAX caching software.
    @Sendable
    @inlinable
    public func describeDefaultParameters(_ input: DescribeDefaultParametersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDefaultParametersResponse {
        try await self.client.execute(
            operation: "DescribeDefaultParameters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the default system parameter information for the DAX caching software.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
    ///   - nextToken: An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDefaultParameters(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDefaultParametersResponse {
        let input = DescribeDefaultParametersRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeDefaultParameters(input, logger: logger)
    }

    /// Returns events related to DAX clusters and parameter groups. You can obtain events specific to a particular DAX cluster or parameter group by providing the name as a parameter. By default, only the events occurring within the last 24 hours are returned; however, you can retrieve up to 14 days' worth of events if necessary.
    @Sendable
    @inlinable
    public func describeEvents(_ input: DescribeEventsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEventsResponse {
        try await self.client.execute(
            operation: "DescribeEvents", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns events related to DAX clusters and parameter groups. You can obtain events specific to a particular DAX cluster or parameter group by providing the name as a parameter. By default, only the events occurring within the last 24 hours are returned; however, you can retrieve up to 14 days' worth of events if necessary.
    ///
    /// Parameters:
    ///   - duration: The number of minutes' worth of events to retrieve.
    ///   - endTime: The end of the time interval for which to retrieve events, specified in ISO 8601 format.
    ///   - maxResults: The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
    ///   - nextToken: An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    ///   - sourceName: The identifier of the event source for which events will be returned. If not specified, then all sources are included in the response.
    ///   - sourceType: The event source to retrieve events for. If no value is specified, all events are returned.
    ///   - startTime: The beginning of the time interval to retrieve events for, specified in ISO 8601 format.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEvents(
        duration: Int? = nil,
        endTime: Date? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        sourceName: String? = nil,
        sourceType: SourceType? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeEventsResponse {
        let input = DescribeEventsRequest(
            duration: duration, 
            endTime: endTime, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            sourceName: sourceName, 
            sourceType: sourceType, 
            startTime: startTime
        )
        return try await self.describeEvents(input, logger: logger)
    }

    /// Returns a list of parameter group descriptions. If a parameter group name is specified, the list will contain only the descriptions for that group.
    @Sendable
    @inlinable
    public func describeParameterGroups(_ input: DescribeParameterGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeParameterGroupsResponse {
        try await self.client.execute(
            operation: "DescribeParameterGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of parameter group descriptions. If a parameter group name is specified, the list will contain only the descriptions for that group.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
    ///   - nextToken: An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    ///   - parameterGroupNames: The names of the parameter groups.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeParameterGroups(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        parameterGroupNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeParameterGroupsResponse {
        let input = DescribeParameterGroupsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            parameterGroupNames: parameterGroupNames
        )
        return try await self.describeParameterGroups(input, logger: logger)
    }

    /// Returns the detailed parameter list for a particular parameter group.
    @Sendable
    @inlinable
    public func describeParameters(_ input: DescribeParametersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeParametersResponse {
        try await self.client.execute(
            operation: "DescribeParameters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the detailed parameter list for a particular parameter group.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
    ///   - nextToken: An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    ///   - parameterGroupName: The name of the parameter group.
    ///   - source: How the parameter is defined. For example, system denotes a system-defined parameter.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeParameters(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        parameterGroupName: String,
        source: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeParametersResponse {
        let input = DescribeParametersRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            parameterGroupName: parameterGroupName, 
            source: source
        )
        return try await self.describeParameters(input, logger: logger)
    }

    /// Returns a list of subnet group descriptions. If a subnet group name is specified, the list will contain only the description of that group.
    @Sendable
    @inlinable
    public func describeSubnetGroups(_ input: DescribeSubnetGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSubnetGroupsResponse {
        try await self.client.execute(
            operation: "DescribeSubnetGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of subnet group descriptions. If a subnet group name is specified, the list will contain only the description of that group.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
    ///   - nextToken: An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
    ///   - subnetGroupNames: The name of the subnet group.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSubnetGroups(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        subnetGroupNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSubnetGroupsResponse {
        let input = DescribeSubnetGroupsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            subnetGroupNames: subnetGroupNames
        )
        return try await self.describeSubnetGroups(input, logger: logger)
    }

    /// Adds one or more nodes to a DAX cluster.
    @Sendable
    @inlinable
    public func increaseReplicationFactor(_ input: IncreaseReplicationFactorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> IncreaseReplicationFactorResponse {
        try await self.client.execute(
            operation: "IncreaseReplicationFactor", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds one or more nodes to a DAX cluster.
    ///
    /// Parameters:
    ///   - availabilityZones: The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.
    ///   - clusterName: The name of the DAX cluster that will receive additional nodes.
    ///   - newReplicationFactor: The new number of nodes for the DAX cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func increaseReplicationFactor(
        availabilityZones: [String]? = nil,
        clusterName: String,
        newReplicationFactor: Int = 0,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> IncreaseReplicationFactorResponse {
        let input = IncreaseReplicationFactorRequest(
            availabilityZones: availabilityZones, 
            clusterName: clusterName, 
            newReplicationFactor: newReplicationFactor
        )
        return try await self.increaseReplicationFactor(input, logger: logger)
    }

    /// List all of the tags for a DAX cluster. You can call ListTags up to 10 times per second, per account.
    @Sendable
    @inlinable
    public func listTags(_ input: ListTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsResponse {
        try await self.client.execute(
            operation: "ListTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List all of the tags for a DAX cluster. You can call ListTags up to 10 times per second, per account.
    ///
    /// Parameters:
    ///   - nextToken: An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token.
    ///   - resourceName: The name of the DAX resource to which the tags belong.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTags(
        nextToken: String? = nil,
        resourceName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsResponse {
        let input = ListTagsRequest(
            nextToken: nextToken, 
            resourceName: resourceName
        )
        return try await self.listTags(input, logger: logger)
    }

    /// Reboots a single node of a DAX cluster. The reboot action takes place as soon as possible. During the reboot, the node status is set to REBOOTING.   RebootNode restarts the DAX engine process and does not remove the contents of the cache.
    @Sendable
    @inlinable
    public func rebootNode(_ input: RebootNodeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RebootNodeResponse {
        try await self.client.execute(
            operation: "RebootNode", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Reboots a single node of a DAX cluster. The reboot action takes place as soon as possible. During the reboot, the node status is set to REBOOTING.   RebootNode restarts the DAX engine process and does not remove the contents of the cache.
    ///
    /// Parameters:
    ///   - clusterName: The name of the DAX cluster containing the node to be rebooted.
    ///   - nodeId: The system-assigned ID of the node to be rebooted.
    ///   - logger: Logger use during operation
    @inlinable
    public func rebootNode(
        clusterName: String,
        nodeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RebootNodeResponse {
        let input = RebootNodeRequest(
            clusterName: clusterName, 
            nodeId: nodeId
        )
        return try await self.rebootNode(input, logger: logger)
    }

    /// Associates a set of tags with a DAX resource.  You can call TagResource up to 5 times per second, per account.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a set of tags with a DAX resource.  You can call TagResource up to 5 times per second, per account.
    ///
    /// Parameters:
    ///   - resourceName: The name of the DAX resource to which tags should be added.
    ///   - tags: The tags to be assigned to the DAX resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceName: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceName: resourceName, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Removes the association of tags from a DAX resource. You can call UntagResource up to 5 times per second, per account.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the association of tags from a DAX resource. You can call UntagResource up to 5 times per second, per account.
    ///
    /// Parameters:
    ///   - resourceName: The name of the DAX resource from which the tags should be removed.
    ///   - tagKeys: A list of tag keys. If the DAX cluster has any tags with these keys, then the tags are removed from the cluster.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceName: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceName: resourceName, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Modifies the settings for a DAX cluster. You can use this action to change one or more cluster configuration parameters by specifying the parameters and the new values.
    @Sendable
    @inlinable
    public func updateCluster(_ input: UpdateClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateClusterResponse {
        try await self.client.execute(
            operation: "UpdateCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the settings for a DAX cluster. You can use this action to change one or more cluster configuration parameters by specifying the parameters and the new values.
    ///
    /// Parameters:
    ///   - clusterName: The name of the DAX cluster to be modified.
    ///   - description: A description of the changes being made to the cluster.
    ///   - notificationTopicArn: The Amazon Resource Name (ARN) that identifies the topic.
    ///   - notificationTopicStatus: The current state of the topic. A value of “active” means that notifications will be sent to the topic. A value of “inactive” means that notifications will not be sent to the topic.
    ///   - parameterGroupName: The name of a parameter group for this cluster.
    ///   - preferredMaintenanceWindow: A range of time when maintenance of DAX cluster software will be performed. For example: sun:01:00-sun:09:00. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.
    ///   - securityGroupIds: A list of user-specified security group IDs to be assigned to each node in the DAX cluster.  If this parameter is not  specified, DAX assigns the default VPC security group to each node.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateCluster(
        clusterName: String,
        description: String? = nil,
        notificationTopicArn: String? = nil,
        notificationTopicStatus: String? = nil,
        parameterGroupName: String? = nil,
        preferredMaintenanceWindow: String? = nil,
        securityGroupIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateClusterResponse {
        let input = UpdateClusterRequest(
            clusterName: clusterName, 
            description: description, 
            notificationTopicArn: notificationTopicArn, 
            notificationTopicStatus: notificationTopicStatus, 
            parameterGroupName: parameterGroupName, 
            preferredMaintenanceWindow: preferredMaintenanceWindow, 
            securityGroupIds: securityGroupIds
        )
        return try await self.updateCluster(input, logger: logger)
    }

    /// Modifies the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
    @Sendable
    @inlinable
    public func updateParameterGroup(_ input: UpdateParameterGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateParameterGroupResponse {
        try await self.client.execute(
            operation: "UpdateParameterGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the parameters of a parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
    ///
    /// Parameters:
    ///   - parameterGroupName: The name of the parameter group.
    ///   - parameterNameValues: An array of name-value pairs for the parameters in the group. Each element in the array represents a single parameter.   record-ttl-millis and query-ttl-millis are the only supported parameter names. For more details, see Configuring TTL Settings.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateParameterGroup(
        parameterGroupName: String,
        parameterNameValues: [ParameterNameValue],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateParameterGroupResponse {
        let input = UpdateParameterGroupRequest(
            parameterGroupName: parameterGroupName, 
            parameterNameValues: parameterNameValues
        )
        return try await self.updateParameterGroup(input, logger: logger)
    }

    /// Modifies an existing subnet group.
    @Sendable
    @inlinable
    public func updateSubnetGroup(_ input: UpdateSubnetGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSubnetGroupResponse {
        try await self.client.execute(
            operation: "UpdateSubnetGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies an existing subnet group.
    ///
    /// Parameters:
    ///   - description: A description of the subnet group.
    ///   - subnetGroupName: The name of the subnet group.
    ///   - subnetIds: A list of subnet IDs in the subnet group.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateSubnetGroup(
        description: String? = nil,
        subnetGroupName: String,
        subnetIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateSubnetGroupResponse {
        let input = UpdateSubnetGroupRequest(
            description: description, 
            subnetGroupName: subnetGroupName, 
            subnetIds: subnetIds
        )
        return try await self.updateSubnetGroup(input, logger: logger)
    }
}

extension DAX {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: DAX, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}
