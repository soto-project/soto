//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension SsmSap {
    // MARK: Enums

    public enum AllocationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case elasticIp = "ELASTIC_IP"
        case overlay = "OVERLAY"
        case unknown = "UNKNOWN"
        case vpcSubnet = "VPC_SUBNET"
        public var description: String { return self.rawValue }
    }

    public enum ApplicationDiscoveryStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case deleting = "DELETING"
        case refreshFailed = "REFRESH_FAILED"
        case registering = "REGISTERING"
        case registrationFailed = "REGISTRATION_FAILED"
        case success = "SUCCESS"
        public var description: String { return self.rawValue }
    }

    public enum ApplicationStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case activated = "ACTIVATED"
        case deleting = "DELETING"
        case failed = "FAILED"
        case registering = "REGISTERING"
        case starting = "STARTING"
        case stopped = "STOPPED"
        case stopping = "STOPPING"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum ApplicationType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case hana = "HANA"
        case sapAbap = "SAP_ABAP"
        public var description: String { return self.rawValue }
    }

    public enum BackintMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awsBackup = "AWSBackup"
        public var description: String { return self.rawValue }
    }

    public enum ClusterStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case maintenance = "MAINTENANCE"
        case none = "NONE"
        case offline = "OFFLINE"
        case online = "ONLINE"
        case standby = "STANDBY"
        public var description: String { return self.rawValue }
    }

    public enum ComponentStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case activated = "ACTIVATED"
        case running = "RUNNING"
        case runningWithError = "RUNNING_WITH_ERROR"
        case starting = "STARTING"
        case stopped = "STOPPED"
        case stopping = "STOPPING"
        case undefined = "UNDEFINED"
        public var description: String { return self.rawValue }
    }

    public enum ComponentType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case abap = "ABAP"
        case ascs = "ASCS"
        case dialog = "DIALOG"
        case ers = "ERS"
        case hana = "HANA"
        case hanaNode = "HANA_NODE"
        case wd = "WD"
        case webdisp = "WEBDISP"
        public var description: String { return self.rawValue }
    }

    public enum CredentialType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case admin = "ADMIN"
        public var description: String { return self.rawValue }
    }

    public enum DatabaseConnectionMethod: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case direct = "DIRECT"
        case overlay = "OVERLAY"
        public var description: String { return self.rawValue }
    }

    public enum DatabaseStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case error = "ERROR"
        case running = "RUNNING"
        case starting = "STARTING"
        case stopped = "STOPPED"
        case unknown = "UNKNOWN"
        case warning = "WARNING"
        public var description: String { return self.rawValue }
    }

    public enum DatabaseType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case system = "SYSTEM"
        case tenant = "TENANT"
        public var description: String { return self.rawValue }
    }

    public enum FilterOperator: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case equals = "Equals"
        case greaterThanOrEquals = "GreaterThanOrEquals"
        case lessThanOrEquals = "LessThanOrEquals"
        public var description: String { return self.rawValue }
    }

    public enum HostRole: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case leader = "LEADER"
        case standby = "STANDBY"
        case unknown = "UNKNOWN"
        case worker = "WORKER"
        public var description: String { return self.rawValue }
    }

    public enum OperationMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case deltaDatashipping = "DELTA_DATASHIPPING"
        case logreplay = "LOGREPLAY"
        case logreplayReadaccess = "LOGREPLAY_READACCESS"
        case none = "NONE"
        case primary = "PRIMARY"
        public var description: String { return self.rawValue }
    }

    public enum OperationStatus: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case error = "ERROR"
        case inprogress = "INPROGRESS"
        case success = "SUCCESS"
        public var description: String { return self.rawValue }
    }

    public enum PermissionActionType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case restore = "RESTORE"
        public var description: String { return self.rawValue }
    }

    public enum ReplicationMode: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case `async` = "ASYNC"
        case none = "NONE"
        case primary = "PRIMARY"
        case sync = "SYNC"
        case syncmem = "SYNCMEM"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct Application: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the Application Registry.
        public let appRegistryArn: String?
        /// The Amazon Resource Name (ARN) of the application.
        public let arn: String?
        /// The components of the application.
        public let components: [String]?
        /// The latest discovery result for the application.
        public let discoveryStatus: ApplicationDiscoveryStatus?
        /// The ID of the application.
        public let id: String?
        /// The time at which the application was last updated.
        public let lastUpdated: Date?
        /// The status of the application.
        public let status: ApplicationStatus?
        /// The status message.
        public let statusMessage: String?
        /// The type of the application.
        public let type: ApplicationType?

        public init(appRegistryArn: String? = nil, arn: String? = nil, components: [String]? = nil, discoveryStatus: ApplicationDiscoveryStatus? = nil, id: String? = nil, lastUpdated: Date? = nil, status: ApplicationStatus? = nil, statusMessage: String? = nil, type: ApplicationType? = nil) {
            self.appRegistryArn = appRegistryArn
            self.arn = arn
            self.components = components
            self.discoveryStatus = discoveryStatus
            self.id = id
            self.lastUpdated = lastUpdated
            self.status = status
            self.statusMessage = statusMessage
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case appRegistryArn = "AppRegistryArn"
            case arn = "Arn"
            case components = "Components"
            case discoveryStatus = "DiscoveryStatus"
            case id = "Id"
            case lastUpdated = "LastUpdated"
            case status = "Status"
            case statusMessage = "StatusMessage"
            case type = "Type"
        }
    }

    public struct ApplicationCredential: AWSEncodableShape & AWSDecodableShape {
        /// The type of the application credentials.
        public let credentialType: CredentialType
        /// The name of the SAP HANA database.
        public let databaseName: String
        /// The secret ID created in AWS Secrets Manager to store the credentials of the SAP application.
        public let secretId: String

        public init(credentialType: CredentialType, databaseName: String, secretId: String) {
            self.credentialType = credentialType
            self.databaseName = databaseName
            self.secretId = secretId
        }

        public func validate(name: String) throws {
            try self.validate(self.databaseName, name: "databaseName", parent: name, max: 100)
            try self.validate(self.databaseName, name: "databaseName", parent: name, min: 1)
            try self.validate(self.secretId, name: "secretId", parent: name, max: 100)
            try self.validate(self.secretId, name: "secretId", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case credentialType = "CredentialType"
            case databaseName = "DatabaseName"
            case secretId = "SecretId"
        }
    }

    public struct ApplicationSummary: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the application.
        public let arn: String?
        /// The status of the latest discovery.
        public let discoveryStatus: ApplicationDiscoveryStatus?
        /// The ID of the application.
        public let id: String?
        /// The tags on the application.
        public let tags: [String: String]?
        /// The type of the application.
        public let type: ApplicationType?

        public init(arn: String? = nil, discoveryStatus: ApplicationDiscoveryStatus? = nil, id: String? = nil, tags: [String: String]? = nil, type: ApplicationType? = nil) {
            self.arn = arn
            self.discoveryStatus = discoveryStatus
            self.id = id
            self.tags = tags
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case discoveryStatus = "DiscoveryStatus"
            case id = "Id"
            case tags = "Tags"
            case type = "Type"
        }
    }

    public struct AssociatedHost: AWSDecodableShape {
        /// The ID of the Amazon EC2 instance.
        public let ec2InstanceId: String?
        /// The name of the host.
        public let hostname: String?
        /// The IP addresses of the associated host.
        public let ipAddresses: [IpAddressMember]?
        /// The version of the operating system.
        public let osVersion: String?

        public init(ec2InstanceId: String? = nil, hostname: String? = nil, ipAddresses: [IpAddressMember]? = nil, osVersion: String? = nil) {
            self.ec2InstanceId = ec2InstanceId
            self.hostname = hostname
            self.ipAddresses = ipAddresses
            self.osVersion = osVersion
        }

        private enum CodingKeys: String, CodingKey {
            case ec2InstanceId = "Ec2InstanceId"
            case hostname = "Hostname"
            case ipAddresses = "IpAddresses"
            case osVersion = "OsVersion"
        }
    }

    public struct BackintConfig: AWSEncodableShape {
        /// AWS service for your database backup.
        public let backintMode: BackintMode
        public let ensureNoBackupInProcess: Bool

        public init(backintMode: BackintMode, ensureNoBackupInProcess: Bool) {
            self.backintMode = backintMode
            self.ensureNoBackupInProcess = ensureNoBackupInProcess
        }

        private enum CodingKeys: String, CodingKey {
            case backintMode = "BackintMode"
            case ensureNoBackupInProcess = "EnsureNoBackupInProcess"
        }
    }

    public struct Component: AWSDecodableShape {
        /// The ID of the application.
        public let applicationId: String?
        /// The Amazon Resource Name (ARN) of the component.
        public let arn: String?
        /// The associated host of the component.
        public let associatedHost: AssociatedHost?
        /// The child components of a highly available environment. For example, in a highly available SAP on AWS workload, the child component consists of the primary and secondar instances.
        public let childComponents: [String]?
        /// The ID of the component.
        public let componentId: String?
        /// The type of the component.
        public let componentType: ComponentType?
        /// The connection specifications for the database of the component.
        public let databaseConnection: DatabaseConnection?
        /// The SAP HANA databases of the component.
        public let databases: [String]?
        /// The SAP HANA version of the component.
        public let hdbVersion: String?
        /// The hosts of the component.
        public let hosts: [Host]?
        /// The time at which the component was last updated.
        public let lastUpdated: Date?
        /// The parent component of a highly available environment. For example, in a highly available SAP on AWS workload, the parent component consists of the entire setup, including the child components.
        public let parentComponent: String?
        /// The primary host of the component.
        public let primaryHost: String?
        /// Details of the SAP HANA system replication for the component.
        public let resilience: Resilience?
        /// The SAP feature of the component.
        public let sapFeature: String?
        /// The hostname of the component.
        public let sapHostname: String?
        /// The kernel version of the component.
        public let sapKernelVersion: String?
        /// The SAP System Identifier of the application component.
        public let sid: String?
        /// The status of the component.   ACTIVATED - this status has been deprecated.   STARTING - the component is in the process of being started.   STOPPED - the component is not running.   STOPPING - the component is in the process of being stopped.   RUNNING - the component is running.   RUNNING_WITH_ERROR - one or more child component(s) of the parent component is not running. Call  GetComponent to review the status of each child component.   UNDEFINED - AWS Systems Manager for SAP cannot provide the component status based on the discovered information. Verify your SAP application.
        public let status: ComponentStatus?
        /// The SAP system number of the application component.
        public let systemNumber: String?

        public init(applicationId: String? = nil, arn: String? = nil, associatedHost: AssociatedHost? = nil, childComponents: [String]? = nil, componentId: String? = nil, componentType: ComponentType? = nil, databaseConnection: DatabaseConnection? = nil, databases: [String]? = nil, hdbVersion: String? = nil, lastUpdated: Date? = nil, parentComponent: String? = nil, resilience: Resilience? = nil, sapFeature: String? = nil, sapHostname: String? = nil, sapKernelVersion: String? = nil, sid: String? = nil, status: ComponentStatus? = nil, systemNumber: String? = nil) {
            self.applicationId = applicationId
            self.arn = arn
            self.associatedHost = associatedHost
            self.childComponents = childComponents
            self.componentId = componentId
            self.componentType = componentType
            self.databaseConnection = databaseConnection
            self.databases = databases
            self.hdbVersion = hdbVersion
            self.hosts = nil
            self.lastUpdated = lastUpdated
            self.parentComponent = parentComponent
            self.primaryHost = nil
            self.resilience = resilience
            self.sapFeature = sapFeature
            self.sapHostname = sapHostname
            self.sapKernelVersion = sapKernelVersion
            self.sid = sid
            self.status = status
            self.systemNumber = systemNumber
        }

        @available(*, deprecated, message: "Members hosts, primaryHost have been deprecated")
        public init(applicationId: String? = nil, arn: String? = nil, associatedHost: AssociatedHost? = nil, childComponents: [String]? = nil, componentId: String? = nil, componentType: ComponentType? = nil, databaseConnection: DatabaseConnection? = nil, databases: [String]? = nil, hdbVersion: String? = nil, hosts: [Host]? = nil, lastUpdated: Date? = nil, parentComponent: String? = nil, primaryHost: String? = nil, resilience: Resilience? = nil, sapFeature: String? = nil, sapHostname: String? = nil, sapKernelVersion: String? = nil, sid: String? = nil, status: ComponentStatus? = nil, systemNumber: String? = nil) {
            self.applicationId = applicationId
            self.arn = arn
            self.associatedHost = associatedHost
            self.childComponents = childComponents
            self.componentId = componentId
            self.componentType = componentType
            self.databaseConnection = databaseConnection
            self.databases = databases
            self.hdbVersion = hdbVersion
            self.hosts = hosts
            self.lastUpdated = lastUpdated
            self.parentComponent = parentComponent
            self.primaryHost = primaryHost
            self.resilience = resilience
            self.sapFeature = sapFeature
            self.sapHostname = sapHostname
            self.sapKernelVersion = sapKernelVersion
            self.sid = sid
            self.status = status
            self.systemNumber = systemNumber
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case arn = "Arn"
            case associatedHost = "AssociatedHost"
            case childComponents = "ChildComponents"
            case componentId = "ComponentId"
            case componentType = "ComponentType"
            case databaseConnection = "DatabaseConnection"
            case databases = "Databases"
            case hdbVersion = "HdbVersion"
            case hosts = "Hosts"
            case lastUpdated = "LastUpdated"
            case parentComponent = "ParentComponent"
            case primaryHost = "PrimaryHost"
            case resilience = "Resilience"
            case sapFeature = "SapFeature"
            case sapHostname = "SapHostname"
            case sapKernelVersion = "SapKernelVersion"
            case sid = "Sid"
            case status = "Status"
            case systemNumber = "SystemNumber"
        }
    }

    public struct ComponentSummary: AWSDecodableShape {
        /// The ID of the application.
        public let applicationId: String?
        /// The Amazon Resource Name (ARN) of the component summary.
        public let arn: String?
        /// The ID of the component.
        public let componentId: String?
        /// The type of the component.
        public let componentType: ComponentType?
        /// The tags of the component.
        public let tags: [String: String]?

        public init(applicationId: String? = nil, arn: String? = nil, componentId: String? = nil, componentType: ComponentType? = nil, tags: [String: String]? = nil) {
            self.applicationId = applicationId
            self.arn = arn
            self.componentId = componentId
            self.componentType = componentType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case arn = "Arn"
            case componentId = "ComponentId"
            case componentType = "ComponentType"
            case tags = "Tags"
        }
    }

    public struct Database: AWSDecodableShape {
        /// The ID of the application.
        public let applicationId: String?
        /// The Amazon Resource Name (ARN) of the database.
        public let arn: String?
        /// The ID of the component.
        public let componentId: String?
        /// The credentials of the database.
        public let credentials: [ApplicationCredential]?
        /// The ID of the SAP HANA database.
        public let databaseId: String?
        /// The name of the database.
        public let databaseName: String?
        /// The type of the database.
        public let databaseType: DatabaseType?
        /// The time at which the database was last updated.
        public let lastUpdated: Date?
        /// The primary host of the database.
        public let primaryHost: String?
        /// The SQL port of the database.
        public let sqlPort: Int?
        /// The status of the database.
        public let status: DatabaseStatus?

        public init(applicationId: String? = nil, arn: String? = nil, componentId: String? = nil, credentials: [ApplicationCredential]? = nil, databaseId: String? = nil, databaseName: String? = nil, databaseType: DatabaseType? = nil, lastUpdated: Date? = nil, primaryHost: String? = nil, sqlPort: Int? = nil, status: DatabaseStatus? = nil) {
            self.applicationId = applicationId
            self.arn = arn
            self.componentId = componentId
            self.credentials = credentials
            self.databaseId = databaseId
            self.databaseName = databaseName
            self.databaseType = databaseType
            self.lastUpdated = lastUpdated
            self.primaryHost = primaryHost
            self.sqlPort = sqlPort
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case arn = "Arn"
            case componentId = "ComponentId"
            case credentials = "Credentials"
            case databaseId = "DatabaseId"
            case databaseName = "DatabaseName"
            case databaseType = "DatabaseType"
            case lastUpdated = "LastUpdated"
            case primaryHost = "PrimaryHost"
            case sqlPort = "SQLPort"
            case status = "Status"
        }
    }

    public struct DatabaseConnection: AWSDecodableShape {
        /// The IP address for connection.
        public let connectionIp: String?
        /// The Amazon Resource Name of the connected SAP HANA database.
        public let databaseArn: String?
        /// The method of connection.
        public let databaseConnectionMethod: DatabaseConnectionMethod?

        public init(connectionIp: String? = nil, databaseArn: String? = nil, databaseConnectionMethod: DatabaseConnectionMethod? = nil) {
            self.connectionIp = connectionIp
            self.databaseArn = databaseArn
            self.databaseConnectionMethod = databaseConnectionMethod
        }

        private enum CodingKeys: String, CodingKey {
            case connectionIp = "ConnectionIp"
            case databaseArn = "DatabaseArn"
            case databaseConnectionMethod = "DatabaseConnectionMethod"
        }
    }

    public struct DatabaseSummary: AWSDecodableShape {
        /// The ID of the application.
        public let applicationId: String?
        /// The Amazon Resource Name (ARN) of the database.
        public let arn: String?
        /// The ID of the component.
        public let componentId: String?
        /// The ID of the database.
        public let databaseId: String?
        /// The type of the database.
        public let databaseType: DatabaseType?
        /// The tags of the database.
        public let tags: [String: String]?

        public init(applicationId: String? = nil, arn: String? = nil, componentId: String? = nil, databaseId: String? = nil, databaseType: DatabaseType? = nil, tags: [String: String]? = nil) {
            self.applicationId = applicationId
            self.arn = arn
            self.componentId = componentId
            self.databaseId = databaseId
            self.databaseType = databaseType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case arn = "Arn"
            case componentId = "ComponentId"
            case databaseId = "DatabaseId"
            case databaseType = "DatabaseType"
            case tags = "Tags"
        }
    }

    public struct DeleteResourcePermissionInput: AWSEncodableShape {
        /// Delete or restore the permissions on the target database.
        public let actionType: PermissionActionType?
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String
        /// The Amazon Resource Name (ARN) of the source resource.
        public let sourceResourceArn: String?

        public init(actionType: PermissionActionType? = nil, resourceArn: String, sourceResourceArn: String? = nil) {
            self.actionType = actionType
            self.resourceArn = resourceArn
            self.sourceResourceArn = sourceResourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
            try self.validate(self.sourceResourceArn, name: "sourceResourceArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case resourceArn = "ResourceArn"
            case sourceResourceArn = "SourceResourceArn"
        }
    }

    public struct DeleteResourcePermissionOutput: AWSDecodableShape {
        /// The policy that removes permissions on the target database.
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct DeregisterApplicationInput: AWSEncodableShape {
        /// The ID of the application.
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
        }
    }

    public struct DeregisterApplicationOutput: AWSDecodableShape {
        public init() {}
    }

    public struct Filter: AWSEncodableShape {
        /// The name of the filter. Filter names are case-sensitive.
        public let name: String
        /// The operator for the filter.
        public let `operator`: FilterOperator
        /// The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR, and the request returns all results that match any of the specified values
        public let value: String

        public init(name: String, operator: FilterOperator, value: String) {
            self.name = name
            self.`operator` = `operator`
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, max: 32)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 64)
            try self.validate(self.value, name: "value", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case `operator` = "Operator"
            case value = "Value"
        }
    }

    public struct GetApplicationInput: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the application.
        public let applicationArn: String?
        /// The ID of the application.
        public let applicationId: String?
        /// The Amazon Resource Name (ARN) of the application registry.
        public let appRegistryArn: String?

        public init(applicationArn: String? = nil, applicationId: String? = nil, appRegistryArn: String? = nil) {
            self.applicationArn = applicationArn
            self.applicationId = applicationId
            self.appRegistryArn = appRegistryArn
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationArn, name: "applicationArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
            try self.validate(self.appRegistryArn, name: "appRegistryArn", parent: name, pattern: "^arn:aws:servicecatalog:[a-z0-9:\\/-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationArn = "ApplicationArn"
            case applicationId = "ApplicationId"
            case appRegistryArn = "AppRegistryArn"
        }
    }

    public struct GetApplicationOutput: AWSDecodableShape {
        /// Returns all of the metadata of an application registered with AWS Systems Manager for SAP.
        public let application: Application?
        /// The tags of a registered application.
        public let tags: [String: String]?

        public init(application: Application? = nil, tags: [String: String]? = nil) {
            self.application = application
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case application = "Application"
            case tags = "Tags"
        }
    }

    public struct GetComponentInput: AWSEncodableShape {
        /// The ID of the application.
        public let applicationId: String
        /// The ID of the component.
        public let componentId: String

        public init(applicationId: String, componentId: String) {
            self.applicationId = applicationId
            self.componentId = componentId
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
            try self.validate(self.componentId, name: "componentId", parent: name, pattern: "^[\\w\\d-]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case componentId = "ComponentId"
        }
    }

    public struct GetComponentOutput: AWSDecodableShape {
        /// The component of an application registered with AWS Systems Manager for SAP.
        public let component: Component?
        /// The tags of a component.
        public let tags: [String: String]?

        public init(component: Component? = nil, tags: [String: String]? = nil) {
            self.component = component
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case component = "Component"
            case tags = "Tags"
        }
    }

    public struct GetDatabaseInput: AWSEncodableShape {
        /// The ID of the application.
        public let applicationId: String?
        /// The ID of the component.
        public let componentId: String?
        /// The Amazon Resource Name (ARN) of the database.
        public let databaseArn: String?
        /// The ID of the database.
        public let databaseId: String?

        public init(applicationId: String? = nil, componentId: String? = nil, databaseArn: String? = nil, databaseId: String? = nil) {
            self.applicationId = applicationId
            self.componentId = componentId
            self.databaseArn = databaseArn
            self.databaseId = databaseId
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
            try self.validate(self.componentId, name: "componentId", parent: name, pattern: "^[\\w\\d-]+$")
            try self.validate(self.databaseArn, name: "databaseArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
            try self.validate(self.databaseId, name: "databaseId", parent: name, pattern: "[\\w\\d]+$")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case componentId = "ComponentId"
            case databaseArn = "DatabaseArn"
            case databaseId = "DatabaseId"
        }
    }

    public struct GetDatabaseOutput: AWSDecodableShape {
        /// The SAP HANA database of an application registered with AWS Systems Manager for SAP.
        public let database: Database?
        /// The tags of a database.
        public let tags: [String: String]?

        public init(database: Database? = nil, tags: [String: String]? = nil) {
            self.database = database
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case database = "Database"
            case tags = "Tags"
        }
    }

    public struct GetOperationInput: AWSEncodableShape {
        /// The ID of the operation.
        public let operationId: String

        public init(operationId: String) {
            self.operationId = operationId
        }

        public func validate(name: String) throws {
            try self.validate(self.operationId, name: "operationId", parent: name, pattern: "^[{]?[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}[}]?$")
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct GetOperationOutput: AWSDecodableShape {
        /// Returns the details of an operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "Operation"
        }
    }

    public struct GetResourcePermissionInput: AWSEncodableShape {
        public let actionType: PermissionActionType?
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String

        public init(actionType: PermissionActionType? = nil, resourceArn: String) {
            self.actionType = actionType
            self.resourceArn = resourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case resourceArn = "ResourceArn"
        }
    }

    public struct GetResourcePermissionOutput: AWSDecodableShape {
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct Host: AWSDecodableShape {
        /// The ID of Amazon EC2 instance.
        public let ec2InstanceId: String?
        /// The IP address of the Dedicated Host.
        public let hostIp: String?
        /// The name of the Dedicated Host.
        public let hostName: String?
        /// The role of the Dedicated Host.
        public let hostRole: HostRole?
        /// The instance ID of the instance on the Dedicated Host.
        public let instanceId: String?
        /// The version of the operating system.
        public let osVersion: String?

        public init(ec2InstanceId: String? = nil, hostIp: String? = nil, hostName: String? = nil, hostRole: HostRole? = nil, instanceId: String? = nil, osVersion: String? = nil) {
            self.ec2InstanceId = ec2InstanceId
            self.hostIp = hostIp
            self.hostName = hostName
            self.hostRole = hostRole
            self.instanceId = instanceId
            self.osVersion = osVersion
        }

        private enum CodingKeys: String, CodingKey {
            case ec2InstanceId = "EC2InstanceId"
            case hostIp = "HostIp"
            case hostName = "HostName"
            case hostRole = "HostRole"
            case instanceId = "InstanceId"
            case osVersion = "OsVersion"
        }
    }

    public struct IpAddressMember: AWSDecodableShape {
        /// The type of allocation for the IP address.
        public let allocationType: AllocationType?
        /// The IP address.
        public let ipAddress: String?
        /// The primary IP address.
        public let primary: Bool?

        public init(allocationType: AllocationType? = nil, ipAddress: String? = nil, primary: Bool? = nil) {
            self.allocationType = allocationType
            self.ipAddress = ipAddress
            self.primary = primary
        }

        private enum CodingKeys: String, CodingKey {
            case allocationType = "AllocationType"
            case ipAddress = "IpAddress"
            case primary = "Primary"
        }
    }

    public struct ListApplicationsInput: AWSEncodableShape {
        /// The filter of name, value, and operator.
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try self.validate(self.filters, name: "filters", parent: name, max: 10)
            try self.validate(self.filters, name: "filters", parent: name, min: 1)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 50)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.{16,1024}$")
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListApplicationsOutput: AWSDecodableShape {
        /// The applications registered with AWS Systems Manager for SAP.
        public let applications: [ApplicationSummary]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(applications: [ApplicationSummary]? = nil, nextToken: String? = nil) {
            self.applications = applications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case applications = "Applications"
            case nextToken = "NextToken"
        }
    }

    public struct ListComponentsInput: AWSEncodableShape {
        /// The ID of the application.
        public let applicationId: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If you do not specify a value for MaxResults, the request returns 50 items per page by default.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(applicationId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.applicationId = applicationId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 50)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.{16,1024}$")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListComponentsOutput: AWSDecodableShape {
        /// List of components registered with AWS System Manager for SAP.
        public let components: [ComponentSummary]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(components: [ComponentSummary]? = nil, nextToken: String? = nil) {
            self.components = components
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case components = "Components"
            case nextToken = "NextToken"
        }
    }

    public struct ListDatabasesInput: AWSEncodableShape {
        /// The ID of the application.
        public let applicationId: String?
        /// The ID of the component.
        public let componentId: String?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If you do not specify a value for MaxResults, the request returns 50 items per page by default.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(applicationId: String? = nil, componentId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.applicationId = applicationId
            self.componentId = componentId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
            try self.validate(self.componentId, name: "componentId", parent: name, pattern: "^[\\w\\d-]+$")
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 50)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.{16,1024}$")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case componentId = "ComponentId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListDatabasesOutput: AWSDecodableShape {
        /// The SAP HANA databases of an application.
        public let databases: [DatabaseSummary]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(databases: [DatabaseSummary]? = nil, nextToken: String? = nil) {
            self.databases = databases
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case databases = "Databases"
            case nextToken = "NextToken"
        }
    }

    public struct ListOperationsInput: AWSEncodableShape {
        /// The ID of the application.
        public let applicationId: String
        /// The filters of an operation.
        public let filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. If you do not specify a value for MaxResults, the request returns 50 items per page by default.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(applicationId: String, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.applicationId = applicationId
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
            try self.filters?.forEach {
                try $0.validate(name: "\(name).filters[]")
            }
            try self.validate(self.filters, name: "filters", parent: name, max: 10)
            try self.validate(self.filters, name: "filters", parent: name, min: 1)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 50)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, pattern: "^.{16,1024}$")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case filters = "Filters"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListOperationsOutput: AWSDecodableShape {
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// List of operations performed by AWS Systems Manager for SAP.
        public let operations: [Operation]?

        public init(nextToken: String? = nil, operations: [Operation]? = nil) {
            self.nextToken = nextToken
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case operations = "Operations"
        }
    }

    public struct ListTagsForResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.resourceArn, key: "resourceArn")
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListTagsForResourceResponse: AWSDecodableShape {
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct Operation: AWSDecodableShape {
        /// The end time of the operation.
        public let endTime: Date?
        /// The ID of the operation.
        public let id: String?
        /// The time at which the operation was last updated.
        public let lastUpdatedTime: Date?
        /// The properties of the operation.
        public let properties: [String: String]?
        /// The Amazon Resource Name (ARN) of the operation.
        public let resourceArn: String?
        /// The resource ID of the operation.
        public let resourceId: String?
        /// The resource type of the operation.
        public let resourceType: String?
        /// The start time of the operation.
        public let startTime: Date?
        /// The status of the operation.
        public let status: OperationStatus?
        /// The status message of the operation.
        public let statusMessage: String?
        /// The type of the operation.
        public let type: String?

        public init(endTime: Date? = nil, id: String? = nil, lastUpdatedTime: Date? = nil, properties: [String: String]? = nil, resourceArn: String? = nil, resourceId: String? = nil, resourceType: String? = nil, startTime: Date? = nil, status: OperationStatus? = nil, statusMessage: String? = nil, type: String? = nil) {
            self.endTime = endTime
            self.id = id
            self.lastUpdatedTime = lastUpdatedTime
            self.properties = properties
            self.resourceArn = resourceArn
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case endTime = "EndTime"
            case id = "Id"
            case lastUpdatedTime = "LastUpdatedTime"
            case properties = "Properties"
            case resourceArn = "ResourceArn"
            case resourceId = "ResourceId"
            case resourceType = "ResourceType"
            case startTime = "StartTime"
            case status = "Status"
            case statusMessage = "StatusMessage"
            case type = "Type"
        }
    }

    public struct PutResourcePermissionInput: AWSEncodableShape {
        public let actionType: PermissionActionType
        public let resourceArn: String
        public let sourceResourceArn: String

        public init(actionType: PermissionActionType, resourceArn: String, sourceResourceArn: String) {
            self.actionType = actionType
            self.resourceArn = resourceArn
            self.sourceResourceArn = sourceResourceArn
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
            try self.validate(self.sourceResourceArn, name: "sourceResourceArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case resourceArn = "ResourceArn"
            case sourceResourceArn = "SourceResourceArn"
        }
    }

    public struct PutResourcePermissionOutput: AWSDecodableShape {
        public let policy: String?

        public init(policy: String? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct RegisterApplicationInput: AWSEncodableShape {
        /// The ID of the application.
        public let applicationId: String
        /// The type of the application.
        public let applicationType: ApplicationType
        /// The credentials of the SAP application.
        public let credentials: [ApplicationCredential]?
        /// The Amazon Resource Name of the SAP HANA database.
        public let databaseArn: String?
        /// The Amazon EC2 instances on which your SAP application is running.
        public let instances: [String]
        /// The SAP instance number of the application.
        public let sapInstanceNumber: String?
        /// The System ID of the application.
        public let sid: String?
        /// The tags to be attached to the SAP application.
        public let tags: [String: String]?

        public init(applicationId: String, applicationType: ApplicationType, credentials: [ApplicationCredential]? = nil, databaseArn: String? = nil, instances: [String], sapInstanceNumber: String? = nil, sid: String? = nil, tags: [String: String]? = nil) {
            self.applicationId = applicationId
            self.applicationType = applicationType
            self.credentials = credentials
            self.databaseArn = databaseArn
            self.instances = instances
            self.sapInstanceNumber = sapInstanceNumber
            self.sid = sid
            self.tags = tags
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
            try self.credentials?.forEach {
                try $0.validate(name: "\(name).credentials[]")
            }
            try self.validate(self.credentials, name: "credentials", parent: name, max: 20)
            try self.validate(self.databaseArn, name: "databaseArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
            try self.instances.forEach {
                try validate($0, name: "instances[]", parent: name, pattern: "^i-[\\w\\d]{8}$|^i-[\\w\\d]{17}$")
            }
            try self.validate(self.instances, name: "instances", parent: name, max: 1)
            try self.validate(self.instances, name: "instances", parent: name, min: 1)
            try self.validate(self.sapInstanceNumber, name: "sapInstanceNumber", parent: name, pattern: "^[0-9]{2}$")
            try self.validate(self.sid, name: "sid", parent: name, pattern: "^[A-Z][A-Z0-9]{2}$")
            try self.tags?.forEach {
                try validate($0.key, name: "tags.key", parent: name, pattern: "^(?!aws:)[a-zA-Z+-=._:/]+$")
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case applicationType = "ApplicationType"
            case credentials = "Credentials"
            case databaseArn = "DatabaseArn"
            case instances = "Instances"
            case sapInstanceNumber = "SapInstanceNumber"
            case sid = "Sid"
            case tags = "Tags"
        }
    }

    public struct RegisterApplicationOutput: AWSDecodableShape {
        /// The application registered with AWS Systems Manager for SAP.
        public let application: Application?
        /// The ID of the operation.
        public let operationId: String?

        public init(application: Application? = nil, operationId: String? = nil) {
            self.application = application
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case application = "Application"
            case operationId = "OperationId"
        }
    }

    public struct Resilience: AWSDecodableShape {
        /// The cluster status of the component.
        public let clusterStatus: ClusterStatus?
        /// Indicates if or not enqueue replication is enabled for the ASCS component.
        public let enqueueReplication: Bool?
        /// The operation mode of the component.
        public let hsrOperationMode: OperationMode?
        /// The replication mode of the component.
        public let hsrReplicationMode: ReplicationMode?
        /// The tier of the component.
        public let hsrTier: String?

        public init(clusterStatus: ClusterStatus? = nil, enqueueReplication: Bool? = nil, hsrOperationMode: OperationMode? = nil, hsrReplicationMode: ReplicationMode? = nil, hsrTier: String? = nil) {
            self.clusterStatus = clusterStatus
            self.enqueueReplication = enqueueReplication
            self.hsrOperationMode = hsrOperationMode
            self.hsrReplicationMode = hsrReplicationMode
            self.hsrTier = hsrTier
        }

        private enum CodingKeys: String, CodingKey {
            case clusterStatus = "ClusterStatus"
            case enqueueReplication = "EnqueueReplication"
            case hsrOperationMode = "HsrOperationMode"
            case hsrReplicationMode = "HsrReplicationMode"
            case hsrTier = "HsrTier"
        }
    }

    public struct StartApplicationRefreshInput: AWSEncodableShape {
        /// The ID of the application.
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
        }
    }

    public struct StartApplicationRefreshOutput: AWSDecodableShape {
        /// The ID of the operation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct TagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String
        /// The tags on a resource.
        public let tags: [String: String]

        public init(resourceArn: String, tags: [String: String]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.resourceArn, key: "resourceArn")
            try container.encode(self.tags, forKey: .tags)
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
            try self.tags.forEach {
                try validate($0.key, name: "tags.key", parent: name, pattern: "^(?!aws:)[a-zA-Z+-=._:/]+$")
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, max: 256)
                try validate($0.value, name: "tags[\"\($0.key)\"]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct TagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UntagResourceRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String
        /// Adds/updates or removes credentials for applications registered with AWS Systems Manager for SAP.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.resourceArn, key: "resourceArn")
            request.encodeQuery(self.tagKeys, key: "tagKeys")
        }

        public func validate(name: String) throws {
            try self.validate(self.resourceArn, name: "resourceArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
            try self.tagKeys.forEach {
                try validate($0, name: "tagKeys[]", parent: name, pattern: "^(?!aws:)[a-zA-Z+-=._:/]+$")
            }
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct UntagResourceResponse: AWSDecodableShape {
        public init() {}
    }

    public struct UpdateApplicationSettingsInput: AWSEncodableShape {
        /// The ID of the application.
        public let applicationId: String
        /// Installation of AWS Backint Agent for SAP HANA.
        public let backint: BackintConfig?
        /// The credentials to be added or updated.
        public let credentialsToAddOrUpdate: [ApplicationCredential]?
        /// The credentials to be removed.
        public let credentialsToRemove: [ApplicationCredential]?
        /// The Amazon Resource Name of the SAP HANA database that replaces the current SAP HANA connection with the SAP_ABAP application.
        public let databaseArn: String?

        public init(applicationId: String, backint: BackintConfig? = nil, credentialsToAddOrUpdate: [ApplicationCredential]? = nil, credentialsToRemove: [ApplicationCredential]? = nil, databaseArn: String? = nil) {
            self.applicationId = applicationId
            self.backint = backint
            self.credentialsToAddOrUpdate = credentialsToAddOrUpdate
            self.credentialsToRemove = credentialsToRemove
            self.databaseArn = databaseArn
        }

        public func validate(name: String) throws {
            try self.validate(self.applicationId, name: "applicationId", parent: name, pattern: "^[\\w\\d]{1,50}$")
            try self.credentialsToAddOrUpdate?.forEach {
                try $0.validate(name: "\(name).credentialsToAddOrUpdate[]")
            }
            try self.validate(self.credentialsToAddOrUpdate, name: "credentialsToAddOrUpdate", parent: name, max: 20)
            try self.credentialsToRemove?.forEach {
                try $0.validate(name: "\(name).credentialsToRemove[]")
            }
            try self.validate(self.credentialsToRemove, name: "credentialsToRemove", parent: name, max: 20)
            try self.validate(self.databaseArn, name: "databaseArn", parent: name, pattern: "^arn:(.+:){2,4}.+$|^arn:(.+:){1,3}.+\\/.+$")
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "ApplicationId"
            case backint = "Backint"
            case credentialsToAddOrUpdate = "CredentialsToAddOrUpdate"
            case credentialsToRemove = "CredentialsToRemove"
            case databaseArn = "DatabaseArn"
        }
    }

    public struct UpdateApplicationSettingsOutput: AWSDecodableShape {
        /// The update message.
        public let message: String?
        /// The IDs of the operations.
        public let operationIds: [String]?

        public init(message: String? = nil, operationIds: [String]? = nil) {
            self.message = message
            self.operationIds = operationIds
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case operationIds = "OperationIds"
        }
    }
}

// MARK: - Errors

/// Error enum for SsmSap
public struct SsmSapErrorType: AWSErrorType {
    enum Code: String {
        case conflictException = "ConflictException"
        case internalServerException = "InternalServerException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case unauthorizedException = "UnauthorizedException"
        case validationException = "ValidationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize SsmSap
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// A conflict has occurred.
    public static var conflictException: Self { .init(.conflictException) }
    /// An internal error has occurred.
    public static var internalServerException: Self { .init(.internalServerException) }
    /// The resource is not available.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// The request is not authorized.
    public static var unauthorizedException: Self { .init(.unauthorizedException) }
    /// The input fails to satisfy the constraints specified by an AWS service.
    public static var validationException: Self { .init(.validationException) }
}

extension SsmSapErrorType: Equatable {
    public static func == (lhs: SsmSapErrorType, rhs: SsmSapErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SsmSapErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
