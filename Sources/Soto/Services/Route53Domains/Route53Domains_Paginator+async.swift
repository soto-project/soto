//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2022 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if compiler(>=5.5.2) && canImport(_Concurrency)

import SotoCore

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Route53Domains {
    ///  This operation returns all the domain names registered with Amazon Route 53 for the current Amazon Web Services account
    ///  			 if no filtering conditions are used.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listDomainsPaginator(
        _ input: ListDomainsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListDomainsRequest, ListDomainsResponse> {
        return .init(
            input: input,
            command: listDomains,
            inputKey: \ListDomainsRequest.marker,
            outputKey: \ListDomainsResponse.nextPageMarker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns information about all of the operations that return an operation ID and that have ever been
    ///  			performed on domains that were registered by the current account.
    ///  		       This command runs only in the us-east-1 Region.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listOperationsPaginator(
        _ input: ListOperationsRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListOperationsRequest, ListOperationsResponse> {
        return .init(
            input: input,
            command: listOperations,
            inputKey: \ListOperationsRequest.marker,
            outputKey: \ListOperationsResponse.nextPageMarker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Lists the following prices for either all the TLDs supported by RouteÂ 53, or the specified TLD:
    ///  		         Registration   Transfer   Owner change   Domain renewal   Domain restoration
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func listPricesPaginator(
        _ input: ListPricesRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ListPricesRequest, ListPricesResponse> {
        return .init(
            input: input,
            command: listPrices,
            inputKey: \ListPricesRequest.marker,
            outputKey: \ListPricesResponse.nextPageMarker,
            logger: logger,
            on: eventLoop
        )
    }

    ///  Returns all the domain-related billing records for the current Amazon Web Services account for a specified period
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    ///   - eventLoop: EventLoop to run this process on
    public func viewBillingPaginator(
        _ input: ViewBillingRequest,
        logger: Logger = AWSClient.loggingDisabled,
        on eventLoop: EventLoop? = nil
    ) -> AWSClient.PaginatorSequence<ViewBillingRequest, ViewBillingResponse> {
        return .init(
            input: input,
            command: viewBilling,
            inputKey: \ViewBillingRequest.marker,
            outputKey: \ViewBillingResponse.nextPageMarker,
            logger: logger,
            on: eventLoop
        )
    }
}

#endif // compiler(>=5.5.2) && canImport(_Concurrency)
