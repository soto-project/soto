//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ServiceCatalog service.
///
/// Service Catalog  Service Catalog enables organizations to create and manage catalogs of IT services that are approved for Amazon Web Services. To get the most out of this documentation, you should be familiar with the terminology discussed in Service Catalog Concepts.
public struct ServiceCatalog: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ServiceCatalog client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWS242ServiceCatalogService",
            serviceName: "ServiceCatalog",
            serviceIdentifier: "servicecatalog",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2015-12-10",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: ServiceCatalogErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "servicecatalog-fips.us-east-1.amazonaws.com",
            "us-east-2": "servicecatalog-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "servicecatalog-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "servicecatalog-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "servicecatalog-fips.us-west-1.amazonaws.com",
            "us-west-2": "servicecatalog-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Accepts an offer to share the specified portfolio.
    @Sendable
    @inlinable
    public func acceptPortfolioShare(_ input: AcceptPortfolioShareInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptPortfolioShareOutput {
        try await self.client.execute(
            operation: "AcceptPortfolioShare", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts an offer to share the specified portfolio.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - portfolioId: The portfolio identifier.
    ///   - portfolioShareType: The type of shared portfolios to accept. The default is to accept imported portfolios.    AWS_ORGANIZATIONS - Accept portfolios shared by the management account of your organization.    IMPORTED - Accept imported portfolios.    AWS_SERVICECATALOG - Not supported. (Throws ResourceNotFoundException.)   For example, aws servicecatalog accept-portfolio-share --portfolio-id "port-2qwzkwxt3y5fk" --portfolio-share-type AWS_ORGANIZATIONS
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptPortfolioShare(
        acceptLanguage: String? = nil,
        portfolioId: String,
        portfolioShareType: PortfolioShareType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptPortfolioShareOutput {
        let input = AcceptPortfolioShareInput(
            acceptLanguage: acceptLanguage, 
            portfolioId: portfolioId, 
            portfolioShareType: portfolioShareType
        )
        return try await self.acceptPortfolioShare(input, logger: logger)
    }

    /// Associates the specified budget with the specified resource.
    @Sendable
    @inlinable
    public func associateBudgetWithResource(_ input: AssociateBudgetWithResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateBudgetWithResourceOutput {
        try await self.client.execute(
            operation: "AssociateBudgetWithResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified budget with the specified resource.
    ///
    /// Parameters:
    ///   - budgetName: The name of the budget you want to associate.
    ///   - resourceId:  The resource identifier. Either a portfolio-id or a product-id.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateBudgetWithResource(
        budgetName: String,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateBudgetWithResourceOutput {
        let input = AssociateBudgetWithResourceInput(
            budgetName: budgetName, 
            resourceId: resourceId
        )
        return try await self.associateBudgetWithResource(input, logger: logger)
    }

    /// Associates the specified principal ARN with the specified portfolio. If you share the portfolio with principal name sharing enabled, the PrincipalARN association is  included in the share.  The PortfolioID, PrincipalARN, and PrincipalType parameters are required.  You can associate a maximum of 10 Principals with a portfolio using PrincipalType as IAM_PATTERN.   When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is  then shared with other accounts. For a user in a recipient account who is not an Service Catalog Admin,  but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal  name association for the portfolio. Although this user may not know which principal names are associated through  Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then  Service Catalog recommends using PrincipalType as IAM. With this configuration,  the PrincipalARN must already exist in the recipient account before it can be associated.
    @Sendable
    @inlinable
    public func associatePrincipalWithPortfolio(_ input: AssociatePrincipalWithPortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociatePrincipalWithPortfolioOutput {
        try await self.client.execute(
            operation: "AssociatePrincipalWithPortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified principal ARN with the specified portfolio. If you share the portfolio with principal name sharing enabled, the PrincipalARN association is  included in the share.  The PortfolioID, PrincipalARN, and PrincipalType parameters are required.  You can associate a maximum of 10 Principals with a portfolio using PrincipalType as IAM_PATTERN.   When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is  then shared with other accounts. For a user in a recipient account who is not an Service Catalog Admin,  but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal  name association for the portfolio. Although this user may not know which principal names are associated through  Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then  Service Catalog recommends using PrincipalType as IAM. With this configuration,  the PrincipalARN must already exist in the recipient account before it can be associated.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - portfolioId: The portfolio identifier.
    ///   - principalARN: The ARN of the principal (user, role, or group). If the PrincipalType is IAM, the supported value is a  fully defined  IAM Amazon Resource Name (ARN).  If the PrincipalType is IAM_PATTERN,  the supported value is an IAM ARN without an AccountID in the following format:  arn:partition:iam:::resource-type/resource-id  The ARN resource-id can be either:   A fully formed resource-id. For example, arn:aws:iam:::role/resource-name or  arn:aws:iam:::role/resource-path/resource-name    A wildcard ARN. The wildcard ARN accepts IAM_PATTERN values with a  "*" or "?" in the resource-id segment of the ARN. For example arn:partition:service:::resource-type/resource-path/resource-name.  The new symbols are exclusive to the resource-path and resource-name  and cannot replace the resource-type or other  ARN values.  The ARN path and principal name allow unlimited wildcard characters.   Examples of an acceptable wildcard ARN:   arn:aws:iam:::role/ResourceName_*   arn:aws:iam:::role/*/ResourceName_?   Examples of an unacceptable wildcard ARN:   arn:aws:iam:::*/ResourceName   You can associate multiple IAM_PATTERNs even if the account has no principal  with that name.  The "?" wildcard character matches zero or one of any character. This is similar to ".?" in regular  regex context. The "*" wildcard character matches any number of any characters.  This is similar to ".*" in regular regex context. In the IAM Principal ARN format (arn:partition:iam:::resource-type/resource-path/resource-name),  valid resource-type values include user/, group/,  or role/.  The "?" and "*" characters are allowed only after the resource-type in the resource-id segment.  You can use special characters anywhere within the resource-id.  The "*" character also matches the "/" character, allowing paths to be formed within the  resource-id. For example, arn:aws:iam:::role/*/ResourceName_?  matches both arn:aws:iam:::role/pathA/pathB/ResourceName_1  and  arn:aws:iam:::role/pathA/ResourceName_1.
    ///   - principalType: The principal type. The supported value is IAM if you use a fully defined Amazon Resource Name  (ARN), or IAM_PATTERN if you use an ARN with no accountID,  with or without wildcard characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func associatePrincipalWithPortfolio(
        acceptLanguage: String? = nil,
        portfolioId: String,
        principalARN: String,
        principalType: PrincipalType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociatePrincipalWithPortfolioOutput {
        let input = AssociatePrincipalWithPortfolioInput(
            acceptLanguage: acceptLanguage, 
            portfolioId: portfolioId, 
            principalARN: principalARN, 
            principalType: principalType
        )
        return try await self.associatePrincipalWithPortfolio(input, logger: logger)
    }

    /// Associates the specified product with the specified portfolio. A delegated admin is authorized to invoke this command.
    @Sendable
    @inlinable
    public func associateProductWithPortfolio(_ input: AssociateProductWithPortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateProductWithPortfolioOutput {
        try await self.client.execute(
            operation: "AssociateProductWithPortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified product with the specified portfolio. A delegated admin is authorized to invoke this command.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - portfolioId: The portfolio identifier.
    ///   - productId: The product identifier.
    ///   - sourcePortfolioId: The identifier of the source portfolio.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateProductWithPortfolio(
        acceptLanguage: String? = nil,
        portfolioId: String,
        productId: String,
        sourcePortfolioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateProductWithPortfolioOutput {
        let input = AssociateProductWithPortfolioInput(
            acceptLanguage: acceptLanguage, 
            portfolioId: portfolioId, 
            productId: productId, 
            sourcePortfolioId: sourcePortfolioId
        )
        return try await self.associateProductWithPortfolio(input, logger: logger)
    }

    /// Associates a self-service action with a provisioning artifact.
    @Sendable
    @inlinable
    public func associateServiceActionWithProvisioningArtifact(_ input: AssociateServiceActionWithProvisioningArtifactInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateServiceActionWithProvisioningArtifactOutput {
        try await self.client.execute(
            operation: "AssociateServiceActionWithProvisioningArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a self-service action with a provisioning artifact.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests from the same Amazon Web Services account use the same idempotency token, the same response is returned for each repeated request.
    ///   - productId: The product identifier. For example, prod-abcdzk7xy33qa.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
    ///   - serviceActionId: The self-service action identifier. For example, act-fs7abcd89wxyz.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateServiceActionWithProvisioningArtifact(
        acceptLanguage: String? = nil,
        idempotencyToken: String? = AssociateServiceActionWithProvisioningArtifactInput.idempotencyToken(),
        productId: String,
        provisioningArtifactId: String,
        serviceActionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateServiceActionWithProvisioningArtifactOutput {
        let input = AssociateServiceActionWithProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            idempotencyToken: idempotencyToken, 
            productId: productId, 
            provisioningArtifactId: provisioningArtifactId, 
            serviceActionId: serviceActionId
        )
        return try await self.associateServiceActionWithProvisioningArtifact(input, logger: logger)
    }

    /// Associate the specified TagOption with the specified portfolio or product.
    @Sendable
    @inlinable
    public func associateTagOptionWithResource(_ input: AssociateTagOptionWithResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateTagOptionWithResourceOutput {
        try await self.client.execute(
            operation: "AssociateTagOptionWithResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associate the specified TagOption with the specified portfolio or product.
    ///
    /// Parameters:
    ///   - resourceId: The resource identifier.
    ///   - tagOptionId: The TagOption identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateTagOptionWithResource(
        resourceId: String,
        tagOptionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateTagOptionWithResourceOutput {
        let input = AssociateTagOptionWithResourceInput(
            resourceId: resourceId, 
            tagOptionId: tagOptionId
        )
        return try await self.associateTagOptionWithResource(input, logger: logger)
    }

    /// Associates multiple self-service actions with provisioning artifacts.
    @Sendable
    @inlinable
    public func batchAssociateServiceActionWithProvisioningArtifact(_ input: BatchAssociateServiceActionWithProvisioningArtifactInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchAssociateServiceActionWithProvisioningArtifactOutput {
        try await self.client.execute(
            operation: "BatchAssociateServiceActionWithProvisioningArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates multiple self-service actions with provisioning artifacts.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - serviceActionAssociations: One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchAssociateServiceActionWithProvisioningArtifact(
        acceptLanguage: String? = nil,
        serviceActionAssociations: [ServiceActionAssociation],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchAssociateServiceActionWithProvisioningArtifactOutput {
        let input = BatchAssociateServiceActionWithProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            serviceActionAssociations: serviceActionAssociations
        )
        return try await self.batchAssociateServiceActionWithProvisioningArtifact(input, logger: logger)
    }

    /// Disassociates a batch of self-service actions from the specified provisioning artifact.
    @Sendable
    @inlinable
    public func batchDisassociateServiceActionFromProvisioningArtifact(_ input: BatchDisassociateServiceActionFromProvisioningArtifactInput, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchDisassociateServiceActionFromProvisioningArtifactOutput {
        try await self.client.execute(
            operation: "BatchDisassociateServiceActionFromProvisioningArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a batch of self-service actions from the specified provisioning artifact.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - serviceActionAssociations: One or more associations, each consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchDisassociateServiceActionFromProvisioningArtifact(
        acceptLanguage: String? = nil,
        serviceActionAssociations: [ServiceActionAssociation],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchDisassociateServiceActionFromProvisioningArtifactOutput {
        let input = BatchDisassociateServiceActionFromProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            serviceActionAssociations: serviceActionAssociations
        )
        return try await self.batchDisassociateServiceActionFromProvisioningArtifact(input, logger: logger)
    }

    /// Copies the specified source product to the specified target product or a new product. You can copy a product to the same account or another account. You can copy a product to the same Region or another Region. If you copy a product to another account, you must first share the product in a portfolio using CreatePortfolioShare. This operation is performed asynchronously. To track the progress of the operation, use DescribeCopyProductStatus.
    @Sendable
    @inlinable
    public func copyProduct(_ input: CopyProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyProductOutput {
        try await self.client.execute(
            operation: "CopyProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Copies the specified source product to the specified target product or a new product. You can copy a product to the same account or another account. You can copy a product to the same Region or another Region. If you copy a product to another account, you must first share the product in a portfolio using CreatePortfolioShare. This operation is performed asynchronously. To track the progress of the operation, use DescribeCopyProductStatus.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - copyOptions: The copy options. If the value is CopyTags, the tags from the source product are copied to the target product.
    ///   - idempotencyToken:  A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
    ///   - sourceProductArn: The Amazon Resource Name (ARN) of the source product.
    ///   - sourceProvisioningArtifactIdentifiers: The identifiers of the provisioning artifacts (also known as versions) of the product to copy.  By default, all provisioning artifacts are copied.
    ///   - targetProductId: The identifier of the target product. By default, a new product is created.
    ///   - targetProductName: A name for the target product. The default is the name of the source product.
    ///   - logger: Logger use during operation
    @inlinable
    public func copyProduct(
        acceptLanguage: String? = nil,
        copyOptions: [CopyOption]? = nil,
        idempotencyToken: String = CopyProductInput.idempotencyToken(),
        sourceProductArn: String,
        sourceProvisioningArtifactIdentifiers: [[ProvisioningArtifactPropertyName: String]]? = nil,
        targetProductId: String? = nil,
        targetProductName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopyProductOutput {
        let input = CopyProductInput(
            acceptLanguage: acceptLanguage, 
            copyOptions: copyOptions, 
            idempotencyToken: idempotencyToken, 
            sourceProductArn: sourceProductArn, 
            sourceProvisioningArtifactIdentifiers: sourceProvisioningArtifactIdentifiers, 
            targetProductId: targetProductId, 
            targetProductName: targetProductName
        )
        return try await self.copyProduct(input, logger: logger)
    }

    /// Creates a constraint. A delegated admin is authorized to invoke this command.
    @Sendable
    @inlinable
    public func createConstraint(_ input: CreateConstraintInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateConstraintOutput {
        try await self.client.execute(
            operation: "CreateConstraint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a constraint. A delegated admin is authorized to invoke this command.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - description: The description of the constraint.
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
    ///   - parameters: The constraint parameters, in JSON format. The syntax depends on the constraint type as follows:  LAUNCH  You are required to specify either the RoleArn or the LocalRoleName but can't use both. Specify the RoleArn property as follows:  {"RoleArn" : "arn:aws:iam::123456789012:role/LaunchRole"}  Specify the LocalRoleName property as follows:  {"LocalRoleName": "SCBasicLaunchRole"}  If you specify the LocalRoleName property, when an account uses the launch constraint, the IAM role with that name in the account will be used. This allows launch-role constraints to be  account-agnostic so the administrator can create fewer resources per shared account.  The given role name must exist in the account used to create the launch constraint and the account of the user who launches a product with this launch constraint.  You cannot have both a LAUNCH and a STACKSET constraint. You also cannot have more than one LAUNCH constraint on a product and portfolio.  NOTIFICATION  Specify the NotificationArns property as follows:  {"NotificationArns" : ["arn:aws:sns:us-east-1:123456789012:Topic"]}   RESOURCE_UPDATE  Specify the TagUpdatesOnProvisionedProduct property as follows:  {"Version":"2.0","Properties":{"TagUpdateOnProvisionedProduct":"String"}}  The TagUpdatesOnProvisionedProduct property accepts a string value of ALLOWED or NOT_ALLOWED.  STACKSET  Specify the Parameters property as follows:  {"Version": "String", "Properties": {"AccountList": [ "String" ], "RegionList": [ "String" ], "AdminRole": "String", "ExecutionRole": "String"}}  You cannot have both a LAUNCH and a STACKSET constraint. You also cannot have more than one STACKSET constraint on a product and portfolio. Products with a STACKSET constraint will launch an CloudFormation stack set.  TEMPLATE  Specify the Rules property. For more information, see Template Constraint Rules.
    ///   - portfolioId: The portfolio identifier.
    ///   - productId: The product identifier.
    ///   - type: The type of constraint.    LAUNCH     NOTIFICATION     RESOURCE_UPDATE     STACKSET     TEMPLATE
    ///   - logger: Logger use during operation
    @inlinable
    public func createConstraint(
        acceptLanguage: String? = nil,
        description: String? = nil,
        idempotencyToken: String = CreateConstraintInput.idempotencyToken(),
        parameters: String,
        portfolioId: String,
        productId: String,
        type: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateConstraintOutput {
        let input = CreateConstraintInput(
            acceptLanguage: acceptLanguage, 
            description: description, 
            idempotencyToken: idempotencyToken, 
            parameters: parameters, 
            portfolioId: portfolioId, 
            productId: productId, 
            type: type
        )
        return try await self.createConstraint(input, logger: logger)
    }

    /// Creates a portfolio. A delegated admin is authorized to invoke this command.
    @Sendable
    @inlinable
    public func createPortfolio(_ input: CreatePortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePortfolioOutput {
        try await self.client.execute(
            operation: "CreatePortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a portfolio. A delegated admin is authorized to invoke this command.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - description: The description of the portfolio.
    ///   - displayName: The name to use for display purposes.
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
    ///   - providerName: The name of the portfolio provider.
    ///   - tags: One or more tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPortfolio(
        acceptLanguage: String? = nil,
        description: String? = nil,
        displayName: String,
        idempotencyToken: String = CreatePortfolioInput.idempotencyToken(),
        providerName: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePortfolioOutput {
        let input = CreatePortfolioInput(
            acceptLanguage: acceptLanguage, 
            description: description, 
            displayName: displayName, 
            idempotencyToken: idempotencyToken, 
            providerName: providerName, 
            tags: tags
        )
        return try await self.createPortfolio(input, logger: logger)
    }

    /// Shares the specified portfolio with the specified account or organization node. Shares to an organization node can only be created by the management account of an organization or by a delegated administrator. You can share portfolios to an organization, an organizational unit, or a specific account. Note that if a delegated admin is de-registered, they can no longer create portfolio shares.  AWSOrganizationsAccess must be enabled in order to create a portfolio share to an organization node. You can't share a shared resource, including portfolios that contain a shared product. If the portfolio share with the specified account or organization node already exists, this action will have no effect  and will not return an error. To update an existing share, you must use the  UpdatePortfolioShare API instead.   When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is  then shared with other accounts. For a user in a recipient account who is not an Service Catalog Admin,  but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal  name association for the portfolio. Although this user may not know which principal names are associated through  Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then  Service Catalog recommends using PrincipalType as IAM. With this configuration,  the PrincipalARN must already exist in the recipient account before it can be associated.
    @Sendable
    @inlinable
    public func createPortfolioShare(_ input: CreatePortfolioShareInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePortfolioShareOutput {
        try await self.client.execute(
            operation: "CreatePortfolioShare", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Shares the specified portfolio with the specified account or organization node. Shares to an organization node can only be created by the management account of an organization or by a delegated administrator. You can share portfolios to an organization, an organizational unit, or a specific account. Note that if a delegated admin is de-registered, they can no longer create portfolio shares.  AWSOrganizationsAccess must be enabled in order to create a portfolio share to an organization node. You can't share a shared resource, including portfolios that contain a shared product. If the portfolio share with the specified account or organization node already exists, this action will have no effect  and will not return an error. To update an existing share, you must use the  UpdatePortfolioShare API instead.   When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is  then shared with other accounts. For a user in a recipient account who is not an Service Catalog Admin,  but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal  name association for the portfolio. Although this user may not know which principal names are associated through  Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then  Service Catalog recommends using PrincipalType as IAM. With this configuration,  the PrincipalARN must already exist in the recipient account before it can be associated.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - accountId: The Amazon Web Services account ID. For example, 123456789012.
    ///   - organizationNode: The organization node to whom you are going to share. When you pass OrganizationNode, it creates PortfolioShare for all of the Amazon Web Services accounts that are associated to the OrganizationNode.  The output returns a PortfolioShareToken, which enables the administrator to monitor the status of the PortfolioShare creation process.
    ///   - portfolioId: The portfolio identifier.
    ///   - sharePrincipals: This parameter is only supported for portfolios with an OrganizationalNode  Type of ORGANIZATION or ORGANIZATIONAL_UNIT.  Enables or disables Principal sharing when creating the portfolio share. If you do  not provide this flag, principal sharing is disabled.  When you enable Principal Name Sharing for a portfolio share, the share recipient account end users with a principal that matches any of the associated IAM patterns can provision products from the portfolio. Once shared, the share recipient can view associations of PrincipalType:  IAM_PATTERN on their portfolio. You can create the principals in the recipient account before or  after creating the share.
    ///   - shareTagOptions: Enables or disables TagOptions  sharing when creating the portfolio share. If this flag is not  provided, TagOptions sharing is disabled.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPortfolioShare(
        acceptLanguage: String? = nil,
        accountId: String? = nil,
        organizationNode: OrganizationNode? = nil,
        portfolioId: String,
        sharePrincipals: Bool? = nil,
        shareTagOptions: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePortfolioShareOutput {
        let input = CreatePortfolioShareInput(
            acceptLanguage: acceptLanguage, 
            accountId: accountId, 
            organizationNode: organizationNode, 
            portfolioId: portfolioId, 
            sharePrincipals: sharePrincipals, 
            shareTagOptions: shareTagOptions
        )
        return try await self.createPortfolioShare(input, logger: logger)
    }

    /// Creates a product. A delegated admin is authorized to invoke this command. The user or role that performs this operation must have the cloudformation:GetTemplate IAM policy permission. This policy permission is required when using the ImportFromPhysicalId template source in the information data section.
    @Sendable
    @inlinable
    public func createProduct(_ input: CreateProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProductOutput {
        try await self.client.execute(
            operation: "CreateProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a product. A delegated admin is authorized to invoke this command. The user or role that performs this operation must have the cloudformation:GetTemplate IAM policy permission. This policy permission is required when using the ImportFromPhysicalId template source in the information data section.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - description: The description of the product.
    ///   - distributor: The distributor of the product.
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
    ///   - name: The name of the product.
    ///   - owner: The owner of the product.
    ///   - productType: The type of product.
    ///   - provisioningArtifactParameters: The configuration of the provisioning artifact.
    ///   - sourceConnection: Specifies connection details for the created product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The SourceConnection parameter consists of the following sub-fields.    Type     ConnectionParamters
    ///   - supportDescription: The support information about the product.
    ///   - supportEmail: The contact email for product support.
    ///   - supportUrl: The contact URL for product support.  ^https?:\/\// / is the pattern used to validate SupportUrl.
    ///   - tags: One or more tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func createProduct(
        acceptLanguage: String? = nil,
        description: String? = nil,
        distributor: String? = nil,
        idempotencyToken: String = CreateProductInput.idempotencyToken(),
        name: String,
        owner: String,
        productType: ProductType,
        provisioningArtifactParameters: ProvisioningArtifactProperties? = nil,
        sourceConnection: SourceConnection? = nil,
        supportDescription: String? = nil,
        supportEmail: String? = nil,
        supportUrl: String? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProductOutput {
        let input = CreateProductInput(
            acceptLanguage: acceptLanguage, 
            description: description, 
            distributor: distributor, 
            idempotencyToken: idempotencyToken, 
            name: name, 
            owner: owner, 
            productType: productType, 
            provisioningArtifactParameters: provisioningArtifactParameters, 
            sourceConnection: sourceConnection, 
            supportDescription: supportDescription, 
            supportEmail: supportEmail, 
            supportUrl: supportUrl, 
            tags: tags
        )
        return try await self.createProduct(input, logger: logger)
    }

    /// Creates a plan. A plan includes the list of resources to be   created (when provisioning a new product) or modified (when updating a provisioned product) when the plan is executed. You can create one plan for each provisioned product. To create a plan for an existing  provisioned product, the product status must be AVAILABLE or TAINTED. To view the resource changes in the change set, use DescribeProvisionedProductPlan. To create or modify the provisioned product, use ExecuteProvisionedProductPlan.
    @Sendable
    @inlinable
    public func createProvisionedProductPlan(_ input: CreateProvisionedProductPlanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProvisionedProductPlanOutput {
        try await self.client.execute(
            operation: "CreateProvisionedProductPlan", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a plan. A plan includes the list of resources to be   created (when provisioning a new product) or modified (when updating a provisioned product) when the plan is executed. You can create one plan for each provisioned product. To create a plan for an existing  provisioned product, the product status must be AVAILABLE or TAINTED. To view the resource changes in the change set, use DescribeProvisionedProductPlan. To create or modify the provisioned product, use ExecuteProvisionedProductPlan.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
    ///   - notificationArns: Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
    ///   - pathId: The path identifier of the product. This value is optional if the product  has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
    ///   - planName: The name of the plan.
    ///   - planType: The plan type.
    ///   - productId: The product identifier.
    ///   - provisionedProductName: A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact.
    ///   - provisioningParameters: Parameters specified by the administrator that are required for provisioning the product.
    ///   - tags: One or more tags. If the plan is for an existing provisioned product, the product must have a RESOURCE_UPDATE constraint with TagUpdatesOnProvisionedProduct set to ALLOWED to allow tag updates.
    ///   - logger: Logger use during operation
    @inlinable
    public func createProvisionedProductPlan(
        acceptLanguage: String? = nil,
        idempotencyToken: String = CreateProvisionedProductPlanInput.idempotencyToken(),
        notificationArns: [String]? = nil,
        pathId: String? = nil,
        planName: String,
        planType: ProvisionedProductPlanType,
        productId: String,
        provisionedProductName: String,
        provisioningArtifactId: String,
        provisioningParameters: [UpdateProvisioningParameter]? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProvisionedProductPlanOutput {
        let input = CreateProvisionedProductPlanInput(
            acceptLanguage: acceptLanguage, 
            idempotencyToken: idempotencyToken, 
            notificationArns: notificationArns, 
            pathId: pathId, 
            planName: planName, 
            planType: planType, 
            productId: productId, 
            provisionedProductName: provisionedProductName, 
            provisioningArtifactId: provisioningArtifactId, 
            provisioningParameters: provisioningParameters, 
            tags: tags
        )
        return try await self.createProvisionedProductPlan(input, logger: logger)
    }

    /// Creates a provisioning artifact (also known as a version) for the specified product. You cannot create a provisioning artifact for a product that was shared with you. The user or role that performs this operation must have the cloudformation:GetTemplate IAM policy permission. This policy permission is required when using the ImportFromPhysicalId template source in the information data section.
    @Sendable
    @inlinable
    public func createProvisioningArtifact(_ input: CreateProvisioningArtifactInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateProvisioningArtifactOutput {
        try await self.client.execute(
            operation: "CreateProvisioningArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a provisioning artifact (also known as a version) for the specified product. You cannot create a provisioning artifact for a product that was shared with you. The user or role that performs this operation must have the cloudformation:GetTemplate IAM policy permission. This policy permission is required when using the ImportFromPhysicalId template source in the information data section.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
    ///   - parameters: The configuration for the provisioning artifact.
    ///   - productId: The product identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func createProvisioningArtifact(
        acceptLanguage: String? = nil,
        idempotencyToken: String = CreateProvisioningArtifactInput.idempotencyToken(),
        parameters: ProvisioningArtifactProperties,
        productId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateProvisioningArtifactOutput {
        let input = CreateProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            idempotencyToken: idempotencyToken, 
            parameters: parameters, 
            productId: productId
        )
        return try await self.createProvisioningArtifact(input, logger: logger)
    }

    /// Creates a self-service action.
    @Sendable
    @inlinable
    public func createServiceAction(_ input: CreateServiceActionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateServiceActionOutput {
        try await self.client.execute(
            operation: "CreateServiceAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a self-service action.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - definition: The self-service action definition. Can be one of the following:  Name  The name of the Amazon Web Services Systems Manager document (SSM document). For example, AWS-RestartEC2Instance. If you are using a shared SSM document, you must provide the ARN instead of the name.  Version  The Amazon Web Services Systems Manager automation document version. For example, "Version": "1"   AssumeRole  The Amazon Resource Name (ARN) of the role that performs the self-service actions on your behalf. For example, "AssumeRole": "arn:aws:iam::12345678910:role/ActionRole". To reuse the provisioned product launch role, set to "AssumeRole": "LAUNCH_ROLE".  Parameters  The list of parameters in JSON format. For example: [{\"Name\":\"InstanceId\",\"Type\":\"TARGET\"}] or [{\"Name\":\"InstanceId\",\"Type\":\"TEXT_VALUE\"}].
    ///   - definitionType: The service action definition type. For example, SSM_AUTOMATION.
    ///   - description: The self-service action description.
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
    ///   - name: The self-service action name.
    ///   - logger: Logger use during operation
    @inlinable
    public func createServiceAction(
        acceptLanguage: String? = nil,
        definition: [ServiceActionDefinitionKey: String],
        definitionType: ServiceActionDefinitionType,
        description: String? = nil,
        idempotencyToken: String = CreateServiceActionInput.idempotencyToken(),
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateServiceActionOutput {
        let input = CreateServiceActionInput(
            acceptLanguage: acceptLanguage, 
            definition: definition, 
            definitionType: definitionType, 
            description: description, 
            idempotencyToken: idempotencyToken, 
            name: name
        )
        return try await self.createServiceAction(input, logger: logger)
    }

    /// Creates a TagOption.
    @Sendable
    @inlinable
    public func createTagOption(_ input: CreateTagOptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTagOptionOutput {
        try await self.client.execute(
            operation: "CreateTagOption", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a TagOption.
    ///
    /// Parameters:
    ///   - key: The TagOption key.
    ///   - value: The TagOption value.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTagOption(
        key: String,
        value: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTagOptionOutput {
        let input = CreateTagOptionInput(
            key: key, 
            value: value
        )
        return try await self.createTagOption(input, logger: logger)
    }

    /// Deletes the specified constraint. A delegated admin is authorized to invoke this command.
    @Sendable
    @inlinable
    public func deleteConstraint(_ input: DeleteConstraintInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteConstraintOutput {
        try await self.client.execute(
            operation: "DeleteConstraint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified constraint. A delegated admin is authorized to invoke this command.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The identifier of the constraint.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConstraint(
        acceptLanguage: String? = nil,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteConstraintOutput {
        let input = DeleteConstraintInput(
            acceptLanguage: acceptLanguage, 
            id: id
        )
        return try await self.deleteConstraint(input, logger: logger)
    }

    /// Deletes the specified portfolio. You cannot delete a portfolio if it was shared with you or if it has associated  products, users, constraints, or shared accounts. A delegated admin is authorized to invoke this command.
    @Sendable
    @inlinable
    public func deletePortfolio(_ input: DeletePortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePortfolioOutput {
        try await self.client.execute(
            operation: "DeletePortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified portfolio. You cannot delete a portfolio if it was shared with you or if it has associated  products, users, constraints, or shared accounts. A delegated admin is authorized to invoke this command.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The portfolio identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePortfolio(
        acceptLanguage: String? = nil,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeletePortfolioOutput {
        let input = DeletePortfolioInput(
            acceptLanguage: acceptLanguage, 
            id: id
        )
        return try await self.deletePortfolio(input, logger: logger)
    }

    /// Stops sharing the specified portfolio with the specified account or organization node. Shares to an organization node can only be deleted by the management account of an organization or by a delegated administrator. Note that if a delegated admin is de-registered, portfolio shares created from that account are removed.
    @Sendable
    @inlinable
    public func deletePortfolioShare(_ input: DeletePortfolioShareInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePortfolioShareOutput {
        try await self.client.execute(
            operation: "DeletePortfolioShare", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops sharing the specified portfolio with the specified account or organization node. Shares to an organization node can only be deleted by the management account of an organization or by a delegated administrator. Note that if a delegated admin is de-registered, portfolio shares created from that account are removed.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - accountId: The Amazon Web Services account ID.
    ///   - organizationNode: The organization node to whom you are going to stop sharing.
    ///   - portfolioId: The portfolio identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePortfolioShare(
        acceptLanguage: String? = nil,
        accountId: String? = nil,
        organizationNode: OrganizationNode? = nil,
        portfolioId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeletePortfolioShareOutput {
        let input = DeletePortfolioShareInput(
            acceptLanguage: acceptLanguage, 
            accountId: accountId, 
            organizationNode: organizationNode, 
            portfolioId: portfolioId
        )
        return try await self.deletePortfolioShare(input, logger: logger)
    }

    /// Deletes the specified product. You cannot delete a product if it was shared with you or is associated with a portfolio. A delegated admin is authorized to invoke this command.
    @Sendable
    @inlinable
    public func deleteProduct(_ input: DeleteProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProductOutput {
        try await self.client.execute(
            operation: "DeleteProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified product. You cannot delete a product if it was shared with you or is associated with a portfolio. A delegated admin is authorized to invoke this command.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The product identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProduct(
        acceptLanguage: String? = nil,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProductOutput {
        let input = DeleteProductInput(
            acceptLanguage: acceptLanguage, 
            id: id
        )
        return try await self.deleteProduct(input, logger: logger)
    }

    /// Deletes the specified plan.
    @Sendable
    @inlinable
    public func deleteProvisionedProductPlan(_ input: DeleteProvisionedProductPlanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProvisionedProductPlanOutput {
        try await self.client.execute(
            operation: "DeleteProvisionedProductPlan", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified plan.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - ignoreErrors: If set to true, Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources.
    ///   - planId: The plan identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProvisionedProductPlan(
        acceptLanguage: String? = nil,
        ignoreErrors: Bool? = nil,
        planId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProvisionedProductPlanOutput {
        let input = DeleteProvisionedProductPlanInput(
            acceptLanguage: acceptLanguage, 
            ignoreErrors: ignoreErrors, 
            planId: planId
        )
        return try await self.deleteProvisionedProductPlan(input, logger: logger)
    }

    /// Deletes the specified provisioning artifact (also known as a version) for the specified product. You cannot delete a provisioning artifact associated with a product that was shared with you.  You cannot delete the last provisioning artifact for a product, because a product must have at  least one provisioning artifact.
    @Sendable
    @inlinable
    public func deleteProvisioningArtifact(_ input: DeleteProvisioningArtifactInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteProvisioningArtifactOutput {
        try await self.client.execute(
            operation: "DeleteProvisioningArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified provisioning artifact (also known as a version) for the specified product. You cannot delete a provisioning artifact associated with a product that was shared with you.  You cannot delete the last provisioning artifact for a product, because a product must have at  least one provisioning artifact.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - productId: The product identifier.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProvisioningArtifact(
        acceptLanguage: String? = nil,
        productId: String,
        provisioningArtifactId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteProvisioningArtifactOutput {
        let input = DeleteProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            productId: productId, 
            provisioningArtifactId: provisioningArtifactId
        )
        return try await self.deleteProvisioningArtifact(input, logger: logger)
    }

    /// Deletes a self-service action.
    @Sendable
    @inlinable
    public func deleteServiceAction(_ input: DeleteServiceActionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteServiceActionOutput {
        try await self.client.execute(
            operation: "DeleteServiceAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a self-service action.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The self-service action identifier. For example, act-fs7abcd89wxyz.
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests from the same Amazon Web Services account use the same idempotency token, the same response is returned for each repeated request.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteServiceAction(
        acceptLanguage: String? = nil,
        id: String,
        idempotencyToken: String? = DeleteServiceActionInput.idempotencyToken(),
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteServiceActionOutput {
        let input = DeleteServiceActionInput(
            acceptLanguage: acceptLanguage, 
            id: id, 
            idempotencyToken: idempotencyToken
        )
        return try await self.deleteServiceAction(input, logger: logger)
    }

    /// Deletes the specified TagOption. You cannot delete a TagOption if it is associated with a product or portfolio.
    @Sendable
    @inlinable
    public func deleteTagOption(_ input: DeleteTagOptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTagOptionOutput {
        try await self.client.execute(
            operation: "DeleteTagOption", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified TagOption. You cannot delete a TagOption if it is associated with a product or portfolio.
    ///
    /// Parameters:
    ///   - id: The TagOption identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTagOption(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTagOptionOutput {
        let input = DeleteTagOptionInput(
            id: id
        )
        return try await self.deleteTagOption(input, logger: logger)
    }

    /// Gets information about the specified constraint.
    @Sendable
    @inlinable
    public func describeConstraint(_ input: DescribeConstraintInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConstraintOutput {
        try await self.client.execute(
            operation: "DescribeConstraint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the specified constraint.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The identifier of the constraint.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConstraint(
        acceptLanguage: String? = nil,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConstraintOutput {
        let input = DescribeConstraintInput(
            acceptLanguage: acceptLanguage, 
            id: id
        )
        return try await self.describeConstraint(input, logger: logger)
    }

    /// Gets the status of the specified copy product operation.
    @Sendable
    @inlinable
    public func describeCopyProductStatus(_ input: DescribeCopyProductStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCopyProductStatusOutput {
        try await self.client.execute(
            operation: "DescribeCopyProductStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the status of the specified copy product operation.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - copyProductToken: The token for the copy product operation. This token is returned by CopyProduct.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCopyProductStatus(
        acceptLanguage: String? = nil,
        copyProductToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCopyProductStatusOutput {
        let input = DescribeCopyProductStatusInput(
            acceptLanguage: acceptLanguage, 
            copyProductToken: copyProductToken
        )
        return try await self.describeCopyProductStatus(input, logger: logger)
    }

    /// Gets information about the specified portfolio. A delegated admin is authorized to invoke this command.
    @Sendable
    @inlinable
    public func describePortfolio(_ input: DescribePortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePortfolioOutput {
        try await self.client.execute(
            operation: "DescribePortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the specified portfolio. A delegated admin is authorized to invoke this command.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The portfolio identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func describePortfolio(
        acceptLanguage: String? = nil,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribePortfolioOutput {
        let input = DescribePortfolioInput(
            acceptLanguage: acceptLanguage, 
            id: id
        )
        return try await self.describePortfolio(input, logger: logger)
    }

    /// Gets the status of the specified portfolio share operation. This API can only be called by the management account in the organization or by a delegated admin.
    @Sendable
    @inlinable
    public func describePortfolioShareStatus(_ input: DescribePortfolioShareStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePortfolioShareStatusOutput {
        try await self.client.execute(
            operation: "DescribePortfolioShareStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the status of the specified portfolio share operation. This API can only be called by the management account in the organization or by a delegated admin.
    ///
    /// Parameters:
    ///   - portfolioShareToken: The token for the portfolio share operation. This token is returned either by CreatePortfolioShare or by DeletePortfolioShare.
    ///   - logger: Logger use during operation
    @inlinable
    public func describePortfolioShareStatus(
        portfolioShareToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribePortfolioShareStatusOutput {
        let input = DescribePortfolioShareStatusInput(
            portfolioShareToken: portfolioShareToken
        )
        return try await self.describePortfolioShareStatus(input, logger: logger)
    }

    /// Returns a summary of each of the portfolio shares that were created for the specified portfolio. You can use this API to determine which accounts or organizational nodes this portfolio have been shared, whether the recipient entity has imported the share, and whether TagOptions are included with the share. The PortfolioId and Type parameters are both required.
    @Sendable
    @inlinable
    public func describePortfolioShares(_ input: DescribePortfolioSharesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePortfolioSharesOutput {
        try await self.client.execute(
            operation: "DescribePortfolioShares", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a summary of each of the portfolio shares that were created for the specified portfolio. You can use this API to determine which accounts or organizational nodes this portfolio have been shared, whether the recipient entity has imported the share, and whether TagOptions are included with the share. The PortfolioId and Type parameters are both required.
    ///
    /// Parameters:
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - portfolioId: The unique identifier of the portfolio for which shares will be retrieved.
    ///   - type: The type of portfolio share to summarize. This field acts as a filter on the type of portfolio share, which can be one of the following: 1. ACCOUNT - Represents an external account to account share. 2. ORGANIZATION - Represents a share to an organization. This share is available to every account in the organization. 3. ORGANIZATIONAL_UNIT - Represents a share to an organizational unit. 4. ORGANIZATION_MEMBER_ACCOUNT - Represents a share to an account in the organization.
    ///   - logger: Logger use during operation
    @inlinable
    public func describePortfolioShares(
        pageSize: Int? = nil,
        pageToken: String? = nil,
        portfolioId: String,
        type: DescribePortfolioShareType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribePortfolioSharesOutput {
        let input = DescribePortfolioSharesInput(
            pageSize: pageSize, 
            pageToken: pageToken, 
            portfolioId: portfolioId, 
            type: type
        )
        return try await self.describePortfolioShares(input, logger: logger)
    }

    /// Gets information about the specified product.   Running this operation  with administrator access  results  in a failure.  DescribeProductAsAdmin should be used instead.
    @Sendable
    @inlinable
    public func describeProduct(_ input: DescribeProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProductOutput {
        try await self.client.execute(
            operation: "DescribeProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the specified product.   Running this operation  with administrator access  results  in a failure.  DescribeProductAsAdmin should be used instead.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The product identifier.
    ///   - name: The product name.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeProduct(
        acceptLanguage: String? = nil,
        id: String? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeProductOutput {
        let input = DescribeProductInput(
            acceptLanguage: acceptLanguage, 
            id: id, 
            name: name
        )
        return try await self.describeProduct(input, logger: logger)
    }

    /// Gets information about the specified product. This operation is run with administrator access.
    @Sendable
    @inlinable
    public func describeProductAsAdmin(_ input: DescribeProductAsAdminInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProductAsAdminOutput {
        try await self.client.execute(
            operation: "DescribeProductAsAdmin", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the specified product. This operation is run with administrator access.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The product identifier.
    ///   - name: The product name.
    ///   - sourcePortfolioId: The unique identifier of the shared portfolio that the specified product is associated with. You can provide this parameter to retrieve the shared TagOptions associated with the product. If this parameter is provided and if TagOptions sharing is enabled in the portfolio share, the API returns both local and shared TagOptions associated with the product. Otherwise only local TagOptions will be returned.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeProductAsAdmin(
        acceptLanguage: String? = nil,
        id: String? = nil,
        name: String? = nil,
        sourcePortfolioId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeProductAsAdminOutput {
        let input = DescribeProductAsAdminInput(
            acceptLanguage: acceptLanguage, 
            id: id, 
            name: name, 
            sourcePortfolioId: sourcePortfolioId
        )
        return try await self.describeProductAsAdmin(input, logger: logger)
    }

    /// Gets information about the specified product.
    @Sendable
    @inlinable
    public func describeProductView(_ input: DescribeProductViewInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProductViewOutput {
        try await self.client.execute(
            operation: "DescribeProductView", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the specified product.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The product view identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeProductView(
        acceptLanguage: String? = nil,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeProductViewOutput {
        let input = DescribeProductViewInput(
            acceptLanguage: acceptLanguage, 
            id: id
        )
        return try await self.describeProductView(input, logger: logger)
    }

    /// Gets information about the specified provisioned product.
    @Sendable
    @inlinable
    public func describeProvisionedProduct(_ input: DescribeProvisionedProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProvisionedProductOutput {
        try await self.client.execute(
            operation: "DescribeProvisionedProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the specified provisioned product.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The provisioned product identifier. You must provide the name or ID, but not both. If you do not provide a name or ID, or you provide both name and ID, an InvalidParametersException will occur.
    ///   - name: The name of the provisioned product. You must provide the name or ID, but not both. If you do not provide a name or ID, or you provide both name and ID, an InvalidParametersException will occur.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeProvisionedProduct(
        acceptLanguage: String? = nil,
        id: String? = nil,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeProvisionedProductOutput {
        let input = DescribeProvisionedProductInput(
            acceptLanguage: acceptLanguage, 
            id: id, 
            name: name
        )
        return try await self.describeProvisionedProduct(input, logger: logger)
    }

    /// Gets information about the resource changes for the specified plan.
    @Sendable
    @inlinable
    public func describeProvisionedProductPlan(_ input: DescribeProvisionedProductPlanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProvisionedProductPlanOutput {
        try await self.client.execute(
            operation: "DescribeProvisionedProductPlan", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the resource changes for the specified plan.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - planId: The plan identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeProvisionedProductPlan(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        planId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeProvisionedProductPlanOutput {
        let input = DescribeProvisionedProductPlanInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            planId: planId
        )
        return try await self.describeProvisionedProductPlan(input, logger: logger)
    }

    /// Gets information about the specified provisioning artifact (also known as a version) for the specified product.
    @Sendable
    @inlinable
    public func describeProvisioningArtifact(_ input: DescribeProvisioningArtifactInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProvisioningArtifactOutput {
        try await self.client.execute(
            operation: "DescribeProvisioningArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the specified provisioning artifact (also known as a version) for the specified product.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - includeProvisioningArtifactParameters: Indicates if the API call response does or does not include additional details about the provisioning parameters.
    ///   - productId: The product identifier.
    ///   - productName: The product name.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact.
    ///   - provisioningArtifactName: The provisioning artifact name.
    ///   - verbose: Indicates whether a verbose level of detail is enabled.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeProvisioningArtifact(
        acceptLanguage: String? = nil,
        includeProvisioningArtifactParameters: Bool? = nil,
        productId: String? = nil,
        productName: String? = nil,
        provisioningArtifactId: String? = nil,
        provisioningArtifactName: String? = nil,
        verbose: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeProvisioningArtifactOutput {
        let input = DescribeProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            includeProvisioningArtifactParameters: includeProvisioningArtifactParameters, 
            productId: productId, 
            productName: productName, 
            provisioningArtifactId: provisioningArtifactId, 
            provisioningArtifactName: provisioningArtifactName, 
            verbose: verbose
        )
        return try await self.describeProvisioningArtifact(input, logger: logger)
    }

    /// Gets information about the configuration required to provision the specified product using the specified provisioning artifact. If the output contains a TagOption key with an empty list of values, there is a TagOption conflict for that key. The end user cannot take action to fix the conflict, and launch is not blocked. In subsequent calls to ProvisionProduct, do not include conflicted TagOption keys as tags, or this causes the error  "Parameter validation failed: Missing required parameter in Tags[N]:Value".  Tag the provisioned product with the value sc-tagoption-conflict-portfolioId-productId.
    @Sendable
    @inlinable
    public func describeProvisioningParameters(_ input: DescribeProvisioningParametersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeProvisioningParametersOutput {
        try await self.client.execute(
            operation: "DescribeProvisioningParameters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the configuration required to provision the specified product using the specified provisioning artifact. If the output contains a TagOption key with an empty list of values, there is a TagOption conflict for that key. The end user cannot take action to fix the conflict, and launch is not blocked. In subsequent calls to ProvisionProduct, do not include conflicted TagOption keys as tags, or this causes the error  "Parameter validation failed: Missing required parameter in Tags[N]:Value".  Tag the provisioned product with the value sc-tagoption-conflict-portfolioId-productId.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pathId: The path identifier of the product. This value is optional if the product  has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths. You must provide the name or ID, but not both.
    ///   - pathName: The name of the path. You must provide the name or ID, but not both.
    ///   - productId: The product identifier. You must provide the product name or ID, but not both.
    ///   - productName: The name of the product. You must provide the name or ID, but not both.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact. You must provide the name or ID, but not both.
    ///   - provisioningArtifactName: The name of the provisioning artifact. You must provide the name or ID, but not both.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeProvisioningParameters(
        acceptLanguage: String? = nil,
        pathId: String? = nil,
        pathName: String? = nil,
        productId: String? = nil,
        productName: String? = nil,
        provisioningArtifactId: String? = nil,
        provisioningArtifactName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeProvisioningParametersOutput {
        let input = DescribeProvisioningParametersInput(
            acceptLanguage: acceptLanguage, 
            pathId: pathId, 
            pathName: pathName, 
            productId: productId, 
            productName: productName, 
            provisioningArtifactId: provisioningArtifactId, 
            provisioningArtifactName: provisioningArtifactName
        )
        return try await self.describeProvisioningParameters(input, logger: logger)
    }

    /// Gets information about the specified request operation. Use this operation after calling a request operation (for example, ProvisionProduct,  TerminateProvisionedProduct, or UpdateProvisionedProduct).   If a provisioned product was transferred to a new owner using UpdateProvisionedProductProperties, the new owner  will be able to describe all past records for that product. The previous owner will no longer be able to describe the records, but will be able to  use ListRecordHistory to see the product's history from when he was the owner.
    @Sendable
    @inlinable
    public func describeRecord(_ input: DescribeRecordInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRecordOutput {
        try await self.client.execute(
            operation: "DescribeRecord", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the specified request operation. Use this operation after calling a request operation (for example, ProvisionProduct,  TerminateProvisionedProduct, or UpdateProvisionedProduct).   If a provisioned product was transferred to a new owner using UpdateProvisionedProductProperties, the new owner  will be able to describe all past records for that product. The previous owner will no longer be able to describe the records, but will be able to  use ListRecordHistory to see the product's history from when he was the owner.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The record identifier of the provisioned product. This identifier is returned by the request operation.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRecord(
        acceptLanguage: String? = nil,
        id: String,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRecordOutput {
        let input = DescribeRecordInput(
            acceptLanguage: acceptLanguage, 
            id: id, 
            pageSize: pageSize, 
            pageToken: pageToken
        )
        return try await self.describeRecord(input, logger: logger)
    }

    /// Describes a self-service action.
    @Sendable
    @inlinable
    public func describeServiceAction(_ input: DescribeServiceActionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeServiceActionOutput {
        try await self.client.execute(
            operation: "DescribeServiceAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes a self-service action.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - id: The self-service action identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeServiceAction(
        acceptLanguage: String? = nil,
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeServiceActionOutput {
        let input = DescribeServiceActionInput(
            acceptLanguage: acceptLanguage, 
            id: id
        )
        return try await self.describeServiceAction(input, logger: logger)
    }

    /// Finds the default parameters for a specific self-service action on a specific provisioned product and returns a map of the results to the user.
    @Sendable
    @inlinable
    public func describeServiceActionExecutionParameters(_ input: DescribeServiceActionExecutionParametersInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeServiceActionExecutionParametersOutput {
        try await self.client.execute(
            operation: "DescribeServiceActionExecutionParameters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Finds the default parameters for a specific self-service action on a specific provisioned product and returns a map of the results to the user.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - provisionedProductId: The identifier of the provisioned product.
    ///   - serviceActionId: The self-service action identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeServiceActionExecutionParameters(
        acceptLanguage: String? = nil,
        provisionedProductId: String,
        serviceActionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeServiceActionExecutionParametersOutput {
        let input = DescribeServiceActionExecutionParametersInput(
            acceptLanguage: acceptLanguage, 
            provisionedProductId: provisionedProductId, 
            serviceActionId: serviceActionId
        )
        return try await self.describeServiceActionExecutionParameters(input, logger: logger)
    }

    /// Gets information about the specified TagOption.
    @Sendable
    @inlinable
    public func describeTagOption(_ input: DescribeTagOptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTagOptionOutput {
        try await self.client.execute(
            operation: "DescribeTagOption", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the specified TagOption.
    ///
    /// Parameters:
    ///   - id: The TagOption identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTagOption(
        id: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTagOptionOutput {
        let input = DescribeTagOptionInput(
            id: id
        )
        return try await self.describeTagOption(input, logger: logger)
    }

    /// Disable portfolio sharing through the Organizations service. This command will not delete your current shares, but prevents you from creating new shares throughout your organization. Current shares are not kept in sync with your organization structure if the structure changes after calling this API. Only the management account in the organization can call this API. You cannot call this API if there are active delegated administrators in the organization. Note that a delegated administrator is not authorized to invoke DisableAWSOrganizationsAccess.  If you share an Service Catalog portfolio in an organization within  Organizations, and then disable Organizations access for Service Catalog,  the portfolio access permissions will not sync with the latest changes to the organization  structure. Specifically, accounts that you removed from the organization after  disabling Service Catalog access will retain access to the previously shared portfolio.
    @Sendable
    @inlinable
    public func disableAWSOrganizationsAccess(_ input: DisableAWSOrganizationsAccessInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableAWSOrganizationsAccessOutput {
        try await self.client.execute(
            operation: "DisableAWSOrganizationsAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disable portfolio sharing through the Organizations service. This command will not delete your current shares, but prevents you from creating new shares throughout your organization. Current shares are not kept in sync with your organization structure if the structure changes after calling this API. Only the management account in the organization can call this API. You cannot call this API if there are active delegated administrators in the organization. Note that a delegated administrator is not authorized to invoke DisableAWSOrganizationsAccess.  If you share an Service Catalog portfolio in an organization within  Organizations, and then disable Organizations access for Service Catalog,  the portfolio access permissions will not sync with the latest changes to the organization  structure. Specifically, accounts that you removed from the organization after  disabling Service Catalog access will retain access to the previously shared portfolio.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func disableAWSOrganizationsAccess(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableAWSOrganizationsAccessOutput {
        let input = DisableAWSOrganizationsAccessInput(
        )
        return try await self.disableAWSOrganizationsAccess(input, logger: logger)
    }

    /// Disassociates the specified budget from the specified resource.
    @Sendable
    @inlinable
    public func disassociateBudgetFromResource(_ input: DisassociateBudgetFromResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateBudgetFromResourceOutput {
        try await self.client.execute(
            operation: "DisassociateBudgetFromResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified budget from the specified resource.
    ///
    /// Parameters:
    ///   - budgetName: The name of the budget you want to disassociate.
    ///   - resourceId: The resource identifier you want to disassociate from. Either a portfolio-id or a product-id.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateBudgetFromResource(
        budgetName: String,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateBudgetFromResourceOutput {
        let input = DisassociateBudgetFromResourceInput(
            budgetName: budgetName, 
            resourceId: resourceId
        )
        return try await self.disassociateBudgetFromResource(input, logger: logger)
    }

    /// Disassociates a previously associated principal ARN from a specified portfolio. The PrincipalType and PrincipalARN must match the  AssociatePrincipalWithPortfolio call request details. For example, to disassociate an association created with a PrincipalARN of PrincipalType IAM you must use the PrincipalType IAM when calling DisassociatePrincipalFromPortfolio.  For portfolios that have been shared with principal name sharing enabled: after disassociating a principal, share recipient accounts will no longer be able to provision products in this portfolio using a role matching the name  of the associated principal.  For more information, review associate-principal-with-portfolio  in the Amazon Web Services CLI Command Reference.   If you disassociate a principal from a portfolio, with PrincipalType as IAM, the same principal will  still have access to the portfolio if it matches one of the associated principals of type IAM_PATTERN.  To fully remove access for a principal, verify all the associated Principals of type IAM_PATTERN,  and then ensure you disassociate any IAM_PATTERN principals that match the principal  whose access you are removing.
    @Sendable
    @inlinable
    public func disassociatePrincipalFromPortfolio(_ input: DisassociatePrincipalFromPortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociatePrincipalFromPortfolioOutput {
        try await self.client.execute(
            operation: "DisassociatePrincipalFromPortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a previously associated principal ARN from a specified portfolio. The PrincipalType and PrincipalARN must match the  AssociatePrincipalWithPortfolio call request details. For example, to disassociate an association created with a PrincipalARN of PrincipalType IAM you must use the PrincipalType IAM when calling DisassociatePrincipalFromPortfolio.  For portfolios that have been shared with principal name sharing enabled: after disassociating a principal, share recipient accounts will no longer be able to provision products in this portfolio using a role matching the name  of the associated principal.  For more information, review associate-principal-with-portfolio  in the Amazon Web Services CLI Command Reference.   If you disassociate a principal from a portfolio, with PrincipalType as IAM, the same principal will  still have access to the portfolio if it matches one of the associated principals of type IAM_PATTERN.  To fully remove access for a principal, verify all the associated Principals of type IAM_PATTERN,  and then ensure you disassociate any IAM_PATTERN principals that match the principal  whose access you are removing.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - portfolioId: The portfolio identifier.
    ///   - principalARN: The ARN of the principal (user, role, or group). This field allows an ARN with no accountID with or without wildcard characters if  PrincipalType is IAM_PATTERN.
    ///   - principalType: The supported value is IAM if you use a fully defined ARN, or IAM_PATTERN if you specify an IAM ARN with no AccountId, with or without wildcard characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociatePrincipalFromPortfolio(
        acceptLanguage: String? = nil,
        portfolioId: String,
        principalARN: String,
        principalType: PrincipalType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociatePrincipalFromPortfolioOutput {
        let input = DisassociatePrincipalFromPortfolioInput(
            acceptLanguage: acceptLanguage, 
            portfolioId: portfolioId, 
            principalARN: principalARN, 
            principalType: principalType
        )
        return try await self.disassociatePrincipalFromPortfolio(input, logger: logger)
    }

    /// Disassociates the specified product from the specified portfolio.  A delegated admin is authorized to invoke this command.
    @Sendable
    @inlinable
    public func disassociateProductFromPortfolio(_ input: DisassociateProductFromPortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateProductFromPortfolioOutput {
        try await self.client.execute(
            operation: "DisassociateProductFromPortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified product from the specified portfolio.  A delegated admin is authorized to invoke this command.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - portfolioId: The portfolio identifier.
    ///   - productId: The product identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateProductFromPortfolio(
        acceptLanguage: String? = nil,
        portfolioId: String,
        productId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateProductFromPortfolioOutput {
        let input = DisassociateProductFromPortfolioInput(
            acceptLanguage: acceptLanguage, 
            portfolioId: portfolioId, 
            productId: productId
        )
        return try await self.disassociateProductFromPortfolio(input, logger: logger)
    }

    /// Disassociates the specified self-service action association from the specified provisioning artifact.
    @Sendable
    @inlinable
    public func disassociateServiceActionFromProvisioningArtifact(_ input: DisassociateServiceActionFromProvisioningArtifactInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateServiceActionFromProvisioningArtifactOutput {
        try await self.client.execute(
            operation: "DisassociateServiceActionFromProvisioningArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified self-service action association from the specified provisioning artifact.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests from the same Amazon Web Services account use the same idempotency token, the same response is returned for each repeated request.
    ///   - productId: The product identifier. For example, prod-abcdzk7xy33qa.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
    ///   - serviceActionId: The self-service action identifier. For example, act-fs7abcd89wxyz.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateServiceActionFromProvisioningArtifact(
        acceptLanguage: String? = nil,
        idempotencyToken: String? = DisassociateServiceActionFromProvisioningArtifactInput.idempotencyToken(),
        productId: String,
        provisioningArtifactId: String,
        serviceActionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateServiceActionFromProvisioningArtifactOutput {
        let input = DisassociateServiceActionFromProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            idempotencyToken: idempotencyToken, 
            productId: productId, 
            provisioningArtifactId: provisioningArtifactId, 
            serviceActionId: serviceActionId
        )
        return try await self.disassociateServiceActionFromProvisioningArtifact(input, logger: logger)
    }

    /// Disassociates the specified TagOption from the specified resource.
    @Sendable
    @inlinable
    public func disassociateTagOptionFromResource(_ input: DisassociateTagOptionFromResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateTagOptionFromResourceOutput {
        try await self.client.execute(
            operation: "DisassociateTagOptionFromResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified TagOption from the specified resource.
    ///
    /// Parameters:
    ///   - resourceId: The resource identifier.
    ///   - tagOptionId: The TagOption identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateTagOptionFromResource(
        resourceId: String,
        tagOptionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateTagOptionFromResourceOutput {
        let input = DisassociateTagOptionFromResourceInput(
            resourceId: resourceId, 
            tagOptionId: tagOptionId
        )
        return try await self.disassociateTagOptionFromResource(input, logger: logger)
    }

    /// Enable portfolio sharing feature through Organizations. This API will allow Service Catalog to receive updates on your organization in order to sync your shares with the current structure. This API can only be called by the management account in the organization. When you call this API, Service Catalog calls organizations:EnableAWSServiceAccess on your behalf so that your shares stay in sync with any changes in your Organizations structure. Note that a delegated administrator is not authorized to invoke EnableAWSOrganizationsAccess.  If you have previously disabled Organizations access for Service Catalog, and then  enable access again, the portfolio access permissions might not sync with the latest changes to  the organization structure. Specifically, accounts that you removed from the organization after  disabling Service Catalog access, and before you enabled access again, can retain access to the  previously shared portfolio. As a result, an account that has been removed from the organization  might still be able to create or manage Amazon Web Services resources when it is no longer  authorized to do so. Amazon Web Services is working to resolve this issue.
    @Sendable
    @inlinable
    public func enableAWSOrganizationsAccess(_ input: EnableAWSOrganizationsAccessInput, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableAWSOrganizationsAccessOutput {
        try await self.client.execute(
            operation: "EnableAWSOrganizationsAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enable portfolio sharing feature through Organizations. This API will allow Service Catalog to receive updates on your organization in order to sync your shares with the current structure. This API can only be called by the management account in the organization. When you call this API, Service Catalog calls organizations:EnableAWSServiceAccess on your behalf so that your shares stay in sync with any changes in your Organizations structure. Note that a delegated administrator is not authorized to invoke EnableAWSOrganizationsAccess.  If you have previously disabled Organizations access for Service Catalog, and then  enable access again, the portfolio access permissions might not sync with the latest changes to  the organization structure. Specifically, accounts that you removed from the organization after  disabling Service Catalog access, and before you enabled access again, can retain access to the  previously shared portfolio. As a result, an account that has been removed from the organization  might still be able to create or manage Amazon Web Services resources when it is no longer  authorized to do so. Amazon Web Services is working to resolve this issue.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func enableAWSOrganizationsAccess(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableAWSOrganizationsAccessOutput {
        let input = EnableAWSOrganizationsAccessInput(
        )
        return try await self.enableAWSOrganizationsAccess(input, logger: logger)
    }

    /// Provisions or modifies a product based on the resource changes for the specified plan.
    @Sendable
    @inlinable
    public func executeProvisionedProductPlan(_ input: ExecuteProvisionedProductPlanInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteProvisionedProductPlanOutput {
        try await self.client.execute(
            operation: "ExecuteProvisionedProductPlan", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provisions or modifies a product based on the resource changes for the specified plan.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
    ///   - planId: The plan identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func executeProvisionedProductPlan(
        acceptLanguage: String? = nil,
        idempotencyToken: String = ExecuteProvisionedProductPlanInput.idempotencyToken(),
        planId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExecuteProvisionedProductPlanOutput {
        let input = ExecuteProvisionedProductPlanInput(
            acceptLanguage: acceptLanguage, 
            idempotencyToken: idempotencyToken, 
            planId: planId
        )
        return try await self.executeProvisionedProductPlan(input, logger: logger)
    }

    /// Executes a self-service action against a provisioned product.
    @Sendable
    @inlinable
    public func executeProvisionedProductServiceAction(_ input: ExecuteProvisionedProductServiceActionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteProvisionedProductServiceActionOutput {
        try await self.client.execute(
            operation: "ExecuteProvisionedProductServiceAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Executes a self-service action against a provisioned product.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - executeToken: An idempotency token that uniquely identifies the execute request.
    ///   - parameters: A map of all self-service action parameters and their values. If a provided parameter is of a special type, such as TARGET, the provided value will  override the default value generated by Service Catalog. If the parameters field is not provided, no additional parameters are passed and default values will be used for  any special parameters such as TARGET.
    ///   - provisionedProductId: The identifier of the provisioned product.
    ///   - serviceActionId: The self-service action identifier. For example, act-fs7abcd89wxyz.
    ///   - logger: Logger use during operation
    @inlinable
    public func executeProvisionedProductServiceAction(
        acceptLanguage: String? = nil,
        executeToken: String = ExecuteProvisionedProductServiceActionInput.idempotencyToken(),
        parameters: [String: [String]]? = nil,
        provisionedProductId: String,
        serviceActionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExecuteProvisionedProductServiceActionOutput {
        let input = ExecuteProvisionedProductServiceActionInput(
            acceptLanguage: acceptLanguage, 
            executeToken: executeToken, 
            parameters: parameters, 
            provisionedProductId: provisionedProductId, 
            serviceActionId: serviceActionId
        )
        return try await self.executeProvisionedProductServiceAction(input, logger: logger)
    }

    /// Get the Access Status for Organizations portfolio share feature. This API can only be called by the management account in the organization or by a delegated admin.
    @Sendable
    @inlinable
    public func getAWSOrganizationsAccessStatus(_ input: GetAWSOrganizationsAccessStatusInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAWSOrganizationsAccessStatusOutput {
        try await self.client.execute(
            operation: "GetAWSOrganizationsAccessStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the Access Status for Organizations portfolio share feature. This API can only be called by the management account in the organization or by a delegated admin.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getAWSOrganizationsAccessStatus(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAWSOrganizationsAccessStatusOutput {
        let input = GetAWSOrganizationsAccessStatusInput(
        )
        return try await self.getAWSOrganizationsAccessStatus(input, logger: logger)
    }

    /// This API takes either a ProvisonedProductId or a ProvisionedProductName, along with a list of one or more output keys, and responds with the key/value pairs of those outputs.
    @Sendable
    @inlinable
    public func getProvisionedProductOutputs(_ input: GetProvisionedProductOutputsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProvisionedProductOutputsOutput {
        try await self.client.execute(
            operation: "GetProvisionedProductOutputs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// This API takes either a ProvisonedProductId or a ProvisionedProductName, along with a list of one or more output keys, and responds with the key/value pairs of those outputs.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - outputKeys: The list of keys that the API should return with their values. If none are provided, the API will return all outputs of the provisioned product.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - provisionedProductId: The identifier of the provisioned product that you want the outputs from.
    ///   - provisionedProductName: The name of the provisioned product that you want the outputs from.
    ///   - logger: Logger use during operation
    @inlinable
    public func getProvisionedProductOutputs(
        acceptLanguage: String? = nil,
        outputKeys: [String]? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        provisionedProductId: String? = nil,
        provisionedProductName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetProvisionedProductOutputsOutput {
        let input = GetProvisionedProductOutputsInput(
            acceptLanguage: acceptLanguage, 
            outputKeys: outputKeys, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            provisionedProductId: provisionedProductId, 
            provisionedProductName: provisionedProductName
        )
        return try await self.getProvisionedProductOutputs(input, logger: logger)
    }

    ///  Requests the import of a resource as an Service Catalog provisioned product  that is associated to an Service Catalog product and provisioning artifact.  Once imported, all supported governance actions are supported on the provisioned product.   Resource import only supports CloudFormation stack ARNs. CloudFormation StackSets, and non-root nested stacks, are not supported.   The CloudFormation stack must have one  of the following statuses  to be imported: CREATE_COMPLETE, UPDATE_COMPLETE,  UPDATE_ROLLBACK_COMPLETE, IMPORT_COMPLETE, and  IMPORT_ROLLBACK_COMPLETE.   Import of the resource requires that the CloudFormation stack template matches  the associated Service Catalog product provisioning artifact.    When you import an existing CloudFormation stack  into a portfolio, Service Catalog does not apply the product's associated constraints  during the import process. Service Catalog applies the constraints  after you call UpdateProvisionedProduct for the provisioned product.    The user or role that performs this operation must have the cloudformation:GetTemplate  and cloudformation:DescribeStacks IAM policy permissions.  You can only import one provisioned product at a time. The product's CloudFormation stack must have the  IMPORT_COMPLETE status before you import another.
    @Sendable
    @inlinable
    public func importAsProvisionedProduct(_ input: ImportAsProvisionedProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportAsProvisionedProductOutput {
        try await self.client.execute(
            operation: "ImportAsProvisionedProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Requests the import of a resource as an Service Catalog provisioned product  that is associated to an Service Catalog product and provisioning artifact.  Once imported, all supported governance actions are supported on the provisioned product.   Resource import only supports CloudFormation stack ARNs. CloudFormation StackSets, and non-root nested stacks, are not supported.   The CloudFormation stack must have one  of the following statuses  to be imported: CREATE_COMPLETE, UPDATE_COMPLETE,  UPDATE_ROLLBACK_COMPLETE, IMPORT_COMPLETE, and  IMPORT_ROLLBACK_COMPLETE.   Import of the resource requires that the CloudFormation stack template matches  the associated Service Catalog product provisioning artifact.    When you import an existing CloudFormation stack  into a portfolio, Service Catalog does not apply the product's associated constraints  during the import process. Service Catalog applies the constraints  after you call UpdateProvisionedProduct for the provisioned product.    The user or role that performs this operation must have the cloudformation:GetTemplate  and cloudformation:DescribeStacks IAM policy permissions.  You can only import one provisioned product at a time. The product's CloudFormation stack must have the  IMPORT_COMPLETE status before you import another.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - idempotencyToken: A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
    ///   - physicalId: The unique identifier of the resource to be imported. It only currently supports CloudFormation stack IDs.
    ///   - productId: The product identifier.
    ///   - provisionedProductName: The user-friendly name of the provisioned product. The value must be unique for the Amazon Web Services account.  The name cannot be updated after the product is provisioned.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact.
    ///   - logger: Logger use during operation
    @inlinable
    public func importAsProvisionedProduct(
        acceptLanguage: String? = nil,
        idempotencyToken: String = ImportAsProvisionedProductInput.idempotencyToken(),
        physicalId: String,
        productId: String,
        provisionedProductName: String,
        provisioningArtifactId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportAsProvisionedProductOutput {
        let input = ImportAsProvisionedProductInput(
            acceptLanguage: acceptLanguage, 
            idempotencyToken: idempotencyToken, 
            physicalId: physicalId, 
            productId: productId, 
            provisionedProductName: provisionedProductName, 
            provisioningArtifactId: provisioningArtifactId
        )
        return try await self.importAsProvisionedProduct(input, logger: logger)
    }

    /// Lists all imported portfolios for which account-to-account shares were accepted by this account. By specifying the PortfolioShareType, you can list portfolios for which organizational shares were accepted by this account.
    @Sendable
    @inlinable
    public func listAcceptedPortfolioShares(_ input: ListAcceptedPortfolioSharesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAcceptedPortfolioSharesOutput {
        try await self.client.execute(
            operation: "ListAcceptedPortfolioShares", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all imported portfolios for which account-to-account shares were accepted by this account. By specifying the PortfolioShareType, you can list portfolios for which organizational shares were accepted by this account.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - portfolioShareType: The type of shared portfolios to list. The default is to list imported portfolios.    AWS_ORGANIZATIONS - List portfolios accepted and shared via organizational sharing by the management account or delegated administrator of your organization.    AWS_SERVICECATALOG - Deprecated type.    IMPORTED - List imported portfolios that have been accepted and shared through account-to-account sharing.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAcceptedPortfolioShares(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        portfolioShareType: PortfolioShareType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAcceptedPortfolioSharesOutput {
        let input = ListAcceptedPortfolioSharesInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            portfolioShareType: portfolioShareType
        )
        return try await self.listAcceptedPortfolioShares(input, logger: logger)
    }

    /// Lists all the budgets associated to the specified resource.
    @Sendable
    @inlinable
    public func listBudgetsForResource(_ input: ListBudgetsForResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBudgetsForResourceOutput {
        try await self.client.execute(
            operation: "ListBudgetsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all the budgets associated to the specified resource.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - resourceId: The resource identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func listBudgetsForResource(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListBudgetsForResourceOutput {
        let input = ListBudgetsForResourceInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            resourceId: resourceId
        )
        return try await self.listBudgetsForResource(input, logger: logger)
    }

    /// Lists the constraints for the specified portfolio and product.
    @Sendable
    @inlinable
    public func listConstraintsForPortfolio(_ input: ListConstraintsForPortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConstraintsForPortfolioOutput {
        try await self.client.execute(
            operation: "ListConstraintsForPortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the constraints for the specified portfolio and product.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - portfolioId: The portfolio identifier.
    ///   - productId: The product identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func listConstraintsForPortfolio(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        portfolioId: String,
        productId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListConstraintsForPortfolioOutput {
        let input = ListConstraintsForPortfolioInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            portfolioId: portfolioId, 
            productId: productId
        )
        return try await self.listConstraintsForPortfolio(input, logger: logger)
    }

    ///  Lists the paths  to the specified product.  A path describes how the user gets access  to a specified product and is necessary  when provisioning a product.  A path also determines the constraints  that are put on a product.  A path is dependent  on a specific product, porfolio, and principal.    When provisioning a product  that's been added  to a portfolio,  you must grant your user, group, or role access  to the portfolio.  For more information,  see Granting users access  in the Service Catalog User Guide.
    @Sendable
    @inlinable
    public func listLaunchPaths(_ input: ListLaunchPathsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLaunchPathsOutput {
        try await self.client.execute(
            operation: "ListLaunchPaths", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Lists the paths  to the specified product.  A path describes how the user gets access  to a specified product and is necessary  when provisioning a product.  A path also determines the constraints  that are put on a product.  A path is dependent  on a specific product, porfolio, and principal.    When provisioning a product  that's been added  to a portfolio,  you must grant your user, group, or role access  to the portfolio.  For more information,  see Granting users access  in the Service Catalog User Guide.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - productId: The product identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func listLaunchPaths(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        productId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLaunchPathsOutput {
        let input = ListLaunchPathsInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            productId: productId
        )
        return try await self.listLaunchPaths(input, logger: logger)
    }

    /// Lists the organization nodes that have access to the specified portfolio. This API can only be called by the management account in the organization or by a delegated admin. If a delegated admin is de-registered, they can no longer perform this operation.
    @Sendable
    @inlinable
    public func listOrganizationPortfolioAccess(_ input: ListOrganizationPortfolioAccessInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOrganizationPortfolioAccessOutput {
        try await self.client.execute(
            operation: "ListOrganizationPortfolioAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the organization nodes that have access to the specified portfolio. This API can only be called by the management account in the organization or by a delegated admin. If a delegated admin is de-registered, they can no longer perform this operation.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - organizationNodeType: The organization node type that will be returned in the output.    ORGANIZATION - Organization that has access to the portfolio.     ORGANIZATIONAL_UNIT - Organizational unit that has access to the portfolio within your organization.    ACCOUNT - Account that has access to the portfolio within your organization.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - portfolioId: The portfolio identifier. For example, port-2abcdext3y5fk.
    ///   - logger: Logger use during operation
    @inlinable
    public func listOrganizationPortfolioAccess(
        acceptLanguage: String? = nil,
        organizationNodeType: OrganizationNodeType,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        portfolioId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListOrganizationPortfolioAccessOutput {
        let input = ListOrganizationPortfolioAccessInput(
            acceptLanguage: acceptLanguage, 
            organizationNodeType: organizationNodeType, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            portfolioId: portfolioId
        )
        return try await self.listOrganizationPortfolioAccess(input, logger: logger)
    }

    /// Lists the account IDs that have access to the specified portfolio. A delegated admin can list the accounts that have access to the shared portfolio. Note that if a delegated admin is de-registered, they can no longer perform this operation.
    @Sendable
    @inlinable
    public func listPortfolioAccess(_ input: ListPortfolioAccessInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPortfolioAccessOutput {
        try await self.client.execute(
            operation: "ListPortfolioAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the account IDs that have access to the specified portfolio. A delegated admin can list the accounts that have access to the shared portfolio. Note that if a delegated admin is de-registered, they can no longer perform this operation.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - organizationParentId: The ID of an organization node the portfolio is shared with. All children of this node with an inherited portfolio share will be returned.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - portfolioId: The portfolio identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPortfolioAccess(
        acceptLanguage: String? = nil,
        organizationParentId: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        portfolioId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPortfolioAccessOutput {
        let input = ListPortfolioAccessInput(
            acceptLanguage: acceptLanguage, 
            organizationParentId: organizationParentId, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            portfolioId: portfolioId
        )
        return try await self.listPortfolioAccess(input, logger: logger)
    }

    /// Lists all portfolios in the catalog.
    @Sendable
    @inlinable
    public func listPortfolios(_ input: ListPortfoliosInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPortfoliosOutput {
        try await self.client.execute(
            operation: "ListPortfolios", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all portfolios in the catalog.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPortfolios(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPortfoliosOutput {
        let input = ListPortfoliosInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken
        )
        return try await self.listPortfolios(input, logger: logger)
    }

    /// Lists all portfolios that the specified product is associated with.
    @Sendable
    @inlinable
    public func listPortfoliosForProduct(_ input: ListPortfoliosForProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPortfoliosForProductOutput {
        try await self.client.execute(
            operation: "ListPortfoliosForProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all portfolios that the specified product is associated with.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - productId: The product identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPortfoliosForProduct(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        productId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPortfoliosForProductOutput {
        let input = ListPortfoliosForProductInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            productId: productId
        )
        return try await self.listPortfoliosForProduct(input, logger: logger)
    }

    /// Lists all PrincipalARNs and corresponding PrincipalTypes associated with the specified portfolio.
    @Sendable
    @inlinable
    public func listPrincipalsForPortfolio(_ input: ListPrincipalsForPortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPrincipalsForPortfolioOutput {
        try await self.client.execute(
            operation: "ListPrincipalsForPortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all PrincipalARNs and corresponding PrincipalTypes associated with the specified portfolio.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - portfolioId: The portfolio identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func listPrincipalsForPortfolio(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        portfolioId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListPrincipalsForPortfolioOutput {
        let input = ListPrincipalsForPortfolioInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            portfolioId: portfolioId
        )
        return try await self.listPrincipalsForPortfolio(input, logger: logger)
    }

    /// Lists the plans for the specified provisioned product or all plans to which the user has access.
    @Sendable
    @inlinable
    public func listProvisionedProductPlans(_ input: ListProvisionedProductPlansInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProvisionedProductPlansOutput {
        try await self.client.execute(
            operation: "ListProvisionedProductPlans", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the plans for the specified provisioned product or all plans to which the user has access.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - accessLevelFilter: The access level to use to obtain results. The default is User.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - provisionProductId: The product identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProvisionedProductPlans(
        acceptLanguage: String? = nil,
        accessLevelFilter: AccessLevelFilter? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        provisionProductId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProvisionedProductPlansOutput {
        let input = ListProvisionedProductPlansInput(
            acceptLanguage: acceptLanguage, 
            accessLevelFilter: accessLevelFilter, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            provisionProductId: provisionProductId
        )
        return try await self.listProvisionedProductPlans(input, logger: logger)
    }

    /// Lists all provisioning artifacts (also known as versions) for the specified product.
    @Sendable
    @inlinable
    public func listProvisioningArtifacts(_ input: ListProvisioningArtifactsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProvisioningArtifactsOutput {
        try await self.client.execute(
            operation: "ListProvisioningArtifacts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all provisioning artifacts (also known as versions) for the specified product.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - productId: The product identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProvisioningArtifacts(
        acceptLanguage: String? = nil,
        productId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProvisioningArtifactsOutput {
        let input = ListProvisioningArtifactsInput(
            acceptLanguage: acceptLanguage, 
            productId: productId
        )
        return try await self.listProvisioningArtifacts(input, logger: logger)
    }

    /// Lists all provisioning artifacts (also known as versions) for the specified self-service action.
    @Sendable
    @inlinable
    public func listProvisioningArtifactsForServiceAction(_ input: ListProvisioningArtifactsForServiceActionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProvisioningArtifactsForServiceActionOutput {
        try await self.client.execute(
            operation: "ListProvisioningArtifactsForServiceAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all provisioning artifacts (also known as versions) for the specified self-service action.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - serviceActionId: The self-service action identifier. For example, act-fs7abcd89wxyz.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProvisioningArtifactsForServiceAction(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        serviceActionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProvisioningArtifactsForServiceActionOutput {
        let input = ListProvisioningArtifactsForServiceActionInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            serviceActionId: serviceActionId
        )
        return try await self.listProvisioningArtifactsForServiceAction(input, logger: logger)
    }

    /// Lists the specified requests or all performed requests.
    @Sendable
    @inlinable
    public func listRecordHistory(_ input: ListRecordHistoryInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRecordHistoryOutput {
        try await self.client.execute(
            operation: "ListRecordHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the specified requests or all performed requests.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - accessLevelFilter: The access level to use to obtain results. The default is User.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - searchFilter: The search filter to scope the results.
    ///   - logger: Logger use during operation
    @inlinable
    public func listRecordHistory(
        acceptLanguage: String? = nil,
        accessLevelFilter: AccessLevelFilter? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        searchFilter: ListRecordHistorySearchFilter? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListRecordHistoryOutput {
        let input = ListRecordHistoryInput(
            acceptLanguage: acceptLanguage, 
            accessLevelFilter: accessLevelFilter, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            searchFilter: searchFilter
        )
        return try await self.listRecordHistory(input, logger: logger)
    }

    /// Lists the resources associated with the specified TagOption.
    @Sendable
    @inlinable
    public func listResourcesForTagOption(_ input: ListResourcesForTagOptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourcesForTagOptionOutput {
        try await self.client.execute(
            operation: "ListResourcesForTagOption", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the resources associated with the specified TagOption.
    ///
    /// Parameters:
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - resourceType: The resource type.    Portfolio     Product
    ///   - tagOptionId: The TagOption identifier.
    ///   - logger: Logger use during operation
    @inlinable
    public func listResourcesForTagOption(
        pageSize: Int? = nil,
        pageToken: String? = nil,
        resourceType: String? = nil,
        tagOptionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListResourcesForTagOptionOutput {
        let input = ListResourcesForTagOptionInput(
            pageSize: pageSize, 
            pageToken: pageToken, 
            resourceType: resourceType, 
            tagOptionId: tagOptionId
        )
        return try await self.listResourcesForTagOption(input, logger: logger)
    }

    /// Lists all self-service actions.
    @Sendable
    @inlinable
    public func listServiceActions(_ input: ListServiceActionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceActionsOutput {
        try await self.client.execute(
            operation: "ListServiceActions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists all self-service actions.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - logger: Logger use during operation
    @inlinable
    public func listServiceActions(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListServiceActionsOutput {
        let input = ListServiceActionsInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken
        )
        return try await self.listServiceActions(input, logger: logger)
    }

    /// Returns a paginated list of self-service actions associated with the specified Product ID and Provisioning Artifact ID.
    @Sendable
    @inlinable
    public func listServiceActionsForProvisioningArtifact(_ input: ListServiceActionsForProvisioningArtifactInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListServiceActionsForProvisioningArtifactOutput {
        try await self.client.execute(
            operation: "ListServiceActionsForProvisioningArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a paginated list of self-service actions associated with the specified Product ID and Provisioning Artifact ID.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - productId: The product identifier. For example, prod-abcdzk7xy33qa.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
    ///   - logger: Logger use during operation
    @inlinable
    public func listServiceActionsForProvisioningArtifact(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        productId: String,
        provisioningArtifactId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListServiceActionsForProvisioningArtifactOutput {
        let input = ListServiceActionsForProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            productId: productId, 
            provisioningArtifactId: provisioningArtifactId
        )
        return try await self.listServiceActionsForProvisioningArtifact(input, logger: logger)
    }

    /// Returns summary information about stack instances that are associated with the specified CFN_STACKSET type provisioned product. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region.
    @Sendable
    @inlinable
    public func listStackInstancesForProvisionedProduct(_ input: ListStackInstancesForProvisionedProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStackInstancesForProvisionedProductOutput {
        try await self.client.execute(
            operation: "ListStackInstancesForProvisionedProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns summary information about stack instances that are associated with the specified CFN_STACKSET type provisioned product. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - provisionedProductId: The identifier of the provisioned product.
    ///   - logger: Logger use during operation
    @inlinable
    public func listStackInstancesForProvisionedProduct(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        provisionedProductId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListStackInstancesForProvisionedProductOutput {
        let input = ListStackInstancesForProvisionedProductInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            provisionedProductId: provisionedProductId
        )
        return try await self.listStackInstancesForProvisionedProduct(input, logger: logger)
    }

    /// Lists the specified TagOptions or all TagOptions.
    @Sendable
    @inlinable
    public func listTagOptions(_ input: ListTagOptionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagOptionsOutput {
        try await self.client.execute(
            operation: "ListTagOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the specified TagOptions or all TagOptions.
    ///
    /// Parameters:
    ///   - filters: The search filters. If no search filters are specified, the output includes all TagOptions.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagOptions(
        filters: ListTagOptionsFilters? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagOptionsOutput {
        let input = ListTagOptionsInput(
            filters: filters, 
            pageSize: pageSize, 
            pageToken: pageToken
        )
        return try await self.listTagOptions(input, logger: logger)
    }

    ///  Notifies the result  of the provisioning engine execution.
    @Sendable
    @inlinable
    public func notifyProvisionProductEngineWorkflowResult(_ input: NotifyProvisionProductEngineWorkflowResultInput, logger: Logger = AWSClient.loggingDisabled) async throws -> NotifyProvisionProductEngineWorkflowResultOutput {
        try await self.client.execute(
            operation: "NotifyProvisionProductEngineWorkflowResult", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Notifies the result  of the provisioning engine execution.
    ///
    /// Parameters:
    ///   - failureReason:  The reason  why the provisioning engine execution failed.
    ///   - idempotencyToken:  The idempotency token  that identifies the provisioning engine execution.
    ///   - outputs:  The output  of the provisioning engine execution.
    ///   - recordId:  The identifier  of the record.
    ///   - resourceIdentifier:  The ID  for the provisioned product resources  that are part  of a resource group.
    ///   - status:  The status  of the provisioning engine execution.
    ///   - workflowToken:  The encrypted contents  of the provisioning engine execution payload  that Service Catalog sends  after the Terraform product provisioning workflow starts.
    ///   - logger: Logger use during operation
    @inlinable
    public func notifyProvisionProductEngineWorkflowResult(
        failureReason: String? = nil,
        idempotencyToken: String = NotifyProvisionProductEngineWorkflowResultInput.idempotencyToken(),
        outputs: [RecordOutput]? = nil,
        recordId: String,
        resourceIdentifier: EngineWorkflowResourceIdentifier? = nil,
        status: EngineWorkflowStatus,
        workflowToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> NotifyProvisionProductEngineWorkflowResultOutput {
        let input = NotifyProvisionProductEngineWorkflowResultInput(
            failureReason: failureReason, 
            idempotencyToken: idempotencyToken, 
            outputs: outputs, 
            recordId: recordId, 
            resourceIdentifier: resourceIdentifier, 
            status: status, 
            workflowToken: workflowToken
        )
        return try await self.notifyProvisionProductEngineWorkflowResult(input, logger: logger)
    }

    ///  Notifies the result  of the terminate engine execution.
    @Sendable
    @inlinable
    public func notifyTerminateProvisionedProductEngineWorkflowResult(_ input: NotifyTerminateProvisionedProductEngineWorkflowResultInput, logger: Logger = AWSClient.loggingDisabled) async throws -> NotifyTerminateProvisionedProductEngineWorkflowResultOutput {
        try await self.client.execute(
            operation: "NotifyTerminateProvisionedProductEngineWorkflowResult", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Notifies the result  of the terminate engine execution.
    ///
    /// Parameters:
    ///   - failureReason:  The reason  why the terminate engine execution failed.
    ///   - idempotencyToken:  The idempotency token  that identifies the terminate engine execution.
    ///   - recordId:  The identifier  of the record.
    ///   - status:  The status  of the terminate engine execution.
    ///   - workflowToken:  The encrypted contents  of the terminate engine execution payload  that Service Catalog sends  after the Terraform product terminate workflow starts.
    ///   - logger: Logger use during operation
    @inlinable
    public func notifyTerminateProvisionedProductEngineWorkflowResult(
        failureReason: String? = nil,
        idempotencyToken: String = NotifyTerminateProvisionedProductEngineWorkflowResultInput.idempotencyToken(),
        recordId: String,
        status: EngineWorkflowStatus,
        workflowToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> NotifyTerminateProvisionedProductEngineWorkflowResultOutput {
        let input = NotifyTerminateProvisionedProductEngineWorkflowResultInput(
            failureReason: failureReason, 
            idempotencyToken: idempotencyToken, 
            recordId: recordId, 
            status: status, 
            workflowToken: workflowToken
        )
        return try await self.notifyTerminateProvisionedProductEngineWorkflowResult(input, logger: logger)
    }

    ///  Notifies the result  of the update engine execution.
    @Sendable
    @inlinable
    public func notifyUpdateProvisionedProductEngineWorkflowResult(_ input: NotifyUpdateProvisionedProductEngineWorkflowResultInput, logger: Logger = AWSClient.loggingDisabled) async throws -> NotifyUpdateProvisionedProductEngineWorkflowResultOutput {
        try await self.client.execute(
            operation: "NotifyUpdateProvisionedProductEngineWorkflowResult", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Notifies the result  of the update engine execution.
    ///
    /// Parameters:
    ///   - failureReason:  The reason  why the update engine execution failed.
    ///   - idempotencyToken:  The idempotency token  that identifies the update engine execution.
    ///   - outputs:  The output  of the update engine execution.
    ///   - recordId:  The identifier  of the record.
    ///   - status:  The status  of the update engine execution.
    ///   - workflowToken:  The encrypted contents  of the update engine execution payload  that Service Catalog sends  after the Terraform product update workflow starts.
    ///   - logger: Logger use during operation
    @inlinable
    public func notifyUpdateProvisionedProductEngineWorkflowResult(
        failureReason: String? = nil,
        idempotencyToken: String = NotifyUpdateProvisionedProductEngineWorkflowResultInput.idempotencyToken(),
        outputs: [RecordOutput]? = nil,
        recordId: String,
        status: EngineWorkflowStatus,
        workflowToken: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> NotifyUpdateProvisionedProductEngineWorkflowResultOutput {
        let input = NotifyUpdateProvisionedProductEngineWorkflowResultInput(
            failureReason: failureReason, 
            idempotencyToken: idempotencyToken, 
            outputs: outputs, 
            recordId: recordId, 
            status: status, 
            workflowToken: workflowToken
        )
        return try await self.notifyUpdateProvisionedProductEngineWorkflowResult(input, logger: logger)
    }

    ///  Provisions the specified product.   A provisioned product is a resourced instance  of a product.  For example,  provisioning a product  that's based  on an CloudFormation template  launches an CloudFormation stack and its underlying resources. You can check the status  of this request  using DescribeRecord.   If the request contains a tag key  with an empty list  of values,  there's a tag conflict  for that key.  Don't include conflicted keys  as tags,  or this will cause the error "Parameter validation failed: Missing required parameter in Tags[N]:Value".    When provisioning a product  that's been added  to a portfolio,  you must grant your user, group, or role access  to the portfolio.  For more information,  see Granting users access  in the Service Catalog User Guide.
    @Sendable
    @inlinable
    public func provisionProduct(_ input: ProvisionProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ProvisionProductOutput {
        try await self.client.execute(
            operation: "ProvisionProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Provisions the specified product.   A provisioned product is a resourced instance  of a product.  For example,  provisioning a product  that's based  on an CloudFormation template  launches an CloudFormation stack and its underlying resources. You can check the status  of this request  using DescribeRecord.   If the request contains a tag key  with an empty list  of values,  there's a tag conflict  for that key.  Don't include conflicted keys  as tags,  or this will cause the error "Parameter validation failed: Missing required parameter in Tags[N]:Value".    When provisioning a product  that's been added  to a portfolio,  you must grant your user, group, or role access  to the portfolio.  For more information,  see Granting users access  in the Service Catalog User Guide.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - notificationArns: Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
    ///   - pathId: The path identifier of the product. This value is optional if the product  has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths. You must provide the name or ID, but not both.
    ///   - pathName: The name of the path. You must provide the name or ID, but not both.
    ///   - productId: The product identifier. You must provide the name or ID, but not both.
    ///   - productName: The name of the product. You must provide the name or ID, but not both.
    ///   - provisionedProductName: A user-friendly name for the provisioned product. This value must be unique for the Amazon Web Services account and cannot be updated after the product is provisioned.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact. You must provide the name or ID, but not both.
    ///   - provisioningArtifactName: The name of the provisioning artifact. You must provide the name or ID, but not both.
    ///   - provisioningParameters: Parameters specified by the administrator that are required for provisioning the product.
    ///   - provisioningPreferences: An object that contains information about the provisioning preferences for a stack set.
    ///   - provisionToken: An idempotency token that uniquely identifies the provisioning request.
    ///   - tags: One or more tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func provisionProduct(
        acceptLanguage: String? = nil,
        notificationArns: [String]? = nil,
        pathId: String? = nil,
        pathName: String? = nil,
        productId: String? = nil,
        productName: String? = nil,
        provisionedProductName: String,
        provisioningArtifactId: String? = nil,
        provisioningArtifactName: String? = nil,
        provisioningParameters: [ProvisioningParameter]? = nil,
        provisioningPreferences: ProvisioningPreferences? = nil,
        provisionToken: String = ProvisionProductInput.idempotencyToken(),
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ProvisionProductOutput {
        let input = ProvisionProductInput(
            acceptLanguage: acceptLanguage, 
            notificationArns: notificationArns, 
            pathId: pathId, 
            pathName: pathName, 
            productId: productId, 
            productName: productName, 
            provisionedProductName: provisionedProductName, 
            provisioningArtifactId: provisioningArtifactId, 
            provisioningArtifactName: provisioningArtifactName, 
            provisioningParameters: provisioningParameters, 
            provisioningPreferences: provisioningPreferences, 
            provisionToken: provisionToken, 
            tags: tags
        )
        return try await self.provisionProduct(input, logger: logger)
    }

    /// Rejects an offer to share the specified portfolio.
    @Sendable
    @inlinable
    public func rejectPortfolioShare(_ input: RejectPortfolioShareInput, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectPortfolioShareOutput {
        try await self.client.execute(
            operation: "RejectPortfolioShare", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects an offer to share the specified portfolio.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - portfolioId: The portfolio identifier.
    ///   - portfolioShareType: The type of shared portfolios to reject. The default is to reject imported portfolios.    AWS_ORGANIZATIONS - Reject portfolios shared by the management account of your organization.    IMPORTED - Reject imported portfolios.    AWS_SERVICECATALOG - Not supported. (Throws ResourceNotFoundException.)   For example, aws servicecatalog reject-portfolio-share --portfolio-id "port-2qwzkwxt3y5fk" --portfolio-share-type AWS_ORGANIZATIONS
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectPortfolioShare(
        acceptLanguage: String? = nil,
        portfolioId: String,
        portfolioShareType: PortfolioShareType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectPortfolioShareOutput {
        let input = RejectPortfolioShareInput(
            acceptLanguage: acceptLanguage, 
            portfolioId: portfolioId, 
            portfolioShareType: portfolioShareType
        )
        return try await self.rejectPortfolioShare(input, logger: logger)
    }

    /// Lists the provisioned products that are available (not terminated). To use additional filtering, see SearchProvisionedProducts.
    @Sendable
    @inlinable
    public func scanProvisionedProducts(_ input: ScanProvisionedProductsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ScanProvisionedProductsOutput {
        try await self.client.execute(
            operation: "ScanProvisionedProducts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the provisioned products that are available (not terminated). To use additional filtering, see SearchProvisionedProducts.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - accessLevelFilter: The access level to use to obtain results. The default is User.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - logger: Logger use during operation
    @inlinable
    public func scanProvisionedProducts(
        acceptLanguage: String? = nil,
        accessLevelFilter: AccessLevelFilter? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ScanProvisionedProductsOutput {
        let input = ScanProvisionedProductsInput(
            acceptLanguage: acceptLanguage, 
            accessLevelFilter: accessLevelFilter, 
            pageSize: pageSize, 
            pageToken: pageToken
        )
        return try await self.scanProvisionedProducts(input, logger: logger)
    }

    /// Gets information about the products to which the caller has access.
    @Sendable
    @inlinable
    public func searchProducts(_ input: SearchProductsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchProductsOutput {
        try await self.client.execute(
            operation: "SearchProducts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the products to which the caller has access.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - filters: The search filters. If no search filters are specified, the output includes all products to which the caller has access.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - sortBy: The sort field. If no value is specified, the results are not sorted.
    ///   - sortOrder: The sort order. If no value is specified, the results are not sorted.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchProducts(
        acceptLanguage: String? = nil,
        filters: [ProductViewFilterBy: [String]]? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        sortBy: ProductViewSortBy? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchProductsOutput {
        let input = SearchProductsInput(
            acceptLanguage: acceptLanguage, 
            filters: filters, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return try await self.searchProducts(input, logger: logger)
    }

    /// Gets information about the products for the specified portfolio or all products.
    @Sendable
    @inlinable
    public func searchProductsAsAdmin(_ input: SearchProductsAsAdminInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchProductsAsAdminOutput {
        try await self.client.execute(
            operation: "SearchProductsAsAdmin", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the products for the specified portfolio or all products.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - filters: The search filters. If no search filters are specified, the output includes all products  to which the administrator has access.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - portfolioId: The portfolio identifier.
    ///   - productSource: Access level of the source of the product.
    ///   - sortBy: The sort field. If no value is specified, the results are not sorted.
    ///   - sortOrder: The sort order. If no value is specified, the results are not sorted.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchProductsAsAdmin(
        acceptLanguage: String? = nil,
        filters: [ProductViewFilterBy: [String]]? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        portfolioId: String? = nil,
        productSource: ProductSource? = nil,
        sortBy: ProductViewSortBy? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchProductsAsAdminOutput {
        let input = SearchProductsAsAdminInput(
            acceptLanguage: acceptLanguage, 
            filters: filters, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            portfolioId: portfolioId, 
            productSource: productSource, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return try await self.searchProductsAsAdmin(input, logger: logger)
    }

    /// Gets information about the provisioned products that meet the specified criteria.
    @Sendable
    @inlinable
    public func searchProvisionedProducts(_ input: SearchProvisionedProductsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchProvisionedProductsOutput {
        try await self.client.execute(
            operation: "SearchProvisionedProducts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the provisioned products that meet the specified criteria.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - accessLevelFilter: The access level to use to obtain results. The default is User.
    ///   - filters: The search filters. When the key is SearchQuery, the searchable fields are arn,  createdTime, id, lastRecordId, idempotencyToken, name, physicalId, productId,  provisioningArtifactId, type, status, tags, userArn, userArnSession, lastProvisioningRecordId, lastSuccessfulProvisioningRecordId,  productName, and provisioningArtifactName. Example: "SearchQuery":["status:AVAILABLE"]
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - pageToken: The page token for the next set of results. To retrieve the first set of results, use null.
    ///   - sortBy: The sort field. If no value is specified, the results are not sorted. The valid values are arn, id, name,  and lastRecordId.
    ///   - sortOrder: The sort order. If no value is specified, the results are not sorted.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchProvisionedProducts(
        acceptLanguage: String? = nil,
        accessLevelFilter: AccessLevelFilter? = nil,
        filters: [ProvisionedProductViewFilterBy: [String]]? = nil,
        pageSize: Int? = nil,
        pageToken: String? = nil,
        sortBy: String? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchProvisionedProductsOutput {
        let input = SearchProvisionedProductsInput(
            acceptLanguage: acceptLanguage, 
            accessLevelFilter: accessLevelFilter, 
            filters: filters, 
            pageSize: pageSize, 
            pageToken: pageToken, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return try await self.searchProvisionedProducts(input, logger: logger)
    }

    /// Terminates the specified provisioned product. This operation does not delete any records associated with the provisioned product. You can check the status of this request using DescribeRecord.
    @Sendable
    @inlinable
    public func terminateProvisionedProduct(_ input: TerminateProvisionedProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> TerminateProvisionedProductOutput {
        try await self.client.execute(
            operation: "TerminateProvisionedProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Terminates the specified provisioned product. This operation does not delete any records associated with the provisioned product. You can check the status of this request using DescribeRecord.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - ignoreErrors: If set to true, Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources.
    ///   - provisionedProductId: The identifier of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
    ///   - provisionedProductName: The name of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
    ///   - retainPhysicalResources: When this boolean parameter is set to true, the TerminateProvisionedProduct API deletes the Service Catalog provisioned product. However, it does not remove the CloudFormation stack, stack set, or the underlying resources of the deleted provisioned product. The default value is false.
    ///   - terminateToken: An idempotency token that uniquely identifies the termination request. This token is only valid during the termination process. After the provisioned product is terminated, subsequent requests to terminate the same provisioned product always return ResourceNotFound.
    ///   - logger: Logger use during operation
    @inlinable
    public func terminateProvisionedProduct(
        acceptLanguage: String? = nil,
        ignoreErrors: Bool? = nil,
        provisionedProductId: String? = nil,
        provisionedProductName: String? = nil,
        retainPhysicalResources: Bool? = nil,
        terminateToken: String = TerminateProvisionedProductInput.idempotencyToken(),
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TerminateProvisionedProductOutput {
        let input = TerminateProvisionedProductInput(
            acceptLanguage: acceptLanguage, 
            ignoreErrors: ignoreErrors, 
            provisionedProductId: provisionedProductId, 
            provisionedProductName: provisionedProductName, 
            retainPhysicalResources: retainPhysicalResources, 
            terminateToken: terminateToken
        )
        return try await self.terminateProvisionedProduct(input, logger: logger)
    }

    /// Updates the specified constraint.
    @Sendable
    @inlinable
    public func updateConstraint(_ input: UpdateConstraintInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateConstraintOutput {
        try await self.client.execute(
            operation: "UpdateConstraint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified constraint.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - description: The updated description of the constraint.
    ///   - id: The identifier of the constraint.
    ///   - parameters: The constraint parameters, in JSON format. The syntax depends on the constraint type as follows:  LAUNCH  You are required to specify either the RoleArn or the LocalRoleName but can't use both. Specify the RoleArn property as follows:  {"RoleArn" : "arn:aws:iam::123456789012:role/LaunchRole"}  Specify the LocalRoleName property as follows:  {"LocalRoleName": "SCBasicLaunchRole"}  If you specify the LocalRoleName property, when an account uses the launch constraint, the IAM role with that name in the account will be used. This allows launch-role constraints to be  account-agnostic so the administrator can create fewer resources per shared account.  The given role name must exist in the account used to create the launch constraint and the account of the user who launches a product with this launch constraint.  You cannot have both a LAUNCH and a STACKSET constraint. You also cannot have more than one LAUNCH constraint on a product and portfolio.  NOTIFICATION  Specify the NotificationArns property as follows:  {"NotificationArns" : ["arn:aws:sns:us-east-1:123456789012:Topic"]}   RESOURCE_UPDATE  Specify the TagUpdatesOnProvisionedProduct property as follows:  {"Version":"2.0","Properties":{"TagUpdateOnProvisionedProduct":"String"}}  The TagUpdatesOnProvisionedProduct property accepts a string value of ALLOWED or NOT_ALLOWED.  STACKSET  Specify the Parameters property as follows:  {"Version": "String", "Properties": {"AccountList": [ "String" ], "RegionList": [ "String" ], "AdminRole": "String", "ExecutionRole": "String"}}  You cannot have both a LAUNCH and a STACKSET constraint. You also cannot have more than one STACKSET constraint on a product and portfolio. Products with a STACKSET constraint will launch an CloudFormation stack set.  TEMPLATE  Specify the Rules property. For more information, see Template Constraint Rules.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateConstraint(
        acceptLanguage: String? = nil,
        description: String? = nil,
        id: String,
        parameters: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateConstraintOutput {
        let input = UpdateConstraintInput(
            acceptLanguage: acceptLanguage, 
            description: description, 
            id: id, 
            parameters: parameters
        )
        return try await self.updateConstraint(input, logger: logger)
    }

    /// Updates the specified portfolio. You cannot update a product that was shared with you.
    @Sendable
    @inlinable
    public func updatePortfolio(_ input: UpdatePortfolioInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePortfolioOutput {
        try await self.client.execute(
            operation: "UpdatePortfolio", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified portfolio. You cannot update a product that was shared with you.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - addTags: The tags to add.
    ///   - description: The updated description of the portfolio.
    ///   - displayName: The name to use for display purposes.
    ///   - id: The portfolio identifier.
    ///   - providerName: The updated name of the portfolio provider.
    ///   - removeTags: The tags to remove.
    ///   - logger: Logger use during operation
    @inlinable
    public func updatePortfolio(
        acceptLanguage: String? = nil,
        addTags: [Tag]? = nil,
        description: String? = nil,
        displayName: String? = nil,
        id: String,
        providerName: String? = nil,
        removeTags: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdatePortfolioOutput {
        let input = UpdatePortfolioInput(
            acceptLanguage: acceptLanguage, 
            addTags: addTags, 
            description: description, 
            displayName: displayName, 
            id: id, 
            providerName: providerName, 
            removeTags: removeTags
        )
        return try await self.updatePortfolio(input, logger: logger)
    }

    /// Updates the specified portfolio share. You can use this API to enable or disable TagOptions sharing  or Principal sharing for an existing portfolio share.  The portfolio share cannot be updated if the CreatePortfolioShare operation is IN_PROGRESS, as the share is not available to recipient entities.  In this case, you must wait for the portfolio share to be completed. You must provide the accountId or organization node in the input, but not both. If the portfolio is shared to both an external account and an organization node, and both shares need to be updated, you must invoke UpdatePortfolioShare separately for each share type.  This API cannot be used for removing the portfolio share. You must use DeletePortfolioShare API for that action.   When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is  then shared with other accounts. For a user in a recipient account who is not an Service Catalog Admin,  but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal  name association for the portfolio. Although this user may not know which principal names are associated through  Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then  Service Catalog recommends using PrincipalType as IAM. With this configuration,  the PrincipalARN must already exist in the recipient account before it can be associated.
    @Sendable
    @inlinable
    public func updatePortfolioShare(_ input: UpdatePortfolioShareInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePortfolioShareOutput {
        try await self.client.execute(
            operation: "UpdatePortfolioShare", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified portfolio share. You can use this API to enable or disable TagOptions sharing  or Principal sharing for an existing portfolio share.  The portfolio share cannot be updated if the CreatePortfolioShare operation is IN_PROGRESS, as the share is not available to recipient entities.  In this case, you must wait for the portfolio share to be completed. You must provide the accountId or organization node in the input, but not both. If the portfolio is shared to both an external account and an organization node, and both shares need to be updated, you must invoke UpdatePortfolioShare separately for each share type.  This API cannot be used for removing the portfolio share. You must use DeletePortfolioShare API for that action.   When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is  then shared with other accounts. For a user in a recipient account who is not an Service Catalog Admin,  but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal  name association for the portfolio. Although this user may not know which principal names are associated through  Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then  Service Catalog recommends using PrincipalType as IAM. With this configuration,  the PrincipalARN must already exist in the recipient account before it can be associated.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - accountId: The Amazon Web Services account Id of the recipient account. This field is required when updating an external account to account type share.
    ///   - organizationNode: 
    ///   - portfolioId: The unique identifier of the portfolio for which the share will be updated.
    ///   - sharePrincipals: A flag to enables or disables Principals sharing in the portfolio. If this field is not provided, the current state of the Principals sharing on the portfolio share will not be modified.
    ///   - shareTagOptions: Enables or disables TagOptions sharing for the portfolio share. If this field is not provided, the current state of  TagOptions sharing on the portfolio share will not be modified.
    ///   - logger: Logger use during operation
    @inlinable
    public func updatePortfolioShare(
        acceptLanguage: String? = nil,
        accountId: String? = nil,
        organizationNode: OrganizationNode? = nil,
        portfolioId: String,
        sharePrincipals: Bool? = nil,
        shareTagOptions: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdatePortfolioShareOutput {
        let input = UpdatePortfolioShareInput(
            acceptLanguage: acceptLanguage, 
            accountId: accountId, 
            organizationNode: organizationNode, 
            portfolioId: portfolioId, 
            sharePrincipals: sharePrincipals, 
            shareTagOptions: shareTagOptions
        )
        return try await self.updatePortfolioShare(input, logger: logger)
    }

    /// Updates the specified product.
    @Sendable
    @inlinable
    public func updateProduct(_ input: UpdateProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProductOutput {
        try await self.client.execute(
            operation: "UpdateProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified product.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - addTags: The tags to add to the product.
    ///   - description: The updated description of the product.
    ///   - distributor: The updated distributor of the product.
    ///   - id: The product identifier.
    ///   - name: The updated product name.
    ///   - owner: The updated owner of the product.
    ///   - removeTags: The tags to remove from the product.
    ///   - sourceConnection: Specifies connection details for the updated product and syncs the product to the connection source artifact. This automatically manages the product's artifacts based on changes to the source. The SourceConnection parameter consists of the following sub-fields.    Type     ConnectionParamters
    ///   - supportDescription: The updated support description for the product.
    ///   - supportEmail: The updated support email for the product.
    ///   - supportUrl: The updated support URL for the product.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateProduct(
        acceptLanguage: String? = nil,
        addTags: [Tag]? = nil,
        description: String? = nil,
        distributor: String? = nil,
        id: String,
        name: String? = nil,
        owner: String? = nil,
        removeTags: [String]? = nil,
        sourceConnection: SourceConnection? = nil,
        supportDescription: String? = nil,
        supportEmail: String? = nil,
        supportUrl: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateProductOutput {
        let input = UpdateProductInput(
            acceptLanguage: acceptLanguage, 
            addTags: addTags, 
            description: description, 
            distributor: distributor, 
            id: id, 
            name: name, 
            owner: owner, 
            removeTags: removeTags, 
            sourceConnection: sourceConnection, 
            supportDescription: supportDescription, 
            supportEmail: supportEmail, 
            supportUrl: supportUrl
        )
        return try await self.updateProduct(input, logger: logger)
    }

    /// Requests updates to the configuration of the specified provisioned product. If there are tags associated with the object, they cannot be updated or added. Depending on the specific updates requested, this operation can update with no interruption, with some interruption, or replace the provisioned product entirely. You can check the status of this request using DescribeRecord.
    @Sendable
    @inlinable
    public func updateProvisionedProduct(_ input: UpdateProvisionedProductInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProvisionedProductOutput {
        try await self.client.execute(
            operation: "UpdateProvisionedProduct", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests updates to the configuration of the specified provisioned product. If there are tags associated with the object, they cannot be updated or added. Depending on the specific updates requested, this operation can update with no interruption, with some interruption, or replace the provisioned product entirely. You can check the status of this request using DescribeRecord.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pathId: The path identifier. This value is optional if the product  has a default path, and required if the product has more than one path. You must provide the name or ID, but not both.
    ///   - pathName: The name of the path. You must provide the name or ID, but not both.
    ///   - productId: The identifier of the product. You must provide the name or ID, but not both.
    ///   - productName: The name of the product. You must provide the name or ID, but not both.
    ///   - provisionedProductId: The identifier of the provisioned product. You must provide the name or ID, but not both.
    ///   - provisionedProductName: The name of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact.
    ///   - provisioningArtifactName: The name of the provisioning artifact. You must provide the name or ID, but not both.
    ///   - provisioningParameters: The new parameters.
    ///   - provisioningPreferences: An object that contains information about the provisioning preferences for a stack set.
    ///   - tags: One or more tags. Requires the product to have RESOURCE_UPDATE constraint with TagUpdatesOnProvisionedProduct set to ALLOWED to allow tag updates.
    ///   - updateToken: The idempotency token that uniquely identifies the provisioning update request.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateProvisionedProduct(
        acceptLanguage: String? = nil,
        pathId: String? = nil,
        pathName: String? = nil,
        productId: String? = nil,
        productName: String? = nil,
        provisionedProductId: String? = nil,
        provisionedProductName: String? = nil,
        provisioningArtifactId: String? = nil,
        provisioningArtifactName: String? = nil,
        provisioningParameters: [UpdateProvisioningParameter]? = nil,
        provisioningPreferences: UpdateProvisioningPreferences? = nil,
        tags: [Tag]? = nil,
        updateToken: String = UpdateProvisionedProductInput.idempotencyToken(),
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateProvisionedProductOutput {
        let input = UpdateProvisionedProductInput(
            acceptLanguage: acceptLanguage, 
            pathId: pathId, 
            pathName: pathName, 
            productId: productId, 
            productName: productName, 
            provisionedProductId: provisionedProductId, 
            provisionedProductName: provisionedProductName, 
            provisioningArtifactId: provisioningArtifactId, 
            provisioningArtifactName: provisioningArtifactName, 
            provisioningParameters: provisioningParameters, 
            provisioningPreferences: provisioningPreferences, 
            tags: tags, 
            updateToken: updateToken
        )
        return try await self.updateProvisionedProduct(input, logger: logger)
    }

    /// Requests updates to the properties of the specified provisioned product.
    @Sendable
    @inlinable
    public func updateProvisionedProductProperties(_ input: UpdateProvisionedProductPropertiesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProvisionedProductPropertiesOutput {
        try await self.client.execute(
            operation: "UpdateProvisionedProductProperties", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests updates to the properties of the specified provisioned product.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - idempotencyToken: The idempotency token that uniquely identifies the provisioning product update request.
    ///   - provisionedProductId: The identifier of the provisioned product.
    ///   - provisionedProductProperties: A map that contains the provisioned product properties to be updated. The LAUNCH_ROLE key accepts role ARNs. This key allows an administrator to call UpdateProvisionedProductProperties to update the launch role that is associated with a provisioned product. This role is used when an end user calls a provisioning operation such as UpdateProvisionedProduct, TerminateProvisionedProduct, or ExecuteProvisionedProductServiceAction. Only a role ARN is valid. A user ARN is invalid.  The OWNER key accepts user ARNs, IAM role ARNs, and STS  assumed-role ARNs. The owner is the user that has permission to see, update, terminate, and  execute service actions in the provisioned product. The administrator can change the owner of a provisioned product to another IAM or STS entity within the  same account. Both end user owners and administrators can see ownership history of the provisioned  product using the ListRecordHistory API. The new owner can describe all past records  for the provisioned product using the DescribeRecord API. The previous owner can no  longer use DescribeRecord, but can still see the product's history from when he was  an owner using ListRecordHistory. If a provisioned product ownership is assigned to an end user, they can see and perform any action through the API or  Service Catalog console such as update, terminate, and execute service actions.  If an end user provisions a product and the owner is updated to someone else, they will no longer be able to see or perform any actions through  API or the Service Catalog console on that provisioned product.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateProvisionedProductProperties(
        acceptLanguage: String? = nil,
        idempotencyToken: String = UpdateProvisionedProductPropertiesInput.idempotencyToken(),
        provisionedProductId: String,
        provisionedProductProperties: [PropertyKey: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateProvisionedProductPropertiesOutput {
        let input = UpdateProvisionedProductPropertiesInput(
            acceptLanguage: acceptLanguage, 
            idempotencyToken: idempotencyToken, 
            provisionedProductId: provisionedProductId, 
            provisionedProductProperties: provisionedProductProperties
        )
        return try await self.updateProvisionedProductProperties(input, logger: logger)
    }

    /// Updates the specified provisioning artifact (also known as a version) for the specified product. You cannot update a provisioning artifact for a product that was shared with you.
    @Sendable
    @inlinable
    public func updateProvisioningArtifact(_ input: UpdateProvisioningArtifactInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateProvisioningArtifactOutput {
        try await self.client.execute(
            operation: "UpdateProvisioningArtifact", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified provisioning artifact (also known as a version) for the specified product. You cannot update a provisioning artifact for a product that was shared with you.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - active: Indicates whether the product version is active. Inactive provisioning artifacts are invisible to end users. End users cannot launch or update a provisioned product from an inactive provisioning artifact.
    ///   - description: The updated description of the provisioning artifact.
    ///   - guidance: Information set by the administrator to provide guidance to end users about which provisioning artifacts to use. The DEFAULT value indicates that the product version is active. The administrator can set the guidance to DEPRECATED to inform users that the product version is deprecated. Users are able to make updates to a provisioned product  of a deprecated version but cannot launch new provisioned products using a deprecated version.
    ///   - name: The updated name of the provisioning artifact.
    ///   - productId: The product identifier.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateProvisioningArtifact(
        acceptLanguage: String? = nil,
        active: Bool? = nil,
        description: String? = nil,
        guidance: ProvisioningArtifactGuidance? = nil,
        name: String? = nil,
        productId: String,
        provisioningArtifactId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateProvisioningArtifactOutput {
        let input = UpdateProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            active: active, 
            description: description, 
            guidance: guidance, 
            name: name, 
            productId: productId, 
            provisioningArtifactId: provisioningArtifactId
        )
        return try await self.updateProvisioningArtifact(input, logger: logger)
    }

    /// Updates a self-service action.
    @Sendable
    @inlinable
    public func updateServiceAction(_ input: UpdateServiceActionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateServiceActionOutput {
        try await self.client.execute(
            operation: "UpdateServiceAction", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a self-service action.
    ///
    /// Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - definition: A map that defines the self-service action.
    ///   - description: The self-service action description.
    ///   - id: The self-service action identifier.
    ///   - name: The self-service action name.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateServiceAction(
        acceptLanguage: String? = nil,
        definition: [ServiceActionDefinitionKey: String]? = nil,
        description: String? = nil,
        id: String,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateServiceActionOutput {
        let input = UpdateServiceActionInput(
            acceptLanguage: acceptLanguage, 
            definition: definition, 
            description: description, 
            id: id, 
            name: name
        )
        return try await self.updateServiceAction(input, logger: logger)
    }

    /// Updates the specified TagOption.
    @Sendable
    @inlinable
    public func updateTagOption(_ input: UpdateTagOptionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTagOptionOutput {
        try await self.client.execute(
            operation: "UpdateTagOption", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the specified TagOption.
    ///
    /// Parameters:
    ///   - active: The updated active state.
    ///   - id: The TagOption identifier.
    ///   - value: The updated value.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateTagOption(
        active: Bool? = nil,
        id: String,
        value: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateTagOptionOutput {
        let input = UpdateTagOptionInput(
            active: active, 
            id: id, 
            value: value
        )
        return try await self.updateTagOption(input, logger: logger)
    }
}

extension ServiceCatalog {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ServiceCatalog, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ServiceCatalog {
    /// Return PaginatorSequence for operation ``describePortfolioShares(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describePortfolioSharesPaginator(
        _ input: DescribePortfolioSharesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribePortfolioSharesInput, DescribePortfolioSharesOutput> {
        return .init(
            input: input,
            command: self.describePortfolioShares,
            inputKey: \DescribePortfolioSharesInput.pageToken,
            outputKey: \DescribePortfolioSharesOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describePortfolioShares(_:logger:)``.
    ///
    /// - Parameters:
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - portfolioId: The unique identifier of the portfolio for which shares will be retrieved.
    ///   - type: The type of portfolio share to summarize. This field acts as a filter on the type of portfolio share, which can be one of the following: 1. ACCOUNT - Represents an external account to account share. 2. ORGANIZATION - Represents a share to an organization. This share is available to every account in the organization. 3. ORGANIZATIONAL_UNIT - Represents a share to an organizational unit. 4. ORGANIZATION_MEMBER_ACCOUNT - Represents a share to an account in the organization.
    ///   - logger: Logger used for logging
    @inlinable
    public func describePortfolioSharesPaginator(
        pageSize: Int? = nil,
        portfolioId: String,
        type: DescribePortfolioShareType,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribePortfolioSharesInput, DescribePortfolioSharesOutput> {
        let input = DescribePortfolioSharesInput(
            pageSize: pageSize, 
            portfolioId: portfolioId, 
            type: type
        )
        return self.describePortfolioSharesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getProvisionedProductOutputs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getProvisionedProductOutputsPaginator(
        _ input: GetProvisionedProductOutputsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetProvisionedProductOutputsInput, GetProvisionedProductOutputsOutput> {
        return .init(
            input: input,
            command: self.getProvisionedProductOutputs,
            inputKey: \GetProvisionedProductOutputsInput.pageToken,
            outputKey: \GetProvisionedProductOutputsOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getProvisionedProductOutputs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - outputKeys: The list of keys that the API should return with their values. If none are provided, the API will return all outputs of the provisioned product.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - provisionedProductId: The identifier of the provisioned product that you want the outputs from.
    ///   - provisionedProductName: The name of the provisioned product that you want the outputs from.
    ///   - logger: Logger used for logging
    @inlinable
    public func getProvisionedProductOutputsPaginator(
        acceptLanguage: String? = nil,
        outputKeys: [String]? = nil,
        pageSize: Int? = nil,
        provisionedProductId: String? = nil,
        provisionedProductName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetProvisionedProductOutputsInput, GetProvisionedProductOutputsOutput> {
        let input = GetProvisionedProductOutputsInput(
            acceptLanguage: acceptLanguage, 
            outputKeys: outputKeys, 
            pageSize: pageSize, 
            provisionedProductId: provisionedProductId, 
            provisionedProductName: provisionedProductName
        )
        return self.getProvisionedProductOutputsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listAcceptedPortfolioShares(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAcceptedPortfolioSharesPaginator(
        _ input: ListAcceptedPortfolioSharesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAcceptedPortfolioSharesInput, ListAcceptedPortfolioSharesOutput> {
        return .init(
            input: input,
            command: self.listAcceptedPortfolioShares,
            inputKey: \ListAcceptedPortfolioSharesInput.pageToken,
            outputKey: \ListAcceptedPortfolioSharesOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAcceptedPortfolioShares(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - portfolioShareType: The type of shared portfolios to list. The default is to list imported portfolios.    AWS_ORGANIZATIONS - List portfolios accepted and shared via organizational sharing by the management account or delegated administrator of your organization.    AWS_SERVICECATALOG - Deprecated type.    IMPORTED - List imported portfolios that have been accepted and shared through account-to-account sharing.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAcceptedPortfolioSharesPaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        portfolioShareType: PortfolioShareType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAcceptedPortfolioSharesInput, ListAcceptedPortfolioSharesOutput> {
        let input = ListAcceptedPortfolioSharesInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            portfolioShareType: portfolioShareType
        )
        return self.listAcceptedPortfolioSharesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listBudgetsForResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listBudgetsForResourcePaginator(
        _ input: ListBudgetsForResourceInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBudgetsForResourceInput, ListBudgetsForResourceOutput> {
        return .init(
            input: input,
            command: self.listBudgetsForResource,
            inputKey: \ListBudgetsForResourceInput.pageToken,
            outputKey: \ListBudgetsForResourceOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listBudgetsForResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - resourceId: The resource identifier.
    ///   - logger: Logger used for logging
    @inlinable
    public func listBudgetsForResourcePaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        resourceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListBudgetsForResourceInput, ListBudgetsForResourceOutput> {
        let input = ListBudgetsForResourceInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            resourceId: resourceId
        )
        return self.listBudgetsForResourcePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listConstraintsForPortfolio(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listConstraintsForPortfolioPaginator(
        _ input: ListConstraintsForPortfolioInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConstraintsForPortfolioInput, ListConstraintsForPortfolioOutput> {
        return .init(
            input: input,
            command: self.listConstraintsForPortfolio,
            inputKey: \ListConstraintsForPortfolioInput.pageToken,
            outputKey: \ListConstraintsForPortfolioOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listConstraintsForPortfolio(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - portfolioId: The portfolio identifier.
    ///   - productId: The product identifier.
    ///   - logger: Logger used for logging
    @inlinable
    public func listConstraintsForPortfolioPaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        portfolioId: String,
        productId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListConstraintsForPortfolioInput, ListConstraintsForPortfolioOutput> {
        let input = ListConstraintsForPortfolioInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            portfolioId: portfolioId, 
            productId: productId
        )
        return self.listConstraintsForPortfolioPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLaunchPaths(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLaunchPathsPaginator(
        _ input: ListLaunchPathsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLaunchPathsInput, ListLaunchPathsOutput> {
        return .init(
            input: input,
            command: self.listLaunchPaths,
            inputKey: \ListLaunchPathsInput.pageToken,
            outputKey: \ListLaunchPathsOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLaunchPaths(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - productId: The product identifier.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLaunchPathsPaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        productId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLaunchPathsInput, ListLaunchPathsOutput> {
        let input = ListLaunchPathsInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            productId: productId
        )
        return self.listLaunchPathsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listOrganizationPortfolioAccess(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listOrganizationPortfolioAccessPaginator(
        _ input: ListOrganizationPortfolioAccessInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListOrganizationPortfolioAccessInput, ListOrganizationPortfolioAccessOutput> {
        return .init(
            input: input,
            command: self.listOrganizationPortfolioAccess,
            inputKey: \ListOrganizationPortfolioAccessInput.pageToken,
            outputKey: \ListOrganizationPortfolioAccessOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listOrganizationPortfolioAccess(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - organizationNodeType: The organization node type that will be returned in the output.    ORGANIZATION - Organization that has access to the portfolio.     ORGANIZATIONAL_UNIT - Organizational unit that has access to the portfolio within your organization.    ACCOUNT - Account that has access to the portfolio within your organization.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - portfolioId: The portfolio identifier. For example, port-2abcdext3y5fk.
    ///   - logger: Logger used for logging
    @inlinable
    public func listOrganizationPortfolioAccessPaginator(
        acceptLanguage: String? = nil,
        organizationNodeType: OrganizationNodeType,
        pageSize: Int? = nil,
        portfolioId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListOrganizationPortfolioAccessInput, ListOrganizationPortfolioAccessOutput> {
        let input = ListOrganizationPortfolioAccessInput(
            acceptLanguage: acceptLanguage, 
            organizationNodeType: organizationNodeType, 
            pageSize: pageSize, 
            portfolioId: portfolioId
        )
        return self.listOrganizationPortfolioAccessPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPortfolioAccess(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPortfolioAccessPaginator(
        _ input: ListPortfolioAccessInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPortfolioAccessInput, ListPortfolioAccessOutput> {
        return .init(
            input: input,
            command: self.listPortfolioAccess,
            inputKey: \ListPortfolioAccessInput.pageToken,
            outputKey: \ListPortfolioAccessOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPortfolioAccess(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - organizationParentId: The ID of an organization node the portfolio is shared with. All children of this node with an inherited portfolio share will be returned.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - portfolioId: The portfolio identifier.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPortfolioAccessPaginator(
        acceptLanguage: String? = nil,
        organizationParentId: String? = nil,
        pageSize: Int? = nil,
        portfolioId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPortfolioAccessInput, ListPortfolioAccessOutput> {
        let input = ListPortfolioAccessInput(
            acceptLanguage: acceptLanguage, 
            organizationParentId: organizationParentId, 
            pageSize: pageSize, 
            portfolioId: portfolioId
        )
        return self.listPortfolioAccessPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPortfolios(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPortfoliosPaginator(
        _ input: ListPortfoliosInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPortfoliosInput, ListPortfoliosOutput> {
        return .init(
            input: input,
            command: self.listPortfolios,
            inputKey: \ListPortfoliosInput.pageToken,
            outputKey: \ListPortfoliosOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPortfolios(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPortfoliosPaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPortfoliosInput, ListPortfoliosOutput> {
        let input = ListPortfoliosInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize
        )
        return self.listPortfoliosPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPortfoliosForProduct(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPortfoliosForProductPaginator(
        _ input: ListPortfoliosForProductInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPortfoliosForProductInput, ListPortfoliosForProductOutput> {
        return .init(
            input: input,
            command: self.listPortfoliosForProduct,
            inputKey: \ListPortfoliosForProductInput.pageToken,
            outputKey: \ListPortfoliosForProductOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPortfoliosForProduct(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - productId: The product identifier.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPortfoliosForProductPaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        productId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPortfoliosForProductInput, ListPortfoliosForProductOutput> {
        let input = ListPortfoliosForProductInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            productId: productId
        )
        return self.listPortfoliosForProductPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listPrincipalsForPortfolio(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listPrincipalsForPortfolioPaginator(
        _ input: ListPrincipalsForPortfolioInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPrincipalsForPortfolioInput, ListPrincipalsForPortfolioOutput> {
        return .init(
            input: input,
            command: self.listPrincipalsForPortfolio,
            inputKey: \ListPrincipalsForPortfolioInput.pageToken,
            outputKey: \ListPrincipalsForPortfolioOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listPrincipalsForPortfolio(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - portfolioId: The portfolio identifier.
    ///   - logger: Logger used for logging
    @inlinable
    public func listPrincipalsForPortfolioPaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        portfolioId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListPrincipalsForPortfolioInput, ListPrincipalsForPortfolioOutput> {
        let input = ListPrincipalsForPortfolioInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            portfolioId: portfolioId
        )
        return self.listPrincipalsForPortfolioPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProvisioningArtifactsForServiceAction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listProvisioningArtifactsForServiceActionPaginator(
        _ input: ListProvisioningArtifactsForServiceActionInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProvisioningArtifactsForServiceActionInput, ListProvisioningArtifactsForServiceActionOutput> {
        return .init(
            input: input,
            command: self.listProvisioningArtifactsForServiceAction,
            inputKey: \ListProvisioningArtifactsForServiceActionInput.pageToken,
            outputKey: \ListProvisioningArtifactsForServiceActionOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProvisioningArtifactsForServiceAction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - serviceActionId: The self-service action identifier. For example, act-fs7abcd89wxyz.
    ///   - logger: Logger used for logging
    @inlinable
    public func listProvisioningArtifactsForServiceActionPaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        serviceActionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProvisioningArtifactsForServiceActionInput, ListProvisioningArtifactsForServiceActionOutput> {
        let input = ListProvisioningArtifactsForServiceActionInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            serviceActionId: serviceActionId
        )
        return self.listProvisioningArtifactsForServiceActionPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listResourcesForTagOption(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listResourcesForTagOptionPaginator(
        _ input: ListResourcesForTagOptionInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourcesForTagOptionInput, ListResourcesForTagOptionOutput> {
        return .init(
            input: input,
            command: self.listResourcesForTagOption,
            inputKey: \ListResourcesForTagOptionInput.pageToken,
            outputKey: \ListResourcesForTagOptionOutput.pageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listResourcesForTagOption(_:logger:)``.
    ///
    /// - Parameters:
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - resourceType: The resource type.    Portfolio     Product
    ///   - tagOptionId: The TagOption identifier.
    ///   - logger: Logger used for logging
    @inlinable
    public func listResourcesForTagOptionPaginator(
        pageSize: Int? = nil,
        resourceType: String? = nil,
        tagOptionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListResourcesForTagOptionInput, ListResourcesForTagOptionOutput> {
        let input = ListResourcesForTagOptionInput(
            pageSize: pageSize, 
            resourceType: resourceType, 
            tagOptionId: tagOptionId
        )
        return self.listResourcesForTagOptionPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listServiceActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listServiceActionsPaginator(
        _ input: ListServiceActionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceActionsInput, ListServiceActionsOutput> {
        return .init(
            input: input,
            command: self.listServiceActions,
            inputKey: \ListServiceActionsInput.pageToken,
            outputKey: \ListServiceActionsOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listServiceActions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func listServiceActionsPaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListServiceActionsInput, ListServiceActionsOutput> {
        let input = ListServiceActionsInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize
        )
        return self.listServiceActionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listServiceActionsForProvisioningArtifact(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listServiceActionsForProvisioningArtifactPaginator(
        _ input: ListServiceActionsForProvisioningArtifactInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListServiceActionsForProvisioningArtifactInput, ListServiceActionsForProvisioningArtifactOutput> {
        return .init(
            input: input,
            command: self.listServiceActionsForProvisioningArtifact,
            inputKey: \ListServiceActionsForProvisioningArtifactInput.pageToken,
            outputKey: \ListServiceActionsForProvisioningArtifactOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listServiceActionsForProvisioningArtifact(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - productId: The product identifier. For example, prod-abcdzk7xy33qa.
    ///   - provisioningArtifactId: The identifier of the provisioning artifact. For example, pa-4abcdjnxjj6ne.
    ///   - logger: Logger used for logging
    @inlinable
    public func listServiceActionsForProvisioningArtifactPaginator(
        acceptLanguage: String? = nil,
        pageSize: Int? = nil,
        productId: String,
        provisioningArtifactId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListServiceActionsForProvisioningArtifactInput, ListServiceActionsForProvisioningArtifactOutput> {
        let input = ListServiceActionsForProvisioningArtifactInput(
            acceptLanguage: acceptLanguage, 
            pageSize: pageSize, 
            productId: productId, 
            provisioningArtifactId: provisioningArtifactId
        )
        return self.listServiceActionsForProvisioningArtifactPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listTagOptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listTagOptionsPaginator(
        _ input: ListTagOptionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTagOptionsInput, ListTagOptionsOutput> {
        return .init(
            input: input,
            command: self.listTagOptions,
            inputKey: \ListTagOptionsInput.pageToken,
            outputKey: \ListTagOptionsOutput.pageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listTagOptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: The search filters. If no search filters are specified, the output includes all TagOptions.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - logger: Logger used for logging
    @inlinable
    public func listTagOptionsPaginator(
        filters: ListTagOptionsFilters? = nil,
        pageSize: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListTagOptionsInput, ListTagOptionsOutput> {
        let input = ListTagOptionsInput(
            filters: filters, 
            pageSize: pageSize
        )
        return self.listTagOptionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchProducts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchProductsPaginator(
        _ input: SearchProductsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchProductsInput, SearchProductsOutput> {
        return .init(
            input: input,
            command: self.searchProducts,
            inputKey: \SearchProductsInput.pageToken,
            outputKey: \SearchProductsOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchProducts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - filters: The search filters. If no search filters are specified, the output includes all products to which the caller has access.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - sortBy: The sort field. If no value is specified, the results are not sorted.
    ///   - sortOrder: The sort order. If no value is specified, the results are not sorted.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchProductsPaginator(
        acceptLanguage: String? = nil,
        filters: [ProductViewFilterBy: [String]]? = nil,
        pageSize: Int? = nil,
        sortBy: ProductViewSortBy? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchProductsInput, SearchProductsOutput> {
        let input = SearchProductsInput(
            acceptLanguage: acceptLanguage, 
            filters: filters, 
            pageSize: pageSize, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return self.searchProductsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchProductsAsAdmin(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchProductsAsAdminPaginator(
        _ input: SearchProductsAsAdminInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchProductsAsAdminInput, SearchProductsAsAdminOutput> {
        return .init(
            input: input,
            command: self.searchProductsAsAdmin,
            inputKey: \SearchProductsAsAdminInput.pageToken,
            outputKey: \SearchProductsAsAdminOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchProductsAsAdmin(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - filters: The search filters. If no search filters are specified, the output includes all products  to which the administrator has access.
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - portfolioId: The portfolio identifier.
    ///   - productSource: Access level of the source of the product.
    ///   - sortBy: The sort field. If no value is specified, the results are not sorted.
    ///   - sortOrder: The sort order. If no value is specified, the results are not sorted.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchProductsAsAdminPaginator(
        acceptLanguage: String? = nil,
        filters: [ProductViewFilterBy: [String]]? = nil,
        pageSize: Int? = nil,
        portfolioId: String? = nil,
        productSource: ProductSource? = nil,
        sortBy: ProductViewSortBy? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchProductsAsAdminInput, SearchProductsAsAdminOutput> {
        let input = SearchProductsAsAdminInput(
            acceptLanguage: acceptLanguage, 
            filters: filters, 
            pageSize: pageSize, 
            portfolioId: portfolioId, 
            productSource: productSource, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return self.searchProductsAsAdminPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchProvisionedProducts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchProvisionedProductsPaginator(
        _ input: SearchProvisionedProductsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchProvisionedProductsInput, SearchProvisionedProductsOutput> {
        return .init(
            input: input,
            command: self.searchProvisionedProducts,
            inputKey: \SearchProvisionedProductsInput.pageToken,
            outputKey: \SearchProvisionedProductsOutput.nextPageToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchProvisionedProducts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - acceptLanguage: The language code.    jp - Japanese    zh - Chinese
    ///   - accessLevelFilter: The access level to use to obtain results. The default is User.
    ///   - filters: The search filters. When the key is SearchQuery, the searchable fields are arn,  createdTime, id, lastRecordId, idempotencyToken, name, physicalId, productId,  provisioningArtifactId, type, status, tags, userArn, userArnSession, lastProvisioningRecordId, lastSuccessfulProvisioningRecordId,  productName, and provisioningArtifactName. Example: "SearchQuery":["status:AVAILABLE"]
    ///   - pageSize: The maximum number of items to return with this call.
    ///   - sortBy: The sort field. If no value is specified, the results are not sorted. The valid values are arn, id, name,  and lastRecordId.
    ///   - sortOrder: The sort order. If no value is specified, the results are not sorted.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchProvisionedProductsPaginator(
        acceptLanguage: String? = nil,
        accessLevelFilter: AccessLevelFilter? = nil,
        filters: [ProvisionedProductViewFilterBy: [String]]? = nil,
        pageSize: Int? = nil,
        sortBy: String? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchProvisionedProductsInput, SearchProvisionedProductsOutput> {
        let input = SearchProvisionedProductsInput(
            acceptLanguage: acceptLanguage, 
            accessLevelFilter: accessLevelFilter, 
            filters: filters, 
            pageSize: pageSize, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return self.searchProvisionedProductsPaginator(input, logger: logger)
    }
}

extension ServiceCatalog.DescribePortfolioSharesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.DescribePortfolioSharesInput {
        return .init(
            pageSize: self.pageSize,
            pageToken: token,
            portfolioId: self.portfolioId,
            type: self.type
        )
    }
}

extension ServiceCatalog.GetProvisionedProductOutputsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.GetProvisionedProductOutputsInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            outputKeys: self.outputKeys,
            pageSize: self.pageSize,
            pageToken: token,
            provisionedProductId: self.provisionedProductId,
            provisionedProductName: self.provisionedProductName
        )
    }
}

extension ServiceCatalog.ListAcceptedPortfolioSharesInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListAcceptedPortfolioSharesInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token,
            portfolioShareType: self.portfolioShareType
        )
    }
}

extension ServiceCatalog.ListBudgetsForResourceInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListBudgetsForResourceInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token,
            resourceId: self.resourceId
        )
    }
}

extension ServiceCatalog.ListConstraintsForPortfolioInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListConstraintsForPortfolioInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token,
            portfolioId: self.portfolioId,
            productId: self.productId
        )
    }
}

extension ServiceCatalog.ListLaunchPathsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListLaunchPathsInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token,
            productId: self.productId
        )
    }
}

extension ServiceCatalog.ListOrganizationPortfolioAccessInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListOrganizationPortfolioAccessInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            organizationNodeType: self.organizationNodeType,
            pageSize: self.pageSize,
            pageToken: token,
            portfolioId: self.portfolioId
        )
    }
}

extension ServiceCatalog.ListPortfolioAccessInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListPortfolioAccessInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            organizationParentId: self.organizationParentId,
            pageSize: self.pageSize,
            pageToken: token,
            portfolioId: self.portfolioId
        )
    }
}

extension ServiceCatalog.ListPortfoliosForProductInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListPortfoliosForProductInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token,
            productId: self.productId
        )
    }
}

extension ServiceCatalog.ListPortfoliosInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListPortfoliosInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token
        )
    }
}

extension ServiceCatalog.ListPrincipalsForPortfolioInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListPrincipalsForPortfolioInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token,
            portfolioId: self.portfolioId
        )
    }
}

extension ServiceCatalog.ListProvisioningArtifactsForServiceActionInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListProvisioningArtifactsForServiceActionInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token,
            serviceActionId: self.serviceActionId
        )
    }
}

extension ServiceCatalog.ListResourcesForTagOptionInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListResourcesForTagOptionInput {
        return .init(
            pageSize: self.pageSize,
            pageToken: token,
            resourceType: self.resourceType,
            tagOptionId: self.tagOptionId
        )
    }
}

extension ServiceCatalog.ListServiceActionsForProvisioningArtifactInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListServiceActionsForProvisioningArtifactInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token,
            productId: self.productId,
            provisioningArtifactId: self.provisioningArtifactId
        )
    }
}

extension ServiceCatalog.ListServiceActionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListServiceActionsInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            pageSize: self.pageSize,
            pageToken: token
        )
    }
}

extension ServiceCatalog.ListTagOptionsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.ListTagOptionsInput {
        return .init(
            filters: self.filters,
            pageSize: self.pageSize,
            pageToken: token
        )
    }
}

extension ServiceCatalog.SearchProductsAsAdminInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.SearchProductsAsAdminInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            filters: self.filters,
            pageSize: self.pageSize,
            pageToken: token,
            portfolioId: self.portfolioId,
            productSource: self.productSource,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension ServiceCatalog.SearchProductsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.SearchProductsInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            filters: self.filters,
            pageSize: self.pageSize,
            pageToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension ServiceCatalog.SearchProvisionedProductsInput: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ServiceCatalog.SearchProvisionedProductsInput {
        return .init(
            acceptLanguage: self.acceptLanguage,
            accessLevelFilter: self.accessLevelFilter,
            filters: self.filters,
            pageSize: self.pageSize,
            pageToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}
