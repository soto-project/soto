//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS IoTTwinMaker service.
///
/// IoT TwinMaker is a service with which you can build operational digital twins of physical systems. IoT TwinMaker overlays measurements and analysis from real-world sensors, cameras, and enterprise applications so you can create data visualizations to monitor your physical factory, building, or industrial plant. You can use this real-world data to monitor operations and diagnose and repair errors.
public struct IoTTwinMaker: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the IoTTwinMaker client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "IoTTwinMaker",
            serviceIdentifier: "iottwinmaker",
            serviceProtocol: .restjson,
            apiVersion: "2021-11-29",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            variantEndpoints: Self.variantEndpoints,
            errorType: IoTTwinMakerErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "api-ap-northeast-1": "api.iottwinmaker.ap-northeast-1.amazonaws.com",
        "api-ap-northeast-2": "api.iottwinmaker.ap-northeast-2.amazonaws.com",
        "api-ap-south-1": "api.iottwinmaker.ap-south-1.amazonaws.com",
        "api-ap-southeast-1": "api.iottwinmaker.ap-southeast-1.amazonaws.com",
        "api-ap-southeast-2": "api.iottwinmaker.ap-southeast-2.amazonaws.com",
        "api-cn-north-1": "api.iottwinmaker.cn-north-1.amazonaws.com.cn",
        "api-eu-central-1": "api.iottwinmaker.eu-central-1.amazonaws.com",
        "api-eu-west-1": "api.iottwinmaker.eu-west-1.amazonaws.com",
        "api-us-east-1": "api.iottwinmaker.us-east-1.amazonaws.com",
        "api-us-gov-west-1": "api.iottwinmaker.us-gov-west-1.amazonaws.com",
        "api-us-west-2": "api.iottwinmaker.us-west-2.amazonaws.com",
        "data-ap-northeast-1": "data.iottwinmaker.ap-northeast-1.amazonaws.com",
        "data-ap-northeast-2": "data.iottwinmaker.ap-northeast-2.amazonaws.com",
        "data-ap-south-1": "data.iottwinmaker.ap-south-1.amazonaws.com",
        "data-ap-southeast-1": "data.iottwinmaker.ap-southeast-1.amazonaws.com",
        "data-ap-southeast-2": "data.iottwinmaker.ap-southeast-2.amazonaws.com",
        "data-cn-north-1": "data.iottwinmaker.cn-north-1.amazonaws.com.cn",
        "data-eu-central-1": "data.iottwinmaker.eu-central-1.amazonaws.com",
        "data-eu-west-1": "data.iottwinmaker.eu-west-1.amazonaws.com",
        "data-us-east-1": "data.iottwinmaker.us-east-1.amazonaws.com",
        "data-us-gov-west-1": "data.iottwinmaker.us-gov-west-1.amazonaws.com",
        "data-us-west-2": "data.iottwinmaker.us-west-2.amazonaws.com",
        "fips-api-us-east-1": "api.iottwinmaker-fips.us-east-1.amazonaws.com",
        "fips-api-us-gov-west-1": "api.iottwinmaker-fips.us-gov-west-1.amazonaws.com",
        "fips-api-us-west-2": "api.iottwinmaker-fips.us-west-2.amazonaws.com",
        "fips-data-us-east-1": "data.iottwinmaker-fips.us-east-1.amazonaws.com",
        "fips-data-us-gov-west-1": "data.iottwinmaker-fips.us-gov-west-1.amazonaws.com",
        "fips-data-us-west-2": "data.iottwinmaker-fips.us-west-2.amazonaws.com"
    ]}


    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "iottwinmaker-fips.us-east-1.amazonaws.com",
            "us-gov-west-1": "iottwinmaker-fips.us-gov-west-1.amazonaws.com",
            "us-west-2": "iottwinmaker-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Sets values for multiple time series properties.
    @Sendable
    public func batchPutPropertyValues(_ input: BatchPutPropertyValuesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchPutPropertyValuesResponse {
        return try await self.client.execute(
            operation: "BatchPutPropertyValues", 
            path: "/workspaces/{workspaceId}/entity-properties", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "data.", 
            logger: logger
        )
    }

    /// Cancels the metadata transfer job.
    @Sendable
    public func cancelMetadataTransferJob(_ input: CancelMetadataTransferJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelMetadataTransferJobResponse {
        return try await self.client.execute(
            operation: "CancelMetadataTransferJob", 
            path: "/metadata-transfer-jobs/{metadataTransferJobId}/cancel", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Creates a component type.
    @Sendable
    public func createComponentType(_ input: CreateComponentTypeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateComponentTypeResponse {
        return try await self.client.execute(
            operation: "CreateComponentType", 
            path: "/workspaces/{workspaceId}/component-types/{componentTypeId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Creates an entity.
    @Sendable
    public func createEntity(_ input: CreateEntityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEntityResponse {
        return try await self.client.execute(
            operation: "CreateEntity", 
            path: "/workspaces/{workspaceId}/entities", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Creates a new metadata transfer job.
    @Sendable
    public func createMetadataTransferJob(_ input: CreateMetadataTransferJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMetadataTransferJobResponse {
        return try await self.client.execute(
            operation: "CreateMetadataTransferJob", 
            path: "/metadata-transfer-jobs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Creates a scene.
    @Sendable
    public func createScene(_ input: CreateSceneRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSceneResponse {
        return try await self.client.execute(
            operation: "CreateScene", 
            path: "/workspaces/{workspaceId}/scenes", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// This action creates a SyncJob.
    @Sendable
    public func createSyncJob(_ input: CreateSyncJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSyncJobResponse {
        return try await self.client.execute(
            operation: "CreateSyncJob", 
            path: "/workspaces/{workspaceId}/sync-jobs/{syncSource}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Creates a workplace.
    @Sendable
    public func createWorkspace(_ input: CreateWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkspaceResponse {
        return try await self.client.execute(
            operation: "CreateWorkspace", 
            path: "/workspaces/{workspaceId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Deletes a component type.
    @Sendable
    public func deleteComponentType(_ input: DeleteComponentTypeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteComponentTypeResponse {
        return try await self.client.execute(
            operation: "DeleteComponentType", 
            path: "/workspaces/{workspaceId}/component-types/{componentTypeId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Deletes an entity.
    @Sendable
    public func deleteEntity(_ input: DeleteEntityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEntityResponse {
        return try await self.client.execute(
            operation: "DeleteEntity", 
            path: "/workspaces/{workspaceId}/entities/{entityId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Deletes a scene.
    @Sendable
    public func deleteScene(_ input: DeleteSceneRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSceneResponse {
        return try await self.client.execute(
            operation: "DeleteScene", 
            path: "/workspaces/{workspaceId}/scenes/{sceneId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Delete the SyncJob.
    @Sendable
    public func deleteSyncJob(_ input: DeleteSyncJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSyncJobResponse {
        return try await self.client.execute(
            operation: "DeleteSyncJob", 
            path: "/workspaces/{workspaceId}/sync-jobs/{syncSource}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Deletes a workspace.
    @Sendable
    public func deleteWorkspace(_ input: DeleteWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkspaceResponse {
        return try await self.client.execute(
            operation: "DeleteWorkspace", 
            path: "/workspaces/{workspaceId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Run queries to access information from your knowledge graph of entities within individual workspaces.  The ExecuteQuery action only works with Amazon Web Services Java SDK2. ExecuteQuery will not work with any Amazon Web Services Java SDK version &lt; 2.x.
    @Sendable
    public func executeQuery(_ input: ExecuteQueryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExecuteQueryResponse {
        return try await self.client.execute(
            operation: "ExecuteQuery", 
            path: "/queries/execution", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Retrieves information about a component type.
    @Sendable
    public func getComponentType(_ input: GetComponentTypeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetComponentTypeResponse {
        return try await self.client.execute(
            operation: "GetComponentType", 
            path: "/workspaces/{workspaceId}/component-types/{componentTypeId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Retrieves information about an entity.
    @Sendable
    public func getEntity(_ input: GetEntityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEntityResponse {
        return try await self.client.execute(
            operation: "GetEntity", 
            path: "/workspaces/{workspaceId}/entities/{entityId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Gets a nmetadata transfer job.
    @Sendable
    public func getMetadataTransferJob(_ input: GetMetadataTransferJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMetadataTransferJobResponse {
        return try await self.client.execute(
            operation: "GetMetadataTransferJob", 
            path: "/metadata-transfer-jobs/{metadataTransferJobId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Gets the pricing plan.
    @Sendable
    public func getPricingPlan(_ input: GetPricingPlanRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPricingPlanResponse {
        return try await self.client.execute(
            operation: "GetPricingPlan", 
            path: "/pricingplan", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Gets the property values for a component, component type, entity, or workspace. You must specify a value for either componentName, componentTypeId, entityId, or workspaceId.
    @Sendable
    public func getPropertyValue(_ input: GetPropertyValueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPropertyValueResponse {
        return try await self.client.execute(
            operation: "GetPropertyValue", 
            path: "/workspaces/{workspaceId}/entity-properties/value", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "data.", 
            logger: logger
        )
    }

    /// Retrieves information about the history of a time series property value for a component, component type, entity, or workspace. You must specify a value for workspaceId. For entity-specific queries, specify values for componentName and entityId. For cross-entity quries, specify a value for componentTypeId.
    @Sendable
    public func getPropertyValueHistory(_ input: GetPropertyValueHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPropertyValueHistoryResponse {
        return try await self.client.execute(
            operation: "GetPropertyValueHistory", 
            path: "/workspaces/{workspaceId}/entity-properties/history", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "data.", 
            logger: logger
        )
    }

    /// Retrieves information about a scene.
    @Sendable
    public func getScene(_ input: GetSceneRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSceneResponse {
        return try await self.client.execute(
            operation: "GetScene", 
            path: "/workspaces/{workspaceId}/scenes/{sceneId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Gets the SyncJob.
    @Sendable
    public func getSyncJob(_ input: GetSyncJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSyncJobResponse {
        return try await self.client.execute(
            operation: "GetSyncJob", 
            path: "/sync-jobs/{syncSource}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Retrieves information about a workspace.
    @Sendable
    public func getWorkspace(_ input: GetWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkspaceResponse {
        return try await self.client.execute(
            operation: "GetWorkspace", 
            path: "/workspaces/{workspaceId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Lists all component types in a workspace.
    @Sendable
    public func listComponentTypes(_ input: ListComponentTypesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListComponentTypesResponse {
        return try await self.client.execute(
            operation: "ListComponentTypes", 
            path: "/workspaces/{workspaceId}/component-types-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// This API lists the components of an entity.
    @Sendable
    public func listComponents(_ input: ListComponentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListComponentsResponse {
        return try await self.client.execute(
            operation: "ListComponents", 
            path: "/workspaces/{workspaceId}/entities/{entityId}/components-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Lists all entities in a workspace.
    @Sendable
    public func listEntities(_ input: ListEntitiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEntitiesResponse {
        return try await self.client.execute(
            operation: "ListEntities", 
            path: "/workspaces/{workspaceId}/entities-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Lists the metadata transfer jobs.
    @Sendable
    public func listMetadataTransferJobs(_ input: ListMetadataTransferJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMetadataTransferJobsResponse {
        return try await self.client.execute(
            operation: "ListMetadataTransferJobs", 
            path: "/metadata-transfer-jobs-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// This API lists the properties of a component.
    @Sendable
    public func listProperties(_ input: ListPropertiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPropertiesResponse {
        return try await self.client.execute(
            operation: "ListProperties", 
            path: "/workspaces/{workspaceId}/properties-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Lists all scenes in a workspace.
    @Sendable
    public func listScenes(_ input: ListScenesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListScenesResponse {
        return try await self.client.execute(
            operation: "ListScenes", 
            path: "/workspaces/{workspaceId}/scenes-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// List all SyncJobs.
    @Sendable
    public func listSyncJobs(_ input: ListSyncJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSyncJobsResponse {
        return try await self.client.execute(
            operation: "ListSyncJobs", 
            path: "/workspaces/{workspaceId}/sync-jobs-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Lists the sync resources.
    @Sendable
    public func listSyncResources(_ input: ListSyncResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSyncResourcesResponse {
        return try await self.client.execute(
            operation: "ListSyncResources", 
            path: "/workspaces/{workspaceId}/sync-jobs/{syncSource}/resources-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Lists all tags associated with a resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Retrieves information about workspaces in the current account.
    @Sendable
    public func listWorkspaces(_ input: ListWorkspacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkspacesResponse {
        return try await self.client.execute(
            operation: "ListWorkspaces", 
            path: "/workspaces-list", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Adds tags to a resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Removes tags from a resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Updates information in a component type.
    @Sendable
    public func updateComponentType(_ input: UpdateComponentTypeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateComponentTypeResponse {
        return try await self.client.execute(
            operation: "UpdateComponentType", 
            path: "/workspaces/{workspaceId}/component-types/{componentTypeId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Updates an entity.
    @Sendable
    public func updateEntity(_ input: UpdateEntityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateEntityResponse {
        return try await self.client.execute(
            operation: "UpdateEntity", 
            path: "/workspaces/{workspaceId}/entities/{entityId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Update the pricing plan.
    @Sendable
    public func updatePricingPlan(_ input: UpdatePricingPlanRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePricingPlanResponse {
        return try await self.client.execute(
            operation: "UpdatePricingPlan", 
            path: "/pricingplan", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Updates a scene.
    @Sendable
    public func updateScene(_ input: UpdateSceneRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSceneResponse {
        return try await self.client.execute(
            operation: "UpdateScene", 
            path: "/workspaces/{workspaceId}/scenes/{sceneId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }

    /// Updates a workspace.
    @Sendable
    public func updateWorkspace(_ input: UpdateWorkspaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkspaceResponse {
        return try await self.client.execute(
            operation: "UpdateWorkspace", 
            path: "/workspaces/{workspaceId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "api.", 
            logger: logger
        )
    }
}

extension IoTTwinMaker {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: IoTTwinMaker, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension IoTTwinMaker {
    /// Run queries to access information from your knowledge graph of entities within individual workspaces.  The ExecuteQuery action only works with Amazon Web Services Java SDK2. ExecuteQuery will not work with any Amazon Web Services Java SDK version &lt; 2.x.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func executeQueryPaginator(
        _ input: ExecuteQueryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ExecuteQueryRequest, ExecuteQueryResponse> {
        return .init(
            input: input,
            command: self.executeQuery,
            inputKey: \ExecuteQueryRequest.nextToken,
            outputKey: \ExecuteQueryResponse.nextToken,
            logger: logger
        )
    }

    /// Gets the property values for a component, component type, entity, or workspace. You must specify a value for either componentName, componentTypeId, entityId, or workspaceId.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getPropertyValuePaginator(
        _ input: GetPropertyValueRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetPropertyValueRequest, GetPropertyValueResponse> {
        return .init(
            input: input,
            command: self.getPropertyValue,
            inputKey: \GetPropertyValueRequest.nextToken,
            outputKey: \GetPropertyValueResponse.nextToken,
            logger: logger
        )
    }

    /// Retrieves information about the history of a time series property value for a component, component type, entity, or workspace. You must specify a value for workspaceId. For entity-specific queries, specify values for componentName and entityId. For cross-entity quries, specify a value for componentTypeId.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getPropertyValueHistoryPaginator(
        _ input: GetPropertyValueHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetPropertyValueHistoryRequest, GetPropertyValueHistoryResponse> {
        return .init(
            input: input,
            command: self.getPropertyValueHistory,
            inputKey: \GetPropertyValueHistoryRequest.nextToken,
            outputKey: \GetPropertyValueHistoryResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all component types in a workspace.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listComponentTypesPaginator(
        _ input: ListComponentTypesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListComponentTypesRequest, ListComponentTypesResponse> {
        return .init(
            input: input,
            command: self.listComponentTypes,
            inputKey: \ListComponentTypesRequest.nextToken,
            outputKey: \ListComponentTypesResponse.nextToken,
            logger: logger
        )
    }

    /// This API lists the components of an entity.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listComponentsPaginator(
        _ input: ListComponentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListComponentsRequest, ListComponentsResponse> {
        return .init(
            input: input,
            command: self.listComponents,
            inputKey: \ListComponentsRequest.nextToken,
            outputKey: \ListComponentsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all entities in a workspace.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEntitiesPaginator(
        _ input: ListEntitiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEntitiesRequest, ListEntitiesResponse> {
        return .init(
            input: input,
            command: self.listEntities,
            inputKey: \ListEntitiesRequest.nextToken,
            outputKey: \ListEntitiesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the metadata transfer jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMetadataTransferJobsPaginator(
        _ input: ListMetadataTransferJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMetadataTransferJobsRequest, ListMetadataTransferJobsResponse> {
        return .init(
            input: input,
            command: self.listMetadataTransferJobs,
            inputKey: \ListMetadataTransferJobsRequest.nextToken,
            outputKey: \ListMetadataTransferJobsResponse.nextToken,
            logger: logger
        )
    }

    /// This API lists the properties of a component.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPropertiesPaginator(
        _ input: ListPropertiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPropertiesRequest, ListPropertiesResponse> {
        return .init(
            input: input,
            command: self.listProperties,
            inputKey: \ListPropertiesRequest.nextToken,
            outputKey: \ListPropertiesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all scenes in a workspace.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listScenesPaginator(
        _ input: ListScenesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListScenesRequest, ListScenesResponse> {
        return .init(
            input: input,
            command: self.listScenes,
            inputKey: \ListScenesRequest.nextToken,
            outputKey: \ListScenesResponse.nextToken,
            logger: logger
        )
    }

    /// List all SyncJobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSyncJobsPaginator(
        _ input: ListSyncJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSyncJobsRequest, ListSyncJobsResponse> {
        return .init(
            input: input,
            command: self.listSyncJobs,
            inputKey: \ListSyncJobsRequest.nextToken,
            outputKey: \ListSyncJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the sync resources.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSyncResourcesPaginator(
        _ input: ListSyncResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSyncResourcesRequest, ListSyncResourcesResponse> {
        return .init(
            input: input,
            command: self.listSyncResources,
            inputKey: \ListSyncResourcesRequest.nextToken,
            outputKey: \ListSyncResourcesResponse.nextToken,
            logger: logger
        )
    }

    /// Retrieves information about workspaces in the current account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkspacesPaginator(
        _ input: ListWorkspacesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkspacesRequest, ListWorkspacesResponse> {
        return .init(
            input: input,
            command: self.listWorkspaces,
            inputKey: \ListWorkspacesRequest.nextToken,
            outputKey: \ListWorkspacesResponse.nextToken,
            logger: logger
        )
    }
}

extension IoTTwinMaker.ExecuteQueryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ExecuteQueryRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            queryStatement: self.queryStatement,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.GetPropertyValueHistoryRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.GetPropertyValueHistoryRequest {
        return .init(
            componentName: self.componentName,
            componentPath: self.componentPath,
            componentTypeId: self.componentTypeId,
            endTime: self.endTime,
            entityId: self.entityId,
            interpolation: self.interpolation,
            maxResults: self.maxResults,
            nextToken: token,
            orderByTime: self.orderByTime,
            propertyFilters: self.propertyFilters,
            selectedProperties: self.selectedProperties,
            startTime: self.startTime,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.GetPropertyValueRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.GetPropertyValueRequest {
        return .init(
            componentName: self.componentName,
            componentPath: self.componentPath,
            componentTypeId: self.componentTypeId,
            entityId: self.entityId,
            maxResults: self.maxResults,
            nextToken: token,
            propertyGroupName: self.propertyGroupName,
            selectedProperties: self.selectedProperties,
            tabularConditions: self.tabularConditions,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.ListComponentTypesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ListComponentTypesRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.ListComponentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ListComponentsRequest {
        return .init(
            componentPath: self.componentPath,
            entityId: self.entityId,
            maxResults: self.maxResults,
            nextToken: token,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.ListEntitiesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ListEntitiesRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.ListMetadataTransferJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ListMetadataTransferJobsRequest {
        return .init(
            destinationType: self.destinationType,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            sourceType: self.sourceType
        )
    }
}

extension IoTTwinMaker.ListPropertiesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ListPropertiesRequest {
        return .init(
            componentName: self.componentName,
            componentPath: self.componentPath,
            entityId: self.entityId,
            maxResults: self.maxResults,
            nextToken: token,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.ListScenesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ListScenesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.ListSyncJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ListSyncJobsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.ListSyncResourcesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ListSyncResourcesRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            syncSource: self.syncSource,
            workspaceId: self.workspaceId
        )
    }
}

extension IoTTwinMaker.ListWorkspacesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> IoTTwinMaker.ListWorkspacesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
