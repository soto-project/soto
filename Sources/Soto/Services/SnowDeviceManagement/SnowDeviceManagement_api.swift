//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS SnowDeviceManagement service.
///
/// Amazon Web Services Snow Device Management documentation.
public struct SnowDeviceManagement: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the SnowDeviceManagement client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "SnowDeviceManagement",
            serviceIdentifier: "snow-device-management",
            serviceProtocol: .restjson,
            apiVersion: "2021-08-04",
            endpoint: endpoint,
            errorType: SnowDeviceManagementErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Sends a cancel request for a specified task. You can cancel a task only if it's still in a QUEUED state. Tasks that are already running can't be cancelled.  A task might still run if it's processed from the queue before the CancelTask operation changes the task's state.
    @Sendable
    public func cancelTask(_ input: CancelTaskInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelTaskOutput {
        return try await self.client.execute(
            operation: "CancelTask", 
            path: "/task/{taskId}/cancel", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Instructs one or more devices to start a task, such as unlocking or rebooting.
    @Sendable
    public func createTask(_ input: CreateTaskInput, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTaskOutput {
        return try await self.client.execute(
            operation: "CreateTask", 
            path: "/task", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Checks device-specific information, such as the device type, software version, IP addresses, and lock status.
    @Sendable
    public func describeDevice(_ input: DescribeDeviceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeviceOutput {
        return try await self.client.execute(
            operation: "DescribeDevice", 
            path: "/managed-device/{managedDeviceId}/describe", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Checks the current state of the Amazon EC2 instances. The output is similar to describeDevice, but the results are sourced from the device cache in the Amazon Web Services Cloud and include a subset of the available fields.
    @Sendable
    public func describeDeviceEc2Instances(_ input: DescribeDeviceEc2Input, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeviceEc2Output {
        return try await self.client.execute(
            operation: "DescribeDeviceEc2Instances", 
            path: "/managed-device/{managedDeviceId}/resources/ec2/describe", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Checks the status of a remote task running on one or more target devices.
    @Sendable
    public func describeExecution(_ input: DescribeExecutionInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeExecutionOutput {
        return try await self.client.execute(
            operation: "DescribeExecution", 
            path: "/task/{taskId}/execution/{managedDeviceId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Checks the metadata for a given task on a device.
    @Sendable
    public func describeTask(_ input: DescribeTaskInput, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTaskOutput {
        return try await self.client.execute(
            operation: "DescribeTask", 
            path: "/task/{taskId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of the Amazon Web Services resources available for a device. Currently, Amazon EC2 instances are the only supported resource type.
    @Sendable
    public func listDeviceResources(_ input: ListDeviceResourcesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDeviceResourcesOutput {
        return try await self.client.execute(
            operation: "ListDeviceResources", 
            path: "/managed-device/{managedDeviceId}/resources", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of all devices on your Amazon Web Services account that have Amazon Web Services Snow Device Management enabled in the Amazon Web Services Region where the command is run.
    @Sendable
    public func listDevices(_ input: ListDevicesInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDevicesOutput {
        return try await self.client.execute(
            operation: "ListDevices", 
            path: "/managed-devices", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the status of tasks for one or more target devices.
    @Sendable
    public func listExecutions(_ input: ListExecutionsInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListExecutionsOutput {
        return try await self.client.execute(
            operation: "ListExecutions", 
            path: "/executions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of tags for a managed device or task.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceOutput {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of tasks that can be filtered by state.
    @Sendable
    public func listTasks(_ input: ListTasksInput, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTasksOutput {
        return try await self.client.execute(
            operation: "ListTasks", 
            path: "/tasks", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds or replaces tags on a device or task.
    @Sendable
    public func tagResource(_ input: TagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes a tag from a device or task.
    @Sendable
    public func untagResource(_ input: UntagResourceInput, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension SnowDeviceManagement {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: SnowDeviceManagement, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SnowDeviceManagement {
    /// Returns a list of the Amazon Web Services resources available for a device. Currently, Amazon EC2 instances are the only supported resource type.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDeviceResourcesPaginator(
        _ input: ListDeviceResourcesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDeviceResourcesInput, ListDeviceResourcesOutput> {
        return .init(
            input: input,
            command: self.listDeviceResources,
            inputKey: \ListDeviceResourcesInput.nextToken,
            outputKey: \ListDeviceResourcesOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of all devices on your Amazon Web Services account that have Amazon Web Services Snow Device Management enabled in the Amazon Web Services Region where the command is run.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDevicesPaginator(
        _ input: ListDevicesInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDevicesInput, ListDevicesOutput> {
        return .init(
            input: input,
            command: self.listDevices,
            inputKey: \ListDevicesInput.nextToken,
            outputKey: \ListDevicesOutput.nextToken,
            logger: logger
        )
    }

    /// Returns the status of tasks for one or more target devices.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listExecutionsPaginator(
        _ input: ListExecutionsInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListExecutionsInput, ListExecutionsOutput> {
        return .init(
            input: input,
            command: self.listExecutions,
            inputKey: \ListExecutionsInput.nextToken,
            outputKey: \ListExecutionsOutput.nextToken,
            logger: logger
        )
    }

    /// Returns a list of tasks that can be filtered by state.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTasksPaginator(
        _ input: ListTasksInput,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTasksInput, ListTasksOutput> {
        return .init(
            input: input,
            command: self.listTasks,
            inputKey: \ListTasksInput.nextToken,
            outputKey: \ListTasksOutput.nextToken,
            logger: logger
        )
    }
}

extension SnowDeviceManagement.ListDeviceResourcesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SnowDeviceManagement.ListDeviceResourcesInput {
        return .init(
            managedDeviceId: self.managedDeviceId,
            maxResults: self.maxResults,
            nextToken: token,
            type: self.type
        )
    }
}

extension SnowDeviceManagement.ListDevicesInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SnowDeviceManagement.ListDevicesInput {
        return .init(
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension SnowDeviceManagement.ListExecutionsInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SnowDeviceManagement.ListExecutionsInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            state: self.state,
            taskId: self.taskId
        )
    }
}

extension SnowDeviceManagement.ListTasksInput: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> SnowDeviceManagement.ListTasksInput {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            state: self.state
        )
    }
}
