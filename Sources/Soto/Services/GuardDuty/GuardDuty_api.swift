//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS GuardDuty service.
///
/// Amazon GuardDuty is a continuous security monitoring service that analyzes and processes the following foundational data sources - VPC flow logs, Amazon Web Services CloudTrail management event logs, CloudTrail S3 data event logs, EKS audit logs, DNS logs, Amazon EBS volume data, runtime activity belonging to container workloads, such  as Amazon EKS, Amazon ECS (including Amazon Web Services Fargate), and Amazon EC2 instances. It uses threat intelligence feeds, such as lists of malicious IPs and domains, and machine learning to identify unexpected, potentially unauthorized, and malicious activity within your Amazon Web Services environment. This can include issues like escalations of privileges, uses of exposed credentials, or communication with malicious IPs, domains, or presence of malware on your Amazon EC2 instances and container workloads. For example, GuardDuty can detect compromised EC2 instances and container workloads serving malware, or mining bitcoin.  GuardDuty also monitors Amazon Web Services account access behavior for signs of compromise, such as unauthorized infrastructure deployments like EC2 instances deployed in a Region that has never been used, or unusual API calls like a password policy change to reduce password strength.  GuardDuty informs you about the status of your Amazon Web Services environment by producing security findings that you can view in the GuardDuty console or through Amazon EventBridge. For more information, see the  Amazon GuardDuty User Guide .
public struct GuardDuty: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the GuardDuty client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "GuardDuty",
            serviceIdentifier: "guardduty",
            serviceProtocol: .restjson,
            apiVersion: "2017-11-28",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: GuardDutyErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "guardduty-fips.us-east-1.amazonaws.com",
            "us-east-2": "guardduty-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "guardduty.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "guardduty.us-gov-west-1.amazonaws.com",
            "us-west-1": "guardduty-fips.us-west-1.amazonaws.com",
            "us-west-2": "guardduty-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Accepts the invitation to be a member account and get monitored by a GuardDuty administrator account that sent the invitation.
    @Sendable
    public func acceptAdministratorInvitation(_ input: AcceptAdministratorInvitationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptAdministratorInvitationResponse {
        return try await self.client.execute(
            operation: "AcceptAdministratorInvitation", 
            path: "/detector/{DetectorId}/administrator", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Accepts the invitation to be monitored by a GuardDuty administrator account.
    @available(*, deprecated, message: "This operation is deprecated, use AcceptAdministratorInvitation instead")
    @Sendable
    public func acceptInvitation(_ input: AcceptInvitationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptInvitationResponse {
        return try await self.client.execute(
            operation: "AcceptInvitation", 
            path: "/detector/{DetectorId}/master", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Archives GuardDuty findings that are specified by the list of finding IDs.  Only the administrator account can archive findings. Member accounts don't have permission to archive findings from their accounts.
    @Sendable
    public func archiveFindings(_ input: ArchiveFindingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ArchiveFindingsResponse {
        return try await self.client.execute(
            operation: "ArchiveFindings", 
            path: "/detector/{DetectorId}/findings/archive", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a single GuardDuty detector. A detector is a resource that represents the GuardDuty service. To start using GuardDuty, you must create a detector in each Region where you enable the service. You can have only one detector per account per Region. All data sources are enabled in a new detector by default.   When you don't specify any features, with an  exception to RUNTIME_MONITORING, all the optional features are  enabled by default.   When you specify some of the features, any feature that is not specified in the  API call gets enabled by default, with an exception to RUNTIME_MONITORING.    Specifying both EKS Runtime Monitoring (EKS_RUNTIME_MONITORING) and Runtime Monitoring (RUNTIME_MONITORING) will cause an error.  You can add only one of these two features because Runtime Monitoring already includes the  threat detection for Amazon EKS resources. For more information, see Runtime Monitoring. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func createDetector(_ input: CreateDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDetectorResponse {
        return try await self.client.execute(
            operation: "CreateDetector", 
            path: "/detector", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a filter using the specified finding criteria. The maximum number of saved filters per Amazon Web Services account per Region is 100. For more information, see Quotas for GuardDuty.
    @Sendable
    public func createFilter(_ input: CreateFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFilterResponse {
        return try await self.client.execute(
            operation: "CreateFilter", 
            path: "/detector/{DetectorId}/filter", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new IPSet, which is called a trusted IP list in the console user interface. An IPSet is a list of IP addresses that are trusted for secure communication with Amazon Web Services infrastructure and applications. GuardDuty doesn't generate findings for IP addresses that are included in IPSets. Only users from the administrator account can use this operation.
    @Sendable
    public func createIPSet(_ input: CreateIPSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIPSetResponse {
        return try await self.client.execute(
            operation: "CreateIPSet", 
            path: "/detector/{DetectorId}/ipset", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates member accounts of the current Amazon Web Services account by specifying a list of Amazon Web Services account IDs. This step is a prerequisite for managing the associated member accounts either by invitation or through an organization. As a delegated administrator, using CreateMembers will enable GuardDuty in  the added member accounts, with the exception of the organization delegated administrator account. A delegated administrator must enable GuardDuty  prior to being added as a member. When you use CreateMembers as an Organizations delegated  administrator, GuardDuty applies your organization's auto-enable settings to the member accounts in this request, irrespective of the accounts being new or existing members. For  more information about the existing auto-enable settings for your organization, see DescribeOrganizationConfiguration. If you disassociate a member account that was added by invitation, the member account details  obtained from this API, including the associated email addresses, will be retained.  This is done so that the delegated administrator can invoke the InviteMembers API without the need to invoke the CreateMembers API again. To  remove the details associated with a member account, the delegated administrator must invoke the  DeleteMembers API.  When the member accounts added through Organizations are later disassociated, you (administrator) can't invite them by calling the InviteMembers API. You can create an association with these member accounts again only by calling the CreateMembers API.
    @Sendable
    public func createMembers(_ input: CreateMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMembersResponse {
        return try await self.client.execute(
            operation: "CreateMembers", 
            path: "/detector/{DetectorId}/member", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a publishing destination to export findings to. The resource to export findings to must exist before you use this operation.
    @Sendable
    public func createPublishingDestination(_ input: CreatePublishingDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePublishingDestinationResponse {
        return try await self.client.execute(
            operation: "CreatePublishingDestination", 
            path: "/detector/{DetectorId}/publishingDestination", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Generates sample findings of types specified by the list of finding types. If 'NULL' is specified for findingTypes, the API generates sample findings of all supported finding types.
    @Sendable
    public func createSampleFindings(_ input: CreateSampleFindingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSampleFindingsResponse {
        return try await self.client.execute(
            operation: "CreateSampleFindings", 
            path: "/detector/{DetectorId}/findings/create", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new ThreatIntelSet. ThreatIntelSets consist of known malicious IP addresses. GuardDuty generates findings based on ThreatIntelSets. Only users of the administrator account can use this operation.
    @Sendable
    public func createThreatIntelSet(_ input: CreateThreatIntelSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateThreatIntelSetResponse {
        return try await self.client.execute(
            operation: "CreateThreatIntelSet", 
            path: "/detector/{DetectorId}/threatintelset", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Declines invitations sent to the current member account by Amazon Web Services accounts specified by their account IDs.
    @Sendable
    public func declineInvitations(_ input: DeclineInvitationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeclineInvitationsResponse {
        return try await self.client.execute(
            operation: "DeclineInvitations", 
            path: "/invitation/decline", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Amazon GuardDuty detector that is specified by the detector ID.
    @Sendable
    public func deleteDetector(_ input: DeleteDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteDetectorResponse {
        return try await self.client.execute(
            operation: "DeleteDetector", 
            path: "/detector/{DetectorId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the filter specified by the filter name.
    @Sendable
    public func deleteFilter(_ input: DeleteFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFilterResponse {
        return try await self.client.execute(
            operation: "DeleteFilter", 
            path: "/detector/{DetectorId}/filter/{FilterName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the IPSet specified by the ipSetId. IPSets are called trusted IP lists in the console user interface.
    @Sendable
    public func deleteIPSet(_ input: DeleteIPSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIPSetResponse {
        return try await self.client.execute(
            operation: "DeleteIPSet", 
            path: "/detector/{DetectorId}/ipset/{IpSetId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes invitations sent to the current member account by Amazon Web Services accounts specified by their account IDs.
    @Sendable
    public func deleteInvitations(_ input: DeleteInvitationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteInvitationsResponse {
        return try await self.client.execute(
            operation: "DeleteInvitations", 
            path: "/invitation/delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes GuardDuty member accounts (to the current GuardDuty administrator account) specified by the account IDs. With autoEnableOrganizationMembers configuration for your organization set to ALL, you'll receive an error if you attempt to disable GuardDuty for a member account in your organization.
    @Sendable
    public func deleteMembers(_ input: DeleteMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMembersResponse {
        return try await self.client.execute(
            operation: "DeleteMembers", 
            path: "/detector/{DetectorId}/member/delete", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the publishing definition with the specified destinationId.
    @Sendable
    public func deletePublishingDestination(_ input: DeletePublishingDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePublishingDestinationResponse {
        return try await self.client.execute(
            operation: "DeletePublishingDestination", 
            path: "/detector/{DetectorId}/publishingDestination/{DestinationId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the ThreatIntelSet specified by the ThreatIntelSet ID.
    @Sendable
    public func deleteThreatIntelSet(_ input: DeleteThreatIntelSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteThreatIntelSetResponse {
        return try await self.client.execute(
            operation: "DeleteThreatIntelSet", 
            path: "/detector/{DetectorId}/threatintelset/{ThreatIntelSetId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of malware scans. Each member account can view the malware scans for their own accounts. An administrator can view the malware scans for all the member accounts. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func describeMalwareScans(_ input: DescribeMalwareScansRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeMalwareScansResponse {
        return try await self.client.execute(
            operation: "DescribeMalwareScans", 
            path: "/detector/{DetectorId}/malware-scans", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the account selected as the delegated administrator for GuardDuty. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func describeOrganizationConfiguration(_ input: DescribeOrganizationConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeOrganizationConfigurationResponse {
        return try await self.client.execute(
            operation: "DescribeOrganizationConfiguration", 
            path: "/detector/{DetectorId}/admin", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the publishing destination specified by the provided destinationId.
    @Sendable
    public func describePublishingDestination(_ input: DescribePublishingDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePublishingDestinationResponse {
        return try await self.client.execute(
            operation: "DescribePublishingDestination", 
            path: "/detector/{DetectorId}/publishingDestination/{DestinationId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the existing GuardDuty delegated administrator of the organization. Only the organization's management account can run this  API operation.
    @Sendable
    public func disableOrganizationAdminAccount(_ input: DisableOrganizationAdminAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableOrganizationAdminAccountResponse {
        return try await self.client.execute(
            operation: "DisableOrganizationAdminAccount", 
            path: "/admin/disable", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates the current GuardDuty member account from its administrator account. When you  disassociate an invited member from a GuardDuty delegated administrator, the member account details  obtained from the CreateMembers API, including the associated email addresses, are retained. This is  done so that the delegated administrator can invoke the InviteMembers API without the need to invoke the CreateMembers API again. To  remove the details associated with a member account, the delegated administrator must invoke the  DeleteMembers API.  With autoEnableOrganizationMembers configuration for your organization set to ALL, you'll receive an error if you attempt to disable GuardDuty in a member account.
    @Sendable
    public func disassociateFromAdministratorAccount(_ input: DisassociateFromAdministratorAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateFromAdministratorAccountResponse {
        return try await self.client.execute(
            operation: "DisassociateFromAdministratorAccount", 
            path: "/detector/{DetectorId}/administrator/disassociate", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates the current GuardDuty member account from its administrator account. When you  disassociate an invited member from a GuardDuty delegated administrator, the member account details  obtained from the CreateMembers API, including the associated email addresses, are retained. This is  done so that the delegated administrator can invoke the InviteMembers API without the need to invoke the CreateMembers API again. To  remove the details associated with a member account, the delegated administrator must invoke the  DeleteMembers API.
    @available(*, deprecated, message: "This operation is deprecated, use DisassociateFromAdministratorAccount instead")
    @Sendable
    public func disassociateFromMasterAccount(_ input: DisassociateFromMasterAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateFromMasterAccountResponse {
        return try await self.client.execute(
            operation: "DisassociateFromMasterAccount", 
            path: "/detector/{DetectorId}/master/disassociate", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Disassociates GuardDuty member accounts (from the current administrator account) specified by the account IDs. When you  disassociate an invited member from a GuardDuty delegated administrator, the member account details  obtained from the CreateMembers API, including the associated email addresses, are retained. This is  done so that the delegated administrator can invoke the InviteMembers API without the need to invoke the CreateMembers API again. To  remove the details associated with a member account, the delegated administrator must invoke the  DeleteMembers API.  With autoEnableOrganizationMembers configuration for your organization set to ALL, you'll receive an error if you attempt to disassociate a member account before removing them from your organization. If you disassociate a member account that was added by invitation, the member account details  obtained from this API, including the associated email addresses, will be retained.  This is done so that the delegated administrator can invoke the InviteMembers API without the need to invoke the CreateMembers API again. To  remove the details associated with a member account, the delegated administrator must invoke the  DeleteMembers API.  When the member accounts added through Organizations are later disassociated, you (administrator) can't invite them by calling the InviteMembers API. You can create an association with these member accounts again only by calling the CreateMembers API.
    @Sendable
    public func disassociateMembers(_ input: DisassociateMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateMembersResponse {
        return try await self.client.execute(
            operation: "DisassociateMembers", 
            path: "/detector/{DetectorId}/member/disassociate", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Designates an Amazon Web Services account within the organization as your GuardDuty delegated administrator. Only the organization's management account can run this  API operation.
    @Sendable
    public func enableOrganizationAdminAccount(_ input: EnableOrganizationAdminAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableOrganizationAdminAccountResponse {
        return try await self.client.execute(
            operation: "EnableOrganizationAdminAccount", 
            path: "/admin/enable", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides the details of the GuardDuty administrator account associated with the current GuardDuty member account.  If the organization's management account or a delegated administrator runs this API,  it will return success (HTTP 200) but no content.
    @Sendable
    public func getAdministratorAccount(_ input: GetAdministratorAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAdministratorAccountResponse {
        return try await self.client.execute(
            operation: "GetAdministratorAccount", 
            path: "/detector/{DetectorId}/administrator", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves aggregated statistics for your account. If you are a GuardDuty administrator, you can retrieve the statistics for all the resources associated with the active member accounts in your organization who have enabled Runtime Monitoring and have the GuardDuty security agent running on their resources.
    @Sendable
    public func getCoverageStatistics(_ input: GetCoverageStatisticsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCoverageStatisticsResponse {
        return try await self.client.execute(
            operation: "GetCoverageStatistics", 
            path: "/detector/{DetectorId}/coverage/statistics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves an Amazon GuardDuty detector specified by the detectorId. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func getDetector(_ input: GetDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDetectorResponse {
        return try await self.client.execute(
            operation: "GetDetector", 
            path: "/detector/{DetectorId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the details of the filter specified by the filter name.
    @Sendable
    public func getFilter(_ input: GetFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFilterResponse {
        return try await self.client.execute(
            operation: "GetFilter", 
            path: "/detector/{DetectorId}/filter/{FilterName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes Amazon GuardDuty findings specified by finding IDs.
    @Sendable
    public func getFindings(_ input: GetFindingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFindingsResponse {
        return try await self.client.execute(
            operation: "GetFindings", 
            path: "/detector/{DetectorId}/findings/get", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Amazon GuardDuty findings statistics for the specified detector ID. There might be regional differences because some flags might not be available in all the Regions where GuardDuty is currently supported. For more information, see Regions and endpoints.
    @Sendable
    public func getFindingsStatistics(_ input: GetFindingsStatisticsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFindingsStatisticsResponse {
        return try await self.client.execute(
            operation: "GetFindingsStatistics", 
            path: "/detector/{DetectorId}/findings/statistics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the IPSet specified by the ipSetId.
    @Sendable
    public func getIPSet(_ input: GetIPSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIPSetResponse {
        return try await self.client.execute(
            operation: "GetIPSet", 
            path: "/detector/{DetectorId}/ipset/{IpSetId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the count of all GuardDuty membership invitations that were sent to the current member account except the currently accepted invitation.
    @Sendable
    public func getInvitationsCount(_ input: GetInvitationsCountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetInvitationsCountResponse {
        return try await self.client.execute(
            operation: "GetInvitationsCount", 
            path: "/invitation/count", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the details of the malware scan settings. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func getMalwareScanSettings(_ input: GetMalwareScanSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMalwareScanSettingsResponse {
        return try await self.client.execute(
            operation: "GetMalwareScanSettings", 
            path: "/detector/{DetectorId}/malware-scan-settings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provides the details for the GuardDuty administrator account associated with the current GuardDuty member account.
    @available(*, deprecated, message: "This operation is deprecated, use GetAdministratorAccount instead")
    @Sendable
    public func getMasterAccount(_ input: GetMasterAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMasterAccountResponse {
        return try await self.client.execute(
            operation: "GetMasterAccount", 
            path: "/detector/{DetectorId}/master", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Describes which data sources are enabled for the member account's detector. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func getMemberDetectors(_ input: GetMemberDetectorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMemberDetectorsResponse {
        return try await self.client.execute(
            operation: "GetMemberDetectors", 
            path: "/detector/{DetectorId}/member/detector/get", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves GuardDuty member accounts (of the current GuardDuty administrator account) specified by the account IDs.
    @Sendable
    public func getMembers(_ input: GetMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMembersResponse {
        return try await self.client.execute(
            operation: "GetMembers", 
            path: "/detector/{DetectorId}/member/get", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves how many active member accounts have each feature enabled within GuardDuty. Only a delegated GuardDuty administrator of an organization can run this API. When you create a new organization, it might take up to 24  hours to generate the statistics for the entire organization.
    @Sendable
    public func getOrganizationStatistics(logger: Logger = AWSClient.loggingDisabled) async throws -> GetOrganizationStatisticsResponse {
        return try await self.client.execute(
            operation: "GetOrganizationStatistics", 
            path: "/organization/statistics", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Provides the number of days left for each data source used in the free trial period.
    @Sendable
    public func getRemainingFreeTrialDays(_ input: GetRemainingFreeTrialDaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRemainingFreeTrialDaysResponse {
        return try await self.client.execute(
            operation: "GetRemainingFreeTrialDays", 
            path: "/detector/{DetectorId}/freeTrial/daysRemaining", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the ThreatIntelSet that is specified by the ThreatIntelSet ID.
    @Sendable
    public func getThreatIntelSet(_ input: GetThreatIntelSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetThreatIntelSetResponse {
        return try await self.client.execute(
            operation: "GetThreatIntelSet", 
            path: "/detector/{DetectorId}/threatintelset/{ThreatIntelSetId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Amazon GuardDuty usage statistics over the last 30 days for the specified detector ID. For newly enabled detectors or data sources, the cost returned will include only the usage so far under 30 days. This may differ from the cost metrics in the console, which project usage over 30 days to provide a monthly cost estimate. For more information, see Understanding How Usage Costs are Calculated.
    @Sendable
    public func getUsageStatistics(_ input: GetUsageStatisticsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetUsageStatisticsResponse {
        return try await self.client.execute(
            operation: "GetUsageStatistics", 
            path: "/detector/{DetectorId}/usage/statistics", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Invites Amazon Web Services accounts to become members of an organization administered by the Amazon Web Services account  that invokes this API. If you are using Amazon Web Services Organizations to manage your GuardDuty environment, this step is not needed. For more information, see Managing accounts with organizations. To invite Amazon Web Services accounts, the first step is  to ensure that GuardDuty has been enabled in the potential member accounts. You can now invoke this API to add accounts by invitation. The  invited accounts can either accept or decline the invitation from their GuardDuty accounts. Each invited Amazon Web Services account can  choose to accept the invitation from only one Amazon Web Services account. For more information, see  Managing GuardDuty accounts  by invitation. After the invite has been accepted and you choose to disassociate a member account  (by using DisassociateMembers) from your account,  the details of the member account obtained by invoking CreateMembers, including the  associated email addresses, will be retained.  This is done so that you can invoke InviteMembers without the need to invoke  CreateMembers again. To  remove the details associated with a member account, you must also invoke  DeleteMembers.  If you disassociate a member account that was added by invitation, the member account details  obtained from this API, including the associated email addresses, will be retained.  This is done so that the delegated administrator can invoke the InviteMembers API without the need to invoke the CreateMembers API again. To  remove the details associated with a member account, the delegated administrator must invoke the  DeleteMembers API.  When the member accounts added through Organizations are later disassociated, you (administrator) can't invite them by calling the InviteMembers API. You can create an association with these member accounts again only by calling the CreateMembers API.
    @Sendable
    public func inviteMembers(_ input: InviteMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InviteMembersResponse {
        return try await self.client.execute(
            operation: "InviteMembers", 
            path: "/detector/{DetectorId}/member/invite", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists coverage details for your GuardDuty account. If you're a GuardDuty administrator, you can retrieve all resources associated with the active member accounts in your organization. Make sure the accounts have Runtime Monitoring enabled and GuardDuty agent running on their resources.
    @Sendable
    public func listCoverage(_ input: ListCoverageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCoverageResponse {
        return try await self.client.execute(
            operation: "ListCoverage", 
            path: "/detector/{DetectorId}/coverage", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists detectorIds of all the existing Amazon GuardDuty detector resources.
    @Sendable
    public func listDetectors(_ input: ListDetectorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDetectorsResponse {
        return try await self.client.execute(
            operation: "ListDetectors", 
            path: "/detector", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a paginated list of the current filters.
    @Sendable
    public func listFilters(_ input: ListFiltersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFiltersResponse {
        return try await self.client.execute(
            operation: "ListFilters", 
            path: "/detector/{DetectorId}/filter", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists GuardDuty findings for the specified detector ID. There might be regional differences because some flags might not be available in all the Regions where GuardDuty is currently supported. For more information, see Regions and endpoints.
    @Sendable
    public func listFindings(_ input: ListFindingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFindingsResponse {
        return try await self.client.execute(
            operation: "ListFindings", 
            path: "/detector/{DetectorId}/findings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated administrator account.
    @Sendable
    public func listIPSets(_ input: ListIPSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIPSetsResponse {
        return try await self.client.execute(
            operation: "ListIPSets", 
            path: "/detector/{DetectorId}/ipset", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all GuardDuty membership invitations that were sent to the current Amazon Web Services account.
    @Sendable
    public func listInvitations(_ input: ListInvitationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListInvitationsResponse {
        return try await self.client.execute(
            operation: "ListInvitations", 
            path: "/invitation", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists details about all member accounts for the current GuardDuty administrator account.
    @Sendable
    public func listMembers(_ input: ListMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMembersResponse {
        return try await self.client.execute(
            operation: "ListMembers", 
            path: "/detector/{DetectorId}/member", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the accounts designated as GuardDuty delegated administrators.  Only the organization's management account can run this  API operation.
    @Sendable
    public func listOrganizationAdminAccounts(_ input: ListOrganizationAdminAccountsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListOrganizationAdminAccountsResponse {
        return try await self.client.execute(
            operation: "ListOrganizationAdminAccounts", 
            path: "/admin", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of publishing destinations associated with the specified detectorId.
    @Sendable
    public func listPublishingDestinations(_ input: ListPublishingDestinationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListPublishingDestinationsResponse {
        return try await self.client.execute(
            operation: "ListPublishingDestinations", 
            path: "/detector/{DetectorId}/publishingDestination", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists tags for a resource. Tagging is currently supported for detectors, finding filters, IP sets, threat intel sets, and publishing destination, with a limit of 50 tags per resource.  When invoked, this operation returns all assigned tags for a given resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the administrator account are returned.
    @Sendable
    public func listThreatIntelSets(_ input: ListThreatIntelSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListThreatIntelSetsResponse {
        return try await self.client.execute(
            operation: "ListThreatIntelSets", 
            path: "/detector/{DetectorId}/threatintelset", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Initiates the malware scan. Invoking this API will automatically create the Service-linked role in  the corresponding account. When the malware scan starts, you can use the associated scan ID to track the status of the scan. For more information, see DescribeMalwareScans.
    @Sendable
    public func startMalwareScan(_ input: StartMalwareScanRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMalwareScanResponse {
        return try await self.client.execute(
            operation: "StartMalwareScan", 
            path: "/malware-scan/start", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Turns on GuardDuty monitoring of the specified member accounts. Use this operation to restart monitoring of accounts that you stopped monitoring with the StopMonitoringMembers operation.
    @Sendable
    public func startMonitoringMembers(_ input: StartMonitoringMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartMonitoringMembersResponse {
        return try await self.client.execute(
            operation: "StartMonitoringMembers", 
            path: "/detector/{DetectorId}/member/start", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops GuardDuty monitoring for the specified member accounts. Use the StartMonitoringMembers operation to restart monitoring for those accounts. With autoEnableOrganizationMembers configuration for your organization set to ALL, you'll receive an error if you attempt to stop monitoring the member accounts in your organization.
    @Sendable
    public func stopMonitoringMembers(_ input: StopMonitoringMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopMonitoringMembersResponse {
        return try await self.client.execute(
            operation: "StopMonitoringMembers", 
            path: "/detector/{DetectorId}/member/stop", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds tags to a resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Unarchives GuardDuty findings specified by the findingIds.
    @Sendable
    public func unarchiveFindings(_ input: UnarchiveFindingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UnarchiveFindingsResponse {
        return try await self.client.execute(
            operation: "UnarchiveFindings", 
            path: "/detector/{DetectorId}/findings/unarchive", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes tags from a resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the GuardDuty detector specified by the detector ID. Specifying both EKS Runtime Monitoring (EKS_RUNTIME_MONITORING) and Runtime Monitoring (RUNTIME_MONITORING) will cause an error.  You can add only one of these two features because Runtime Monitoring already includes the  threat detection for Amazon EKS resources. For more information, see Runtime Monitoring. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func updateDetector(_ input: UpdateDetectorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDetectorResponse {
        return try await self.client.execute(
            operation: "UpdateDetector", 
            path: "/detector/{DetectorId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the filter specified by the filter name.
    @Sendable
    public func updateFilter(_ input: UpdateFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFilterResponse {
        return try await self.client.execute(
            operation: "UpdateFilter", 
            path: "/detector/{DetectorId}/filter/{FilterName}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Marks the specified GuardDuty findings as useful or not useful.
    @Sendable
    public func updateFindingsFeedback(_ input: UpdateFindingsFeedbackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFindingsFeedbackResponse {
        return try await self.client.execute(
            operation: "UpdateFindingsFeedback", 
            path: "/detector/{DetectorId}/findings/feedback", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the IPSet specified by the IPSet ID.
    @Sendable
    public func updateIPSet(_ input: UpdateIPSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIPSetResponse {
        return try await self.client.execute(
            operation: "UpdateIPSet", 
            path: "/detector/{DetectorId}/ipset/{IpSetId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the malware scan settings. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func updateMalwareScanSettings(_ input: UpdateMalwareScanSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateMalwareScanSettingsResponse {
        return try await self.client.execute(
            operation: "UpdateMalwareScanSettings", 
            path: "/detector/{DetectorId}/malware-scan-settings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Contains information on member accounts to be updated. Specifying both EKS Runtime Monitoring (EKS_RUNTIME_MONITORING) and Runtime Monitoring (RUNTIME_MONITORING) will cause an error.  You can add only one of these two features because Runtime Monitoring already includes the  threat detection for Amazon EKS resources. For more information, see Runtime Monitoring. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func updateMemberDetectors(_ input: UpdateMemberDetectorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateMemberDetectorsResponse {
        return try await self.client.execute(
            operation: "UpdateMemberDetectors", 
            path: "/detector/{DetectorId}/member/detector/update", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Configures the delegated administrator account with the provided values. You must provide a value for either autoEnableOrganizationMembers or autoEnable, but not both.  Specifying both EKS Runtime Monitoring (EKS_RUNTIME_MONITORING) and Runtime Monitoring (RUNTIME_MONITORING) will cause an error.  You can add only one of these two features because Runtime Monitoring already includes the  threat detection for Amazon EKS resources. For more information, see Runtime Monitoring. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    @Sendable
    public func updateOrganizationConfiguration(_ input: UpdateOrganizationConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateOrganizationConfigurationResponse {
        return try await self.client.execute(
            operation: "UpdateOrganizationConfiguration", 
            path: "/detector/{DetectorId}/admin", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates information about the publishing destination specified by the destinationId.
    @Sendable
    public func updatePublishingDestination(_ input: UpdatePublishingDestinationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdatePublishingDestinationResponse {
        return try await self.client.execute(
            operation: "UpdatePublishingDestination", 
            path: "/detector/{DetectorId}/publishingDestination/{DestinationId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the ThreatIntelSet specified by the ThreatIntelSet ID.
    @Sendable
    public func updateThreatIntelSet(_ input: UpdateThreatIntelSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateThreatIntelSetResponse {
        return try await self.client.execute(
            operation: "UpdateThreatIntelSet", 
            path: "/detector/{DetectorId}/threatintelset/{ThreatIntelSetId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension GuardDuty {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: GuardDuty, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension GuardDuty {
    /// Returns a list of malware scans. Each member account can view the malware scans for their own accounts. An administrator can view the malware scans for all the member accounts. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeMalwareScansPaginator(
        _ input: DescribeMalwareScansRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeMalwareScansRequest, DescribeMalwareScansResponse> {
        return .init(
            input: input,
            command: self.describeMalwareScans,
            inputKey: \DescribeMalwareScansRequest.nextToken,
            outputKey: \DescribeMalwareScansResponse.nextToken,
            logger: logger
        )
    }

    /// Returns information about the account selected as the delegated administrator for GuardDuty. There might be regional differences because some data sources might not be  available in all the Amazon Web Services Regions where GuardDuty is presently supported. For more  information, see Regions and endpoints.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func describeOrganizationConfigurationPaginator(
        _ input: DescribeOrganizationConfigurationRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeOrganizationConfigurationRequest, DescribeOrganizationConfigurationResponse> {
        return .init(
            input: input,
            command: self.describeOrganizationConfiguration,
            inputKey: \DescribeOrganizationConfigurationRequest.nextToken,
            outputKey: \DescribeOrganizationConfigurationResponse.nextToken,
            logger: logger
        )
    }

    /// Lists Amazon GuardDuty usage statistics over the last 30 days for the specified detector ID. For newly enabled detectors or data sources, the cost returned will include only the usage so far under 30 days. This may differ from the cost metrics in the console, which project usage over 30 days to provide a monthly cost estimate. For more information, see Understanding How Usage Costs are Calculated.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getUsageStatisticsPaginator(
        _ input: GetUsageStatisticsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetUsageStatisticsRequest, GetUsageStatisticsResponse> {
        return .init(
            input: input,
            command: self.getUsageStatistics,
            inputKey: \GetUsageStatisticsRequest.nextToken,
            outputKey: \GetUsageStatisticsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists coverage details for your GuardDuty account. If you're a GuardDuty administrator, you can retrieve all resources associated with the active member accounts in your organization. Make sure the accounts have Runtime Monitoring enabled and GuardDuty agent running on their resources.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCoveragePaginator(
        _ input: ListCoverageRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCoverageRequest, ListCoverageResponse> {
        return .init(
            input: input,
            command: self.listCoverage,
            inputKey: \ListCoverageRequest.nextToken,
            outputKey: \ListCoverageResponse.nextToken,
            logger: logger
        )
    }

    /// Lists detectorIds of all the existing Amazon GuardDuty detector resources.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDetectorsPaginator(
        _ input: ListDetectorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDetectorsRequest, ListDetectorsResponse> {
        return .init(
            input: input,
            command: self.listDetectors,
            inputKey: \ListDetectorsRequest.nextToken,
            outputKey: \ListDetectorsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a paginated list of the current filters.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFiltersPaginator(
        _ input: ListFiltersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFiltersRequest, ListFiltersResponse> {
        return .init(
            input: input,
            command: self.listFilters,
            inputKey: \ListFiltersRequest.nextToken,
            outputKey: \ListFiltersResponse.nextToken,
            logger: logger
        )
    }

    /// Lists GuardDuty findings for the specified detector ID. There might be regional differences because some flags might not be available in all the Regions where GuardDuty is currently supported. For more information, see Regions and endpoints.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFindingsPaginator(
        _ input: ListFindingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFindingsRequest, ListFindingsResponse> {
        return .init(
            input: input,
            command: self.listFindings,
            inputKey: \ListFindingsRequest.nextToken,
            outputKey: \ListFindingsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the IPSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the IPSets returned are the IPSets from the associated administrator account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIPSetsPaginator(
        _ input: ListIPSetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIPSetsRequest, ListIPSetsResponse> {
        return .init(
            input: input,
            command: self.listIPSets,
            inputKey: \ListIPSetsRequest.nextToken,
            outputKey: \ListIPSetsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all GuardDuty membership invitations that were sent to the current Amazon Web Services account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listInvitationsPaginator(
        _ input: ListInvitationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListInvitationsRequest, ListInvitationsResponse> {
        return .init(
            input: input,
            command: self.listInvitations,
            inputKey: \ListInvitationsRequest.nextToken,
            outputKey: \ListInvitationsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists details about all member accounts for the current GuardDuty administrator account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMembersPaginator(
        _ input: ListMembersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMembersRequest, ListMembersResponse> {
        return .init(
            input: input,
            command: self.listMembers,
            inputKey: \ListMembersRequest.nextToken,
            outputKey: \ListMembersResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the accounts designated as GuardDuty delegated administrators.  Only the organization's management account can run this  API operation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listOrganizationAdminAccountsPaginator(
        _ input: ListOrganizationAdminAccountsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListOrganizationAdminAccountsRequest, ListOrganizationAdminAccountsResponse> {
        return .init(
            input: input,
            command: self.listOrganizationAdminAccounts,
            inputKey: \ListOrganizationAdminAccountsRequest.nextToken,
            outputKey: \ListOrganizationAdminAccountsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of publishing destinations associated with the specified detectorId.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listPublishingDestinationsPaginator(
        _ input: ListPublishingDestinationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListPublishingDestinationsRequest, ListPublishingDestinationsResponse> {
        return .init(
            input: input,
            command: self.listPublishingDestinations,
            inputKey: \ListPublishingDestinationsRequest.nextToken,
            outputKey: \ListPublishingDestinationsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the ThreatIntelSets of the GuardDuty service specified by the detector ID. If you use this operation from a member account, the ThreatIntelSets associated with the administrator account are returned.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listThreatIntelSetsPaginator(
        _ input: ListThreatIntelSetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListThreatIntelSetsRequest, ListThreatIntelSetsResponse> {
        return .init(
            input: input,
            command: self.listThreatIntelSets,
            inputKey: \ListThreatIntelSetsRequest.nextToken,
            outputKey: \ListThreatIntelSetsResponse.nextToken,
            logger: logger
        )
    }
}

extension GuardDuty.DescribeMalwareScansRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.DescribeMalwareScansRequest {
        return .init(
            detectorId: self.detectorId,
            filterCriteria: self.filterCriteria,
            maxResults: self.maxResults,
            nextToken: token,
            sortCriteria: self.sortCriteria
        )
    }
}

extension GuardDuty.DescribeOrganizationConfigurationRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.DescribeOrganizationConfigurationRequest {
        return .init(
            detectorId: self.detectorId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension GuardDuty.GetUsageStatisticsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.GetUsageStatisticsRequest {
        return .init(
            detectorId: self.detectorId,
            maxResults: self.maxResults,
            nextToken: token,
            unit: self.unit,
            usageCriteria: self.usageCriteria,
            usageStatisticType: self.usageStatisticType
        )
    }
}

extension GuardDuty.ListCoverageRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListCoverageRequest {
        return .init(
            detectorId: self.detectorId,
            filterCriteria: self.filterCriteria,
            maxResults: self.maxResults,
            nextToken: token,
            sortCriteria: self.sortCriteria
        )
    }
}

extension GuardDuty.ListDetectorsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListDetectorsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension GuardDuty.ListFiltersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListFiltersRequest {
        return .init(
            detectorId: self.detectorId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension GuardDuty.ListFindingsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListFindingsRequest {
        return .init(
            detectorId: self.detectorId,
            findingCriteria: self.findingCriteria,
            maxResults: self.maxResults,
            nextToken: token,
            sortCriteria: self.sortCriteria
        )
    }
}

extension GuardDuty.ListIPSetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListIPSetsRequest {
        return .init(
            detectorId: self.detectorId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension GuardDuty.ListInvitationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListInvitationsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension GuardDuty.ListMembersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListMembersRequest {
        return .init(
            detectorId: self.detectorId,
            maxResults: self.maxResults,
            nextToken: token,
            onlyAssociated: self.onlyAssociated
        )
    }
}

extension GuardDuty.ListOrganizationAdminAccountsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListOrganizationAdminAccountsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension GuardDuty.ListPublishingDestinationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListPublishingDestinationsRequest {
        return .init(
            detectorId: self.detectorId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension GuardDuty.ListThreatIntelSetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> GuardDuty.ListThreatIntelSetsRequest {
        return .init(
            detectorId: self.detectorId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
