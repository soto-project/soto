//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS WorkLink service.
///
/// Amazon WorkLink is a cloud-based service that provides secure access to internal websites and web apps from iOS and Android phones. In a single step, your users, such as employees, can access internal websites as efficiently as they access any other public website. They enter a URL in their web browser, or choose a link to an internal website in an email. Amazon WorkLink authenticates the user's access and securely renders authorized internal web content in a secure rendering service in the AWS cloud. Amazon WorkLink doesn't download or store any internal web content on mobile devices.
public struct WorkLink: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the WorkLink client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "WorkLink",
            serviceIdentifier: "worklink",
            serviceProtocol: .restjson,
            apiVersion: "2018-09-25",
            endpoint: endpoint,
            errorType: WorkLinkErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Specifies a domain to be associated to Amazon WorkLink.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func associateDomain(_ input: AssociateDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateDomainResponse {
        try await self.client.execute(
            operation: "AssociateDomain", 
            path: "/associateDomain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specifies a domain to be associated to Amazon WorkLink.
    ///
    /// Parameters:
    ///   - acmCertificateArn: The ARN of an issued ACM certificate that is valid for the domain being associated.
    ///   - displayName: The name to display.
    ///   - domainName: The fully qualified domain name (FQDN).
    ///   - fleetArn: The Amazon Resource Name (ARN) of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func associateDomain(
        acmCertificateArn: String,
        displayName: String? = nil,
        domainName: String,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateDomainResponse {
        let input = AssociateDomainRequest(
            acmCertificateArn: acmCertificateArn, 
            displayName: displayName, 
            domainName: domainName, 
            fleetArn: fleetArn
        )
        return try await self.associateDomain(input, logger: logger)
    }

    /// Associates a website authorization provider with a specified fleet. This is used to authorize users against associated websites in the company network.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func associateWebsiteAuthorizationProvider(_ input: AssociateWebsiteAuthorizationProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateWebsiteAuthorizationProviderResponse {
        try await self.client.execute(
            operation: "AssociateWebsiteAuthorizationProvider", 
            path: "/associateWebsiteAuthorizationProvider", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a website authorization provider with a specified fleet. This is used to authorize users against associated websites in the company network.
    ///
    /// Parameters:
    ///   - authorizationProviderType: The authorization provider type.
    ///   - domainName: The domain name of the authorization provider. This applies only to SAML-based authorization providers.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func associateWebsiteAuthorizationProvider(
        authorizationProviderType: AuthorizationProviderType,
        domainName: String? = nil,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateWebsiteAuthorizationProviderResponse {
        let input = AssociateWebsiteAuthorizationProviderRequest(
            authorizationProviderType: authorizationProviderType, 
            domainName: domainName, 
            fleetArn: fleetArn
        )
        return try await self.associateWebsiteAuthorizationProvider(input, logger: logger)
    }

    /// Imports the root certificate of a certificate authority (CA) used to obtain TLS certificates used by associated websites within the company network.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func associateWebsiteCertificateAuthority(_ input: AssociateWebsiteCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateWebsiteCertificateAuthorityResponse {
        try await self.client.execute(
            operation: "AssociateWebsiteCertificateAuthority", 
            path: "/associateWebsiteCertificateAuthority", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Imports the root certificate of a certificate authority (CA) used to obtain TLS certificates used by associated websites within the company network.
    ///
    /// Parameters:
    ///   - certificate: The root certificate of the CA.
    ///   - displayName: The certificate name to display.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func associateWebsiteCertificateAuthority(
        certificate: String,
        displayName: String? = nil,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateWebsiteCertificateAuthorityResponse {
        let input = AssociateWebsiteCertificateAuthorityRequest(
            certificate: certificate, 
            displayName: displayName, 
            fleetArn: fleetArn
        )
        return try await self.associateWebsiteCertificateAuthority(input, logger: logger)
    }

    /// Creates a fleet. A fleet consists of resources and the configuration that delivers associated websites to authorized users who download and set up the Amazon WorkLink app.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func createFleet(_ input: CreateFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFleetResponse {
        try await self.client.execute(
            operation: "CreateFleet", 
            path: "/createFleet", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a fleet. A fleet consists of resources and the configuration that delivers associated websites to authorized users who download and set up the Amazon WorkLink app.
    ///
    /// Parameters:
    ///   - displayName: The fleet name to display.
    ///   - fleetName: A unique name for the fleet.
    ///   - optimizeForEndUserLocation: The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.
    ///   - tags:  The tags to add to the resource. A tag is a key-value pair.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func createFleet(
        displayName: String? = nil,
        fleetName: String,
        optimizeForEndUserLocation: Bool? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFleetResponse {
        let input = CreateFleetRequest(
            displayName: displayName, 
            fleetName: fleetName, 
            optimizeForEndUserLocation: optimizeForEndUserLocation, 
            tags: tags
        )
        return try await self.createFleet(input, logger: logger)
    }

    /// Deletes a fleet. Prevents users from accessing previously associated websites.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func deleteFleet(_ input: DeleteFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFleetResponse {
        try await self.client.execute(
            operation: "DeleteFleet", 
            path: "/deleteFleet", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a fleet. Prevents users from accessing previously associated websites.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func deleteFleet(
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteFleetResponse {
        let input = DeleteFleetRequest(
            fleetArn: fleetArn
        )
        return try await self.deleteFleet(input, logger: logger)
    }

    /// Describes the configuration for delivering audit streams to the customer account.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func describeAuditStreamConfiguration(_ input: DescribeAuditStreamConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAuditStreamConfigurationResponse {
        try await self.client.execute(
            operation: "DescribeAuditStreamConfiguration", 
            path: "/describeAuditStreamConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the configuration for delivering audit streams to the customer account.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func describeAuditStreamConfiguration(
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAuditStreamConfigurationResponse {
        let input = DescribeAuditStreamConfigurationRequest(
            fleetArn: fleetArn
        )
        return try await self.describeAuditStreamConfiguration(input, logger: logger)
    }

    /// Describes the networking configuration to access the internal websites associated with the specified fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func describeCompanyNetworkConfiguration(_ input: DescribeCompanyNetworkConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCompanyNetworkConfigurationResponse {
        try await self.client.execute(
            operation: "DescribeCompanyNetworkConfiguration", 
            path: "/describeCompanyNetworkConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the networking configuration to access the internal websites associated with the specified fleet.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func describeCompanyNetworkConfiguration(
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCompanyNetworkConfigurationResponse {
        let input = DescribeCompanyNetworkConfigurationRequest(
            fleetArn: fleetArn
        )
        return try await self.describeCompanyNetworkConfiguration(input, logger: logger)
    }

    /// Provides information about a user's device.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func describeDevice(_ input: DescribeDeviceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeviceResponse {
        try await self.client.execute(
            operation: "DescribeDevice", 
            path: "/describeDevice", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides information about a user's device.
    ///
    /// Parameters:
    ///   - deviceId: A unique identifier for a registered user's device.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func describeDevice(
        deviceId: String,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDeviceResponse {
        let input = DescribeDeviceRequest(
            deviceId: deviceId, 
            fleetArn: fleetArn
        )
        return try await self.describeDevice(input, logger: logger)
    }

    /// Describes the device policy configuration for the specified fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func describeDevicePolicyConfiguration(_ input: DescribeDevicePolicyConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDevicePolicyConfigurationResponse {
        try await self.client.execute(
            operation: "DescribeDevicePolicyConfiguration", 
            path: "/describeDevicePolicyConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the device policy configuration for the specified fleet.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func describeDevicePolicyConfiguration(
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDevicePolicyConfigurationResponse {
        let input = DescribeDevicePolicyConfigurationRequest(
            fleetArn: fleetArn
        )
        return try await self.describeDevicePolicyConfiguration(input, logger: logger)
    }

    /// Provides information about the domain.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func describeDomain(_ input: DescribeDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDomainResponse {
        try await self.client.execute(
            operation: "DescribeDomain", 
            path: "/describeDomain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides information about the domain.
    ///
    /// Parameters:
    ///   - domainName: The name of the domain.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func describeDomain(
        domainName: String,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDomainResponse {
        let input = DescribeDomainRequest(
            domainName: domainName, 
            fleetArn: fleetArn
        )
        return try await self.describeDomain(input, logger: logger)
    }

    /// Provides basic information for the specified fleet, excluding identity provider, networking, and device configuration details.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func describeFleetMetadata(_ input: DescribeFleetMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFleetMetadataResponse {
        try await self.client.execute(
            operation: "DescribeFleetMetadata", 
            path: "/describeFleetMetadata", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides basic information for the specified fleet, excluding identity provider, networking, and device configuration details.
    ///
    /// Parameters:
    ///   - fleetArn: The Amazon Resource Name (ARN) of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func describeFleetMetadata(
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFleetMetadataResponse {
        let input = DescribeFleetMetadataRequest(
            fleetArn: fleetArn
        )
        return try await self.describeFleetMetadata(input, logger: logger)
    }

    /// Describes the identity provider configuration of the specified fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func describeIdentityProviderConfiguration(_ input: DescribeIdentityProviderConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIdentityProviderConfigurationResponse {
        try await self.client.execute(
            operation: "DescribeIdentityProviderConfiguration", 
            path: "/describeIdentityProviderConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the identity provider configuration of the specified fleet.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func describeIdentityProviderConfiguration(
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIdentityProviderConfigurationResponse {
        let input = DescribeIdentityProviderConfigurationRequest(
            fleetArn: fleetArn
        )
        return try await self.describeIdentityProviderConfiguration(input, logger: logger)
    }

    /// Provides information about the certificate authority.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func describeWebsiteCertificateAuthority(_ input: DescribeWebsiteCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeWebsiteCertificateAuthorityResponse {
        try await self.client.execute(
            operation: "DescribeWebsiteCertificateAuthority", 
            path: "/describeWebsiteCertificateAuthority", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides information about the certificate authority.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - websiteCaId: A unique identifier for the certificate authority.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func describeWebsiteCertificateAuthority(
        fleetArn: String,
        websiteCaId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeWebsiteCertificateAuthorityResponse {
        let input = DescribeWebsiteCertificateAuthorityRequest(
            fleetArn: fleetArn, 
            websiteCaId: websiteCaId
        )
        return try await self.describeWebsiteCertificateAuthority(input, logger: logger)
    }

    /// Disassociates a domain from Amazon WorkLink. End users lose the ability to access the domain with Amazon WorkLink.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func disassociateDomain(_ input: DisassociateDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateDomainResponse {
        try await self.client.execute(
            operation: "DisassociateDomain", 
            path: "/disassociateDomain", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a domain from Amazon WorkLink. End users lose the ability to access the domain with Amazon WorkLink.
    ///
    /// Parameters:
    ///   - domainName: The name of the domain.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func disassociateDomain(
        domainName: String,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateDomainResponse {
        let input = DisassociateDomainRequest(
            domainName: domainName, 
            fleetArn: fleetArn
        )
        return try await self.disassociateDomain(input, logger: logger)
    }

    /// Disassociates a website authorization provider from a specified fleet. After the disassociation, users can't load any associated websites that require this authorization provider.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func disassociateWebsiteAuthorizationProvider(_ input: DisassociateWebsiteAuthorizationProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateWebsiteAuthorizationProviderResponse {
        try await self.client.execute(
            operation: "DisassociateWebsiteAuthorizationProvider", 
            path: "/disassociateWebsiteAuthorizationProvider", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a website authorization provider from a specified fleet. After the disassociation, users can't load any associated websites that require this authorization provider.
    ///
    /// Parameters:
    ///   - authorizationProviderId: A unique identifier for the authorization provider.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func disassociateWebsiteAuthorizationProvider(
        authorizationProviderId: String,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateWebsiteAuthorizationProviderResponse {
        let input = DisassociateWebsiteAuthorizationProviderRequest(
            authorizationProviderId: authorizationProviderId, 
            fleetArn: fleetArn
        )
        return try await self.disassociateWebsiteAuthorizationProvider(input, logger: logger)
    }

    /// Removes a certificate authority (CA).
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func disassociateWebsiteCertificateAuthority(_ input: DisassociateWebsiteCertificateAuthorityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateWebsiteCertificateAuthorityResponse {
        try await self.client.execute(
            operation: "DisassociateWebsiteCertificateAuthority", 
            path: "/disassociateWebsiteCertificateAuthority", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a certificate authority (CA).
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - websiteCaId: A unique identifier for the CA.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func disassociateWebsiteCertificateAuthority(
        fleetArn: String,
        websiteCaId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateWebsiteCertificateAuthorityResponse {
        let input = DisassociateWebsiteCertificateAuthorityRequest(
            fleetArn: fleetArn, 
            websiteCaId: websiteCaId
        )
        return try await self.disassociateWebsiteCertificateAuthority(input, logger: logger)
    }

    /// Retrieves a list of devices registered with the specified fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func listDevices(_ input: ListDevicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDevicesResponse {
        try await self.client.execute(
            operation: "ListDevices", 
            path: "/listDevices", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of devices registered with the specified fleet.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listDevices(
        fleetArn: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDevicesResponse {
        let input = ListDevicesRequest(
            fleetArn: fleetArn, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listDevices(input, logger: logger)
    }

    /// Retrieves a list of domains associated to a specified fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func listDomains(_ input: ListDomainsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainsResponse {
        try await self.client.execute(
            operation: "ListDomains", 
            path: "/listDomains", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of domains associated to a specified fleet.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listDomains(
        fleetArn: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDomainsResponse {
        let input = ListDomainsRequest(
            fleetArn: fleetArn, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listDomains(input, logger: logger)
    }

    /// Retrieves a list of fleets for the current account and Region.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func listFleets(_ input: ListFleetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFleetsResponse {
        try await self.client.execute(
            operation: "ListFleets", 
            path: "/listFleets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of fleets for the current account and Region.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listFleets(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListFleetsResponse {
        let input = ListFleetsRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listFleets(input, logger: logger)
    }

    /// Retrieves a list of tags for the specified resource.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of tags for the specified resource.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listTagsForResource(
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Retrieves a list of website authorization providers associated with a specified fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func listWebsiteAuthorizationProviders(_ input: ListWebsiteAuthorizationProvidersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWebsiteAuthorizationProvidersResponse {
        try await self.client.execute(
            operation: "ListWebsiteAuthorizationProviders", 
            path: "/listWebsiteAuthorizationProviders", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of website authorization providers associated with a specified fleet.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - nextToken: The pagination token to use to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listWebsiteAuthorizationProviders(
        fleetArn: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListWebsiteAuthorizationProvidersResponse {
        let input = ListWebsiteAuthorizationProvidersRequest(
            fleetArn: fleetArn, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listWebsiteAuthorizationProviders(input, logger: logger)
    }

    /// Retrieves a list of certificate authorities added for the current account and Region.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func listWebsiteCertificateAuthorities(_ input: ListWebsiteCertificateAuthoritiesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWebsiteCertificateAuthoritiesResponse {
        try await self.client.execute(
            operation: "ListWebsiteCertificateAuthorities", 
            path: "/listWebsiteCertificateAuthorities", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of certificate authorities added for the current account and Region.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - nextToken: The pagination token used to retrieve the next page of results for this operation. If this value is null, it retrieves the first page.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listWebsiteCertificateAuthorities(
        fleetArn: String,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListWebsiteCertificateAuthoritiesResponse {
        let input = ListWebsiteCertificateAuthoritiesRequest(
            fleetArn: fleetArn, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listWebsiteCertificateAuthorities(input, logger: logger)
    }

    /// Moves a domain to ACTIVE status if it was in the INACTIVE status.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func restoreDomainAccess(_ input: RestoreDomainAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreDomainAccessResponse {
        try await self.client.execute(
            operation: "RestoreDomainAccess", 
            path: "/restoreDomainAccess", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Moves a domain to ACTIVE status if it was in the INACTIVE status.
    ///
    /// Parameters:
    ///   - domainName: The name of the domain.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func restoreDomainAccess(
        domainName: String,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestoreDomainAccessResponse {
        let input = RestoreDomainAccessRequest(
            domainName: domainName, 
            fleetArn: fleetArn
        )
        return try await self.restoreDomainAccess(input, logger: logger)
    }

    /// Moves a domain to INACTIVE status if it was in the ACTIVE status.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func revokeDomainAccess(_ input: RevokeDomainAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeDomainAccessResponse {
        try await self.client.execute(
            operation: "RevokeDomainAccess", 
            path: "/revokeDomainAccess", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Moves a domain to INACTIVE status if it was in the ACTIVE status.
    ///
    /// Parameters:
    ///   - domainName: The name of the domain.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func revokeDomainAccess(
        domainName: String,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RevokeDomainAccessResponse {
        let input = RevokeDomainAccessRequest(
            domainName: domainName, 
            fleetArn: fleetArn
        )
        return try await self.revokeDomainAccess(input, logger: logger)
    }

    /// Signs the user out from all of their devices. The user can sign in again if they have valid credentials.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func signOutUser(_ input: SignOutUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SignOutUserResponse {
        try await self.client.execute(
            operation: "SignOutUser", 
            path: "/signOutUser", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Signs the user out from all of their devices. The user can sign in again if they have valid credentials.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - username: The name of the user.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func signOutUser(
        fleetArn: String,
        username: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SignOutUserResponse {
        let input = SignOutUserRequest(
            fleetArn: fleetArn, 
            username: username
        )
        return try await self.signOutUser(input, logger: logger)
    }

    /// Adds or overwrites one or more tags for the specified resource, such as a fleet. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or overwrites one or more tags for the specified resource, such as a fleet. Each tag consists of a key and an optional value. If a resource already has a tag with the same key, this operation updates its value.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the fleet.
    ///   - tags: The tags to add to the resource. A tag is a key-value pair.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TagResourceResponse {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Removes one or more tags from the specified resource.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/tags/{ResourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes one or more tags from the specified resource.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) of the fleet.
    ///   - tagKeys: The list of tag keys to remove from the resource.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UntagResourceResponse {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates the audit stream configuration for the fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func updateAuditStreamConfiguration(_ input: UpdateAuditStreamConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateAuditStreamConfigurationResponse {
        try await self.client.execute(
            operation: "UpdateAuditStreamConfiguration", 
            path: "/updateAuditStreamConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the audit stream configuration for the fleet.
    ///
    /// Parameters:
    ///   - auditStreamArn: The ARN of the Amazon Kinesis data stream that receives the audit events.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func updateAuditStreamConfiguration(
        auditStreamArn: String? = nil,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateAuditStreamConfigurationResponse {
        let input = UpdateAuditStreamConfigurationRequest(
            auditStreamArn: auditStreamArn, 
            fleetArn: fleetArn
        )
        return try await self.updateAuditStreamConfiguration(input, logger: logger)
    }

    /// Updates the company network configuration for the fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func updateCompanyNetworkConfiguration(_ input: UpdateCompanyNetworkConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCompanyNetworkConfigurationResponse {
        try await self.client.execute(
            operation: "UpdateCompanyNetworkConfiguration", 
            path: "/updateCompanyNetworkConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the company network configuration for the fleet.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - securityGroupIds: The security groups associated with access to the provided subnets.
    ///   - subnetIds: The subnets used for X-ENI connections from Amazon WorkLink rendering containers.
    ///   - vpcId: The VPC with connectivity to associated websites.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func updateCompanyNetworkConfiguration(
        fleetArn: String,
        securityGroupIds: [String],
        subnetIds: [String],
        vpcId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateCompanyNetworkConfigurationResponse {
        let input = UpdateCompanyNetworkConfigurationRequest(
            fleetArn: fleetArn, 
            securityGroupIds: securityGroupIds, 
            subnetIds: subnetIds, 
            vpcId: vpcId
        )
        return try await self.updateCompanyNetworkConfiguration(input, logger: logger)
    }

    /// Updates the device policy configuration for the fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func updateDevicePolicyConfiguration(_ input: UpdateDevicePolicyConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDevicePolicyConfigurationResponse {
        try await self.client.execute(
            operation: "UpdateDevicePolicyConfiguration", 
            path: "/updateDevicePolicyConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the device policy configuration for the fleet.
    ///
    /// Parameters:
    ///   - deviceCaCertificate: The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func updateDevicePolicyConfiguration(
        deviceCaCertificate: String? = nil,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDevicePolicyConfigurationResponse {
        let input = UpdateDevicePolicyConfigurationRequest(
            deviceCaCertificate: deviceCaCertificate, 
            fleetArn: fleetArn
        )
        return try await self.updateDevicePolicyConfiguration(input, logger: logger)
    }

    /// Updates domain metadata, such as DisplayName.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func updateDomainMetadata(_ input: UpdateDomainMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateDomainMetadataResponse {
        try await self.client.execute(
            operation: "UpdateDomainMetadata", 
            path: "/updateDomainMetadata", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates domain metadata, such as DisplayName.
    ///
    /// Parameters:
    ///   - displayName: The name to display.
    ///   - domainName: The name of the domain.
    ///   - fleetArn: The ARN of the fleet.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func updateDomainMetadata(
        displayName: String? = nil,
        domainName: String,
        fleetArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateDomainMetadataResponse {
        let input = UpdateDomainMetadataRequest(
            displayName: displayName, 
            domainName: domainName, 
            fleetArn: fleetArn
        )
        return try await self.updateDomainMetadata(input, logger: logger)
    }

    /// Updates fleet metadata, such as DisplayName.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func updateFleetMetadata(_ input: UpdateFleetMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFleetMetadataResponse {
        try await self.client.execute(
            operation: "UpdateFleetMetadata", 
            path: "/UpdateFleetMetadata", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates fleet metadata, such as DisplayName.
    ///
    /// Parameters:
    ///   - displayName: The fleet name to display. The existing DisplayName is unset if null is passed.
    ///   - fleetArn: The ARN of the fleet.
    ///   - optimizeForEndUserLocation: The option to optimize for better performance by routing traffic through the closest AWS Region to users, which may be outside of your home Region.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func updateFleetMetadata(
        displayName: String? = nil,
        fleetArn: String,
        optimizeForEndUserLocation: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateFleetMetadataResponse {
        let input = UpdateFleetMetadataRequest(
            displayName: displayName, 
            fleetArn: fleetArn, 
            optimizeForEndUserLocation: optimizeForEndUserLocation
        )
        return try await self.updateFleetMetadata(input, logger: logger)
    }

    /// Updates the identity provider configuration for the fleet.
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @Sendable
    @inlinable
    public func updateIdentityProviderConfiguration(_ input: UpdateIdentityProviderConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIdentityProviderConfigurationResponse {
        try await self.client.execute(
            operation: "UpdateIdentityProviderConfiguration", 
            path: "/updateIdentityProviderConfiguration", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the identity provider configuration for the fleet.
    ///
    /// Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - identityProviderSamlMetadata: The SAML metadata document provided by the customer’s identity provider. The existing IdentityProviderSamlMetadata is unset if null is passed.
    ///   - identityProviderType: The type of identity provider.
    ///   - logger: Logger use during operation
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func updateIdentityProviderConfiguration(
        fleetArn: String,
        identityProviderSamlMetadata: String? = nil,
        identityProviderType: IdentityProviderType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateIdentityProviderConfigurationResponse {
        let input = UpdateIdentityProviderConfigurationRequest(
            fleetArn: fleetArn, 
            identityProviderSamlMetadata: identityProviderSamlMetadata, 
            identityProviderType: identityProviderType
        )
        return try await self.updateIdentityProviderConfiguration(input, logger: logger)
    }
}

extension WorkLink {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: WorkLink, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension WorkLink {
    /// Return PaginatorSequence for operation ``listDevices(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listDevicesPaginator(
        _ input: ListDevicesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDevicesRequest, ListDevicesResponse> {
        return .init(
            input: input,
            command: self.listDevices,
            inputKey: \ListDevicesRequest.nextToken,
            outputKey: \ListDevicesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDevices(_:logger:)``.
    ///
    /// - Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listDevicesPaginator(
        fleetArn: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDevicesRequest, ListDevicesResponse> {
        let input = ListDevicesRequest(
            fleetArn: fleetArn, 
            maxResults: maxResults
        )
        return self.listDevicesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDomains(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listDomainsPaginator(
        _ input: ListDomainsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainsRequest, ListDomainsResponse> {
        return .init(
            input: input,
            command: self.listDomains,
            inputKey: \ListDomainsRequest.nextToken,
            outputKey: \ListDomainsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDomains(_:logger:)``.
    ///
    /// - Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listDomainsPaginator(
        fleetArn: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDomainsRequest, ListDomainsResponse> {
        let input = ListDomainsRequest(
            fleetArn: fleetArn, 
            maxResults: maxResults
        )
        return self.listDomainsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listFleetsPaginator(
        _ input: ListFleetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFleetsRequest, ListFleetsResponse> {
        return .init(
            input: input,
            command: self.listFleets,
            inputKey: \ListFleetsRequest.nextToken,
            outputKey: \ListFleetsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listFleetsPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListFleetsRequest, ListFleetsResponse> {
        let input = ListFleetsRequest(
            maxResults: maxResults
        )
        return self.listFleetsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listWebsiteAuthorizationProviders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listWebsiteAuthorizationProvidersPaginator(
        _ input: ListWebsiteAuthorizationProvidersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWebsiteAuthorizationProvidersRequest, ListWebsiteAuthorizationProvidersResponse> {
        return .init(
            input: input,
            command: self.listWebsiteAuthorizationProviders,
            inputKey: \ListWebsiteAuthorizationProvidersRequest.nextToken,
            outputKey: \ListWebsiteAuthorizationProvidersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listWebsiteAuthorizationProviders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listWebsiteAuthorizationProvidersPaginator(
        fleetArn: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListWebsiteAuthorizationProvidersRequest, ListWebsiteAuthorizationProvidersResponse> {
        let input = ListWebsiteAuthorizationProvidersRequest(
            fleetArn: fleetArn, 
            maxResults: maxResults
        )
        return self.listWebsiteAuthorizationProvidersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listWebsiteCertificateAuthorities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listWebsiteCertificateAuthoritiesPaginator(
        _ input: ListWebsiteCertificateAuthoritiesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWebsiteCertificateAuthoritiesRequest, ListWebsiteCertificateAuthoritiesResponse> {
        return .init(
            input: input,
            command: self.listWebsiteCertificateAuthorities,
            inputKey: \ListWebsiteCertificateAuthoritiesRequest.nextToken,
            outputKey: \ListWebsiteCertificateAuthoritiesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listWebsiteCertificateAuthorities(_:logger:)``.
    ///
    /// - Parameters:
    ///   - fleetArn: The ARN of the fleet.
    ///   - maxResults: The maximum number of results to be included in the next page.
    ///   - logger: Logger used for logging
    @available(*, deprecated, message: "Amazon WorkLink is no longer supported. This will be removed in a future version of the SDK.")
    @inlinable
    public func listWebsiteCertificateAuthoritiesPaginator(
        fleetArn: String,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListWebsiteCertificateAuthoritiesRequest, ListWebsiteCertificateAuthoritiesResponse> {
        let input = ListWebsiteCertificateAuthoritiesRequest(
            fleetArn: fleetArn, 
            maxResults: maxResults
        )
        return self.listWebsiteCertificateAuthoritiesPaginator(input, logger: logger)
    }
}

extension WorkLink.ListDevicesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkLink.ListDevicesRequest {
        return .init(
            fleetArn: self.fleetArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension WorkLink.ListDomainsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkLink.ListDomainsRequest {
        return .init(
            fleetArn: self.fleetArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension WorkLink.ListFleetsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkLink.ListFleetsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension WorkLink.ListWebsiteAuthorizationProvidersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkLink.ListWebsiteAuthorizationProvidersRequest {
        return .init(
            fleetArn: self.fleetArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension WorkLink.ListWebsiteCertificateAuthoritiesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> WorkLink.ListWebsiteCertificateAuthoritiesRequest {
        return .init(
            fleetArn: self.fleetArn,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
