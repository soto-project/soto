//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Lambda service.
///
/// Lambda  Overview  Lambda is a compute service that lets you run code without provisioning or managing servers. Lambda runs your code on a high-availability compute infrastructure and performs all of the administration of the compute resources, including server and operating system maintenance, capacity provisioning and automatic scaling, code monitoring and logging. With Lambda, you can run code for virtually any type of application or backend service. For more information about the Lambda service, see What is Lambda in the Lambda Developer Guide. The Lambda API Reference provides information about each of the API methods, including details about the parameters in each API request and response.   You can use Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools to access the API. For installation instructions, see Tools for Amazon Web Services.  For a list of Region-specific endpoints that Lambda supports,  see Lambda endpoints and quotas  in the Amazon Web Services General Reference..  When making the API calls, you will need to authenticate your request by providing a signature. Lambda supports signature version 4. For more information, see Signature Version 4 signing process in the Amazon Web Services General Reference..   CA certificates  Because Amazon Web Services SDKs use the CA certificates from your computer, changes to the certificates on the Amazon Web Services servers can cause connection failures when you attempt to use an SDK. You can prevent these failures by keeping your computer's CA certificates and operating system up-to-date. If you encounter this issue in a corporate environment and do not manage your own computer, you might need to ask an administrator to assist with the update process. The following list shows minimum operating system and Java versions:   Microsoft Windows versions that have updates from January 2005 or later installed contain at least one of the required CAs in their trust list.    Mac OS X 10.4 with Java for Mac OS X 10.4 Release 5 (February 2007), Mac OS X 10.5 (October 2007), and later versions contain at least one of the required CAs in their trust list.    Red Hat Enterprise Linux 5 (March 2007), 6, and 7 and CentOS 5, 6, and 7 all contain at least one of the required CAs in their default trusted CA list.    Java 1.4.2_12 (May 2006), 5 Update 2 (March 2005), and all later versions, including Java 6 (December 2006), 7, and 8, contain at least one of the required CAs in their default trusted CA list.    When accessing the Lambda management console or Lambda API endpoints, whether through browsers or programmatically, you will need to ensure your client machines support any of the following CAs:    Amazon Root CA 1   Starfield Services Root Certificate Authority - G2   Starfield Class 2 Certification Authority   Root certificates from the first two authorities are available from Amazon trust services, but keeping your computer up-to-date is the more straightforward solution. To learn more about ACM-provided certificates, see Amazon Web Services Certificate Manager FAQs.
public struct Lambda: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Lambda client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "Lambda",
            serviceIdentifier: "lambda",
            serviceProtocol: .restjson,
            apiVersion: "2015-03-31",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: LambdaErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "lambda.af-south-1.api.aws",
            "ap-east-1": "lambda.ap-east-1.api.aws",
            "ap-northeast-1": "lambda.ap-northeast-1.api.aws",
            "ap-northeast-2": "lambda.ap-northeast-2.api.aws",
            "ap-northeast-3": "lambda.ap-northeast-3.api.aws",
            "ap-south-1": "lambda.ap-south-1.api.aws",
            "ap-south-2": "lambda.ap-south-2.api.aws",
            "ap-southeast-1": "lambda.ap-southeast-1.api.aws",
            "ap-southeast-2": "lambda.ap-southeast-2.api.aws",
            "ap-southeast-3": "lambda.ap-southeast-3.api.aws",
            "ap-southeast-4": "lambda.ap-southeast-4.api.aws",
            "ca-central-1": "lambda.ca-central-1.api.aws",
            "ca-west-1": "lambda.ca-west-1.api.aws",
            "cn-north-1": "lambda.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "lambda.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "lambda.eu-central-1.api.aws",
            "eu-central-2": "lambda.eu-central-2.api.aws",
            "eu-north-1": "lambda.eu-north-1.api.aws",
            "eu-south-1": "lambda.eu-south-1.api.aws",
            "eu-south-2": "lambda.eu-south-2.api.aws",
            "eu-west-1": "lambda.eu-west-1.api.aws",
            "eu-west-2": "lambda.eu-west-2.api.aws",
            "eu-west-3": "lambda.eu-west-3.api.aws",
            "il-central-1": "lambda.il-central-1.api.aws",
            "me-central-1": "lambda.me-central-1.api.aws",
            "me-south-1": "lambda.me-south-1.api.aws",
            "sa-east-1": "lambda.sa-east-1.api.aws",
            "us-east-1": "lambda.us-east-1.api.aws",
            "us-east-2": "lambda.us-east-2.api.aws",
            "us-gov-east-1": "lambda.us-gov-east-1.api.aws",
            "us-gov-west-1": "lambda.us-gov-west-1.api.aws",
            "us-west-1": "lambda.us-west-1.api.aws",
            "us-west-2": "lambda.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "us-east-1": "lambda-fips.us-east-1.amazonaws.com",
            "us-east-2": "lambda-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "lambda-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "lambda-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "lambda-fips.us-west-1.amazonaws.com",
            "us-west-2": "lambda-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Adds permissions to the resource-based policy of a version of an Lambda layer. Use this action to grant layer usage permission to other accounts. You can grant permission to a single account, all accounts in an organization, or all Amazon Web Services accounts.   To revoke permission, call RemoveLayerVersionPermission with the statement ID that you specified when you added it.
    @Sendable
    public func addLayerVersionPermission(_ input: AddLayerVersionPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddLayerVersionPermissionResponse {
        return try await self.client.execute(
            operation: "AddLayerVersionPermission", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Grants an Amazon Web Service, Amazon Web Services account, or Amazon Web Services organization permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function. Note: Lambda does not support adding policies to version $LATEST. To grant permission to another account, specify the account ID as the Principal. To grant permission to an organization defined in Organizations, specify the organization ID as the PrincipalOrgID. For Amazon Web Services, the principal is a domain-style identifier that the service defines, such as s3.amazonaws.com or sns.amazonaws.com. For Amazon Web Services, you can also specify the ARN of the associated resource as the SourceArn. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. This operation adds a statement to a resource-based permissions policy for the function. For more information about function policies, see Using resource-based policies for Lambda.
    @Sendable
    public func addPermission(_ input: AddPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddPermissionResponse {
        return try await self.client.execute(
            operation: "AddPermission", 
            path: "/2015-03-31/functions/{FunctionName}/policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an alias for a Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a different version. You can also map an alias to split invocation requests between two versions. Use the RoutingConfig parameter to specify a second version and the percentage of invocation requests that it receives.
    @Sendable
    public func createAlias(_ input: CreateAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AliasConfiguration {
        return try await self.client.execute(
            operation: "CreateAlias", 
            path: "/2015-03-31/functions/{FunctionName}/aliases", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a code signing configuration. A code signing configuration defines a list of allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment validation checks fail).
    @Sendable
    public func createCodeSigningConfig(_ input: CreateCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCodeSigningConfigResponse {
        return try await self.client.execute(
            operation: "CreateCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a mapping between an event source and an Lambda function. Lambda reads items from the event source and invokes the function. For details about how to configure different event sources, see the following topics.      Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB    The following error handling options are available only for stream sources (DynamoDB and Kinesis):    BisectBatchOnFunctionError – If the function returns an error, split the batch in two and retry.    DestinationConfig – Send discarded records to an Amazon SQS queue or Amazon SNS topic.    MaximumRecordAgeInSeconds – Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires    MaximumRetryAttempts – Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.    ParallelizationFactor – Process multiple batches from each shard concurrently.   For information about which configuration parameters apply to each event source, see the following topics.     Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB
    @Sendable
    public func createEventSourceMapping(_ input: CreateEventSourceMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EventSourceMappingConfiguration {
        return try await self.client.execute(
            operation: "CreateEventSourceMapping", 
            path: "/2015-03-31/event-source-mappings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a Lambda function. To create a function, you need a deployment package and an execution role. The deployment package is a .zip file archive or container image that contains your function code. The execution role grants the function permission to use Amazon Web Services, such as Amazon CloudWatch Logs for log streaming and X-Ray for request tracing. If the deployment package is a container image, then you set the package type to Image. For a container image, the code property must include the URI of a container image in the Amazon ECR registry. You do not need to specify the handler and runtime properties. If the deployment package is a .zip file archive, then you set the package type to Zip. For a .zip file archive, the code property specifies the location of the .zip file. You must also specify the handler and runtime properties. The code in the deployment package must be compatible with the target instruction set architecture of the function (x86-64 or arm64). If you do not specify the architecture, then the default value is x86-64. When you create a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or modify the function. The State, StateReason, and StateReasonCode fields in the response from GetFunctionConfiguration indicate when the function is ready to invoke. For more information, see Lambda function states. A function has an unpublished version, and can have published versions and aliases. The unpublished version changes when you update your function's code and configuration. A published version is a snapshot of your function code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be changed to map to a different version. Use the Publish parameter to create version 1 of your function from its initial configuration. The other parameters let you configure version-specific and function-level settings. You can modify version-specific settings later with UpdateFunctionConfiguration. Function-level settings apply to both the unpublished and published versions of the function, and include tags (TagResource) and per-function concurrency limits (PutFunctionConcurrency). You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function, specify the ARN of a code-signing configuration. When a user attempts to deploy a code package with UpdateFunctionCode, Lambda checks that the code package has a valid signature from a trusted publisher. The code-signing configuration includes set of signing profiles, which define the trusted publishers for this function. If another Amazon Web Services account or an Amazon Web Service invokes your function, use AddPermission to grant permission by creating a resource-based Identity and Access Management (IAM) policy. You can grant permissions at the function level, on a version, or on an alias. To invoke your function directly, use Invoke. To invoke your function in response to events in other Amazon Web Services, create an event source mapping (CreateEventSourceMapping), or configure a function trigger in the other service. For more information, see Invoking Lambda functions.
    @Sendable
    public func createFunction(_ input: CreateFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        return try await self.client.execute(
            operation: "CreateFunction", 
            path: "/2015-03-31/functions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a Lambda function URL with the specified configuration parameters. A function URL is a dedicated HTTP(S) endpoint that you can use to invoke your function.
    @Sendable
    public func createFunctionUrlConfig(_ input: CreateFunctionUrlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFunctionUrlConfigResponse {
        return try await self.client.execute(
            operation: "CreateFunctionUrlConfig", 
            path: "/2021-10-31/functions/{FunctionName}/url", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Lambda function alias.
    @Sendable
    public func deleteAlias(_ input: DeleteAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteAlias", 
            path: "/2015-03-31/functions/{FunctionName}/aliases/{Name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the code signing configuration. You can delete the code signing configuration only if no function is using it.
    @Sendable
    public func deleteCodeSigningConfig(_ input: DeleteCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCodeSigningConfigResponse {
        return try await self.client.execute(
            operation: "DeleteCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an event source mapping. You can get the identifier of a mapping from the output of ListEventSourceMappings. When you delete an event source mapping, it enters a Deleting state and might not be completely deleted for several seconds.
    @Sendable
    public func deleteEventSourceMapping(_ input: DeleteEventSourceMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EventSourceMappingConfiguration {
        return try await self.client.execute(
            operation: "DeleteEventSourceMapping", 
            path: "/2015-03-31/event-source-mappings/{UUID}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Lambda function. To delete a specific function version, use the Qualifier parameter. Otherwise, all versions and aliases are deleted. This doesn't require the user to have explicit permissions for DeleteAlias. To delete Lambda event source mappings that invoke a function, use DeleteEventSourceMapping. For Amazon Web Services and resources that invoke your function directly, delete the trigger in the service where you originally configured it.
    @Sendable
    public func deleteFunction(_ input: DeleteFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFunction", 
            path: "/2015-03-31/functions/{FunctionName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes the code signing configuration from the function.
    @Sendable
    public func deleteFunctionCodeSigningConfig(_ input: DeleteFunctionCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFunctionCodeSigningConfig", 
            path: "/2020-06-30/functions/{FunctionName}/code-signing-config", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes a concurrent execution limit from a function.
    @Sendable
    public func deleteFunctionConcurrency(_ input: DeleteFunctionConcurrencyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFunctionConcurrency", 
            path: "/2017-10-31/functions/{FunctionName}/concurrency", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the configuration for asynchronous invocation for a function, version, or alias. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    @Sendable
    public func deleteFunctionEventInvokeConfig(_ input: DeleteFunctionEventInvokeConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFunctionEventInvokeConfig", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a Lambda function URL. When you delete a function URL, you can't recover it. Creating a new function URL results in a different URL address.
    @Sendable
    public func deleteFunctionUrlConfig(_ input: DeleteFunctionUrlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteFunctionUrlConfig", 
            path: "/2021-10-31/functions/{FunctionName}/url", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes a version of an Lambda layer. Deleted versions can no longer be viewed or added to functions. To avoid breaking functions, a copy of the version remains in Lambda until no functions refer to it.
    @Sendable
    public func deleteLayerVersion(_ input: DeleteLayerVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteLayerVersion", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes the provisioned concurrency configuration for a function.
    @Sendable
    public func deleteProvisionedConcurrencyConfig(_ input: DeleteProvisionedConcurrencyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "DeleteProvisionedConcurrencyConfig", 
            path: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves details about your account's limits and usage in an Amazon Web Services Region.
    @Sendable
    public func getAccountSettings(_ input: GetAccountSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAccountSettingsResponse {
        return try await self.client.execute(
            operation: "GetAccountSettings", 
            path: "/2016-08-19/account-settings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details about a Lambda function alias.
    @Sendable
    public func getAlias(_ input: GetAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AliasConfiguration {
        return try await self.client.execute(
            operation: "GetAlias", 
            path: "/2015-03-31/functions/{FunctionName}/aliases/{Name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the specified code signing configuration.
    @Sendable
    public func getCodeSigningConfig(_ input: GetCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCodeSigningConfigResponse {
        return try await self.client.execute(
            operation: "GetCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details about an event source mapping. You can get the identifier of a mapping from the output of ListEventSourceMappings.
    @Sendable
    public func getEventSourceMapping(_ input: GetEventSourceMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EventSourceMappingConfiguration {
        return try await self.client.execute(
            operation: "GetEventSourceMapping", 
            path: "/2015-03-31/event-source-mappings/{UUID}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about the function or function version, with a link to download the deployment package that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are returned.
    @Sendable
    public func getFunction(_ input: GetFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionResponse {
        return try await self.client.execute(
            operation: "GetFunction", 
            path: "/2015-03-31/functions/{FunctionName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the code signing configuration for the specified function.
    @Sendable
    public func getFunctionCodeSigningConfig(_ input: GetFunctionCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionCodeSigningConfigResponse {
        return try await self.client.execute(
            operation: "GetFunctionCodeSigningConfig", 
            path: "/2020-06-30/functions/{FunctionName}/code-signing-config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a function, use PutFunctionConcurrency.
    @Sendable
    public func getFunctionConcurrency(_ input: GetFunctionConcurrencyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionConcurrencyResponse {
        return try await self.client.execute(
            operation: "GetFunctionConcurrency", 
            path: "/2019-09-30/functions/{FunctionName}/concurrency", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the version-specific settings of a Lambda function or version. The output includes only options that can vary between versions of a function. To modify these settings, use UpdateFunctionConfiguration. To get all of a function's details, including function-level settings, use GetFunction.
    @Sendable
    public func getFunctionConfiguration(_ input: GetFunctionConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        return try await self.client.execute(
            operation: "GetFunctionConfiguration", 
            path: "/2015-03-31/functions/{FunctionName}/configuration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the configuration for asynchronous invocation for a function, version, or alias. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    @Sendable
    public func getFunctionEventInvokeConfig(_ input: GetFunctionEventInvokeConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionEventInvokeConfig {
        return try await self.client.execute(
            operation: "GetFunctionEventInvokeConfig", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns details about a Lambda function URL.
    @Sendable
    public func getFunctionUrlConfig(_ input: GetFunctionUrlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionUrlConfigResponse {
        return try await self.client.execute(
            operation: "GetFunctionUrlConfig", 
            path: "/2021-10-31/functions/{FunctionName}/url", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a version of an Lambda layer, with a link to download the layer archive that's valid for 10 minutes.
    @Sendable
    public func getLayerVersion(_ input: GetLayerVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLayerVersionResponse {
        return try await self.client.execute(
            operation: "GetLayerVersion", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns information about a version of an Lambda layer, with a link to download the layer archive that's valid for 10 minutes.
    @Sendable
    public func getLayerVersionByArn(_ input: GetLayerVersionByArnRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLayerVersionResponse {
        return try await self.client.execute(
            operation: "GetLayerVersionByArn", 
            path: "/2018-10-31/layers?find=LayerVersion", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the permission policy for a version of an Lambda layer. For more information, see AddLayerVersionPermission.
    @Sendable
    public func getLayerVersionPolicy(_ input: GetLayerVersionPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLayerVersionPolicyResponse {
        return try await self.client.execute(
            operation: "GetLayerVersionPolicy", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the resource-based IAM policy for a function, version, or alias.
    @Sendable
    public func getPolicy(_ input: GetPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPolicyResponse {
        return try await self.client.execute(
            operation: "GetPolicy", 
            path: "/2015-03-31/functions/{FunctionName}/policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the provisioned concurrency configuration for a function's alias or version.
    @Sendable
    public func getProvisionedConcurrencyConfig(_ input: GetProvisionedConcurrencyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProvisionedConcurrencyConfigResponse {
        return try await self.client.execute(
            operation: "GetProvisionedConcurrencyConfig", 
            path: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the runtime management configuration for a function's version. If the runtime update mode is Manual, this includes the ARN of the  runtime version and the runtime update mode. If the runtime update mode is Auto or Function update,  this includes the runtime update mode and null is returned for the ARN. For more information, see Runtime updates.
    @Sendable
    public func getRuntimeManagementConfig(_ input: GetRuntimeManagementConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRuntimeManagementConfigResponse {
        return try await self.client.execute(
            operation: "GetRuntimeManagementConfig", 
            path: "/2021-07-20/functions/{FunctionName}/runtime-management-config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or asynchronously. By default, Lambda invokes your function synchronously (i.e. theInvocationType is RequestResponse). To invoke a function asynchronously, set InvocationType to Event. Lambda passes the ClientContext object to your function for synchronous invocations only. For synchronous invocation, details about the function response, including errors, are included in the response body and headers. For either invocation type, you can find more information in the execution log and trace. When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type, client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an error, Lambda executes the function up to two more times. For more information, see Error handling and automatic retries in Lambda. For asynchronous invocation, Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple times, even if no error occurs. To retain events that were not processed, configure your function with a dead-letter queue. The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that prevent your function from executing, such as permissions errors, quota errors, or issues with your function's code and configuration. For example, Lambda returns TooManyRequestsException if running the function would cause you to exceed a concurrency limit at either the account level (ConcurrentInvocationLimitExceeded) or function level (ReservedFunctionConcurrentInvocationLimitExceeded). For functions with a long timeout, your client might disconnect during synchronous invocation while it waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long connections with timeout or keep-alive settings. This operation requires permission for the lambda:InvokeFunction action. For details on how to set up permissions for cross-account invocations, see Granting function access to other accounts.
    @Sendable
    public func invoke(_ input: InvocationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InvocationResponse {
        return try await self.client.execute(
            operation: "Invoke", 
            path: "/2015-03-31/functions/{FunctionName}/invocations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  For asynchronous function invocation, use Invoke.  Invokes a function asynchronously.  If you do use the InvokeAsync action, note that it doesn't support the use of X-Ray active tracing. Trace ID is not  propagated to the function, even if X-Ray active tracing is turned on.
    @Sendable
    public func invokeAsync(_ input: InvokeAsyncRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InvokeAsyncResponse {
        return try await self.client.execute(
            operation: "InvokeAsync", 
            path: "/2014-11-13/functions/{FunctionName}/invoke-async", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Configure your Lambda functions to stream response payloads back to clients. For more information, see Configuring a Lambda function to stream responses. This operation requires permission for the lambda:InvokeFunction action. For details on how to set up permissions for cross-account invocations, see Granting function access to other accounts.
    @Sendable
    public func invokeWithResponseStream(_ input: InvokeWithResponseStreamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InvokeWithResponseStreamResponse {
        return try await self.client.execute(
            operation: "InvokeWithResponseStream", 
            path: "/2021-11-15/functions/{FunctionName}/response-streaming-invocations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of aliases for a Lambda function.
    @Sendable
    public func listAliases(_ input: ListAliasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAliasesResponse {
        return try await self.client.execute(
            operation: "ListAliases", 
            path: "/2015-03-31/functions/{FunctionName}/aliases", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of code signing configurations. A request returns up to 10,000 configurations per call. You can use the MaxItems parameter to return fewer configurations per call.
    @Sendable
    public func listCodeSigningConfigs(_ input: ListCodeSigningConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCodeSigningConfigsResponse {
        return try await self.client.execute(
            operation: "ListCodeSigningConfigs", 
            path: "/2020-04-22/code-signing-configs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists event source mappings. Specify an EventSourceArn to show only event source mappings for a single event source.
    @Sendable
    public func listEventSourceMappings(_ input: ListEventSourceMappingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEventSourceMappingsResponse {
        return try await self.client.execute(
            operation: "ListEventSourceMappings", 
            path: "/2015-03-31/event-source-mappings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a list of configurations for asynchronous invocation for a function. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    @Sendable
    public func listFunctionEventInvokeConfigs(_ input: ListFunctionEventInvokeConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionEventInvokeConfigsResponse {
        return try await self.client.execute(
            operation: "ListFunctionEventInvokeConfigs", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config/list", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of Lambda function URLs for the specified function.
    @Sendable
    public func listFunctionUrlConfigs(_ input: ListFunctionUrlConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionUrlConfigsResponse {
        return try await self.client.execute(
            operation: "ListFunctionUrlConfigs", 
            path: "/2021-10-31/functions/{FunctionName}/urls", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50 functions per call. Set FunctionVersion to ALL to include all published versions of each function in addition to the unpublished version.  The ListFunctions operation returns a subset of the FunctionConfiguration fields. To get the additional fields (State, StateReasonCode, StateReason, LastUpdateStatus, LastUpdateStatusReason, LastUpdateStatusReasonCode,  RuntimeVersionConfig) for a function or version, use GetFunction.
    @Sendable
    public func listFunctions(_ input: ListFunctionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionsResponse {
        return try await self.client.execute(
            operation: "ListFunctions", 
            path: "/2015-03-31/functions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List the functions that use the specified code signing configuration. You can use this method prior to deleting a code signing configuration, to verify that no functions are using it.
    @Sendable
    public func listFunctionsByCodeSigningConfig(_ input: ListFunctionsByCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionsByCodeSigningConfigResponse {
        return try await self.client.execute(
            operation: "ListFunctionsByCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists the versions of an Lambda layer. Versions that have been deleted aren't listed. Specify a runtime identifier to list only versions that indicate that they're compatible with that runtime. Specify a compatible architecture to include only  layer versions that are compatible with that architecture.
    @Sendable
    public func listLayerVersions(_ input: ListLayerVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLayerVersionsResponse {
        return try await self.client.execute(
            operation: "ListLayerVersions", 
            path: "/2018-10-31/layers/{LayerName}/versions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists Lambda layers and shows information about the latest version of each. Specify a runtime identifier to list only layers that indicate that they're compatible with that runtime. Specify a compatible architecture to include only layers that are compatible with that  instruction set architecture.
    @Sendable
    public func listLayers(_ input: ListLayersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLayersResponse {
        return try await self.client.execute(
            operation: "ListLayers", 
            path: "/2018-10-31/layers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves a list of provisioned concurrency configurations for a function.
    @Sendable
    public func listProvisionedConcurrencyConfigs(_ input: ListProvisionedConcurrencyConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProvisionedConcurrencyConfigsResponse {
        return try await self.client.execute(
            operation: "ListProvisionedConcurrencyConfigs", 
            path: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency?List=ALL", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a function's tags. You can also view tags with GetFunction.
    @Sendable
    public func listTags(_ input: ListTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsResponse {
        return try await self.client.execute(
            operation: "ListTags", 
            path: "/2017-03-31/tags/{Resource}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of versions, with the version-specific configuration of each. Lambda returns up to 50 versions per call.
    @Sendable
    public func listVersionsByFunction(_ input: ListVersionsByFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVersionsByFunctionResponse {
        return try await self.client.execute(
            operation: "ListVersionsByFunction", 
            path: "/2015-03-31/functions/{FunctionName}/versions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates an Lambda layer from a ZIP archive. Each time you call PublishLayerVersion with the same layer name, a new version is created. Add layers to your function with CreateFunction or UpdateFunctionConfiguration.
    @Sendable
    public func publishLayerVersion(_ input: PublishLayerVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PublishLayerVersionResponse {
        return try await self.client.execute(
            operation: "PublishLayerVersion", 
            path: "/2018-10-31/layers/{LayerName}/versions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a version from the current code and configuration of a function. Use versions to create a snapshot of your function code and configuration that doesn't change. Lambda doesn't publish a version if the function's configuration and code haven't changed since the last version. Use UpdateFunctionCode or UpdateFunctionConfiguration to update the function before publishing a version. Clients can invoke versions directly or with an alias. To create an alias, use CreateAlias.
    @Sendable
    public func publishVersion(_ input: PublishVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        return try await self.client.execute(
            operation: "PublishVersion", 
            path: "/2015-03-31/functions/{FunctionName}/versions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the code signing configuration for the function. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function.
    @Sendable
    public func putFunctionCodeSigningConfig(_ input: PutFunctionCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutFunctionCodeSigningConfigResponse {
        return try await self.client.execute(
            operation: "PutFunctionCodeSigningConfig", 
            path: "/2020-06-30/functions/{FunctionName}/code-signing-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency level. Concurrency settings apply to the function as a whole, including all published versions and the unpublished version. Reserving concurrency both ensures that your function has capacity to process the specified number of events simultaneously, and prevents it from scaling beyond that level. Use GetFunction to see the current setting for a function. Use GetAccountSettings to see your Regional concurrency limit. You can reserve concurrency for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for functions that aren't configured with a per-function limit. For more information, see Lambda function scaling.
    @Sendable
    public func putFunctionConcurrency(_ input: PutFunctionConcurrencyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Concurrency {
        return try await self.client.execute(
            operation: "PutFunctionConcurrency", 
            path: "/2017-10-31/functions/{FunctionName}/concurrency", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Configures options for asynchronous invocation on a function, version, or alias. If a configuration already exists for a function, version, or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without affecting existing settings for other options, use UpdateFunctionEventInvokeConfig. By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with UpdateFunctionConfiguration. To send an invocation record to a queue, topic, function, or event bus, specify a destination. You can configure separate destinations for successful invocations (on-success) and events that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a dead-letter queue.
    @Sendable
    public func putFunctionEventInvokeConfig(_ input: PutFunctionEventInvokeConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionEventInvokeConfig {
        return try await self.client.execute(
            operation: "PutFunctionEventInvokeConfig", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds a provisioned concurrency configuration to a function's alias or version.
    @Sendable
    public func putProvisionedConcurrencyConfig(_ input: PutProvisionedConcurrencyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutProvisionedConcurrencyConfigResponse {
        return try await self.client.execute(
            operation: "PutProvisionedConcurrencyConfig", 
            path: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Sets the runtime management configuration for a function's version. For more information,  see Runtime updates.
    @Sendable
    public func putRuntimeManagementConfig(_ input: PutRuntimeManagementConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutRuntimeManagementConfigResponse {
        return try await self.client.execute(
            operation: "PutRuntimeManagementConfig", 
            path: "/2021-07-20/functions/{FunctionName}/runtime-management-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes a statement from the permissions policy for a version of an Lambda layer. For more information, see AddLayerVersionPermission.
    @Sendable
    public func removeLayerVersionPermission(_ input: RemoveLayerVersionPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "RemoveLayerVersionPermission", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Revokes function-use permission from an Amazon Web Service or another Amazon Web Services account. You can get the ID of the statement from the output of GetPolicy.
    @Sendable
    public func removePermission(_ input: RemovePermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "RemovePermission", 
            path: "/2015-03-31/functions/{FunctionName}/policy/{StatementId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Adds tags to a function.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/2017-03-31/tags/{Resource}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Removes tags from a function.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/2017-03-31/tags/{Resource}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the configuration of a Lambda function alias.
    @Sendable
    public func updateAlias(_ input: UpdateAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AliasConfiguration {
        return try await self.client.execute(
            operation: "UpdateAlias", 
            path: "/2015-03-31/functions/{FunctionName}/aliases/{Name}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update the code signing configuration. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function.
    @Sendable
    public func updateCodeSigningConfig(_ input: UpdateCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCodeSigningConfigResponse {
        return try await self.client.execute(
            operation: "UpdateCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates an event source mapping. You can change the function that Lambda invokes, or pause invocation and resume later from the same location. For details about how to configure different event sources, see the following topics.      Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB    The following error handling options are available only for stream sources (DynamoDB and Kinesis):    BisectBatchOnFunctionError – If the function returns an error, split the batch in two and retry.    DestinationConfig – Send discarded records to an Amazon SQS queue or Amazon SNS topic.    MaximumRecordAgeInSeconds – Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires    MaximumRetryAttempts – Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.    ParallelizationFactor – Process multiple batches from each shard concurrently.   For information about which configuration parameters apply to each event source, see the following topics.     Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB
    @Sendable
    public func updateEventSourceMapping(_ input: UpdateEventSourceMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EventSourceMappingConfiguration {
        return try await self.client.execute(
            operation: "UpdateEventSourceMapping", 
            path: "/2015-03-31/event-source-mappings/{UUID}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed by a trusted publisher. For more information, see Configuring code signing for Lambda. If the function's package type is Image, then you must specify the code package in ImageUri as the URI of a container image in the Amazon ECR registry. If the function's package type is Zip, then you must specify the deployment package as a .zip file archive. Enter the Amazon S3 bucket and key of the code .zip file location. You can also provide the function code inline using the ZipFile field. The code in the deployment package must be compatible with the target instruction set architecture of the function (x86-64 or arm64). The function's code is locked when you publish a version. You can't modify the code of a published version, only the unpublished version.  For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if you update the image tag to a new image, Lambda does not automatically update the function.
    @Sendable
    public func updateFunctionCode(_ input: UpdateFunctionCodeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        return try await self.client.execute(
            operation: "UpdateFunctionCode", 
            path: "/2015-03-31/functions/{FunctionName}/code", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Modify the version-specific settings of a Lambda function. When you update a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute. During this time, you can't modify the function, but you can still invoke it. The LastUpdateStatus, LastUpdateStatusReason, and LastUpdateStatusReasonCode fields in the response from GetFunctionConfiguration indicate when the update is complete and the function is processing events with the new configuration. For more information, see Lambda function states. These settings can vary between versions of a function and are locked when you publish a version. You can't modify the configuration of a published version, only the unpublished version. To configure function concurrency, use PutFunctionConcurrency. To grant invoke permissions to an Amazon Web Services account or Amazon Web Service, use AddPermission.
    @Sendable
    public func updateFunctionConfiguration(_ input: UpdateFunctionConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        return try await self.client.execute(
            operation: "UpdateFunctionConfiguration", 
            path: "/2015-03-31/functions/{FunctionName}/configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the configuration for asynchronous invocation for a function, version, or alias. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    @Sendable
    public func updateFunctionEventInvokeConfig(_ input: UpdateFunctionEventInvokeConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionEventInvokeConfig {
        return try await self.client.execute(
            operation: "UpdateFunctionEventInvokeConfig", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the configuration for a Lambda function URL.
    @Sendable
    public func updateFunctionUrlConfig(_ input: UpdateFunctionUrlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFunctionUrlConfigResponse {
        return try await self.client.execute(
            operation: "UpdateFunctionUrlConfig", 
            path: "/2021-10-31/functions/{FunctionName}/url", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension Lambda {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Lambda, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Lambda {
    /// Returns a list of aliases for a Lambda function.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAliasesPaginator(
        _ input: ListAliasesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAliasesRequest, ListAliasesResponse> {
        return .init(
            input: input,
            command: self.listAliases,
            inputKey: \ListAliasesRequest.marker,
            outputKey: \ListAliasesResponse.nextMarker,
            logger: logger
        )
    }

    /// Returns a list of code signing configurations. A request returns up to 10,000 configurations per call. You can use the MaxItems parameter to return fewer configurations per call.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCodeSigningConfigsPaginator(
        _ input: ListCodeSigningConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCodeSigningConfigsRequest, ListCodeSigningConfigsResponse> {
        return .init(
            input: input,
            command: self.listCodeSigningConfigs,
            inputKey: \ListCodeSigningConfigsRequest.marker,
            outputKey: \ListCodeSigningConfigsResponse.nextMarker,
            logger: logger
        )
    }

    /// Lists event source mappings. Specify an EventSourceArn to show only event source mappings for a single event source.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listEventSourceMappingsPaginator(
        _ input: ListEventSourceMappingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEventSourceMappingsRequest, ListEventSourceMappingsResponse> {
        return .init(
            input: input,
            command: self.listEventSourceMappings,
            inputKey: \ListEventSourceMappingsRequest.marker,
            outputKey: \ListEventSourceMappingsResponse.nextMarker,
            logger: logger
        )
    }

    /// Retrieves a list of configurations for asynchronous invocation for a function. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFunctionEventInvokeConfigsPaginator(
        _ input: ListFunctionEventInvokeConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFunctionEventInvokeConfigsRequest, ListFunctionEventInvokeConfigsResponse> {
        return .init(
            input: input,
            command: self.listFunctionEventInvokeConfigs,
            inputKey: \ListFunctionEventInvokeConfigsRequest.marker,
            outputKey: \ListFunctionEventInvokeConfigsResponse.nextMarker,
            logger: logger
        )
    }

    /// Returns a list of Lambda function URLs for the specified function.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFunctionUrlConfigsPaginator(
        _ input: ListFunctionUrlConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFunctionUrlConfigsRequest, ListFunctionUrlConfigsResponse> {
        return .init(
            input: input,
            command: self.listFunctionUrlConfigs,
            inputKey: \ListFunctionUrlConfigsRequest.marker,
            outputKey: \ListFunctionUrlConfigsResponse.nextMarker,
            logger: logger
        )
    }

    /// Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50 functions per call. Set FunctionVersion to ALL to include all published versions of each function in addition to the unpublished version.  The ListFunctions operation returns a subset of the FunctionConfiguration fields. To get the additional fields (State, StateReasonCode, StateReason, LastUpdateStatus, LastUpdateStatusReason, LastUpdateStatusReasonCode,  RuntimeVersionConfig) for a function or version, use GetFunction.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFunctionsPaginator(
        _ input: ListFunctionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFunctionsRequest, ListFunctionsResponse> {
        return .init(
            input: input,
            command: self.listFunctions,
            inputKey: \ListFunctionsRequest.marker,
            outputKey: \ListFunctionsResponse.nextMarker,
            logger: logger
        )
    }

    /// List the functions that use the specified code signing configuration. You can use this method prior to deleting a code signing configuration, to verify that no functions are using it.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFunctionsByCodeSigningConfigPaginator(
        _ input: ListFunctionsByCodeSigningConfigRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFunctionsByCodeSigningConfigRequest, ListFunctionsByCodeSigningConfigResponse> {
        return .init(
            input: input,
            command: self.listFunctionsByCodeSigningConfig,
            inputKey: \ListFunctionsByCodeSigningConfigRequest.marker,
            outputKey: \ListFunctionsByCodeSigningConfigResponse.nextMarker,
            logger: logger
        )
    }

    /// Lists the versions of an Lambda layer. Versions that have been deleted aren't listed. Specify a runtime identifier to list only versions that indicate that they're compatible with that runtime. Specify a compatible architecture to include only  layer versions that are compatible with that architecture.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLayerVersionsPaginator(
        _ input: ListLayerVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLayerVersionsRequest, ListLayerVersionsResponse> {
        return .init(
            input: input,
            command: self.listLayerVersions,
            inputKey: \ListLayerVersionsRequest.marker,
            outputKey: \ListLayerVersionsResponse.nextMarker,
            logger: logger
        )
    }

    /// Lists Lambda layers and shows information about the latest version of each. Specify a runtime identifier to list only layers that indicate that they're compatible with that runtime. Specify a compatible architecture to include only layers that are compatible with that  instruction set architecture.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLayersPaginator(
        _ input: ListLayersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLayersRequest, ListLayersResponse> {
        return .init(
            input: input,
            command: self.listLayers,
            inputKey: \ListLayersRequest.marker,
            outputKey: \ListLayersResponse.nextMarker,
            logger: logger
        )
    }

    /// Retrieves a list of provisioned concurrency configurations for a function.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listProvisionedConcurrencyConfigsPaginator(
        _ input: ListProvisionedConcurrencyConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProvisionedConcurrencyConfigsRequest, ListProvisionedConcurrencyConfigsResponse> {
        return .init(
            input: input,
            command: self.listProvisionedConcurrencyConfigs,
            inputKey: \ListProvisionedConcurrencyConfigsRequest.marker,
            outputKey: \ListProvisionedConcurrencyConfigsResponse.nextMarker,
            logger: logger
        )
    }

    /// Returns a list of versions, with the version-specific configuration of each. Lambda returns up to 50 versions per call.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listVersionsByFunctionPaginator(
        _ input: ListVersionsByFunctionRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListVersionsByFunctionRequest, ListVersionsByFunctionResponse> {
        return .init(
            input: input,
            command: self.listVersionsByFunction,
            inputKey: \ListVersionsByFunctionRequest.marker,
            outputKey: \ListVersionsByFunctionResponse.nextMarker,
            logger: logger
        )
    }
}

extension Lambda.ListAliasesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListAliasesRequest {
        return .init(
            functionName: self.functionName,
            functionVersion: self.functionVersion,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListCodeSigningConfigsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListCodeSigningConfigsRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListEventSourceMappingsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListEventSourceMappingsRequest {
        return .init(
            eventSourceArn: self.eventSourceArn,
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListFunctionEventInvokeConfigsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListFunctionEventInvokeConfigsRequest {
        return .init(
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListFunctionUrlConfigsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListFunctionUrlConfigsRequest {
        return .init(
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListFunctionsByCodeSigningConfigRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListFunctionsByCodeSigningConfigRequest {
        return .init(
            codeSigningConfigArn: self.codeSigningConfigArn,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListFunctionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListFunctionsRequest {
        return .init(
            functionVersion: self.functionVersion,
            marker: token,
            masterRegion: self.masterRegion,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListLayerVersionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListLayerVersionsRequest {
        return .init(
            compatibleArchitecture: self.compatibleArchitecture,
            compatibleRuntime: self.compatibleRuntime,
            layerName: self.layerName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListLayersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListLayersRequest {
        return .init(
            compatibleArchitecture: self.compatibleArchitecture,
            compatibleRuntime: self.compatibleRuntime,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListProvisionedConcurrencyConfigsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListProvisionedConcurrencyConfigsRequest {
        return .init(
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListVersionsByFunctionRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Lambda.ListVersionsByFunctionRequest {
        return .init(
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Lambda {
    public func waitUntilFunctionActive(
        _ input: GetFunctionConfigurationRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("state", expected: "Active")),
                .init(state: .failure, matcher: try! JMESPathMatcher("state", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("state", expected: "Pending")),
            ],
            minDelayTime: .seconds(5),
            command: self.getFunctionConfiguration
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilFunctionActiveV2(
        _ input: GetFunctionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("configuration.state", expected: "Active")),
                .init(state: .failure, matcher: try! JMESPathMatcher("configuration.state", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("configuration.state", expected: "Pending")),
            ],
            minDelayTime: .seconds(1),
            command: self.getFunction
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilFunctionExists(
        _ input: GetFunctionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
            ],
            minDelayTime: .seconds(1),
            command: self.getFunction
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilFunctionUpdated(
        _ input: GetFunctionConfigurationRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("lastUpdateStatus", expected: "Successful")),
                .init(state: .failure, matcher: try! JMESPathMatcher("lastUpdateStatus", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("lastUpdateStatus", expected: "InProgress")),
            ],
            minDelayTime: .seconds(5),
            command: self.getFunctionConfiguration
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilFunctionUpdatedV2(
        _ input: GetFunctionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("configuration.lastUpdateStatus", expected: "Successful")),
                .init(state: .failure, matcher: try! JMESPathMatcher("configuration.lastUpdateStatus", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("configuration.lastUpdateStatus", expected: "InProgress")),
            ],
            minDelayTime: .seconds(1),
            command: self.getFunction
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilPublishedVersionActive(
        _ input: GetFunctionConfigurationRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("state", expected: "Active")),
                .init(state: .failure, matcher: try! JMESPathMatcher("state", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("state", expected: "Pending")),
            ],
            minDelayTime: .seconds(5),
            command: self.getFunctionConfiguration
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
}
