//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS Lambda service.
///
/// Lambda  Overview  Lambda is a compute service that lets you run code without provisioning or managing servers. Lambda runs your code on a high-availability compute infrastructure and performs all of the administration of the compute resources, including server and operating system maintenance, capacity provisioning and automatic scaling, code monitoring and logging. With Lambda, you can run code for virtually any type of application or backend service. For more information about the Lambda service, see What is Lambda in the Lambda Developer Guide. The Lambda API Reference provides information about each of the API methods, including details about the parameters in each API request and response.   You can use Software Development Kits (SDKs), Integrated Development Environment (IDE) Toolkits, and command line tools to access the API. For installation instructions, see Tools for Amazon Web Services.  For a list of Region-specific endpoints that Lambda supports,  see Lambda endpoints and quotas  in the Amazon Web Services General Reference..  When making the API calls, you will need to authenticate your request by providing a signature. Lambda supports signature version 4. For more information, see Signature Version 4 signing process in the Amazon Web Services General Reference..   CA certificates  Because Amazon Web Services SDKs use the CA certificates from your computer, changes to the certificates on the Amazon Web Services servers can cause connection failures when you attempt to use an SDK. You can prevent these failures by keeping your computer's CA certificates and operating system up-to-date. If you encounter this issue in a corporate environment and do not manage your own computer, you might need to ask an administrator to assist with the update process. The following list shows minimum operating system and Java versions:   Microsoft Windows versions that have updates from January 2005 or later installed contain at least one of the required CAs in their trust list.    Mac OS X 10.4 with Java for Mac OS X 10.4 Release 5 (February 2007), Mac OS X 10.5 (October 2007), and later versions contain at least one of the required CAs in their trust list.    Red Hat Enterprise Linux 5 (March 2007), 6, and 7 and CentOS 5, 6, and 7 all contain at least one of the required CAs in their default trusted CA list.    Java 1.4.2_12 (May 2006), 5 Update 2 (March 2005), and all later versions, including Java 6 (December 2006), 7, and 8, contain at least one of the required CAs in their default trusted CA list.    When accessing the Lambda management console or Lambda API endpoints, whether through browsers or programmatically, you will need to ensure your client machines support any of the following CAs:    Amazon Root CA 1   Starfield Services Root Certificate Authority - G2   Starfield Class 2 Certification Authority   Root certificates from the first two authorities are available from Amazon trust services, but keeping your computer up-to-date is the more straightforward solution. To learn more about ACM-provided certificates, see Amazon Web Services Certificate Manager FAQs.
public struct Lambda: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Lambda client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "Lambda",
            serviceIdentifier: "lambda",
            serviceProtocol: .restjson,
            apiVersion: "2015-03-31",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: LambdaErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "lambda.af-south-1.api.aws",
            "ap-east-1": "lambda.ap-east-1.api.aws",
            "ap-northeast-1": "lambda.ap-northeast-1.api.aws",
            "ap-northeast-2": "lambda.ap-northeast-2.api.aws",
            "ap-northeast-3": "lambda.ap-northeast-3.api.aws",
            "ap-south-1": "lambda.ap-south-1.api.aws",
            "ap-south-2": "lambda.ap-south-2.api.aws",
            "ap-southeast-1": "lambda.ap-southeast-1.api.aws",
            "ap-southeast-2": "lambda.ap-southeast-2.api.aws",
            "ap-southeast-3": "lambda.ap-southeast-3.api.aws",
            "ap-southeast-4": "lambda.ap-southeast-4.api.aws",
            "ap-southeast-5": "lambda.ap-southeast-5.api.aws",
            "ap-southeast-7": "lambda.ap-southeast-7.api.aws",
            "ca-central-1": "lambda.ca-central-1.api.aws",
            "ca-west-1": "lambda.ca-west-1.api.aws",
            "cn-north-1": "lambda.cn-north-1.api.amazonwebservices.com.cn",
            "cn-northwest-1": "lambda.cn-northwest-1.api.amazonwebservices.com.cn",
            "eu-central-1": "lambda.eu-central-1.api.aws",
            "eu-central-2": "lambda.eu-central-2.api.aws",
            "eu-north-1": "lambda.eu-north-1.api.aws",
            "eu-south-1": "lambda.eu-south-1.api.aws",
            "eu-south-2": "lambda.eu-south-2.api.aws",
            "eu-west-1": "lambda.eu-west-1.api.aws",
            "eu-west-2": "lambda.eu-west-2.api.aws",
            "eu-west-3": "lambda.eu-west-3.api.aws",
            "il-central-1": "lambda.il-central-1.api.aws",
            "me-central-1": "lambda.me-central-1.api.aws",
            "me-south-1": "lambda.me-south-1.api.aws",
            "mx-central-1": "lambda.mx-central-1.api.aws",
            "sa-east-1": "lambda.sa-east-1.api.aws",
            "us-east-1": "lambda.us-east-1.api.aws",
            "us-east-2": "lambda.us-east-2.api.aws",
            "us-gov-east-1": "lambda.us-gov-east-1.api.aws",
            "us-gov-west-1": "lambda.us-gov-west-1.api.aws",
            "us-west-1": "lambda.us-west-1.api.aws",
            "us-west-2": "lambda.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "us-east-1": "lambda-fips.us-east-1.amazonaws.com",
            "us-east-2": "lambda-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "lambda-fips.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "lambda-fips.us-gov-west-1.amazonaws.com",
            "us-west-1": "lambda-fips.us-west-1.amazonaws.com",
            "us-west-2": "lambda-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Adds permissions to the resource-based policy of a version of an Lambda layer. Use this action to grant layer usage permission to other accounts. You can grant permission to a single account, all accounts in an organization, or all Amazon Web Services accounts.   To revoke permission, call RemoveLayerVersionPermission with the statement ID that you specified when you added it.
    @Sendable
    @inlinable
    public func addLayerVersionPermission(_ input: AddLayerVersionPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddLayerVersionPermissionResponse {
        try await self.client.execute(
            operation: "AddLayerVersionPermission", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds permissions to the resource-based policy of a version of an Lambda layer. Use this action to grant layer usage permission to other accounts. You can grant permission to a single account, all accounts in an organization, or all Amazon Web Services accounts.   To revoke permission, call RemoveLayerVersionPermission with the statement ID that you specified when you added it.
    ///
    /// Parameters:
    ///   - action: The API action that grants access to the layer. For example, lambda:GetLayerVersion.
    ///   - layerName: The name or Amazon Resource Name (ARN) of the layer.
    ///   - organizationId: With the principal set to *, grant permission to all accounts in the specified organization.
    ///   - principal: An account ID, or * to grant layer usage permission to all accounts in an organization, or all Amazon Web Services accounts (if organizationId is not specified). For the last case, make sure that you really do want all Amazon Web Services accounts to have usage permission to this layer.
    ///   - revisionId: Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.
    ///   - statementId: An identifier that distinguishes the policy from others on the same layer version.
    ///   - versionNumber: The version number.
    ///   - logger: Logger use during operation
    @inlinable
    public func addLayerVersionPermission(
        action: String,
        layerName: String,
        organizationId: String? = nil,
        principal: String,
        revisionId: String? = nil,
        statementId: String,
        versionNumber: Int64,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddLayerVersionPermissionResponse {
        let input = AddLayerVersionPermissionRequest(
            action: action, 
            layerName: layerName, 
            organizationId: organizationId, 
            principal: principal, 
            revisionId: revisionId, 
            statementId: statementId, 
            versionNumber: versionNumber
        )
        return try await self.addLayerVersionPermission(input, logger: logger)
    }

    /// Grants a principal  permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function. Note: Lambda does not support adding policies to version $LATEST. To grant permission to another account, specify the account ID as the Principal. To grant permission to an organization defined in Organizations, specify the organization ID as the PrincipalOrgID. For Amazon Web Services services, the principal is a domain-style identifier that the service defines, such as s3.amazonaws.com or sns.amazonaws.com. For Amazon Web Services services, you can also specify the ARN of the associated resource as the SourceArn. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. This operation adds a statement to a resource-based permissions policy for the function. For more information about function policies, see Using resource-based policies for Lambda.
    @Sendable
    @inlinable
    public func addPermission(_ input: AddPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AddPermissionResponse {
        try await self.client.execute(
            operation: "AddPermission", 
            path: "/2015-03-31/functions/{FunctionName}/policy", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Grants a principal  permission to use a function. You can apply the policy at the function level, or specify a qualifier to restrict access to a single version or alias. If you use a qualifier, the invoker must use the full Amazon Resource Name (ARN) of that version or alias to invoke the function. Note: Lambda does not support adding policies to version $LATEST. To grant permission to another account, specify the account ID as the Principal. To grant permission to an organization defined in Organizations, specify the organization ID as the PrincipalOrgID. For Amazon Web Services services, the principal is a domain-style identifier that the service defines, such as s3.amazonaws.com or sns.amazonaws.com. For Amazon Web Services services, you can also specify the ARN of the associated resource as the SourceArn. If you grant permission to a service principal without specifying the source, other accounts could potentially configure resources in their account to invoke your Lambda function. This operation adds a statement to a resource-based permissions policy for the function. For more information about function policies, see Using resource-based policies for Lambda.
    ///
    /// Parameters:
    ///   - action: The action that the principal can use on the function. For example, lambda:InvokeFunction or lambda:GetFunction.
    ///   - eventSourceToken: For Alexa Smart Home functions, a token that the invoker must supply.
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - functionUrlAuthType: The type of authentication that your function URL uses. Set to AWS_IAM if you want to restrict access to authenticated users only. Set to NONE if you want to bypass IAM authentication to create a public endpoint. For more information, see Security and auth model for Lambda function URLs.
    ///   - principal: The Amazon Web Services service, Amazon Web Services account, IAM user, or IAM role that invokes the function. If you specify a service, use SourceArn or SourceAccount to limit who can invoke the function through that service.
    ///   - principalOrgID: The identifier for your organization in Organizations. Use this to grant permissions to all the Amazon Web Services accounts under this organization.
    ///   - qualifier: Specify a version or alias to add permissions to a published version of the function.
    ///   - revisionId: Update the policy only if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.
    ///   - sourceAccount: For Amazon Web Services service, the ID of the Amazon Web Services account that owns the resource. Use this together with SourceArn to ensure that the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
    ///   - sourceArn: For Amazon Web Services services, the ARN of the Amazon Web Services resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic. Note that Lambda configures the comparison using the StringLike operator.
    ///   - statementId: A statement identifier that differentiates the statement from others in the same policy.
    ///   - logger: Logger use during operation
    @inlinable
    public func addPermission(
        action: String,
        eventSourceToken: String? = nil,
        functionName: String,
        functionUrlAuthType: FunctionUrlAuthType? = nil,
        principal: String,
        principalOrgID: String? = nil,
        qualifier: String? = nil,
        revisionId: String? = nil,
        sourceAccount: String? = nil,
        sourceArn: String? = nil,
        statementId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AddPermissionResponse {
        let input = AddPermissionRequest(
            action: action, 
            eventSourceToken: eventSourceToken, 
            functionName: functionName, 
            functionUrlAuthType: functionUrlAuthType, 
            principal: principal, 
            principalOrgID: principalOrgID, 
            qualifier: qualifier, 
            revisionId: revisionId, 
            sourceAccount: sourceAccount, 
            sourceArn: sourceArn, 
            statementId: statementId
        )
        return try await self.addPermission(input, logger: logger)
    }

    /// Creates an alias for a Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a different version. You can also map an alias to split invocation requests between two versions. Use the RoutingConfig parameter to specify a second version and the percentage of invocation requests that it receives.
    @Sendable
    @inlinable
    public func createAlias(_ input: CreateAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AliasConfiguration {
        try await self.client.execute(
            operation: "CreateAlias", 
            path: "/2015-03-31/functions/{FunctionName}/aliases", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an alias for a Lambda function version. Use aliases to provide clients with a function identifier that you can update to invoke a different version. You can also map an alias to split invocation requests between two versions. Use the RoutingConfig parameter to specify a second version and the percentage of invocation requests that it receives.
    ///
    /// Parameters:
    ///   - description: A description of the alias.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - functionVersion: The function version that the alias invokes.
    ///   - name: The name of the alias.
    ///   - routingConfig: The routing configuration of the alias.
    ///   - logger: Logger use during operation
    @inlinable
    public func createAlias(
        description: String? = nil,
        functionName: String,
        functionVersion: String,
        name: String,
        routingConfig: AliasRoutingConfiguration? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AliasConfiguration {
        let input = CreateAliasRequest(
            description: description, 
            functionName: functionName, 
            functionVersion: functionVersion, 
            name: name, 
            routingConfig: routingConfig
        )
        return try await self.createAlias(input, logger: logger)
    }

    /// Creates a code signing configuration. A code signing configuration defines a list of allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment validation checks fail).
    @Sendable
    @inlinable
    public func createCodeSigningConfig(_ input: CreateCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCodeSigningConfigResponse {
        try await self.client.execute(
            operation: "CreateCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a code signing configuration. A code signing configuration defines a list of allowed signing profiles and defines the code-signing validation policy (action to be taken if deployment validation checks fail).
    ///
    /// Parameters:
    ///   - allowedPublishers: Signing profiles for this code signing configuration.
    ///   - codeSigningPolicies: The code signing policies define the actions to take if the validation checks fail.
    ///   - description: Descriptive name for this code signing configuration.
    ///   - tags: A list of tags to add to the code signing configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCodeSigningConfig(
        allowedPublishers: AllowedPublishers,
        codeSigningPolicies: CodeSigningPolicies? = nil,
        description: String? = nil,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCodeSigningConfigResponse {
        let input = CreateCodeSigningConfigRequest(
            allowedPublishers: allowedPublishers, 
            codeSigningPolicies: codeSigningPolicies, 
            description: description, 
            tags: tags
        )
        return try await self.createCodeSigningConfig(input, logger: logger)
    }

    /// Creates a mapping between an event source and an Lambda function. Lambda reads items from the event source and invokes the function. For details about how to configure different event sources, see the following topics.      Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB    The following error handling options are available only for DynamoDB and Kinesis event sources:    BisectBatchOnFunctionError – If the function returns an error, split the batch in two and retry.    MaximumRecordAgeInSeconds – Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires    MaximumRetryAttempts – Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.    ParallelizationFactor – Process multiple batches from each shard concurrently.   For stream sources (DynamoDB, Kinesis, Amazon MSK, and self-managed Apache Kafka), the following option is also available:    DestinationConfig – Send discarded records to an Amazon SQS queue, Amazon SNS topic, or  Amazon S3 bucket.   For information about which configuration parameters apply to each event source, see the following topics.     Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB
    @Sendable
    @inlinable
    public func createEventSourceMapping(_ input: CreateEventSourceMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EventSourceMappingConfiguration {
        try await self.client.execute(
            operation: "CreateEventSourceMapping", 
            path: "/2015-03-31/event-source-mappings", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a mapping between an event source and an Lambda function. Lambda reads items from the event source and invokes the function. For details about how to configure different event sources, see the following topics.      Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB    The following error handling options are available only for DynamoDB and Kinesis event sources:    BisectBatchOnFunctionError – If the function returns an error, split the batch in two and retry.    MaximumRecordAgeInSeconds – Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires    MaximumRetryAttempts – Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.    ParallelizationFactor – Process multiple batches from each shard concurrently.   For stream sources (DynamoDB, Kinesis, Amazon MSK, and self-managed Apache Kafka), the following option is also available:    DestinationConfig – Send discarded records to an Amazon SQS queue, Amazon SNS topic, or  Amazon S3 bucket.   For information about which configuration parameters apply to each event source, see the following topics.     Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB
    ///
    /// Parameters:
    ///   - amazonManagedKafkaEventSourceConfig: Specific configuration settings for an Amazon Managed Streaming for Apache Kafka (Amazon MSK) event source.
    ///   - batchSize: The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation (6 MB).    Amazon Kinesis – Default 100. Max 10,000.    Amazon DynamoDB Streams – Default 100. Max 10,000.    Amazon Simple Queue Service – Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.    Amazon Managed Streaming for Apache Kafka – Default 100. Max 10,000.    Self-managed Apache Kafka – Default 100. Max 10,000.    Amazon MQ (ActiveMQ and RabbitMQ) – Default 100. Max 10,000.    DocumentDB – Default 100. Max 10,000.
    ///   - bisectBatchOnFunctionError: (Kinesis and DynamoDB Streams only) If the function returns an error, split the batch in two and retry.
    ///   - destinationConfig: (Kinesis, DynamoDB Streams, Amazon MSK, and self-managed Kafka only) A configuration object that specifies the destination of an event after Lambda processes it.
    ///   - documentDBEventSourceConfig: Specific configuration settings for a DocumentDB event source.
    ///   - enabled: When true, the event source mapping is active. When false, Lambda pauses polling and invocation. Default: True
    ///   - eventSourceArn: The Amazon Resource Name (ARN) of the event source.    Amazon Kinesis – The ARN of the data stream or a stream consumer.    Amazon DynamoDB Streams – The ARN of the stream.    Amazon Simple Queue Service – The ARN of the queue.    Amazon Managed Streaming for Apache Kafka – The ARN of the cluster or the ARN of the VPC connection (for cross-account event source mappings).    Amazon MQ – The ARN of the broker.    Amazon DocumentDB – The ARN of the DocumentDB change stream.
    ///   - filterCriteria: An object that defines the filter criteria that determine whether Lambda should process an event. For more information, see Lambda event filtering.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – MyFunction.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Version or Alias ARN – arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD.    Partial ARN – 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.
    ///   - functionResponseTypes: (Kinesis, DynamoDB Streams, and Amazon SQS) A list of current response type enums applied to the event source mapping.
    ///   - kmsKeyArn:  The ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function's filter criteria. By default, Lambda does not encrypt your filter criteria object. Specify this property to encrypt data using your own customer managed key.
    ///   - maximumBatchingWindowInSeconds: The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function. You can configure MaximumBatchingWindowInSeconds to any value from 0 seconds to 300 seconds in increments of seconds. For Kinesis, DynamoDB, and Amazon SQS event sources, the default batching window is 0 seconds. For Amazon MSK, Self-managed Apache Kafka, Amazon MQ, and DocumentDB event sources, the default batching window is 500 ms. Note that because you can only change MaximumBatchingWindowInSeconds in increments of seconds, you cannot revert back to the 500 ms default batching window after you have changed it. To restore the default batching window, you must create a new event source mapping. Related setting: For Kinesis, DynamoDB, and Amazon SQS event sources, when you set BatchSize to a value greater than 10, you must set MaximumBatchingWindowInSeconds to at least 1.
    ///   - maximumRecordAgeInSeconds: (Kinesis and DynamoDB Streams only) Discard records older than the specified age. The default value is infinite (-1).
    ///   - maximumRetryAttempts: (Kinesis and DynamoDB Streams only) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.
    ///   - metricsConfig: The metrics configuration for your event source. For more information, see Event source mapping metrics.
    ///   - parallelizationFactor: (Kinesis and DynamoDB Streams only) The number of batches to process from each shard concurrently.
    ///   - provisionedPollerConfig: (Amazon MSK and self-managed Apache Kafka only) The provisioned mode configuration for the event source. For more information, see provisioned mode.
    ///   - queues:  (MQ) The name of the Amazon MQ broker destination queue to consume.
    ///   - scalingConfig: (Amazon SQS only) The scaling configuration for the event source. For more information, see Configuring maximum concurrency for Amazon SQS event sources.
    ///   - selfManagedEventSource: The self-managed Apache Kafka cluster to receive records from.
    ///   - selfManagedKafkaEventSourceConfig: Specific configuration settings for a self-managed Apache Kafka event source.
    ///   - sourceAccessConfigurations: An array of authentication protocols or VPC components required to secure your event source.
    ///   - startingPosition: The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Stream event sources. AT_TIMESTAMP is supported only for Amazon Kinesis streams, Amazon DocumentDB, Amazon MSK, and self-managed Apache Kafka.
    ///   - startingPositionTimestamp: With StartingPosition set to AT_TIMESTAMP, the time from which to start reading. StartingPositionTimestamp cannot be in the future.
    ///   - tags: A list of tags to apply to the event source mapping.
    ///   - topics: The name of the Kafka topic.
    ///   - tumblingWindowInSeconds: (Kinesis and DynamoDB Streams only) The duration in seconds of a processing window for DynamoDB and Kinesis Streams event sources. A value of 0 seconds indicates no tumbling window.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEventSourceMapping(
        amazonManagedKafkaEventSourceConfig: AmazonManagedKafkaEventSourceConfig? = nil,
        batchSize: Int? = nil,
        bisectBatchOnFunctionError: Bool? = nil,
        destinationConfig: DestinationConfig? = nil,
        documentDBEventSourceConfig: DocumentDBEventSourceConfig? = nil,
        enabled: Bool? = nil,
        eventSourceArn: String? = nil,
        filterCriteria: FilterCriteria? = nil,
        functionName: String,
        functionResponseTypes: [FunctionResponseType]? = nil,
        kmsKeyArn: String? = nil,
        maximumBatchingWindowInSeconds: Int? = nil,
        maximumRecordAgeInSeconds: Int? = nil,
        maximumRetryAttempts: Int? = nil,
        metricsConfig: EventSourceMappingMetricsConfig? = nil,
        parallelizationFactor: Int? = nil,
        provisionedPollerConfig: ProvisionedPollerConfig? = nil,
        queues: [String]? = nil,
        scalingConfig: ScalingConfig? = nil,
        selfManagedEventSource: SelfManagedEventSource? = nil,
        selfManagedKafkaEventSourceConfig: SelfManagedKafkaEventSourceConfig? = nil,
        sourceAccessConfigurations: [SourceAccessConfiguration]? = nil,
        startingPosition: EventSourcePosition? = nil,
        startingPositionTimestamp: Date? = nil,
        tags: [String: String]? = nil,
        topics: [String]? = nil,
        tumblingWindowInSeconds: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EventSourceMappingConfiguration {
        let input = CreateEventSourceMappingRequest(
            amazonManagedKafkaEventSourceConfig: amazonManagedKafkaEventSourceConfig, 
            batchSize: batchSize, 
            bisectBatchOnFunctionError: bisectBatchOnFunctionError, 
            destinationConfig: destinationConfig, 
            documentDBEventSourceConfig: documentDBEventSourceConfig, 
            enabled: enabled, 
            eventSourceArn: eventSourceArn, 
            filterCriteria: filterCriteria, 
            functionName: functionName, 
            functionResponseTypes: functionResponseTypes, 
            kmsKeyArn: kmsKeyArn, 
            maximumBatchingWindowInSeconds: maximumBatchingWindowInSeconds, 
            maximumRecordAgeInSeconds: maximumRecordAgeInSeconds, 
            maximumRetryAttempts: maximumRetryAttempts, 
            metricsConfig: metricsConfig, 
            parallelizationFactor: parallelizationFactor, 
            provisionedPollerConfig: provisionedPollerConfig, 
            queues: queues, 
            scalingConfig: scalingConfig, 
            selfManagedEventSource: selfManagedEventSource, 
            selfManagedKafkaEventSourceConfig: selfManagedKafkaEventSourceConfig, 
            sourceAccessConfigurations: sourceAccessConfigurations, 
            startingPosition: startingPosition, 
            startingPositionTimestamp: startingPositionTimestamp, 
            tags: tags, 
            topics: topics, 
            tumblingWindowInSeconds: tumblingWindowInSeconds
        )
        return try await self.createEventSourceMapping(input, logger: logger)
    }

    /// Creates a Lambda function. To create a function, you need a deployment package and an execution role. The deployment package is a .zip file archive or container image that contains your function code. The execution role grants the function permission to use Amazon Web Services services, such as Amazon CloudWatch Logs for log streaming and X-Ray for request tracing. If the deployment package is a container image, then you set the package type to Image. For a container image, the code property must include the URI of a container image in the Amazon ECR registry. You do not need to specify the handler and runtime properties. If the deployment package is a .zip file archive, then you set the package type to Zip. For a .zip file archive, the code property specifies the location of the .zip file. You must also specify the handler and runtime properties. The code in the deployment package must be compatible with the target instruction set architecture of the function (x86-64 or arm64). If you do not specify the architecture, then the default value is x86-64. When you create a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or modify the function. The State, StateReason, and StateReasonCode fields in the response from GetFunctionConfiguration indicate when the function is ready to invoke. For more information, see Lambda function states. A function has an unpublished version, and can have published versions and aliases. The unpublished version changes when you update your function's code and configuration. A published version is a snapshot of your function code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be changed to map to a different version. Use the Publish parameter to create version 1 of your function from its initial configuration. The other parameters let you configure version-specific and function-level settings. You can modify version-specific settings later with UpdateFunctionConfiguration. Function-level settings apply to both the unpublished and published versions of the function, and include tags (TagResource) and per-function concurrency limits (PutFunctionConcurrency). You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function, specify the ARN of a code-signing configuration. When a user attempts to deploy a code package with UpdateFunctionCode, Lambda checks that the code package has a valid signature from a trusted publisher. The code-signing configuration includes set of signing profiles, which define the trusted publishers for this function. If another Amazon Web Services account or an Amazon Web Services service invokes your function, use AddPermission to grant permission by creating a resource-based Identity and Access Management (IAM) policy. You can grant permissions at the function level, on a version, or on an alias. To invoke your function directly, use Invoke. To invoke your function in response to events in other Amazon Web Services services, create an event source mapping (CreateEventSourceMapping), or configure a function trigger in the other service. For more information, see Invoking Lambda functions.
    @Sendable
    @inlinable
    public func createFunction(_ input: CreateFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        try await self.client.execute(
            operation: "CreateFunction", 
            path: "/2015-03-31/functions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Lambda function. To create a function, you need a deployment package and an execution role. The deployment package is a .zip file archive or container image that contains your function code. The execution role grants the function permission to use Amazon Web Services services, such as Amazon CloudWatch Logs for log streaming and X-Ray for request tracing. If the deployment package is a container image, then you set the package type to Image. For a container image, the code property must include the URI of a container image in the Amazon ECR registry. You do not need to specify the handler and runtime properties. If the deployment package is a .zip file archive, then you set the package type to Zip. For a .zip file archive, the code property specifies the location of the .zip file. You must also specify the handler and runtime properties. The code in the deployment package must be compatible with the target instruction set architecture of the function (x86-64 or arm64). If you do not specify the architecture, then the default value is x86-64. When you create a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute or so. During this time, you can't invoke or modify the function. The State, StateReason, and StateReasonCode fields in the response from GetFunctionConfiguration indicate when the function is ready to invoke. For more information, see Lambda function states. A function has an unpublished version, and can have published versions and aliases. The unpublished version changes when you update your function's code and configuration. A published version is a snapshot of your function code and configuration that can't be changed. An alias is a named resource that maps to a version, and can be changed to map to a different version. Use the Publish parameter to create version 1 of your function from its initial configuration. The other parameters let you configure version-specific and function-level settings. You can modify version-specific settings later with UpdateFunctionConfiguration. Function-level settings apply to both the unpublished and published versions of the function, and include tags (TagResource) and per-function concurrency limits (PutFunctionConcurrency). You can use code signing if your deployment package is a .zip file archive. To enable code signing for this function, specify the ARN of a code-signing configuration. When a user attempts to deploy a code package with UpdateFunctionCode, Lambda checks that the code package has a valid signature from a trusted publisher. The code-signing configuration includes set of signing profiles, which define the trusted publishers for this function. If another Amazon Web Services account or an Amazon Web Services service invokes your function, use AddPermission to grant permission by creating a resource-based Identity and Access Management (IAM) policy. You can grant permissions at the function level, on a version, or on an alias. To invoke your function directly, use Invoke. To invoke your function in response to events in other Amazon Web Services services, create an event source mapping (CreateEventSourceMapping), or configure a function trigger in the other service. For more information, see Invoking Lambda functions.
    ///
    /// Parameters:
    ///   - architectures: The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is x86_64.
    ///   - code: The code for the function.
    ///   - codeSigningConfigArn: To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration
    ///   - deadLetterConfig: A dead-letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see Dead-letter queues.
    ///   - description: A description of the function.
    ///   - environment: Environment variables that are accessible from function code during execution.
    ///   - ephemeralStorage: The size of the function's /tmp directory in MB. The default value is 512, but can be any whole number between 512 and 10,240 MB. For more information, see Configuring ephemeral storage (console).
    ///   - fileSystemConfigs: Connection settings for an Amazon EFS file system.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - handler: The name of the method within your code that Lambda calls to run your function.
    ///   - imageConfig: Container image configuration values that override the values in the container image Dockerfile.
    ///   - kmsKeyArn: The ARN of the Key Management Service (KMS) customer managed key that's used to encrypt the following resources:   The function's environment variables.   The function's Lambda SnapStart snapshots.   When used with SourceKMSKeyArn, the unzipped version of the .zip deployment package that's used for function invocations. For more information, see
    ///   - layers: A list of function layers to add to the function's execution environment. Specify each layer by its ARN, including the version.
    ///   - loggingConfig: The function's Amazon CloudWatch Logs configuration settings.
    ///   - memorySize: The amount of memory available to the function at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB.
    ///   - packageType: The type of deployment package. Set to Image for container image and set to Zip for .zip file archive.
    ///   - publish: Set to true to publish the first version of the function during creation.
    ///   - role: The Amazon Resource Name (ARN) of the function's execution role.
    ///   - runtime: The identifier of the function's  runtime. Runtime is required if the deployment package is a .zip file archive. Specifying a runtime results in an error if you're deploying a function using a container image. The following list includes deprecated runtimes. Lambda blocks creating new functions and updating existing functions shortly after each runtime is deprecated. For more information, see Runtime use after deprecation. For a list of all currently supported runtimes, see Supported runtimes.
    ///   - snapStart: The function's SnapStart setting.
    ///   - tags: A list of tags to apply to the function.
    ///   - timeout: The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see Lambda execution environment.
    ///   - tracingConfig: Set Mode to Active to sample and trace a subset of incoming requests with
    ///   - vpcConfig: For network connectivity to Amazon Web Services resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only through that VPC. For more information, see Configuring a Lambda function to access resources in a VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFunction(
        architectures: [Architecture]? = nil,
        code: FunctionCode,
        codeSigningConfigArn: String? = nil,
        deadLetterConfig: DeadLetterConfig? = nil,
        description: String? = nil,
        environment: Environment? = nil,
        ephemeralStorage: EphemeralStorage? = nil,
        fileSystemConfigs: [FileSystemConfig]? = nil,
        functionName: String,
        handler: String? = nil,
        imageConfig: ImageConfig? = nil,
        kmsKeyArn: String? = nil,
        layers: [String]? = nil,
        loggingConfig: LoggingConfig? = nil,
        memorySize: Int? = nil,
        packageType: PackageType? = nil,
        publish: Bool? = nil,
        role: String,
        runtime: Runtime? = nil,
        snapStart: SnapStart? = nil,
        tags: [String: String]? = nil,
        timeout: Int? = nil,
        tracingConfig: TracingConfig? = nil,
        vpcConfig: VpcConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FunctionConfiguration {
        let input = CreateFunctionRequest(
            architectures: architectures, 
            code: code, 
            codeSigningConfigArn: codeSigningConfigArn, 
            deadLetterConfig: deadLetterConfig, 
            description: description, 
            environment: environment, 
            ephemeralStorage: ephemeralStorage, 
            fileSystemConfigs: fileSystemConfigs, 
            functionName: functionName, 
            handler: handler, 
            imageConfig: imageConfig, 
            kmsKeyArn: kmsKeyArn, 
            layers: layers, 
            loggingConfig: loggingConfig, 
            memorySize: memorySize, 
            packageType: packageType, 
            publish: publish, 
            role: role, 
            runtime: runtime, 
            snapStart: snapStart, 
            tags: tags, 
            timeout: timeout, 
            tracingConfig: tracingConfig, 
            vpcConfig: vpcConfig
        )
        return try await self.createFunction(input, logger: logger)
    }

    /// Creates a Lambda function URL with the specified configuration parameters. A function URL is a dedicated HTTP(S) endpoint that you can use to invoke your function.
    @Sendable
    @inlinable
    public func createFunctionUrlConfig(_ input: CreateFunctionUrlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFunctionUrlConfigResponse {
        try await self.client.execute(
            operation: "CreateFunctionUrlConfig", 
            path: "/2021-10-31/functions/{FunctionName}/url", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Lambda function URL with the specified configuration parameters. A function URL is a dedicated HTTP(S) endpoint that you can use to invoke your function.
    ///
    /// Parameters:
    ///   - authType: The type of authentication that your function URL uses. Set to AWS_IAM if you want to restrict access to authenticated users only. Set to NONE if you want to bypass IAM authentication to create a public endpoint. For more information, see Security and auth model for Lambda function URLs.
    ///   - cors: The cross-origin resource sharing (CORS) settings for your function URL.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - invokeMode: Use one of the following options:    BUFFERED – This is the default option. Lambda invokes your function using the Invoke API operation. Invocation results  are available when the payload is complete. The maximum payload size is 6 MB.    RESPONSE_STREAM – Your function streams payload results as they become available. Lambda invokes your function using  the InvokeWithResponseStream API operation. The maximum response payload size is 20 MB, however, you can request a quota increase.
    ///   - qualifier: The alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFunctionUrlConfig(
        authType: FunctionUrlAuthType,
        cors: Cors? = nil,
        functionName: String,
        invokeMode: InvokeMode? = nil,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFunctionUrlConfigResponse {
        let input = CreateFunctionUrlConfigRequest(
            authType: authType, 
            cors: cors, 
            functionName: functionName, 
            invokeMode: invokeMode, 
            qualifier: qualifier
        )
        return try await self.createFunctionUrlConfig(input, logger: logger)
    }

    /// Deletes a Lambda function alias.
    @Sendable
    @inlinable
    public func deleteAlias(_ input: DeleteAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAlias", 
            path: "/2015-03-31/functions/{FunctionName}/aliases/{Name}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a Lambda function alias.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - name: The name of the alias.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAlias(
        functionName: String,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAliasRequest(
            functionName: functionName, 
            name: name
        )
        return try await self.deleteAlias(input, logger: logger)
    }

    /// Deletes the code signing configuration. You can delete the code signing configuration only if no function is using it.
    @Sendable
    @inlinable
    public func deleteCodeSigningConfig(_ input: DeleteCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCodeSigningConfigResponse {
        try await self.client.execute(
            operation: "DeleteCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the code signing configuration. You can delete the code signing configuration only if no function is using it.
    ///
    /// Parameters:
    ///   - codeSigningConfigArn: The The Amazon Resource Name (ARN) of the code signing configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCodeSigningConfig(
        codeSigningConfigArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteCodeSigningConfigResponse {
        let input = DeleteCodeSigningConfigRequest(
            codeSigningConfigArn: codeSigningConfigArn
        )
        return try await self.deleteCodeSigningConfig(input, logger: logger)
    }

    /// Deletes an event source mapping. You can get the identifier of a mapping from the output of ListEventSourceMappings. When you delete an event source mapping, it enters a Deleting state and might not be completely deleted for several seconds.
    @Sendable
    @inlinable
    public func deleteEventSourceMapping(_ input: DeleteEventSourceMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EventSourceMappingConfiguration {
        try await self.client.execute(
            operation: "DeleteEventSourceMapping", 
            path: "/2015-03-31/event-source-mappings/{UUID}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an event source mapping. You can get the identifier of a mapping from the output of ListEventSourceMappings. When you delete an event source mapping, it enters a Deleting state and might not be completely deleted for several seconds.
    ///
    /// Parameters:
    ///   - uuid: The identifier of the event source mapping.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEventSourceMapping(
        uuid: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EventSourceMappingConfiguration {
        let input = DeleteEventSourceMappingRequest(
            uuid: uuid
        )
        return try await self.deleteEventSourceMapping(input, logger: logger)
    }

    /// Deletes a Lambda function. To delete a specific function version, use the Qualifier parameter. Otherwise, all versions and aliases are deleted. This doesn't require the user to have explicit permissions for DeleteAlias. To delete Lambda event source mappings that invoke a function, use DeleteEventSourceMapping. For Amazon Web Services services and resources that invoke your function directly, delete the trigger in the service where you originally configured it.
    @Sendable
    @inlinable
    public func deleteFunction(_ input: DeleteFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteFunction", 
            path: "/2015-03-31/functions/{FunctionName}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a Lambda function. To delete a specific function version, use the Qualifier parameter. Otherwise, all versions and aliases are deleted. This doesn't require the user to have explicit permissions for DeleteAlias. To delete Lambda event source mappings that invoke a function, use DeleteEventSourceMapping. For Amazon Web Services services and resources that invoke your function directly, delete the trigger in the service where you originally configured it.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function or version.  Name formats     Function name – my-function (name-only), my-function:1 (with version).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version to delete. You can't delete a version that an alias references.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFunction(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteFunctionRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.deleteFunction(input, logger: logger)
    }

    /// Removes the code signing configuration from the function.
    @Sendable
    @inlinable
    public func deleteFunctionCodeSigningConfig(_ input: DeleteFunctionCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteFunctionCodeSigningConfig", 
            path: "/2020-06-30/functions/{FunctionName}/code-signing-config", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the code signing configuration from the function.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFunctionCodeSigningConfig(
        functionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteFunctionCodeSigningConfigRequest(
            functionName: functionName
        )
        return try await self.deleteFunctionCodeSigningConfig(input, logger: logger)
    }

    /// Removes a concurrent execution limit from a function.
    @Sendable
    @inlinable
    public func deleteFunctionConcurrency(_ input: DeleteFunctionConcurrencyRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteFunctionConcurrency", 
            path: "/2017-10-31/functions/{FunctionName}/concurrency", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a concurrent execution limit from a function.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFunctionConcurrency(
        functionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteFunctionConcurrencyRequest(
            functionName: functionName
        )
        return try await self.deleteFunctionConcurrency(input, logger: logger)
    }

    /// Deletes the configuration for asynchronous invocation for a function, version, or alias. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    @Sendable
    @inlinable
    public func deleteFunctionEventInvokeConfig(_ input: DeleteFunctionEventInvokeConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteFunctionEventInvokeConfig", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the configuration for asynchronous invocation for a function, version, or alias. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name - my-function (name-only), my-function:v1 (with alias).    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN - 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: A version number or alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFunctionEventInvokeConfig(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteFunctionEventInvokeConfigRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.deleteFunctionEventInvokeConfig(input, logger: logger)
    }

    /// Deletes a Lambda function URL. When you delete a function URL, you can't recover it. Creating a new function URL results in a different URL address.
    @Sendable
    @inlinable
    public func deleteFunctionUrlConfig(_ input: DeleteFunctionUrlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteFunctionUrlConfig", 
            path: "/2021-10-31/functions/{FunctionName}/url", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a Lambda function URL. When you delete a function URL, you can't recover it. Creating a new function URL results in a different URL address.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: The alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFunctionUrlConfig(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteFunctionUrlConfigRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.deleteFunctionUrlConfig(input, logger: logger)
    }

    /// Deletes a version of an Lambda layer. Deleted versions can no longer be viewed or added to functions. To avoid breaking functions, a copy of the version remains in Lambda until no functions refer to it.
    @Sendable
    @inlinable
    public func deleteLayerVersion(_ input: DeleteLayerVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteLayerVersion", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a version of an Lambda layer. Deleted versions can no longer be viewed or added to functions. To avoid breaking functions, a copy of the version remains in Lambda until no functions refer to it.
    ///
    /// Parameters:
    ///   - layerName: The name or Amazon Resource Name (ARN) of the layer.
    ///   - versionNumber: The version number.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLayerVersion(
        layerName: String,
        versionNumber: Int64,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteLayerVersionRequest(
            layerName: layerName, 
            versionNumber: versionNumber
        )
        return try await self.deleteLayerVersion(input, logger: logger)
    }

    /// Deletes the provisioned concurrency configuration for a function.
    @Sendable
    @inlinable
    public func deleteProvisionedConcurrencyConfig(_ input: DeleteProvisionedConcurrencyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteProvisionedConcurrencyConfig", 
            path: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the provisioned concurrency configuration for a function.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: The version number or alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteProvisionedConcurrencyConfig(
        functionName: String,
        qualifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteProvisionedConcurrencyConfigRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.deleteProvisionedConcurrencyConfig(input, logger: logger)
    }

    /// Retrieves details about your account's limits and usage in an Amazon Web Services Region.
    @Sendable
    @inlinable
    public func getAccountSettings(_ input: GetAccountSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAccountSettingsResponse {
        try await self.client.execute(
            operation: "GetAccountSettings", 
            path: "/2016-08-19/account-settings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves details about your account's limits and usage in an Amazon Web Services Region.
    ///
    /// Parameters:
    ///   - logger: Logger use during operation
    @inlinable
    public func getAccountSettings(
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAccountSettingsResponse {
        let input = GetAccountSettingsRequest(
        )
        return try await self.getAccountSettings(input, logger: logger)
    }

    /// Returns details about a Lambda function alias.
    @Sendable
    @inlinable
    public func getAlias(_ input: GetAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AliasConfiguration {
        try await self.client.execute(
            operation: "GetAlias", 
            path: "/2015-03-31/functions/{FunctionName}/aliases/{Name}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details about a Lambda function alias.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - name: The name of the alias.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAlias(
        functionName: String,
        name: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AliasConfiguration {
        let input = GetAliasRequest(
            functionName: functionName, 
            name: name
        )
        return try await self.getAlias(input, logger: logger)
    }

    /// Returns information about the specified code signing configuration.
    @Sendable
    @inlinable
    public func getCodeSigningConfig(_ input: GetCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCodeSigningConfigResponse {
        try await self.client.execute(
            operation: "GetCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about the specified code signing configuration.
    ///
    /// Parameters:
    ///   - codeSigningConfigArn: The The Amazon Resource Name (ARN) of the code signing configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCodeSigningConfig(
        codeSigningConfigArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCodeSigningConfigResponse {
        let input = GetCodeSigningConfigRequest(
            codeSigningConfigArn: codeSigningConfigArn
        )
        return try await self.getCodeSigningConfig(input, logger: logger)
    }

    /// Returns details about an event source mapping. You can get the identifier of a mapping from the output of ListEventSourceMappings.
    @Sendable
    @inlinable
    public func getEventSourceMapping(_ input: GetEventSourceMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EventSourceMappingConfiguration {
        try await self.client.execute(
            operation: "GetEventSourceMapping", 
            path: "/2015-03-31/event-source-mappings/{UUID}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details about an event source mapping. You can get the identifier of a mapping from the output of ListEventSourceMappings.
    ///
    /// Parameters:
    ///   - uuid: The identifier of the event source mapping.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEventSourceMapping(
        uuid: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EventSourceMappingConfiguration {
        let input = GetEventSourceMappingRequest(
            uuid: uuid
        )
        return try await self.getEventSourceMapping(input, logger: logger)
    }

    /// Returns information about the function or function version, with a link to download the deployment package that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are returned.
    @Sendable
    @inlinable
    public func getFunction(_ input: GetFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionResponse {
        try await self.client.execute(
            operation: "GetFunction", 
            path: "/2015-03-31/functions/{FunctionName}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about the function or function version, with a link to download the deployment package that's valid for 10 minutes. If you specify a function version, only details that are specific to that version are returned.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to get details about a published version of the function.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFunction(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFunctionResponse {
        let input = GetFunctionRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.getFunction(input, logger: logger)
    }

    /// Returns the code signing configuration for the specified function.
    @Sendable
    @inlinable
    public func getFunctionCodeSigningConfig(_ input: GetFunctionCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionCodeSigningConfigResponse {
        try await self.client.execute(
            operation: "GetFunctionCodeSigningConfig", 
            path: "/2020-06-30/functions/{FunctionName}/code-signing-config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the code signing configuration for the specified function.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFunctionCodeSigningConfig(
        functionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFunctionCodeSigningConfigResponse {
        let input = GetFunctionCodeSigningConfigRequest(
            functionName: functionName
        )
        return try await self.getFunctionCodeSigningConfig(input, logger: logger)
    }

    /// Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a function, use PutFunctionConcurrency.
    @Sendable
    @inlinable
    public func getFunctionConcurrency(_ input: GetFunctionConcurrencyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionConcurrencyResponse {
        try await self.client.execute(
            operation: "GetFunctionConcurrency", 
            path: "/2019-09-30/functions/{FunctionName}/concurrency", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details about the reserved concurrency configuration for a function. To set a concurrency limit for a function, use PutFunctionConcurrency.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFunctionConcurrency(
        functionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFunctionConcurrencyResponse {
        let input = GetFunctionConcurrencyRequest(
            functionName: functionName
        )
        return try await self.getFunctionConcurrency(input, logger: logger)
    }

    /// Returns the version-specific settings of a Lambda function or version. The output includes only options that can vary between versions of a function. To modify these settings, use UpdateFunctionConfiguration. To get all of a function's details, including function-level settings, use GetFunction.
    @Sendable
    @inlinable
    public func getFunctionConfiguration(_ input: GetFunctionConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        try await self.client.execute(
            operation: "GetFunctionConfiguration", 
            path: "/2015-03-31/functions/{FunctionName}/configuration", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the version-specific settings of a Lambda function or version. The output includes only options that can vary between versions of a function. To modify these settings, use UpdateFunctionConfiguration. To get all of a function's details, including function-level settings, use GetFunction.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to get details about a published version of the function.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFunctionConfiguration(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FunctionConfiguration {
        let input = GetFunctionConfigurationRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.getFunctionConfiguration(input, logger: logger)
    }

    /// Retrieves the configuration for asynchronous invocation for a function, version, or alias. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    @Sendable
    @inlinable
    public func getFunctionEventInvokeConfig(_ input: GetFunctionEventInvokeConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionEventInvokeConfig {
        try await self.client.execute(
            operation: "GetFunctionEventInvokeConfig", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the configuration for asynchronous invocation for a function, version, or alias. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name - my-function (name-only), my-function:v1 (with alias).    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN - 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: A version number or alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFunctionEventInvokeConfig(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FunctionEventInvokeConfig {
        let input = GetFunctionEventInvokeConfigRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.getFunctionEventInvokeConfig(input, logger: logger)
    }

    /// Returns your function's recursive loop detection configuration.
    @Sendable
    @inlinable
    public func getFunctionRecursionConfig(_ input: GetFunctionRecursionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionRecursionConfigResponse {
        try await self.client.execute(
            operation: "GetFunctionRecursionConfig", 
            path: "/2024-08-31/functions/{FunctionName}/recursion-config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns your function's recursive loop detection configuration.
    ///
    /// Parameters:
    ///   - functionName: 
    ///   - logger: Logger use during operation
    @inlinable
    public func getFunctionRecursionConfig(
        functionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFunctionRecursionConfigResponse {
        let input = GetFunctionRecursionConfigRequest(
            functionName: functionName
        )
        return try await self.getFunctionRecursionConfig(input, logger: logger)
    }

    /// Returns details about a Lambda function URL.
    @Sendable
    @inlinable
    public func getFunctionUrlConfig(_ input: GetFunctionUrlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFunctionUrlConfigResponse {
        try await self.client.execute(
            operation: "GetFunctionUrlConfig", 
            path: "/2021-10-31/functions/{FunctionName}/url", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details about a Lambda function URL.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: The alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFunctionUrlConfig(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFunctionUrlConfigResponse {
        let input = GetFunctionUrlConfigRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.getFunctionUrlConfig(input, logger: logger)
    }

    /// Returns information about a version of an Lambda layer, with a link to download the layer archive that's valid for 10 minutes.
    @Sendable
    @inlinable
    public func getLayerVersion(_ input: GetLayerVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLayerVersionResponse {
        try await self.client.execute(
            operation: "GetLayerVersion", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about a version of an Lambda layer, with a link to download the layer archive that's valid for 10 minutes.
    ///
    /// Parameters:
    ///   - layerName: The name or Amazon Resource Name (ARN) of the layer.
    ///   - versionNumber: The version number.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLayerVersion(
        layerName: String,
        versionNumber: Int64,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLayerVersionResponse {
        let input = GetLayerVersionRequest(
            layerName: layerName, 
            versionNumber: versionNumber
        )
        return try await self.getLayerVersion(input, logger: logger)
    }

    /// Returns information about a version of an Lambda layer, with a link to download the layer archive that's valid for 10 minutes.
    @Sendable
    @inlinable
    public func getLayerVersionByArn(_ input: GetLayerVersionByArnRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLayerVersionResponse {
        try await self.client.execute(
            operation: "GetLayerVersionByArn", 
            path: "/2018-10-31/layers?find=LayerVersion", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns information about a version of an Lambda layer, with a link to download the layer archive that's valid for 10 minutes.
    ///
    /// Parameters:
    ///   - arn: The ARN of the layer version.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLayerVersionByArn(
        arn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLayerVersionResponse {
        let input = GetLayerVersionByArnRequest(
            arn: arn
        )
        return try await self.getLayerVersionByArn(input, logger: logger)
    }

    /// Returns the permission policy for a version of an Lambda layer. For more information, see AddLayerVersionPermission.
    @Sendable
    @inlinable
    public func getLayerVersionPolicy(_ input: GetLayerVersionPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLayerVersionPolicyResponse {
        try await self.client.execute(
            operation: "GetLayerVersionPolicy", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the permission policy for a version of an Lambda layer. For more information, see AddLayerVersionPermission.
    ///
    /// Parameters:
    ///   - layerName: The name or Amazon Resource Name (ARN) of the layer.
    ///   - versionNumber: The version number.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLayerVersionPolicy(
        layerName: String,
        versionNumber: Int64,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLayerVersionPolicyResponse {
        let input = GetLayerVersionPolicyRequest(
            layerName: layerName, 
            versionNumber: versionNumber
        )
        return try await self.getLayerVersionPolicy(input, logger: logger)
    }

    /// Returns the resource-based IAM policy for a function, version, or alias.
    @Sendable
    @inlinable
    public func getPolicy(_ input: GetPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPolicyResponse {
        try await self.client.execute(
            operation: "GetPolicy", 
            path: "/2015-03-31/functions/{FunctionName}/policy", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the resource-based IAM policy for a function, version, or alias.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to get the policy for that resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPolicy(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPolicyResponse {
        let input = GetPolicyRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.getPolicy(input, logger: logger)
    }

    /// Retrieves the provisioned concurrency configuration for a function's alias or version.
    @Sendable
    @inlinable
    public func getProvisionedConcurrencyConfig(_ input: GetProvisionedConcurrencyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetProvisionedConcurrencyConfigResponse {
        try await self.client.execute(
            operation: "GetProvisionedConcurrencyConfig", 
            path: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the provisioned concurrency configuration for a function's alias or version.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: The version number or alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func getProvisionedConcurrencyConfig(
        functionName: String,
        qualifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetProvisionedConcurrencyConfigResponse {
        let input = GetProvisionedConcurrencyConfigRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.getProvisionedConcurrencyConfig(input, logger: logger)
    }

    /// Retrieves the runtime management configuration for a function's version. If the runtime update mode is Manual, this includes the ARN of the  runtime version and the runtime update mode. If the runtime update mode is Auto or Function update,  this includes the runtime update mode and null is returned for the ARN. For more information, see Runtime updates.
    @Sendable
    @inlinable
    public func getRuntimeManagementConfig(_ input: GetRuntimeManagementConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRuntimeManagementConfigResponse {
        try await self.client.execute(
            operation: "GetRuntimeManagementConfig", 
            path: "/2021-07-20/functions/{FunctionName}/runtime-management-config", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the runtime management configuration for a function's version. If the runtime update mode is Manual, this includes the ARN of the  runtime version and the runtime update mode. If the runtime update mode is Auto or Function update,  this includes the runtime update mode and null is returned for the ARN. For more information, see Runtime updates.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version of the function. This can be $LATEST or a published version number. If no value is specified, the configuration for the  $LATEST version is returned.
    ///   - logger: Logger use during operation
    @inlinable
    public func getRuntimeManagementConfig(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetRuntimeManagementConfigResponse {
        let input = GetRuntimeManagementConfigRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        return try await self.getRuntimeManagementConfig(input, logger: logger)
    }

    /// Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or asynchronously. By default, Lambda invokes your function synchronously (i.e. theInvocationType is RequestResponse). To invoke a function asynchronously, set InvocationType to Event. Lambda passes the ClientContext object to your function for synchronous invocations only. For synchronous invocation, details about the function response, including errors, are included in the response body and headers. For either invocation type, you can find more information in the execution log and trace. When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type, client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an error, Lambda executes the function up to two more times. For more information, see Error handling and automatic retries in Lambda. For asynchronous invocation, Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple times, even if no error occurs. To retain events that were not processed, configure your function with a dead-letter queue. The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that prevent your function from executing, such as permissions errors, quota errors, or issues with your function's code and configuration. For example, Lambda returns TooManyRequestsException if running the function would cause you to exceed a concurrency limit at either the account level (ConcurrentInvocationLimitExceeded) or function level (ReservedFunctionConcurrentInvocationLimitExceeded). For functions with a long timeout, your client might disconnect during synchronous invocation while it waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long connections with timeout or keep-alive settings. This operation requires permission for the lambda:InvokeFunction action. For details on how to set up permissions for cross-account invocations, see Granting function access to other accounts.
    @Sendable
    @inlinable
    public func invoke(_ input: InvocationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InvocationResponse {
        try await self.client.execute(
            operation: "Invoke", 
            path: "/2015-03-31/functions/{FunctionName}/invocations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Invokes a Lambda function. You can invoke a function synchronously (and wait for the response), or asynchronously. By default, Lambda invokes your function synchronously (i.e. theInvocationType is RequestResponse). To invoke a function asynchronously, set InvocationType to Event. Lambda passes the ClientContext object to your function for synchronous invocations only. For synchronous invocation, details about the function response, including errors, are included in the response body and headers. For either invocation type, you can find more information in the execution log and trace. When an error occurs, your function may be invoked multiple times. Retry behavior varies by error type, client, event source, and invocation type. For example, if you invoke a function asynchronously and it returns an error, Lambda executes the function up to two more times. For more information, see Error handling and automatic retries in Lambda. For asynchronous invocation, Lambda adds events to a queue before sending them to your function. If your function does not have enough capacity to keep up with the queue, events may be lost. Occasionally, your function may receive the same event multiple times, even if no error occurs. To retain events that were not processed, configure your function with a dead-letter queue. The status code in the API response doesn't reflect function errors. Error codes are reserved for errors that prevent your function from executing, such as permissions errors, quota errors, or issues with your function's code and configuration. For example, Lambda returns TooManyRequestsException if running the function would cause you to exceed a concurrency limit at either the account level (ConcurrentInvocationLimitExceeded) or function level (ReservedFunctionConcurrentInvocationLimitExceeded). For functions with a long timeout, your client might disconnect during synchronous invocation while it waits for a response. Configure your HTTP client, SDK, firewall, proxy, or operating system to allow for long connections with timeout or keep-alive settings. This operation requires permission for the lambda:InvokeFunction action. For details on how to set up permissions for cross-account invocations, see Granting function access to other accounts.
    ///
    /// Parameters:
    ///   - clientContext: Up to 3,583 bytes of base64-encoded data about the invoking client to pass to the function in the context object. Lambda passes the ClientContext object to your function for synchronous invocations only.
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - invocationType: Choose from the following options.    RequestResponse (default) – Invoke the function synchronously. Keep the connection open until the function returns a response or times out. The API response includes the function response and additional data.    Event – Invoke the function asynchronously. Send events that fail multiple times to the function's dead-letter queue (if one is configured). The API response only includes a status code.    DryRun – Validate parameter values and verify that the user or role has permission to invoke the function.
    ///   - logType: Set to Tail to include the execution log in the response. Applies to synchronously invoked functions only.
    ///   - payload: The JSON that you want to provide to your Lambda function as input. You can enter the JSON directly. For example, --payload '{ "key": "value" }'. You can also specify a file path. For example, --payload file://payload.json.
    ///   - qualifier: Specify a version or alias to invoke a published version of the function.
    ///   - logger: Logger use during operation
    @inlinable
    public func invoke(
        clientContext: String? = nil,
        functionName: String,
        invocationType: InvocationType? = nil,
        logType: LogType? = nil,
        payload: AWSHTTPBody? = nil,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> InvocationResponse {
        let input = InvocationRequest(
            clientContext: clientContext, 
            functionName: functionName, 
            invocationType: invocationType, 
            logType: logType, 
            payload: payload, 
            qualifier: qualifier
        )
        return try await self.invoke(input, logger: logger)
    }

    ///  For asynchronous function invocation, use Invoke.  Invokes a function asynchronously.  If you do use the InvokeAsync action, note that it doesn't support the use of X-Ray active tracing. Trace ID is not  propagated to the function, even if X-Ray active tracing is turned on.
    @Sendable
    @inlinable
    public func invokeAsync(_ input: InvokeAsyncRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InvokeAsyncResponse {
        try await self.client.execute(
            operation: "InvokeAsync", 
            path: "/2014-11-13/functions/{FunctionName}/invoke-async", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  For asynchronous function invocation, use Invoke.  Invokes a function asynchronously.  If you do use the InvokeAsync action, note that it doesn't support the use of X-Ray active tracing. Trace ID is not  propagated to the function, even if X-Ray active tracing is turned on.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - invokeArgs: The JSON that you want to provide to your Lambda function as input.
    ///   - logger: Logger use during operation
    @inlinable
    public func invokeAsync(
        functionName: String,
        invokeArgs: AWSHTTPBody,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> InvokeAsyncResponse {
        let input = InvokeAsyncRequest(
            functionName: functionName, 
            invokeArgs: invokeArgs
        )
        return try await self.invokeAsync(input, logger: logger)
    }

    /// Configure your Lambda functions to stream response payloads back to clients. For more information, see Configuring a Lambda function to stream responses. This operation requires permission for the lambda:InvokeFunction action. For details on how to set up permissions for cross-account invocations, see Granting function access to other accounts.
    @Sendable
    @inlinable
    public func invokeWithResponseStream(_ input: InvokeWithResponseStreamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InvokeWithResponseStreamResponse {
        try await self.client.execute(
            operation: "InvokeWithResponseStream", 
            path: "/2021-11-15/functions/{FunctionName}/response-streaming-invocations", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Configure your Lambda functions to stream response payloads back to clients. For more information, see Configuring a Lambda function to stream responses. This operation requires permission for the lambda:InvokeFunction action. For details on how to set up permissions for cross-account invocations, see Granting function access to other accounts.
    ///
    /// Parameters:
    ///   - clientContext: Up to 3,583 bytes of base64-encoded data about the invoking client to pass to the function in the context object.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - invocationType: Use one of the following options:    RequestResponse (default) – Invoke the function synchronously. Keep the connection open until the function returns a response or times out. The API operation response includes the function response and additional data.    DryRun – Validate parameter values and verify that the IAM user or role has permission to invoke the function.
    ///   - logType: Set to Tail to include the execution log in the response. Applies to synchronously invoked functions only.
    ///   - payload: The JSON that you want to provide to your Lambda function as input. You can enter the JSON directly. For example, --payload '{ "key": "value" }'. You can also specify a file path. For example, --payload file://payload.json.
    ///   - qualifier: The alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func invokeWithResponseStream(
        clientContext: String? = nil,
        functionName: String,
        invocationType: ResponseStreamingInvocationType? = nil,
        logType: LogType? = nil,
        payload: AWSHTTPBody? = nil,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> InvokeWithResponseStreamResponse {
        let input = InvokeWithResponseStreamRequest(
            clientContext: clientContext, 
            functionName: functionName, 
            invocationType: invocationType, 
            logType: logType, 
            payload: payload, 
            qualifier: qualifier
        )
        return try await self.invokeWithResponseStream(input, logger: logger)
    }

    /// Returns a list of aliases for a Lambda function.
    @Sendable
    @inlinable
    public func listAliases(_ input: ListAliasesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAliasesResponse {
        try await self.client.execute(
            operation: "ListAliases", 
            path: "/2015-03-31/functions/{FunctionName}/aliases", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of aliases for a Lambda function.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - functionVersion: Specify a function version to only list aliases that invoke that version.
    ///   - marker: Specify the pagination token that's returned by a previous request to retrieve the next page of results.
    ///   - maxItems: Limit the number of aliases returned.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAliases(
        functionName: String,
        functionVersion: String? = nil,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAliasesResponse {
        let input = ListAliasesRequest(
            functionName: functionName, 
            functionVersion: functionVersion, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listAliases(input, logger: logger)
    }

    /// Returns a list of code signing configurations. A request returns up to 10,000 configurations per call. You can use the MaxItems parameter to return fewer configurations per call.
    @Sendable
    @inlinable
    public func listCodeSigningConfigs(_ input: ListCodeSigningConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCodeSigningConfigsResponse {
        try await self.client.execute(
            operation: "ListCodeSigningConfigs", 
            path: "/2020-04-22/code-signing-configs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of code signing configurations. A request returns up to 10,000 configurations per call. You can use the MaxItems parameter to return fewer configurations per call.
    ///
    /// Parameters:
    ///   - marker: Specify the pagination token that's returned by a previous request to retrieve the next page of results.
    ///   - maxItems: Maximum number of items to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func listCodeSigningConfigs(
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListCodeSigningConfigsResponse {
        let input = ListCodeSigningConfigsRequest(
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listCodeSigningConfigs(input, logger: logger)
    }

    /// Lists event source mappings. Specify an EventSourceArn to show only event source mappings for a single event source.
    @Sendable
    @inlinable
    public func listEventSourceMappings(_ input: ListEventSourceMappingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListEventSourceMappingsResponse {
        try await self.client.execute(
            operation: "ListEventSourceMappings", 
            path: "/2015-03-31/event-source-mappings", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists event source mappings. Specify an EventSourceArn to show only event source mappings for a single event source.
    ///
    /// Parameters:
    ///   - eventSourceArn: The Amazon Resource Name (ARN) of the event source.    Amazon Kinesis – The ARN of the data stream or a stream consumer.    Amazon DynamoDB Streams – The ARN of the stream.    Amazon Simple Queue Service – The ARN of the queue.    Amazon Managed Streaming for Apache Kafka – The ARN of the cluster or the ARN of the VPC connection (for cross-account event source mappings).    Amazon MQ – The ARN of the broker.    Amazon DocumentDB – The ARN of the DocumentDB change stream.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – MyFunction.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Version or Alias ARN – arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD.    Partial ARN – 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.
    ///   - marker: A pagination token returned by a previous call.
    ///   - maxItems: The maximum number of event source mappings to return. Note that ListEventSourceMappings returns a maximum of 100 items in each response, even if you set the number higher.
    ///   - logger: Logger use during operation
    @inlinable
    public func listEventSourceMappings(
        eventSourceArn: String? = nil,
        functionName: String? = nil,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListEventSourceMappingsResponse {
        let input = ListEventSourceMappingsRequest(
            eventSourceArn: eventSourceArn, 
            functionName: functionName, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listEventSourceMappings(input, logger: logger)
    }

    /// Retrieves a list of configurations for asynchronous invocation for a function. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    @Sendable
    @inlinable
    public func listFunctionEventInvokeConfigs(_ input: ListFunctionEventInvokeConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionEventInvokeConfigsResponse {
        try await self.client.execute(
            operation: "ListFunctionEventInvokeConfigs", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config/list", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of configurations for asynchronous invocation for a function. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - my-function.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN - 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - marker: Specify the pagination token that's returned by a previous request to retrieve the next page of results.
    ///   - maxItems: The maximum number of configurations to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func listFunctionEventInvokeConfigs(
        functionName: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListFunctionEventInvokeConfigsResponse {
        let input = ListFunctionEventInvokeConfigsRequest(
            functionName: functionName, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listFunctionEventInvokeConfigs(input, logger: logger)
    }

    /// Returns a list of Lambda function URLs for the specified function.
    @Sendable
    @inlinable
    public func listFunctionUrlConfigs(_ input: ListFunctionUrlConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionUrlConfigsResponse {
        try await self.client.execute(
            operation: "ListFunctionUrlConfigs", 
            path: "/2021-10-31/functions/{FunctionName}/urls", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of Lambda function URLs for the specified function.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - marker: Specify the pagination token that's returned by a previous request to retrieve the next page of results.
    ///   - maxItems: The maximum number of function URLs to return in the response. Note that ListFunctionUrlConfigs returns a maximum of 50 items in each response, even if you set the number higher.
    ///   - logger: Logger use during operation
    @inlinable
    public func listFunctionUrlConfigs(
        functionName: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListFunctionUrlConfigsResponse {
        let input = ListFunctionUrlConfigsRequest(
            functionName: functionName, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listFunctionUrlConfigs(input, logger: logger)
    }

    /// Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50 functions per call. Set FunctionVersion to ALL to include all published versions of each function in addition to the unpublished version.  The ListFunctions operation returns a subset of the FunctionConfiguration fields. To get the additional fields (State, StateReasonCode, StateReason, LastUpdateStatus, LastUpdateStatusReason, LastUpdateStatusReasonCode,  RuntimeVersionConfig) for a function or version, use GetFunction.
    @Sendable
    @inlinable
    public func listFunctions(_ input: ListFunctionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionsResponse {
        try await self.client.execute(
            operation: "ListFunctions", 
            path: "/2015-03-31/functions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of Lambda functions, with the version-specific configuration of each. Lambda returns up to 50 functions per call. Set FunctionVersion to ALL to include all published versions of each function in addition to the unpublished version.  The ListFunctions operation returns a subset of the FunctionConfiguration fields. To get the additional fields (State, StateReasonCode, StateReason, LastUpdateStatus, LastUpdateStatusReason, LastUpdateStatusReasonCode,  RuntimeVersionConfig) for a function or version, use GetFunction.
    ///
    /// Parameters:
    ///   - functionVersion: Set to ALL to include entries for all published versions of each function.
    ///   - marker: Specify the pagination token that's returned by a previous request to retrieve the next page of results.
    ///   - masterRegion: For Lambda@Edge functions, the Amazon Web Services Region of the master function. For example, us-east-1 filters the list of functions to include only Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set FunctionVersion to ALL.
    ///   - maxItems: The maximum number of functions to return in the response. Note that ListFunctions returns a maximum of 50 items in each response, even if you set the number higher.
    ///   - logger: Logger use during operation
    @inlinable
    public func listFunctions(
        functionVersion: FunctionVersion? = nil,
        marker: String? = nil,
        masterRegion: SotoCore.Region? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListFunctionsResponse {
        let input = ListFunctionsRequest(
            functionVersion: functionVersion, 
            marker: marker, 
            masterRegion: masterRegion, 
            maxItems: maxItems
        )
        return try await self.listFunctions(input, logger: logger)
    }

    /// List the functions that use the specified code signing configuration. You can use this method prior to deleting a code signing configuration, to verify that no functions are using it.
    @Sendable
    @inlinable
    public func listFunctionsByCodeSigningConfig(_ input: ListFunctionsByCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFunctionsByCodeSigningConfigResponse {
        try await self.client.execute(
            operation: "ListFunctionsByCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List the functions that use the specified code signing configuration. You can use this method prior to deleting a code signing configuration, to verify that no functions are using it.
    ///
    /// Parameters:
    ///   - codeSigningConfigArn: The The Amazon Resource Name (ARN) of the code signing configuration.
    ///   - marker: Specify the pagination token that's returned by a previous request to retrieve the next page of results.
    ///   - maxItems: Maximum number of items to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func listFunctionsByCodeSigningConfig(
        codeSigningConfigArn: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListFunctionsByCodeSigningConfigResponse {
        let input = ListFunctionsByCodeSigningConfigRequest(
            codeSigningConfigArn: codeSigningConfigArn, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listFunctionsByCodeSigningConfig(input, logger: logger)
    }

    /// Lists the versions of an Lambda layer. Versions that have been deleted aren't listed. Specify a runtime identifier to list only versions that indicate that they're compatible with that runtime. Specify a compatible architecture to include only  layer versions that are compatible with that architecture.
    @Sendable
    @inlinable
    public func listLayerVersions(_ input: ListLayerVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLayerVersionsResponse {
        try await self.client.execute(
            operation: "ListLayerVersions", 
            path: "/2018-10-31/layers/{LayerName}/versions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the versions of an Lambda layer. Versions that have been deleted aren't listed. Specify a runtime identifier to list only versions that indicate that they're compatible with that runtime. Specify a compatible architecture to include only  layer versions that are compatible with that architecture.
    ///
    /// Parameters:
    ///   - compatibleArchitecture: The compatible
    ///   - compatibleRuntime: A runtime identifier. The following list includes deprecated runtimes. For more information, see Runtime use after deprecation. For a list of all currently supported runtimes, see Supported runtimes.
    ///   - layerName: The name or Amazon Resource Name (ARN) of the layer.
    ///   - marker: A pagination token returned by a previous call.
    ///   - maxItems: The maximum number of versions to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func listLayerVersions(
        compatibleArchitecture: Architecture? = nil,
        compatibleRuntime: Runtime? = nil,
        layerName: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLayerVersionsResponse {
        let input = ListLayerVersionsRequest(
            compatibleArchitecture: compatibleArchitecture, 
            compatibleRuntime: compatibleRuntime, 
            layerName: layerName, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listLayerVersions(input, logger: logger)
    }

    /// Lists Lambda layers and shows information about the latest version of each. Specify a runtime identifier to list only layers that indicate that they're compatible with that runtime. Specify a compatible architecture to include only layers that are compatible with that  instruction set architecture.
    @Sendable
    @inlinable
    public func listLayers(_ input: ListLayersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLayersResponse {
        try await self.client.execute(
            operation: "ListLayers", 
            path: "/2018-10-31/layers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists Lambda layers and shows information about the latest version of each. Specify a runtime identifier to list only layers that indicate that they're compatible with that runtime. Specify a compatible architecture to include only layers that are compatible with that  instruction set architecture.
    ///
    /// Parameters:
    ///   - compatibleArchitecture: The compatible
    ///   - compatibleRuntime: A runtime identifier. The following list includes deprecated runtimes. For more information, see Runtime use after deprecation. For a list of all currently supported runtimes, see Supported runtimes.
    ///   - marker: A pagination token returned by a previous call.
    ///   - maxItems: The maximum number of layers to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func listLayers(
        compatibleArchitecture: Architecture? = nil,
        compatibleRuntime: Runtime? = nil,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListLayersResponse {
        let input = ListLayersRequest(
            compatibleArchitecture: compatibleArchitecture, 
            compatibleRuntime: compatibleRuntime, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listLayers(input, logger: logger)
    }

    /// Retrieves a list of provisioned concurrency configurations for a function.
    @Sendable
    @inlinable
    public func listProvisionedConcurrencyConfigs(_ input: ListProvisionedConcurrencyConfigsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListProvisionedConcurrencyConfigsResponse {
        try await self.client.execute(
            operation: "ListProvisionedConcurrencyConfigs", 
            path: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency?List=ALL", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a list of provisioned concurrency configurations for a function.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - marker: Specify the pagination token that's returned by a previous request to retrieve the next page of results.
    ///   - maxItems: Specify a number to limit the number of configurations returned.
    ///   - logger: Logger use during operation
    @inlinable
    public func listProvisionedConcurrencyConfigs(
        functionName: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListProvisionedConcurrencyConfigsResponse {
        let input = ListProvisionedConcurrencyConfigsRequest(
            functionName: functionName, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listProvisionedConcurrencyConfigs(input, logger: logger)
    }

    /// Returns a function, event source mapping, or code signing configuration's tags. You can also view function tags with GetFunction.
    @Sendable
    @inlinable
    public func listTags(_ input: ListTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsResponse {
        try await self.client.execute(
            operation: "ListTags", 
            path: "/2017-03-31/tags/{Resource}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a function, event source mapping, or code signing configuration's tags. You can also view function tags with GetFunction.
    ///
    /// Parameters:
    ///   - resource: The resource's Amazon Resource Name (ARN).  Note: Lambda does not support adding tags to function aliases or versions.
    ///   - logger: Logger use during operation
    @inlinable
    public func listTags(
        resource: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsResponse {
        let input = ListTagsRequest(
            resource: resource
        )
        return try await self.listTags(input, logger: logger)
    }

    /// Returns a list of versions, with the version-specific configuration of each. Lambda returns up to 50 versions per call.
    @Sendable
    @inlinable
    public func listVersionsByFunction(_ input: ListVersionsByFunctionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListVersionsByFunctionResponse {
        try await self.client.execute(
            operation: "ListVersionsByFunction", 
            path: "/2015-03-31/functions/{FunctionName}/versions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of versions, with the version-specific configuration of each. Lambda returns up to 50 versions per call.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - marker: Specify the pagination token that's returned by a previous request to retrieve the next page of results.
    ///   - maxItems: The maximum number of versions to return. Note that ListVersionsByFunction returns a maximum of 50 items in each response,  even if you set the number higher.
    ///   - logger: Logger use during operation
    @inlinable
    public func listVersionsByFunction(
        functionName: String,
        marker: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListVersionsByFunctionResponse {
        let input = ListVersionsByFunctionRequest(
            functionName: functionName, 
            marker: marker, 
            maxItems: maxItems
        )
        return try await self.listVersionsByFunction(input, logger: logger)
    }

    /// Creates an Lambda layer from a ZIP archive. Each time you call PublishLayerVersion with the same layer name, a new version is created. Add layers to your function with CreateFunction or UpdateFunctionConfiguration.
    @Sendable
    @inlinable
    public func publishLayerVersion(_ input: PublishLayerVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PublishLayerVersionResponse {
        try await self.client.execute(
            operation: "PublishLayerVersion", 
            path: "/2018-10-31/layers/{LayerName}/versions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Lambda layer from a ZIP archive. Each time you call PublishLayerVersion with the same layer name, a new version is created. Add layers to your function with CreateFunction or UpdateFunctionConfiguration.
    ///
    /// Parameters:
    ///   - compatibleArchitectures: A list of compatible
    ///   - compatibleRuntimes: A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions. The following list includes deprecated runtimes. For more information, see Runtime deprecation policy.
    ///   - content: The function layer archive.
    ///   - description: The description of the version.
    ///   - layerName: The name or Amazon Resource Name (ARN) of the layer.
    ///   - licenseInfo: The layer's software license. It can be any of the following:   An SPDX license identifier. For example, MIT.   The URL of a license hosted on the internet. For example, https://opensource.org/licenses/MIT.   The full text of the license.
    ///   - logger: Logger use during operation
    @inlinable
    public func publishLayerVersion(
        compatibleArchitectures: [Architecture]? = nil,
        compatibleRuntimes: [Runtime]? = nil,
        content: LayerVersionContentInput,
        description: String? = nil,
        layerName: String,
        licenseInfo: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PublishLayerVersionResponse {
        let input = PublishLayerVersionRequest(
            compatibleArchitectures: compatibleArchitectures, 
            compatibleRuntimes: compatibleRuntimes, 
            content: content, 
            description: description, 
            layerName: layerName, 
            licenseInfo: licenseInfo
        )
        return try await self.publishLayerVersion(input, logger: logger)
    }

    /// Creates a version from the current code and configuration of a function. Use versions to create a snapshot of your function code and configuration that doesn't change. Lambda doesn't publish a version if the function's configuration and code haven't changed since the last version. Use UpdateFunctionCode or UpdateFunctionConfiguration to update the function before publishing a version. Clients can invoke versions directly or with an alias. To create an alias, use CreateAlias.
    @Sendable
    @inlinable
    public func publishVersion(_ input: PublishVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        try await self.client.execute(
            operation: "PublishVersion", 
            path: "/2015-03-31/functions/{FunctionName}/versions", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a version from the current code and configuration of a function. Use versions to create a snapshot of your function code and configuration that doesn't change. Lambda doesn't publish a version if the function's configuration and code haven't changed since the last version. Use UpdateFunctionCode or UpdateFunctionConfiguration to update the function before publishing a version. Clients can invoke versions directly or with an alias. To create an alias, use CreateAlias.
    ///
    /// Parameters:
    ///   - codeSha256: Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a version if the function code has changed since you last updated it. You can get the hash for the version that you uploaded from the output of UpdateFunctionCode.
    ///   - description: A description for the version to override the description in the function configuration.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - revisionId: Only update the function if the revision ID matches the ID that's specified. Use this option to avoid publishing a version if the function configuration has changed since you last updated it.
    ///   - logger: Logger use during operation
    @inlinable
    public func publishVersion(
        codeSha256: String? = nil,
        description: String? = nil,
        functionName: String,
        revisionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FunctionConfiguration {
        let input = PublishVersionRequest(
            codeSha256: codeSha256, 
            description: description, 
            functionName: functionName, 
            revisionId: revisionId
        )
        return try await self.publishVersion(input, logger: logger)
    }

    /// Update the code signing configuration for the function. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function.
    @Sendable
    @inlinable
    public func putFunctionCodeSigningConfig(_ input: PutFunctionCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutFunctionCodeSigningConfigResponse {
        try await self.client.execute(
            operation: "PutFunctionCodeSigningConfig", 
            path: "/2020-06-30/functions/{FunctionName}/code-signing-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update the code signing configuration for the function. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function.
    ///
    /// Parameters:
    ///   - codeSigningConfigArn: The The Amazon Resource Name (ARN) of the code signing configuration.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - logger: Logger use during operation
    @inlinable
    public func putFunctionCodeSigningConfig(
        codeSigningConfigArn: String,
        functionName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutFunctionCodeSigningConfigResponse {
        let input = PutFunctionCodeSigningConfigRequest(
            codeSigningConfigArn: codeSigningConfigArn, 
            functionName: functionName
        )
        return try await self.putFunctionCodeSigningConfig(input, logger: logger)
    }

    /// Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency level. Concurrency settings apply to the function as a whole, including all published versions and the unpublished version. Reserving concurrency both ensures that your function has capacity to process the specified number of events simultaneously, and prevents it from scaling beyond that level. Use GetFunction to see the current setting for a function. Use GetAccountSettings to see your Regional concurrency limit. You can reserve concurrency for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for functions that aren't configured with a per-function limit. For more information, see Lambda function scaling.
    @Sendable
    @inlinable
    public func putFunctionConcurrency(_ input: PutFunctionConcurrencyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Concurrency {
        try await self.client.execute(
            operation: "PutFunctionConcurrency", 
            path: "/2017-10-31/functions/{FunctionName}/concurrency", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the maximum number of simultaneous executions for a function, and reserves capacity for that concurrency level. Concurrency settings apply to the function as a whole, including all published versions and the unpublished version. Reserving concurrency both ensures that your function has capacity to process the specified number of events simultaneously, and prevents it from scaling beyond that level. Use GetFunction to see the current setting for a function. Use GetAccountSettings to see your Regional concurrency limit. You can reserve concurrency for as many functions as you like, as long as you leave at least 100 simultaneous executions unreserved for functions that aren't configured with a per-function limit. For more information, see Lambda function scaling.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - reservedConcurrentExecutions: The number of simultaneous executions to reserve for the function.
    ///   - logger: Logger use during operation
    @inlinable
    public func putFunctionConcurrency(
        functionName: String,
        reservedConcurrentExecutions: Int,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Concurrency {
        let input = PutFunctionConcurrencyRequest(
            functionName: functionName, 
            reservedConcurrentExecutions: reservedConcurrentExecutions
        )
        return try await self.putFunctionConcurrency(input, logger: logger)
    }

    /// Configures options for asynchronous invocation on a function, version, or alias. If a configuration already exists for a function, version, or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without affecting existing settings for other options, use UpdateFunctionEventInvokeConfig. By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with UpdateFunctionConfiguration. To send an invocation record to a queue, topic, S3 bucket, function, or event bus, specify a destination. You can configure separate destinations for successful invocations (on-success) and events that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a dead-letter queue.  S3 buckets are supported only for on-failure destinations. To retain records of successful invocations, use another destination type.
    @Sendable
    @inlinable
    public func putFunctionEventInvokeConfig(_ input: PutFunctionEventInvokeConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionEventInvokeConfig {
        try await self.client.execute(
            operation: "PutFunctionEventInvokeConfig", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Configures options for asynchronous invocation on a function, version, or alias. If a configuration already exists for a function, version, or alias, this operation overwrites it. If you exclude any settings, they are removed. To set one option without affecting existing settings for other options, use UpdateFunctionEventInvokeConfig. By default, Lambda retries an asynchronous invocation twice if the function returns an error. It retains events in a queue for up to six hours. When an event fails all processing attempts or stays in the asynchronous invocation queue for too long, Lambda discards it. To retain discarded events, configure a dead-letter queue with UpdateFunctionConfiguration. To send an invocation record to a queue, topic, S3 bucket, function, or event bus, specify a destination. You can configure separate destinations for successful invocations (on-success) and events that fail all processing attempts (on-failure). You can configure destinations in addition to or instead of a dead-letter queue.  S3 buckets are supported only for on-failure destinations. To retain records of successful invocations, use another destination type.
    ///
    /// Parameters:
    ///   - destinationConfig: A destination for events after they have been sent to a function for processing.  Destinations     Function - The Amazon Resource Name (ARN) of a Lambda function.    Queue - The ARN of a standard SQS queue.    Bucket - The ARN of an Amazon S3 bucket.    Topic - The ARN of a standard SNS topic.    Event Bus - The ARN of an Amazon EventBridge event bus.    S3 buckets are supported only for on-failure destinations. To retain records of successful invocations, use another destination type.
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name - my-function (name-only), my-function:v1 (with alias).    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN - 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - maximumEventAgeInSeconds: The maximum age of a request that Lambda sends to a function for processing.
    ///   - maximumRetryAttempts: The maximum number of times to retry when the function returns an error.
    ///   - qualifier: A version number or alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func putFunctionEventInvokeConfig(
        destinationConfig: DestinationConfig? = nil,
        functionName: String,
        maximumEventAgeInSeconds: Int? = nil,
        maximumRetryAttempts: Int? = nil,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FunctionEventInvokeConfig {
        let input = PutFunctionEventInvokeConfigRequest(
            destinationConfig: destinationConfig, 
            functionName: functionName, 
            maximumEventAgeInSeconds: maximumEventAgeInSeconds, 
            maximumRetryAttempts: maximumRetryAttempts, 
            qualifier: qualifier
        )
        return try await self.putFunctionEventInvokeConfig(input, logger: logger)
    }

    /// Sets your function's recursive loop detection configuration. When you configure a Lambda function to output to the same service or resource that invokes the function, it's possible to create  an infinite recursive loop. For example, a Lambda function might write a message to an Amazon Simple Queue Service (Amazon SQS) queue, which then invokes the same  function. This invocation causes the function to write another message to the queue, which in turn invokes the function again. Lambda can detect certain types of recursive loops shortly after they occur. When Lambda detects a recursive loop and your  function's recursive loop detection configuration is set to Terminate, it stops your function being invoked and notifies you.
    @Sendable
    @inlinable
    public func putFunctionRecursionConfig(_ input: PutFunctionRecursionConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutFunctionRecursionConfigResponse {
        try await self.client.execute(
            operation: "PutFunctionRecursionConfig", 
            path: "/2024-08-31/functions/{FunctionName}/recursion-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets your function's recursive loop detection configuration. When you configure a Lambda function to output to the same service or resource that invokes the function, it's possible to create  an infinite recursive loop. For example, a Lambda function might write a message to an Amazon Simple Queue Service (Amazon SQS) queue, which then invokes the same  function. This invocation causes the function to write another message to the queue, which in turn invokes the function again. Lambda can detect certain types of recursive loops shortly after they occur. When Lambda detects a recursive loop and your  function's recursive loop detection configuration is set to Terminate, it stops your function being invoked and notifies you.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - recursiveLoop: If you set your function's recursive loop detection configuration to Allow, Lambda doesn't take any action when it  detects your function being invoked as part of a recursive loop. We recommend that you only use this setting if your design intentionally uses a  Lambda function to write data back to the same Amazon Web Services resource that invokes it. If you set your function's recursive loop detection configuration to Terminate, Lambda stops your function being  invoked and notifies you when it detects your function being invoked as part of a recursive loop. By default, Lambda sets your function's configuration to Terminate.  If your design intentionally uses a Lambda function to write data back to the same Amazon Web Services resource that invokes the function, then use caution and implement suitable guard rails to prevent unexpected charges being billed to your Amazon Web Services account. To learn more about best practices for using recursive invocation patterns, see Recursive patterns that cause run-away Lambda functions in Serverless Land.
    ///   - logger: Logger use during operation
    @inlinable
    public func putFunctionRecursionConfig(
        functionName: String,
        recursiveLoop: RecursiveLoop,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutFunctionRecursionConfigResponse {
        let input = PutFunctionRecursionConfigRequest(
            functionName: functionName, 
            recursiveLoop: recursiveLoop
        )
        return try await self.putFunctionRecursionConfig(input, logger: logger)
    }

    /// Adds a provisioned concurrency configuration to a function's alias or version.
    @Sendable
    @inlinable
    public func putProvisionedConcurrencyConfig(_ input: PutProvisionedConcurrencyConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutProvisionedConcurrencyConfigResponse {
        try await self.client.execute(
            operation: "PutProvisionedConcurrencyConfig", 
            path: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a provisioned concurrency configuration to a function's alias or version.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - provisionedConcurrentExecutions: The amount of provisioned concurrency to allocate for the version or alias.
    ///   - qualifier: The version number or alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func putProvisionedConcurrencyConfig(
        functionName: String,
        provisionedConcurrentExecutions: Int,
        qualifier: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutProvisionedConcurrencyConfigResponse {
        let input = PutProvisionedConcurrencyConfigRequest(
            functionName: functionName, 
            provisionedConcurrentExecutions: provisionedConcurrentExecutions, 
            qualifier: qualifier
        )
        return try await self.putProvisionedConcurrencyConfig(input, logger: logger)
    }

    /// Sets the runtime management configuration for a function's version. For more information,  see Runtime updates.
    @Sendable
    @inlinable
    public func putRuntimeManagementConfig(_ input: PutRuntimeManagementConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutRuntimeManagementConfigResponse {
        try await self.client.execute(
            operation: "PutRuntimeManagementConfig", 
            path: "/2021-07-20/functions/{FunctionName}/runtime-management-config", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the runtime management configuration for a function's version. For more information,  see Runtime updates.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version of the function. This can be $LATEST or a published version number. If no value is specified, the configuration for the  $LATEST version is returned.
    ///   - runtimeVersionArn: The ARN of the runtime version you want the function to use.  This is only required if you're using the Manual runtime update mode.
    ///   - updateRuntimeOn: Specify the runtime update mode.    Auto (default) - Automatically update to the most recent and secure runtime version using a Two-phase runtime version rollout. This is the best  choice for most customers to ensure they always benefit from runtime updates.    Function update - Lambda updates the runtime of your function  to the most recent and secure runtime version when you update your  function. This approach synchronizes runtime updates with function deployments, giving you control over when runtime updates are applied and allowing you to detect and  mitigate rare runtime update incompatibilities early. When using this setting, you need to regularly update your functions to keep their runtime up-to-date.    Manual - You specify a runtime version in your function configuration. The function will use this runtime version indefinitely.  In the rare case where a new runtime version is incompatible with an existing function, this allows you to roll back your function to an earlier runtime version. For more information,  see Roll back a runtime version.
    ///   - logger: Logger use during operation
    @inlinable
    public func putRuntimeManagementConfig(
        functionName: String,
        qualifier: String? = nil,
        runtimeVersionArn: String? = nil,
        updateRuntimeOn: UpdateRuntimeOn,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutRuntimeManagementConfigResponse {
        let input = PutRuntimeManagementConfigRequest(
            functionName: functionName, 
            qualifier: qualifier, 
            runtimeVersionArn: runtimeVersionArn, 
            updateRuntimeOn: updateRuntimeOn
        )
        return try await self.putRuntimeManagementConfig(input, logger: logger)
    }

    /// Removes a statement from the permissions policy for a version of an Lambda layer. For more information, see AddLayerVersionPermission.
    @Sendable
    @inlinable
    public func removeLayerVersionPermission(_ input: RemoveLayerVersionPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RemoveLayerVersionPermission", 
            path: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes a statement from the permissions policy for a version of an Lambda layer. For more information, see AddLayerVersionPermission.
    ///
    /// Parameters:
    ///   - layerName: The name or Amazon Resource Name (ARN) of the layer.
    ///   - revisionId: Only update the policy if the revision ID matches the ID specified. Use this option to avoid modifying a policy that has changed since you last read it.
    ///   - statementId: The identifier that was specified when the statement was added.
    ///   - versionNumber: The version number.
    ///   - logger: Logger use during operation
    @inlinable
    public func removeLayerVersionPermission(
        layerName: String,
        revisionId: String? = nil,
        statementId: String,
        versionNumber: Int64,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RemoveLayerVersionPermissionRequest(
            layerName: layerName, 
            revisionId: revisionId, 
            statementId: statementId, 
            versionNumber: versionNumber
        )
        return try await self.removeLayerVersionPermission(input, logger: logger)
    }

    /// Revokes function-use permission from an Amazon Web Services service or another Amazon Web Services account. You can get the ID of the statement from the output of GetPolicy.
    @Sendable
    @inlinable
    public func removePermission(_ input: RemovePermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RemovePermission", 
            path: "/2015-03-31/functions/{FunctionName}/policy/{StatementId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Revokes function-use permission from an Amazon Web Services service or another Amazon Web Services account. You can get the ID of the statement from the output of GetPolicy.
    ///
    /// Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to remove permissions from a published version of the function.
    ///   - revisionId: Update the policy only if the revision ID matches the ID that's specified. Use this option to avoid modifying a policy that has changed since you last read it.
    ///   - statementId: Statement ID of the permission to remove.
    ///   - logger: Logger use during operation
    @inlinable
    public func removePermission(
        functionName: String,
        qualifier: String? = nil,
        revisionId: String? = nil,
        statementId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RemovePermissionRequest(
            functionName: functionName, 
            qualifier: qualifier, 
            revisionId: revisionId, 
            statementId: statementId
        )
        return try await self.removePermission(input, logger: logger)
    }

    /// Adds tags to a function, event source mapping, or code signing configuration.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/2017-03-31/tags/{Resource}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds tags to a function, event source mapping, or code signing configuration.
    ///
    /// Parameters:
    ///   - resource: The resource's Amazon Resource Name (ARN).
    ///   - tags: A list of tags to apply to the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resource: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagResourceRequest(
            resource: resource, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Removes tags from a function, event source mapping, or code signing configuration.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/2017-03-31/tags/{Resource}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes tags from a function, event source mapping, or code signing configuration.
    ///
    /// Parameters:
    ///   - resource: The resource's Amazon Resource Name (ARN).
    ///   - tagKeys: A list of tag keys to remove from the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resource: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagResourceRequest(
            resource: resource, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates the configuration of a Lambda function alias.
    @Sendable
    @inlinable
    public func updateAlias(_ input: UpdateAliasRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AliasConfiguration {
        try await self.client.execute(
            operation: "UpdateAlias", 
            path: "/2015-03-31/functions/{FunctionName}/aliases/{Name}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the configuration of a Lambda function alias.
    ///
    /// Parameters:
    ///   - description: A description of the alias.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - functionVersion: The function version that the alias invokes.
    ///   - name: The name of the alias.
    ///   - revisionId: Only update the alias if the revision ID matches the ID that's specified. Use this option to avoid modifying an alias that has changed since you last read it.
    ///   - routingConfig: The routing configuration of the alias.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateAlias(
        description: String? = nil,
        functionName: String,
        functionVersion: String? = nil,
        name: String,
        revisionId: String? = nil,
        routingConfig: AliasRoutingConfiguration? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AliasConfiguration {
        let input = UpdateAliasRequest(
            description: description, 
            functionName: functionName, 
            functionVersion: functionVersion, 
            name: name, 
            revisionId: revisionId, 
            routingConfig: routingConfig
        )
        return try await self.updateAlias(input, logger: logger)
    }

    /// Update the code signing configuration. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function.
    @Sendable
    @inlinable
    public func updateCodeSigningConfig(_ input: UpdateCodeSigningConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateCodeSigningConfigResponse {
        try await self.client.execute(
            operation: "UpdateCodeSigningConfig", 
            path: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Update the code signing configuration. Changes to the code signing configuration take effect the next time a user tries to deploy a code package to the function.
    ///
    /// Parameters:
    ///   - allowedPublishers: Signing profiles for this code signing configuration.
    ///   - codeSigningConfigArn: The The Amazon Resource Name (ARN) of the code signing configuration.
    ///   - codeSigningPolicies: The code signing policy.
    ///   - description: Descriptive name for this code signing configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateCodeSigningConfig(
        allowedPublishers: AllowedPublishers? = nil,
        codeSigningConfigArn: String,
        codeSigningPolicies: CodeSigningPolicies? = nil,
        description: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateCodeSigningConfigResponse {
        let input = UpdateCodeSigningConfigRequest(
            allowedPublishers: allowedPublishers, 
            codeSigningConfigArn: codeSigningConfigArn, 
            codeSigningPolicies: codeSigningPolicies, 
            description: description
        )
        return try await self.updateCodeSigningConfig(input, logger: logger)
    }

    /// Updates an event source mapping. You can change the function that Lambda invokes, or pause invocation and resume later from the same location. For details about how to configure different event sources, see the following topics.      Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB    The following error handling options are available only for DynamoDB and Kinesis event sources:    BisectBatchOnFunctionError – If the function returns an error, split the batch in two and retry.    MaximumRecordAgeInSeconds – Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires    MaximumRetryAttempts – Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.    ParallelizationFactor – Process multiple batches from each shard concurrently.   For stream sources (DynamoDB, Kinesis, Amazon MSK, and self-managed Apache Kafka), the following option is also available:    DestinationConfig – Send discarded records to an Amazon SQS queue, Amazon SNS topic, or  Amazon S3 bucket.   For information about which configuration parameters apply to each event source, see the following topics.     Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB
    @Sendable
    @inlinable
    public func updateEventSourceMapping(_ input: UpdateEventSourceMappingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EventSourceMappingConfiguration {
        try await self.client.execute(
            operation: "UpdateEventSourceMapping", 
            path: "/2015-03-31/event-source-mappings/{UUID}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an event source mapping. You can change the function that Lambda invokes, or pause invocation and resume later from the same location. For details about how to configure different event sources, see the following topics.      Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB    The following error handling options are available only for DynamoDB and Kinesis event sources:    BisectBatchOnFunctionError – If the function returns an error, split the batch in two and retry.    MaximumRecordAgeInSeconds – Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires    MaximumRetryAttempts – Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.    ParallelizationFactor – Process multiple batches from each shard concurrently.   For stream sources (DynamoDB, Kinesis, Amazon MSK, and self-managed Apache Kafka), the following option is also available:    DestinationConfig – Send discarded records to an Amazon SQS queue, Amazon SNS topic, or  Amazon S3 bucket.   For information about which configuration parameters apply to each event source, see the following topics.     Amazon DynamoDB Streams      Amazon Kinesis      Amazon SQS      Amazon MQ and RabbitMQ      Amazon MSK      Apache Kafka      Amazon DocumentDB
    ///
    /// Parameters:
    ///   - batchSize: The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation (6 MB).    Amazon Kinesis – Default 100. Max 10,000.    Amazon DynamoDB Streams – Default 100. Max 10,000.    Amazon Simple Queue Service – Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.    Amazon Managed Streaming for Apache Kafka – Default 100. Max 10,000.    Self-managed Apache Kafka – Default 100. Max 10,000.    Amazon MQ (ActiveMQ and RabbitMQ) – Default 100. Max 10,000.    DocumentDB – Default 100. Max 10,000.
    ///   - bisectBatchOnFunctionError: (Kinesis and DynamoDB Streams only) If the function returns an error, split the batch in two and retry.
    ///   - destinationConfig: (Kinesis, DynamoDB Streams, Amazon MSK, and self-managed Kafka only) A configuration object that specifies the destination of an event after Lambda processes it.
    ///   - documentDBEventSourceConfig: Specific configuration settings for a DocumentDB event source.
    ///   - enabled: When true, the event source mapping is active. When false, Lambda pauses polling and invocation. Default: True
    ///   - filterCriteria: An object that defines the filter criteria that determine whether Lambda should process an event. For more information, see Lambda event filtering.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – MyFunction.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Version or Alias ARN – arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD.    Partial ARN – 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.
    ///   - functionResponseTypes: (Kinesis, DynamoDB Streams, and Amazon SQS) A list of current response type enums applied to the event source mapping.
    ///   - kmsKeyArn:  The ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function's filter criteria. By default, Lambda does not encrypt your filter criteria object. Specify this property to encrypt data using your own customer managed key.
    ///   - maximumBatchingWindowInSeconds: The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function. You can configure MaximumBatchingWindowInSeconds to any value from 0 seconds to 300 seconds in increments of seconds. For Kinesis, DynamoDB, and Amazon SQS event sources, the default batching window is 0 seconds. For Amazon MSK, Self-managed Apache Kafka, Amazon MQ, and DocumentDB event sources, the default batching window is 500 ms. Note that because you can only change MaximumBatchingWindowInSeconds in increments of seconds, you cannot revert back to the 500 ms default batching window after you have changed it. To restore the default batching window, you must create a new event source mapping. Related setting: For Kinesis, DynamoDB, and Amazon SQS event sources, when you set BatchSize to a value greater than 10, you must set MaximumBatchingWindowInSeconds to at least 1.
    ///   - maximumRecordAgeInSeconds: (Kinesis and DynamoDB Streams only) Discard records older than the specified age. The default value is infinite (-1).
    ///   - maximumRetryAttempts: (Kinesis and DynamoDB Streams only) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.
    ///   - metricsConfig: The metrics configuration for your event source. For more information, see Event source mapping metrics.
    ///   - parallelizationFactor: (Kinesis and DynamoDB Streams only) The number of batches to process from each shard concurrently.
    ///   - provisionedPollerConfig: (Amazon MSK and self-managed Apache Kafka only) The provisioned mode configuration for the event source. For more information, see provisioned mode.
    ///   - scalingConfig: (Amazon SQS only) The scaling configuration for the event source. For more information, see Configuring maximum concurrency for Amazon SQS event sources.
    ///   - sourceAccessConfigurations: An array of authentication protocols or VPC components required to secure your event source.
    ///   - tumblingWindowInSeconds: (Kinesis and DynamoDB Streams only) The duration in seconds of a processing window for DynamoDB and Kinesis Streams event sources. A value of 0 seconds indicates no tumbling window.
    ///   - uuid: The identifier of the event source mapping.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateEventSourceMapping(
        batchSize: Int? = nil,
        bisectBatchOnFunctionError: Bool? = nil,
        destinationConfig: DestinationConfig? = nil,
        documentDBEventSourceConfig: DocumentDBEventSourceConfig? = nil,
        enabled: Bool? = nil,
        filterCriteria: FilterCriteria? = nil,
        functionName: String? = nil,
        functionResponseTypes: [FunctionResponseType]? = nil,
        kmsKeyArn: String? = nil,
        maximumBatchingWindowInSeconds: Int? = nil,
        maximumRecordAgeInSeconds: Int? = nil,
        maximumRetryAttempts: Int? = nil,
        metricsConfig: EventSourceMappingMetricsConfig? = nil,
        parallelizationFactor: Int? = nil,
        provisionedPollerConfig: ProvisionedPollerConfig? = nil,
        scalingConfig: ScalingConfig? = nil,
        sourceAccessConfigurations: [SourceAccessConfiguration]? = nil,
        tumblingWindowInSeconds: Int? = nil,
        uuid: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EventSourceMappingConfiguration {
        let input = UpdateEventSourceMappingRequest(
            batchSize: batchSize, 
            bisectBatchOnFunctionError: bisectBatchOnFunctionError, 
            destinationConfig: destinationConfig, 
            documentDBEventSourceConfig: documentDBEventSourceConfig, 
            enabled: enabled, 
            filterCriteria: filterCriteria, 
            functionName: functionName, 
            functionResponseTypes: functionResponseTypes, 
            kmsKeyArn: kmsKeyArn, 
            maximumBatchingWindowInSeconds: maximumBatchingWindowInSeconds, 
            maximumRecordAgeInSeconds: maximumRecordAgeInSeconds, 
            maximumRetryAttempts: maximumRetryAttempts, 
            metricsConfig: metricsConfig, 
            parallelizationFactor: parallelizationFactor, 
            provisionedPollerConfig: provisionedPollerConfig, 
            scalingConfig: scalingConfig, 
            sourceAccessConfigurations: sourceAccessConfigurations, 
            tumblingWindowInSeconds: tumblingWindowInSeconds, 
            uuid: uuid
        )
        return try await self.updateEventSourceMapping(input, logger: logger)
    }

    /// Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed by a trusted publisher. For more information, see Configuring code signing for Lambda. If the function's package type is Image, then you must specify the code package in ImageUri as the URI of a container image in the Amazon ECR registry. If the function's package type is Zip, then you must specify the deployment package as a .zip file archive. Enter the Amazon S3 bucket and key of the code .zip file location. You can also provide the function code inline using the ZipFile field. The code in the deployment package must be compatible with the target instruction set architecture of the function (x86-64 or arm64). The function's code is locked when you publish a version. You can't modify the code of a published version, only the unpublished version.  For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if you update the image tag to a new image, Lambda does not automatically update the function.
    @Sendable
    @inlinable
    public func updateFunctionCode(_ input: UpdateFunctionCodeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        try await self.client.execute(
            operation: "UpdateFunctionCode", 
            path: "/2015-03-31/functions/{FunctionName}/code", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed by a trusted publisher. For more information, see Configuring code signing for Lambda. If the function's package type is Image, then you must specify the code package in ImageUri as the URI of a container image in the Amazon ECR registry. If the function's package type is Zip, then you must specify the deployment package as a .zip file archive. Enter the Amazon S3 bucket and key of the code .zip file location. You can also provide the function code inline using the ZipFile field. The code in the deployment package must be compatible with the target instruction set architecture of the function (x86-64 or arm64). The function's code is locked when you publish a version. You can't modify the code of a published version, only the unpublished version.  For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if you update the image tag to a new image, Lambda does not automatically update the function.
    ///
    /// Parameters:
    ///   - architectures: The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is x86_64.
    ///   - dryRun: Set to true to validate the request parameters and access permissions without modifying the function code.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - imageUri: URI of a container image in the Amazon ECR registry. Do not use for a function defined with a .zip file archive.
    ///   - publish: Set to true to publish a new version of the function after updating the code. This has the same effect as calling PublishVersion separately.
    ///   - revisionId: Update the function only if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.
    ///   - s3Bucket: An Amazon S3 bucket in the same Amazon Web Services Region as your function. The bucket can be in a different
    ///   - s3Key: The Amazon S3 key of the deployment package. Use only with a function defined with a .zip file archive deployment package.
    ///   - s3ObjectVersion: For versioned objects, the version of the deployment package object to use.
    ///   - sourceKMSKeyArn: The ARN of the Key Management Service (KMS) customer managed key that's used to encrypt your function's  .zip deployment package. If you don't provide a customer managed key, Lambda uses an Amazon Web Services managed key.
    ///   - zipFile: The base64-encoded contents of the deployment package. Amazon Web Services SDK and CLI clients
    ///   - logger: Logger use during operation
    @inlinable
    public func updateFunctionCode(
        architectures: [Architecture]? = nil,
        dryRun: Bool? = nil,
        functionName: String,
        imageUri: String? = nil,
        publish: Bool? = nil,
        revisionId: String? = nil,
        s3Bucket: String? = nil,
        s3Key: String? = nil,
        s3ObjectVersion: String? = nil,
        sourceKMSKeyArn: String? = nil,
        zipFile: AWSBase64Data? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FunctionConfiguration {
        let input = UpdateFunctionCodeRequest(
            architectures: architectures, 
            dryRun: dryRun, 
            functionName: functionName, 
            imageUri: imageUri, 
            publish: publish, 
            revisionId: revisionId, 
            s3Bucket: s3Bucket, 
            s3Key: s3Key, 
            s3ObjectVersion: s3ObjectVersion, 
            sourceKMSKeyArn: sourceKMSKeyArn, 
            zipFile: zipFile
        )
        return try await self.updateFunctionCode(input, logger: logger)
    }

    /// Modify the version-specific settings of a Lambda function. When you update a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute. During this time, you can't modify the function, but you can still invoke it. The LastUpdateStatus, LastUpdateStatusReason, and LastUpdateStatusReasonCode fields in the response from GetFunctionConfiguration indicate when the update is complete and the function is processing events with the new configuration. For more information, see Lambda function states. These settings can vary between versions of a function and are locked when you publish a version. You can't modify the configuration of a published version, only the unpublished version. To configure function concurrency, use PutFunctionConcurrency. To grant invoke permissions to an Amazon Web Services account or Amazon Web Services service, use AddPermission.
    @Sendable
    @inlinable
    public func updateFunctionConfiguration(_ input: UpdateFunctionConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionConfiguration {
        try await self.client.execute(
            operation: "UpdateFunctionConfiguration", 
            path: "/2015-03-31/functions/{FunctionName}/configuration", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify the version-specific settings of a Lambda function. When you update a function, Lambda provisions an instance of the function and its supporting resources. If your function connects to a VPC, this process can take a minute. During this time, you can't modify the function, but you can still invoke it. The LastUpdateStatus, LastUpdateStatusReason, and LastUpdateStatusReasonCode fields in the response from GetFunctionConfiguration indicate when the update is complete and the function is processing events with the new configuration. For more information, see Lambda function states. These settings can vary between versions of a function and are locked when you publish a version. You can't modify the configuration of a published version, only the unpublished version. To configure function concurrency, use PutFunctionConcurrency. To grant invoke permissions to an Amazon Web Services account or Amazon Web Services service, use AddPermission.
    ///
    /// Parameters:
    ///   - deadLetterConfig: A dead-letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see Dead-letter queues.
    ///   - description: A description of the function.
    ///   - environment: Environment variables that are accessible from function code during execution.
    ///   - ephemeralStorage: The size of the function's /tmp directory in MB. The default value is 512, but can be any whole number between 512 and 10,240 MB. For more information, see Configuring ephemeral storage (console).
    ///   - fileSystemConfigs: Connection settings for an Amazon EFS file system.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - handler: The name of the method within your code that Lambda calls to run your function.
    ///   - imageConfig:  Container image configuration values that override the values in the container image Docker file.
    ///   - kmsKeyArn: The ARN of the Key Management Service (KMS) customer managed key that's used to encrypt the following resources:   The function's environment variables.   The function's Lambda SnapStart snapshots.   When used with SourceKMSKeyArn, the unzipped version of the .zip deployment package that's used for function invocations. For more information, see
    ///   - layers: A list of function layers to add to the function's execution environment. Specify each layer by its ARN, including the version.
    ///   - loggingConfig: The function's Amazon CloudWatch Logs configuration settings.
    ///   - memorySize: The amount of memory available to the function at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB.
    ///   - revisionId: Update the function only if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.
    ///   - role: The Amazon Resource Name (ARN) of the function's execution role.
    ///   - runtime: The identifier of the function's  runtime. Runtime is required if the deployment package is a .zip file archive. Specifying a runtime results in an error if you're deploying a function using a container image. The following list includes deprecated runtimes. Lambda blocks creating new functions and updating existing functions shortly after each runtime is deprecated. For more information, see Runtime use after deprecation. For a list of all currently supported runtimes, see Supported runtimes.
    ///   - snapStart: The function's SnapStart setting.
    ///   - timeout: The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see Lambda execution environment.
    ///   - tracingConfig: Set Mode to Active to sample and trace a subset of incoming requests with
    ///   - vpcConfig: For network connectivity to Amazon Web Services resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only through that VPC. For more information, see Configuring a Lambda function to access resources in a VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateFunctionConfiguration(
        deadLetterConfig: DeadLetterConfig? = nil,
        description: String? = nil,
        environment: Environment? = nil,
        ephemeralStorage: EphemeralStorage? = nil,
        fileSystemConfigs: [FileSystemConfig]? = nil,
        functionName: String,
        handler: String? = nil,
        imageConfig: ImageConfig? = nil,
        kmsKeyArn: String? = nil,
        layers: [String]? = nil,
        loggingConfig: LoggingConfig? = nil,
        memorySize: Int? = nil,
        revisionId: String? = nil,
        role: String? = nil,
        runtime: Runtime? = nil,
        snapStart: SnapStart? = nil,
        timeout: Int? = nil,
        tracingConfig: TracingConfig? = nil,
        vpcConfig: VpcConfig? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FunctionConfiguration {
        let input = UpdateFunctionConfigurationRequest(
            deadLetterConfig: deadLetterConfig, 
            description: description, 
            environment: environment, 
            ephemeralStorage: ephemeralStorage, 
            fileSystemConfigs: fileSystemConfigs, 
            functionName: functionName, 
            handler: handler, 
            imageConfig: imageConfig, 
            kmsKeyArn: kmsKeyArn, 
            layers: layers, 
            loggingConfig: loggingConfig, 
            memorySize: memorySize, 
            revisionId: revisionId, 
            role: role, 
            runtime: runtime, 
            snapStart: snapStart, 
            timeout: timeout, 
            tracingConfig: tracingConfig, 
            vpcConfig: vpcConfig
        )
        return try await self.updateFunctionConfiguration(input, logger: logger)
    }

    /// Updates the configuration for asynchronous invocation for a function, version, or alias. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    @Sendable
    @inlinable
    public func updateFunctionEventInvokeConfig(_ input: UpdateFunctionEventInvokeConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> FunctionEventInvokeConfig {
        try await self.client.execute(
            operation: "UpdateFunctionEventInvokeConfig", 
            path: "/2019-09-25/functions/{FunctionName}/event-invoke-config", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the configuration for asynchronous invocation for a function, version, or alias. To configure options for asynchronous invocation, use PutFunctionEventInvokeConfig.
    ///
    /// Parameters:
    ///   - destinationConfig: A destination for events after they have been sent to a function for processing.  Destinations     Function - The Amazon Resource Name (ARN) of a Lambda function.    Queue - The ARN of a standard SQS queue.    Bucket - The ARN of an Amazon S3 bucket.    Topic - The ARN of a standard SNS topic.    Event Bus - The ARN of an Amazon EventBridge event bus.    S3 buckets are supported only for on-failure destinations. To retain records of successful invocations, use another destination type.
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name - my-function (name-only), my-function:v1 (with alias).    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN - 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - maximumEventAgeInSeconds: The maximum age of a request that Lambda sends to a function for processing.
    ///   - maximumRetryAttempts: The maximum number of times to retry when the function returns an error.
    ///   - qualifier: A version number or alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateFunctionEventInvokeConfig(
        destinationConfig: DestinationConfig? = nil,
        functionName: String,
        maximumEventAgeInSeconds: Int? = nil,
        maximumRetryAttempts: Int? = nil,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> FunctionEventInvokeConfig {
        let input = UpdateFunctionEventInvokeConfigRequest(
            destinationConfig: destinationConfig, 
            functionName: functionName, 
            maximumEventAgeInSeconds: maximumEventAgeInSeconds, 
            maximumRetryAttempts: maximumRetryAttempts, 
            qualifier: qualifier
        )
        return try await self.updateFunctionEventInvokeConfig(input, logger: logger)
    }

    /// Updates the configuration for a Lambda function URL.
    @Sendable
    @inlinable
    public func updateFunctionUrlConfig(_ input: UpdateFunctionUrlConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFunctionUrlConfigResponse {
        try await self.client.execute(
            operation: "UpdateFunctionUrlConfig", 
            path: "/2021-10-31/functions/{FunctionName}/url", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the configuration for a Lambda function URL.
    ///
    /// Parameters:
    ///   - authType: The type of authentication that your function URL uses. Set to AWS_IAM if you want to restrict access to authenticated users only. Set to NONE if you want to bypass IAM authentication to create a public endpoint. For more information, see Security and auth model for Lambda function URLs.
    ///   - cors: The cross-origin resource sharing (CORS) settings for your function URL.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - invokeMode: Use one of the following options:    BUFFERED – This is the default option. Lambda invokes your function using the Invoke API operation. Invocation results  are available when the payload is complete. The maximum payload size is 6 MB.    RESPONSE_STREAM – Your function streams payload results as they become available. Lambda invokes your function using  the InvokeWithResponseStream API operation. The maximum response payload size is 20 MB, however, you can request a quota increase.
    ///   - qualifier: The alias name.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateFunctionUrlConfig(
        authType: FunctionUrlAuthType? = nil,
        cors: Cors? = nil,
        functionName: String,
        invokeMode: InvokeMode? = nil,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateFunctionUrlConfigResponse {
        let input = UpdateFunctionUrlConfigRequest(
            authType: authType, 
            cors: cors, 
            functionName: functionName, 
            invokeMode: invokeMode, 
            qualifier: qualifier
        )
        return try await self.updateFunctionUrlConfig(input, logger: logger)
    }
}

extension Lambda {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Lambda, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Lambda {
    /// Return PaginatorSequence for operation ``listAliases(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAliasesPaginator(
        _ input: ListAliasesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAliasesRequest, ListAliasesResponse> {
        return .init(
            input: input,
            command: self.listAliases,
            inputKey: \ListAliasesRequest.marker,
            outputKey: \ListAliasesResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAliases(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - functionVersion: Specify a function version to only list aliases that invoke that version.
    ///   - maxItems: Limit the number of aliases returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAliasesPaginator(
        functionName: String,
        functionVersion: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAliasesRequest, ListAliasesResponse> {
        let input = ListAliasesRequest(
            functionName: functionName, 
            functionVersion: functionVersion, 
            maxItems: maxItems
        )
        return self.listAliasesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listCodeSigningConfigs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listCodeSigningConfigsPaginator(
        _ input: ListCodeSigningConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCodeSigningConfigsRequest, ListCodeSigningConfigsResponse> {
        return .init(
            input: input,
            command: self.listCodeSigningConfigs,
            inputKey: \ListCodeSigningConfigsRequest.marker,
            outputKey: \ListCodeSigningConfigsResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listCodeSigningConfigs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxItems: Maximum number of items to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listCodeSigningConfigsPaginator(
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListCodeSigningConfigsRequest, ListCodeSigningConfigsResponse> {
        let input = ListCodeSigningConfigsRequest(
            maxItems: maxItems
        )
        return self.listCodeSigningConfigsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listEventSourceMappings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listEventSourceMappingsPaginator(
        _ input: ListEventSourceMappingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListEventSourceMappingsRequest, ListEventSourceMappingsResponse> {
        return .init(
            input: input,
            command: self.listEventSourceMappings,
            inputKey: \ListEventSourceMappingsRequest.marker,
            outputKey: \ListEventSourceMappingsResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listEventSourceMappings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - eventSourceArn: The Amazon Resource Name (ARN) of the event source.    Amazon Kinesis – The ARN of the data stream or a stream consumer.    Amazon DynamoDB Streams – The ARN of the stream.    Amazon Simple Queue Service – The ARN of the queue.    Amazon Managed Streaming for Apache Kafka – The ARN of the cluster or the ARN of the VPC connection (for cross-account event source mappings).    Amazon MQ – The ARN of the broker.    Amazon DocumentDB – The ARN of the DocumentDB change stream.
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – MyFunction.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Version or Alias ARN – arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD.    Partial ARN – 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.
    ///   - maxItems: The maximum number of event source mappings to return. Note that ListEventSourceMappings returns a maximum of 100 items in each response, even if you set the number higher.
    ///   - logger: Logger used for logging
    @inlinable
    public func listEventSourceMappingsPaginator(
        eventSourceArn: String? = nil,
        functionName: String? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListEventSourceMappingsRequest, ListEventSourceMappingsResponse> {
        let input = ListEventSourceMappingsRequest(
            eventSourceArn: eventSourceArn, 
            functionName: functionName, 
            maxItems: maxItems
        )
        return self.listEventSourceMappingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listFunctionEventInvokeConfigs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listFunctionEventInvokeConfigsPaginator(
        _ input: ListFunctionEventInvokeConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFunctionEventInvokeConfigsRequest, ListFunctionEventInvokeConfigsResponse> {
        return .init(
            input: input,
            command: self.listFunctionEventInvokeConfigs,
            inputKey: \ListFunctionEventInvokeConfigsRequest.marker,
            outputKey: \ListFunctionEventInvokeConfigsResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listFunctionEventInvokeConfigs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - my-function.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN - 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - maxItems: The maximum number of configurations to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listFunctionEventInvokeConfigsPaginator(
        functionName: String,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListFunctionEventInvokeConfigsRequest, ListFunctionEventInvokeConfigsResponse> {
        let input = ListFunctionEventInvokeConfigsRequest(
            functionName: functionName, 
            maxItems: maxItems
        )
        return self.listFunctionEventInvokeConfigsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listFunctionUrlConfigs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listFunctionUrlConfigsPaginator(
        _ input: ListFunctionUrlConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFunctionUrlConfigsRequest, ListFunctionUrlConfigsResponse> {
        return .init(
            input: input,
            command: self.listFunctionUrlConfigs,
            inputKey: \ListFunctionUrlConfigsRequest.marker,
            outputKey: \ListFunctionUrlConfigsResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listFunctionUrlConfigs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - maxItems: The maximum number of function URLs to return in the response. Note that ListFunctionUrlConfigs returns a maximum of 50 items in each response, even if you set the number higher.
    ///   - logger: Logger used for logging
    @inlinable
    public func listFunctionUrlConfigsPaginator(
        functionName: String,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListFunctionUrlConfigsRequest, ListFunctionUrlConfigsResponse> {
        let input = ListFunctionUrlConfigsRequest(
            functionName: functionName, 
            maxItems: maxItems
        )
        return self.listFunctionUrlConfigsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listFunctions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listFunctionsPaginator(
        _ input: ListFunctionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFunctionsRequest, ListFunctionsResponse> {
        return .init(
            input: input,
            command: self.listFunctions,
            inputKey: \ListFunctionsRequest.marker,
            outputKey: \ListFunctionsResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listFunctions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionVersion: Set to ALL to include entries for all published versions of each function.
    ///   - masterRegion: For Lambda@Edge functions, the Amazon Web Services Region of the master function. For example, us-east-1 filters the list of functions to include only Lambda@Edge functions replicated from a master function in US East (N. Virginia). If specified, you must set FunctionVersion to ALL.
    ///   - maxItems: The maximum number of functions to return in the response. Note that ListFunctions returns a maximum of 50 items in each response, even if you set the number higher.
    ///   - logger: Logger used for logging
    @inlinable
    public func listFunctionsPaginator(
        functionVersion: FunctionVersion? = nil,
        masterRegion: SotoCore.Region? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListFunctionsRequest, ListFunctionsResponse> {
        let input = ListFunctionsRequest(
            functionVersion: functionVersion, 
            masterRegion: masterRegion, 
            maxItems: maxItems
        )
        return self.listFunctionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listFunctionsByCodeSigningConfig(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listFunctionsByCodeSigningConfigPaginator(
        _ input: ListFunctionsByCodeSigningConfigRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFunctionsByCodeSigningConfigRequest, ListFunctionsByCodeSigningConfigResponse> {
        return .init(
            input: input,
            command: self.listFunctionsByCodeSigningConfig,
            inputKey: \ListFunctionsByCodeSigningConfigRequest.marker,
            outputKey: \ListFunctionsByCodeSigningConfigResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listFunctionsByCodeSigningConfig(_:logger:)``.
    ///
    /// - Parameters:
    ///   - codeSigningConfigArn: The The Amazon Resource Name (ARN) of the code signing configuration.
    ///   - maxItems: Maximum number of items to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listFunctionsByCodeSigningConfigPaginator(
        codeSigningConfigArn: String,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListFunctionsByCodeSigningConfigRequest, ListFunctionsByCodeSigningConfigResponse> {
        let input = ListFunctionsByCodeSigningConfigRequest(
            codeSigningConfigArn: codeSigningConfigArn, 
            maxItems: maxItems
        )
        return self.listFunctionsByCodeSigningConfigPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLayerVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLayerVersionsPaginator(
        _ input: ListLayerVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLayerVersionsRequest, ListLayerVersionsResponse> {
        return .init(
            input: input,
            command: self.listLayerVersions,
            inputKey: \ListLayerVersionsRequest.marker,
            outputKey: \ListLayerVersionsResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLayerVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - compatibleArchitecture: The compatible
    ///   - compatibleRuntime: A runtime identifier. The following list includes deprecated runtimes. For more information, see Runtime use after deprecation. For a list of all currently supported runtimes, see Supported runtimes.
    ///   - layerName: The name or Amazon Resource Name (ARN) of the layer.
    ///   - maxItems: The maximum number of versions to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLayerVersionsPaginator(
        compatibleArchitecture: Architecture? = nil,
        compatibleRuntime: Runtime? = nil,
        layerName: String,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLayerVersionsRequest, ListLayerVersionsResponse> {
        let input = ListLayerVersionsRequest(
            compatibleArchitecture: compatibleArchitecture, 
            compatibleRuntime: compatibleRuntime, 
            layerName: layerName, 
            maxItems: maxItems
        )
        return self.listLayerVersionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listLayers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listLayersPaginator(
        _ input: ListLayersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLayersRequest, ListLayersResponse> {
        return .init(
            input: input,
            command: self.listLayers,
            inputKey: \ListLayersRequest.marker,
            outputKey: \ListLayersResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listLayers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - compatibleArchitecture: The compatible
    ///   - compatibleRuntime: A runtime identifier. The following list includes deprecated runtimes. For more information, see Runtime use after deprecation. For a list of all currently supported runtimes, see Supported runtimes.
    ///   - maxItems: The maximum number of layers to return.
    ///   - logger: Logger used for logging
    @inlinable
    public func listLayersPaginator(
        compatibleArchitecture: Architecture? = nil,
        compatibleRuntime: Runtime? = nil,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListLayersRequest, ListLayersResponse> {
        let input = ListLayersRequest(
            compatibleArchitecture: compatibleArchitecture, 
            compatibleRuntime: compatibleRuntime, 
            maxItems: maxItems
        )
        return self.listLayersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listProvisionedConcurrencyConfigs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listProvisionedConcurrencyConfigsPaginator(
        _ input: ListProvisionedConcurrencyConfigsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListProvisionedConcurrencyConfigsRequest, ListProvisionedConcurrencyConfigsResponse> {
        return .init(
            input: input,
            command: self.listProvisionedConcurrencyConfigs,
            inputKey: \ListProvisionedConcurrencyConfigsRequest.marker,
            outputKey: \ListProvisionedConcurrencyConfigsResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listProvisionedConcurrencyConfigs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name – my-function.    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - maxItems: Specify a number to limit the number of configurations returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func listProvisionedConcurrencyConfigsPaginator(
        functionName: String,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListProvisionedConcurrencyConfigsRequest, ListProvisionedConcurrencyConfigsResponse> {
        let input = ListProvisionedConcurrencyConfigsRequest(
            functionName: functionName, 
            maxItems: maxItems
        )
        return self.listProvisionedConcurrencyConfigsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listVersionsByFunction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listVersionsByFunctionPaginator(
        _ input: ListVersionsByFunctionRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListVersionsByFunctionRequest, ListVersionsByFunctionResponse> {
        return .init(
            input: input,
            command: self.listVersionsByFunction,
            inputKey: \ListVersionsByFunctionRequest.marker,
            outputKey: \ListVersionsByFunctionResponse.nextMarker,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listVersionsByFunction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function.  Name formats     Function name - MyFunction.    Function ARN - arn:aws:lambda:us-west-2:123456789012:function:MyFunction.    Partial ARN - 123456789012:function:MyFunction.   The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - maxItems: The maximum number of versions to return. Note that ListVersionsByFunction returns a maximum of 50 items in each response,  even if you set the number higher.
    ///   - logger: Logger used for logging
    @inlinable
    public func listVersionsByFunctionPaginator(
        functionName: String,
        maxItems: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListVersionsByFunctionRequest, ListVersionsByFunctionResponse> {
        let input = ListVersionsByFunctionRequest(
            functionName: functionName, 
            maxItems: maxItems
        )
        return self.listVersionsByFunctionPaginator(input, logger: logger)
    }
}

extension Lambda.ListAliasesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListAliasesRequest {
        return .init(
            functionName: self.functionName,
            functionVersion: self.functionVersion,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListCodeSigningConfigsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListCodeSigningConfigsRequest {
        return .init(
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListEventSourceMappingsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListEventSourceMappingsRequest {
        return .init(
            eventSourceArn: self.eventSourceArn,
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListFunctionEventInvokeConfigsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListFunctionEventInvokeConfigsRequest {
        return .init(
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListFunctionUrlConfigsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListFunctionUrlConfigsRequest {
        return .init(
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListFunctionsByCodeSigningConfigRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListFunctionsByCodeSigningConfigRequest {
        return .init(
            codeSigningConfigArn: self.codeSigningConfigArn,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListFunctionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListFunctionsRequest {
        return .init(
            functionVersion: self.functionVersion,
            marker: token,
            masterRegion: self.masterRegion,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListLayerVersionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListLayerVersionsRequest {
        return .init(
            compatibleArchitecture: self.compatibleArchitecture,
            compatibleRuntime: self.compatibleRuntime,
            layerName: self.layerName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListLayersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListLayersRequest {
        return .init(
            compatibleArchitecture: self.compatibleArchitecture,
            compatibleRuntime: self.compatibleRuntime,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListProvisionedConcurrencyConfigsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListProvisionedConcurrencyConfigsRequest {
        return .init(
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

extension Lambda.ListVersionsByFunctionRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Lambda.ListVersionsByFunctionRequest {
        return .init(
            functionName: self.functionName,
            marker: token,
            maxItems: self.maxItems
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Lambda {
    /// Waiter for operation ``getFunctionConfiguration(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionActive(
        _ input: GetFunctionConfigurationRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetFunctionConfigurationRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("state", expected: "Active")),
                .init(state: .failure, matcher: try! JMESPathMatcher("state", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("state", expected: "Pending")),
            ],
            minDelayTime: .seconds(5),
            command: self.getFunctionConfiguration
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getFunctionConfiguration(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to get details about a published version of the function.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionActive(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetFunctionConfigurationRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        try await self.waitUntilFunctionActive(input, logger: logger)
    }

    /// Waiter for operation ``getFunction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionActiveV2(
        _ input: GetFunctionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetFunctionRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("configuration.state", expected: "Active")),
                .init(state: .failure, matcher: try! JMESPathMatcher("configuration.state", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("configuration.state", expected: "Pending")),
            ],
            minDelayTime: .seconds(1),
            command: self.getFunction
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getFunction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to get details about a published version of the function.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionActiveV2(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetFunctionRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        try await self.waitUntilFunctionActiveV2(input, logger: logger)
    }

    /// Waiter for operation ``getFunction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionExists(
        _ input: GetFunctionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetFunctionRequest, _>(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
            ],
            minDelayTime: .seconds(1),
            command: self.getFunction
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getFunction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to get details about a published version of the function.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionExists(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetFunctionRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        try await self.waitUntilFunctionExists(input, logger: logger)
    }

    /// Waiter for operation ``getFunctionConfiguration(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionUpdated(
        _ input: GetFunctionConfigurationRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetFunctionConfigurationRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("lastUpdateStatus", expected: "Successful")),
                .init(state: .failure, matcher: try! JMESPathMatcher("lastUpdateStatus", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("lastUpdateStatus", expected: "InProgress")),
            ],
            minDelayTime: .seconds(5),
            command: self.getFunctionConfiguration
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getFunctionConfiguration(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to get details about a published version of the function.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionUpdated(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetFunctionConfigurationRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        try await self.waitUntilFunctionUpdated(input, logger: logger)
    }

    /// Waiter for operation ``getFunction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionUpdatedV2(
        _ input: GetFunctionRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetFunctionRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("configuration.lastUpdateStatus", expected: "Successful")),
                .init(state: .failure, matcher: try! JMESPathMatcher("configuration.lastUpdateStatus", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("configuration.lastUpdateStatus", expected: "InProgress")),
            ],
            minDelayTime: .seconds(1),
            command: self.getFunction
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getFunction(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to get details about a published version of the function.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilFunctionUpdatedV2(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetFunctionRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        try await self.waitUntilFunctionUpdatedV2(input, logger: logger)
    }

    /// Waiter for operation ``getFunctionConfiguration(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilPublishedVersionActive(
        _ input: GetFunctionConfigurationRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetFunctionConfigurationRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("state", expected: "Active")),
                .init(state: .failure, matcher: try! JMESPathMatcher("state", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESPathMatcher("state", expected: "Pending")),
            ],
            minDelayTime: .seconds(5),
            command: self.getFunctionConfiguration
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getFunctionConfiguration(_:logger:)``.
    ///
    /// - Parameters:
    ///   - functionName: The name or ARN of the Lambda function, version, or alias.  Name formats     Function name – my-function (name-only), my-function:v1 (with alias).    Function ARN – arn:aws:lambda:us-west-2:123456789012:function:my-function.    Partial ARN – 123456789012:function:my-function.   You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
    ///   - qualifier: Specify a version or alias to get details about a published version of the function.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilPublishedVersionActive(
        functionName: String,
        qualifier: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetFunctionConfigurationRequest(
            functionName: functionName, 
            qualifier: qualifier
        )
        try await self.waitUntilPublishedVersionActive(input, logger: logger)
    }
}
