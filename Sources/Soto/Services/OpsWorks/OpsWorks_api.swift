//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS OpsWorks service.
///
/// OpsWorks Welcome to the OpsWorks Stacks API Reference. This guide provides descriptions, syntax,  and usage examples for OpsWorks Stacks actions and data types, including common parameters and error codes.  OpsWorks Stacks is an application management service that provides an integrated experience for managing the complete application lifecycle. For information about OpsWorks, see the OpsWorks information page.  SDKs and CLI  Use the OpsWorks Stacks API by using the Command Line Interface (CLI) or by using one of the  Amazon Web Services SDKs to implement applications in your preferred language. For more information, see:    CLI     SDK for Java     SDK for .NET     SDK for PHP     SDK for Ruby     Amazon Web Services SDK for Node.js     SDK for Python (Boto)     Endpoints  OpsWorks Stacks supports the following endpoints, all HTTPS. You must connect to one of the following endpoints.  Stacks can only be accessed or managed within the endpoint in which they are created.   opsworks.us-east-1.amazonaws.com   opsworks.us-east-2.amazonaws.com   opsworks.us-west-1.amazonaws.com   opsworks.us-west-2.amazonaws.com   opsworks.ca-central-1.amazonaws.com (API only; not available in the Amazon Web Services Management Console)   opsworks.eu-west-1.amazonaws.com   opsworks.eu-west-2.amazonaws.com   opsworks.eu-west-3.amazonaws.com   opsworks.eu-central-1.amazonaws.com   opsworks.ap-northeast-1.amazonaws.com   opsworks.ap-northeast-2.amazonaws.com   opsworks.ap-south-1.amazonaws.com   opsworks.ap-southeast-1.amazonaws.com   opsworks.ap-southeast-2.amazonaws.com   opsworks.sa-east-1.amazonaws.com    Chef Versions  When you call CreateStack, CloneStack, or UpdateStack we recommend you use the ConfigurationManager parameter to specify the Chef version. The recommended and default value for Linux stacks is currently 12. Windows stacks use Chef 12.2. For more information, see Chef Versions.  You can specify Chef 12, 11.10, or 11.4 for your Linux stack. We recommend migrating your existing Linux stacks  to Chef 12 as soon as possible.
public struct OpsWorks: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the OpsWorks client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "OpsWorks_20130218",
            serviceName: "OpsWorks",
            serviceIdentifier: "opsworks",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2013-02-18",
            endpoint: endpoint,
            errorType: OpsWorksErrorType.self,
            xmlNamespace: "http://opsworks.amazonaws.com/doc/2013-02-18/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Assign a registered instance to a layer.   You can assign registered on-premises instances to any layer type.   You can assign registered Amazon EC2 instances only to custom layers.   You cannot use this action with instances that were created with OpsWorks Stacks.    Required Permissions: To use this action, an Identity and Access Management (IAM) user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func assignInstance(_ input: AssignInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AssignInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assign a registered instance to a layer.   You can assign registered on-premises instances to any layer type.   You can assign registered Amazon EC2 instances only to custom layers.   You cannot use this action with instances that were created with OpsWorks Stacks.    Required Permissions: To use this action, an Identity and Access Management (IAM) user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID.
    ///   - layerIds: The layer ID, which must correspond to a custom layer. You cannot assign a registered instance to a built-in layer.
    ///   - logger: Logger use during operation
    @inlinable
    public func assignInstance(
        instanceId: String,
        layerIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AssignInstanceRequest(
            instanceId: instanceId, 
            layerIds: layerIds
        )
        return try await self.assignInstance(input, logger: logger)
    }

    /// Assigns one of the stack's registered Amazon EBS volumes to a specified instance. The volume must first be registered with the stack by calling RegisterVolume. After you register the volume, you must call UpdateVolume to specify a mount point before calling AssignVolume. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage  permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func assignVolume(_ input: AssignVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AssignVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns one of the stack's registered Amazon EBS volumes to a specified instance. The volume must first be registered with the stack by calling RegisterVolume. After you register the volume, you must call UpdateVolume to specify a mount point before calling AssignVolume. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage  permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID.
    ///   - volumeId: The volume ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func assignVolume(
        instanceId: String? = nil,
        volumeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AssignVolumeRequest(
            instanceId: instanceId, 
            volumeId: volumeId
        )
        return try await self.assignVolume(input, logger: logger)
    }

    /// Associates one of the stack's registered Elastic IP addresses with a specified instance. The address must first be registered with the stack by calling RegisterElasticIp. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a  Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func associateElasticIp(_ input: AssociateElasticIpRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AssociateElasticIp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates one of the stack's registered Elastic IP addresses with a specified instance. The address must first be registered with the stack by calling RegisterElasticIp. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a  Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - elasticIp: The Elastic IP address.
    ///   - instanceId: The instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateElasticIp(
        elasticIp: String,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AssociateElasticIpRequest(
            elasticIp: elasticIp, 
            instanceId: instanceId
        )
        return try await self.associateElasticIp(input, logger: logger)
    }

    /// Attaches an Elastic Load Balancing load balancer to a specified layer. OpsWorks Stacks does not support  Application Load Balancer. You can only use Classic Load Balancer with OpsWorks Stacks.  For more information, see Elastic Load Balancing.  You must create the Elastic Load Balancing instance separately, by using the Elastic Load Balancing console, API, or CLI. For more information, see the Elastic Load Balancing Developer Guide.   Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func attachElasticLoadBalancer(_ input: AttachElasticLoadBalancerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AttachElasticLoadBalancer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attaches an Elastic Load Balancing load balancer to a specified layer. OpsWorks Stacks does not support  Application Load Balancer. You can only use Classic Load Balancer with OpsWorks Stacks.  For more information, see Elastic Load Balancing.  You must create the Elastic Load Balancing instance separately, by using the Elastic Load Balancing console, API, or CLI. For more information, see the Elastic Load Balancing Developer Guide.   Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - elasticLoadBalancerName: The Elastic Load Balancing instance's name.
    ///   - layerId: The ID of the layer to which the Elastic Load Balancing instance is to be attached.
    ///   - logger: Logger use during operation
    @inlinable
    public func attachElasticLoadBalancer(
        elasticLoadBalancerName: String,
        layerId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AttachElasticLoadBalancerRequest(
            elasticLoadBalancerName: elasticLoadBalancerName, 
            layerId: layerId
        )
        return try await self.attachElasticLoadBalancer(input, logger: logger)
    }

    /// Creates a clone of a specified stack. For more information, see Clone a Stack. By default, all parameters are set to the values used by the parent stack.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func cloneStack(_ input: CloneStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CloneStackResult {
        try await self.client.execute(
            operation: "CloneStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a clone of a specified stack. For more information, see Clone a Stack. By default, all parameters are set to the values used by the parent stack.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - agentVersion: The default OpsWorks Stacks agent version. You have the following options:   Auto-update - Set this parameter to LATEST. OpsWorks Stacks automatically installs new agent versions on the stack's instances as soon as they are available.   Fixed version - Set this parameter to your preferred agent version. To update  the agent version, you must edit the stack configuration and specify a new version.  OpsWorks Stacks automatically installs that version on the stack's instances.   The default setting is LATEST. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions. AgentVersion cannot be set to Chef 12.2.  You can also specify an agent version when you create or update an instance, which overrides the stack's  default setting.
    ///   - attributes: A list of stack attributes and values as key/value pairs to be added to the cloned stack.
    ///   - chefConfiguration: A ChefConfiguration object that specifies whether to enable Berkshelf and the Berkshelf version on Chef 11.10 stacks. For more information, see Create a New Stack.
    ///   - cloneAppIds: A list of source stack app IDs to be included in the cloned stack.
    ///   - clonePermissions: Whether to clone the source stack's permissions.
    ///   - configurationManager: The configuration manager. When you clone a stack we recommend that you use the configuration manager to specify the  Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows stacks. The default value for Linux stacks is currently 12.
    ///   - customCookbooksSource: Contains the information required to retrieve an app or cookbook from a repository. For more information,  see Adding Apps or  Cookbooks and Recipes.
    ///   - customJson: A string that contains user-defined, custom JSON. It is used to override the corresponding default stack configuration  JSON values. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information about custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes
    ///   - defaultAvailabilityZone: The cloned stack's default Availability Zone, which must be in the specified region. For more information, see Regions and Endpoints. If you also specify a value for DefaultSubnetId, the subnet must be in the same zone. For more information, see the VpcId parameter description.
    ///   - defaultInstanceProfileArn: The Amazon Resource Name (ARN) of an IAM profile that is the default profile for all of the stack's  EC2 instances. For more information about IAM ARNs, see Using Identifiers.
    ///   - defaultOs: The stack's operating system, which must be set to one of the following.   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2, Amazon Linux 2018.03, Amazon Linux 2017.09, Amazon Linux 2017.03, Amazon Linux 2016.09, Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 18.04 LTS, Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS Linux 7     Red Hat Enterprise Linux 7     Microsoft Windows Server 2012 R2 Base, Microsoft Windows Server 2012 R2 with SQL Server Express,  Microsoft Windows Server 2012 R2 with SQL Server Standard, or Microsoft Windows Server 2012 R2 with SQL Server Web.   A custom AMI: Custom. You specify the custom AMI you want to use when you create instances. For more information about how to use custom AMIs with OpsWorks, see Using Custom AMIs.   The default option is the parent stack's operating system. Not all operating systems are supported with all versions of Chef. For more information about supported operating systems, see OpsWorks Stacks Operating Systems.  You can specify a different Linux operating system for the cloned stack, but you cannot change from Linux to  Windows or Windows to Linux.
    ///   - defaultRootDeviceType: The default root device type. This value is used by default for all instances in the cloned stack, but you can override it when you create an instance. For more information, see Storage for the Root Device.
    ///   - defaultSshKeyName: A default Amazon EC2 key pair name. The default value is none. If you specify a key pair name,  OpsWorks installs the public key on the instance and you can use the private key with an SSH client to log in to the instance. For more information, see  Using SSH to Communicate with an Instance and  Managing SSH Access. You can override this setting by specifying a different key pair, or no key pair, when you  create an instance.
    ///   - defaultSubnetId: The stack's default VPC subnet ID. This parameter is required if you specify a value for the VpcId parameter. All instances are launched into this subnet unless you specify otherwise when you create the instance. If you also specify a value for DefaultAvailabilityZone, the subnet must be in that zone. For information on default values and when this parameter is required, see the VpcId parameter description.
    ///   - hostnameTheme: The stack's host name theme, with spaces are replaced by underscores. The theme is used to generate host names for the stack's instances. By default, HostnameTheme is set to Layer_Dependent, which creates host names by appending integers to the layer's short name. The other themes are:    Baked_Goods     Clouds     Europe_Cities     Fruits     Greek_Deities_and_Titans     Legendary_creatures_from_Japan     Planets_and_Moons     Roman_Deities     Scottish_Islands     US_Cities     Wild_Cats    To obtain a generated host name, call GetHostNameSuggestion, which returns a host name based on the current theme.
    ///   - name: The cloned stack name. Stack names can be a maximum of 64 characters.
    ///   - region: The cloned stack Amazon Web Services Region, such as ap-northeast-2. For more information  about Amazon Web Services Regions, see Regions and Endpoints.
    ///   - serviceRoleArn: The stack Identity and Access Management (IAM) role, which allows OpsWorks Stacks to work with Amazon Web Services resources on your behalf. You must set this parameter to the Amazon Resource Name (ARN) for an existing IAM role. If you create a stack by using the OpsWorkss Stacks console, it creates the role for you. You can obtain an existing stack's IAM ARN programmatically by calling DescribePermissions. For more information about IAM ARNs, see  Using Identifiers.  You must set this parameter to a valid service role ARN or the action will fail; there is no default value.  You can specify the source stack's service role ARN, if you prefer, but you must do so explicitly.
    ///   - sourceStackId: The source stack ID.
    ///   - useCustomCookbooks: Whether to use custom cookbooks.
    ///   - useOpsworksSecurityGroups: Whether to associate the OpsWorks Stacks built-in security groups with the stack's layers. OpsWorks Stacks provides a standard set of security groups, one for each layer, which are associated with layers by default. With UseOpsworksSecurityGroups you can instead provide your own custom security groups. UseOpsworksSecurityGroups has the following settings:    True - OpsWorks Stacks automatically associates the appropriate built-in security group with  each layer (default setting). You can associate additional security groups with a layer after you create it but you cannot  delete the built-in security group.   False - OpsWorks Stacks does not associate built-in security groups with layers.  You must create appropriate Amazon EC2 security groups and associate a security group with each  layer that you create. However, you can still manually associate a built-in security group with a layer on creation;  custom security groups are required only for those layers that need custom settings.   For more information, see Create a New Stack.
    ///   - vpcId: The ID of the VPC that the cloned stack is to be launched into. It must be in the specified region. All instances are launched into this VPC, and you cannot change the ID later.   If your account supports EC2 Classic, the default value is no VPC.   If your account does not support EC2 Classic, the default value is the default VPC for the specified region.   If the VPC ID corresponds to a default VPC and you have specified either the DefaultAvailabilityZone or the DefaultSubnetId parameter only, OpsWorks Stacks infers the value of the other parameter. If you specify neither parameter, OpsWorks Stacks sets these parameters to the first valid Availability Zone for the specified region and the corresponding default VPC subnet ID, respectively.  If you specify a nondefault VPC ID, note the following:   It must belong to a VPC in your account that is in the specified region.   You must specify a value for DefaultSubnetId.   For more information about how to use OpsWorks Stacks with a VPC, see Running a Stack in a VPC. For more information about default VPC and EC2 Classic, see Supported Platforms.
    ///   - logger: Logger use during operation
    @inlinable
    public func cloneStack(
        agentVersion: String? = nil,
        attributes: [StackAttributesKeys: String]? = nil,
        chefConfiguration: ChefConfiguration? = nil,
        cloneAppIds: [String]? = nil,
        clonePermissions: Bool? = nil,
        configurationManager: StackConfigurationManager? = nil,
        customCookbooksSource: Source? = nil,
        customJson: String? = nil,
        defaultAvailabilityZone: String? = nil,
        defaultInstanceProfileArn: String? = nil,
        defaultOs: String? = nil,
        defaultRootDeviceType: RootDeviceType? = nil,
        defaultSshKeyName: String? = nil,
        defaultSubnetId: String? = nil,
        hostnameTheme: String? = nil,
        name: String? = nil,
        region: String? = nil,
        serviceRoleArn: String,
        sourceStackId: String,
        useCustomCookbooks: Bool? = nil,
        useOpsworksSecurityGroups: Bool? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CloneStackResult {
        let input = CloneStackRequest(
            agentVersion: agentVersion, 
            attributes: attributes, 
            chefConfiguration: chefConfiguration, 
            cloneAppIds: cloneAppIds, 
            clonePermissions: clonePermissions, 
            configurationManager: configurationManager, 
            customCookbooksSource: customCookbooksSource, 
            customJson: customJson, 
            defaultAvailabilityZone: defaultAvailabilityZone, 
            defaultInstanceProfileArn: defaultInstanceProfileArn, 
            defaultOs: defaultOs, 
            defaultRootDeviceType: defaultRootDeviceType, 
            defaultSshKeyName: defaultSshKeyName, 
            defaultSubnetId: defaultSubnetId, 
            hostnameTheme: hostnameTheme, 
            name: name, 
            region: region, 
            serviceRoleArn: serviceRoleArn, 
            sourceStackId: sourceStackId, 
            useCustomCookbooks: useCustomCookbooks, 
            useOpsworksSecurityGroups: useOpsworksSecurityGroups, 
            vpcId: vpcId
        )
        return try await self.cloneStack(input, logger: logger)
    }

    /// Creates an app for a specified stack. For more information, see Creating Apps.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func createApp(_ input: CreateAppRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAppResult {
        try await self.client.execute(
            operation: "CreateApp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an app for a specified stack. For more information, see Creating Apps.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - appSource: A Source object that specifies the app repository.
    ///   - attributes: One or more user-defined key/value pairs to be added to the stack attributes.
    ///   - dataSources: The app's data source.
    ///   - description: A description of the app.
    ///   - domains: The app virtual host settings, with multiple domains separated by commas. For example: 'www.example.com, example.com'
    ///   - enableSsl: Whether to enable SSL for the app.
    ///   - environment: An array of EnvironmentVariable objects that specify environment variables to be associated with the app. After you deploy the app, these variables are defined on the associated app server instance. For more information, see  Environment Variables. There is no specific limit on the number of environment variables. However, the size of the associated data structure - which includes the variables' names, values, and protected flag values - cannot exceed 20 KB. This limit should accommodate most if not all use cases. Exceeding it will cause an exception with the message, "Environment: is too large (maximum is 20KB)."  If you have specified one or more environment variables, you cannot modify the stack's Chef version.
    ///   - name: The app name.
    ///   - shortname: The app's short name.
    ///   - sslConfiguration: An SslConfiguration object with the SSL configuration.
    ///   - stackId: The stack ID.
    ///   - type: The app type. Each supported type is associated with a particular layer. For example, PHP applications are associated with a PHP layer. OpsWorks Stacks deploys an application to those instances that are members of the corresponding layer. If your app isn't one of the standard types, or you prefer to implement your own Deploy recipes, specify other.
    ///   - logger: Logger use during operation
    @inlinable
    public func createApp(
        appSource: Source? = nil,
        attributes: [AppAttributesKeys: String]? = nil,
        dataSources: [DataSource]? = nil,
        description: String? = nil,
        domains: [String]? = nil,
        enableSsl: Bool? = nil,
        environment: [EnvironmentVariable]? = nil,
        name: String,
        shortname: String? = nil,
        sslConfiguration: SslConfiguration? = nil,
        stackId: String,
        type: AppType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateAppResult {
        let input = CreateAppRequest(
            appSource: appSource, 
            attributes: attributes, 
            dataSources: dataSources, 
            description: description, 
            domains: domains, 
            enableSsl: enableSsl, 
            environment: environment, 
            name: name, 
            shortname: shortname, 
            sslConfiguration: sslConfiguration, 
            stackId: stackId, 
            type: type
        )
        return try await self.createApp(input, logger: logger)
    }

    /// Runs deployment or stack commands. For more information, see Deploying Apps and Run Stack Commands.  Required Permissions: To use this action, an IAM user must have a Deploy or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func createDeployment(_ input: CreateDeploymentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDeploymentResult {
        try await self.client.execute(
            operation: "CreateDeployment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Runs deployment or stack commands. For more information, see Deploying Apps and Run Stack Commands.  Required Permissions: To use this action, an IAM user must have a Deploy or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - appId: The app ID. This parameter is required for app deployments, but not for other deployment commands.
    ///   - command: A DeploymentCommand object that specifies the deployment command and any associated arguments.
    ///   - comment: A user-defined comment.
    ///   - customJson: A string that contains user-defined, custom JSON. You can use this parameter to override some corresponding default  stack configuration JSON values. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information about custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes and  Overriding Attributes With Custom  JSON.
    ///   - instanceIds: The instance IDs for the deployment targets.
    ///   - layerIds: The layer IDs for the deployment targets.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDeployment(
        appId: String? = nil,
        command: DeploymentCommand,
        comment: String? = nil,
        customJson: String? = nil,
        instanceIds: [String]? = nil,
        layerIds: [String]? = nil,
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDeploymentResult {
        let input = CreateDeploymentRequest(
            appId: appId, 
            command: command, 
            comment: comment, 
            customJson: customJson, 
            instanceIds: instanceIds, 
            layerIds: layerIds, 
            stackId: stackId
        )
        return try await self.createDeployment(input, logger: logger)
    }

    /// Creates an instance in a specified stack. For more information, see Adding an Instance to a Layer.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func createInstance(_ input: CreateInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInstanceResult {
        try await self.client.execute(
            operation: "CreateInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an instance in a specified stack. For more information, see Adding an Instance to a Layer.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - agentVersion: The default OpsWorks Stacks agent version. You have the following options:    INHERIT - Use the stack's default agent version setting.    version_number - Use the specified agent version. This value overrides the stack's default setting. To update the agent version, edit the instance configuration and specify a new version. OpsWorks Stacks installs that version on the instance.   The default setting is INHERIT. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions.  AgentVersion cannot be set to Chef 12.2.
    ///   - amiId: A custom AMI ID to be used to create the instance. The AMI should be based on one of the supported operating systems. For more information, see Using Custom AMIs.  If you specify a custom AMI, you must set Os to Custom.
    ///   - architecture: The instance architecture. The default option is x86_64. Instance types do not necessarily support both architectures. For a list of the architectures that are supported by the different instance types, see Instance Families and Types.
    ///   - autoScalingType: For load-based or time-based instances, the type. Windows stacks can use only time-based instances.
    ///   - availabilityZone: The instance Availability Zone. For more information, see Regions and Endpoints.
    ///   - blockDeviceMappings: An array of BlockDeviceMapping objects that specify the instance's block devices. For more information, see Block Device Mapping. Note that block device mappings are not supported for custom AMIs.
    ///   - ebsOptimized: Whether to create an Amazon EBS-optimized instance.
    ///   - hostname: The instance host name. The following are character limits for instance host names.   Linux-based instances: 63 characters   Windows-based instances: 15 characters
    ///   - installUpdatesOnBoot: Whether to install operating system and package updates when the instance boots. The default value is true. To control when updates are installed, set this value to false. You must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or by manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   We strongly recommend using the default value of true to ensure that your instances have the latest security updates.
    ///   - instanceType: The instance type, such as t2.micro. For a list of supported instance types, open the stack in the console, choose Instances, and choose + Instance. The Size list contains the currently supported types.  For more information, see Instance Families and Types. The parameter values that you use to specify the various types are in the API Name column of the Available Instance Types table.
    ///   - layerIds: An array that contains the instance's layer IDs.
    ///   - os: The instance's operating system, which must be set to one of the following.   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2, Amazon Linux 2018.03, Amazon Linux 2017.09, Amazon Linux 2017.03, Amazon Linux 2016.09,  Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 18.04 LTS, Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS Linux 7     Red Hat Enterprise Linux 7    A supported Windows operating system, such as Microsoft Windows Server 2012 R2 Base, Microsoft Windows Server 2012 R2 with SQL Server Express,
    ///   - rootDeviceType: The instance root device type. For more information, see Storage for the Root Device.
    ///   - sshKeyName: The instance's Amazon EC2 key-pair name.
    ///   - stackId: The stack ID.
    ///   - subnetId: The ID of the instance's subnet. If the stack is running in a VPC, you can use this parameter to override the stack's  default subnet ID value and direct OpsWorks Stacks to launch the instance in a different subnet.
    ///   - tenancy: The instance's tenancy option. The default option is no tenancy, or if the instance is running in a VPC,  inherit tenancy settings from the VPC. The following are valid values for this parameter:   dedicated, default, or host. Because there are costs associated with changes  in tenancy options, we recommend that you research tenancy options before choosing them for your instances.  For more information about dedicated hosts, see  Dedicated Hosts Overview and  Amazon EC2 Dedicated Hosts.  For more information about dedicated instances, see  Dedicated Instances and  Amazon EC2 Dedicated Instances.
    ///   - virtualizationType: The instance's virtualization type, paravirtual or hvm.
    ///   - logger: Logger use during operation
    @inlinable
    public func createInstance(
        agentVersion: String? = nil,
        amiId: String? = nil,
        architecture: Architecture? = nil,
        autoScalingType: AutoScalingType? = nil,
        availabilityZone: String? = nil,
        blockDeviceMappings: [BlockDeviceMapping]? = nil,
        ebsOptimized: Bool? = nil,
        hostname: String? = nil,
        installUpdatesOnBoot: Bool? = nil,
        instanceType: String,
        layerIds: [String],
        os: String? = nil,
        rootDeviceType: RootDeviceType? = nil,
        sshKeyName: String? = nil,
        stackId: String,
        subnetId: String? = nil,
        tenancy: String? = nil,
        virtualizationType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateInstanceResult {
        let input = CreateInstanceRequest(
            agentVersion: agentVersion, 
            amiId: amiId, 
            architecture: architecture, 
            autoScalingType: autoScalingType, 
            availabilityZone: availabilityZone, 
            blockDeviceMappings: blockDeviceMappings, 
            ebsOptimized: ebsOptimized, 
            hostname: hostname, 
            installUpdatesOnBoot: installUpdatesOnBoot, 
            instanceType: instanceType, 
            layerIds: layerIds, 
            os: os, 
            rootDeviceType: rootDeviceType, 
            sshKeyName: sshKeyName, 
            stackId: stackId, 
            subnetId: subnetId, 
            tenancy: tenancy, 
            virtualizationType: virtualizationType
        )
        return try await self.createInstance(input, logger: logger)
    }

    /// Creates a layer. For more information, see How to Create a Layer.  You should use CreateLayer for noncustom layer types such as  PHP App Server only if the stack does not have an existing layer of that type. A stack can have at most one instance of each noncustom layer; if you attempt to create a second instance, CreateLayer fails. A stack can have an arbitrary number of custom layers, so you can call CreateLayer as many times as you like for that layer type.   Required Permissions: To use this action, an IAM user must  have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func createLayer(_ input: CreateLayerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLayerResult {
        try await self.client.execute(
            operation: "CreateLayer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a layer. For more information, see How to Create a Layer.  You should use CreateLayer for noncustom layer types such as  PHP App Server only if the stack does not have an existing layer of that type. A stack can have at most one instance of each noncustom layer; if you attempt to create a second instance, CreateLayer fails. A stack can have an arbitrary number of custom layers, so you can call CreateLayer as many times as you like for that layer type.   Required Permissions: To use this action, an IAM user must  have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - attributes: One or more user-defined key-value pairs to be added to the stack attributes. To create a cluster layer, set the EcsClusterArn attribute to the cluster's ARN.
    ///   - autoAssignElasticIps: Whether to automatically assign an Elastic IP address to the layer's instances. For more information, see How to Edit a Layer.
    ///   - autoAssignPublicIps: For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see How to Edit a Layer.
    ///   - cloudWatchLogsConfiguration: Specifies CloudWatch Logs configuration options for the layer. For more information,  see CloudWatchLogsLogStream.
    ///   - customInstanceProfileArn: The ARN of an IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
    ///   - customJson: A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see  Using Custom JSON. This feature is supported as of version 1.7.42 of the CLI.
    ///   - customRecipes: A LayerCustomRecipes object that specifies the layer custom recipes.
    ///   - customSecurityGroupIds: An array containing the layer custom security group IDs.
    ///   - enableAutoHealing: Whether to disable auto healing for the layer.
    ///   - installUpdatesOnBoot: Whether to install operating system and package updates when the instance boots. The default value is true. To control when updates are installed, set this value to false. You must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or by manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   To ensure that your instances have the latest security updates, we strongly recommend using the default value of true.
    ///   - lifecycleEventConfiguration: A LifeCycleEventConfiguration object that you can use to configure the Shutdown event to specify an execution timeout and enable or disable Elastic Load Balancer connection draining.
    ///   - name: The layer name, which is used by the console. Layer names can be a maximum of 32 characters.
    ///   - packages: An array of Package objects that describes the layer packages.
    ///   - shortname: For custom layers only, use this parameter to specify the layer's short name, which is used internally by  OpsWorks Stacks and by Chef recipes. The short name is also used as the name for the directory where your  app files are installed. It can have a maximum of 32 characters, which are limited to the alphanumeric  characters, '-', '_', and '.'. Built-in layer short names are defined by OpsWorks Stacks. For more information, see the  Layer Reference.
    ///   - stackId: The layer stack ID.
    ///   - type: The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers.  Built-in layers are not available in Chef 12 stacks.
    ///   - useEbsOptimizedInstances: Whether to use Amazon EBS-optimized instances.
    ///   - volumeConfigurations: A VolumeConfigurations object that describes the layer's Amazon EBS volumes.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLayer(
        attributes: [LayerAttributesKeys: String]? = nil,
        autoAssignElasticIps: Bool? = nil,
        autoAssignPublicIps: Bool? = nil,
        cloudWatchLogsConfiguration: CloudWatchLogsConfiguration? = nil,
        customInstanceProfileArn: String? = nil,
        customJson: String? = nil,
        customRecipes: Recipes? = nil,
        customSecurityGroupIds: [String]? = nil,
        enableAutoHealing: Bool? = nil,
        installUpdatesOnBoot: Bool? = nil,
        lifecycleEventConfiguration: LifecycleEventConfiguration? = nil,
        name: String,
        packages: [String]? = nil,
        shortname: String,
        stackId: String,
        type: LayerType,
        useEbsOptimizedInstances: Bool? = nil,
        volumeConfigurations: [VolumeConfiguration]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLayerResult {
        let input = CreateLayerRequest(
            attributes: attributes, 
            autoAssignElasticIps: autoAssignElasticIps, 
            autoAssignPublicIps: autoAssignPublicIps, 
            cloudWatchLogsConfiguration: cloudWatchLogsConfiguration, 
            customInstanceProfileArn: customInstanceProfileArn, 
            customJson: customJson, 
            customRecipes: customRecipes, 
            customSecurityGroupIds: customSecurityGroupIds, 
            enableAutoHealing: enableAutoHealing, 
            installUpdatesOnBoot: installUpdatesOnBoot, 
            lifecycleEventConfiguration: lifecycleEventConfiguration, 
            name: name, 
            packages: packages, 
            shortname: shortname, 
            stackId: stackId, 
            type: type, 
            useEbsOptimizedInstances: useEbsOptimizedInstances, 
            volumeConfigurations: volumeConfigurations
        )
        return try await self.createLayer(input, logger: logger)
    }

    /// Creates a new stack. For more information, see Create a New Stack.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func createStack(_ input: CreateStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStackResult {
        try await self.client.execute(
            operation: "CreateStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new stack. For more information, see Create a New Stack.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - agentVersion: The default OpsWorks Stacks agent version. You have the following options:   Auto-update - Set this parameter to LATEST. OpsWorks Stacks automatically installs new agent versions on the stack's instances as soon as they are available.   Fixed version - Set this parameter to your preferred agent version. To update the agent version,  you must edit the stack configuration and specify a new version. OpsWorks Stacks installs  that version on the stack's instances.   The default setting is the most recent release of the agent. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions. AgentVersion cannot be set to Chef 12.2.  You can also specify an agent version when you create or update an instance,  which overrides the stack's default setting.
    ///   - attributes: One or more user-defined key-value pairs to be added to the stack attributes.
    ///   - chefConfiguration: A ChefConfiguration object that specifies whether to enable Berkshelf and the Berkshelf version on Chef 11.10 stacks. For more information, see Create a New Stack.
    ///   - configurationManager: The configuration manager. When you create a stack we recommend that you use the configuration manager to specify the  Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows stacks. The default value for Linux stacks is  currently 12.
    ///   - customCookbooksSource: Contains the information required to retrieve an app or cookbook from a repository. For more information,  see Adding Apps or  Cookbooks and Recipes.
    ///   - customJson: A string that contains user-defined, custom JSON. It can be used to override the corresponding default stack configuration  attribute values or to pass data to recipes. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information about custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes.
    ///   - defaultAvailabilityZone: The stack's default Availability Zone, which must be in the specified region. For more information, see Regions and Endpoints. If you also specify a value for DefaultSubnetId, the subnet must be in the same zone. For more information, see the VpcId parameter description.
    ///   - defaultInstanceProfileArn: The Amazon Resource Name (ARN) of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
    ///   - defaultOs: The stack's default operating system, which is installed on every instance unless you specify a different operating  system when you create the instance. You can specify one of the following.   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2, Amazon Linux 2018.03, Amazon Linux 2017.09, Amazon Linux 2017.03, Amazon Linux 2016.09,  Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 18.04 LTS, Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS Linux 7     Red Hat Enterprise Linux 7    A supported Windows operating system, such as Microsoft Windows Server 2012 R2 Base,  Microsoft Windows Server 2012 R2 with SQL Server Express,  Microsoft Windows Server 2012 R2 with SQL Server Standard, or  Microsoft Windows Server 2012 R2 with SQL Server Web.   A custom AMI: Custom. You specify the custom AMI you want to use when you create instances. For more information, see  Using Custom AMIs.   The default option is the current Amazon Linux version. Not all operating systems are supported with all versions of Chef. For more information about supported operating systems, see OpsWorks Stacks Operating Systems.
    ///   - defaultRootDeviceType: The default root device type. This value is the default for all instances in the stack, but you can override it when you create an instance. The default option is instance-store. For more information, see Storage for the Root Device.
    ///   - defaultSshKeyName: A default Amazon EC2 key pair name. The default value is none. If you specify a key pair name,  OpsWorks installs the public key on the instance and you can use the private key with an SSH client to log in to the instance. For more information, see  Using SSH to Communicate with an Instance and  Managing SSH Access. You can override this setting by specifying a different key pair, or no key pair, when you  create an instance.
    ///   - defaultSubnetId: The stack's default VPC subnet ID. This parameter is required if you specify a value for the VpcId parameter. All instances are launched into this subnet unless you specify otherwise when you create the instance. If you also specify a value for DefaultAvailabilityZone, the subnet must be in that zone. For information on default values and when this parameter is required, see the VpcId parameter description.
    ///   - hostnameTheme: The stack's host name theme, with spaces replaced by underscores. The theme is used to generate host names for the stack's instances. By default, HostnameTheme is set to Layer_Dependent, which creates host names by appending integers to the layer's short name. The other themes are:    Baked_Goods     Clouds     Europe_Cities     Fruits     Greek_Deities_and_Titans     Legendary_creatures_from_Japan     Planets_and_Moons     Roman_Deities     Scottish_Islands     US_Cities     Wild_Cats    To obtain a generated host name, call GetHostNameSuggestion, which returns a host name based on the current theme.
    ///   - name: The stack name. Stack names can be a maximum of 64 characters.
    ///   - region: The stack's Amazon Web Services Region, such as ap-south-1. For more information about Amazon Web Services Regions, see Regions and Endpoints.  In the CLI, this API maps to the --stack-region parameter. If the --stack-region parameter and the CLI common parameter --region are set to the same value, the stack uses a regional endpoint. If the --stack-region parameter is not set, but the CLI --region parameter is, this also results in a stack with a regional endpoint. However, if the --region parameter is set to us-east-1, and the --stack-region parameter is set to one of the following, then the stack uses a legacy or classic region: us-west-1, us-west-2, sa-east-1, eu-central-1, eu-west-1, ap-northeast-1, ap-southeast-1, ap-southeast-2. In this case, the actual API endpoint of the stack is in us-east-1. Only the preceding regions are supported as classic regions in the us-east-1 API endpoint. Because it is a best practice to choose the regional endpoint that is closest to where you manage Amazon Web Services, we recommend that you use regional endpoints for new stacks. The CLI common --region parameter always specifies a regional API endpoint; it cannot be used to specify a classic OpsWorks Stacks region.
    ///   - serviceRoleArn: The stack's IAM role, which allows OpsWorks Stacks to work with Amazon Web Services resources on your behalf. You must set this parameter to the Amazon Resource Name (ARN) for an existing IAM role. For more information about IAM ARNs, see  Using Identifiers.
    ///   - useCustomCookbooks: Whether the stack uses custom cookbooks.
    ///   - useOpsworksSecurityGroups: Whether to associate the OpsWorks Stacks built-in security groups with the stack's layers. OpsWorks Stacks provides a standard set of built-in security groups, one for each layer, which are associated with layers by default. With UseOpsworksSecurityGroups you can instead provide your own custom security groups. UseOpsworksSecurityGroups has the following settings:    True - OpsWorks Stacks automatically associates the appropriate built-in security group with each  layer (default setting). You can associate additional security groups with a layer after you create it, but you cannot  delete the built-in security group.   False - OpsWorks Stacks does not associate built-in security groups with layers. You must create  appropriate EC2 security groups and associate a security group with each layer that you create. However, you can still  manually associate a built-in security group with a layer on creation; custom security groups are required only for those  layers that need custom settings.   For more information, see Create a New Stack.
    ///   - vpcId: The ID of the VPC that the stack is to be launched into. The VPC must be in the stack's region. All instances are launched  into this VPC. You cannot change the ID later.   If your account supports EC2-Classic, the default value is no VPC.   If your account does not support EC2-Classic, the default value is the default VPC for the specified region.   If the VPC ID corresponds to a default VPC and you have specified either the DefaultAvailabilityZone or the DefaultSubnetId parameter only, OpsWorks Stacks infers the value of the  other parameter. If you specify neither parameter, OpsWorks Stacks sets these parameters to the first valid Availability Zone for the specified region and the corresponding default VPC subnet ID, respectively. If you specify a nondefault VPC ID, note the following:   It must belong to a VPC in your account that is in the specified region.   You must specify a value for DefaultSubnetId.   For more information about how to use OpsWorks Stacks with a VPC, see Running a Stack in a VPC. For more information about default VPC and EC2-Classic, see Supported Platforms.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStack(
        agentVersion: String? = nil,
        attributes: [StackAttributesKeys: String]? = nil,
        chefConfiguration: ChefConfiguration? = nil,
        configurationManager: StackConfigurationManager? = nil,
        customCookbooksSource: Source? = nil,
        customJson: String? = nil,
        defaultAvailabilityZone: String? = nil,
        defaultInstanceProfileArn: String,
        defaultOs: String? = nil,
        defaultRootDeviceType: RootDeviceType? = nil,
        defaultSshKeyName: String? = nil,
        defaultSubnetId: String? = nil,
        hostnameTheme: String? = nil,
        name: String,
        region: String,
        serviceRoleArn: String,
        useCustomCookbooks: Bool? = nil,
        useOpsworksSecurityGroups: Bool? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStackResult {
        let input = CreateStackRequest(
            agentVersion: agentVersion, 
            attributes: attributes, 
            chefConfiguration: chefConfiguration, 
            configurationManager: configurationManager, 
            customCookbooksSource: customCookbooksSource, 
            customJson: customJson, 
            defaultAvailabilityZone: defaultAvailabilityZone, 
            defaultInstanceProfileArn: defaultInstanceProfileArn, 
            defaultOs: defaultOs, 
            defaultRootDeviceType: defaultRootDeviceType, 
            defaultSshKeyName: defaultSshKeyName, 
            defaultSubnetId: defaultSubnetId, 
            hostnameTheme: hostnameTheme, 
            name: name, 
            region: region, 
            serviceRoleArn: serviceRoleArn, 
            useCustomCookbooks: useCustomCookbooks, 
            useOpsworksSecurityGroups: useOpsworksSecurityGroups, 
            vpcId: vpcId
        )
        return try await self.createStack(input, logger: logger)
    }

    /// Creates a new user profile.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func createUserProfile(_ input: CreateUserProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateUserProfileResult {
        try await self.client.execute(
            operation: "CreateUserProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new user profile.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - allowSelfManagement: Whether users can specify their own SSH public key through the My Settings page. For more information, see Setting an IAM User's Public SSH Key.
    ///   - iamUserArn: The user's IAM ARN; this can also be a federated user's ARN.
    ///   - sshPublicKey: The user's public SSH key.
    ///   - sshUsername: The user's SSH user name. The allowable characters are [a-z], [A-Z], [0-9], '-', and '_'. If the specified name includes other punctuation marks, OpsWorks Stacks removes them. For example, my.name is changed to myname. If you do not specify an SSH user name, OpsWorks Stacks generates one from the IAM user name.
    ///   - logger: Logger use during operation
    @inlinable
    public func createUserProfile(
        allowSelfManagement: Bool? = nil,
        iamUserArn: String,
        sshPublicKey: String? = nil,
        sshUsername: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateUserProfileResult {
        let input = CreateUserProfileRequest(
            allowSelfManagement: allowSelfManagement, 
            iamUserArn: iamUserArn, 
            sshPublicKey: sshPublicKey, 
            sshUsername: sshUsername
        )
        return try await self.createUserProfile(input, logger: logger)
    }

    /// Deletes a specified app.  Required Permissions: To use this action, an IAM user must have a  Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func deleteApp(_ input: DeleteAppRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteApp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a specified app.  Required Permissions: To use this action, an IAM user must have a  Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - appId: The app ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteApp(
        appId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAppRequest(
            appId: appId
        )
        return try await self.deleteApp(input, logger: logger)
    }

    /// Deletes a specified instance, which terminates the associated Amazon EC2 instance. You must stop an instance before  you can delete it. For more information, see Deleting Instances.  Required Permissions: To use this action, an IAM user must have a Manage  permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func deleteInstance(_ input: DeleteInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a specified instance, which terminates the associated Amazon EC2 instance. You must stop an instance before  you can delete it. For more information, see Deleting Instances.  Required Permissions: To use this action, an IAM user must have a Manage  permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - deleteElasticIp: Whether to delete the instance Elastic IP address.
    ///   - deleteVolumes: Whether to delete the instance's Amazon EBS volumes.
    ///   - instanceId: The instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteInstance(
        deleteElasticIp: Bool? = nil,
        deleteVolumes: Bool? = nil,
        instanceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteInstanceRequest(
            deleteElasticIp: deleteElasticIp, 
            deleteVolumes: deleteVolumes, 
            instanceId: instanceId
        )
        return try await self.deleteInstance(input, logger: logger)
    }

    /// Deletes a specified layer. You must first stop and then delete all associated instances or unassign registered instances. For more information, see How to Delete a Layer.  Required Permissions: To use this action, an IAM user must have a  Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func deleteLayer(_ input: DeleteLayerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteLayer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a specified layer. You must first stop and then delete all associated instances or unassign registered instances. For more information, see How to Delete a Layer.  Required Permissions: To use this action, an IAM user must have a  Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - layerId: The layer ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLayer(
        layerId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteLayerRequest(
            layerId: layerId
        )
        return try await self.deleteLayer(input, logger: logger)
    }

    /// Deletes a specified stack. You must first delete all instances, layers, and apps or deregister registered instances. For more information, see Shut Down a Stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func deleteStack(_ input: DeleteStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a specified stack. You must first delete all instances, layers, and apps or deregister registered instances. For more information, see Shut Down a Stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteStack(
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteStackRequest(
            stackId: stackId
        )
        return try await self.deleteStack(input, logger: logger)
    }

    /// Deletes a user profile.  Required Permissions: To use this action, an IAM user must have an attached  policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func deleteUserProfile(_ input: DeleteUserProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteUserProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a user profile.  Required Permissions: To use this action, an IAM user must have an attached  policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - iamUserArn: The user's IAM ARN. This can also be a federated user's ARN.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteUserProfile(
        iamUserArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteUserProfileRequest(
            iamUserArn: iamUserArn
        )
        return try await self.deleteUserProfile(input, logger: logger)
    }

    /// Deregisters a specified Amazon ECS cluster from a stack. For more information, see  Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html.
    @Sendable
    @inlinable
    public func deregisterEcsCluster(_ input: DeregisterEcsClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeregisterEcsCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters a specified Amazon ECS cluster from a stack. For more information, see  Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see https://docs.aws.amazon.com/opsworks/latest/userguide/opsworks-security-users.html.
    ///
    /// Parameters:
    ///   - ecsClusterArn: The cluster's Amazon Resource Number (ARN).
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterEcsCluster(
        ecsClusterArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeregisterEcsClusterRequest(
            ecsClusterArn: ecsClusterArn
        )
        return try await self.deregisterEcsCluster(input, logger: logger)
    }

    /// Deregisters a specified Elastic IP address. The address can be registered by another stack after it is deregistered. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func deregisterElasticIp(_ input: DeregisterElasticIpRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeregisterElasticIp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters a specified Elastic IP address. The address can be registered by another stack after it is deregistered. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - elasticIp: The Elastic IP address.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterElasticIp(
        elasticIp: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeregisterElasticIpRequest(
            elasticIp: elasticIp
        )
        return try await self.deregisterElasticIp(input, logger: logger)
    }

    /// Deregister an instance from OpsWorks Stacks. The instance can be a registered instance (Amazon EC2 or on-premises) or an instance created with OpsWorks.  This action removes the instance from the stack and returns it to your control.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func deregisterInstance(_ input: DeregisterInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeregisterInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregister an instance from OpsWorks Stacks. The instance can be a registered instance (Amazon EC2 or on-premises) or an instance created with OpsWorks.  This action removes the instance from the stack and returns it to your control.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterInstance(
        instanceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeregisterInstanceRequest(
            instanceId: instanceId
        )
        return try await self.deregisterInstance(input, logger: logger)
    }

    /// Deregisters an Amazon RDS instance.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func deregisterRdsDbInstance(_ input: DeregisterRdsDbInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeregisterRdsDbInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters an Amazon RDS instance.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - rdsDbInstanceArn: The Amazon RDS instance's ARN.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterRdsDbInstance(
        rdsDbInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeregisterRdsDbInstanceRequest(
            rdsDbInstanceArn: rdsDbInstanceArn
        )
        return try await self.deregisterRdsDbInstance(input, logger: logger)
    }

    /// Deregisters an Amazon EBS volume. The volume can then be registered by another stack. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func deregisterVolume(_ input: DeregisterVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeregisterVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters an Amazon EBS volume. The volume can then be registered by another stack. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - volumeId: The OpsWorks Stacks volume ID, which is the GUID that OpsWorks Stacks assigned to the instance  when you registered the volume with the stack, not the Amazon EC2 volume ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterVolume(
        volumeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeregisterVolumeRequest(
            volumeId: volumeId
        )
        return try await self.deregisterVolume(input, logger: logger)
    }

    /// Describes the available OpsWorks Stacks agent versions. You must specify a stack ID or a configuration manager. DescribeAgentVersions returns a list of available agent versions for the specified stack or configuration manager.
    @Sendable
    @inlinable
    public func describeAgentVersions(_ input: DescribeAgentVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAgentVersionsResult {
        try await self.client.execute(
            operation: "DescribeAgentVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the available OpsWorks Stacks agent versions. You must specify a stack ID or a configuration manager. DescribeAgentVersions returns a list of available agent versions for the specified stack or configuration manager.
    ///
    /// Parameters:
    ///   - configurationManager: The configuration manager.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAgentVersions(
        configurationManager: StackConfigurationManager? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAgentVersionsResult {
        let input = DescribeAgentVersionsRequest(
            configurationManager: configurationManager, 
            stackId: stackId
        )
        return try await self.describeAgentVersions(input, logger: logger)
    }

    /// Requests a description of a specified set of apps.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy,  or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeApps(_ input: DescribeAppsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAppsResult {
        try await self.client.execute(
            operation: "DescribeApps", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a description of a specified set of apps.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy,  or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - appIds: An array of app IDs for the apps to be described. If you use this parameter, DescribeApps returns a description of the specified apps. Otherwise, it returns a description of every app.
    ///   - stackId: The app stack ID. If you use this parameter, DescribeApps returns a description of the apps in the specified stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeApps(
        appIds: [String]? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAppsResult {
        let input = DescribeAppsRequest(
            appIds: appIds, 
            stackId: stackId
        )
        return try await self.describeApps(input, logger: logger)
    }

    /// Describes the results of specified commands.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeCommands(_ input: DescribeCommandsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCommandsResult {
        try await self.client.execute(
            operation: "DescribeCommands", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the results of specified commands.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - commandIds: An array of command IDs. If you include this parameter, DescribeCommands returns a description of the specified commands. Otherwise, it returns a description of every command.
    ///   - deploymentId: The deployment ID. If you include this parameter, DescribeCommands returns a description of the commands associated with the specified deployment.
    ///   - instanceId: The instance ID. If you include this parameter, DescribeCommands returns a description of the commands associated with the specified instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCommands(
        commandIds: [String]? = nil,
        deploymentId: String? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCommandsResult {
        let input = DescribeCommandsRequest(
            commandIds: commandIds, 
            deploymentId: deploymentId, 
            instanceId: instanceId
        )
        return try await self.describeCommands(input, logger: logger)
    }

    /// Requests a description of a specified set of deployments.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeDeployments(_ input: DescribeDeploymentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeploymentsResult {
        try await self.client.execute(
            operation: "DescribeDeployments", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a description of a specified set of deployments.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - appId: The app ID. If you include this parameter, the command returns a description of the commands associated with the specified app.
    ///   - deploymentIds: An array of deployment IDs to be described. If you include this parameter, the command returns a description of the specified deployments. Otherwise, it returns a description of every deployment.
    ///   - stackId: The stack ID. If you include this parameter, the command returns a description of the commands associated with the specified stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDeployments(
        appId: String? = nil,
        deploymentIds: [String]? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDeploymentsResult {
        let input = DescribeDeploymentsRequest(
            appId: appId, 
            deploymentIds: deploymentIds, 
            stackId: stackId
        )
        return try await self.describeDeployments(input, logger: logger)
    }

    /// Describes Amazon ECS clusters that are registered with a stack. If you specify only a stack ID, you can use the MaxResults and NextToken parameters to paginate the response. However, OpsWorks Stacks currently supports only one cluster per layer, so the result set has a maximum of one element.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack or an attached policy that explicitly grants permission. For more information about user permissions, see Managing User Permissions. This call accepts only one resource-identifying parameter.
    @Sendable
    @inlinable
    public func describeEcsClusters(_ input: DescribeEcsClustersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEcsClustersResult {
        try await self.client.execute(
            operation: "DescribeEcsClusters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes Amazon ECS clusters that are registered with a stack. If you specify only a stack ID, you can use the MaxResults and NextToken parameters to paginate the response. However, OpsWorks Stacks currently supports only one cluster per layer, so the result set has a maximum of one element.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack or an attached policy that explicitly grants permission. For more information about user permissions, see Managing User Permissions. This call accepts only one resource-identifying parameter.
    ///
    /// Parameters:
    ///   - ecsClusterArns: A list of ARNs, one for each cluster to be described.
    ///   - maxResults: To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    ///   - nextToken: If the previous paginated request did not return all of the remaining results, the response object'sNextToken parameter value is set to a token. To retrieve the next set of results, call DescribeEcsClusters again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
    ///   - stackId: A stack ID. DescribeEcsClusters returns a description of the cluster that is registered with the stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEcsClusters(
        ecsClusterArns: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeEcsClustersResult {
        let input = DescribeEcsClustersRequest(
            ecsClusterArns: ecsClusterArns, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            stackId: stackId
        )
        return try await self.describeEcsClusters(input, logger: logger)
    }

    /// Describes Elastic IP addresses.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeElasticIps(_ input: DescribeElasticIpsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeElasticIpsResult {
        try await self.client.execute(
            operation: "DescribeElasticIps", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes Elastic IP addresses.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID. If you include this parameter, DescribeElasticIps returns a description of the Elastic IP addresses associated with the specified instance.
    ///   - ips: An array of Elastic IP addresses to be described. If you include this parameter, DescribeElasticIps returns a description of the specified Elastic IP addresses. Otherwise, it returns a description of every Elastic IP address.
    ///   - stackId: A stack ID. If you include this parameter, DescribeElasticIps returns a description of the Elastic IP addresses that are registered with the specified stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeElasticIps(
        instanceId: String? = nil,
        ips: [String]? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeElasticIpsResult {
        let input = DescribeElasticIpsRequest(
            instanceId: instanceId, 
            ips: ips, 
            stackId: stackId
        )
        return try await self.describeElasticIps(input, logger: logger)
    }

    /// Describes a stack's Elastic Load Balancing instances.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeElasticLoadBalancers(_ input: DescribeElasticLoadBalancersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeElasticLoadBalancersResult {
        try await self.client.execute(
            operation: "DescribeElasticLoadBalancers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes a stack's Elastic Load Balancing instances.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - layerIds: A list of layer IDs. The action describes the Elastic Load Balancing instances for the specified layers.
    ///   - stackId: A stack ID. The action describes the stack's Elastic Load Balancing instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeElasticLoadBalancers(
        layerIds: [String]? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeElasticLoadBalancersResult {
        let input = DescribeElasticLoadBalancersRequest(
            layerIds: layerIds, 
            stackId: stackId
        )
        return try await self.describeElasticLoadBalancers(input, logger: logger)
    }

    /// Requests a description of a set of instances.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeInstances(_ input: DescribeInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstancesResult {
        try await self.client.execute(
            operation: "DescribeInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a description of a set of instances.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceIds: An array of instance IDs to be described. If you use this parameter, DescribeInstances returns a description of the specified instances. Otherwise, it returns a description of every instance.
    ///   - layerId: A layer ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified layer.
    ///   - stackId: A stack ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstances(
        instanceIds: [String]? = nil,
        layerId: String? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstancesResult {
        let input = DescribeInstancesRequest(
            instanceIds: instanceIds, 
            layerId: layerId, 
            stackId: stackId
        )
        return try await self.describeInstances(input, logger: logger)
    }

    /// Requests a description of one or more layers in a specified stack.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeLayers(_ input: DescribeLayersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLayersResult {
        try await self.client.execute(
            operation: "DescribeLayers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a description of one or more layers in a specified stack.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - layerIds: An array of layer IDs that specify the layers to be described. If you omit this parameter, DescribeLayers returns a description of every layer in the specified stack.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLayers(
        layerIds: [String]? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLayersResult {
        let input = DescribeLayersRequest(
            layerIds: layerIds, 
            stackId: stackId
        )
        return try await self.describeLayers(input, logger: logger)
    }

    /// Describes load-based auto scaling configurations for specified layers.  You must specify at least one of the parameters.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeLoadBasedAutoScaling(_ input: DescribeLoadBasedAutoScalingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLoadBasedAutoScalingResult {
        try await self.client.execute(
            operation: "DescribeLoadBasedAutoScaling", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes load-based auto scaling configurations for specified layers.  You must specify at least one of the parameters.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - layerIds: An array of layer IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLoadBasedAutoScaling(
        layerIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLoadBasedAutoScalingResult {
        let input = DescribeLoadBasedAutoScalingRequest(
            layerIds: layerIds
        )
        return try await self.describeLoadBasedAutoScaling(input, logger: logger)
    }

    /// Describes a user's SSH information.  Required Permissions: To use this action, an IAM user must have self-management enabled or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeMyUserProfile(logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeMyUserProfileResult {
        try await self.client.execute(
            operation: "DescribeMyUserProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Describes the operating systems that are supported by OpsWorks Stacks.
    @Sendable
    @inlinable
    public func describeOperatingSystems(logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeOperatingSystemsResponse {
        try await self.client.execute(
            operation: "DescribeOperatingSystems", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Describes the permissions for a specified stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describePermissions(_ input: DescribePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePermissionsResult {
        try await self.client.execute(
            operation: "DescribePermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the permissions for a specified stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - iamUserArn: The user's IAM ARN. This can also be a federated user's ARN. For more information about IAM  ARNs, see Using Identifiers.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func describePermissions(
        iamUserArn: String? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribePermissionsResult {
        let input = DescribePermissionsRequest(
            iamUserArn: iamUserArn, 
            stackId: stackId
        )
        return try await self.describePermissions(input, logger: logger)
    }

    /// Describe an instance's RAID arrays.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeRaidArrays(_ input: DescribeRaidArraysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRaidArraysResult {
        try await self.client.execute(
            operation: "DescribeRaidArrays", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describe an instance's RAID arrays.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID. If you use this parameter, DescribeRaidArrays returns descriptions of the RAID arrays associated with the specified instance.
    ///   - raidArrayIds: An array of RAID array IDs. If you use this parameter, DescribeRaidArrays returns descriptions of the specified arrays. Otherwise, it returns a description of every array.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRaidArrays(
        instanceId: String? = nil,
        raidArrayIds: [String]? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRaidArraysResult {
        let input = DescribeRaidArraysRequest(
            instanceId: instanceId, 
            raidArrayIds: raidArrayIds, 
            stackId: stackId
        )
        return try await self.describeRaidArrays(input, logger: logger)
    }

    /// Describes Amazon RDS instances.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions. This call accepts only one resource-identifying parameter.
    @Sendable
    @inlinable
    public func describeRdsDbInstances(_ input: DescribeRdsDbInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRdsDbInstancesResult {
        try await self.client.execute(
            operation: "DescribeRdsDbInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes Amazon RDS instances.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions. This call accepts only one resource-identifying parameter.
    ///
    /// Parameters:
    ///   - rdsDbInstanceArns: An array containing the ARNs of the instances to be described.
    ///   - stackId: The ID of the stack with which the instances are registered. The operation returns descriptions of all registered  Amazon RDS instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRdsDbInstances(
        rdsDbInstanceArns: [String]? = nil,
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRdsDbInstancesResult {
        let input = DescribeRdsDbInstancesRequest(
            rdsDbInstanceArns: rdsDbInstanceArns, 
            stackId: stackId
        )
        return try await self.describeRdsDbInstances(input, logger: logger)
    }

    /// Describes OpsWorks Stacks service errors.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions. This call accepts only one resource-identifying parameter.
    @Sendable
    @inlinable
    public func describeServiceErrors(_ input: DescribeServiceErrorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeServiceErrorsResult {
        try await self.client.execute(
            operation: "DescribeServiceErrors", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes OpsWorks Stacks service errors.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions. This call accepts only one resource-identifying parameter.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID. If you use this parameter, DescribeServiceErrors returns descriptions of the errors associated with the specified instance.
    ///   - serviceErrorIds: An array of service error IDs. If you use this parameter, DescribeServiceErrors returns descriptions of the specified errors. Otherwise, it returns a description of every error.
    ///   - stackId: The stack ID. If you use this parameter, DescribeServiceErrors returns descriptions of the errors associated with the specified stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeServiceErrors(
        instanceId: String? = nil,
        serviceErrorIds: [String]? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeServiceErrorsResult {
        let input = DescribeServiceErrorsRequest(
            instanceId: instanceId, 
            serviceErrorIds: serviceErrorIds, 
            stackId: stackId
        )
        return try await self.describeServiceErrors(input, logger: logger)
    }

    /// Requests a description of a stack's provisioning parameters.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeStackProvisioningParameters(_ input: DescribeStackProvisioningParametersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackProvisioningParametersResult {
        try await self.client.execute(
            operation: "DescribeStackProvisioningParameters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a description of a stack's provisioning parameters.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeStackProvisioningParameters(
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeStackProvisioningParametersResult {
        let input = DescribeStackProvisioningParametersRequest(
            stackId: stackId
        )
        return try await self.describeStackProvisioningParameters(input, logger: logger)
    }

    /// Describes the number of layers and apps in a specified stack, and the number of instances in each state, such as running_setup or online.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeStackSummary(_ input: DescribeStackSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStackSummaryResult {
        try await self.client.execute(
            operation: "DescribeStackSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the number of layers and apps in a specified stack, and the number of instances in each state, such as running_setup or online.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeStackSummary(
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeStackSummaryResult {
        let input = DescribeStackSummaryRequest(
            stackId: stackId
        )
        return try await self.describeStackSummary(input, logger: logger)
    }

    /// Requests a description of one or more stacks.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeStacks(_ input: DescribeStacksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStacksResult {
        try await self.client.execute(
            operation: "DescribeStacks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a description of one or more stacks.  Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - stackIds: An array of stack IDs that specify the stacks to be described. If you omit this parameter, and have permissions to get information  about all stacks, DescribeStacks returns a description of every stack. If the IAM policy that is attached to an IAM  user limits the DescribeStacks action to specific stack ARNs, this parameter is required, and the user must specify a stack ARN that is allowed by the policy.  Otherwise, DescribeStacks returns an AccessDenied error.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeStacks(
        stackIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeStacksResult {
        let input = DescribeStacksRequest(
            stackIds: stackIds
        )
        return try await self.describeStacks(input, logger: logger)
    }

    /// Describes time-based auto scaling configurations for specified instances.  You must specify at least one of the parameters.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeTimeBasedAutoScaling(_ input: DescribeTimeBasedAutoScalingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTimeBasedAutoScalingResult {
        try await self.client.execute(
            operation: "DescribeTimeBasedAutoScaling", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes time-based auto scaling configurations for specified instances.  You must specify at least one of the parameters.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceIds: An array of instance IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTimeBasedAutoScaling(
        instanceIds: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTimeBasedAutoScalingResult {
        let input = DescribeTimeBasedAutoScalingRequest(
            instanceIds: instanceIds
        )
        return try await self.describeTimeBasedAutoScaling(input, logger: logger)
    }

    /// Describe specified users.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeUserProfiles(_ input: DescribeUserProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeUserProfilesResult {
        try await self.client.execute(
            operation: "DescribeUserProfiles", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describe specified users.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - iamUserArns: An array of IAM or federated user ARNs that identify the users to be described.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeUserProfiles(
        iamUserArns: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeUserProfilesResult {
        let input = DescribeUserProfilesRequest(
            iamUserArns: iamUserArns
        )
        return try await self.describeUserProfiles(input, logger: logger)
    }

    /// Describes an instance's Amazon EBS volumes.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func describeVolumes(_ input: DescribeVolumesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVolumesResult {
        try await self.client.execute(
            operation: "DescribeVolumes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes an instance's Amazon EBS volumes.  This call accepts only one resource-identifying parameter.   Required Permissions: To use this action, an IAM user must have a Show, Deploy, or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID. If you use this parameter, DescribeVolumes returns descriptions of the volumes associated with the specified instance.
    ///   - raidArrayId: The RAID array ID. If you use this parameter, DescribeVolumes returns descriptions of the volumes associated with the specified RAID array.
    ///   - stackId: A stack ID. The action describes the stack's registered Amazon EBS volumes.
    ///   - volumeIds: Am array of volume IDs. If you use this parameter, DescribeVolumes returns descriptions of the specified volumes. Otherwise, it returns a description of every volume.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVolumes(
        instanceId: String? = nil,
        raidArrayId: String? = nil,
        stackId: String? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVolumesResult {
        let input = DescribeVolumesRequest(
            instanceId: instanceId, 
            raidArrayId: raidArrayId, 
            stackId: stackId, 
            volumeIds: volumeIds
        )
        return try await self.describeVolumes(input, logger: logger)
    }

    /// Detaches a specified Elastic Load Balancing instance from its layer.  Required Permissions: To use this action, an IAM user must have a Manage  permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func detachElasticLoadBalancer(_ input: DetachElasticLoadBalancerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DetachElasticLoadBalancer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Detaches a specified Elastic Load Balancing instance from its layer.  Required Permissions: To use this action, an IAM user must have a Manage  permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - elasticLoadBalancerName: The Elastic Load Balancing instance's name.
    ///   - layerId: The ID of the layer that the Elastic Load Balancing instance is attached to.
    ///   - logger: Logger use during operation
    @inlinable
    public func detachElasticLoadBalancer(
        elasticLoadBalancerName: String,
        layerId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DetachElasticLoadBalancerRequest(
            elasticLoadBalancerName: elasticLoadBalancerName, 
            layerId: layerId
        )
        return try await self.detachElasticLoadBalancer(input, logger: logger)
    }

    /// Disassociates an Elastic IP address from its instance. The address remains registered with the stack. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func disassociateElasticIp(_ input: DisassociateElasticIpRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DisassociateElasticIp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates an Elastic IP address from its instance. The address remains registered with the stack. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - elasticIp: The Elastic IP address.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateElasticIp(
        elasticIp: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DisassociateElasticIpRequest(
            elasticIp: elasticIp
        )
        return try await self.disassociateElasticIp(input, logger: logger)
    }

    /// Gets a generated host name for the specified layer, based on the current host name theme.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func getHostnameSuggestion(_ input: GetHostnameSuggestionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetHostnameSuggestionResult {
        try await self.client.execute(
            operation: "GetHostnameSuggestion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a generated host name for the specified layer, based on the current host name theme.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - layerId: The layer ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func getHostnameSuggestion(
        layerId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetHostnameSuggestionResult {
        let input = GetHostnameSuggestionRequest(
            layerId: layerId
        )
        return try await self.getHostnameSuggestion(input, logger: logger)
    }

    ///  This action can be used only with Windows stacks.  Grants RDP access to a Windows instance for a specified time period.
    @Sendable
    @inlinable
    public func grantAccess(_ input: GrantAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GrantAccessResult {
        try await self.client.execute(
            operation: "GrantAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action can be used only with Windows stacks.  Grants RDP access to a Windows instance for a specified time period.
    ///
    /// Parameters:
    ///   - instanceId: The instance's OpsWorks Stacks ID.
    ///   - validForInMinutes: The length of time (in minutes) that the grant is valid. When the grant expires at the end of this period,  the user will no longer be able to use the credentials to log in. If the user is logged in at the time, they are  logged out.
    ///   - logger: Logger use during operation
    @inlinable
    public func grantAccess(
        instanceId: String,
        validForInMinutes: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GrantAccessResult {
        let input = GrantAccessRequest(
            instanceId: instanceId, 
            validForInMinutes: validForInMinutes
        )
        return try await self.grantAccess(input, logger: logger)
    }

    /// Returns a list of tags that are applied to the specified stack or layer.
    @Sendable
    @inlinable
    public func listTags(_ input: ListTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsResult {
        try await self.client.execute(
            operation: "ListTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of tags that are applied to the specified stack or layer.
    ///
    /// Parameters:
    ///   - maxResults: Do not use. A validation exception occurs if you add a MaxResults parameter to a ListTagsRequest  call.
    ///   - nextToken: Do not use. A validation exception occurs if you add a NextToken parameter to a ListTagsRequest  call.
    ///   - resourceArn: The stack or layer's Amazon Resource Number (ARN).
    ///   - logger: Logger use during operation
    @inlinable
    public func listTags(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsResult {
        let input = ListTagsRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceArn: resourceArn
        )
        return try await self.listTags(input, logger: logger)
    }

    /// Reboots a specified instance. For more information, see Starting, Stopping, and Rebooting Instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func rebootInstance(_ input: RebootInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RebootInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Reboots a specified instance. For more information, see Starting, Stopping, and Rebooting Instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func rebootInstance(
        instanceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RebootInstanceRequest(
            instanceId: instanceId
        )
        return try await self.rebootInstance(input, logger: logger)
    }

    /// Registers a specified Amazon ECS cluster with a stack. You can register only one cluster with a stack. A cluster can be registered with only one stack. For more information, see  Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see  Managing User Permissions.
    @Sendable
    @inlinable
    public func registerEcsCluster(_ input: RegisterEcsClusterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterEcsClusterResult {
        try await self.client.execute(
            operation: "RegisterEcsCluster", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers a specified Amazon ECS cluster with a stack. You can register only one cluster with a stack. A cluster can be registered with only one stack. For more information, see  Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see  Managing User Permissions.
    ///
    /// Parameters:
    ///   - ecsClusterArn: The cluster's ARN.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerEcsCluster(
        ecsClusterArn: String,
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterEcsClusterResult {
        let input = RegisterEcsClusterRequest(
            ecsClusterArn: ecsClusterArn, 
            stackId: stackId
        )
        return try await self.registerEcsCluster(input, logger: logger)
    }

    /// Registers an Elastic IP address with a specified stack. An address can be registered with only one stack at a time. If the address is already registered, you must first deregister it by calling DeregisterElasticIp. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func registerElasticIp(_ input: RegisterElasticIpRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterElasticIpResult {
        try await self.client.execute(
            operation: "RegisterElasticIp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers an Elastic IP address with a specified stack. An address can be registered with only one stack at a time. If the address is already registered, you must first deregister it by calling DeregisterElasticIp. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - elasticIp: The Elastic IP address.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerElasticIp(
        elasticIp: String,
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterElasticIpResult {
        let input = RegisterElasticIpRequest(
            elasticIp: elasticIp, 
            stackId: stackId
        )
        return try await self.registerElasticIp(input, logger: logger)
    }

    /// Registers instances that were created outside of OpsWorks Stacks with a specified stack.  We do not recommend using this action to register instances. The complete registration operation includes two tasks: installing the OpsWorks Stacks agent on the instance, and registering the instance with the stack. RegisterInstance handles only the second step. You should instead use the CLI register command, which performs the entire registration operation. For more information, see  Registering an Instance with an OpsWorks Stacks Stack.  Registered instances have the same requirements as instances that are created by using the CreateInstance  API.  For example, registered instances must be running a supported Linux-based operating system, and they must have a supported instance  type. For more information about requirements for instances that you want to register, see  Preparing the Instance.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func registerInstance(_ input: RegisterInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterInstanceResult {
        try await self.client.execute(
            operation: "RegisterInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers instances that were created outside of OpsWorks Stacks with a specified stack.  We do not recommend using this action to register instances. The complete registration operation includes two tasks: installing the OpsWorks Stacks agent on the instance, and registering the instance with the stack. RegisterInstance handles only the second step. You should instead use the CLI register command, which performs the entire registration operation. For more information, see  Registering an Instance with an OpsWorks Stacks Stack.  Registered instances have the same requirements as instances that are created by using the CreateInstance  API.  For example, registered instances must be running a supported Linux-based operating system, and they must have a supported instance  type. For more information about requirements for instances that you want to register, see  Preparing the Instance.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - hostname: The instance's host name. The following are character limits for instance host names.   Linux-based instances: 63 characters   Windows-based instances: 15 characters
    ///   - instanceIdentity: An InstanceIdentity object that contains the instance's identity.
    ///   - privateIp: The instance's private IP address.
    ///   - publicIp: The instance's public IP address.
    ///   - rsaPublicKey: The instances public RSA key. This key is used to encrypt communication between the instance and the service.
    ///   - rsaPublicKeyFingerprint: The instances public RSA key fingerprint.
    ///   - stackId: The ID of the stack that the instance is to be registered with.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerInstance(
        hostname: String? = nil,
        instanceIdentity: InstanceIdentity? = nil,
        privateIp: String? = nil,
        publicIp: String? = nil,
        rsaPublicKey: String? = nil,
        rsaPublicKeyFingerprint: String? = nil,
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterInstanceResult {
        let input = RegisterInstanceRequest(
            hostname: hostname, 
            instanceIdentity: instanceIdentity, 
            privateIp: privateIp, 
            publicIp: publicIp, 
            rsaPublicKey: rsaPublicKey, 
            rsaPublicKeyFingerprint: rsaPublicKeyFingerprint, 
            stackId: stackId
        )
        return try await self.registerInstance(input, logger: logger)
    }

    /// Registers an Amazon RDS instance with a stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func registerRdsDbInstance(_ input: RegisterRdsDbInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RegisterRdsDbInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers an Amazon RDS instance with a stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - dbPassword: The database password.
    ///   - dbUser: The database's master user name.
    ///   - rdsDbInstanceArn: The Amazon RDS instance's ARN.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerRdsDbInstance(
        dbPassword: String,
        dbUser: String,
        rdsDbInstanceArn: String,
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RegisterRdsDbInstanceRequest(
            dbPassword: dbPassword, 
            dbUser: dbUser, 
            rdsDbInstanceArn: rdsDbInstanceArn, 
            stackId: stackId
        )
        return try await self.registerRdsDbInstance(input, logger: logger)
    }

    /// Registers an Amazon EBS volume with a specified stack. A volume can be registered with only one stack at a time. If the volume is already registered, you must first deregister it by calling DeregisterVolume. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func registerVolume(_ input: RegisterVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterVolumeResult {
        try await self.client.execute(
            operation: "RegisterVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers an Amazon EBS volume with a specified stack. A volume can be registered with only one stack at a time. If the volume is already registered, you must first deregister it by calling DeregisterVolume. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - ec2VolumeId: The Amazon EBS volume ID.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerVolume(
        ec2VolumeId: String? = nil,
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterVolumeResult {
        let input = RegisterVolumeRequest(
            ec2VolumeId: ec2VolumeId, 
            stackId: stackId
        )
        return try await self.registerVolume(input, logger: logger)
    }

    /// Specify the load-based auto scaling configuration for a specified layer. For more information, see Managing Load with Time-based and Load-based Instances.  To use load-based auto scaling, you must create a set of load-based auto scaling instances.  Load-based auto scaling operates only on the instances from that set, so you must ensure that you have created enough  instances to handle the maximum anticipated load.   Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func setLoadBasedAutoScaling(_ input: SetLoadBasedAutoScalingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetLoadBasedAutoScaling", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specify the load-based auto scaling configuration for a specified layer. For more information, see Managing Load with Time-based and Load-based Instances.  To use load-based auto scaling, you must create a set of load-based auto scaling instances.  Load-based auto scaling operates only on the instances from that set, so you must ensure that you have created enough  instances to handle the maximum anticipated load.   Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - downScaling: An AutoScalingThresholds object with the downscaling threshold configuration. If the load falls below these thresholds for a specified amount of time, OpsWorks Stacks stops a specified number of instances.
    ///   - enable: Enables load-based auto scaling for the layer.
    ///   - layerId: The layer ID.
    ///   - upScaling: An AutoScalingThresholds object with the upscaling threshold configuration. If the load exceeds these thresholds for a specified amount of time, OpsWorks Stacks starts a specified number of instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func setLoadBasedAutoScaling(
        downScaling: AutoScalingThresholds? = nil,
        enable: Bool? = nil,
        layerId: String,
        upScaling: AutoScalingThresholds? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetLoadBasedAutoScalingRequest(
            downScaling: downScaling, 
            enable: enable, 
            layerId: layerId, 
            upScaling: upScaling
        )
        return try await self.setLoadBasedAutoScaling(input, logger: logger)
    }

    /// Specifies a user's permissions. For more information, see  Security and Permissions.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func setPermission(_ input: SetPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetPermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specifies a user's permissions. For more information, see  Security and Permissions.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - allowSsh: The user is allowed to use SSH to communicate with the instance.
    ///   - allowSudo: The user is allowed to use sudo to elevate privileges.
    ///   - iamUserArn: The user's IAM ARN. This can also be a federated user's ARN.
    ///   - level: The user's permission level, which must be set to one of the following strings. You cannot set your own permissions level.    deny     show     deploy     manage     iam_only    For more information about the permissions associated with these levels, see Managing User Permissions.
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func setPermission(
        allowSsh: Bool? = nil,
        allowSudo: Bool? = nil,
        iamUserArn: String,
        level: String? = nil,
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetPermissionRequest(
            allowSsh: allowSsh, 
            allowSudo: allowSudo, 
            iamUserArn: iamUserArn, 
            level: level, 
            stackId: stackId
        )
        return try await self.setPermission(input, logger: logger)
    }

    /// Specify the time-based auto scaling configuration for a specified instance. For more information, see Managing Load with Time-based and Load-based Instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func setTimeBasedAutoScaling(_ input: SetTimeBasedAutoScalingRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SetTimeBasedAutoScaling", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Specify the time-based auto scaling configuration for a specified instance. For more information, see Managing Load with Time-based and Load-based Instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - autoScalingSchedule: An AutoScalingSchedule with the instance schedule.
    ///   - instanceId: The instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func setTimeBasedAutoScaling(
        autoScalingSchedule: WeeklyAutoScalingSchedule? = nil,
        instanceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SetTimeBasedAutoScalingRequest(
            autoScalingSchedule: autoScalingSchedule, 
            instanceId: instanceId
        )
        return try await self.setTimeBasedAutoScaling(input, logger: logger)
    }

    /// Starts a specified instance. For more information, see Starting, Stopping, and Rebooting Instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func startInstance(_ input: StartInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "StartInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a specified instance. For more information, see Starting, Stopping, and Rebooting Instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func startInstance(
        instanceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = StartInstanceRequest(
            instanceId: instanceId
        )
        return try await self.startInstance(input, logger: logger)
    }

    /// Starts a stack's instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func startStack(_ input: StartStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "StartStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a stack's instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func startStack(
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = StartStackRequest(
            stackId: stackId
        )
        return try await self.startStack(input, logger: logger)
    }

    /// Stops a specified instance. When you stop a standard instance, the data disappears and must be reinstalled when you restart the instance. You can stop an Amazon EBS-backed instance without losing data. For more information, see Starting, Stopping, and Rebooting Instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func stopInstance(_ input: StopInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "StopInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops a specified instance. When you stop a standard instance, the data disappears and must be reinstalled when you restart the instance. You can stop an Amazon EBS-backed instance without losing data. For more information, see Starting, Stopping, and Rebooting Instances.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - force: Specifies whether to force an instance to stop. If the instance's root device type is ebs, or EBS-backed,  adding the Force parameter to the StopInstances API call disassociates the OpsWorks Stacks  instance from EC2, and forces deletion of only the OpsWorks Stacks instance.  You must also delete the formerly-associated instance in EC2 after troubleshooting and replacing the OpsWorks Stacks  instance with a new one.
    ///   - instanceId: The instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopInstance(
        force: Bool? = nil,
        instanceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = StopInstanceRequest(
            force: force, 
            instanceId: instanceId
        )
        return try await self.stopInstance(input, logger: logger)
    }

    /// Stops a specified stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func stopStack(_ input: StopStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "StopStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops a specified stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - stackId: The stack ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopStack(
        stackId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = StopStackRequest(
            stackId: stackId
        )
        return try await self.stopStack(input, logger: logger)
    }

    /// Apply cost-allocation tags to a specified stack or layer in OpsWorks Stacks. For more information about how  tagging works, see Tags in the OpsWorks User Guide.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Apply cost-allocation tags to a specified stack or layer in OpsWorks Stacks. For more information about how  tagging works, see Tags in the OpsWorks User Guide.
    ///
    /// Parameters:
    ///   - resourceArn: The stack or layer's Amazon Resource Number (ARN).
    ///   - tags: A map that contains tag keys and tag values that are attached to a stack or layer.   The key cannot be empty.   The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators,  or the following special characters: + - = . _ : /    The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators,  or the following special characters: + - = . _ : /    Leading and trailing white spaces are trimmed from both the key and value.   A maximum of 40 tags is allowed for any resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [String: String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Unassigns a registered instance from all layers that are using the instance.  The instance remains in the stack as an unassigned instance, and can be assigned to  another layer as needed. You cannot use this action with instances that were created  with OpsWorks Stacks.  Required Permissions: To use this action, an IAM user must  have a Manage permissions level for the stack or an attached policy that explicitly  grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func unassignInstance(_ input: UnassignInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UnassignInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Unassigns a registered instance from all layers that are using the instance.  The instance remains in the stack as an unassigned instance, and can be assigned to  another layer as needed. You cannot use this action with instances that were created  with OpsWorks Stacks.  Required Permissions: To use this action, an IAM user must  have a Manage permissions level for the stack or an attached policy that explicitly  grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - instanceId: The instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func unassignInstance(
        instanceId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UnassignInstanceRequest(
            instanceId: instanceId
        )
        return try await self.unassignInstance(input, logger: logger)
    }

    /// Unassigns an assigned Amazon EBS volume. The volume remains registered with the stack. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func unassignVolume(_ input: UnassignVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UnassignVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Unassigns an assigned Amazon EBS volume. The volume remains registered with the stack. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - volumeId: The volume ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func unassignVolume(
        volumeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UnassignVolumeRequest(
            volumeId: volumeId
        )
        return try await self.unassignVolume(input, logger: logger)
    }

    /// Removes tags from a specified stack or layer.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes tags from a specified stack or layer.
    ///
    /// Parameters:
    ///   - resourceArn: The stack or layer's Amazon Resource Number (ARN).
    ///   - tagKeys: A list of the keys of tags to be removed from a stack or layer.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }

    /// Updates a specified app.  Required Permissions: To use this action, an IAM user must have a Deploy or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func updateApp(_ input: UpdateAppRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateApp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a specified app.  Required Permissions: To use this action, an IAM user must have a Deploy or Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - appId: The app ID.
    ///   - appSource: A Source object that specifies the app repository.
    ///   - attributes: One or more user-defined key/value pairs to be added to the stack attributes.
    ///   - dataSources: The app's data sources.
    ///   - description: A description of the app.
    ///   - domains: The app's virtual host settings, with multiple domains separated by commas. For example: 'www.example.com, example.com'
    ///   - enableSsl: Whether SSL is enabled for the app.
    ///   - environment: An array of EnvironmentVariable objects that specify environment variables to be associated with the app. After you deploy the app, these variables are defined on the associated app server instances.For more information, see  Environment Variables. There is no specific limit on the number of environment variables. However, the size of the associated data structure -  which includes the variables' names, values, and protected flag values - cannot exceed 20 KB. This limit should accommodate most  if not all use cases. Exceeding it will cause an exception with the message, "Environment: is too large (maximum is 20 KB)."  If you have specified one or more environment variables, you cannot modify the stack's Chef version.
    ///   - name: The app name.
    ///   - sslConfiguration: An SslConfiguration object with the SSL configuration.
    ///   - type: The app type.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateApp(
        appId: String,
        appSource: Source? = nil,
        attributes: [AppAttributesKeys: String]? = nil,
        dataSources: [DataSource]? = nil,
        description: String? = nil,
        domains: [String]? = nil,
        enableSsl: Bool? = nil,
        environment: [EnvironmentVariable]? = nil,
        name: String? = nil,
        sslConfiguration: SslConfiguration? = nil,
        type: AppType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateAppRequest(
            appId: appId, 
            appSource: appSource, 
            attributes: attributes, 
            dataSources: dataSources, 
            description: description, 
            domains: domains, 
            enableSsl: enableSsl, 
            environment: environment, 
            name: name, 
            sslConfiguration: sslConfiguration, 
            type: type
        )
        return try await self.updateApp(input, logger: logger)
    }

    /// Updates a registered Elastic IP address's name. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func updateElasticIp(_ input: UpdateElasticIpRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateElasticIp", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a registered Elastic IP address's name. For more information, see Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - elasticIp: The IP address for which you want to update the name.
    ///   - name: The new name, which can be a maximum of 32 characters.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateElasticIp(
        elasticIp: String,
        name: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateElasticIpRequest(
            elasticIp: elasticIp, 
            name: name
        )
        return try await self.updateElasticIp(input, logger: logger)
    }

    /// Updates a specified instance.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func updateInstance(_ input: UpdateInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a specified instance.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - agentVersion: The default OpsWorks Stacks agent version. You have the following options:    INHERIT - Use the stack's default agent version setting.    version_number - Use the specified agent version. This value overrides the stack's default setting. To update the agent version, you must edit the instance configuration and specify a new version. OpsWorks Stacks installs that version on the instance.   The default setting is INHERIT. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions. AgentVersion cannot be set to Chef 12.2.
    ///   - amiId: The ID of the AMI that was used to create the instance. The value of this parameter must be the same AMI ID that the  instance is already using.  You cannot apply a new AMI to an instance by running UpdateInstance. UpdateInstance does not work on instances that are using  custom AMIs.
    ///   - architecture: The instance architecture. Instance types do not necessarily support both architectures. For a list of the architectures that are supported by the different instance types, see Instance Families and Types.
    ///   - autoScalingType: For load-based or time-based instances, the type. Windows stacks can use only time-based instances.
    ///   - ebsOptimized: This property cannot be updated.
    ///   - hostname: The instance host name. The following are character limits for instance host names.   Linux-based instances: 63 characters   Windows-based instances: 15 characters
    ///   - installUpdatesOnBoot: Whether to install operating system and package updates when the instance boots. The default value is true. To control when updates are installed, set this value to false. You must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or by manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   We strongly recommend using the default value of true, to ensure that your instances have the latest security updates.
    ///   - instanceId: The instance ID.
    ///   - instanceType: The instance type, such as t2.micro. For a list of supported instance types, open the stack in the console, choose Instances, and choose + Instance. The Size list contains the currently supported types. For more information, see Instance Families and Types. The parameter values that you use to specify the various types are in the API Name column of the Available Instance Types table.
    ///   - layerIds: The instance's layer IDs.
    ///   - os: The instance's operating system, which must be set to one of the following. You cannot update an instance that is using  a custom AMI.   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2, Amazon Linux 2018.03, Amazon Linux 2017.09, Amazon Linux 2017.03, Amazon Linux 2016.09, Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 18.04 LTS, Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS Linux 7     Red Hat Enterprise Linux 7    A supported Windows operating system, such as Microsoft Windows Server 2012 R2 Base, Microsoft Windows Server 2012 R2 with SQL Server Express,  Microsoft Windows Server 2012 R2 with SQL Server Standard, or Microsoft Windows Server 2012 R2 with SQL Server Web.   Not all operating systems are supported with all versions of Chef. For more information about supported operating systems, see OpsWorks Stacks Operating Systems. The default option is the current Amazon Linux version. If you set this parameter to Custom, you must use the AmiId parameter to specify the custom AMI that you want to use. For more information about how to use custom AMIs with OpsWorks, see Using Custom AMIs.  You can specify a different Linux operating system for the updated stack, but you cannot change from Linux to Windows or Windows to Linux.
    ///   - sshKeyName: The instance's Amazon EC2 key name.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateInstance(
        agentVersion: String? = nil,
        amiId: String? = nil,
        architecture: Architecture? = nil,
        autoScalingType: AutoScalingType? = nil,
        ebsOptimized: Bool? = nil,
        hostname: String? = nil,
        installUpdatesOnBoot: Bool? = nil,
        instanceId: String,
        instanceType: String? = nil,
        layerIds: [String]? = nil,
        os: String? = nil,
        sshKeyName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateInstanceRequest(
            agentVersion: agentVersion, 
            amiId: amiId, 
            architecture: architecture, 
            autoScalingType: autoScalingType, 
            ebsOptimized: ebsOptimized, 
            hostname: hostname, 
            installUpdatesOnBoot: installUpdatesOnBoot, 
            instanceId: instanceId, 
            instanceType: instanceType, 
            layerIds: layerIds, 
            os: os, 
            sshKeyName: sshKeyName
        )
        return try await self.updateInstance(input, logger: logger)
    }

    /// Updates a specified layer.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func updateLayer(_ input: UpdateLayerRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateLayer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a specified layer.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - attributes: One or more user-defined key/value pairs to be added to the stack attributes.
    ///   - autoAssignElasticIps: Whether to automatically assign an Elastic IP address to the layer's instances. For more information, see How to Edit a Layer.
    ///   - autoAssignPublicIps: For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see How to Edit a Layer.
    ///   - cloudWatchLogsConfiguration: Specifies CloudWatch Logs configuration options for the layer. For more information,  see CloudWatchLogsLogStream.
    ///   - customInstanceProfileArn: The ARN of an IAM profile to be used for all of the layer's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
    ///   - customJson: A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see  Using Custom JSON.
    ///   - customRecipes: A LayerCustomRecipes object that specifies the layer's custom recipes.
    ///   - customSecurityGroupIds: An array containing the layer's custom security group IDs.
    ///   - enableAutoHealing: Whether to disable auto healing for the layer.
    ///   - installUpdatesOnBoot: Whether to install operating system and package updates when the instance boots. The default value is true. To control when updates are installed, set this value to false. You must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   We strongly recommend using the default value of true, to ensure that your instances have the latest security updates.
    ///   - layerId: The layer ID.
    ///   - lifecycleEventConfiguration: 
    ///   - name: The layer name, which is used by the console. Layer names can be a maximum of 32 characters.
    ///   - packages: An array of Package objects that describe the layer's packages.
    ///   - shortname: For custom layers only, use this parameter to specify the layer's short name, which is used internally by  OpsWorks Stacks and by Chef. The short name is also used as the name for the directory where your app files  are installed. It can have a maximum of 32 characters and must be in the following format: /\A[a-z0-9\-\_\.]+\Z/. Built-in layer short names are defined by OpsWorks Stacks. For more information, see the  Layer reference in the OpsWorks User Guide.
    ///   - useEbsOptimizedInstances: Whether to use Amazon EBS-optimized instances.
    ///   - volumeConfigurations: A VolumeConfigurations object that describes the layer's Amazon EBS volumes.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateLayer(
        attributes: [LayerAttributesKeys: String]? = nil,
        autoAssignElasticIps: Bool? = nil,
        autoAssignPublicIps: Bool? = nil,
        cloudWatchLogsConfiguration: CloudWatchLogsConfiguration? = nil,
        customInstanceProfileArn: String? = nil,
        customJson: String? = nil,
        customRecipes: Recipes? = nil,
        customSecurityGroupIds: [String]? = nil,
        enableAutoHealing: Bool? = nil,
        installUpdatesOnBoot: Bool? = nil,
        layerId: String,
        lifecycleEventConfiguration: LifecycleEventConfiguration? = nil,
        name: String? = nil,
        packages: [String]? = nil,
        shortname: String? = nil,
        useEbsOptimizedInstances: Bool? = nil,
        volumeConfigurations: [VolumeConfiguration]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateLayerRequest(
            attributes: attributes, 
            autoAssignElasticIps: autoAssignElasticIps, 
            autoAssignPublicIps: autoAssignPublicIps, 
            cloudWatchLogsConfiguration: cloudWatchLogsConfiguration, 
            customInstanceProfileArn: customInstanceProfileArn, 
            customJson: customJson, 
            customRecipes: customRecipes, 
            customSecurityGroupIds: customSecurityGroupIds, 
            enableAutoHealing: enableAutoHealing, 
            installUpdatesOnBoot: installUpdatesOnBoot, 
            layerId: layerId, 
            lifecycleEventConfiguration: lifecycleEventConfiguration, 
            name: name, 
            packages: packages, 
            shortname: shortname, 
            useEbsOptimizedInstances: useEbsOptimizedInstances, 
            volumeConfigurations: volumeConfigurations
        )
        return try await self.updateLayer(input, logger: logger)
    }

    /// Updates a user's SSH public key.  Required Permissions: To use this action, an IAM user must have self-management enabled or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func updateMyUserProfile(_ input: UpdateMyUserProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateMyUserProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a user's SSH public key.  Required Permissions: To use this action, an IAM user must have self-management enabled or an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - sshPublicKey: The user's SSH public key.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateMyUserProfile(
        sshPublicKey: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateMyUserProfileRequest(
            sshPublicKey: sshPublicKey
        )
        return try await self.updateMyUserProfile(input, logger: logger)
    }

    /// Updates an Amazon RDS instance.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func updateRdsDbInstance(_ input: UpdateRdsDbInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateRdsDbInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an Amazon RDS instance.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - dbPassword: The database password.
    ///   - dbUser: The master user name.
    ///   - rdsDbInstanceArn: The Amazon RDS instance's ARN.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateRdsDbInstance(
        dbPassword: String? = nil,
        dbUser: String? = nil,
        rdsDbInstanceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateRdsDbInstanceRequest(
            dbPassword: dbPassword, 
            dbUser: dbUser, 
            rdsDbInstanceArn: rdsDbInstanceArn
        )
        return try await self.updateRdsDbInstance(input, logger: logger)
    }

    /// Updates a specified stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func updateStack(_ input: UpdateStackRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateStack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a specified stack.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - agentVersion: The default OpsWorks Stacks agent version. You have the following options:   Auto-update - Set this parameter to LATEST. OpsWorks Stacks automatically installs new agent versions on the stack's instances as soon as they are available.   Fixed version - Set this parameter to your preferred agent version. To update the agent version, you must  edit the stack configuration and specify a new version. OpsWorks Stacks installs that version  on the stack's instances.   The default setting is LATEST. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions.  AgentVersion cannot be set to Chef 12.2.  You can also specify an agent version when you create or update an instance, which overrides the stack's default  setting.
    ///   - attributes: One or more user-defined key-value pairs to be added to the stack attributes.
    ///   - chefConfiguration: A ChefConfiguration object that specifies whether to enable Berkshelf and the Berkshelf version on Chef 11.10 stacks. For more information, see Create a New Stack.
    ///   - configurationManager: The configuration manager. When you update a stack, we recommend that you use the configuration manager to specify the  Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows stacks. The default value for Linux stacks is currently 12.
    ///   - customCookbooksSource: Contains the information required to retrieve an app or cookbook from a repository. For more information,  see Adding Apps or  Cookbooks and Recipes.
    ///   - customJson: A string that contains user-defined, custom JSON. It can be used to override the corresponding default stack configuration  JSON values or to pass data to recipes. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information about custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes.
    ///   - defaultAvailabilityZone: The stack's default Availability Zone, which must be in the stack's region. For more information, see Regions and Endpoints. If you also specify a value for DefaultSubnetId, the subnet must be in the same zone. For more information, see CreateStack.
    ///   - defaultInstanceProfileArn: The ARN of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
    ///   - defaultOs: The stack's operating system, which must be set to one of the following:   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2, Amazon Linux 2018.03, Amazon Linux 2017.09, Amazon Linux 2017.03, Amazon Linux 2016.09,  Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 18.04 LTS, Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS Linux 7     Red Hat Enterprise Linux 7    A supported Windows operating system, such as Microsoft Windows Server 2012 R2 Base, Microsoft Windows Server 2012 R2 with SQL Server Express,  Microsoft Windows Server 2012 R2 with SQL Server Standard, or Microsoft Windows Server 2012 R2 with SQL Server Web.   A custom AMI: Custom. You specify the custom AMI you want to use when you create instances. For more information about how to use custom AMIs with OpsWorks, see Using Custom AMIs.   The default option is the stack's current operating system. Not all operating systems are supported with all versions of Chef. For more information about supported operating systems, see OpsWorks Stacks Operating Systems.
    ///   - defaultRootDeviceType: The default root device type. This value is used by default for all instances in the stack, but you can override it when you create an instance. For more information, see Storage for the Root Device.
    ///   - defaultSshKeyName: A default Amazon EC2 key-pair name. The default value is none. If you specify a key-pair name, OpsWorks Stacks installs the public key on the instance and you can use the private key with an SSH client to log in to the instance. For more information, see  Using SSH to Communicate with an Instance and  Managing SSH Access. You can override this setting by specifying a different key pair, or no key pair, when you  create an instance.
    ///   - defaultSubnetId: The stack's default VPC subnet ID. This parameter is required if you specify a value for the VpcId parameter. All instances are launched into this subnet unless you specify otherwise when you create the instance. If you also specify a value for DefaultAvailabilityZone, the subnet must be in that zone. For information on default values and when this parameter is required, see the VpcId parameter description.
    ///   - hostnameTheme: The stack's new host name theme, with spaces replaced by underscores. The theme is used to generate host names for the stack's instances. By default, HostnameTheme is set to Layer_Dependent, which creates host names by appending integers to  the layer's short name. The other themes are:    Baked_Goods     Clouds     Europe_Cities     Fruits     Greek_Deities_and_Titans     Legendary_creatures_from_Japan     Planets_and_Moons     Roman_Deities     Scottish_Islands     US_Cities     Wild_Cats    To obtain a generated host name, call GetHostNameSuggestion, which returns a host name based on the current theme.
    ///   - name: The stack's new name. Stack names can be a maximum of 64 characters.
    ///   - serviceRoleArn: Do not use this parameter. You cannot update a stack's service role.
    ///   - stackId: The stack ID.
    ///   - useCustomCookbooks: Whether the stack uses custom cookbooks.
    ///   - useOpsworksSecurityGroups: Whether to associate the OpsWorks Stacks built-in security groups with the stack's layers. OpsWorks Stacks provides a standard set of built-in security groups, one for each layer, which are associated with layers by default. UseOpsworksSecurityGroups allows you to provide your own custom security groups instead of using the built-in groups. UseOpsworksSecurityGroups has the following settings:    True - OpsWorks Stacks automatically associates the appropriate built-in security group with each  layer (default setting). You can associate additional security groups with a layer after you create it, but you cannot  delete the built-in security group.   False - OpsWorks Stacks does not associate built-in security groups with layers. You must create  appropriate EC2 security groups and associate a security group with each layer that you create. However, you can still  manually associate a built-in security group with a layer on. Custom security groups are required only for those layers  that need custom settings.   For more information, see Create a New Stack.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateStack(
        agentVersion: String? = nil,
        attributes: [StackAttributesKeys: String]? = nil,
        chefConfiguration: ChefConfiguration? = nil,
        configurationManager: StackConfigurationManager? = nil,
        customCookbooksSource: Source? = nil,
        customJson: String? = nil,
        defaultAvailabilityZone: String? = nil,
        defaultInstanceProfileArn: String? = nil,
        defaultOs: String? = nil,
        defaultRootDeviceType: RootDeviceType? = nil,
        defaultSshKeyName: String? = nil,
        defaultSubnetId: String? = nil,
        hostnameTheme: String? = nil,
        name: String? = nil,
        serviceRoleArn: String? = nil,
        stackId: String,
        useCustomCookbooks: Bool? = nil,
        useOpsworksSecurityGroups: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateStackRequest(
            agentVersion: agentVersion, 
            attributes: attributes, 
            chefConfiguration: chefConfiguration, 
            configurationManager: configurationManager, 
            customCookbooksSource: customCookbooksSource, 
            customJson: customJson, 
            defaultAvailabilityZone: defaultAvailabilityZone, 
            defaultInstanceProfileArn: defaultInstanceProfileArn, 
            defaultOs: defaultOs, 
            defaultRootDeviceType: defaultRootDeviceType, 
            defaultSshKeyName: defaultSshKeyName, 
            defaultSubnetId: defaultSubnetId, 
            hostnameTheme: hostnameTheme, 
            name: name, 
            serviceRoleArn: serviceRoleArn, 
            stackId: stackId, 
            useCustomCookbooks: useCustomCookbooks, 
            useOpsworksSecurityGroups: useOpsworksSecurityGroups
        )
        return try await self.updateStack(input, logger: logger)
    }

    /// Updates a specified user profile.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func updateUserProfile(_ input: UpdateUserProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateUserProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates a specified user profile.  Required Permissions: To use this action, an IAM user must have an attached policy that explicitly grants permissions. For more information about user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - allowSelfManagement: Whether users can specify their own SSH public key through the My Settings page. For more information, see Managing User Permissions.
    ///   - iamUserArn: The user IAM ARN. This can also be a federated user's ARN.
    ///   - sshPublicKey: The user's new SSH public key.
    ///   - sshUsername: The user's SSH user name. The allowable characters are [a-z], [A-Z], [0-9], '-', and '_'. If the specified name includes other punctuation marks, OpsWorks Stacks removes them. For example, my.name will be changed to myname. If you do not specify an SSH user name, OpsWorks Stacks generates one from the IAM user name.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateUserProfile(
        allowSelfManagement: Bool? = nil,
        iamUserArn: String,
        sshPublicKey: String? = nil,
        sshUsername: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateUserProfileRequest(
            allowSelfManagement: allowSelfManagement, 
            iamUserArn: iamUserArn, 
            sshPublicKey: sshPublicKey, 
            sshUsername: sshUsername
        )
        return try await self.updateUserProfile(input, logger: logger)
    }

    /// Updates an Amazon EBS volume's name or mount point. For more information, see  Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    @Sendable
    @inlinable
    public func updateVolume(_ input: UpdateVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UpdateVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates an Amazon EBS volume's name or mount point. For more information, see  Resource Management.  Required Permissions: To use this action, an IAM user must have a Manage permissions level for the stack, or an attached policy that explicitly grants permissions. For more information on user permissions, see Managing User Permissions.
    ///
    /// Parameters:
    ///   - mountPoint: The new mount point.
    ///   - name: The new name. Volume names can be a maximum of 128 characters.
    ///   - volumeId: The volume ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateVolume(
        mountPoint: String? = nil,
        name: String? = nil,
        volumeId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UpdateVolumeRequest(
            mountPoint: mountPoint, 
            name: name, 
            volumeId: volumeId
        )
        return try await self.updateVolume(input, logger: logger)
    }
}

extension OpsWorks {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: OpsWorks, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension OpsWorks {
    /// Return PaginatorSequence for operation ``describeEcsClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEcsClustersPaginator(
        _ input: DescribeEcsClustersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeEcsClustersRequest, DescribeEcsClustersResult> {
        return .init(
            input: input,
            command: self.describeEcsClusters,
            inputKey: \DescribeEcsClustersRequest.nextToken,
            outputKey: \DescribeEcsClustersResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeEcsClusters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - ecsClusterArns: A list of ARNs, one for each cluster to be described.
    ///   - maxResults: To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
    ///   - stackId: A stack ID. DescribeEcsClusters returns a description of the cluster that is registered with the stack.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEcsClustersPaginator(
        ecsClusterArns: [String]? = nil,
        maxResults: Int? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeEcsClustersRequest, DescribeEcsClustersResult> {
        let input = DescribeEcsClustersRequest(
            ecsClusterArns: ecsClusterArns, 
            maxResults: maxResults, 
            stackId: stackId
        )
        return self.describeEcsClustersPaginator(input, logger: logger)
    }
}

extension OpsWorks.DescribeEcsClustersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> OpsWorks.DescribeEcsClustersRequest {
        return .init(
            ecsClusterArns: self.ecsClusterArns,
            maxResults: self.maxResults,
            nextToken: token,
            stackId: self.stackId
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension OpsWorks {
    /// Waiter for operation ``describeApps(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilAppExists(
        _ input: DescribeAppsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeAppsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .failure, matcher: AWSSuccessMatcher()),
            ],
            minDelayTime: .seconds(1),
            command: self.describeApps
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeApps(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appIds: An array of app IDs for the apps to be described. If you use this parameter, DescribeApps returns a description of the specified apps. Otherwise, it returns a description of every app.
    ///   - stackId: The app stack ID. If you use this parameter, DescribeApps returns a description of the apps in the specified stack.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilAppExists(
        appIds: [String]? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeAppsRequest(
            appIds: appIds, 
            stackId: stackId
        )
        try await self.waitUntilAppExists(input, logger: logger)
    }

    /// Waiter for operation ``describeDeployments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilDeploymentSuccessful(
        _ input: DescribeDeploymentsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeDeploymentsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("deployments[].status", expected: "successful")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("deployments[].status", expected: "failed")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeDeployments
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeDeployments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - appId: The app ID. If you include this parameter, the command returns a description of the commands associated with the specified app.
    ///   - deploymentIds: An array of deployment IDs to be described. If you include this parameter, the command returns a description of the specified deployments. Otherwise, it returns a description of every deployment.
    ///   - stackId: The stack ID. If you include this parameter, the command returns a description of the commands associated with the specified stack.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilDeploymentSuccessful(
        appId: String? = nil,
        deploymentIds: [String]? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeDeploymentsRequest(
            appId: appId, 
            deploymentIds: deploymentIds, 
            stackId: stackId
        )
        try await self.waitUntilDeploymentSuccessful(input, logger: logger)
    }

    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceOnline(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstancesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("instances[].status", expected: "online")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "setup_failed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "shutting_down")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "start_failed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "stopped")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "stopping")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "terminating")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "terminated")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "stop_failed")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - instanceIds: An array of instance IDs to be described. If you use this parameter, DescribeInstances returns a description of the specified instances. Otherwise, it returns a description of every instance.
    ///   - layerId: A layer ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified layer.
    ///   - stackId: A stack ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified stack.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceOnline(
        instanceIds: [String]? = nil,
        layerId: String? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstancesRequest(
            instanceIds: instanceIds, 
            layerId: layerId, 
            stackId: stackId
        )
        try await self.waitUntilInstanceOnline(input, logger: logger)
    }

    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceRegistered(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstancesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("instances[].status", expected: "registered")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "setup_failed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "shutting_down")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "stopped")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "stopping")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "terminating")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "terminated")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "stop_failed")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - instanceIds: An array of instance IDs to be described. If you use this parameter, DescribeInstances returns a description of the specified instances. Otherwise, it returns a description of every instance.
    ///   - layerId: A layer ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified layer.
    ///   - stackId: A stack ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified stack.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceRegistered(
        instanceIds: [String]? = nil,
        layerId: String? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstancesRequest(
            instanceIds: instanceIds, 
            layerId: layerId, 
            stackId: stackId
        )
        try await self.waitUntilInstanceRegistered(input, logger: logger)
    }

    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceStopped(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstancesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("instances[].status", expected: "stopped")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "booting")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "pending")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "rebooting")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "requested")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "running_setup")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "setup_failed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "start_failed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "stop_failed")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - instanceIds: An array of instance IDs to be described. If you use this parameter, DescribeInstances returns a description of the specified instances. Otherwise, it returns a description of every instance.
    ///   - layerId: A layer ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified layer.
    ///   - stackId: A stack ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified stack.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceStopped(
        instanceIds: [String]? = nil,
        layerId: String? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstancesRequest(
            instanceIds: instanceIds, 
            layerId: layerId, 
            stackId: stackId
        )
        try await self.waitUntilInstanceStopped(input, logger: logger)
    }

    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceTerminated(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstancesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("instances[].status", expected: "terminated")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "booting")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "online")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "pending")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "rebooting")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "requested")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "running_setup")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "setup_failed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("instances[].status", expected: "start_failed")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - instanceIds: An array of instance IDs to be described. If you use this parameter, DescribeInstances returns a description of the specified instances. Otherwise, it returns a description of every instance.
    ///   - layerId: A layer ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified layer.
    ///   - stackId: A stack ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified stack.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceTerminated(
        instanceIds: [String]? = nil,
        layerId: String? = nil,
        stackId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstancesRequest(
            instanceIds: instanceIds, 
            layerId: layerId, 
            stackId: stackId
        )
        try await self.waitUntilInstanceTerminated(input, logger: logger)
    }
}
