//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension SQS {
    // MARK: Enums

    public enum MessageSystemAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case approximateFirstReceiveTimestamp = "ApproximateFirstReceiveTimestamp"
        case approximateReceiveCount = "ApproximateReceiveCount"
        case awsTraceHeader = "AWSTraceHeader"
        case deadLetterQueueSourceArn = "DeadLetterQueueSourceArn"
        case messageDeduplicationId = "MessageDeduplicationId"
        case messageGroupId = "MessageGroupId"
        case senderId = "SenderId"
        case sentTimestamp = "SentTimestamp"
        case sequenceNumber = "SequenceNumber"
        public var description: String { return self.rawValue }
    }

    public enum MessageSystemAttributeNameForSends: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case awsTraceHeader = "AWSTraceHeader"
        public var description: String { return self.rawValue }
    }

    public enum QueueAttributeName: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case all = "All"
        case approximateNumberOfMessages = "ApproximateNumberOfMessages"
        case approximateNumberOfMessagesDelayed = "ApproximateNumberOfMessagesDelayed"
        case approximateNumberOfMessagesNotVisible = "ApproximateNumberOfMessagesNotVisible"
        case contentBasedDeduplication = "ContentBasedDeduplication"
        case createdTimestamp = "CreatedTimestamp"
        case deduplicationScope = "DeduplicationScope"
        case delaySeconds = "DelaySeconds"
        case fifoQueue = "FifoQueue"
        case fifoThroughputLimit = "FifoThroughputLimit"
        case kmsDataKeyReusePeriodSeconds = "KmsDataKeyReusePeriodSeconds"
        case kmsMasterKeyId = "KmsMasterKeyId"
        case lastModifiedTimestamp = "LastModifiedTimestamp"
        case maximumMessageSize = "MaximumMessageSize"
        case messageRetentionPeriod = "MessageRetentionPeriod"
        case policy = "Policy"
        case queueArn = "QueueArn"
        case receiveMessageWaitTimeSeconds = "ReceiveMessageWaitTimeSeconds"
        case redriveAllowPolicy = "RedriveAllowPolicy"
        case redrivePolicy = "RedrivePolicy"
        case sqsManagedSseEnabled = "SqsManagedSseEnabled"
        case visibilityTimeout = "VisibilityTimeout"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AddPermissionRequest: AWSEncodableShape {
        /// The action the client wants to allow for the specified principal. Valid values: the name of any action or *. For more information about these actions, see Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource in the Amazon SQS Developer Guide. Specifying SendMessage, DeleteMessage, or ChangeMessageVisibility for ActionName.n also grants permissions for the corresponding batch versions of those actions: SendMessageBatch, DeleteMessageBatch, and ChangeMessageVisibilityBatch.
        public let actions: [String]
        /// The Amazon Web Services account numbers of the principals who are to receive permission. For information about locating the Amazon Web Services account identification, see Your Amazon Web Services Identifiers in the Amazon SQS Developer Guide.
        public let awsAccountIds: [String]
        /// The unique identification of the permission you're setting (for example, AliceSendMessage). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (-), and underscores (_).
        public let label: String
        /// The URL of the Amazon SQS queue to which permissions are added. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(actions: [String], awsAccountIds: [String], label: String, queueUrl: String) {
            self.actions = actions
            self.awsAccountIds = awsAccountIds
            self.label = label
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "Actions"
            case awsAccountIds = "AWSAccountIds"
            case label = "Label"
            case queueUrl = "QueueUrl"
        }
    }

    public struct BatchResultErrorEntry: AWSDecodableShape {
        /// An error code representing why the action failed on this entry.
        public let code: String
        /// The Id of an entry in a batch request.
        public let id: String
        /// A message explaining why the action failed on this entry.
        public let message: String?
        /// Specifies whether the error happened due to the caller of the batch API action.
        public let senderFault: Bool

        public init(code: String, id: String, message: String? = nil, senderFault: Bool) {
            self.code = code
            self.id = id
            self.message = message
            self.senderFault = senderFault
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case id = "Id"
            case message = "Message"
            case senderFault = "SenderFault"
        }
    }

    public struct CancelMessageMoveTaskRequest: AWSEncodableShape {
        /// An identifier associated with a message movement task.
        public let taskHandle: String

        public init(taskHandle: String) {
            self.taskHandle = taskHandle
        }

        private enum CodingKeys: String, CodingKey {
            case taskHandle = "TaskHandle"
        }
    }

    public struct CancelMessageMoveTaskResult: AWSDecodableShape {
        /// The approximate number of messages already moved to the destination queue.
        public let approximateNumberOfMessagesMoved: Int64?

        public init(approximateNumberOfMessagesMoved: Int64? = nil) {
            self.approximateNumberOfMessagesMoved = approximateNumberOfMessagesMoved
        }

        private enum CodingKeys: String, CodingKey {
            case approximateNumberOfMessagesMoved = "ApproximateNumberOfMessagesMoved"
        }
    }

    public struct ChangeMessageVisibilityBatchRequest: AWSEncodableShape {
        /// Lists the receipt handles of the messages for which the visibility timeout must be changed.
        public let entries: [ChangeMessageVisibilityBatchRequestEntry]
        /// The URL of the Amazon SQS queue whose messages' visibility is changed. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(entries: [ChangeMessageVisibilityBatchRequestEntry], queueUrl: String) {
            self.entries = entries
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "Entries"
            case queueUrl = "QueueUrl"
        }
    }

    public struct ChangeMessageVisibilityBatchRequestEntry: AWSEncodableShape {
        /// An identifier for this particular receipt handle used to communicate the result.  The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        public let id: String
        /// A receipt handle.
        public let receiptHandle: String
        /// The new value (in seconds) for the message's visibility timeout.
        public let visibilityTimeout: Int?

        public init(id: String, receiptHandle: String, visibilityTimeout: Int? = nil) {
            self.id = id
            self.receiptHandle = receiptHandle
            self.visibilityTimeout = visibilityTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case receiptHandle = "ReceiptHandle"
            case visibilityTimeout = "VisibilityTimeout"
        }
    }

    public struct ChangeMessageVisibilityBatchResult: AWSDecodableShape {
        /// A list of  BatchResultErrorEntry items.
        public let failed: [BatchResultErrorEntry]?
        /// A list of  ChangeMessageVisibilityBatchResultEntry  items.
        public let successful: [ChangeMessageVisibilityBatchResultEntry]?

        public init(failed: [BatchResultErrorEntry]? = nil, successful: [ChangeMessageVisibilityBatchResultEntry]? = nil) {
            self.failed = failed
            self.successful = successful
        }

        private enum CodingKeys: String, CodingKey {
            case failed = "Failed"
            case successful = "Successful"
        }
    }

    public struct ChangeMessageVisibilityBatchResultEntry: AWSDecodableShape {
        /// Represents a message whose visibility timeout has been changed successfully.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct ChangeMessageVisibilityRequest: AWSEncodableShape {
        /// The URL of the Amazon SQS queue whose message's visibility is changed. Queue URLs and names are case-sensitive.
        public let queueUrl: String
        /// The receipt handle associated with the message, whose visibility timeout is changed. This parameter is returned by the  ReceiveMessage  action.
        public let receiptHandle: String
        /// The new value for the message's visibility timeout (in seconds). Values range: 0 to 43200. Maximum: 12 hours.
        public let visibilityTimeout: Int

        public init(queueUrl: String, receiptHandle: String, visibilityTimeout: Int) {
            self.queueUrl = queueUrl
            self.receiptHandle = receiptHandle
            self.visibilityTimeout = visibilityTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
            case receiptHandle = "ReceiptHandle"
            case visibilityTimeout = "VisibilityTimeout"
        }
    }

    public struct CreateQueueRequest: AWSEncodableShape {
        /// A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that the CreateQueue action uses:    DelaySeconds – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0.     MaximumMessageSize – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).     MessageRetentionPeriod – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days). When you change a queue's attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the MessageRetentionPeriod attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the MessageRetentionPeriod is reduced below the age of existing messages.    Policy – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see Overview of Amazon Web Services IAM Policies in the IAM User Guide.     ReceiveMessageWaitTimeSeconds – The length of time, in seconds, for which a  ReceiveMessage action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.     VisibilityTimeout – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see Visibility Timeout in the Amazon SQS Developer Guide.   The following attributes apply only to dead-letter queues:     RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:    deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.    maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.      RedriveAllowPolicy – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:    redrivePermission – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:    allowAll – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.    denyAll – No source queues can specify this queue as the dead-letter queue.    byQueue – Only queues specified by the sourceQueueArns parameter can specify this queue as the dead-letter queue.      sourceQueueArns – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the redrivePermission parameter is set to byQueue. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the redrivePermission parameter to allowAll.      The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.  The following attributes apply only to server-side-encryption:    KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see Key Terms. While the alias of the Amazon Web Services managed CMK for Amazon SQS is always alias/aws/sqs, the alias of a custom CMK can, for example, be alias/MyAlias . For more examples, see KeyId in the Key Management Service API Reference.     KmsDataKeyReusePeriodSeconds – The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see How Does the Data Key Reuse Period Work?     SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, SSE-KMS or SSE-SQS).   The following attributes apply only to FIFO (first-in-first-out) queues:    FifoQueue – Designates a queue as FIFO. Valid values are true and false. If you don't specify the FifoQueue attribute, Amazon SQS creates a standard queue. You can provide this attribute only during queue creation. You can't change it for an existing queue. When you set this attribute, you must also provide the MessageGroupId for your messages explicitly. For more information, see FIFO queue logic in the Amazon SQS Developer Guide.    ContentBasedDeduplication – Enables content-based deduplication. Valid values are true and false. For more information, see Exactly-once processing in the Amazon SQS Developer Guide. Note the following:    Every message must have a unique MessageDeduplicationId.   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).    If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.   If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.     When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.      The following attributes apply only to high throughput for FIFO queues:    DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.    FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.   To enable high throughput for FIFO queues, do the following:   Set DeduplicationScope to messageGroup.   Set FifoThroughputLimit to perMessageGroupId.   If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see Quotas related to messages in the Amazon SQS Developer Guide.
        public let attributes: [QueueAttributeName: String]?
        /// The name of the new queue. The following limits apply to this name:   A queue name can have up to 80 characters.   Valid values: alphanumeric characters, hyphens (-), and underscores (_).   A FIFO queue name must end with the .fifo suffix.   Queue URLs and names are case-sensitive.
        public let queueName: String
        /// Add cost allocation tags to the specified Amazon SQS queue. For an overview, see Tagging Your Amazon SQS Queues in the Amazon SQS Developer Guide. When you use queue tags, keep the following guidelines in mind:   Adding more than 50 tags to a queue isn't recommended.   Tags don't have any semantic meaning. Amazon SQS interprets tags as character strings.   Tags are case-sensitive.   A new tag with a key identical to that of an existing tag overwrites the existing tag.   For a full list of tag restrictions, see Quotas related to queues in the Amazon SQS Developer Guide.  To be able to tag a queue on creation, you must have the sqs:CreateQueue and sqs:TagQueue permissions. Cross-account permissions don't apply to this action. For more information, see Grant cross-account permissions to a role and a username in the Amazon SQS Developer Guide.
        public let tags: [String: String]?

        public init(attributes: [QueueAttributeName: String]? = nil, queueName: String, tags: [String: String]? = nil) {
            self.attributes = attributes
            self.queueName = queueName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case queueName = "QueueName"
            case tags = "tags"
        }
    }

    public struct CreateQueueResult: AWSDecodableShape {
        /// The URL of the created Amazon SQS queue.
        public let queueUrl: String?

        public init(queueUrl: String? = nil) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct DeleteMessageBatchRequest: AWSEncodableShape {
        /// Lists the receipt handles for the messages to be deleted.
        public let entries: [DeleteMessageBatchRequestEntry]
        /// The URL of the Amazon SQS queue from which messages are deleted. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(entries: [DeleteMessageBatchRequestEntry], queueUrl: String) {
            self.entries = entries
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "Entries"
            case queueUrl = "QueueUrl"
        }
    }

    public struct DeleteMessageBatchRequestEntry: AWSEncodableShape {
        /// The identifier for this particular receipt handle. This is used to communicate the result.  The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        public let id: String
        /// A receipt handle.
        public let receiptHandle: String

        public init(id: String, receiptHandle: String) {
            self.id = id
            self.receiptHandle = receiptHandle
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case receiptHandle = "ReceiptHandle"
        }
    }

    public struct DeleteMessageBatchResult: AWSDecodableShape {
        /// A list of  BatchResultErrorEntry items.
        public let failed: [BatchResultErrorEntry]?
        /// A list of  DeleteMessageBatchResultEntry items.
        public let successful: [DeleteMessageBatchResultEntry]?

        public init(failed: [BatchResultErrorEntry]? = nil, successful: [DeleteMessageBatchResultEntry]? = nil) {
            self.failed = failed
            self.successful = successful
        }

        private enum CodingKeys: String, CodingKey {
            case failed = "Failed"
            case successful = "Successful"
        }
    }

    public struct DeleteMessageBatchResultEntry: AWSDecodableShape {
        /// Represents a successfully deleted message.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DeleteMessageRequest: AWSEncodableShape {
        /// The URL of the Amazon SQS queue from which messages are deleted. Queue URLs and names are case-sensitive.
        public let queueUrl: String
        /// The receipt handle associated with the message to delete.
        public let receiptHandle: String

        public init(queueUrl: String, receiptHandle: String) {
            self.queueUrl = queueUrl
            self.receiptHandle = receiptHandle
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
            case receiptHandle = "ReceiptHandle"
        }
    }

    public struct DeleteQueueRequest: AWSEncodableShape {
        /// The URL of the Amazon SQS queue to delete. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(queueUrl: String) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct GetQueueAttributesRequest: AWSEncodableShape {
        /// A list of attributes for which to retrieve information. The AttributeNames parameter is optional, but if you don't specify values for this parameter, the request returns empty results.  In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.  The following attributes are supported:  The ApproximateNumberOfMessagesDelayed, ApproximateNumberOfMessagesNotVisible, and ApproximateNumberOfMessages metrics may not achieve consistency until at least 1 minute after the producers stop sending messages. This period is required for the queue metadata to reach eventual consistency.      All – Returns all values.     ApproximateNumberOfMessages – Returns the approximate number of messages available for retrieval from the queue.    ApproximateNumberOfMessagesDelayed – Returns the approximate number of messages in the queue that are delayed and not available for reading immediately. This can happen when the queue is configured as a delay queue or when a message has been sent with a delay parameter.    ApproximateNumberOfMessagesNotVisible – Returns the approximate number of messages that are in flight. Messages are considered to be in flight if they have been sent to a client but have not yet been deleted or have not yet reached the end of their visibility window.     CreatedTimestamp – Returns the time when the queue was created in seconds (epoch time).    DelaySeconds – Returns the default delay on the queue in seconds.    LastModifiedTimestamp – Returns the time when the queue was last changed in seconds (epoch time).    MaximumMessageSize – Returns the limit of how many bytes a message can contain before Amazon SQS rejects it.    MessageRetentionPeriod – Returns the length of time, in seconds, for which Amazon SQS retains a message. When you change a queue's attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the MessageRetentionPeriod attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the MessageRetentionPeriod is reduced below the age of existing messages.    Policy – Returns the policy of the queue.    QueueArn – Returns the Amazon resource name (ARN) of the queue.    ReceiveMessageWaitTimeSeconds – Returns the length of time, in seconds, for which the ReceiveMessage action waits for a message to arrive.     VisibilityTimeout – Returns the visibility timeout for the queue. For more information about the visibility timeout, see Visibility Timeout in the Amazon SQS Developer Guide.    The following attributes apply only to dead-letter queues:     RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:    deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.    maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.      RedriveAllowPolicy – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:    redrivePermission – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:    allowAll – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.    denyAll – No source queues can specify this queue as the dead-letter queue.    byQueue – Only queues specified by the sourceQueueArns parameter can specify this queue as the dead-letter queue.      sourceQueueArns – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the redrivePermission parameter is set to byQueue. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the redrivePermission parameter to allowAll.      The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.  The following attributes apply only to server-side-encryption:    KmsMasterKeyId – Returns the ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see Key Terms.     KmsDataKeyReusePeriodSeconds – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. For more information, see How Does the Data Key Reuse Period Work?.     SqsManagedSseEnabled – Returns information about whether the queue is using SSE-SQS encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, SSE-KMS or SSE-SQS).   The following attributes apply only to FIFO (first-in-first-out) queues:    FifoQueue – Returns information about whether the queue is FIFO. For more information, see FIFO queue logic in the Amazon SQS Developer Guide.  To determine whether a queue is FIFO, you can check whether QueueName ends with the .fifo suffix.     ContentBasedDeduplication – Returns whether content-based deduplication is enabled for the queue. For more information, see Exactly-once processing in the Amazon SQS Developer Guide.    The following attributes apply only to high throughput for FIFO queues:    DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.    FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.   To enable high throughput for FIFO queues, do the following:   Set DeduplicationScope to messageGroup.   Set FifoThroughputLimit to perMessageGroupId.   If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see Quotas related to messages in the Amazon SQS Developer Guide.
        public let attributeNames: [QueueAttributeName]?
        /// The URL of the Amazon SQS queue whose attribute information is retrieved. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(attributeNames: [QueueAttributeName]? = nil, queueUrl: String) {
            self.attributeNames = attributeNames
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "AttributeNames"
            case queueUrl = "QueueUrl"
        }
    }

    public struct GetQueueAttributesResult: AWSDecodableShape {
        /// A map of attributes to their respective values.
        public let attributes: [QueueAttributeName: String]?

        public init(attributes: [QueueAttributeName: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct GetQueueUrlRequest: AWSEncodableShape {
        /// The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (-), and underscores (_). Queue URLs and names are case-sensitive.
        public let queueName: String
        /// The Amazon Web Services account ID of the account that created the queue.
        public let queueOwnerAWSAccountId: String?

        public init(queueName: String, queueOwnerAWSAccountId: String? = nil) {
            self.queueName = queueName
            self.queueOwnerAWSAccountId = queueOwnerAWSAccountId
        }

        private enum CodingKeys: String, CodingKey {
            case queueName = "QueueName"
            case queueOwnerAWSAccountId = "QueueOwnerAWSAccountId"
        }
    }

    public struct GetQueueUrlResult: AWSDecodableShape {
        /// The URL of the queue.
        public let queueUrl: String?

        public init(queueUrl: String? = nil) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct ListDeadLetterSourceQueuesRequest: AWSEncodableShape {
        /// Maximum number of results to include in the response. Value range is 1 to 1000. You must set MaxResults to receive a value for NextToken in the response.
        public let maxResults: Int?
        /// Pagination token to request the next set of results.
        public let nextToken: String?
        /// The URL of a dead-letter queue. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, queueUrl: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case queueUrl = "QueueUrl"
        }
    }

    public struct ListDeadLetterSourceQueuesResult: AWSDecodableShape {
        /// Pagination token to include in the next request. Token value is null if there are no additional results to request, or if you did not set MaxResults in the request.
        public let nextToken: String?
        /// A list of source queue URLs that have the RedrivePolicy queue attribute configured with a dead-letter queue.
        public let queueUrls: [String]

        public init(nextToken: String? = nil, queueUrls: [String]) {
            self.nextToken = nextToken
            self.queueUrls = queueUrls
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case queueUrls = "queueUrls"
        }
    }

    public struct ListMessageMoveTasksRequest: AWSEncodableShape {
        /// The maximum number of results to include in the response. The default is 1, which provides the most recent message movement task. The upper limit is 10.
        public let maxResults: Int?
        /// The ARN of the queue whose message movement tasks are to be listed.
        public let sourceArn: String

        public init(maxResults: Int? = nil, sourceArn: String) {
            self.maxResults = maxResults
            self.sourceArn = sourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case sourceArn = "SourceArn"
        }
    }

    public struct ListMessageMoveTasksResult: AWSDecodableShape {
        /// A list of message movement tasks and their attributes.
        public let results: [ListMessageMoveTasksResultEntry]?

        public init(results: [ListMessageMoveTasksResultEntry]? = nil) {
            self.results = results
        }

        private enum CodingKeys: String, CodingKey {
            case results = "Results"
        }
    }

    public struct ListMessageMoveTasksResultEntry: AWSDecodableShape {
        /// The approximate number of messages already moved to the destination queue.
        public let approximateNumberOfMessagesMoved: Int64?
        /// The number of messages to be moved from the source queue. This number is obtained at the time of starting the message movement task.
        public let approximateNumberOfMessagesToMove: Int64?
        /// The ARN of the destination queue if it has been specified in the StartMessageMoveTask request. If a DestinationArn has not been specified in the StartMessageMoveTask request, this field value will be NULL.
        public let destinationArn: String?
        /// The task failure reason (only included if the task status is FAILED).
        public let failureReason: String?
        /// The number of messages to be moved per second (the message movement rate), if it has been specified in the StartMessageMoveTask request. If a MaxNumberOfMessagesPerSecond has not been specified in the StartMessageMoveTask request, this field value will be NULL.
        public let maxNumberOfMessagesPerSecond: Int?
        /// The ARN of the queue that contains the messages to be moved to another queue.
        public let sourceArn: String?
        /// The timestamp of starting the message movement task.
        public let startedTimestamp: Int64?
        /// The status of the message movement task. Possible values are: RUNNING, COMPLETED, CANCELLING, CANCELLED, and FAILED.
        public let status: String?
        /// An identifier associated with a message movement task. When this field is returned in the response of the ListMessageMoveTasks action, it is only populated for tasks that are in RUNNING status.
        public let taskHandle: String?

        public init(approximateNumberOfMessagesMoved: Int64? = nil, approximateNumberOfMessagesToMove: Int64? = nil, destinationArn: String? = nil, failureReason: String? = nil, maxNumberOfMessagesPerSecond: Int? = nil, sourceArn: String? = nil, startedTimestamp: Int64? = nil, status: String? = nil, taskHandle: String? = nil) {
            self.approximateNumberOfMessagesMoved = approximateNumberOfMessagesMoved
            self.approximateNumberOfMessagesToMove = approximateNumberOfMessagesToMove
            self.destinationArn = destinationArn
            self.failureReason = failureReason
            self.maxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecond
            self.sourceArn = sourceArn
            self.startedTimestamp = startedTimestamp
            self.status = status
            self.taskHandle = taskHandle
        }

        private enum CodingKeys: String, CodingKey {
            case approximateNumberOfMessagesMoved = "ApproximateNumberOfMessagesMoved"
            case approximateNumberOfMessagesToMove = "ApproximateNumberOfMessagesToMove"
            case destinationArn = "DestinationArn"
            case failureReason = "FailureReason"
            case maxNumberOfMessagesPerSecond = "MaxNumberOfMessagesPerSecond"
            case sourceArn = "SourceArn"
            case startedTimestamp = "StartedTimestamp"
            case status = "Status"
            case taskHandle = "TaskHandle"
        }
    }

    public struct ListQueueTagsRequest: AWSEncodableShape {
        /// The URL of the queue.
        public let queueUrl: String

        public init(queueUrl: String) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct ListQueueTagsResult: AWSDecodableShape {
        /// The list of all tags added to the specified queue.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct ListQueuesRequest: AWSEncodableShape {
        /// Maximum number of results to include in the response. Value range is 1 to 1000. You must set MaxResults to receive a value for NextToken in the response.
        public let maxResults: Int?
        /// Pagination token to request the next set of results.
        public let nextToken: String?
        /// A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned. Queue URLs and names are case-sensitive.
        public let queueNamePrefix: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, queueNamePrefix: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.queueNamePrefix = queueNamePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case queueNamePrefix = "QueueNamePrefix"
        }
    }

    public struct ListQueuesResult: AWSDecodableShape {
        /// Pagination token to include in the next request. Token value is null if there are no additional results to request, or if you did not set MaxResults in the request.
        public let nextToken: String?
        /// A list of queue URLs, up to 1,000 entries, or the value of MaxResults that you sent in the request.
        public let queueUrls: [String]?

        public init(nextToken: String? = nil, queueUrls: [String]? = nil) {
            self.nextToken = nextToken
            self.queueUrls = queueUrls
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case queueUrls = "QueueUrls"
        }
    }

    public struct Message: AWSDecodableShape {
        /// A map of the attributes requested in  ReceiveMessage to their respective values. Supported attributes:    ApproximateReceiveCount     ApproximateFirstReceiveTimestamp     MessageDeduplicationId     MessageGroupId     SenderId     SentTimestamp     SequenceNumber     ApproximateFirstReceiveTimestamp and SentTimestamp are each returned as an integer representing the epoch time in milliseconds.
        public let attributes: [MessageSystemAttributeName: String]?
        /// The message's contents (not URL-encoded).
        public let body: String?
        /// An MD5 digest of the non-URL-encoded message body string.
        public let md5OfBody: String?
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let md5OfMessageAttributes: String?
        /// Each message attribute consists of a Name, Type, and Value. For more information, see Amazon SQS message attributes in the Amazon SQS Developer Guide.
        public let messageAttributes: [String: MessageAttributeValue]?
        /// A unique identifier for the message. A MessageIdis considered unique across all Amazon Web Services accounts for an extended period of time.
        public let messageId: String?
        /// An identifier associated with the act of receiving the message. A new receipt handle is returned every time you receive a message. When deleting a message, you provide the last received receipt handle to delete the message.
        public let receiptHandle: String?

        public init(attributes: [MessageSystemAttributeName: String]? = nil, body: String? = nil, md5OfBody: String? = nil, md5OfMessageAttributes: String? = nil, messageAttributes: [String: MessageAttributeValue]? = nil, messageId: String? = nil, receiptHandle: String? = nil) {
            self.attributes = attributes
            self.body = body
            self.md5OfBody = md5OfBody
            self.md5OfMessageAttributes = md5OfMessageAttributes
            self.messageAttributes = messageAttributes
            self.messageId = messageId
            self.receiptHandle = receiptHandle
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case body = "Body"
            case md5OfBody = "MD5OfBody"
            case md5OfMessageAttributes = "MD5OfMessageAttributes"
            case messageAttributes = "MessageAttributes"
            case messageId = "MessageId"
            case receiptHandle = "ReceiptHandle"
        }
    }

    public struct MessageAttributeValue: AWSEncodableShape & AWSDecodableShape {
        /// Not implemented. Reserved for future use.
        public let binaryListValues: [AWSBase64Data]?
        /// Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.
        public let binaryValue: AWSBase64Data?
        /// Amazon SQS supports the following logical data types: String, Number, and Binary. For the Number data type, you must use StringValue. You can also append custom labels. For more information, see Amazon SQS Message Attributes in the Amazon SQS Developer Guide.
        public let dataType: String
        /// Not implemented. Reserved for future use.
        public let stringListValues: [String]?
        /// Strings are Unicode with UTF-8 binary encoding. For a list of code values, see ASCII Printable Characters.
        public let stringValue: String?

        public init(binaryListValues: [AWSBase64Data]? = nil, binaryValue: AWSBase64Data? = nil, dataType: String, stringListValues: [String]? = nil, stringValue: String? = nil) {
            self.binaryListValues = binaryListValues
            self.binaryValue = binaryValue
            self.dataType = dataType
            self.stringListValues = stringListValues
            self.stringValue = stringValue
        }

        private enum CodingKeys: String, CodingKey {
            case binaryListValues = "BinaryListValues"
            case binaryValue = "BinaryValue"
            case dataType = "DataType"
            case stringListValues = "StringListValues"
            case stringValue = "StringValue"
        }
    }

    public struct MessageSystemAttributeValue: AWSEncodableShape {
        /// Not implemented. Reserved for future use.
        public let binaryListValues: [AWSBase64Data]?
        /// Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.
        public let binaryValue: AWSBase64Data?
        /// Amazon SQS supports the following logical data types: String, Number, and Binary. For the Number data type, you must use StringValue. You can also append custom labels. For more information, see Amazon SQS Message Attributes in the Amazon SQS Developer Guide.
        public let dataType: String
        /// Not implemented. Reserved for future use.
        public let stringListValues: [String]?
        /// Strings are Unicode with UTF-8 binary encoding. For a list of code values, see ASCII Printable Characters.
        public let stringValue: String?

        public init(binaryListValues: [AWSBase64Data]? = nil, binaryValue: AWSBase64Data? = nil, dataType: String, stringListValues: [String]? = nil, stringValue: String? = nil) {
            self.binaryListValues = binaryListValues
            self.binaryValue = binaryValue
            self.dataType = dataType
            self.stringListValues = stringListValues
            self.stringValue = stringValue
        }

        private enum CodingKeys: String, CodingKey {
            case binaryListValues = "BinaryListValues"
            case binaryValue = "BinaryValue"
            case dataType = "DataType"
            case stringListValues = "StringListValues"
            case stringValue = "StringValue"
        }
    }

    public struct PurgeQueueRequest: AWSEncodableShape {
        /// The URL of the queue from which the PurgeQueue action deletes messages. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(queueUrl: String) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct ReceiveMessageRequest: AWSEncodableShape {
        /// A list of attributes that need to be returned along with each message. These attributes include:    All – Returns all values.    ApproximateFirstReceiveTimestamp – Returns the time the message was first received from the queue (epoch time in milliseconds).    ApproximateReceiveCount – Returns the number of times a message has been received across all queues but not deleted.    AWSTraceHeader – Returns the X-Ray trace header string.     SenderId    For a user, returns the user ID, for example ABCDEFGHI1JKLMNOPQ23R.   For an IAM role, returns the IAM role ID, for example ABCDE1F2GH3I4JK5LMNOP:i-a123b456.      SentTimestamp – Returns the time the message was sent to the queue (epoch time in milliseconds).    SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, SSE-KMS or SSE-SQS).    MessageDeduplicationId – Returns the value provided by the producer that calls the  SendMessage  action.    MessageGroupId – Returns the value provided by the producer that calls the  SendMessage action. Messages with the same MessageGroupId are returned in sequence.    SequenceNumber – Returns the value provided by Amazon SQS.
        public let attributeNames: [QueueAttributeName]?
        /// The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1.
        public let maxNumberOfMessages: Int?
        /// The name of the message attribute, where N is the index.   The name can contain alphanumeric characters and the underscore (_), hyphen (-), and period (.).   The name is case-sensitive and must be unique among all attribute names for the message.   The name must not start with AWS-reserved prefixes such as AWS. or Amazon. (or any casing variants).   The name must not start or end with a period (.), and it should not have periods in succession (..).   The name can be up to 256 characters long.   When using ReceiveMessage, you can send a list of attribute names to receive, or you can return all of the attributes by specifying All or .* in your request. You can also use all message attributes starting with a prefix, for example bar.*.
        public let messageAttributeNames: [String]?
        /// The URL of the Amazon SQS queue from which messages are received. Queue URLs and names are case-sensitive.
        public let queueUrl: String
        /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of ReceiveMessage calls. If a networking issue occurs after a ReceiveMessage action, and instead of a response you receive a generic error, it is possible to retry the same action with an identical ReceiveRequestAttemptId to retrieve the same set of messages, even if their visibility timeout has not yet expired.   You can use ReceiveRequestAttemptId only for 5 minutes after a ReceiveMessage action.   When you set FifoQueue, a caller of the ReceiveMessage action can provide a ReceiveRequestAttemptId explicitly.   If a caller of the ReceiveMessage action doesn't provide a ReceiveRequestAttemptId, Amazon SQS generates a ReceiveRequestAttemptId.   It is possible to retry the ReceiveMessage action with the same ReceiveRequestAttemptId if none of the messages have been modified (deleted or had their visibility changes).   During a visibility timeout, subsequent calls with the same ReceiveRequestAttemptId return the same messages and receipt handles. If a retry occurs within the deduplication interval, it resets the visibility timeout. For more information, see Visibility Timeout in the Amazon SQS Developer Guide.  If a caller of the ReceiveMessage action still processes messages when the visibility timeout expires and messages become visible, another worker consuming from the same queue can receive the same messages and therefore process duplicates. Also, if a consumer whose message processing time is longer than the visibility timeout tries to delete the processed messages, the action fails with an error. To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.    While messages with a particular MessageGroupId are invisible, no more messages belonging to the same MessageGroupId are returned until the visibility timeout expires. You can still receive messages with another MessageGroupId as long as it is also visible.   If a caller of ReceiveMessage can't track the ReceiveRequestAttemptId, no retries work until the original visibility timeout expires. As a result, delays might occur but the messages in the queue remain in a strict order.   The maximum length of ReceiveRequestAttemptId is 128 characters. ReceiveRequestAttemptId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~). For best practices of using ReceiveRequestAttemptId, see Using the ReceiveRequestAttemptId Request Parameter in the Amazon SQS Developer Guide.
        public let receiveRequestAttemptId: String?
        /// The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request.
        public let visibilityTimeout: Int?
        /// The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than WaitTimeSeconds. If no messages are available and the wait time expires, the call returns successfully with an empty list of messages.  To avoid HTTP errors, ensure that the HTTP response timeout for ReceiveMessage requests is longer than the WaitTimeSeconds parameter. For example, with the Java SDK, you can set HTTP transport settings using the  NettyNioAsyncHttpClient for asynchronous clients, or the  ApacheHttpClient for synchronous clients.
        public let waitTimeSeconds: Int?

        public init(attributeNames: [QueueAttributeName]? = nil, maxNumberOfMessages: Int? = nil, messageAttributeNames: [String]? = nil, queueUrl: String, receiveRequestAttemptId: String? = nil, visibilityTimeout: Int? = nil, waitTimeSeconds: Int? = nil) {
            self.attributeNames = attributeNames
            self.maxNumberOfMessages = maxNumberOfMessages
            self.messageAttributeNames = messageAttributeNames
            self.queueUrl = queueUrl
            self.receiveRequestAttemptId = receiveRequestAttemptId
            self.visibilityTimeout = visibilityTimeout
            self.waitTimeSeconds = waitTimeSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "AttributeNames"
            case maxNumberOfMessages = "MaxNumberOfMessages"
            case messageAttributeNames = "MessageAttributeNames"
            case queueUrl = "QueueUrl"
            case receiveRequestAttemptId = "ReceiveRequestAttemptId"
            case visibilityTimeout = "VisibilityTimeout"
            case waitTimeSeconds = "WaitTimeSeconds"
        }
    }

    public struct ReceiveMessageResult: AWSDecodableShape {
        /// A list of messages.
        public let messages: [Message]?

        public init(messages: [Message]? = nil) {
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case messages = "Messages"
        }
    }

    public struct RemovePermissionRequest: AWSEncodableShape {
        /// The identification of the permission to remove. This is the label added using the  AddPermission action.
        public let label: String
        /// The URL of the Amazon SQS queue from which permissions are removed. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(label: String, queueUrl: String) {
            self.label = label
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case label = "Label"
            case queueUrl = "QueueUrl"
        }
    }

    public struct SendMessageBatchRequest: AWSEncodableShape {
        /// A list of  SendMessageBatchRequestEntry items.
        public let entries: [SendMessageBatchRequestEntry]
        /// The URL of the Amazon SQS queue to which batched messages are sent. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(entries: [SendMessageBatchRequestEntry], queueUrl: String) {
            self.entries = entries
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "Entries"
            case queueUrl = "QueueUrl"
        }
    }

    public struct SendMessageBatchRequestEntry: AWSEncodableShape {
        /// The length of time, in seconds, for which a specific message is delayed. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive DelaySeconds value become available for processing after the delay period is finished. If you don't specify a value, the default value for the queue is applied.   When you set FifoQueue, you can't set DelaySeconds per message. You can set this parameter only on a queue level.
        public let delaySeconds: Int?
        /// An identifier for a message in this batch used to communicate the result.  The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        public let id: String
        /// Each message attribute consists of a Name, Type, and Value. For more information, see Amazon SQS message attributes in the Amazon SQS Developer Guide.
        public let messageAttributes: [String: MessageAttributeValue]?
        /// The body of the message.
        public let messageBody: String
        /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of messages within a 5-minute minimum deduplication interval. If a message with a particular MessageDeduplicationId is sent successfully, subsequent messages with the same MessageDeduplicationId are accepted successfully but aren't delivered. For more information, see  Exactly-once processing in the Amazon SQS Developer Guide.   Every message must have a unique MessageDeduplicationId,   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).    If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.   If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.     When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.     The MessageDeduplicationId is available to the consumer of the message (this can be useful for troubleshooting delivery issues). If a message is sent successfully but the acknowledgement is lost and the message is resent with the same MessageDeduplicationId after the deduplication interval, Amazon SQS can't detect duplicate messages. Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.  The length of MessageDeduplicationId is 128 characters. MessageDeduplicationId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~). For best practices of using MessageDeduplicationId, see Using the MessageDeduplicationId Property in the Amazon SQS Developer Guide.
        public let messageDeduplicationId: String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use MessageGroupId values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.   You must associate a non-empty MessageGroupId with a message. If you don't provide a MessageGroupId, the action fails.    ReceiveMessage might return messages with multiple MessageGroupId values. For each MessageGroupId, the messages are sorted by time sent. The caller can't specify a MessageGroupId.   The length of MessageGroupId is 128 characters. Valid values: alphanumeric characters and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~). For best practices of using MessageGroupId, see Using the MessageGroupId Property in the Amazon SQS Developer Guide.   MessageGroupId is required for FIFO queues. You can't use it for Standard queues.
        public let messageGroupId: String?
        /// The message system attribute to send Each message system attribute consists of a Name, Type, and Value.    Currently, the only supported message system attribute is AWSTraceHeader. Its type must be String and its value must be a correctly formatted X-Ray trace header string.   The size of a message system attribute doesn't count towards the total size of a message.
        public let messageSystemAttributes: [MessageSystemAttributeNameForSends: MessageSystemAttributeValue]?

        public init(delaySeconds: Int? = nil, id: String, messageAttributes: [String: MessageAttributeValue]? = nil, messageBody: String, messageDeduplicationId: String? = nil, messageGroupId: String? = nil, messageSystemAttributes: [MessageSystemAttributeNameForSends: MessageSystemAttributeValue]? = nil) {
            self.delaySeconds = delaySeconds
            self.id = id
            self.messageAttributes = messageAttributes
            self.messageBody = messageBody
            self.messageDeduplicationId = messageDeduplicationId
            self.messageGroupId = messageGroupId
            self.messageSystemAttributes = messageSystemAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case delaySeconds = "DelaySeconds"
            case id = "Id"
            case messageAttributes = "MessageAttributes"
            case messageBody = "MessageBody"
            case messageDeduplicationId = "MessageDeduplicationId"
            case messageGroupId = "MessageGroupId"
            case messageSystemAttributes = "MessageSystemAttributes"
        }
    }

    public struct SendMessageBatchResult: AWSDecodableShape {
        /// A list of  BatchResultErrorEntry items with error details about each message that can't be enqueued.
        public let failed: [BatchResultErrorEntry]?
        /// A list of  SendMessageBatchResultEntry items.
        public let successful: [SendMessageBatchResultEntry]?

        public init(failed: [BatchResultErrorEntry]? = nil, successful: [SendMessageBatchResultEntry]? = nil) {
            self.failed = failed
            self.successful = successful
        }

        private enum CodingKeys: String, CodingKey {
            case failed = "Failed"
            case successful = "Successful"
        }
    }

    public struct SendMessageBatchResultEntry: AWSDecodableShape {
        /// An identifier for the message in this batch.
        public let id: String
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let md5OfMessageAttributes: String?
        /// An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let md5OfMessageBody: String
        /// An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let md5OfMessageSystemAttributes: String?
        /// An identifier for the message.
        public let messageId: String
        /// This parameter applies only to FIFO (first-in-first-out) queues. The large, non-consecutive number that Amazon SQS assigns to each message. The length of SequenceNumber is 128 bits. As SequenceNumber continues to increase for a particular MessageGroupId.
        public let sequenceNumber: String?

        public init(id: String, md5OfMessageAttributes: String? = nil, md5OfMessageBody: String, md5OfMessageSystemAttributes: String? = nil, messageId: String, sequenceNumber: String? = nil) {
            self.id = id
            self.md5OfMessageAttributes = md5OfMessageAttributes
            self.md5OfMessageBody = md5OfMessageBody
            self.md5OfMessageSystemAttributes = md5OfMessageSystemAttributes
            self.messageId = messageId
            self.sequenceNumber = sequenceNumber
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case md5OfMessageAttributes = "MD5OfMessageAttributes"
            case md5OfMessageBody = "MD5OfMessageBody"
            case md5OfMessageSystemAttributes = "MD5OfMessageSystemAttributes"
            case messageId = "MessageId"
            case sequenceNumber = "SequenceNumber"
        }
    }

    public struct SendMessageRequest: AWSEncodableShape {
        ///  The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive DelaySeconds value become available for processing after the delay period is finished. If you don't specify a value, the default value for the queue applies.   When you set FifoQueue, you can't set DelaySeconds per message. You can set this parameter only on a queue level.
        public let delaySeconds: Int?
        /// Each message attribute consists of a Name, Type, and Value. For more information, see Amazon SQS message attributes in the Amazon SQS Developer Guide.
        public let messageAttributes: [String: MessageAttributeValue]?
        /// The message to send. The minimum size is one character. The maximum size is 256 KiB.  A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:  #x9 | #xA | #xD | #x20 to #xD7FF | #xE000 to #xFFFD | #x10000 to #x10FFFF  Any characters not included in this list will be rejected. For more information, see the W3C specification for characters.
        public let messageBody: String
        /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages. If a message with a particular MessageDeduplicationId is sent successfully, any messages sent with the same MessageDeduplicationId are accepted successfully but aren't delivered during the 5-minute deduplication interval. For more information, see  Exactly-once processing in the Amazon SQS Developer Guide.   Every message must have a unique MessageDeduplicationId,   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).    If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.   If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.     When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.     The MessageDeduplicationId is available to the consumer of the message (this can be useful for troubleshooting delivery issues). If a message is sent successfully but the acknowledgement is lost and the message is resent with the same MessageDeduplicationId after the deduplication interval, Amazon SQS can't detect duplicate messages. Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.  The maximum length of MessageDeduplicationId is 128 characters. MessageDeduplicationId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~). For best practices of using MessageDeduplicationId, see Using the MessageDeduplicationId Property in the Amazon SQS Developer Guide.
        public let messageDeduplicationId: String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use MessageGroupId values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.   You must associate a non-empty MessageGroupId with a message. If you don't provide a MessageGroupId, the action fails.    ReceiveMessage might return messages with multiple MessageGroupId values. For each MessageGroupId, the messages are sorted by time sent. The caller can't specify a MessageGroupId.   The length of MessageGroupId is 128 characters. Valid values: alphanumeric characters and punctuation (!"#$%&'()*+,-./:;?@[\]^_`{|}~). For best practices of using MessageGroupId, see Using the MessageGroupId Property in the Amazon SQS Developer Guide.   MessageGroupId is required for FIFO queues. You can't use it for Standard queues.
        public let messageGroupId: String?
        /// The message system attribute to send. Each message system attribute consists of a Name, Type, and Value.    Currently, the only supported message system attribute is AWSTraceHeader. Its type must be String and its value must be a correctly formatted X-Ray trace header string.   The size of a message system attribute doesn't count towards the total size of a message.
        public let messageSystemAttributes: [MessageSystemAttributeNameForSends: MessageSystemAttributeValue]?
        /// The URL of the Amazon SQS queue to which a message is sent. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(delaySeconds: Int? = nil, messageAttributes: [String: MessageAttributeValue]? = nil, messageBody: String, messageDeduplicationId: String? = nil, messageGroupId: String? = nil, messageSystemAttributes: [MessageSystemAttributeNameForSends: MessageSystemAttributeValue]? = nil, queueUrl: String) {
            self.delaySeconds = delaySeconds
            self.messageAttributes = messageAttributes
            self.messageBody = messageBody
            self.messageDeduplicationId = messageDeduplicationId
            self.messageGroupId = messageGroupId
            self.messageSystemAttributes = messageSystemAttributes
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case delaySeconds = "DelaySeconds"
            case messageAttributes = "MessageAttributes"
            case messageBody = "MessageBody"
            case messageDeduplicationId = "MessageDeduplicationId"
            case messageGroupId = "MessageGroupId"
            case messageSystemAttributes = "MessageSystemAttributes"
            case queueUrl = "QueueUrl"
        }
    }

    public struct SendMessageResult: AWSDecodableShape {
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let md5OfMessageAttributes: String?
        /// An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let md5OfMessageBody: String?
        /// An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest.
        public let md5OfMessageSystemAttributes: String?
        /// An attribute containing the MessageId of the message sent to the queue. For more information, see Queue and Message Identifiers in the Amazon SQS Developer Guide.
        public let messageId: String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The large, non-consecutive number that Amazon SQS assigns to each message. The length of SequenceNumber is 128 bits. SequenceNumber continues to increase for a particular MessageGroupId.
        public let sequenceNumber: String?

        public init(md5OfMessageAttributes: String? = nil, md5OfMessageBody: String? = nil, md5OfMessageSystemAttributes: String? = nil, messageId: String? = nil, sequenceNumber: String? = nil) {
            self.md5OfMessageAttributes = md5OfMessageAttributes
            self.md5OfMessageBody = md5OfMessageBody
            self.md5OfMessageSystemAttributes = md5OfMessageSystemAttributes
            self.messageId = messageId
            self.sequenceNumber = sequenceNumber
        }

        private enum CodingKeys: String, CodingKey {
            case md5OfMessageAttributes = "MD5OfMessageAttributes"
            case md5OfMessageBody = "MD5OfMessageBody"
            case md5OfMessageSystemAttributes = "MD5OfMessageSystemAttributes"
            case messageId = "MessageId"
            case sequenceNumber = "SequenceNumber"
        }
    }

    public struct SetQueueAttributesRequest: AWSEncodableShape {
        /// A map of attributes to set. The following lists the names, descriptions, and values of the special request parameters that the SetQueueAttributes action uses:    DelaySeconds – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0.     MaximumMessageSize – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).     MessageRetentionPeriod – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days). When you change a queue's attributes, the change can take up to 60 seconds for most of the attributes to propagate throughout the Amazon SQS system. Changes made to the MessageRetentionPeriod attribute can take up to 15 minutes and will impact existing messages in the queue potentially causing them to be expired and deleted if the MessageRetentionPeriod is reduced below the age of existing messages.    Policy – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see Overview of Amazon Web Services IAM Policies in the Identity and Access Management User Guide.     ReceiveMessageWaitTimeSeconds – The length of time, in seconds, for which a  ReceiveMessage action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.     VisibilityTimeout – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see Visibility Timeout in the Amazon SQS Developer Guide.   The following attributes apply only to dead-letter queues:     RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. The parameters are as follows:    deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.    maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. Default: 10. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.      RedriveAllowPolicy – The string that includes the parameters for the permissions for the dead-letter queue redrive permission and which source queues can specify dead-letter queues as a JSON object. The parameters are as follows:    redrivePermission – The permission type that defines which source queues can specify the current queue as the dead-letter queue. Valid values are:    allowAll – (Default) Any source queues in this Amazon Web Services account in the same Region can specify this queue as the dead-letter queue.    denyAll – No source queues can specify this queue as the dead-letter queue.    byQueue – Only queues specified by the sourceQueueArns parameter can specify this queue as the dead-letter queue.      sourceQueueArns – The Amazon Resource Names (ARN)s of the source queues that can specify this queue as the dead-letter queue and redrive messages. You can specify this parameter only when the redrivePermission parameter is set to byQueue. You can specify up to 10 source queue ARNs. To allow more than 10 source queues to specify dead-letter queues, set the redrivePermission parameter to allowAll.      The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.  The following attributes apply only to server-side-encryption:    KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see Key Terms. While the alias of the AWS-managed CMK for Amazon SQS is always alias/aws/sqs, the alias of a custom CMK can, for example, be alias/MyAlias . For more examples, see KeyId in the Key Management Service API Reference.     KmsDataKeyReusePeriodSeconds – The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see How Does the Data Key Reuse Period Work?.     SqsManagedSseEnabled – Enables server-side queue encryption using SQS owned encryption keys. Only one server-side encryption option is supported per queue (for example, SSE-KMS or SSE-SQS).   The following attribute applies only to FIFO (first-in-first-out) queues:    ContentBasedDeduplication – Enables content-based deduplication. For more information, see Exactly-once processing in the Amazon SQS Developer Guide. Note the following:    Every message must have a unique MessageDeduplicationId.   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).    If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.   If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.     When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.      The following attributes apply only to high throughput for FIFO queues:    DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.    FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.   To enable high throughput for FIFO queues, do the following:   Set DeduplicationScope to messageGroup.   Set FifoThroughputLimit to perMessageGroupId.   If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see Quotas related to messages in the Amazon SQS Developer Guide.
        public let attributes: [QueueAttributeName: String]
        /// The URL of the Amazon SQS queue whose attributes are set. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(attributes: [QueueAttributeName: String], queueUrl: String) {
            self.attributes = attributes
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case queueUrl = "QueueUrl"
        }
    }

    public struct StartMessageMoveTaskRequest: AWSEncodableShape {
        /// The ARN of the queue that receives the moved messages. You can use this field to specify the destination queue where you would like to redrive messages. If this field is left blank, the messages will be redriven back to their respective original source queues.
        public let destinationArn: String?
        /// The number of messages to be moved per second (the message movement rate). You can use this field to define a fixed message movement rate. The maximum value for messages per second is 500. If this field is left blank, the system will optimize the rate based on the queue message backlog size, which may vary throughout the duration of the message movement task.
        public let maxNumberOfMessagesPerSecond: Int?
        /// The ARN of the queue that contains the messages to be moved to another queue. Currently, only ARNs of dead-letter queues (DLQs) whose sources are other Amazon SQS queues are accepted. DLQs whose sources are non-SQS queues, such as Lambda or Amazon SNS topics, are not currently supported.
        public let sourceArn: String

        public init(destinationArn: String? = nil, maxNumberOfMessagesPerSecond: Int? = nil, sourceArn: String) {
            self.destinationArn = destinationArn
            self.maxNumberOfMessagesPerSecond = maxNumberOfMessagesPerSecond
            self.sourceArn = sourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "DestinationArn"
            case maxNumberOfMessagesPerSecond = "MaxNumberOfMessagesPerSecond"
            case sourceArn = "SourceArn"
        }
    }

    public struct StartMessageMoveTaskResult: AWSDecodableShape {
        /// An identifier associated with a message movement task. You can use this identifier to cancel a specified message movement task using the CancelMessageMoveTask action.
        public let taskHandle: String?

        public init(taskHandle: String? = nil) {
            self.taskHandle = taskHandle
        }

        private enum CodingKeys: String, CodingKey {
            case taskHandle = "TaskHandle"
        }
    }

    public struct TagQueueRequest: AWSEncodableShape {
        /// The URL of the queue.
        public let queueUrl: String
        /// The list of tags to be added to the specified queue.
        public let tags: [String: String]

        public init(queueUrl: String, tags: [String: String]) {
            self.queueUrl = queueUrl
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
            case tags = "Tags"
        }
    }

    public struct UntagQueueRequest: AWSEncodableShape {
        /// The URL of the queue.
        public let queueUrl: String
        /// The list of tags to be removed from the specified queue.
        public let tagKeys: [String]

        public init(queueUrl: String, tagKeys: [String]) {
            self.queueUrl = queueUrl
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
            case tagKeys = "TagKeys"
        }
    }
}

// MARK: - Errors

/// Error enum for SQS
public struct SQSErrorType: AWSErrorType {
    enum Code: String {
        case batchEntryIdsNotDistinct = "BatchEntryIdsNotDistinct"
        case batchRequestTooLong = "BatchRequestTooLong"
        case emptyBatchRequest = "EmptyBatchRequest"
        case invalidAddress = "InvalidAddress"
        case invalidAttributeName = "InvalidAttributeName"
        case invalidAttributeValue = "InvalidAttributeValue"
        case invalidBatchEntryId = "InvalidBatchEntryId"
        case invalidIdFormat = "InvalidIdFormat"
        case invalidMessageContents = "InvalidMessageContents"
        case invalidSecurity = "InvalidSecurity"
        case kmsAccessDenied = "KmsAccessDenied"
        case kmsDisabled = "KmsDisabled"
        case kmsInvalidKeyUsage = "KmsInvalidKeyUsage"
        case kmsInvalidState = "KmsInvalidState"
        case kmsNotFound = "KmsNotFound"
        case kmsOptInRequired = "KmsOptInRequired"
        case kmsThrottled = "KmsThrottled"
        case messageNotInflight = "MessageNotInflight"
        case overLimit = "OverLimit"
        case purgeQueueInProgress = "PurgeQueueInProgress"
        case queueDeletedRecently = "QueueDeletedRecently"
        case queueDoesNotExist = "QueueDoesNotExist"
        case queueNameExists = "QueueNameExists"
        case receiptHandleIsInvalid = "ReceiptHandleIsInvalid"
        case requestThrottled = "RequestThrottled"
        case resourceNotFoundException = "ResourceNotFoundException"
        case tooManyEntriesInBatchRequest = "TooManyEntriesInBatchRequest"
        case unsupportedOperation = "UnsupportedOperation"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize SQS
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// Two or more batch entries in the request have the same Id.
    public static var batchEntryIdsNotDistinct: Self { .init(.batchEntryIdsNotDistinct) }
    /// The length of all the messages put together is more than the limit.
    public static var batchRequestTooLong: Self { .init(.batchRequestTooLong) }
    /// The batch request doesn't contain any entries.
    public static var emptyBatchRequest: Self { .init(.emptyBatchRequest) }
    /// The accountId is invalid.
    public static var invalidAddress: Self { .init(.invalidAddress) }
    /// The specified attribute doesn't exist.
    public static var invalidAttributeName: Self { .init(.invalidAttributeName) }
    /// A queue attribute value is invalid.
    public static var invalidAttributeValue: Self { .init(.invalidAttributeValue) }
    /// The Id of a batch entry in a batch request doesn't abide by the specification.
    public static var invalidBatchEntryId: Self { .init(.invalidBatchEntryId) }
    /// The specified receipt handle isn't valid for the current version.
    public static var invalidIdFormat: Self { .init(.invalidIdFormat) }
    /// The message contains characters outside the allowed set.
    public static var invalidMessageContents: Self { .init(.invalidMessageContents) }
    /// When the request to a queue is not HTTPS and SigV4.
    public static var invalidSecurity: Self { .init(.invalidSecurity) }
    /// The caller doesn't have the required KMS access.
    public static var kmsAccessDenied: Self { .init(.kmsAccessDenied) }
    /// The request was denied due to request throttling.
    public static var kmsDisabled: Self { .init(.kmsDisabled) }
    /// The request was rejected for one of the following reasons:   The KeyUsage value of the KMS key is incompatible with the API operation.   The encryption algorithm or signing algorithm specified for the operation is incompatible with the type of key material in the KMS key (KeySpec).
    public static var kmsInvalidKeyUsage: Self { .init(.kmsInvalidKeyUsage) }
    /// The request was rejected because the state of the specified resource is not valid for this request.
    public static var kmsInvalidState: Self { .init(.kmsInvalidState) }
    /// The request was rejected because the specified entity or resource could not be found.
    public static var kmsNotFound: Self { .init(.kmsNotFound) }
    /// The request was rejected because the specified key policy isn't syntactically or semantically correct.
    public static var kmsOptInRequired: Self { .init(.kmsOptInRequired) }
    /// Amazon Web Services KMS throttles requests for the following conditions.
    public static var kmsThrottled: Self { .init(.kmsThrottled) }
    /// The specified message isn't in flight.
    public static var messageNotInflight: Self { .init(.messageNotInflight) }
    /// The specified action violates a limit. For example, ReceiveMessage returns this error if the maximum number of in flight messages is reached and AddPermission returns this error if the maximum number of permissions for the queue is reached.
    public static var overLimit: Self { .init(.overLimit) }
    /// Indicates that the specified queue previously received a PurgeQueue request within the last 60 seconds (the time it can take to delete the messages in the queue).
    public static var purgeQueueInProgress: Self { .init(.purgeQueueInProgress) }
    /// You must wait 60 seconds after deleting a queue before you can create another queue with the same name.
    public static var queueDeletedRecently: Self { .init(.queueDeletedRecently) }
    /// The specified queue doesn't exist.
    public static var queueDoesNotExist: Self { .init(.queueDoesNotExist) }
    /// A queue with this name already exists. Amazon SQS returns this error only if the request includes attributes whose values differ from those of the existing queue.
    public static var queueNameExists: Self { .init(.queueNameExists) }
    /// The specified receipt handle isn't valid.
    public static var receiptHandleIsInvalid: Self { .init(.receiptHandleIsInvalid) }
    /// The request was denied due to request throttling.   The rate of requests per second exceeds the Amazon Web Services KMS request quota for an account and Region.    A burst or sustained high rate of requests to change the state of the same KMS key. This condition is often known as a "hot key."   Requests for operations on KMS keys in a Amazon Web Services CloudHSM key store might be throttled at a lower-than-expected rate when the Amazon Web Services CloudHSM cluster associated with the Amazon Web Services CloudHSM key store is processing numerous commands, including those unrelated to the Amazon Web Services CloudHSM key store.
    public static var requestThrottled: Self { .init(.requestThrottled) }
    /// One or more specified resources don't exist.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// The batch request contains more entries than permissible.
    public static var tooManyEntriesInBatchRequest: Self { .init(.tooManyEntriesInBatchRequest) }
    /// Error code 400. Unsupported operation.
    public static var unsupportedOperation: Self { .init(.unsupportedOperation) }
}

extension SQSErrorType: Equatable {
    public static func == (lhs: SQSErrorType, rhs: SQSErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension SQSErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
