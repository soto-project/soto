//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension SQS {
    // MARK: Enums

    public enum MessageSystemAttributeName: String, CustomStringConvertible, Codable {
        case approximatefirstreceivetimestamp = "ApproximateFirstReceiveTimestamp"
        case approximatereceivecount = "ApproximateReceiveCount"
        case awstraceheader = "AWSTraceHeader"
        case messagededuplicationid = "MessageDeduplicationId"
        case messagegroupid = "MessageGroupId"
        case senderid = "SenderId"
        case senttimestamp = "SentTimestamp"
        case sequencenumber = "SequenceNumber"
        public var description: String { return self.rawValue }
    }

    public enum MessageSystemAttributeNameForSends: String, CustomStringConvertible, Codable {
        case awstraceheader = "AWSTraceHeader"
        public var description: String { return self.rawValue }
    }

    public enum QueueAttributeName: String, CustomStringConvertible, Codable {
        case all = "All"
        case approximatenumberofmessages = "ApproximateNumberOfMessages"
        case approximatenumberofmessagesdelayed = "ApproximateNumberOfMessagesDelayed"
        case approximatenumberofmessagesnotvisible = "ApproximateNumberOfMessagesNotVisible"
        case contentbaseddeduplication = "ContentBasedDeduplication"
        case createdtimestamp = "CreatedTimestamp"
        case deduplicationscope = "DeduplicationScope"
        case delayseconds = "DelaySeconds"
        case fifoqueue = "FifoQueue"
        case fifothroughputlimit = "FifoThroughputLimit"
        case kmsdatakeyreuseperiodseconds = "KmsDataKeyReusePeriodSeconds"
        case kmsmasterkeyid = "KmsMasterKeyId"
        case lastmodifiedtimestamp = "LastModifiedTimestamp"
        case maximummessagesize = "MaximumMessageSize"
        case messageretentionperiod = "MessageRetentionPeriod"
        case policy = "Policy"
        case queuearn = "QueueArn"
        case receivemessagewaittimeseconds = "ReceiveMessageWaitTimeSeconds"
        case redrivepolicy = "RedrivePolicy"
        case visibilitytimeout = "VisibilityTimeout"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AddPermissionRequest: AWSEncodableShape {
        /// The action the client wants to allow for the specified principal. Valid values: the name of any action or *. For more information about these actions, see Overview of Managing Access Permissions to Your Amazon Simple Queue Service Resource in the Amazon SQS Developer Guide. Specifying SendMessage, DeleteMessage, or ChangeMessageVisibility for ActionName.n also grants permissions for the corresponding batch versions of those actions: SendMessageBatch, DeleteMessageBatch, and ChangeMessageVisibilityBatch.
        public let actions: [String]
        /// The account numbers of the principals who are to receive permission. For information about locating the account identification, see Your Amazon Web Services Identifiers in the Amazon SQS Developer Guide.
        public let aWSAccountIds: [String]
        /// The unique identification of the permission you're setting (for example, AliceSendMessage). Maximum 80 characters. Allowed characters include alphanumeric characters, hyphens (-), and underscores (_).
        public let label: String
        /// The URL of the Amazon SQS queue to which permissions are added. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(actions: [String], aWSAccountIds: [String], label: String, queueUrl: String) {
            self.actions = actions
            self.aWSAccountIds = aWSAccountIds
            self.label = label
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "ActionName"
            case aWSAccountIds = "AWSAccountId"
            case label = "Label"
            case queueUrl = "QueueUrl"
        }
    }

    public struct BatchResultErrorEntry: AWSDecodableShape {
        /// An error code representing why the action failed on this entry.
        public let code: String
        /// The Id of an entry in a batch request.
        public let id: String
        /// A message explaining why the action failed on this entry.
        public let message: String?
        /// Specifies whether the error happened due to the caller of the batch API action.
        public let senderFault: Bool

        public init(code: String, id: String, message: String? = nil, senderFault: Bool) {
            self.code = code
            self.id = id
            self.message = message
            self.senderFault = senderFault
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case id = "Id"
            case message = "Message"
            case senderFault = "SenderFault"
        }
    }

    public struct ChangeMessageVisibilityBatchRequest: AWSEncodableShape {
        /// A list of receipt handles of the messages for which the visibility timeout must be changed.
        public let entries: [ChangeMessageVisibilityBatchRequestEntry]
        /// The URL of the Amazon SQS queue whose messages' visibility is changed. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(entries: [ChangeMessageVisibilityBatchRequestEntry], queueUrl: String) {
            self.entries = entries
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "ChangeMessageVisibilityBatchRequestEntry"
            case queueUrl = "QueueUrl"
        }
    }

    public struct ChangeMessageVisibilityBatchRequestEntry: AWSEncodableShape {
        /// An identifier for this particular receipt handle used to communicate the result.  The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        public let id: String
        /// A receipt handle.
        public let receiptHandle: String
        /// The new value (in seconds) for the message's visibility timeout.
        public let visibilityTimeout: Int?

        public init(id: String, receiptHandle: String, visibilityTimeout: Int? = nil) {
            self.id = id
            self.receiptHandle = receiptHandle
            self.visibilityTimeout = visibilityTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case receiptHandle = "ReceiptHandle"
            case visibilityTimeout = "VisibilityTimeout"
        }
    }

    public struct ChangeMessageVisibilityBatchResult: AWSDecodableShape {
        /// A list of  BatchResultErrorEntry  items.
        public let failed: [BatchResultErrorEntry]
        /// A list of  ChangeMessageVisibilityBatchResultEntry  items.
        public let successful: [ChangeMessageVisibilityBatchResultEntry]

        public init(failed: [BatchResultErrorEntry], successful: [ChangeMessageVisibilityBatchResultEntry]) {
            self.failed = failed
            self.successful = successful
        }

        private enum CodingKeys: String, CodingKey {
            case failed = "BatchResultErrorEntry"
            case successful = "ChangeMessageVisibilityBatchResultEntry"
        }
    }

    public struct ChangeMessageVisibilityBatchResultEntry: AWSDecodableShape {
        /// Represents a message whose visibility timeout has been changed successfully.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct ChangeMessageVisibilityRequest: AWSEncodableShape {
        /// The URL of the Amazon SQS queue whose message's visibility is changed. Queue URLs and names are case-sensitive.
        public let queueUrl: String
        /// The receipt handle associated with the message whose visibility timeout is changed. This parameter is returned by the  ReceiveMessage  action.
        public let receiptHandle: String
        /// The new value for the message's visibility timeout (in seconds). Values range: 0 to 43200. Maximum: 12 hours.
        public let visibilityTimeout: Int

        public init(queueUrl: String, receiptHandle: String, visibilityTimeout: Int) {
            self.queueUrl = queueUrl
            self.receiptHandle = receiptHandle
            self.visibilityTimeout = visibilityTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
            case receiptHandle = "ReceiptHandle"
            case visibilityTimeout = "VisibilityTimeout"
        }
    }

    public struct CreateQueueRequest: AWSEncodableShape {
        public struct _AttributesEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Name"; public static let value = "Value" }
        public struct _tagsEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Key"; public static let value = "Value" }

        /// A map of attributes with their corresponding values. The following lists the names, descriptions, and values of the special request parameters that the CreateQueue action uses:    DelaySeconds – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 seconds (15 minutes). Default: 0.     MaximumMessageSize – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).     MessageRetentionPeriod – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer from 60 seconds (1 minute) to 1,209,600 seconds (14 days). Default: 345,600 (4 days).     Policy – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see Overview of Amazon Web Services IAM Policies in the Amazon IAM User Guide.     ReceiveMessageWaitTimeSeconds – The length of time, in seconds, for which a  ReceiveMessage  action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.     RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. For more information about the redrive policy and dead-letter queues, see Using Amazon SQS Dead-Letter Queues in the Amazon SQS Developer Guide.    deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.    maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.    The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.     VisibilityTimeout – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see Visibility Timeout in the Amazon SQS Developer Guide.   The following attributes apply only to server-side-encryption:    KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see Key Terms. While the alias of the Amazon Web Services managed CMK for Amazon SQS is always alias/aws/sqs, the alias of a custom CMK can, for example, be alias/MyAlias . For more examples, see KeyId in the Key Management Service API Reference.     KmsDataKeyReusePeriodSeconds – The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see How Does the Data Key Reuse Period Work?.    The following attributes apply only to FIFO (first-in-first-out) queues:    FifoQueue – Designates a queue as FIFO. Valid values are true and false. If you don't specify the FifoQueue attribute, Amazon SQS creates a standard queue. You can provide this attribute only during queue creation. You can't change it for an existing queue. When you set this attribute, you must also provide the MessageGroupId for your messages explicitly. For more information, see FIFO queue logic in the Amazon SQS Developer Guide.    ContentBasedDeduplication – Enables content-based deduplication. Valid values are true and false. For more information, see Exactly-once processing in the Amazon SQS Developer Guide. Note the following:    Every message must have a unique MessageDeduplicationId.   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).    If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.   If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.     When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.      The following attributes apply only to high throughput for FIFO queues:    DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.    FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.   To enable high throughput for FIFO queues, do the following:   Set DeduplicationScope to messageGroup.   Set FifoThroughputLimit to perMessageGroupId.   If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see Quotas related to messages in the Amazon SQS Developer Guide.
        @OptionalCustomCoding<DictionaryCoder<_AttributesEncoding, QueueAttributeName, String>>
        public var attributes: [QueueAttributeName: String]?
        /// The name of the new queue. The following limits apply to this name:   A queue name can have up to 80 characters.   Valid values: alphanumeric characters, hyphens (-), and underscores (_).   A FIFO queue name must end with the .fifo suffix.   Queue URLs and names are case-sensitive.
        public let queueName: String
        /// Add cost allocation tags to the specified Amazon SQS queue. For an overview, see Tagging Your Amazon SQS Queues in the Amazon SQS Developer Guide. When you use queue tags, keep the following guidelines in mind:   Adding more than 50 tags to a queue isn't recommended.   Tags don't have any semantic meaning. Amazon SQS interprets tags as character strings.   Tags are case-sensitive.   A new tag with a key identical to that of an existing tag overwrites the existing tag.   For a full list of tag restrictions, see Quotas related to queues in the Amazon SQS Developer Guide.  To be able to tag a queue on creation, you must have the sqs:CreateQueue and sqs:TagQueue permissions. Cross-account permissions don't apply to this action. For more information, see Grant cross-account permissions to a role and a user name in the Amazon SQS Developer Guide.
        @OptionalCustomCoding<DictionaryCoder<_tagsEncoding, String, String>>
        public var tags: [String: String]?

        public init(attributes: [QueueAttributeName: String]? = nil, queueName: String, tags: [String: String]? = nil) {
            self.attributes = attributes
            self.queueName = queueName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attribute"
            case queueName = "QueueName"
            case tags = "Tag"
        }
    }

    public struct CreateQueueResult: AWSDecodableShape {
        /// The URL of the created Amazon SQS queue.
        public let queueUrl: String?

        public init(queueUrl: String? = nil) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct DeleteMessageBatchRequest: AWSEncodableShape {
        /// A list of receipt handles for the messages to be deleted.
        public let entries: [DeleteMessageBatchRequestEntry]
        /// The URL of the Amazon SQS queue from which messages are deleted. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(entries: [DeleteMessageBatchRequestEntry], queueUrl: String) {
            self.entries = entries
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "DeleteMessageBatchRequestEntry"
            case queueUrl = "QueueUrl"
        }
    }

    public struct DeleteMessageBatchRequestEntry: AWSEncodableShape {
        /// An identifier for this particular receipt handle. This is used to communicate the result.  The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        public let id: String
        /// A receipt handle.
        public let receiptHandle: String

        public init(id: String, receiptHandle: String) {
            self.id = id
            self.receiptHandle = receiptHandle
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case receiptHandle = "ReceiptHandle"
        }
    }

    public struct DeleteMessageBatchResult: AWSDecodableShape {
        /// A list of  BatchResultErrorEntry  items.
        public let failed: [BatchResultErrorEntry]
        /// A list of  DeleteMessageBatchResultEntry  items.
        public let successful: [DeleteMessageBatchResultEntry]

        public init(failed: [BatchResultErrorEntry], successful: [DeleteMessageBatchResultEntry]) {
            self.failed = failed
            self.successful = successful
        }

        private enum CodingKeys: String, CodingKey {
            case failed = "BatchResultErrorEntry"
            case successful = "DeleteMessageBatchResultEntry"
        }
    }

    public struct DeleteMessageBatchResultEntry: AWSDecodableShape {
        /// Represents a successfully deleted message.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DeleteMessageRequest: AWSEncodableShape {
        /// The URL of the Amazon SQS queue from which messages are deleted. Queue URLs and names are case-sensitive.
        public let queueUrl: String
        /// The receipt handle associated with the message to delete.
        public let receiptHandle: String

        public init(queueUrl: String, receiptHandle: String) {
            self.queueUrl = queueUrl
            self.receiptHandle = receiptHandle
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
            case receiptHandle = "ReceiptHandle"
        }
    }

    public struct DeleteQueueRequest: AWSEncodableShape {
        /// The URL of the Amazon SQS queue to delete. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(queueUrl: String) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct GetQueueAttributesRequest: AWSEncodableShape {
        /// A list of attributes for which to retrieve information. The AttributeName.N parameter is optional, but if you don't specify values for this parameter, the request returns empty results.  In the future, new attributes might be added. If you write code that calls this action, we recommend that you structure your code so that it can handle new attributes gracefully.  The following attributes are supported:  The ApproximateNumberOfMessagesDelayed, ApproximateNumberOfMessagesNotVisible, and ApproximateNumberOfMessagesVisible metrics may not achieve consistency until at least 1 minute after the producers stop sending messages. This period is required for the queue metadata to reach eventual consistency.      All – Returns all values.     ApproximateNumberOfMessages – Returns the approximate number of messages available for retrieval from the queue.    ApproximateNumberOfMessagesDelayed – Returns the approximate number of messages in the queue that are delayed and not available for reading immediately. This can happen when the queue is configured as a delay queue or when a message has been sent with a delay parameter.    ApproximateNumberOfMessagesNotVisible – Returns the approximate number of messages that are in flight. Messages are considered to be in flight if they have been sent to a client but have not yet been deleted or have not yet reached the end of their visibility window.     CreatedTimestamp – Returns the time when the queue was created in seconds (epoch time).    DelaySeconds – Returns the default delay on the queue in seconds.    LastModifiedTimestamp – Returns the time when the queue was last changed in seconds (epoch time).    MaximumMessageSize – Returns the limit of how many bytes a message can contain before Amazon SQS rejects it.    MessageRetentionPeriod – Returns the length of time, in seconds, for which Amazon SQS retains a message.    Policy – Returns the policy of the queue.    QueueArn – Returns the Amazon resource name (ARN) of the queue.    ReceiveMessageWaitTimeSeconds – Returns the length of time, in seconds, for which the ReceiveMessage action waits for a message to arrive.     RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. For more information about the redrive policy and dead-letter queues, see Using Amazon SQS Dead-Letter Queues in the Amazon SQS Developer Guide.    deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.    maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.      VisibilityTimeout – Returns the visibility timeout for the queue. For more information about the visibility timeout, see Visibility Timeout in the Amazon SQS Developer Guide.    The following attributes apply only to server-side-encryption:    KmsMasterKeyId – Returns the ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see Key Terms.     KmsDataKeyReusePeriodSeconds – Returns the length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. For more information, see How Does the Data Key Reuse Period Work?.    The following attributes apply only to FIFO (first-in-first-out) queues:    FifoQueue – Returns information about whether the queue is FIFO. For more information, see FIFO queue logic in the Amazon SQS Developer Guide.  To determine whether a queue is FIFO, you can check whether QueueName ends with the .fifo suffix.     ContentBasedDeduplication – Returns whether content-based deduplication is enabled for the queue. For more information, see Exactly-once processing in the Amazon SQS Developer Guide.    The following attributes apply only to high throughput for FIFO queues:    DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.    FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.   To enable high throughput for FIFO queues, do the following:   Set DeduplicationScope to messageGroup.   Set FifoThroughputLimit to perMessageGroupId.   If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see Quotas related to messages in the Amazon SQS Developer Guide.
        public let attributeNames: [QueueAttributeName]?
        /// The URL of the Amazon SQS queue whose attribute information is retrieved. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(attributeNames: [QueueAttributeName]? = nil, queueUrl: String) {
            self.attributeNames = attributeNames
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "AttributeName"
            case queueUrl = "QueueUrl"
        }
    }

    public struct GetQueueAttributesResult: AWSDecodableShape {
        public struct _AttributesEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Name"; public static let value = "Value" }

        /// A map of attributes to their respective values.
        @OptionalCustomCoding<DictionaryCoder<_AttributesEncoding, QueueAttributeName, String>>
        public var attributes: [QueueAttributeName: String]?

        public init(attributes: [QueueAttributeName: String]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attribute"
        }
    }

    public struct GetQueueUrlRequest: AWSEncodableShape {
        /// The name of the queue whose URL must be fetched. Maximum 80 characters. Valid values: alphanumeric characters, hyphens (-), and underscores (_). Queue URLs and names are case-sensitive.
        public let queueName: String
        /// The account ID of the account that created the queue.
        public let queueOwnerAWSAccountId: String?

        public init(queueName: String, queueOwnerAWSAccountId: String? = nil) {
            self.queueName = queueName
            self.queueOwnerAWSAccountId = queueOwnerAWSAccountId
        }

        private enum CodingKeys: String, CodingKey {
            case queueName = "QueueName"
            case queueOwnerAWSAccountId = "QueueOwnerAWSAccountId"
        }
    }

    public struct GetQueueUrlResult: AWSDecodableShape {
        /// The URL of the queue.
        public let queueUrl: String?

        public init(queueUrl: String? = nil) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct ListDeadLetterSourceQueuesRequest: AWSEncodableShape {
        /// Maximum number of results to include in the response. Value range is 1 to 1000. You must set MaxResults to receive a value for NextToken in the response.
        public let maxResults: Int?
        /// Pagination token to request the next set of results.
        public let nextToken: String?
        /// The URL of a dead-letter queue. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, queueUrl: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case queueUrl = "QueueUrl"
        }
    }

    public struct ListDeadLetterSourceQueuesResult: AWSDecodableShape {
        /// Pagination token to include in the next request. Token value is null if there are no additional results to request, or if you did not set MaxResults in the request.
        public let nextToken: String?
        /// A list of source queue URLs that have the RedrivePolicy queue attribute configured with a dead-letter queue.
        public let queueUrls: [String]

        public init(nextToken: String? = nil, queueUrls: [String]) {
            self.nextToken = nextToken
            self.queueUrls = queueUrls
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case queueUrls = "QueueUrl"
        }
    }

    public struct ListQueueTagsRequest: AWSEncodableShape {
        /// The URL of the queue.
        public let queueUrl: String

        public init(queueUrl: String) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct ListQueueTagsResult: AWSDecodableShape {
        public struct _TagsEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Key"; public static let value = "Value" }

        /// The list of all tags added to the specified queue.
        @OptionalCustomCoding<DictionaryCoder<_TagsEncoding, String, String>>
        public var tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tag"
        }
    }

    public struct ListQueuesRequest: AWSEncodableShape {
        /// Maximum number of results to include in the response. Value range is 1 to 1000. You must set MaxResults to receive a value for NextToken in the response.
        public let maxResults: Int?
        /// Pagination token to request the next set of results.
        public let nextToken: String?
        /// A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned. Queue URLs and names are case-sensitive.
        public let queueNamePrefix: String?

        public init(maxResults: Int? = nil, nextToken: String? = nil, queueNamePrefix: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.queueNamePrefix = queueNamePrefix
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case queueNamePrefix = "QueueNamePrefix"
        }
    }

    public struct ListQueuesResult: AWSDecodableShape {
        /// Pagination token to include in the next request. Token value is null if there are no additional results to request, or if you did not set MaxResults in the request.
        public let nextToken: String?
        /// A list of queue URLs, up to 1,000 entries, or the value of MaxResults that you sent in the request.
        public let queueUrls: [String]?

        public init(nextToken: String? = nil, queueUrls: [String]? = nil) {
            self.nextToken = nextToken
            self.queueUrls = queueUrls
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case queueUrls = "QueueUrl"
        }
    }

    public struct Message: AWSDecodableShape {
        public struct _AttributesEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Name"; public static let value = "Value" }
        public struct _MessageAttributesEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Name"; public static let value = "Value" }

        /// A map of the attributes requested in  ReceiveMessage  to their respective values. Supported attributes:    ApproximateReceiveCount     ApproximateFirstReceiveTimestamp     MessageDeduplicationId     MessageGroupId     SenderId     SentTimestamp     SequenceNumber     ApproximateFirstReceiveTimestamp and SentTimestamp are each returned as an integer representing the epoch time in milliseconds.
        @OptionalCustomCoding<DictionaryCoder<_AttributesEncoding, MessageSystemAttributeName, String>>
        public var attributes: [MessageSystemAttributeName: String]?
        /// The message's contents (not URL-encoded).
        public let body: String?
        /// An MD5 digest of the non-URL-encoded message body string.
        public let mD5OfBody: String?
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let mD5OfMessageAttributes: String?
        /// Each message attribute consists of a Name, Type, and Value. For more information, see Amazon SQS message attributes in the Amazon SQS Developer Guide.
        @OptionalCustomCoding<DictionaryCoder<_MessageAttributesEncoding, String, MessageAttributeValue>>
        public var messageAttributes: [String: MessageAttributeValue]?
        /// A unique identifier for the message. A MessageIdis considered unique across all accounts for an extended period of time.
        public let messageId: String?
        /// An identifier associated with the act of receiving the message. A new receipt handle is returned every time you receive a message. When deleting a message, you provide the last received receipt handle to delete the message.
        public let receiptHandle: String?

        public init(attributes: [MessageSystemAttributeName: String]? = nil, body: String? = nil, mD5OfBody: String? = nil, mD5OfMessageAttributes: String? = nil, messageAttributes: [String: MessageAttributeValue]? = nil, messageId: String? = nil, receiptHandle: String? = nil) {
            self.attributes = attributes
            self.body = body
            self.mD5OfBody = mD5OfBody
            self.mD5OfMessageAttributes = mD5OfMessageAttributes
            self.messageAttributes = messageAttributes
            self.messageId = messageId
            self.receiptHandle = receiptHandle
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attribute"
            case body = "Body"
            case mD5OfBody = "MD5OfBody"
            case mD5OfMessageAttributes = "MD5OfMessageAttributes"
            case messageAttributes = "MessageAttribute"
            case messageId = "MessageId"
            case receiptHandle = "ReceiptHandle"
        }
    }

    public struct MessageAttributeValue: AWSEncodableShape & AWSDecodableShape {
        /// Not implemented. Reserved for future use.
        public let binaryListValues: [Data]?
        /// Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.
        public let binaryValue: Data?
        /// Amazon SQS supports the following logical data types: String, Number, and Binary. For the Number data type, you must use StringValue. You can also append custom labels. For more information, see Amazon SQS Message Attributes in the Amazon SQS Developer Guide.
        public let dataType: String
        /// Not implemented. Reserved for future use.
        public let stringListValues: [String]?
        /// Strings are Unicode with UTF-8 binary encoding. For a list of code values, see ASCII Printable Characters.
        public let stringValue: String?

        public init(binaryListValues: [Data]? = nil, binaryValue: Data? = nil, dataType: String, stringListValues: [String]? = nil, stringValue: String? = nil) {
            self.binaryListValues = binaryListValues
            self.binaryValue = binaryValue
            self.dataType = dataType
            self.stringListValues = stringListValues
            self.stringValue = stringValue
        }

        private enum CodingKeys: String, CodingKey {
            case binaryListValues = "BinaryListValue"
            case binaryValue = "BinaryValue"
            case dataType = "DataType"
            case stringListValues = "StringListValue"
            case stringValue = "StringValue"
        }
    }

    public struct MessageSystemAttributeValue: AWSEncodableShape {
        /// Not implemented. Reserved for future use.
        public let binaryListValues: [Data]?
        /// Binary type attributes can store any binary data, such as compressed data, encrypted data, or images.
        public let binaryValue: Data?
        /// Amazon SQS supports the following logical data types: String, Number, and Binary. For the Number data type, you must use StringValue. You can also append custom labels. For more information, see Amazon SQS Message Attributes in the Amazon SQS Developer Guide.
        public let dataType: String
        /// Not implemented. Reserved for future use.
        public let stringListValues: [String]?
        /// Strings are Unicode with UTF-8 binary encoding. For a list of code values, see ASCII Printable Characters.
        public let stringValue: String?

        public init(binaryListValues: [Data]? = nil, binaryValue: Data? = nil, dataType: String, stringListValues: [String]? = nil, stringValue: String? = nil) {
            self.binaryListValues = binaryListValues
            self.binaryValue = binaryValue
            self.dataType = dataType
            self.stringListValues = stringListValues
            self.stringValue = stringValue
        }

        private enum CodingKeys: String, CodingKey {
            case binaryListValues = "BinaryListValue"
            case binaryValue = "BinaryValue"
            case dataType = "DataType"
            case stringListValues = "StringListValue"
            case stringValue = "StringValue"
        }
    }

    public struct PurgeQueueRequest: AWSEncodableShape {
        /// The URL of the queue from which the PurgeQueue action deletes messages. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(queueUrl: String) {
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
        }
    }

    public struct ReceiveMessageRequest: AWSEncodableShape {
        /// A list of attributes that need to be returned along with each message. These attributes include:    All – Returns all values.    ApproximateFirstReceiveTimestamp – Returns the time the message was first received from the queue (epoch time in milliseconds).    ApproximateReceiveCount – Returns the number of times a message has been received across all queues but not deleted.    AWSTraceHeader – Returns the X-Ray trace header string.     SenderId    For an IAM user, returns the IAM user ID, for example ABCDEFGHI1JKLMNOPQ23R.   For an IAM role, returns the IAM role ID, for example ABCDE1F2GH3I4JK5LMNOP:i-a123b456.      SentTimestamp – Returns the time the message was sent to the queue (epoch time in milliseconds).    MessageDeduplicationId – Returns the value provided by the producer that calls the  SendMessage  action.    MessageGroupId – Returns the value provided by the producer that calls the  SendMessage  action. Messages with the same MessageGroupId are returned in sequence.    SequenceNumber – Returns the value provided by Amazon SQS.
        public let attributeNames: [QueueAttributeName]?
        /// The maximum number of messages to return. Amazon SQS never returns more messages than this value (however, fewer messages might be returned). Valid values: 1 to 10. Default: 1.
        public let maxNumberOfMessages: Int?
        /// The name of the message attribute, where N is the index.   The name can contain alphanumeric characters and the underscore (_), hyphen (-), and period (.).   The name is case-sensitive and must be unique among all attribute names for the message.   The name must not start with AWS-reserved prefixes such as AWS. or Amazon. (or any casing variants).   The name must not start or end with a period (.), and it should not have periods in succession (..).   The name can be up to 256 characters long.   When using ReceiveMessage, you can send a list of attribute names to receive, or you can return all of the attributes by specifying All or .* in your request. You can also use all message attributes starting with a prefix, for example bar.*.
        public let messageAttributeNames: [String]?
        /// The URL of the Amazon SQS queue from which messages are received. Queue URLs and names are case-sensitive.
        public let queueUrl: String
        /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of ReceiveMessage calls. If a networking issue occurs after a ReceiveMessage action, and instead of a response you receive a generic error, it is possible to retry the same action with an identical ReceiveRequestAttemptId to retrieve the same set of messages, even if their visibility timeout has not yet expired.   You can use ReceiveRequestAttemptId only for 5 minutes after a ReceiveMessage action.   When you set FifoQueue, a caller of the ReceiveMessage action can provide a ReceiveRequestAttemptId explicitly.   If a caller of the ReceiveMessage action doesn't provide a ReceiveRequestAttemptId, Amazon SQS generates a ReceiveRequestAttemptId.   It is possible to retry the ReceiveMessage action with the same ReceiveRequestAttemptId if none of the messages have been modified (deleted or had their visibility changes).   During a visibility timeout, subsequent calls with the same ReceiveRequestAttemptId return the same messages and receipt handles. If a retry occurs within the deduplication interval, it resets the visibility timeout. For more information, see Visibility Timeout in the Amazon SQS Developer Guide.  If a caller of the ReceiveMessage action still processes messages when the visibility timeout expires and messages become visible, another worker consuming from the same queue can receive the same messages and therefore process duplicates. Also, if a consumer whose message processing time is longer than the visibility timeout tries to delete the processed messages, the action fails with an error. To mitigate this effect, ensure that your application observes a safe threshold before the visibility timeout expires and extend the visibility timeout as necessary.    While messages with a particular MessageGroupId are invisible, no more messages belonging to the same MessageGroupId are returned until the visibility timeout expires. You can still receive messages with another MessageGroupId as long as it is also visible.   If a caller of ReceiveMessage can't track the ReceiveRequestAttemptId, no retries work until the original visibility timeout expires. As a result, delays might occur but the messages in the queue remain in a strict order.   The maximum length of ReceiveRequestAttemptId is 128 characters. ReceiveRequestAttemptId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~). For best practices of using ReceiveRequestAttemptId, see Using the ReceiveRequestAttemptId Request Parameter in the Amazon SQS Developer Guide.
        public let receiveRequestAttemptId: String?
        /// The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request.
        public let visibilityTimeout: Int?
        /// The duration (in seconds) for which the call waits for a message to arrive in the queue before returning. If a message is available, the call returns sooner than WaitTimeSeconds. If no messages are available and the wait time expires, the call returns successfully with an empty list of messages.  To avoid HTTP errors, ensure that the HTTP response timeout for ReceiveMessage requests is longer than the WaitTimeSeconds parameter. For example, with the Java SDK, you can set HTTP transport settings using the  NettyNioAsyncHttpClient for asynchronous clients, or the  ApacheHttpClient for synchronous clients.
        public let waitTimeSeconds: Int?

        public init(attributeNames: [QueueAttributeName]? = nil, maxNumberOfMessages: Int? = nil, messageAttributeNames: [String]? = nil, queueUrl: String, receiveRequestAttemptId: String? = nil, visibilityTimeout: Int? = nil, waitTimeSeconds: Int? = nil) {
            self.attributeNames = attributeNames
            self.maxNumberOfMessages = maxNumberOfMessages
            self.messageAttributeNames = messageAttributeNames
            self.queueUrl = queueUrl
            self.receiveRequestAttemptId = receiveRequestAttemptId
            self.visibilityTimeout = visibilityTimeout
            self.waitTimeSeconds = waitTimeSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "AttributeName"
            case maxNumberOfMessages = "MaxNumberOfMessages"
            case messageAttributeNames = "MessageAttributeName"
            case queueUrl = "QueueUrl"
            case receiveRequestAttemptId = "ReceiveRequestAttemptId"
            case visibilityTimeout = "VisibilityTimeout"
            case waitTimeSeconds = "WaitTimeSeconds"
        }
    }

    public struct ReceiveMessageResult: AWSDecodableShape {
        /// A list of messages.
        public let messages: [Message]?

        public init(messages: [Message]? = nil) {
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case messages = "Message"
        }
    }

    public struct RemovePermissionRequest: AWSEncodableShape {
        /// The identification of the permission to remove. This is the label added using the  AddPermission  action.
        public let label: String
        /// The URL of the Amazon SQS queue from which permissions are removed. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(label: String, queueUrl: String) {
            self.label = label
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case label = "Label"
            case queueUrl = "QueueUrl"
        }
    }

    public struct SendMessageBatchRequest: AWSEncodableShape {
        /// A list of  SendMessageBatchRequestEntry  items.
        public let entries: [SendMessageBatchRequestEntry]
        /// The URL of the Amazon SQS queue to which batched messages are sent. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(entries: [SendMessageBatchRequestEntry], queueUrl: String) {
            self.entries = entries
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "SendMessageBatchRequestEntry"
            case queueUrl = "QueueUrl"
        }
    }

    public struct SendMessageBatchRequestEntry: AWSEncodableShape {
        public struct _MessageAttributesEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Name"; public static let value = "Value" }
        public struct _MessageSystemAttributesEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Name"; public static let value = "Value" }

        /// The length of time, in seconds, for which a specific message is delayed. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive DelaySeconds value become available for processing after the delay period is finished. If you don't specify a value, the default value for the queue is applied.   When you set FifoQueue, you can't set DelaySeconds per message. You can set this parameter only on a queue level.
        public let delaySeconds: Int?
        /// An identifier for a message in this batch used to communicate the result.  The Ids of a batch request need to be unique within a request. This identifier can have up to 80 characters. The following characters are accepted: alphanumeric characters, hyphens(-), and underscores (_).
        public let id: String
        /// Each message attribute consists of a Name, Type, and Value. For more information, see Amazon SQS message attributes in the Amazon SQS Developer Guide.
        @OptionalCustomCoding<DictionaryCoder<_MessageAttributesEncoding, String, MessageAttributeValue>>
        public var messageAttributes: [String: MessageAttributeValue]?
        /// The body of the message.
        public let messageBody: String
        /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of messages within a 5-minute minimum deduplication interval. If a message with a particular MessageDeduplicationId is sent successfully, subsequent messages with the same MessageDeduplicationId are accepted successfully but aren't delivered. For more information, see  Exactly-once processing in the Amazon SQS Developer Guide.   Every message must have a unique MessageDeduplicationId,   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).    If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.   If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.     When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.     The MessageDeduplicationId is available to the consumer of the message (this can be useful for troubleshooting delivery issues). If a message is sent successfully but the acknowledgement is lost and the message is resent with the same MessageDeduplicationId after the deduplication interval, Amazon SQS can't detect duplicate messages. Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.  The length of MessageDeduplicationId is 128 characters. MessageDeduplicationId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~). For best practices of using MessageDeduplicationId, see Using the MessageDeduplicationId Property in the Amazon SQS Developer Guide.
        public let messageDeduplicationId: String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use MessageGroupId values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.   You must associate a non-empty MessageGroupId with a message. If you don't provide a MessageGroupId, the action fails.    ReceiveMessage might return messages with multiple MessageGroupId values. For each MessageGroupId, the messages are sorted by time sent. The caller can't specify a MessageGroupId.   The length of MessageGroupId is 128 characters. Valid values: alphanumeric characters and punctuation (!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~). For best practices of using MessageGroupId, see Using the MessageGroupId Property in the Amazon SQS Developer Guide.   MessageGroupId is required for FIFO queues. You can't use it for Standard queues.
        public let messageGroupId: String?
        /// The message system attribute to send Each message system attribute consists of a Name, Type, and Value.    Currently, the only supported message system attribute is AWSTraceHeader. Its type must be String and its value must be a correctly formatted X-Ray trace header string.   The size of a message system attribute doesn't count towards the total size of a message.
        @OptionalCustomCoding<DictionaryCoder<_MessageSystemAttributesEncoding, MessageSystemAttributeNameForSends, MessageSystemAttributeValue>>
        public var messageSystemAttributes: [MessageSystemAttributeNameForSends: MessageSystemAttributeValue]?

        public init(delaySeconds: Int? = nil, id: String, messageAttributes: [String: MessageAttributeValue]? = nil, messageBody: String, messageDeduplicationId: String? = nil, messageGroupId: String? = nil, messageSystemAttributes: [MessageSystemAttributeNameForSends: MessageSystemAttributeValue]? = nil) {
            self.delaySeconds = delaySeconds
            self.id = id
            self.messageAttributes = messageAttributes
            self.messageBody = messageBody
            self.messageDeduplicationId = messageDeduplicationId
            self.messageGroupId = messageGroupId
            self.messageSystemAttributes = messageSystemAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case delaySeconds = "DelaySeconds"
            case id = "Id"
            case messageAttributes = "MessageAttribute"
            case messageBody = "MessageBody"
            case messageDeduplicationId = "MessageDeduplicationId"
            case messageGroupId = "MessageGroupId"
            case messageSystemAttributes = "MessageSystemAttribute"
        }
    }

    public struct SendMessageBatchResult: AWSDecodableShape {
        /// A list of  BatchResultErrorEntry  items with error details about each message that can't be enqueued.
        public let failed: [BatchResultErrorEntry]
        /// A list of  SendMessageBatchResultEntry  items.
        public let successful: [SendMessageBatchResultEntry]

        public init(failed: [BatchResultErrorEntry], successful: [SendMessageBatchResultEntry]) {
            self.failed = failed
            self.successful = successful
        }

        private enum CodingKeys: String, CodingKey {
            case failed = "BatchResultErrorEntry"
            case successful = "SendMessageBatchResultEntry"
        }
    }

    public struct SendMessageBatchResultEntry: AWSDecodableShape {
        /// An identifier for the message in this batch.
        public let id: String
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let mD5OfMessageAttributes: String?
        /// An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let mD5OfMessageBody: String
        /// An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let mD5OfMessageSystemAttributes: String?
        /// An identifier for the message.
        public let messageId: String
        /// This parameter applies only to FIFO (first-in-first-out) queues. The large, non-consecutive number that Amazon SQS assigns to each message. The length of SequenceNumber is 128 bits. As SequenceNumber continues to increase for a particular MessageGroupId.
        public let sequenceNumber: String?

        public init(id: String, mD5OfMessageAttributes: String? = nil, mD5OfMessageBody: String, mD5OfMessageSystemAttributes: String? = nil, messageId: String, sequenceNumber: String? = nil) {
            self.id = id
            self.mD5OfMessageAttributes = mD5OfMessageAttributes
            self.mD5OfMessageBody = mD5OfMessageBody
            self.mD5OfMessageSystemAttributes = mD5OfMessageSystemAttributes
            self.messageId = messageId
            self.sequenceNumber = sequenceNumber
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case mD5OfMessageAttributes = "MD5OfMessageAttributes"
            case mD5OfMessageBody = "MD5OfMessageBody"
            case mD5OfMessageSystemAttributes = "MD5OfMessageSystemAttributes"
            case messageId = "MessageId"
            case sequenceNumber = "SequenceNumber"
        }
    }

    public struct SendMessageRequest: AWSEncodableShape {
        public struct _MessageAttributesEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Name"; public static let value = "Value" }
        public struct _MessageSystemAttributesEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Name"; public static let value = "Value" }

        ///  The length of time, in seconds, for which to delay a specific message. Valid values: 0 to 900. Maximum: 15 minutes. Messages with a positive DelaySeconds value become available for processing after the delay period is finished. If you don't specify a value, the default value for the queue applies.   When you set FifoQueue, you can't set DelaySeconds per message. You can set this parameter only on a queue level.
        public let delaySeconds: Int?
        /// Each message attribute consists of a Name, Type, and Value. For more information, see Amazon SQS message attributes in the Amazon SQS Developer Guide.
        @OptionalCustomCoding<DictionaryCoder<_MessageAttributesEncoding, String, MessageAttributeValue>>
        public var messageAttributes: [String: MessageAttributeValue]?
        /// The message to send. The minimum size is one character. The maximum size is 256 KB.  A message can include only XML, JSON, and unformatted text. The following Unicode characters are allowed:  #x9 | #xA | #xD | #x20 to #xD7FF | #xE000 to #xFFFD | #x10000 to #x10FFFF  Any characters not included in this list will be rejected. For more information, see the W3C specification for characters.
        public let messageBody: String
        /// This parameter applies only to FIFO (first-in-first-out) queues. The token used for deduplication of sent messages. If a message with a particular MessageDeduplicationId is sent successfully, any messages sent with the same MessageDeduplicationId are accepted successfully but aren't delivered during the 5-minute deduplication interval. For more information, see  Exactly-once processing in the Amazon SQS Developer Guide.   Every message must have a unique MessageDeduplicationId,   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).    If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.   If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.     When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.     The MessageDeduplicationId is available to the consumer of the message (this can be useful for troubleshooting delivery issues). If a message is sent successfully but the acknowledgement is lost and the message is resent with the same MessageDeduplicationId after the deduplication interval, Amazon SQS can't detect duplicate messages. Amazon SQS continues to keep track of the message deduplication ID even after the message is received and deleted.  The maximum length of MessageDeduplicationId is 128 characters. MessageDeduplicationId can contain alphanumeric characters (a-z, A-Z, 0-9) and punctuation (!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~). For best practices of using MessageDeduplicationId, see Using the MessageDeduplicationId Property in the Amazon SQS Developer Guide.
        public let messageDeduplicationId: String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The tag that specifies that a message belongs to a specific message group. Messages that belong to the same message group are processed in a FIFO manner (however, messages in different message groups might be processed out of order). To interleave multiple ordered streams within a single queue, use MessageGroupId values (for example, session data for multiple users). In this scenario, multiple consumers can process the queue, but the session data of each user is processed in a FIFO fashion.   You must associate a non-empty MessageGroupId with a message. If you don't provide a MessageGroupId, the action fails.    ReceiveMessage might return messages with multiple MessageGroupId values. For each MessageGroupId, the messages are sorted by time sent. The caller can't specify a MessageGroupId.   The length of MessageGroupId is 128 characters. Valid values: alphanumeric characters and punctuation (!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~). For best practices of using MessageGroupId, see Using the MessageGroupId Property in the Amazon SQS Developer Guide.   MessageGroupId is required for FIFO queues. You can't use it for Standard queues.
        public let messageGroupId: String?
        /// The message system attribute to send. Each message system attribute consists of a Name, Type, and Value.    Currently, the only supported message system attribute is AWSTraceHeader. Its type must be String and its value must be a correctly formatted X-Ray trace header string.   The size of a message system attribute doesn't count towards the total size of a message.
        @OptionalCustomCoding<DictionaryCoder<_MessageSystemAttributesEncoding, MessageSystemAttributeNameForSends, MessageSystemAttributeValue>>
        public var messageSystemAttributes: [MessageSystemAttributeNameForSends: MessageSystemAttributeValue]?
        /// The URL of the Amazon SQS queue to which a message is sent. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(delaySeconds: Int? = nil, messageAttributes: [String: MessageAttributeValue]? = nil, messageBody: String, messageDeduplicationId: String? = nil, messageGroupId: String? = nil, messageSystemAttributes: [MessageSystemAttributeNameForSends: MessageSystemAttributeValue]? = nil, queueUrl: String) {
            self.delaySeconds = delaySeconds
            self.messageAttributes = messageAttributes
            self.messageBody = messageBody
            self.messageDeduplicationId = messageDeduplicationId
            self.messageGroupId = messageGroupId
            self.messageSystemAttributes = messageSystemAttributes
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case delaySeconds = "DelaySeconds"
            case messageAttributes = "MessageAttribute"
            case messageBody = "MessageBody"
            case messageDeduplicationId = "MessageDeduplicationId"
            case messageGroupId = "MessageGroupId"
            case messageSystemAttributes = "MessageSystemAttribute"
            case queueUrl = "QueueUrl"
        }
    }

    public struct SendMessageResult: AWSDecodableShape {
        /// An MD5 digest of the non-URL-encoded message attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let mD5OfMessageAttributes: String?
        /// An MD5 digest of the non-URL-encoded message body string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest. For information about MD5, see RFC1321.
        public let mD5OfMessageBody: String?
        /// An MD5 digest of the non-URL-encoded message system attribute string. You can use this attribute to verify that Amazon SQS received the message correctly. Amazon SQS URL-decodes the message before creating the MD5 digest.
        public let mD5OfMessageSystemAttributes: String?
        /// An attribute containing the MessageId of the message sent to the queue. For more information, see Queue and Message Identifiers in the Amazon SQS Developer Guide.
        public let messageId: String?
        /// This parameter applies only to FIFO (first-in-first-out) queues. The large, non-consecutive number that Amazon SQS assigns to each message. The length of SequenceNumber is 128 bits. SequenceNumber continues to increase for a particular MessageGroupId.
        public let sequenceNumber: String?

        public init(mD5OfMessageAttributes: String? = nil, mD5OfMessageBody: String? = nil, mD5OfMessageSystemAttributes: String? = nil, messageId: String? = nil, sequenceNumber: String? = nil) {
            self.mD5OfMessageAttributes = mD5OfMessageAttributes
            self.mD5OfMessageBody = mD5OfMessageBody
            self.mD5OfMessageSystemAttributes = mD5OfMessageSystemAttributes
            self.messageId = messageId
            self.sequenceNumber = sequenceNumber
        }

        private enum CodingKeys: String, CodingKey {
            case mD5OfMessageAttributes = "MD5OfMessageAttributes"
            case mD5OfMessageBody = "MD5OfMessageBody"
            case mD5OfMessageSystemAttributes = "MD5OfMessageSystemAttributes"
            case messageId = "MessageId"
            case sequenceNumber = "SequenceNumber"
        }
    }

    public struct SetQueueAttributesRequest: AWSEncodableShape {
        public struct _AttributesEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Name"; public static let value = "Value" }

        /// A map of attributes to set. The following lists the names, descriptions, and values of the special request parameters that the SetQueueAttributes action uses:    DelaySeconds – The length of time, in seconds, for which the delivery of all messages in the queue is delayed. Valid values: An integer from 0 to 900 (15 minutes). Default: 0.     MaximumMessageSize – The limit of how many bytes a message can contain before Amazon SQS rejects it. Valid values: An integer from 1,024 bytes (1 KiB) up to 262,144 bytes (256 KiB). Default: 262,144 (256 KiB).     MessageRetentionPeriod – The length of time, in seconds, for which Amazon SQS retains a message. Valid values: An integer representing seconds, from 60 (1 minute) to 1,209,600 (14 days). Default: 345,600 (4 days).     Policy – The queue's policy. A valid Amazon Web Services policy. For more information about policy structure, see Overview of Amazon Web Services IAM Policies in the Identity and Access Management User Guide.     ReceiveMessageWaitTimeSeconds – The length of time, in seconds, for which a  ReceiveMessage  action waits for a message to arrive. Valid values: An integer from 0 to 20 (seconds). Default: 0.     RedrivePolicy – The string that includes the parameters for the dead-letter queue functionality of the source queue as a JSON object. For more information about the redrive policy and dead-letter queues, see Using Amazon SQS Dead-Letter Queues in the Amazon SQS Developer Guide.    deadLetterTargetArn – The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves messages after the value of maxReceiveCount is exceeded.    maxReceiveCount – The number of times a message is delivered to the source queue before being moved to the dead-letter queue. When the ReceiveCount for a message exceeds the maxReceiveCount for a queue, Amazon SQS moves the message to the dead-letter-queue.    The dead-letter queue of a FIFO queue must also be a FIFO queue. Similarly, the dead-letter queue of a standard queue must also be a standard queue.     VisibilityTimeout – The visibility timeout for the queue, in seconds. Valid values: An integer from 0 to 43,200 (12 hours). Default: 30. For more information about the visibility timeout, see Visibility Timeout in the Amazon SQS Developer Guide.   The following attributes apply only to server-side-encryption:    KmsMasterKeyId – The ID of an Amazon Web Services managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see Key Terms. While the alias of the AWS-managed CMK for Amazon SQS is always alias/aws/sqs, the alias of a custom CMK can, for example, be alias/MyAlias . For more examples, see KeyId in the Key Management Service API Reference.     KmsDataKeyReusePeriodSeconds – The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). Default: 300 (5 minutes). A shorter time period provides better security but results in more calls to KMS which might incur charges after Free Tier. For more information, see How Does the Data Key Reuse Period Work?.    The following attribute applies only to FIFO (first-in-first-out) queues:    ContentBasedDeduplication – Enables content-based deduplication. For more information, see Exactly-once processing in the Amazon SQS Developer Guide. Note the following:    Every message must have a unique MessageDeduplicationId.   You may provide a MessageDeduplicationId explicitly.   If you aren't able to provide a MessageDeduplicationId and you enable ContentBasedDeduplication for your queue, Amazon SQS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).    If you don't provide a MessageDeduplicationId and the queue doesn't have ContentBasedDeduplication set, the action fails with an error.   If the queue has ContentBasedDeduplication set, your MessageDeduplicationId overrides the generated one.     When ContentBasedDeduplication is in effect, messages with identical content sent within the deduplication interval are treated as duplicates and only one copy of the message is delivered.   If you send one message with ContentBasedDeduplication enabled and then another message with a MessageDeduplicationId that is the same as the one generated for the first MessageDeduplicationId, the two messages are treated as duplicates and only one copy of the message is delivered.      The following attributes apply only to high throughput for FIFO queues:    DeduplicationScope – Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue.    FifoThroughputLimit – Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue and perMessageGroupId. The perMessageGroupId value is allowed only when the value for DeduplicationScope is messageGroup.   To enable high throughput for FIFO queues, do the following:   Set DeduplicationScope to messageGroup.   Set FifoThroughputLimit to perMessageGroupId.   If you set these attributes to anything other than the values shown for enabling high throughput, normal throughput is in effect and deduplication occurs as specified. For information on throughput quotas, see Quotas related to messages in the Amazon SQS Developer Guide.
        @CustomCoding<DictionaryCoder<_AttributesEncoding, QueueAttributeName, String>>
        public var attributes: [QueueAttributeName: String]
        /// The URL of the Amazon SQS queue whose attributes are set. Queue URLs and names are case-sensitive.
        public let queueUrl: String

        public init(attributes: [QueueAttributeName: String], queueUrl: String) {
            self.attributes = attributes
            self.queueUrl = queueUrl
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attribute"
            case queueUrl = "QueueUrl"
        }
    }

    public struct TagQueueRequest: AWSEncodableShape {
        public struct _TagsEncoding: DictionaryCoderProperties { public static let entry: String? = nil; public static let key = "Key"; public static let value = "Value" }

        /// The URL of the queue.
        public let queueUrl: String
        /// The list of tags to be added to the specified queue.
        @CustomCoding<DictionaryCoder<_TagsEncoding, String, String>>
        public var tags: [String: String]

        public init(queueUrl: String, tags: [String: String]) {
            self.queueUrl = queueUrl
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
            case tags = "Tags"
        }
    }

    public struct UntagQueueRequest: AWSEncodableShape {
        /// The URL of the queue.
        public let queueUrl: String
        /// The list of tags to be removed from the specified queue.
        public let tagKeys: [String]

        public init(queueUrl: String, tagKeys: [String]) {
            self.queueUrl = queueUrl
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case queueUrl = "QueueUrl"
            case tagKeys = "TagKey"
        }
    }
}
