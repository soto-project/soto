//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension BackupStorage {
    // MARK: Enums

    public enum DataChecksumAlgorithm: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case sha256 = "SHA256"
        public var description: String { return self.rawValue }
    }

    public enum SummaryChecksumAlgorithm: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case summary = "SUMMARY"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct BackupObject: AWSDecodableShape {
        /// Number of chunks in object
        public let chunksCount: Int64?
        /// Metadata string associated with the Object
        public let metadataString: String?
        /// Object name
        public let name: String
        /// Object checksum
        public let objectChecksum: String
        /// Checksum algorithm
        public let objectChecksumAlgorithm: SummaryChecksumAlgorithm
        /// Object token
        public let objectToken: String

        public init(chunksCount: Int64? = nil, metadataString: String? = nil, name: String, objectChecksum: String, objectChecksumAlgorithm: SummaryChecksumAlgorithm, objectToken: String) {
            self.chunksCount = chunksCount
            self.metadataString = metadataString
            self.name = name
            self.objectChecksum = objectChecksum
            self.objectChecksumAlgorithm = objectChecksumAlgorithm
            self.objectToken = objectToken
        }

        private enum CodingKeys: String, CodingKey {
            case chunksCount = "ChunksCount"
            case metadataString = "MetadataString"
            case name = "Name"
            case objectChecksum = "ObjectChecksum"
            case objectChecksumAlgorithm = "ObjectChecksumAlgorithm"
            case objectToken = "ObjectToken"
        }
    }

    public struct Chunk: AWSDecodableShape {
        /// Chunk checksum
        public let checksum: String
        /// Checksum algorithm
        public let checksumAlgorithm: DataChecksumAlgorithm
        /// Chunk token
        public let chunkToken: String
        /// Chunk index
        public let index: Int64
        /// Chunk length
        public let length: Int64

        public init(checksum: String, checksumAlgorithm: DataChecksumAlgorithm, chunkToken: String, index: Int64, length: Int64) {
            self.checksum = checksum
            self.checksumAlgorithm = checksumAlgorithm
            self.chunkToken = chunkToken
            self.index = index
            self.length = length
        }

        private enum CodingKeys: String, CodingKey {
            case checksum = "Checksum"
            case checksumAlgorithm = "ChecksumAlgorithm"
            case chunkToken = "ChunkToken"
            case index = "Index"
            case length = "Length"
        }
    }

    public struct DeleteObjectInput: AWSEncodableShape {
        /// Backup job Id for the in-progress backup.
        public let backupJobId: String
        /// The name of the Object.
        public let objectName: String

        public init(backupJobId: String, objectName: String) {
            self.backupJobId = backupJobId
            self.objectName = objectName
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.backupJobId, key: "BackupJobId")
            request.encodePath(self.objectName, key: "ObjectName")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetChunkInput: AWSEncodableShape {
        /// Chunk token
        public let chunkToken: String
        /// Storage job id
        public let storageJobId: String

        public init(chunkToken: String, storageJobId: String) {
            self.chunkToken = chunkToken
            self.storageJobId = storageJobId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.chunkToken, key: "ChunkToken")
            request.encodePath(self.storageJobId, key: "StorageJobId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetChunkOutput: AWSDecodableShape {
        public static let _options: AWSShapeOptions = [.rawPayload]
        /// Data checksum
        public let checksum: String
        /// Checksum algorithm
        public let checksumAlgorithm: DataChecksumAlgorithm
        /// Chunk data
        public let data: AWSHTTPBody
        /// Data length
        public let length: Int64

        public init(checksum: String, checksumAlgorithm: DataChecksumAlgorithm, data: AWSHTTPBody, length: Int64) {
            self.checksum = checksum
            self.checksumAlgorithm = checksumAlgorithm
            self.data = data
            self.length = length
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.checksum = try response.decodeHeader(String.self, key: "x-amz-checksum")
            self.checksumAlgorithm = try response.decodeHeader(DataChecksumAlgorithm.self, key: "x-amz-checksum-algorithm")
            self.data = try container.decode(AWSHTTPBody.self)
            self.length = try response.decodeHeader(Int64.self, key: "x-amz-data-length")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetObjectMetadataInput: AWSEncodableShape {
        /// Object token.
        public let objectToken: String
        /// Backup job id for the in-progress backup.
        public let storageJobId: String

        public init(objectToken: String, storageJobId: String) {
            self.objectToken = objectToken
            self.storageJobId = storageJobId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.objectToken, key: "ObjectToken")
            request.encodePath(self.storageJobId, key: "StorageJobId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetObjectMetadataOutput: AWSDecodableShape {
        public static let _options: AWSShapeOptions = [.rawPayload]
        /// Metadata blob.
        public let metadataBlob: AWSHTTPBody
        /// MetadataBlob checksum.
        public let metadataBlobChecksum: String?
        /// Checksum algorithm.
        public let metadataBlobChecksumAlgorithm: DataChecksumAlgorithm?
        /// The size of MetadataBlob.
        public let metadataBlobLength: Int64?
        /// Metadata string.
        public let metadataString: String?

        public init(metadataBlob: AWSHTTPBody, metadataBlobChecksum: String? = nil, metadataBlobChecksumAlgorithm: DataChecksumAlgorithm? = nil, metadataBlobLength: Int64? = nil, metadataString: String? = nil) {
            self.metadataBlob = metadataBlob
            self.metadataBlobChecksum = metadataBlobChecksum
            self.metadataBlobChecksumAlgorithm = metadataBlobChecksumAlgorithm
            self.metadataBlobLength = metadataBlobLength
            self.metadataString = metadataString
        }

        public init(from decoder: Decoder) throws {
            let response = decoder.userInfo[.awsResponse]! as! ResponseDecodingContainer
            let container = try decoder.singleValueContainer()
            self.metadataBlob = try container.decode(AWSHTTPBody.self)
            self.metadataBlobChecksum = try response.decodeHeaderIfPresent(String.self, key: "x-amz-checksum")
            self.metadataBlobChecksumAlgorithm = try response.decodeHeaderIfPresent(DataChecksumAlgorithm.self, key: "x-amz-checksum-algorithm")
            self.metadataBlobLength = try response.decodeHeaderIfPresent(Int64.self, key: "x-amz-data-length")
            self.metadataString = try response.decodeHeaderIfPresent(String.self, key: "x-amz-metadata-string")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListChunksInput: AWSEncodableShape {
        /// Maximum number of chunks
        public let maxResults: Int?
        /// Pagination token
        public let nextToken: String?
        /// Object token
        public let objectToken: String
        /// Storage job id
        public let storageJobId: String

        public init(maxResults: Int? = nil, nextToken: String? = nil, objectToken: String, storageJobId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.objectToken = objectToken
            self.storageJobId = storageJobId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.maxResults, key: "max-results")
            request.encodeQuery(self.nextToken, key: "next-token")
            request.encodePath(self.objectToken, key: "ObjectToken")
            request.encodePath(self.storageJobId, key: "StorageJobId")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListChunksOutput: AWSDecodableShape {
        /// List of chunks
        public let chunkList: [Chunk]
        /// Pagination token
        public let nextToken: String?

        public init(chunkList: [Chunk], nextToken: String? = nil) {
            self.chunkList = chunkList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case chunkList = "ChunkList"
            case nextToken = "NextToken"
        }
    }

    public struct ListObjectsInput: AWSEncodableShape {
        /// (Optional) Created after filter
        public let createdAfter: Date?
        /// (Optional) Created before filter
        public let createdBefore: Date?
        /// Maximum objects count
        public let maxResults: Int?
        /// Pagination token
        public let nextToken: String?
        /// Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL
        public let startingObjectName: String?
        /// Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL
        public let startingObjectPrefix: String?
        /// Storage job id
        public let storageJobId: String

        public init(createdAfter: Date? = nil, createdBefore: Date? = nil, maxResults: Int? = nil, nextToken: String? = nil, startingObjectName: String? = nil, startingObjectPrefix: String? = nil, storageJobId: String) {
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startingObjectName = startingObjectName
            self.startingObjectPrefix = startingObjectPrefix
            self.storageJobId = storageJobId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            _ = encoder.container(keyedBy: CodingKeys.self)
            request.encodeQuery(self.createdAfter, key: "created-after")
            request.encodeQuery(self.createdBefore, key: "created-before")
            request.encodeQuery(self.maxResults, key: "max-results")
            request.encodeQuery(self.nextToken, key: "next-token")
            request.encodeQuery(self.startingObjectName, key: "starting-object-name")
            request.encodeQuery(self.startingObjectPrefix, key: "starting-object-prefix")
            request.encodePath(self.storageJobId, key: "StorageJobId")
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct ListObjectsOutput: AWSDecodableShape {
        /// Pagination token
        public let nextToken: String?
        /// Object list
        public let objectList: [BackupObject]

        public init(nextToken: String? = nil, objectList: [BackupObject]) {
            self.nextToken = nextToken
            self.objectList = objectList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectList = "ObjectList"
        }
    }

    public struct NotifyObjectCompleteInput: AWSEncodableShape {
        public static let _options: AWSShapeOptions = [.allowStreaming, .allowChunkedStreaming]
        /// Backup job Id for the in-progress backup
        public let backupJobId: String
        /// Optional metadata associated with an Object. Maximum length is 4MB.
        public let metadataBlob: AWSHTTPBody?
        /// Checksum of MetadataBlob.
        public let metadataBlobChecksum: String?
        /// Checksum algorithm.
        public let metadataBlobChecksumAlgorithm: DataChecksumAlgorithm?
        /// The size of MetadataBlob.
        public let metadataBlobLength: Int64?
        /// Optional metadata associated with an Object. Maximum string length is 256 bytes.
        public let metadataString: String?
        /// Object checksum
        public let objectChecksum: String
        /// Checksum algorithm
        public let objectChecksumAlgorithm: SummaryChecksumAlgorithm
        /// Upload Id for the in-progress upload
        public let uploadId: String

        public init(backupJobId: String, metadataBlob: AWSHTTPBody? = nil, metadataBlobChecksum: String? = nil, metadataBlobChecksumAlgorithm: DataChecksumAlgorithm? = nil, metadataBlobLength: Int64? = nil, metadataString: String? = nil, objectChecksum: String, objectChecksumAlgorithm: SummaryChecksumAlgorithm, uploadId: String) {
            self.backupJobId = backupJobId
            self.metadataBlob = metadataBlob
            self.metadataBlobChecksum = metadataBlobChecksum
            self.metadataBlobChecksumAlgorithm = metadataBlobChecksumAlgorithm
            self.metadataBlobLength = metadataBlobLength
            self.metadataString = metadataString
            self.objectChecksum = objectChecksum
            self.objectChecksumAlgorithm = objectChecksumAlgorithm
            self.uploadId = uploadId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.backupJobId, key: "BackupJobId")
            try container.encode(self.metadataBlob)
            request.encodeQuery(self.metadataBlobChecksum, key: "metadata-checksum")
            request.encodeQuery(self.metadataBlobChecksumAlgorithm, key: "metadata-checksum-algorithm")
            request.encodeQuery(self.metadataBlobLength, key: "metadata-blob-length")
            request.encodeQuery(self.metadataString, key: "metadata-string")
            request.encodeQuery(self.objectChecksum, key: "checksum")
            request.encodeQuery(self.objectChecksumAlgorithm, key: "checksum-algorithm")
            request.encodePath(self.uploadId, key: "UploadId")
        }

        public func validate(name: String) throws {
            try self.validate(self.metadataString, name: "metadataString", parent: name, pattern: "^.{1,256}$")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct NotifyObjectCompleteOutput: AWSDecodableShape {
        /// Object checksum
        public let objectChecksum: String
        /// Checksum algorithm
        public let objectChecksumAlgorithm: SummaryChecksumAlgorithm

        public init(objectChecksum: String, objectChecksumAlgorithm: SummaryChecksumAlgorithm) {
            self.objectChecksum = objectChecksum
            self.objectChecksumAlgorithm = objectChecksumAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case objectChecksum = "ObjectChecksum"
            case objectChecksumAlgorithm = "ObjectChecksumAlgorithm"
        }
    }

    public struct PutChunkInput: AWSEncodableShape {
        public static let _options: AWSShapeOptions = [.allowStreaming, .allowChunkedStreaming]
        /// Backup job Id for the in-progress backup.
        public let backupJobId: String
        /// Data checksum
        public let checksum: String
        /// Checksum algorithm
        public let checksumAlgorithm: DataChecksumAlgorithm
        /// Describes this chunk's position relative to the other chunks
        public let chunkIndex: Int64
        /// Data to be uploaded
        public let data: AWSHTTPBody
        /// Data length
        public let length: Int64
        /// Upload Id for the in-progress upload.
        public let uploadId: String

        public init(backupJobId: String, checksum: String, checksumAlgorithm: DataChecksumAlgorithm, chunkIndex: Int64, data: AWSHTTPBody, length: Int64 = 0, uploadId: String) {
            self.backupJobId = backupJobId
            self.checksum = checksum
            self.checksumAlgorithm = checksumAlgorithm
            self.chunkIndex = chunkIndex
            self.data = data
            self.length = length
            self.uploadId = uploadId
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.backupJobId, key: "BackupJobId")
            request.encodeQuery(self.checksum, key: "checksum")
            request.encodeQuery(self.checksumAlgorithm, key: "checksum-algorithm")
            request.encodePath(self.chunkIndex, key: "ChunkIndex")
            try container.encode(self.data)
            request.encodeQuery(self.length, key: "length")
            request.encodePath(self.uploadId, key: "UploadId")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct PutChunkOutput: AWSDecodableShape {
        /// Chunk checksum
        public let chunkChecksum: String
        /// Checksum algorithm
        public let chunkChecksumAlgorithm: DataChecksumAlgorithm

        public init(chunkChecksum: String, chunkChecksumAlgorithm: DataChecksumAlgorithm) {
            self.chunkChecksum = chunkChecksum
            self.chunkChecksumAlgorithm = chunkChecksumAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case chunkChecksum = "ChunkChecksum"
            case chunkChecksumAlgorithm = "ChunkChecksumAlgorithm"
        }
    }

    public struct PutObjectInput: AWSEncodableShape {
        public static let _options: AWSShapeOptions = [.allowStreaming, .allowChunkedStreaming]
        /// Backup job Id for the in-progress backup.
        public let backupJobId: String
        /// Inline chunk data to be uploaded.
        public let inlineChunk: AWSHTTPBody?
        /// Inline chunk checksum
        public let inlineChunkChecksum: String?
        /// Inline chunk checksum algorithm
        public let inlineChunkChecksumAlgorithm: String?
        /// Length of the inline chunk data.
        public let inlineChunkLength: Int64?
        /// Store user defined metadata like backup checksum, disk ids, restore metadata etc.
        public let metadataString: String?
        /// object checksum
        public let objectChecksum: String?
        /// object checksum algorithm
        public let objectChecksumAlgorithm: SummaryChecksumAlgorithm?
        /// The name of the Object to be uploaded.
        public let objectName: String
        /// Throw an exception if Object name is already exist.
        public let throwOnDuplicate: Bool?

        public init(backupJobId: String, inlineChunk: AWSHTTPBody? = nil, inlineChunkChecksum: String? = nil, inlineChunkChecksumAlgorithm: String? = nil, inlineChunkLength: Int64? = nil, metadataString: String? = nil, objectChecksum: String? = nil, objectChecksumAlgorithm: SummaryChecksumAlgorithm? = nil, objectName: String, throwOnDuplicate: Bool? = nil) {
            self.backupJobId = backupJobId
            self.inlineChunk = inlineChunk
            self.inlineChunkChecksum = inlineChunkChecksum
            self.inlineChunkChecksumAlgorithm = inlineChunkChecksumAlgorithm
            self.inlineChunkLength = inlineChunkLength
            self.metadataString = metadataString
            self.objectChecksum = objectChecksum
            self.objectChecksumAlgorithm = objectChecksumAlgorithm
            self.objectName = objectName
            self.throwOnDuplicate = throwOnDuplicate
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.singleValueContainer()
            request.encodePath(self.backupJobId, key: "BackupJobId")
            try container.encode(self.inlineChunk)
            request.encodeQuery(self.inlineChunkChecksum, key: "checksum")
            request.encodeQuery(self.inlineChunkChecksumAlgorithm, key: "checksum-algorithm")
            request.encodeQuery(self.inlineChunkLength, key: "length")
            request.encodeQuery(self.metadataString, key: "metadata-string")
            request.encodeQuery(self.objectChecksum, key: "object-checksum")
            request.encodeQuery(self.objectChecksumAlgorithm, key: "object-checksum-algorithm")
            request.encodePath(self.objectName, key: "ObjectName")
            request.encodeQuery(self.throwOnDuplicate, key: "throwOnDuplicate")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct PutObjectOutput: AWSDecodableShape {
        /// Inline chunk checksum
        public let inlineChunkChecksum: String
        /// Inline chunk checksum algorithm
        public let inlineChunkChecksumAlgorithm: DataChecksumAlgorithm
        /// object checksum
        public let objectChecksum: String
        /// object checksum algorithm
        public let objectChecksumAlgorithm: SummaryChecksumAlgorithm

        public init(inlineChunkChecksum: String, inlineChunkChecksumAlgorithm: DataChecksumAlgorithm, objectChecksum: String, objectChecksumAlgorithm: SummaryChecksumAlgorithm) {
            self.inlineChunkChecksum = inlineChunkChecksum
            self.inlineChunkChecksumAlgorithm = inlineChunkChecksumAlgorithm
            self.objectChecksum = objectChecksum
            self.objectChecksumAlgorithm = objectChecksumAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case inlineChunkChecksum = "InlineChunkChecksum"
            case inlineChunkChecksumAlgorithm = "InlineChunkChecksumAlgorithm"
            case objectChecksum = "ObjectChecksum"
            case objectChecksumAlgorithm = "ObjectChecksumAlgorithm"
        }
    }

    public struct StartObjectInput: AWSEncodableShape {
        /// Backup job Id for the in-progress backup
        public let backupJobId: String
        /// Name for the object.
        public let objectName: String
        /// Throw an exception if Object name is already exist.
        public let throwOnDuplicate: Bool?

        public init(backupJobId: String, objectName: String, throwOnDuplicate: Bool? = nil) {
            self.backupJobId = backupJobId
            self.objectName = objectName
            self.throwOnDuplicate = throwOnDuplicate
        }

        public func encode(to encoder: Encoder) throws {
            let request = encoder.userInfo[.awsRequest]! as! RequestEncodingContainer
            var container = encoder.container(keyedBy: CodingKeys.self)
            request.encodePath(self.backupJobId, key: "BackupJobId")
            request.encodePath(self.objectName, key: "ObjectName")
            try container.encodeIfPresent(self.throwOnDuplicate, forKey: .throwOnDuplicate)
        }

        private enum CodingKeys: String, CodingKey {
            case throwOnDuplicate = "ThrowOnDuplicate"
        }
    }

    public struct StartObjectOutput: AWSDecodableShape {
        /// Upload Id for a given upload.
        public let uploadId: String

        public init(uploadId: String) {
            self.uploadId = uploadId
        }

        private enum CodingKeys: String, CodingKey {
            case uploadId = "UploadId"
        }
    }
}

// MARK: - Errors

/// Error enum for BackupStorage
public struct BackupStorageErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case dataAlreadyExistsException = "DataAlreadyExistsException"
        case illegalArgumentException = "IllegalArgumentException"
        case kmsInvalidKeyUsageException = "KMSInvalidKeyUsageException"
        case notReadableInputStreamException = "NotReadableInputStreamException"
        case resourceNotFoundException = "ResourceNotFoundException"
        case retryableException = "RetryableException"
        case serviceInternalException = "ServiceInternalException"
        case serviceUnavailableException = "ServiceUnavailableException"
        case throttlingException = "ThrottlingException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize BackupStorage
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// Non-retryable exception. Attempted to create already existing object or chunk. This message contains a checksum of already presented data.
    public static var dataAlreadyExistsException: Self { .init(.dataAlreadyExistsException) }
    /// Non-retryable exception, indicates client error (wrong argument passed to API). See exception message for details.
    public static var illegalArgumentException: Self { .init(.illegalArgumentException) }
    /// Non-retryable exception. Indicates the KMS key usage is incorrect. See exception message for details.
    public static var kmsInvalidKeyUsageException: Self { .init(.kmsInvalidKeyUsageException) }
    /// Retryalble exception. Indicated issues while reading an input stream due to the networking issues or connection drop on the client side.
    public static var notReadableInputStreamException: Self { .init(.notReadableInputStreamException) }
    /// Non-retryable exception. Attempted to make an operation on non-existing or expired resource.
    public static var resourceNotFoundException: Self { .init(.resourceNotFoundException) }
    /// Retryable exception. In general indicates internal failure that can be fixed by retry.
    public static var retryableException: Self { .init(.retryableException) }
    /// Deprecated. To be removed from the model.
    public static var serviceInternalException: Self { .init(.serviceInternalException) }
    /// Retryable exception, indicates internal server error.
    public static var serviceUnavailableException: Self { .init(.serviceUnavailableException) }
    /// Increased rate over throttling limits. Can be retried with exponential backoff.
    public static var throttlingException: Self { .init(.throttlingException) }
}

extension BackupStorageErrorType: Equatable {
    public static func == (lhs: BackupStorageErrorType, rhs: BackupStorageErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension BackupStorageErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
