//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS ControlCatalog service.
///
/// Welcome to the Amazon Web Services Control Catalog API reference. This guide is for  developers who need detailed information about how to programmatically identify and filter  the common controls and related metadata that are available to Amazon Web Services customers. This API reference provides  descriptions, syntax, and usage examples for each of the actions and data types that are  supported by Amazon Web Services Control Catalog.  Use the following links to get started with the Amazon Web Services Control Catalog API:    Actions: An alphabetical list of all Control Catalog API operations.    Data types: An alphabetical list of all Control Catalog data types.    Common parameters: Parameters that all operations can use.    Common errors: Client and server errors that all operations can return.
public struct ControlCatalog: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ControlCatalog client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "ControlCatalog",
            serviceIdentifier: "controlcatalog",
            serviceProtocol: .restjson,
            apiVersion: "2018-05-10",
            endpoint: endpoint,
            errorType: ControlCatalogErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Returns a paginated list of common controls from the Amazon Web Services Control Catalog. You can apply an optional filter to see common controls that have a specific objective. If you don’t provide a filter, the operation returns all common controls.
    @Sendable
    public func listCommonControls(_ input: ListCommonControlsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListCommonControlsResponse {
        return try await self.client.execute(
            operation: "ListCommonControls", 
            path: "/common-controls", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a paginated list of domains from the Amazon Web Services Control Catalog.
    @Sendable
    public func listDomains(_ input: ListDomainsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDomainsResponse {
        return try await self.client.execute(
            operation: "ListDomains", 
            path: "/domains", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a paginated list of objectives from the Amazon Web Services Control Catalog. You can apply an optional filter to see the objectives that belong to a specific domain. If you don’t provide a filter, the operation returns all objectives.
    @Sendable
    public func listObjectives(_ input: ListObjectivesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListObjectivesResponse {
        return try await self.client.execute(
            operation: "ListObjectives", 
            path: "/objectives", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension ControlCatalog {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ControlCatalog, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ControlCatalog {
    /// Returns a paginated list of common controls from the Amazon Web Services Control Catalog. You can apply an optional filter to see common controls that have a specific objective. If you don’t provide a filter, the operation returns all common controls.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listCommonControlsPaginator(
        _ input: ListCommonControlsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListCommonControlsRequest, ListCommonControlsResponse> {
        return .init(
            input: input,
            command: self.listCommonControls,
            inputKey: \ListCommonControlsRequest.nextToken,
            outputKey: \ListCommonControlsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a paginated list of domains from the Amazon Web Services Control Catalog.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listDomainsPaginator(
        _ input: ListDomainsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDomainsRequest, ListDomainsResponse> {
        return .init(
            input: input,
            command: self.listDomains,
            inputKey: \ListDomainsRequest.nextToken,
            outputKey: \ListDomainsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a paginated list of objectives from the Amazon Web Services Control Catalog. You can apply an optional filter to see the objectives that belong to a specific domain. If you don’t provide a filter, the operation returns all objectives.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listObjectivesPaginator(
        _ input: ListObjectivesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListObjectivesRequest, ListObjectivesResponse> {
        return .init(
            input: input,
            command: self.listObjectives,
            inputKey: \ListObjectivesRequest.nextToken,
            outputKey: \ListObjectivesResponse.nextToken,
            logger: logger
        )
    }
}

extension ControlCatalog.ListCommonControlsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ControlCatalog.ListCommonControlsRequest {
        return .init(
            commonControlFilter: self.commonControlFilter,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ControlCatalog.ListDomainsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ControlCatalog.ListDomainsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ControlCatalog.ListObjectivesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> ControlCatalog.ListObjectivesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            objectiveFilter: self.objectiveFilter
        )
    }
}
