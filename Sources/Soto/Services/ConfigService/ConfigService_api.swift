//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS ConfigService service.
///
/// Config Config provides a way to keep track of the configurations
/// 			of all the Amazon Web Services resources associated with your Amazon Web Services account. You can
/// 			use Config to get the current and historical configurations of
/// 			each Amazon Web Services resource and also to get information about the relationship
/// 			between the resources. An Amazon Web Services resource can be an Amazon Compute
/// 			Cloud (Amazon EC2) instance, an Elastic Block Store (EBS) volume, an
/// 			elastic network Interface (ENI), or a security group. For a complete
/// 			list of resources currently supported by Config, see Supported Amazon Web Services resources. You can access and manage Config through the Amazon Web Services Management
/// 			Console, the Amazon Web Services Command Line Interface (Amazon Web Services CLI), the Config
/// 			API, or the Amazon Web Services SDKs for Config. This reference guide contains
/// 			documentation for the Config API and the Amazon Web Services CLI commands that
/// 			you can use to manage Config. The Config API uses the
/// 			Signature Version 4 protocol for signing requests. For more
/// 			information about how to sign a request with this protocol, see
/// 				Signature
/// 				Version 4 Signing Process. For detailed information
/// 			about Config features and their associated actions or commands,
/// 			as well as how to work with Amazon Web Services Management Console, see What Is Config in the Config Developer
/// 				Guide.
public struct ConfigService: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the ConfigService client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "StarlingDoveService",
            serviceName: "ConfigService",
            serviceIdentifier: "config",
            serviceProtocol: .json(version: "1.1"),
            apiVersion: "2014-11-12",
            endpoint: endpoint,
            variantEndpoints: Self.variantEndpoints,
            errorType: ConfigServiceErrorType.self,
            xmlNamespace: "http://config.amazonaws.com/doc/2014-11-12/",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }




    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.fips]: .init(endpoints: [
            "us-east-1": "config-fips.us-east-1.amazonaws.com",
            "us-east-2": "config-fips.us-east-2.amazonaws.com",
            "us-gov-east-1": "config.us-gov-east-1.amazonaws.com",
            "us-gov-west-1": "config.us-gov-west-1.amazonaws.com",
            "us-iso-east-1": "config-fips.us-iso-east-1.c2s.ic.gov",
            "us-iso-west-1": "config-fips.us-iso-west-1.c2s.ic.gov",
            "us-isob-east-1": "config-fips.us-isob-east-1.sc2s.sgov.gov",
            "us-west-1": "config-fips.us-west-1.amazonaws.com",
            "us-west-2": "config-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Adds all resource types specified in the ResourceTypes list to the RecordingGroup of specified configuration recorder and includes those resource types when recording. For this operation, the specified configuration recorder must use a RecordingStrategy that is either INCLUSION_BY_RESOURCE_TYPES or EXCLUSION_BY_RESOURCE_TYPES.
    @Sendable
    @inlinable
    public func associateResourceTypes(_ input: AssociateResourceTypesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateResourceTypesResponse {
        try await self.client.execute(
            operation: "AssociateResourceTypes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds all resource types specified in the ResourceTypes list to the RecordingGroup of specified configuration recorder and includes those resource types when recording. For this operation, the specified configuration recorder must use a RecordingStrategy that is either INCLUSION_BY_RESOURCE_TYPES or EXCLUSION_BY_RESOURCE_TYPES.
    ///
    /// Parameters:
    ///   - configurationRecorderArn: The Amazon Resource Name (ARN) of the specified configuration recorder.
    ///   - resourceTypes: The list of resource types you want to add to the recording group of the specified configuration recorder.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateResourceTypes(
        configurationRecorderArn: String,
        resourceTypes: [ResourceType],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateResourceTypesResponse {
        let input = AssociateResourceTypesRequest(
            configurationRecorderArn: configurationRecorderArn, 
            resourceTypes: resourceTypes
        )
        return try await self.associateResourceTypes(input, logger: logger)
    }

    /// Returns the current configuration items for resources that are present in your Config aggregator. The operation also returns a list of resources that are not processed in the current request.
    /// 			If there are no unprocessed resources, the operation returns an empty unprocessedResourceIdentifiers list.     The API does not return results for deleted resources.   The API does not return tags and relationships.
    @Sendable
    @inlinable
    public func batchGetAggregateResourceConfig(_ input: BatchGetAggregateResourceConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetAggregateResourceConfigResponse {
        try await self.client.execute(
            operation: "BatchGetAggregateResourceConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the current configuration items for resources that are present in your Config aggregator. The operation also returns a list of resources that are not processed in the current request.
    /// 			If there are no unprocessed resources, the operation returns an empty unprocessedResourceIdentifiers list.     The API does not return results for deleted resources.   The API does not return tags and relationships.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - resourceIdentifiers: A list of aggregate ResourceIdentifiers objects.
    ///   - logger: Logger use during operation
    @inlinable
    public func batchGetAggregateResourceConfig(
        configurationAggregatorName: String,
        resourceIdentifiers: [AggregateResourceIdentifier],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchGetAggregateResourceConfigResponse {
        let input = BatchGetAggregateResourceConfigRequest(
            configurationAggregatorName: configurationAggregatorName, 
            resourceIdentifiers: resourceIdentifiers
        )
        return try await self.batchGetAggregateResourceConfig(input, logger: logger)
    }

    /// Returns the BaseConfigurationItem for one or more requested resources.
    /// 			The operation also returns a list of resources that are
    /// 			not processed in the current request. If there are no unprocessed
    /// 			resources, the operation returns an empty unprocessedResourceKeys
    /// 			list.     The API does not return results for deleted
    /// 						resources.   The API does not return any tags for the requested
    /// 						resources. This information is filtered out of the
    /// 						supplementaryConfiguration section of the API
    /// 						response.
    @Sendable
    @inlinable
    public func batchGetResourceConfig(_ input: BatchGetResourceConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetResourceConfigResponse {
        try await self.client.execute(
            operation: "BatchGetResourceConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the BaseConfigurationItem for one or more requested resources.
    /// 			The operation also returns a list of resources that are
    /// 			not processed in the current request. If there are no unprocessed
    /// 			resources, the operation returns an empty unprocessedResourceKeys
    /// 			list.     The API does not return results for deleted
    /// 						resources.   The API does not return any tags for the requested
    /// 						resources. This information is filtered out of the
    /// 						supplementaryConfiguration section of the API
    /// 						response.
    ///
    /// Parameters:
    ///   - resourceKeys: A list of resource keys to be processed with the current
    ///   - logger: Logger use during operation
    @inlinable
    public func batchGetResourceConfig(
        resourceKeys: [ResourceKey],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BatchGetResourceConfigResponse {
        let input = BatchGetResourceConfigRequest(
            resourceKeys: resourceKeys
        )
        return try await self.batchGetResourceConfig(input, logger: logger)
    }

    /// Deletes the authorization granted to the specified
    /// 			configuration aggregator account in a specified region.
    @Sendable
    @inlinable
    public func deleteAggregationAuthorization(_ input: DeleteAggregationAuthorizationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteAggregationAuthorization", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the authorization granted to the specified
    /// 			configuration aggregator account in a specified region.
    ///
    /// Parameters:
    ///   - authorizedAccountId: The 12-digit account ID of the account authorized to aggregate
    ///   - authorizedAwsRegion: The region authorized to collect aggregated data.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteAggregationAuthorization(
        authorizedAccountId: String,
        authorizedAwsRegion: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteAggregationAuthorizationRequest(
            authorizedAccountId: authorizedAccountId, 
            authorizedAwsRegion: authorizedAwsRegion
        )
        return try await self.deleteAggregationAuthorization(input, logger: logger)
    }

    /// Deletes the specified Config rule and all of its evaluation
    /// 			results. Config sets the state of a rule to DELETING
    /// 			until the deletion is complete. You cannot update a rule while it is
    /// 			in this state. If you make a PutConfigRule or
    /// 				DeleteConfigRule request for the rule, you will
    /// 			receive a ResourceInUseException. You can check the state of a rule by using the
    /// 				DescribeConfigRules request.   Recommendation: Stop recording resource compliance before deleting rules  It is highly recommended that you stop recording for the AWS::Config::ResourceCompliance resource type before you delete rules in your account.
    /// 				Deleting rules creates CIs for AWS::Config::ResourceCompliance and can affect your Config configuration recorder costs.
    ///
    /// 				If you are deleting rules which evaluate a large number of resource types,
    /// 				this can lead to a spike in the number of CIs recorded. Best practice:   Stop recording AWS::Config::ResourceCompliance    Delete rule(s)   Turn on recording for AWS::Config::ResourceCompliance
    @Sendable
    @inlinable
    public func deleteConfigRule(_ input: DeleteConfigRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteConfigRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Config rule and all of its evaluation
    /// 			results. Config sets the state of a rule to DELETING
    /// 			until the deletion is complete. You cannot update a rule while it is
    /// 			in this state. If you make a PutConfigRule or
    /// 				DeleteConfigRule request for the rule, you will
    /// 			receive a ResourceInUseException. You can check the state of a rule by using the
    /// 				DescribeConfigRules request.   Recommendation: Stop recording resource compliance before deleting rules  It is highly recommended that you stop recording for the AWS::Config::ResourceCompliance resource type before you delete rules in your account.
    /// 				Deleting rules creates CIs for AWS::Config::ResourceCompliance and can affect your Config configuration recorder costs.
    ///
    /// 				If you are deleting rules which evaluate a large number of resource types,
    /// 				this can lead to a spike in the number of CIs recorded. Best practice:   Stop recording AWS::Config::ResourceCompliance    Delete rule(s)   Turn on recording for AWS::Config::ResourceCompliance
    ///
    /// Parameters:
    ///   - configRuleName: The name of the Config rule that you want to
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConfigRule(
        configRuleName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteConfigRuleRequest(
            configRuleName: configRuleName
        )
        return try await self.deleteConfigRule(input, logger: logger)
    }

    /// Deletes the specified configuration aggregator and the
    /// 			aggregated data associated with the aggregator.
    @Sendable
    @inlinable
    public func deleteConfigurationAggregator(_ input: DeleteConfigurationAggregatorRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteConfigurationAggregator", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified configuration aggregator and the
    /// 			aggregated data associated with the aggregator.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConfigurationAggregator(
        configurationAggregatorName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteConfigurationAggregatorRequest(
            configurationAggregatorName: configurationAggregatorName
        )
        return try await self.deleteConfigurationAggregator(input, logger: logger)
    }

    /// Deletes the customer managed configuration recorder. This operation does not delete the configuration information that
    /// 			was previously recorded. You will be able to access the previously
    /// 			recorded information by using the
    /// 			GetResourceConfigHistory operation, but you will not
    /// 			be able to access this information in the Config console until
    /// 			you have created a new customer managed configuration recorder.
    @Sendable
    @inlinable
    public func deleteConfigurationRecorder(_ input: DeleteConfigurationRecorderRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteConfigurationRecorder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the customer managed configuration recorder. This operation does not delete the configuration information that
    /// 			was previously recorded. You will be able to access the previously
    /// 			recorded information by using the
    /// 			GetResourceConfigHistory operation, but you will not
    /// 			be able to access this information in the Config console until
    /// 			you have created a new customer managed configuration recorder.
    ///
    /// Parameters:
    ///   - configurationRecorderName: The name of the customer managed configuration recorder that you want to delete. You can
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConfigurationRecorder(
        configurationRecorderName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteConfigurationRecorderRequest(
            configurationRecorderName: configurationRecorderName
        )
        return try await self.deleteConfigurationRecorder(input, logger: logger)
    }

    /// Deletes the specified conformance pack and all the Config rules, remediation actions, and all evaluation results within that
    /// 			conformance pack. Config sets the conformance pack to DELETE_IN_PROGRESS until the deletion is complete.
    /// 			You cannot update a conformance pack while it is in this state.
    @Sendable
    @inlinable
    public func deleteConformancePack(_ input: DeleteConformancePackRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteConformancePack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified conformance pack and all the Config rules, remediation actions, and all evaluation results within that
    /// 			conformance pack. Config sets the conformance pack to DELETE_IN_PROGRESS until the deletion is complete.
    /// 			You cannot update a conformance pack while it is in this state.
    ///
    /// Parameters:
    ///   - conformancePackName: Name of the conformance pack you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteConformancePack(
        conformancePackName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteConformancePackRequest(
            conformancePackName: conformancePackName
        )
        return try await self.deleteConformancePack(input, logger: logger)
    }

    /// Deletes the delivery channel. Before you can delete the delivery channel, you must stop the customer managed configuration recorder. You can use the StopConfigurationRecorder operation to stop the customer managed configuration recorder.
    @Sendable
    @inlinable
    public func deleteDeliveryChannel(_ input: DeleteDeliveryChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDeliveryChannel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the delivery channel. Before you can delete the delivery channel, you must stop the customer managed configuration recorder. You can use the StopConfigurationRecorder operation to stop the customer managed configuration recorder.
    ///
    /// Parameters:
    ///   - deliveryChannelName: The name of the delivery channel that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDeliveryChannel(
        deliveryChannelName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDeliveryChannelRequest(
            deliveryChannelName: deliveryChannelName
        )
        return try await self.deleteDeliveryChannel(input, logger: logger)
    }

    /// Deletes the evaluation results for the specified Config
    /// 			rule. You can specify one Config rule per request. After you
    /// 			delete the evaluation results, you can call the StartConfigRulesEvaluation API to start evaluating
    /// 			your Amazon Web Services resources against the rule.
    @Sendable
    @inlinable
    public func deleteEvaluationResults(_ input: DeleteEvaluationResultsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEvaluationResultsResponse {
        try await self.client.execute(
            operation: "DeleteEvaluationResults", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the evaluation results for the specified Config
    /// 			rule. You can specify one Config rule per request. After you
    /// 			delete the evaluation results, you can call the StartConfigRulesEvaluation API to start evaluating
    /// 			your Amazon Web Services resources against the rule.
    ///
    /// Parameters:
    ///   - configRuleName: The name of the Config rule for which you want to delete
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEvaluationResults(
        configRuleName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteEvaluationResultsResponse {
        let input = DeleteEvaluationResultsRequest(
            configRuleName: configRuleName
        )
        return try await self.deleteEvaluationResults(input, logger: logger)
    }

    /// Deletes the specified organization Config rule and all of its evaluation results from all member accounts in that organization.  Only a management account and a delegated administrator account can delete an organization Config rule.
    /// 		When calling this API with a delegated administrator, you must ensure Organizations
    /// 			ListDelegatedAdministrator permissions are added. Config sets the state of a rule to DELETE_IN_PROGRESS until the deletion is complete.
    /// 			You cannot update a rule while it is in this state.
    @Sendable
    @inlinable
    public func deleteOrganizationConfigRule(_ input: DeleteOrganizationConfigRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteOrganizationConfigRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified organization Config rule and all of its evaluation results from all member accounts in that organization.  Only a management account and a delegated administrator account can delete an organization Config rule.
    /// 		When calling this API with a delegated administrator, you must ensure Organizations
    /// 			ListDelegatedAdministrator permissions are added. Config sets the state of a rule to DELETE_IN_PROGRESS until the deletion is complete.
    /// 			You cannot update a rule while it is in this state.
    ///
    /// Parameters:
    ///   - organizationConfigRuleName: The name of organization Config rule that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteOrganizationConfigRule(
        organizationConfigRuleName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteOrganizationConfigRuleRequest(
            organizationConfigRuleName: organizationConfigRuleName
        )
        return try await self.deleteOrganizationConfigRule(input, logger: logger)
    }

    /// Deletes the specified organization conformance pack and all of the Config rules and remediation actions from
    /// 			all member accounts in that organization.  Only a management account or a delegated administrator account can delete an organization conformance pack.
    /// 	When calling this API with a delegated administrator, you must ensure Organizations
    /// 		ListDelegatedAdministrator permissions are added. Config sets the state of a conformance pack to DELETE_IN_PROGRESS until the deletion is complete.
    /// 				You cannot update a conformance pack while it is in this state.
    @Sendable
    @inlinable
    public func deleteOrganizationConformancePack(_ input: DeleteOrganizationConformancePackRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteOrganizationConformancePack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified organization conformance pack and all of the Config rules and remediation actions from
    /// 			all member accounts in that organization.  Only a management account or a delegated administrator account can delete an organization conformance pack.
    /// 	When calling this API with a delegated administrator, you must ensure Organizations
    /// 		ListDelegatedAdministrator permissions are added. Config sets the state of a conformance pack to DELETE_IN_PROGRESS until the deletion is complete.
    /// 				You cannot update a conformance pack while it is in this state.
    ///
    /// Parameters:
    ///   - organizationConformancePackName: The name of organization conformance pack that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteOrganizationConformancePack(
        organizationConformancePackName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteOrganizationConformancePackRequest(
            organizationConformancePackName: organizationConformancePackName
        )
        return try await self.deleteOrganizationConformancePack(input, logger: logger)
    }

    /// Deletes pending authorization requests for a specified
    /// 			aggregator account in a specified region.
    @Sendable
    @inlinable
    public func deletePendingAggregationRequest(_ input: DeletePendingAggregationRequestRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeletePendingAggregationRequest", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes pending authorization requests for a specified
    /// 			aggregator account in a specified region.
    ///
    /// Parameters:
    ///   - requesterAccountId: The 12-digit account ID of the account requesting to aggregate
    ///   - requesterAwsRegion: The region requesting to aggregate data.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePendingAggregationRequest(
        requesterAccountId: String,
        requesterAwsRegion: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeletePendingAggregationRequestRequest(
            requesterAccountId: requesterAccountId, 
            requesterAwsRegion: requesterAwsRegion
        )
        return try await self.deletePendingAggregationRequest(input, logger: logger)
    }

    /// Deletes the remediation configuration.
    @Sendable
    @inlinable
    public func deleteRemediationConfiguration(_ input: DeleteRemediationConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRemediationConfigurationResponse {
        try await self.client.execute(
            operation: "DeleteRemediationConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the remediation configuration.
    ///
    /// Parameters:
    ///   - configRuleName: The name of the Config rule for which you want to delete remediation configuration.
    ///   - resourceType: The type of a resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRemediationConfiguration(
        configRuleName: String,
        resourceType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteRemediationConfigurationResponse {
        let input = DeleteRemediationConfigurationRequest(
            configRuleName: configRuleName, 
            resourceType: resourceType
        )
        return try await self.deleteRemediationConfiguration(input, logger: logger)
    }

    /// Deletes one or more remediation exceptions mentioned in the resource keys.  Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
    /// 			Remediation exceptions blocks auto-remediation until the exception is cleared.
    @Sendable
    @inlinable
    public func deleteRemediationExceptions(_ input: DeleteRemediationExceptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRemediationExceptionsResponse {
        try await self.client.execute(
            operation: "DeleteRemediationExceptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes one or more remediation exceptions mentioned in the resource keys.  Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
    /// 			Remediation exceptions blocks auto-remediation until the exception is cleared.
    ///
    /// Parameters:
    ///   - configRuleName: The name of the Config rule for which you want to delete remediation exception configuration.
    ///   - resourceKeys: An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRemediationExceptions(
        configRuleName: String,
        resourceKeys: [RemediationExceptionResourceKey],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteRemediationExceptionsResponse {
        let input = DeleteRemediationExceptionsRequest(
            configRuleName: configRuleName, 
            resourceKeys: resourceKeys
        )
        return try await self.deleteRemediationExceptions(input, logger: logger)
    }

    /// Records the configuration state for a custom resource that has been deleted.  This API records a new ConfigurationItem with a ResourceDeleted status. You can retrieve the ConfigurationItems recorded for this resource in your Config History.
    ///
    @Sendable
    @inlinable
    public func deleteResourceConfig(_ input: DeleteResourceConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteResourceConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Records the configuration state for a custom resource that has been deleted.  This API records a new ConfigurationItem with a ResourceDeleted status. You can retrieve the ConfigurationItems recorded for this resource in your Config History.
    ///
    ///
    /// Parameters:
    ///   - resourceId: Unique identifier of the resource.
    ///   - resourceType: The type of the resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteResourceConfig(
        resourceId: String,
        resourceType: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteResourceConfigRequest(
            resourceId: resourceId, 
            resourceType: resourceType
        )
        return try await self.deleteResourceConfig(input, logger: logger)
    }

    /// Deletes the retention configuration.
    @Sendable
    @inlinable
    public func deleteRetentionConfiguration(_ input: DeleteRetentionConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRetentionConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the retention configuration.
    ///
    /// Parameters:
    ///   - retentionConfigurationName: The name of the retention configuration to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRetentionConfiguration(
        retentionConfigurationName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRetentionConfigurationRequest(
            retentionConfigurationName: retentionConfigurationName
        )
        return try await self.deleteRetentionConfiguration(input, logger: logger)
    }

    /// Deletes an existing service-linked configuration recorder. This operation does not delete the configuration information that was previously recorded. You will be able to access the previously
    /// 			recorded information by using the
    /// 			GetResourceConfigHistory operation, but you will not
    /// 			be able to access this information in the Config console until
    /// 			you have created a new service-linked configuration recorder for the same service.   The recording scope determines if you receive configuration items  The recording scope is set by the service that is linked to the configuration recorder and determines whether you receive configuration items (CIs) in the delivery channel. If the recording scope is internal, you will not receive CIs in the delivery channel.
    @Sendable
    @inlinable
    public func deleteServiceLinkedConfigurationRecorder(_ input: DeleteServiceLinkedConfigurationRecorderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteServiceLinkedConfigurationRecorderResponse {
        try await self.client.execute(
            operation: "DeleteServiceLinkedConfigurationRecorder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an existing service-linked configuration recorder. This operation does not delete the configuration information that was previously recorded. You will be able to access the previously
    /// 			recorded information by using the
    /// 			GetResourceConfigHistory operation, but you will not
    /// 			be able to access this information in the Config console until
    /// 			you have created a new service-linked configuration recorder for the same service.   The recording scope determines if you receive configuration items  The recording scope is set by the service that is linked to the configuration recorder and determines whether you receive configuration items (CIs) in the delivery channel. If the recording scope is internal, you will not receive CIs in the delivery channel.
    ///
    /// Parameters:
    ///   - servicePrincipal: The service principal of the Amazon Web Services service for the service-linked configuration recorder that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteServiceLinkedConfigurationRecorder(
        servicePrincipal: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteServiceLinkedConfigurationRecorderResponse {
        let input = DeleteServiceLinkedConfigurationRecorderRequest(
            servicePrincipal: servicePrincipal
        )
        return try await self.deleteServiceLinkedConfigurationRecorder(input, logger: logger)
    }

    /// Deletes the stored query for a single Amazon Web Services account and a single Amazon Web Services Region.
    @Sendable
    @inlinable
    public func deleteStoredQuery(_ input: DeleteStoredQueryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteStoredQueryResponse {
        try await self.client.execute(
            operation: "DeleteStoredQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the stored query for a single Amazon Web Services account and a single Amazon Web Services Region.
    ///
    /// Parameters:
    ///   - queryName: The name of the query that you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteStoredQuery(
        queryName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteStoredQueryResponse {
        let input = DeleteStoredQueryRequest(
            queryName: queryName
        )
        return try await self.deleteStoredQuery(input, logger: logger)
    }

    /// Schedules delivery of a configuration snapshot to the Amazon S3
    /// 			bucket in the specified delivery channel. After the delivery has
    /// 			started, Config sends the following notifications using an
    /// 			Amazon SNS topic that you have specified.   Notification of the start of the delivery.   Notification of the completion of the delivery, if the
    /// 					delivery was successfully completed.   Notification of delivery failure, if the delivery
    /// 					failed.
    @Sendable
    @inlinable
    public func deliverConfigSnapshot(_ input: DeliverConfigSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeliverConfigSnapshotResponse {
        try await self.client.execute(
            operation: "DeliverConfigSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Schedules delivery of a configuration snapshot to the Amazon S3
    /// 			bucket in the specified delivery channel. After the delivery has
    /// 			started, Config sends the following notifications using an
    /// 			Amazon SNS topic that you have specified.   Notification of the start of the delivery.   Notification of the completion of the delivery, if the
    /// 					delivery was successfully completed.   Notification of delivery failure, if the delivery
    /// 					failed.
    ///
    /// Parameters:
    ///   - deliveryChannelName: The name of the delivery channel through which the snapshot is
    ///   - logger: Logger use during operation
    @inlinable
    public func deliverConfigSnapshot(
        deliveryChannelName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeliverConfigSnapshotResponse {
        let input = DeliverConfigSnapshotRequest(
            deliveryChannelName: deliveryChannelName
        )
        return try await self.deliverConfigSnapshot(input, logger: logger)
    }

    /// Returns a list of compliant and noncompliant rules with the
    /// 			number of resources for compliant and noncompliant rules. Does not display rules that do not have compliance results.
    /// 			  The results can return an empty result page, but if you
    /// 				have a nextToken, the results are displayed on the next
    /// 				page.
    @Sendable
    @inlinable
    public func describeAggregateComplianceByConfigRules(_ input: DescribeAggregateComplianceByConfigRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAggregateComplianceByConfigRulesResponse {
        try await self.client.execute(
            operation: "DescribeAggregateComplianceByConfigRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of compliant and noncompliant rules with the
    /// 			number of resources for compliant and noncompliant rules. Does not display rules that do not have compliance results.
    /// 			  The results can return an empty result page, but if you
    /// 				have a nextToken, the results are displayed on the next
    /// 				page.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results by ConfigRuleComplianceFilters object.
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - nextToken: The nextToken string returned on a previous page that you use
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAggregateComplianceByConfigRules(
        configurationAggregatorName: String,
        filters: ConfigRuleComplianceFilters? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAggregateComplianceByConfigRulesResponse {
        let input = DescribeAggregateComplianceByConfigRulesRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeAggregateComplianceByConfigRules(input, logger: logger)
    }

    /// Returns a list of the existing and deleted conformance packs and their associated compliance status with the count of compliant and noncompliant Config rules within each
    /// 			conformance pack. Also returns the total rule count which includes compliant rules, noncompliant rules, and rules that cannot be evaluated due to insufficient data.  The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page.
    @Sendable
    @inlinable
    public func describeAggregateComplianceByConformancePacks(_ input: DescribeAggregateComplianceByConformancePacksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAggregateComplianceByConformancePacksResponse {
        try await self.client.execute(
            operation: "DescribeAggregateComplianceByConformancePacks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of the existing and deleted conformance packs and their associated compliance status with the count of compliant and noncompliant Config rules within each
    /// 			conformance pack. Also returns the total rule count which includes compliant rules, noncompliant rules, and rules that cannot be evaluated due to insufficient data.  The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the result by AggregateConformancePackComplianceFilters object.
    ///   - limit: The maximum number of conformance packs compliance details returned on each page. The default is maximum. If you specify 0, Config uses the default.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAggregateComplianceByConformancePacks(
        configurationAggregatorName: String,
        filters: AggregateConformancePackComplianceFilters? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAggregateComplianceByConformancePacksResponse {
        let input = DescribeAggregateComplianceByConformancePacksRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeAggregateComplianceByConformancePacks(input, logger: logger)
    }

    /// Returns a list of authorizations granted to various aggregator
    /// 			accounts and regions.
    @Sendable
    @inlinable
    public func describeAggregationAuthorizations(_ input: DescribeAggregationAuthorizationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAggregationAuthorizationsResponse {
        try await self.client.execute(
            operation: "DescribeAggregationAuthorizations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of authorizations granted to various aggregator
    /// 			accounts and regions.
    ///
    /// Parameters:
    ///   - limit: The maximum number of AggregationAuthorizations returned on
    ///   - nextToken: The nextToken string returned on a previous page that you use
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAggregationAuthorizations(
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAggregationAuthorizationsResponse {
        let input = DescribeAggregationAuthorizationsRequest(
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeAggregationAuthorizations(input, logger: logger)
    }

    /// Indicates whether the specified Config rules are compliant.
    /// 			If a rule is noncompliant, this operation returns the number of Amazon Web Services
    /// 			resources that do not comply with the rule. A rule is compliant if all of the evaluated resources comply
    /// 			with it. It is noncompliant if any of these resources do not
    /// 			comply. If Config has no current evaluation results for the rule,
    /// 			it returns INSUFFICIENT_DATA. This result might
    /// 			indicate one of the following conditions:   Config has never invoked an evaluation for the
    /// 					rule. To check whether it has, use the
    /// 						DescribeConfigRuleEvaluationStatus action
    /// 					to get the LastSuccessfulInvocationTime and
    /// 						LastFailedInvocationTime.   The rule's Lambda function is failing to send
    /// 					evaluation results to Config. Verify that the role you
    /// 					assigned to your configuration recorder includes the
    /// 						config:PutEvaluations permission. If the
    /// 					rule is a custom rule, verify that the Lambda execution
    /// 					role includes the config:PutEvaluations
    /// 					permission.   The rule's Lambda function has returned
    /// 						NOT_APPLICABLE for all evaluation results.
    /// 					This can occur if the resources were deleted or removed from
    /// 					the rule's scope.
    @Sendable
    @inlinable
    public func describeComplianceByConfigRule(_ input: DescribeComplianceByConfigRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeComplianceByConfigRuleResponse {
        try await self.client.execute(
            operation: "DescribeComplianceByConfigRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Indicates whether the specified Config rules are compliant.
    /// 			If a rule is noncompliant, this operation returns the number of Amazon Web Services
    /// 			resources that do not comply with the rule. A rule is compliant if all of the evaluated resources comply
    /// 			with it. It is noncompliant if any of these resources do not
    /// 			comply. If Config has no current evaluation results for the rule,
    /// 			it returns INSUFFICIENT_DATA. This result might
    /// 			indicate one of the following conditions:   Config has never invoked an evaluation for the
    /// 					rule. To check whether it has, use the
    /// 						DescribeConfigRuleEvaluationStatus action
    /// 					to get the LastSuccessfulInvocationTime and
    /// 						LastFailedInvocationTime.   The rule's Lambda function is failing to send
    /// 					evaluation results to Config. Verify that the role you
    /// 					assigned to your configuration recorder includes the
    /// 						config:PutEvaluations permission. If the
    /// 					rule is a custom rule, verify that the Lambda execution
    /// 					role includes the config:PutEvaluations
    /// 					permission.   The rule's Lambda function has returned
    /// 						NOT_APPLICABLE for all evaluation results.
    /// 					This can occur if the resources were deleted or removed from
    /// 					the rule's scope.
    ///
    /// Parameters:
    ///   - complianceTypes: Filters the results by compliance.
    ///   - configRuleNames: Specify one or more Config rule names to filter the results
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - logger: Logger use during operation
    @inlinable
    public func describeComplianceByConfigRule(
        complianceTypes: [ComplianceType]? = nil,
        configRuleNames: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeComplianceByConfigRuleResponse {
        let input = DescribeComplianceByConfigRuleRequest(
            complianceTypes: complianceTypes, 
            configRuleNames: configRuleNames, 
            nextToken: nextToken
        )
        return try await self.describeComplianceByConfigRule(input, logger: logger)
    }

    /// Indicates whether the specified Amazon Web Services resources are compliant. If
    /// 			a resource is noncompliant, this operation returns the number of Config rules that the resource does not comply with. A resource is compliant if it complies with all the Config
    /// 			rules that evaluate it. It is noncompliant if it does not comply
    /// 			with one or more of these rules. If Config has no current evaluation results for the
    /// 			resource, it returns INSUFFICIENT_DATA. This result
    /// 			might indicate one of the following conditions about the rules that
    /// 			evaluate the resource:   Config has never invoked an evaluation for the
    /// 					rule. To check whether it has, use the
    /// 						DescribeConfigRuleEvaluationStatus action
    /// 					to get the LastSuccessfulInvocationTime and
    /// 						LastFailedInvocationTime.   The rule's Lambda function is failing to send
    /// 					evaluation results to Config. Verify that the role that
    /// 					you assigned to your configuration recorder includes the
    /// 						config:PutEvaluations permission. If the
    /// 					rule is a custom rule, verify that the Lambda execution
    /// 					role includes the config:PutEvaluations
    /// 					permission.   The rule's Lambda function has returned
    /// 						NOT_APPLICABLE for all evaluation results.
    /// 					This can occur if the resources were deleted or removed from
    /// 					the rule's scope.
    @Sendable
    @inlinable
    public func describeComplianceByResource(_ input: DescribeComplianceByResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeComplianceByResourceResponse {
        try await self.client.execute(
            operation: "DescribeComplianceByResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Indicates whether the specified Amazon Web Services resources are compliant. If
    /// 			a resource is noncompliant, this operation returns the number of Config rules that the resource does not comply with. A resource is compliant if it complies with all the Config
    /// 			rules that evaluate it. It is noncompliant if it does not comply
    /// 			with one or more of these rules. If Config has no current evaluation results for the
    /// 			resource, it returns INSUFFICIENT_DATA. This result
    /// 			might indicate one of the following conditions about the rules that
    /// 			evaluate the resource:   Config has never invoked an evaluation for the
    /// 					rule. To check whether it has, use the
    /// 						DescribeConfigRuleEvaluationStatus action
    /// 					to get the LastSuccessfulInvocationTime and
    /// 						LastFailedInvocationTime.   The rule's Lambda function is failing to send
    /// 					evaluation results to Config. Verify that the role that
    /// 					you assigned to your configuration recorder includes the
    /// 						config:PutEvaluations permission. If the
    /// 					rule is a custom rule, verify that the Lambda execution
    /// 					role includes the config:PutEvaluations
    /// 					permission.   The rule's Lambda function has returned
    /// 						NOT_APPLICABLE for all evaluation results.
    /// 					This can occur if the resources were deleted or removed from
    /// 					the rule's scope.
    ///
    /// Parameters:
    ///   - complianceTypes: Filters the results by compliance.
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - resourceId: The ID of the Amazon Web Services resource for which you want compliance
    ///   - resourceType: The types of Amazon Web Services resources for which you want compliance
    ///   - logger: Logger use during operation
    @inlinable
    public func describeComplianceByResource(
        complianceTypes: [ComplianceType]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        resourceId: String? = nil,
        resourceType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeComplianceByResourceResponse {
        let input = DescribeComplianceByResourceRequest(
            complianceTypes: complianceTypes, 
            limit: limit, 
            nextToken: nextToken, 
            resourceId: resourceId, 
            resourceType: resourceType
        )
        return try await self.describeComplianceByResource(input, logger: logger)
    }

    /// Returns status information for each of your Config managed rules. The status includes information such as the last time Config invoked the rule, the last time Config failed to invoke
    /// 			the rule, and the related error for the last failure.
    @Sendable
    @inlinable
    public func describeConfigRuleEvaluationStatus(_ input: DescribeConfigRuleEvaluationStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConfigRuleEvaluationStatusResponse {
        try await self.client.execute(
            operation: "DescribeConfigRuleEvaluationStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns status information for each of your Config managed rules. The status includes information such as the last time Config invoked the rule, the last time Config failed to invoke
    /// 			the rule, and the related error for the last failure.
    ///
    /// Parameters:
    ///   - configRuleNames: The name of the Config managed rules for which you want
    ///   - limit: The number of rule evaluation results that you want
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConfigRuleEvaluationStatus(
        configRuleNames: [String]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConfigRuleEvaluationStatusResponse {
        let input = DescribeConfigRuleEvaluationStatusRequest(
            configRuleNames: configRuleNames, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeConfigRuleEvaluationStatus(input, logger: logger)
    }

    /// Returns details about your Config rules.
    @Sendable
    @inlinable
    public func describeConfigRules(_ input: DescribeConfigRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConfigRulesResponse {
        try await self.client.execute(
            operation: "DescribeConfigRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details about your Config rules.
    ///
    /// Parameters:
    ///   - configRuleNames: The names of the Config rules for which you want details.
    ///   - filters: Returns a list of Detective or Proactive Config rules. By default, this API returns an unfiltered list. For more information on Detective or Proactive Config rules,
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConfigRules(
        configRuleNames: [String]? = nil,
        filters: DescribeConfigRulesFilters? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConfigRulesResponse {
        let input = DescribeConfigRulesRequest(
            configRuleNames: configRuleNames, 
            filters: filters, 
            nextToken: nextToken
        )
        return try await self.describeConfigRules(input, logger: logger)
    }

    /// Returns status information for sources within an aggregator.
    /// 			The status includes information about the last time Config verified authorization between the source account and an aggregator account. In case of a failure, the status contains the related error code or message.
    @Sendable
    @inlinable
    public func describeConfigurationAggregatorSourcesStatus(_ input: DescribeConfigurationAggregatorSourcesStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConfigurationAggregatorSourcesStatusResponse {
        try await self.client.execute(
            operation: "DescribeConfigurationAggregatorSourcesStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns status information for sources within an aggregator.
    /// 			The status includes information about the last time Config verified authorization between the source account and an aggregator account. In case of a failure, the status contains the related error code or message.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - limit: The maximum number of AggregatorSourceStatus returned on each
    ///   - nextToken: The nextToken string returned on a previous page that you use
    ///   - updateStatus: Filters the status type.   Valid value FAILED indicates errors while moving
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConfigurationAggregatorSourcesStatus(
        configurationAggregatorName: String,
        limit: Int? = nil,
        nextToken: String? = nil,
        updateStatus: [AggregatedSourceStatusType]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConfigurationAggregatorSourcesStatusResponse {
        let input = DescribeConfigurationAggregatorSourcesStatusRequest(
            configurationAggregatorName: configurationAggregatorName, 
            limit: limit, 
            nextToken: nextToken, 
            updateStatus: updateStatus
        )
        return try await self.describeConfigurationAggregatorSourcesStatus(input, logger: logger)
    }

    /// Returns the details of one or more configuration aggregators.
    /// 			If the configuration aggregator is not specified, this operation
    /// 			returns the details for all the configuration aggregators associated
    /// 			with the account.
    @Sendable
    @inlinable
    public func describeConfigurationAggregators(_ input: DescribeConfigurationAggregatorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConfigurationAggregatorsResponse {
        try await self.client.execute(
            operation: "DescribeConfigurationAggregators", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of one or more configuration aggregators.
    /// 			If the configuration aggregator is not specified, this operation
    /// 			returns the details for all the configuration aggregators associated
    /// 			with the account.
    ///
    /// Parameters:
    ///   - configurationAggregatorNames: The name of the configuration aggregators.
    ///   - limit: The maximum number of configuration aggregators returned on
    ///   - nextToken: The nextToken string returned on a previous page that you use
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConfigurationAggregators(
        configurationAggregatorNames: [String]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConfigurationAggregatorsResponse {
        let input = DescribeConfigurationAggregatorsRequest(
            configurationAggregatorNames: configurationAggregatorNames, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeConfigurationAggregators(input, logger: logger)
    }

    /// Returns the current status of the configuration
    /// 			recorder you specify as well as the status of the last recording event for the configuration recorders. For a detailed status of recording events over time, add your Config events to Amazon CloudWatch metrics and use CloudWatch metrics. If a configuration recorder is not specified, this operation returns the status for the customer managed configuration recorder configured for the
    /// 			account, if applicable.  When making a request to this operation, you can only specify one configuration recorder.
    @Sendable
    @inlinable
    public func describeConfigurationRecorderStatus(_ input: DescribeConfigurationRecorderStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConfigurationRecorderStatusResponse {
        try await self.client.execute(
            operation: "DescribeConfigurationRecorderStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the current status of the configuration
    /// 			recorder you specify as well as the status of the last recording event for the configuration recorders. For a detailed status of recording events over time, add your Config events to Amazon CloudWatch metrics and use CloudWatch metrics. If a configuration recorder is not specified, this operation returns the status for the customer managed configuration recorder configured for the
    /// 			account, if applicable.  When making a request to this operation, you can only specify one configuration recorder.
    ///
    /// Parameters:
    ///   - arn: The Amazon Resource Name (ARN) of the configuration recorder that you want to specify.
    ///   - configurationRecorderNames: The name of the configuration recorder. If the name is not
    ///   - servicePrincipal: For service-linked configuration recorders, you can use the service principal of the linked Amazon Web Services service to specify the configuration recorder.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConfigurationRecorderStatus(
        arn: String? = nil,
        configurationRecorderNames: [String]? = nil,
        servicePrincipal: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConfigurationRecorderStatusResponse {
        let input = DescribeConfigurationRecorderStatusRequest(
            arn: arn, 
            configurationRecorderNames: configurationRecorderNames, 
            servicePrincipal: servicePrincipal
        )
        return try await self.describeConfigurationRecorderStatus(input, logger: logger)
    }

    /// Returns details for the configuration recorder you specify. If a configuration recorder is not specified, this operation returns details for the customer managed configuration recorder configured for the
    /// 			account, if applicable.  When making a request to this operation, you can only specify one configuration recorder.
    @Sendable
    @inlinable
    public func describeConfigurationRecorders(_ input: DescribeConfigurationRecordersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConfigurationRecordersResponse {
        try await self.client.execute(
            operation: "DescribeConfigurationRecorders", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details for the configuration recorder you specify. If a configuration recorder is not specified, this operation returns details for the customer managed configuration recorder configured for the
    /// 			account, if applicable.  When making a request to this operation, you can only specify one configuration recorder.
    ///
    /// Parameters:
    ///   - arn: The Amazon Resource Name (ARN) of the configuration recorder that you want to specify.
    ///   - configurationRecorderNames: A list of names of the configuration recorders that you want to specify.
    ///   - servicePrincipal: For service-linked configuration recorders, you can use the service principal of the linked Amazon Web Services service to specify the configuration recorder.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConfigurationRecorders(
        arn: String? = nil,
        configurationRecorderNames: [String]? = nil,
        servicePrincipal: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConfigurationRecordersResponse {
        let input = DescribeConfigurationRecordersRequest(
            arn: arn, 
            configurationRecorderNames: configurationRecorderNames, 
            servicePrincipal: servicePrincipal
        )
        return try await self.describeConfigurationRecorders(input, logger: logger)
    }

    /// Returns compliance details for each rule in that conformance pack.  You must provide exact rule names.
    @Sendable
    @inlinable
    public func describeConformancePackCompliance(_ input: DescribeConformancePackComplianceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConformancePackComplianceResponse {
        try await self.client.execute(
            operation: "DescribeConformancePackCompliance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns compliance details for each rule in that conformance pack.  You must provide exact rule names.
    ///
    /// Parameters:
    ///   - conformancePackName: Name of the conformance pack.
    ///   - filters: A ConformancePackComplianceFilters object.
    ///   - limit: The maximum number of Config rules within a conformance pack are returned on each page.
    ///   - nextToken: The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConformancePackCompliance(
        conformancePackName: String,
        filters: ConformancePackComplianceFilters? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConformancePackComplianceResponse {
        let input = DescribeConformancePackComplianceRequest(
            conformancePackName: conformancePackName, 
            filters: filters, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeConformancePackCompliance(input, logger: logger)
    }

    /// Provides one or more conformance packs deployment status.  If there are no conformance packs then you will see an empty result.
    @Sendable
    @inlinable
    public func describeConformancePackStatus(_ input: DescribeConformancePackStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConformancePackStatusResponse {
        try await self.client.execute(
            operation: "DescribeConformancePackStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides one or more conformance packs deployment status.  If there are no conformance packs then you will see an empty result.
    ///
    /// Parameters:
    ///   - conformancePackNames: Comma-separated list of conformance pack names.
    ///   - limit: The maximum number of conformance packs status returned on each page.
    ///   - nextToken: The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConformancePackStatus(
        conformancePackNames: [String]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConformancePackStatusResponse {
        let input = DescribeConformancePackStatusRequest(
            conformancePackNames: conformancePackNames, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeConformancePackStatus(input, logger: logger)
    }

    /// Returns a list of one or more conformance packs.
    @Sendable
    @inlinable
    public func describeConformancePacks(_ input: DescribeConformancePacksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConformancePacksResponse {
        try await self.client.execute(
            operation: "DescribeConformancePacks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of one or more conformance packs.
    ///
    /// Parameters:
    ///   - conformancePackNames: Comma-separated list of conformance pack names for which you want details. If you do not specify any names, Config returns details for all your conformance packs.
    ///   - limit: The maximum number of conformance packs returned on each page.
    ///   - nextToken: The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConformancePacks(
        conformancePackNames: [String]? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConformancePacksResponse {
        let input = DescribeConformancePacksRequest(
            conformancePackNames: conformancePackNames, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describeConformancePacks(input, logger: logger)
    }

    /// Returns the current status of the specified delivery channel.
    /// 			If a delivery channel is not specified, this operation returns the
    /// 			current status of all delivery channels associated with the
    /// 			account.  Currently, you can specify only one delivery channel per
    /// 				region in your account.
    @Sendable
    @inlinable
    public func describeDeliveryChannelStatus(_ input: DescribeDeliveryChannelStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeliveryChannelStatusResponse {
        try await self.client.execute(
            operation: "DescribeDeliveryChannelStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the current status of the specified delivery channel.
    /// 			If a delivery channel is not specified, this operation returns the
    /// 			current status of all delivery channels associated with the
    /// 			account.  Currently, you can specify only one delivery channel per
    /// 				region in your account.
    ///
    /// Parameters:
    ///   - deliveryChannelNames: A list of delivery channel names.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDeliveryChannelStatus(
        deliveryChannelNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDeliveryChannelStatusResponse {
        let input = DescribeDeliveryChannelStatusRequest(
            deliveryChannelNames: deliveryChannelNames
        )
        return try await self.describeDeliveryChannelStatus(input, logger: logger)
    }

    /// Returns details about the specified delivery channel. If a
    /// 			delivery channel is not specified, this operation returns the details
    /// 			of all delivery channels associated with the account.  Currently, you can specify only one delivery channel per
    /// 				region in your account.
    @Sendable
    @inlinable
    public func describeDeliveryChannels(_ input: DescribeDeliveryChannelsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeliveryChannelsResponse {
        try await self.client.execute(
            operation: "DescribeDeliveryChannels", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns details about the specified delivery channel. If a
    /// 			delivery channel is not specified, this operation returns the details
    /// 			of all delivery channels associated with the account.  Currently, you can specify only one delivery channel per
    /// 				region in your account.
    ///
    /// Parameters:
    ///   - deliveryChannelNames: A list of delivery channel names.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDeliveryChannels(
        deliveryChannelNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDeliveryChannelsResponse {
        let input = DescribeDeliveryChannelsRequest(
            deliveryChannelNames: deliveryChannelNames
        )
        return try await self.describeDeliveryChannels(input, logger: logger)
    }

    /// Provides organization Config rule deployment status for an organization.  The status is not considered successful until organization Config rule is successfully deployed in all the member
    /// 			accounts with an exception of excluded accounts. When you specify the limit and the next token, you receive a paginated response.
    /// 			Limit and next token are not applicable if you specify organization Config rule names.
    /// 			It is only applicable, when you request all the organization Config rules.
    @Sendable
    @inlinable
    public func describeOrganizationConfigRuleStatuses(_ input: DescribeOrganizationConfigRuleStatusesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeOrganizationConfigRuleStatusesResponse {
        try await self.client.execute(
            operation: "DescribeOrganizationConfigRuleStatuses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides organization Config rule deployment status for an organization.  The status is not considered successful until organization Config rule is successfully deployed in all the member
    /// 			accounts with an exception of excluded accounts. When you specify the limit and the next token, you receive a paginated response.
    /// 			Limit and next token are not applicable if you specify organization Config rule names.
    /// 			It is only applicable, when you request all the organization Config rules.
    ///
    /// Parameters:
    ///   - limit: The maximum number of OrganizationConfigRuleStatuses returned on each page. If you do no specify a number, Config uses the default. The default is 100.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - organizationConfigRuleNames: The names of organization Config rules for which you want status details. If you do not specify any names, Config returns details for all your organization Config rules.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeOrganizationConfigRuleStatuses(
        limit: Int? = nil,
        nextToken: String? = nil,
        organizationConfigRuleNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeOrganizationConfigRuleStatusesResponse {
        let input = DescribeOrganizationConfigRuleStatusesRequest(
            limit: limit, 
            nextToken: nextToken, 
            organizationConfigRuleNames: organizationConfigRuleNames
        )
        return try await self.describeOrganizationConfigRuleStatuses(input, logger: logger)
    }

    /// Returns a list of organization Config rules.   When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization Config rule names.
    /// 			It is only applicable, when you request all the organization Config rules.  For accounts within an organization  If you deploy an organizational rule or conformance pack in an organization
    /// 				administrator account, and then establish a delegated administrator and deploy an
    /// 				organizational rule or conformance pack in the delegated administrator account, you
    /// 				won't be able to see the organizational rule or conformance pack in the organization
    /// 				administrator account from the delegated administrator account or see the organizational
    /// 				rule or conformance pack in the delegated administrator account from organization
    /// 				administrator account. The DescribeOrganizationConfigRules and
    /// 				DescribeOrganizationConformancePacks APIs can only see and interact with
    /// 				the organization-related resource that were deployed from within the account calling
    /// 				those APIs.
    @Sendable
    @inlinable
    public func describeOrganizationConfigRules(_ input: DescribeOrganizationConfigRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeOrganizationConfigRulesResponse {
        try await self.client.execute(
            operation: "DescribeOrganizationConfigRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of organization Config rules.   When you specify the limit and the next token, you receive a paginated response. Limit and next token are not applicable if you specify organization Config rule names.
    /// 			It is only applicable, when you request all the organization Config rules.  For accounts within an organization  If you deploy an organizational rule or conformance pack in an organization
    /// 				administrator account, and then establish a delegated administrator and deploy an
    /// 				organizational rule or conformance pack in the delegated administrator account, you
    /// 				won't be able to see the organizational rule or conformance pack in the organization
    /// 				administrator account from the delegated administrator account or see the organizational
    /// 				rule or conformance pack in the delegated administrator account from organization
    /// 				administrator account. The DescribeOrganizationConfigRules and
    /// 				DescribeOrganizationConformancePacks APIs can only see and interact with
    /// 				the organization-related resource that were deployed from within the account calling
    /// 				those APIs.
    ///
    /// Parameters:
    ///   - limit: The maximum number of organization Config rules returned on each page. If you do no specify a number, Config uses the default. The default is 100.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - organizationConfigRuleNames: The names of organization Config rules for which you want details. If you do not specify any names, Config returns details for all your organization Config rules.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeOrganizationConfigRules(
        limit: Int? = nil,
        nextToken: String? = nil,
        organizationConfigRuleNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeOrganizationConfigRulesResponse {
        let input = DescribeOrganizationConfigRulesRequest(
            limit: limit, 
            nextToken: nextToken, 
            organizationConfigRuleNames: organizationConfigRuleNames
        )
        return try await self.describeOrganizationConfigRules(input, logger: logger)
    }

    /// Provides organization conformance pack deployment status for an organization.   The status is not considered successful until organization conformance pack is successfully
    /// 				deployed in all the member accounts with an exception of excluded accounts. When you specify the limit and the next token, you receive a paginated response.
    /// 				Limit and next token are not applicable if you specify organization conformance pack names.
    /// 				They are only applicable, when you request all the organization conformance packs.
    @Sendable
    @inlinable
    public func describeOrganizationConformancePackStatuses(_ input: DescribeOrganizationConformancePackStatusesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeOrganizationConformancePackStatusesResponse {
        try await self.client.execute(
            operation: "DescribeOrganizationConformancePackStatuses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides organization conformance pack deployment status for an organization.   The status is not considered successful until organization conformance pack is successfully
    /// 				deployed in all the member accounts with an exception of excluded accounts. When you specify the limit and the next token, you receive a paginated response.
    /// 				Limit and next token are not applicable if you specify organization conformance pack names.
    /// 				They are only applicable, when you request all the organization conformance packs.
    ///
    /// Parameters:
    ///   - limit: The maximum number of OrganizationConformancePackStatuses returned on each page.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - organizationConformancePackNames: The names of organization conformance packs for which you want status details.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeOrganizationConformancePackStatuses(
        limit: Int? = nil,
        nextToken: String? = nil,
        organizationConformancePackNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeOrganizationConformancePackStatusesResponse {
        let input = DescribeOrganizationConformancePackStatusesRequest(
            limit: limit, 
            nextToken: nextToken, 
            organizationConformancePackNames: organizationConformancePackNames
        )
        return try await self.describeOrganizationConformancePackStatuses(input, logger: logger)
    }

    /// Returns a list of organization conformance packs.   When you specify the limit and the next token, you receive a paginated response.  Limit and next token are not applicable if you specify organization conformance packs names. They are only applicable,
    /// 			when you request all the organization conformance packs.   For accounts within an organization  If you deploy an organizational rule or conformance pack in an organization
    /// 				administrator account, and then establish a delegated administrator and deploy an
    /// 				organizational rule or conformance pack in the delegated administrator account, you
    /// 				won't be able to see the organizational rule or conformance pack in the organization
    /// 				administrator account from the delegated administrator account or see the organizational
    /// 				rule or conformance pack in the delegated administrator account from organization
    /// 				administrator account. The DescribeOrganizationConfigRules and
    /// 				DescribeOrganizationConformancePacks APIs can only see and interact with
    /// 				the organization-related resource that were deployed from within the account calling
    /// 				those APIs.
    @Sendable
    @inlinable
    public func describeOrganizationConformancePacks(_ input: DescribeOrganizationConformancePacksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeOrganizationConformancePacksResponse {
        try await self.client.execute(
            operation: "DescribeOrganizationConformancePacks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of organization conformance packs.   When you specify the limit and the next token, you receive a paginated response.  Limit and next token are not applicable if you specify organization conformance packs names. They are only applicable,
    /// 			when you request all the organization conformance packs.   For accounts within an organization  If you deploy an organizational rule or conformance pack in an organization
    /// 				administrator account, and then establish a delegated administrator and deploy an
    /// 				organizational rule or conformance pack in the delegated administrator account, you
    /// 				won't be able to see the organizational rule or conformance pack in the organization
    /// 				administrator account from the delegated administrator account or see the organizational
    /// 				rule or conformance pack in the delegated administrator account from organization
    /// 				administrator account. The DescribeOrganizationConfigRules and
    /// 				DescribeOrganizationConformancePacks APIs can only see and interact with
    /// 				the organization-related resource that were deployed from within the account calling
    /// 				those APIs.
    ///
    /// Parameters:
    ///   - limit: The maximum number of organization config packs returned on each page. If you do no specify a
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a
    ///   - organizationConformancePackNames: The name that you assign to an organization conformance pack.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeOrganizationConformancePacks(
        limit: Int? = nil,
        nextToken: String? = nil,
        organizationConformancePackNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeOrganizationConformancePacksResponse {
        let input = DescribeOrganizationConformancePacksRequest(
            limit: limit, 
            nextToken: nextToken, 
            organizationConformancePackNames: organizationConformancePackNames
        )
        return try await self.describeOrganizationConformancePacks(input, logger: logger)
    }

    /// Returns a list of all pending aggregation requests.
    @Sendable
    @inlinable
    public func describePendingAggregationRequests(_ input: DescribePendingAggregationRequestsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePendingAggregationRequestsResponse {
        try await self.client.execute(
            operation: "DescribePendingAggregationRequests", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of all pending aggregation requests.
    ///
    /// Parameters:
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - nextToken: The nextToken string returned on a previous page that you use
    ///   - logger: Logger use during operation
    @inlinable
    public func describePendingAggregationRequests(
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribePendingAggregationRequestsResponse {
        let input = DescribePendingAggregationRequestsRequest(
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.describePendingAggregationRequests(input, logger: logger)
    }

    /// Returns the details of one or more remediation configurations.
    @Sendable
    @inlinable
    public func describeRemediationConfigurations(_ input: DescribeRemediationConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRemediationConfigurationsResponse {
        try await self.client.execute(
            operation: "DescribeRemediationConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of one or more remediation configurations.
    ///
    /// Parameters:
    ///   - configRuleNames: A list of Config rule names of remediation configurations for which you want details.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRemediationConfigurations(
        configRuleNames: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRemediationConfigurationsResponse {
        let input = DescribeRemediationConfigurationsRequest(
            configRuleNames: configRuleNames
        )
        return try await self.describeRemediationConfigurations(input, logger: logger)
    }

    /// Returns the details of one or more remediation exceptions. A detailed view of a remediation exception for a set of resources that includes an explanation of an exception and the time when the exception will be deleted.
    /// 			When you specify the limit and the next token, you receive a paginated response.   Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
    /// 				Remediation exceptions blocks auto-remediation until the exception is cleared. When you specify the limit and the next token, you receive a paginated response.  Limit and next token are not applicable if you request resources in batch. It is only applicable, when you request all resources.
    @Sendable
    @inlinable
    public func describeRemediationExceptions(_ input: DescribeRemediationExceptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRemediationExceptionsResponse {
        try await self.client.execute(
            operation: "DescribeRemediationExceptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of one or more remediation exceptions. A detailed view of a remediation exception for a set of resources that includes an explanation of an exception and the time when the exception will be deleted.
    /// 			When you specify the limit and the next token, you receive a paginated response.   Config generates a remediation exception when a problem occurs executing a remediation action to a specific resource.
    /// 				Remediation exceptions blocks auto-remediation until the exception is cleared. When you specify the limit and the next token, you receive a paginated response.  Limit and next token are not applicable if you request resources in batch. It is only applicable, when you request all resources.
    ///
    /// Parameters:
    ///   - configRuleName: The name of the Config rule.
    ///   - limit: The maximum number of RemediationExceptionResourceKey returned on each page. The default is 25. If you specify 0, Config uses the default.
    ///   - nextToken: The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    ///   - resourceKeys: An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRemediationExceptions(
        configRuleName: String,
        limit: Int? = nil,
        nextToken: String? = nil,
        resourceKeys: [RemediationExceptionResourceKey]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRemediationExceptionsResponse {
        let input = DescribeRemediationExceptionsRequest(
            configRuleName: configRuleName, 
            limit: limit, 
            nextToken: nextToken, 
            resourceKeys: resourceKeys
        )
        return try await self.describeRemediationExceptions(input, logger: logger)
    }

    /// Provides a detailed view of a Remediation Execution for a set of resources including state, timestamps for when steps for the remediation execution occur, and any error messages for steps that have failed.
    /// 			When you specify the limit and the next token, you receive a paginated response.
    @Sendable
    @inlinable
    public func describeRemediationExecutionStatus(_ input: DescribeRemediationExecutionStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRemediationExecutionStatusResponse {
        try await self.client.execute(
            operation: "DescribeRemediationExecutionStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides a detailed view of a Remediation Execution for a set of resources including state, timestamps for when steps for the remediation execution occur, and any error messages for steps that have failed.
    /// 			When you specify the limit and the next token, you receive a paginated response.
    ///
    /// Parameters:
    ///   - configRuleName: The name of the Config rule.
    ///   - limit: The maximum number of RemediationExecutionStatuses returned on each page. The default is maximum. If you specify 0, Config uses the default.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - resourceKeys: A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRemediationExecutionStatus(
        configRuleName: String,
        limit: Int? = nil,
        nextToken: String? = nil,
        resourceKeys: [ResourceKey]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRemediationExecutionStatusResponse {
        let input = DescribeRemediationExecutionStatusRequest(
            configRuleName: configRuleName, 
            limit: limit, 
            nextToken: nextToken, 
            resourceKeys: resourceKeys
        )
        return try await self.describeRemediationExecutionStatus(input, logger: logger)
    }

    /// Returns the details of one or more retention configurations. If
    /// 			the retention configuration name is not specified, this operation
    /// 			returns the details for all the retention configurations for that
    /// 			account.  Currently, Config supports only one retention
    /// 				configuration per region in your account.
    @Sendable
    @inlinable
    public func describeRetentionConfigurations(_ input: DescribeRetentionConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRetentionConfigurationsResponse {
        try await self.client.execute(
            operation: "DescribeRetentionConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of one or more retention configurations. If
    /// 			the retention configuration name is not specified, this operation
    /// 			returns the details for all the retention configurations for that
    /// 			account.  Currently, Config supports only one retention
    /// 				configuration per region in your account.
    ///
    /// Parameters:
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - retentionConfigurationNames: A list of names of retention configurations for which you want
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRetentionConfigurations(
        nextToken: String? = nil,
        retentionConfigurationNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRetentionConfigurationsResponse {
        let input = DescribeRetentionConfigurationsRequest(
            nextToken: nextToken, 
            retentionConfigurationNames: retentionConfigurationNames
        )
        return try await self.describeRetentionConfigurations(input, logger: logger)
    }

    /// Removes all resource types specified in the ResourceTypes list from the RecordingGroup of configuration recorder and excludes these resource types when recording. For this operation, the configuration recorder must use a RecordingStrategy that is either INCLUSION_BY_RESOURCE_TYPES or EXCLUSION_BY_RESOURCE_TYPES.
    @Sendable
    @inlinable
    public func disassociateResourceTypes(_ input: DisassociateResourceTypesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateResourceTypesResponse {
        try await self.client.execute(
            operation: "DisassociateResourceTypes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes all resource types specified in the ResourceTypes list from the RecordingGroup of configuration recorder and excludes these resource types when recording. For this operation, the configuration recorder must use a RecordingStrategy that is either INCLUSION_BY_RESOURCE_TYPES or EXCLUSION_BY_RESOURCE_TYPES.
    ///
    /// Parameters:
    ///   - configurationRecorderArn: The Amazon Resource Name (ARN) of the specified configuration recorder.
    ///   - resourceTypes: The list of resource types you want to remove from the recording group of the specified configuration recorder.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateResourceTypes(
        configurationRecorderArn: String,
        resourceTypes: [ResourceType],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateResourceTypesResponse {
        let input = DisassociateResourceTypesRequest(
            configurationRecorderArn: configurationRecorderArn, 
            resourceTypes: resourceTypes
        )
        return try await self.disassociateResourceTypes(input, logger: logger)
    }

    /// Returns the evaluation results for the specified Config
    /// 			rule for a specific resource in a rule. The results indicate which
    /// 			Amazon Web Services resources were evaluated by the rule, when each resource was
    /// 			last evaluated, and whether each resource complies with the rule.   The results can return an empty result page. But if you
    /// 				have a nextToken, the results are displayed on the next
    /// 				page.
    @Sendable
    @inlinable
    public func getAggregateComplianceDetailsByConfigRule(_ input: GetAggregateComplianceDetailsByConfigRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAggregateComplianceDetailsByConfigRuleResponse {
        try await self.client.execute(
            operation: "GetAggregateComplianceDetailsByConfigRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the evaluation results for the specified Config
    /// 			rule for a specific resource in a rule. The results indicate which
    /// 			Amazon Web Services resources were evaluated by the rule, when each resource was
    /// 			last evaluated, and whether each resource complies with the rule.   The results can return an empty result page. But if you
    /// 				have a nextToken, the results are displayed on the next
    /// 				page.
    ///
    /// Parameters:
    ///   - accountId: The 12-digit account ID of the source account.
    ///   - awsRegion: The source region from where the data is aggregated.
    ///   - complianceType: The resource compliance status.  For the
    ///   - configRuleName: The name of the Config rule for which you want compliance
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - nextToken: The nextToken string returned on a previous page that you use
    ///   - logger: Logger use during operation
    @inlinable
    public func getAggregateComplianceDetailsByConfigRule(
        accountId: String,
        awsRegion: String,
        complianceType: ComplianceType? = nil,
        configRuleName: String,
        configurationAggregatorName: String,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAggregateComplianceDetailsByConfigRuleResponse {
        let input = GetAggregateComplianceDetailsByConfigRuleRequest(
            accountId: accountId, 
            awsRegion: awsRegion, 
            complianceType: complianceType, 
            configRuleName: configRuleName, 
            configurationAggregatorName: configurationAggregatorName, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.getAggregateComplianceDetailsByConfigRule(input, logger: logger)
    }

    /// Returns the number of compliant and noncompliant rules for one
    /// 			or more accounts and regions in an aggregator.  The results can return an empty result page, but if you
    /// 				have a nextToken, the results are displayed on the next
    /// 				page.
    @Sendable
    @inlinable
    public func getAggregateConfigRuleComplianceSummary(_ input: GetAggregateConfigRuleComplianceSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAggregateConfigRuleComplianceSummaryResponse {
        try await self.client.execute(
            operation: "GetAggregateConfigRuleComplianceSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the number of compliant and noncompliant rules for one
    /// 			or more accounts and regions in an aggregator.  The results can return an empty result page, but if you
    /// 				have a nextToken, the results are displayed on the next
    /// 				page.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results based on the
    ///   - groupByKey: Groups the result based on ACCOUNT_ID or AWS_REGION.
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - nextToken: The nextToken string returned on a previous page that you use
    ///   - logger: Logger use during operation
    @inlinable
    public func getAggregateConfigRuleComplianceSummary(
        configurationAggregatorName: String,
        filters: ConfigRuleComplianceSummaryFilters? = nil,
        groupByKey: ConfigRuleComplianceSummaryGroupKey? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAggregateConfigRuleComplianceSummaryResponse {
        let input = GetAggregateConfigRuleComplianceSummaryRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            groupByKey: groupByKey, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.getAggregateConfigRuleComplianceSummary(input, logger: logger)
    }

    /// Returns the count of compliant and noncompliant conformance packs across all Amazon Web Services accounts and Amazon Web Services Regions in an aggregator. You can filter based on Amazon Web Services account ID or Amazon Web Services Region.  The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page.
    @Sendable
    @inlinable
    public func getAggregateConformancePackComplianceSummary(_ input: GetAggregateConformancePackComplianceSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAggregateConformancePackComplianceSummaryResponse {
        try await self.client.execute(
            operation: "GetAggregateConformancePackComplianceSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the count of compliant and noncompliant conformance packs across all Amazon Web Services accounts and Amazon Web Services Regions in an aggregator. You can filter based on Amazon Web Services account ID or Amazon Web Services Region.  The results can return an empty result page, but if you have a nextToken, the results are displayed on the next page.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results based on the AggregateConformancePackComplianceSummaryFilters object.
    ///   - groupByKey: Groups the result based on Amazon Web Services account ID or Amazon Web Services Region.
    ///   - limit: The maximum number of results returned on each page. The default is maximum. If you specify 0, Config uses the default.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAggregateConformancePackComplianceSummary(
        configurationAggregatorName: String,
        filters: AggregateConformancePackComplianceSummaryFilters? = nil,
        groupByKey: AggregateConformancePackComplianceSummaryGroupKey? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAggregateConformancePackComplianceSummaryResponse {
        let input = GetAggregateConformancePackComplianceSummaryRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            groupByKey: groupByKey, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.getAggregateConformancePackComplianceSummary(input, logger: logger)
    }

    /// Returns the resource counts across accounts and regions that are present in your Config aggregator. You can request the resource counts by providing filters and GroupByKey. For example, if the input contains accountID 12345678910 and region us-east-1 in filters, the API returns the count of resources in account ID 12345678910 and region us-east-1.
    /// 			If the input contains ACCOUNT_ID as a GroupByKey, the API returns resource counts for all source accounts that are present in your aggregator.
    @Sendable
    @inlinable
    public func getAggregateDiscoveredResourceCounts(_ input: GetAggregateDiscoveredResourceCountsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAggregateDiscoveredResourceCountsResponse {
        try await self.client.execute(
            operation: "GetAggregateDiscoveredResourceCounts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the resource counts across accounts and regions that are present in your Config aggregator. You can request the resource counts by providing filters and GroupByKey. For example, if the input contains accountID 12345678910 and region us-east-1 in filters, the API returns the count of resources in account ID 12345678910 and region us-east-1.
    /// 			If the input contains ACCOUNT_ID as a GroupByKey, the API returns resource counts for all source accounts that are present in your aggregator.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results based on the ResourceCountFilters object.
    ///   - groupByKey: The key to group the resource counts.
    ///   - limit: The maximum number of GroupedResourceCount objects returned on each page. The default is 1000. You cannot specify a number greater than 1000. If you specify 0, Config uses the default.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAggregateDiscoveredResourceCounts(
        configurationAggregatorName: String,
        filters: ResourceCountFilters? = nil,
        groupByKey: ResourceCountGroupKey? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAggregateDiscoveredResourceCountsResponse {
        let input = GetAggregateDiscoveredResourceCountsRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            groupByKey: groupByKey, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.getAggregateDiscoveredResourceCounts(input, logger: logger)
    }

    /// Returns configuration item that is aggregated for your specific resource in a specific source account and region.  The API does not return results for deleted resources.
    @Sendable
    @inlinable
    public func getAggregateResourceConfig(_ input: GetAggregateResourceConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAggregateResourceConfigResponse {
        try await self.client.execute(
            operation: "GetAggregateResourceConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns configuration item that is aggregated for your specific resource in a specific source account and region.  The API does not return results for deleted resources.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - resourceIdentifier: An object that identifies aggregate resource.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAggregateResourceConfig(
        configurationAggregatorName: String,
        resourceIdentifier: AggregateResourceIdentifier,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAggregateResourceConfigResponse {
        let input = GetAggregateResourceConfigRequest(
            configurationAggregatorName: configurationAggregatorName, 
            resourceIdentifier: resourceIdentifier
        )
        return try await self.getAggregateResourceConfig(input, logger: logger)
    }

    /// Returns the evaluation results for the specified Config
    /// 			rule. The results indicate which Amazon Web Services resources were evaluated by the
    /// 			rule, when each resource was last evaluated, and whether each
    /// 			resource complies with the rule.
    @Sendable
    @inlinable
    public func getComplianceDetailsByConfigRule(_ input: GetComplianceDetailsByConfigRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetComplianceDetailsByConfigRuleResponse {
        try await self.client.execute(
            operation: "GetComplianceDetailsByConfigRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the evaluation results for the specified Config
    /// 			rule. The results indicate which Amazon Web Services resources were evaluated by the
    /// 			rule, when each resource was last evaluated, and whether each
    /// 			resource complies with the rule.
    ///
    /// Parameters:
    ///   - complianceTypes: Filters the results by compliance.  INSUFFICIENT_DATA is a valid ComplianceType that is returned when an Config rule cannot be evaluated. However, INSUFFICIENT_DATA cannot be used as a ComplianceType for filtering results.
    ///   - configRuleName: The name of the Config rule for which you want compliance
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - logger: Logger use during operation
    @inlinable
    public func getComplianceDetailsByConfigRule(
        complianceTypes: [ComplianceType]? = nil,
        configRuleName: String,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetComplianceDetailsByConfigRuleResponse {
        let input = GetComplianceDetailsByConfigRuleRequest(
            complianceTypes: complianceTypes, 
            configRuleName: configRuleName, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.getComplianceDetailsByConfigRule(input, logger: logger)
    }

    /// Returns the evaluation results for the specified Amazon Web Services resource.
    /// 			The results indicate which Config rules were used to evaluate
    /// 			the resource, when each rule was last invoked, and whether the resource
    /// 			complies with each rule.
    @Sendable
    @inlinable
    public func getComplianceDetailsByResource(_ input: GetComplianceDetailsByResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetComplianceDetailsByResourceResponse {
        try await self.client.execute(
            operation: "GetComplianceDetailsByResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the evaluation results for the specified Amazon Web Services resource.
    /// 			The results indicate which Config rules were used to evaluate
    /// 			the resource, when each rule was last invoked, and whether the resource
    /// 			complies with each rule.
    ///
    /// Parameters:
    ///   - complianceTypes: Filters the results by compliance.  INSUFFICIENT_DATA is a valid ComplianceType that is returned when an Config rule cannot be evaluated. However, INSUFFICIENT_DATA cannot be used as a ComplianceType for filtering results.
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - resourceEvaluationId: The unique ID of Amazon Web Services resource execution for which you want to retrieve evaluation results.   You need to only provide either a ResourceEvaluationID or a ResourceID and ResourceType.
    ///   - resourceId: The ID of the Amazon Web Services resource for which you want compliance
    ///   - resourceType: The type of the Amazon Web Services resource for which you want compliance
    ///   - logger: Logger use during operation
    @inlinable
    public func getComplianceDetailsByResource(
        complianceTypes: [ComplianceType]? = nil,
        nextToken: String? = nil,
        resourceEvaluationId: String? = nil,
        resourceId: String? = nil,
        resourceType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetComplianceDetailsByResourceResponse {
        let input = GetComplianceDetailsByResourceRequest(
            complianceTypes: complianceTypes, 
            nextToken: nextToken, 
            resourceEvaluationId: resourceEvaluationId, 
            resourceId: resourceId, 
            resourceType: resourceType
        )
        return try await self.getComplianceDetailsByResource(input, logger: logger)
    }

    /// Returns the number of Config rules that are compliant and
    /// 			noncompliant, up to a maximum of 25 for each.
    @Sendable
    @inlinable
    public func getComplianceSummaryByConfigRule(logger: Logger = AWSClient.loggingDisabled) async throws -> GetComplianceSummaryByConfigRuleResponse {
        try await self.client.execute(
            operation: "GetComplianceSummaryByConfigRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            logger: logger
        )
    }

    /// Returns the number of resources that are compliant and the
    /// 			number that are noncompliant. You can specify one or more resource
    /// 			types to get these numbers for each resource type. The maximum
    /// 			number returned is 100.
    @Sendable
    @inlinable
    public func getComplianceSummaryByResourceType(_ input: GetComplianceSummaryByResourceTypeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetComplianceSummaryByResourceTypeResponse {
        try await self.client.execute(
            operation: "GetComplianceSummaryByResourceType", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the number of resources that are compliant and the
    /// 			number that are noncompliant. You can specify one or more resource
    /// 			types to get these numbers for each resource type. The maximum
    /// 			number returned is 100.
    ///
    /// Parameters:
    ///   - resourceTypes: Specify one or more resource types to get the number of
    ///   - logger: Logger use during operation
    @inlinable
    public func getComplianceSummaryByResourceType(
        resourceTypes: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetComplianceSummaryByResourceTypeResponse {
        let input = GetComplianceSummaryByResourceTypeRequest(
            resourceTypes: resourceTypes
        )
        return try await self.getComplianceSummaryByResourceType(input, logger: logger)
    }

    /// Returns compliance details of a conformance pack for all Amazon Web Services resources that are monitered by conformance pack.
    @Sendable
    @inlinable
    public func getConformancePackComplianceDetails(_ input: GetConformancePackComplianceDetailsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConformancePackComplianceDetailsResponse {
        try await self.client.execute(
            operation: "GetConformancePackComplianceDetails", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns compliance details of a conformance pack for all Amazon Web Services resources that are monitered by conformance pack.
    ///
    /// Parameters:
    ///   - conformancePackName: Name of the conformance pack.
    ///   - filters: A ConformancePackEvaluationFilters object.
    ///   - limit: The maximum number of evaluation results returned on each page. If you do no specify a number, Config uses the default. The default is 100.
    ///   - nextToken: The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func getConformancePackComplianceDetails(
        conformancePackName: String,
        filters: ConformancePackEvaluationFilters? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetConformancePackComplianceDetailsResponse {
        let input = GetConformancePackComplianceDetailsRequest(
            conformancePackName: conformancePackName, 
            filters: filters, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.getConformancePackComplianceDetails(input, logger: logger)
    }

    /// Returns compliance details for the conformance pack based on the cumulative compliance results of all the rules in that conformance pack.
    @Sendable
    @inlinable
    public func getConformancePackComplianceSummary(_ input: GetConformancePackComplianceSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConformancePackComplianceSummaryResponse {
        try await self.client.execute(
            operation: "GetConformancePackComplianceSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns compliance details for the conformance pack based on the cumulative compliance results of all the rules in that conformance pack.
    ///
    /// Parameters:
    ///   - conformancePackNames: Names of conformance packs.
    ///   - limit: The maximum number of conformance packs returned on each page.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func getConformancePackComplianceSummary(
        conformancePackNames: [String],
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetConformancePackComplianceSummaryResponse {
        let input = GetConformancePackComplianceSummaryRequest(
            conformancePackNames: conformancePackNames, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.getConformancePackComplianceSummary(input, logger: logger)
    }

    /// Returns the policy definition containing the logic for your Config Custom Policy rule.
    @Sendable
    @inlinable
    public func getCustomRulePolicy(_ input: GetCustomRulePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCustomRulePolicyResponse {
        try await self.client.execute(
            operation: "GetCustomRulePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the policy definition containing the logic for your Config Custom Policy rule.
    ///
    /// Parameters:
    ///   - configRuleName: The name of your Config Custom Policy rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCustomRulePolicy(
        configRuleName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCustomRulePolicyResponse {
        let input = GetCustomRulePolicyRequest(
            configRuleName: configRuleName
        )
        return try await self.getCustomRulePolicy(input, logger: logger)
    }

    /// Returns the resource types, the number of each resource type,
    /// 			and the total number of resources that Config is recording in
    /// 			this region for your Amazon Web Services account.   Example    Config is recording three resource types in the US
    /// 					East (Ohio) Region for your account: 25 EC2 instances, 20
    /// 					IAM users, and 15 S3 buckets.   You make a call to the
    /// 						GetDiscoveredResourceCounts action and
    /// 					specify that you want all resource types.    Config returns the following:   The resource types (EC2 instances, IAM users,
    /// 							and S3 buckets).   The number of each resource type (25, 20, and
    /// 							15).   The total number of all resources
    /// 							(60).     The response is paginated. By default, Config lists 100
    /// 				ResourceCount objects on each page. You can
    /// 			customize this number with the limit parameter. The
    /// 			response includes a nextToken string. To get the next
    /// 			page of results, run the request again and specify the string for
    /// 			the nextToken parameter.  If you make a call to the GetDiscoveredResourceCounts action, you might
    /// 				not immediately receive resource counts in the following
    /// 				situations:   You are a new Config customer.   You just enabled resource recording.   It might take a few minutes for Config to record and
    /// 				count your resources. Wait a few minutes and then retry the
    /// 					GetDiscoveredResourceCounts action.
    ///
    @Sendable
    @inlinable
    public func getDiscoveredResourceCounts(_ input: GetDiscoveredResourceCountsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDiscoveredResourceCountsResponse {
        try await self.client.execute(
            operation: "GetDiscoveredResourceCounts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the resource types, the number of each resource type,
    /// 			and the total number of resources that Config is recording in
    /// 			this region for your Amazon Web Services account.   Example    Config is recording three resource types in the US
    /// 					East (Ohio) Region for your account: 25 EC2 instances, 20
    /// 					IAM users, and 15 S3 buckets.   You make a call to the
    /// 						GetDiscoveredResourceCounts action and
    /// 					specify that you want all resource types.    Config returns the following:   The resource types (EC2 instances, IAM users,
    /// 							and S3 buckets).   The number of each resource type (25, 20, and
    /// 							15).   The total number of all resources
    /// 							(60).     The response is paginated. By default, Config lists 100
    /// 				ResourceCount objects on each page. You can
    /// 			customize this number with the limit parameter. The
    /// 			response includes a nextToken string. To get the next
    /// 			page of results, run the request again and specify the string for
    /// 			the nextToken parameter.  If you make a call to the GetDiscoveredResourceCounts action, you might
    /// 				not immediately receive resource counts in the following
    /// 				situations:   You are a new Config customer.   You just enabled resource recording.   It might take a few minutes for Config to record and
    /// 				count your resources. Wait a few minutes and then retry the
    /// 					GetDiscoveredResourceCounts action.
    ///
    ///
    /// Parameters:
    ///   - limit: The maximum number of ResourceCount objects
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - resourceTypes: The comma-separated list that specifies the resource types that
    ///   - logger: Logger use during operation
    @inlinable
    public func getDiscoveredResourceCounts(
        limit: Int? = nil,
        nextToken: String? = nil,
        resourceTypes: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDiscoveredResourceCountsResponse {
        let input = GetDiscoveredResourceCountsRequest(
            limit: limit, 
            nextToken: nextToken, 
            resourceTypes: resourceTypes
        )
        return try await self.getDiscoveredResourceCounts(input, logger: logger)
    }

    /// Returns detailed status for each member account within an organization for a given organization Config rule.
    @Sendable
    @inlinable
    public func getOrganizationConfigRuleDetailedStatus(_ input: GetOrganizationConfigRuleDetailedStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOrganizationConfigRuleDetailedStatusResponse {
        try await self.client.execute(
            operation: "GetOrganizationConfigRuleDetailedStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns detailed status for each member account within an organization for a given organization Config rule.
    ///
    /// Parameters:
    ///   - filters: A StatusDetailFilters object.
    ///   - limit: The maximum number of OrganizationConfigRuleDetailedStatus returned on each page. If you do not specify a number, Config uses the default. The default is 100.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - organizationConfigRuleName: The name of your organization Config rule for which you want status details for member accounts.
    ///   - logger: Logger use during operation
    @inlinable
    public func getOrganizationConfigRuleDetailedStatus(
        filters: StatusDetailFilters? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        organizationConfigRuleName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOrganizationConfigRuleDetailedStatusResponse {
        let input = GetOrganizationConfigRuleDetailedStatusRequest(
            filters: filters, 
            limit: limit, 
            nextToken: nextToken, 
            organizationConfigRuleName: organizationConfigRuleName
        )
        return try await self.getOrganizationConfigRuleDetailedStatus(input, logger: logger)
    }

    /// Returns detailed status for each member account within an organization for a given organization conformance pack.
    @Sendable
    @inlinable
    public func getOrganizationConformancePackDetailedStatus(_ input: GetOrganizationConformancePackDetailedStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOrganizationConformancePackDetailedStatusResponse {
        try await self.client.execute(
            operation: "GetOrganizationConformancePackDetailedStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns detailed status for each member account within an organization for a given organization conformance pack.
    ///
    /// Parameters:
    ///   - filters: An OrganizationResourceDetailedStatusFilters object.
    ///   - limit: The maximum number of OrganizationConformancePackDetailedStatuses returned on each page.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - organizationConformancePackName: The name of organization conformance pack for which you want status details for member accounts.
    ///   - logger: Logger use during operation
    @inlinable
    public func getOrganizationConformancePackDetailedStatus(
        filters: OrganizationResourceDetailedStatusFilters? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        organizationConformancePackName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOrganizationConformancePackDetailedStatusResponse {
        let input = GetOrganizationConformancePackDetailedStatusRequest(
            filters: filters, 
            limit: limit, 
            nextToken: nextToken, 
            organizationConformancePackName: organizationConformancePackName
        )
        return try await self.getOrganizationConformancePackDetailedStatus(input, logger: logger)
    }

    /// Returns the policy definition containing the logic for your organization Config Custom Policy rule.
    @Sendable
    @inlinable
    public func getOrganizationCustomRulePolicy(_ input: GetOrganizationCustomRulePolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetOrganizationCustomRulePolicyResponse {
        try await self.client.execute(
            operation: "GetOrganizationCustomRulePolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the policy definition containing the logic for your organization Config Custom Policy rule.
    ///
    /// Parameters:
    ///   - organizationConfigRuleName: The name of your organization Config Custom Policy rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func getOrganizationCustomRulePolicy(
        organizationConfigRuleName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetOrganizationCustomRulePolicyResponse {
        let input = GetOrganizationCustomRulePolicyRequest(
            organizationConfigRuleName: organizationConfigRuleName
        )
        return try await self.getOrganizationCustomRulePolicy(input, logger: logger)
    }

    ///  For accurate reporting on the compliance status, you must record the AWS::Config::ResourceCompliance resource type.
    /// 			For more information, see Selecting Which Resources Config Records.  Returns a list of ConfigurationItems for the specified resource.
    /// 			The list contains details about each state of the resource
    /// 			during the specified time interval. If you specified a retention
    /// 			period to retain your ConfigurationItems between a
    /// 			minimum of 30 days and a maximum of 7 years (2557 days), Config
    /// 			returns the ConfigurationItems for the specified
    /// 			retention period.  The response is paginated. By default, Config returns a
    /// 			limit of 10 configuration items per page. You can customize this
    /// 			number with the limit parameter. The response includes
    /// 			a nextToken string. To get the next page of results,
    /// 			run the request again and specify the string for the
    /// 				nextToken parameter.  Each call to the API is limited to span a duration of seven
    /// 				days. It is likely that the number of records returned is
    /// 				smaller than the specified limit. In such cases,
    /// 				you can make another call, using the
    /// 				nextToken.
    @Sendable
    @inlinable
    public func getResourceConfigHistory(_ input: GetResourceConfigHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourceConfigHistoryResponse {
        try await self.client.execute(
            operation: "GetResourceConfigHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  For accurate reporting on the compliance status, you must record the AWS::Config::ResourceCompliance resource type.
    /// 			For more information, see Selecting Which Resources Config Records.  Returns a list of ConfigurationItems for the specified resource.
    /// 			The list contains details about each state of the resource
    /// 			during the specified time interval. If you specified a retention
    /// 			period to retain your ConfigurationItems between a
    /// 			minimum of 30 days and a maximum of 7 years (2557 days), Config
    /// 			returns the ConfigurationItems for the specified
    /// 			retention period.  The response is paginated. By default, Config returns a
    /// 			limit of 10 configuration items per page. You can customize this
    /// 			number with the limit parameter. The response includes
    /// 			a nextToken string. To get the next page of results,
    /// 			run the request again and specify the string for the
    /// 				nextToken parameter.  Each call to the API is limited to span a duration of seven
    /// 				days. It is likely that the number of records returned is
    /// 				smaller than the specified limit. In such cases,
    /// 				you can make another call, using the
    /// 				nextToken.
    ///
    /// Parameters:
    ///   - chronologicalOrder: The chronological order for configuration items listed. By
    ///   - earlierTime: The chronologically earliest time in the time range for which the history requested. If not
    ///   - laterTime: The chronologically latest time in the time range for which the history requested. If not specified,
    ///   - limit: The maximum number of configuration items returned on each
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - resourceId: The ID of the resource (for example.,
    ///   - resourceType: The resource type.
    ///   - logger: Logger use during operation
    @inlinable
    public func getResourceConfigHistory(
        chronologicalOrder: ChronologicalOrder? = nil,
        earlierTime: Date? = nil,
        laterTime: Date? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        resourceId: String,
        resourceType: ResourceType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetResourceConfigHistoryResponse {
        let input = GetResourceConfigHistoryRequest(
            chronologicalOrder: chronologicalOrder, 
            earlierTime: earlierTime, 
            laterTime: laterTime, 
            limit: limit, 
            nextToken: nextToken, 
            resourceId: resourceId, 
            resourceType: resourceType
        )
        return try await self.getResourceConfigHistory(input, logger: logger)
    }

    /// Returns a summary of resource evaluation for the specified resource evaluation ID from the proactive rules that were run.
    /// 			The results indicate which evaluation context was used to evaluate the rules, which resource details were evaluated,
    /// 			the evaluation mode that was run, and whether the resource details comply with the configuration of the proactive rules.   To see additional information about the evaluation result, such as which rule flagged a resource as NON_COMPLIANT, use the GetComplianceDetailsByResource API.
    /// 			For more information, see the  Examples section.
    @Sendable
    @inlinable
    public func getResourceEvaluationSummary(_ input: GetResourceEvaluationSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetResourceEvaluationSummaryResponse {
        try await self.client.execute(
            operation: "GetResourceEvaluationSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a summary of resource evaluation for the specified resource evaluation ID from the proactive rules that were run.
    /// 			The results indicate which evaluation context was used to evaluate the rules, which resource details were evaluated,
    /// 			the evaluation mode that was run, and whether the resource details comply with the configuration of the proactive rules.   To see additional information about the evaluation result, such as which rule flagged a resource as NON_COMPLIANT, use the GetComplianceDetailsByResource API.
    /// 			For more information, see the  Examples section.
    ///
    /// Parameters:
    ///   - resourceEvaluationId: The unique ResourceEvaluationId of Amazon Web Services resource execution for which you want to retrieve the evaluation summary.
    ///   - logger: Logger use during operation
    @inlinable
    public func getResourceEvaluationSummary(
        resourceEvaluationId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetResourceEvaluationSummaryResponse {
        let input = GetResourceEvaluationSummaryRequest(
            resourceEvaluationId: resourceEvaluationId
        )
        return try await self.getResourceEvaluationSummary(input, logger: logger)
    }

    /// Returns the details of a specific stored query.
    @Sendable
    @inlinable
    public func getStoredQuery(_ input: GetStoredQueryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStoredQueryResponse {
        try await self.client.execute(
            operation: "GetStoredQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the details of a specific stored query.
    ///
    /// Parameters:
    ///   - queryName: The name of the query.
    ///   - logger: Logger use during operation
    @inlinable
    public func getStoredQuery(
        queryName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetStoredQueryResponse {
        let input = GetStoredQueryRequest(
            queryName: queryName
        )
        return try await self.getStoredQuery(input, logger: logger)
    }

    /// Accepts a resource type and returns a list of resource identifiers that are aggregated for a specific resource type across accounts and regions.
    /// 			A resource identifier includes the resource type, ID, (if available) the custom resource name, source account, and source region.
    /// 			You can narrow the results to include only resources that have specific resource IDs, or a resource name, or source account ID, or source region. For example, if the input consists of accountID 12345678910 and the region is us-east-1 for resource type AWS::EC2::Instance then the API returns all the EC2 instance identifiers of accountID 12345678910 and region us-east-1.
    @Sendable
    @inlinable
    public func listAggregateDiscoveredResources(_ input: ListAggregateDiscoveredResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAggregateDiscoveredResourcesResponse {
        try await self.client.execute(
            operation: "ListAggregateDiscoveredResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a resource type and returns a list of resource identifiers that are aggregated for a specific resource type across accounts and regions.
    /// 			A resource identifier includes the resource type, ID, (if available) the custom resource name, source account, and source region.
    /// 			You can narrow the results to include only resources that have specific resource IDs, or a resource name, or source account ID, or source region. For example, if the input consists of accountID 12345678910 and the region is us-east-1 for resource type AWS::EC2::Instance then the API returns all the EC2 instance identifiers of accountID 12345678910 and region us-east-1.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results based on the ResourceFilters object.
    ///   - limit: The maximum number of resource identifiers returned on each page. You cannot specify a number greater than 100. If you specify 0, Config uses the default.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - resourceType: The type of resources that you want Config to list in the response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listAggregateDiscoveredResources(
        configurationAggregatorName: String,
        filters: ResourceFilters? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        resourceType: ResourceType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListAggregateDiscoveredResourcesResponse {
        let input = ListAggregateDiscoveredResourcesRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            limit: limit, 
            nextToken: nextToken, 
            resourceType: resourceType
        )
        return try await self.listAggregateDiscoveredResources(input, logger: logger)
    }

    /// Returns a list of configuration recorders depending on the filters you specify.
    @Sendable
    @inlinable
    public func listConfigurationRecorders(_ input: ListConfigurationRecordersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConfigurationRecordersResponse {
        try await self.client.execute(
            operation: "ListConfigurationRecorders", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of configuration recorders depending on the filters you specify.
    ///
    /// Parameters:
    ///   - filters: Filters the results based on a list of ConfigurationRecorderFilter objects that you specify.
    ///   - maxResults: The maximum number of results to include in the response.
    ///   - nextToken: The NextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listConfigurationRecorders(
        filters: [ConfigurationRecorderFilter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListConfigurationRecordersResponse {
        let input = ListConfigurationRecordersRequest(
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listConfigurationRecorders(input, logger: logger)
    }

    /// Returns a list of conformance pack compliance scores.
    /// 			A compliance score is the percentage of the number of compliant rule-resource combinations in a conformance pack compared to the number of total possible rule-resource combinations in the conformance pack.
    /// 			This metric provides you with a high-level view of the compliance state of your conformance packs. You can use it to identify, investigate, and understand
    /// 			the level of compliance in your conformance packs.  Conformance packs with no evaluation results will have a compliance score of INSUFFICIENT_DATA.
    @Sendable
    @inlinable
    public func listConformancePackComplianceScores(_ input: ListConformancePackComplianceScoresRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListConformancePackComplianceScoresResponse {
        try await self.client.execute(
            operation: "ListConformancePackComplianceScores", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of conformance pack compliance scores.
    /// 			A compliance score is the percentage of the number of compliant rule-resource combinations in a conformance pack compared to the number of total possible rule-resource combinations in the conformance pack.
    /// 			This metric provides you with a high-level view of the compliance state of your conformance packs. You can use it to identify, investigate, and understand
    /// 			the level of compliance in your conformance packs.  Conformance packs with no evaluation results will have a compliance score of INSUFFICIENT_DATA.
    ///
    /// Parameters:
    ///   - filters: Filters the results based on the ConformancePackComplianceScoresFilters.
    ///   - limit: The maximum number of conformance pack compliance scores returned on each page.
    ///   - nextToken: The nextToken string in a prior request that you can use to get the paginated response for the next set of conformance pack compliance scores.
    ///   - sortBy: Sorts your conformance pack compliance scores in either ascending or descending order, depending on SortOrder. By default, conformance pack compliance scores are sorted in alphabetical order by name of the conformance pack.
    ///   - sortOrder: Determines the order in which conformance pack compliance scores are sorted. Either in ascending or descending order. By default, conformance pack compliance scores are sorted in alphabetical order by name of the conformance pack. Conformance pack compliance scores are sorted in reverse alphabetical order if you enter DESCENDING. You can sort conformance pack compliance scores by the numerical value of the compliance score by entering SCORE in the SortBy action. When compliance scores are sorted by SCORE, conformance packs with a compliance score of INSUFFICIENT_DATA will be last when sorting by ascending order and first when sorting by descending order.
    ///   - logger: Logger use during operation
    @inlinable
    public func listConformancePackComplianceScores(
        filters: ConformancePackComplianceScoresFilters? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        sortBy: SortBy? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListConformancePackComplianceScoresResponse {
        let input = ListConformancePackComplianceScoresRequest(
            filters: filters, 
            limit: limit, 
            nextToken: nextToken, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return try await self.listConformancePackComplianceScores(input, logger: logger)
    }

    /// Accepts a resource type and returns a list of resource
    /// 			identifiers for the resources of that type. A resource identifier
    /// 			includes the resource type, ID, and (if available) the custom
    /// 			resource name. The results consist of resources that Config has
    /// 			discovered, including those that Config is not currently
    /// 			recording. You can narrow the results to include only resources that
    /// 			have specific resource IDs or a resource name.  You can specify either resource IDs or a resource name, but
    /// 				not both, in the same request.  The response is paginated. By default, Config lists 100
    /// 			resource identifiers on each page. You can customize this number
    /// 			with the limit parameter. The response includes a
    /// 				nextToken string. To get the next page of results,
    /// 			run the request again and specify the string for the
    /// 				nextToken parameter.
    @Sendable
    @inlinable
    public func listDiscoveredResources(_ input: ListDiscoveredResourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListDiscoveredResourcesResponse {
        try await self.client.execute(
            operation: "ListDiscoveredResources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a resource type and returns a list of resource
    /// 			identifiers for the resources of that type. A resource identifier
    /// 			includes the resource type, ID, and (if available) the custom
    /// 			resource name. The results consist of resources that Config has
    /// 			discovered, including those that Config is not currently
    /// 			recording. You can narrow the results to include only resources that
    /// 			have specific resource IDs or a resource name.  You can specify either resource IDs or a resource name, but
    /// 				not both, in the same request.  The response is paginated. By default, Config lists 100
    /// 			resource identifiers on each page. You can customize this number
    /// 			with the limit parameter. The response includes a
    /// 				nextToken string. To get the next page of results,
    /// 			run the request again and specify the string for the
    /// 				nextToken parameter.
    ///
    /// Parameters:
    ///   - includeDeletedResources: Specifies whether Config includes deleted resources in the
    ///   - limit: The maximum number of resource identifiers returned on each
    ///   - nextToken: The nextToken string returned on a previous page
    ///   - resourceIds: The IDs of only those resources that you want Config to
    ///   - resourceName: The custom name of only those resources that you want Config to list in the response. If you do not specify this
    ///   - resourceType: The type of resources that you want Config to list in the
    ///   - logger: Logger use during operation
    @inlinable
    public func listDiscoveredResources(
        includeDeletedResources: Bool? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        resourceIds: [String]? = nil,
        resourceName: String? = nil,
        resourceType: ResourceType,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListDiscoveredResourcesResponse {
        let input = ListDiscoveredResourcesRequest(
            includeDeletedResources: includeDeletedResources, 
            limit: limit, 
            nextToken: nextToken, 
            resourceIds: resourceIds, 
            resourceName: resourceName, 
            resourceType: resourceType
        )
        return try await self.listDiscoveredResources(input, logger: logger)
    }

    /// Returns a list of proactive resource evaluations.
    @Sendable
    @inlinable
    public func listResourceEvaluations(_ input: ListResourceEvaluationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListResourceEvaluationsResponse {
        try await self.client.execute(
            operation: "ListResourceEvaluations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of proactive resource evaluations.
    ///
    /// Parameters:
    ///   - filters: Returns a ResourceEvaluationFilters object.
    ///   - limit: The maximum number of evaluations returned on each page. The default is 10.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listResourceEvaluations(
        filters: ResourceEvaluationFilters? = nil,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListResourceEvaluationsResponse {
        let input = ListResourceEvaluationsRequest(
            filters: filters, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.listResourceEvaluations(input, logger: logger)
    }

    /// Lists the stored queries for a single Amazon Web Services account and a single Amazon Web Services Region. The default is 100.
    @Sendable
    @inlinable
    public func listStoredQueries(_ input: ListStoredQueriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStoredQueriesResponse {
        try await self.client.execute(
            operation: "ListStoredQueries", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the stored queries for a single Amazon Web Services account and a single Amazon Web Services Region. The default is 100.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of results to be returned with a single call.
    ///   - nextToken: The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func listStoredQueries(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListStoredQueriesResponse {
        let input = ListStoredQueriesRequest(
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listStoredQueries(input, logger: logger)
    }

    /// List the tags for Config resource.
    @Sendable
    @inlinable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// List the tags for Config resource.
    ///
    /// Parameters:
    ///   - limit: The maximum number of tags returned on each page. The limit maximum is 50. You cannot specify a number greater than 50. If you specify 0, Config uses the default.
    ///   - nextToken: The nextToken string returned on a previous page that you use to get the next page of results in a paginated response.
    ///   - resourceArn: The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. The following resources are supported:    ConfigurationRecorder     ConfigRule     OrganizationConfigRule     ConformancePack     OrganizationConformancePack     ConfigurationAggregator     AggregationAuthorization     StoredQuery
    ///   - logger: Logger use during operation
    @inlinable
    public func listTagsForResource(
        limit: Int? = nil,
        nextToken: String? = nil,
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListTagsForResourceResponse {
        let input = ListTagsForResourceRequest(
            limit: limit, 
            nextToken: nextToken, 
            resourceArn: resourceArn
        )
        return try await self.listTagsForResource(input, logger: logger)
    }

    /// Authorizes the aggregator account and region to collect data
    /// 			from the source account and region.    Tags are added at creation and cannot be updated with this operation   PutAggregationAuthorization is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 			Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different. Use TagResource and UntagResource to update tags after creation.
    @Sendable
    @inlinable
    public func putAggregationAuthorization(_ input: PutAggregationAuthorizationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutAggregationAuthorizationResponse {
        try await self.client.execute(
            operation: "PutAggregationAuthorization", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Authorizes the aggregator account and region to collect data
    /// 			from the source account and region.    Tags are added at creation and cannot be updated with this operation   PutAggregationAuthorization is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 			Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different. Use TagResource and UntagResource to update tags after creation.
    ///
    /// Parameters:
    ///   - authorizedAccountId: The 12-digit account ID of the account authorized to aggregate data.
    ///   - authorizedAwsRegion: The region authorized to collect aggregated data.
    ///   - tags: An array of tag object.
    ///   - logger: Logger use during operation
    @inlinable
    public func putAggregationAuthorization(
        authorizedAccountId: String,
        authorizedAwsRegion: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutAggregationAuthorizationResponse {
        let input = PutAggregationAuthorizationRequest(
            authorizedAccountId: authorizedAccountId, 
            authorizedAwsRegion: authorizedAwsRegion, 
            tags: tags
        )
        return try await self.putAggregationAuthorization(input, logger: logger)
    }

    /// Adds or updates an Config rule to evaluate if your
    /// 			Amazon Web Services resources comply with your desired configurations. For information on how many Config rules you can have per account,
    /// 			see  Service Limits in the Config Developer Guide. There are two types of rules: Config Managed Rules and Config Custom Rules.
    /// 			You can use PutConfigRule to create both Config Managed Rules and  Config Custom Rules. Config Managed Rules are predefined,
    /// 			customizable rules created by Config. For a list of managed rules, see
    /// 			List of Config
    /// 				Managed Rules. If you are adding an Config managed rule, you must specify the
    /// 			rule's identifier for the SourceIdentifier key. Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions
    /// 			( Lambda Developer Guide) and with Guard (Guard GitHub
    /// 					Repository), a policy-as-code language.
    ///
    /// 			Config custom rules created with Lambda
    /// 			are called Config Custom Lambda Rules and Config custom rules created with
    /// 			Guard are called Config Custom Policy Rules. If you are adding a new Config Custom Lambda rule,
    /// 			you first need to create an Lambda function that the rule invokes to evaluate
    /// 			your resources. When you use PutConfigRule to add a Custom Lambda rule to Config, you must specify the Amazon Resource
    /// 			Name (ARN) that Lambda assigns to the function. You specify the ARN
    /// 			in the SourceIdentifier key. This key is part of the
    /// 			Source object, which is part of the
    /// 			ConfigRule object.  For any new Config rule that you add, specify the
    /// 				ConfigRuleName in the ConfigRule
    /// 			object. Do not specify the ConfigRuleArn or the
    /// 			ConfigRuleId. These values are generated by Config for new rules. If you are updating a rule that you added previously, you can
    /// 			specify the rule by ConfigRuleName,
    /// 				ConfigRuleId, or ConfigRuleArn in the
    /// 				ConfigRule data type that you use in this
    /// 			request. For more information about developing and using Config
    /// 			rules, see Evaluating Resources with Config Rules
    /// 			in the Config Developer Guide.   Tags are added at creation and cannot be updated with this operation   PutConfigRule is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 			Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different. Use TagResource and UntagResource to update tags after creation.
    @Sendable
    @inlinable
    public func putConfigRule(_ input: PutConfigRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutConfigRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or updates an Config rule to evaluate if your
    /// 			Amazon Web Services resources comply with your desired configurations. For information on how many Config rules you can have per account,
    /// 			see  Service Limits in the Config Developer Guide. There are two types of rules: Config Managed Rules and Config Custom Rules.
    /// 			You can use PutConfigRule to create both Config Managed Rules and  Config Custom Rules. Config Managed Rules are predefined,
    /// 			customizable rules created by Config. For a list of managed rules, see
    /// 			List of Config
    /// 				Managed Rules. If you are adding an Config managed rule, you must specify the
    /// 			rule's identifier for the SourceIdentifier key. Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions
    /// 			( Lambda Developer Guide) and with Guard (Guard GitHub
    /// 					Repository), a policy-as-code language.
    ///
    /// 			Config custom rules created with Lambda
    /// 			are called Config Custom Lambda Rules and Config custom rules created with
    /// 			Guard are called Config Custom Policy Rules. If you are adding a new Config Custom Lambda rule,
    /// 			you first need to create an Lambda function that the rule invokes to evaluate
    /// 			your resources. When you use PutConfigRule to add a Custom Lambda rule to Config, you must specify the Amazon Resource
    /// 			Name (ARN) that Lambda assigns to the function. You specify the ARN
    /// 			in the SourceIdentifier key. This key is part of the
    /// 			Source object, which is part of the
    /// 			ConfigRule object.  For any new Config rule that you add, specify the
    /// 				ConfigRuleName in the ConfigRule
    /// 			object. Do not specify the ConfigRuleArn or the
    /// 			ConfigRuleId. These values are generated by Config for new rules. If you are updating a rule that you added previously, you can
    /// 			specify the rule by ConfigRuleName,
    /// 				ConfigRuleId, or ConfigRuleArn in the
    /// 				ConfigRule data type that you use in this
    /// 			request. For more information about developing and using Config
    /// 			rules, see Evaluating Resources with Config Rules
    /// 			in the Config Developer Guide.   Tags are added at creation and cannot be updated with this operation   PutConfigRule is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 			Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different. Use TagResource and UntagResource to update tags after creation.
    ///
    /// Parameters:
    ///   - configRule: The rule that you want to add to your account.
    ///   - tags: An array of tag object.
    ///   - logger: Logger use during operation
    @inlinable
    public func putConfigRule(
        configRule: ConfigRule,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutConfigRuleRequest(
            configRule: configRule, 
            tags: tags
        )
        return try await self.putConfigRule(input, logger: logger)
    }

    /// Creates and updates the configuration aggregator with the
    /// 			selected source accounts and regions. The source account can be
    /// 			individual account(s) or an organization.  accountIds that are passed will be replaced with existing accounts.
    /// 			If you want to add additional accounts into the aggregator, call DescribeConfigurationAggregators to get the previous accounts and then append new ones.  Config should be enabled in source accounts and regions
    /// 				you want to aggregate. If your source type is an organization, you must be signed in to the management account or a registered delegated administrator and all the features must be enabled in your organization.
    /// 				If the caller is a management account, Config calls EnableAwsServiceAccess API to enable integration between Config and Organizations.
    /// 				If the caller is a registered delegated administrator, Config calls ListDelegatedAdministrators API to verify whether the caller is a valid delegated administrator. To register a delegated administrator, see Register a Delegated Administrator in the Config developer guide.     Tags are added at creation and cannot be updated with this operation   PutConfigurationAggregator is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 			Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different. Use TagResource and UntagResource to update tags after creation.
    @Sendable
    @inlinable
    public func putConfigurationAggregator(_ input: PutConfigurationAggregatorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutConfigurationAggregatorResponse {
        try await self.client.execute(
            operation: "PutConfigurationAggregator", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates and updates the configuration aggregator with the
    /// 			selected source accounts and regions. The source account can be
    /// 			individual account(s) or an organization.  accountIds that are passed will be replaced with existing accounts.
    /// 			If you want to add additional accounts into the aggregator, call DescribeConfigurationAggregators to get the previous accounts and then append new ones.  Config should be enabled in source accounts and regions
    /// 				you want to aggregate. If your source type is an organization, you must be signed in to the management account or a registered delegated administrator and all the features must be enabled in your organization.
    /// 				If the caller is a management account, Config calls EnableAwsServiceAccess API to enable integration between Config and Organizations.
    /// 				If the caller is a registered delegated administrator, Config calls ListDelegatedAdministrators API to verify whether the caller is a valid delegated administrator. To register a delegated administrator, see Register a Delegated Administrator in the Config developer guide.     Tags are added at creation and cannot be updated with this operation   PutConfigurationAggregator is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 			Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different. Use TagResource and UntagResource to update tags after creation.
    ///
    /// Parameters:
    ///   - accountAggregationSources: A list of AccountAggregationSource object.
    ///   - aggregatorFilters: An object to filter configuration recorders in an aggregator. Either ResourceType or ServicePrincipal is required.
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - organizationAggregationSource: An OrganizationAggregationSource object.
    ///   - tags: An array of tag object.
    ///   - logger: Logger use during operation
    @inlinable
    public func putConfigurationAggregator(
        accountAggregationSources: [AccountAggregationSource]? = nil,
        aggregatorFilters: AggregatorFilters? = nil,
        configurationAggregatorName: String,
        organizationAggregationSource: OrganizationAggregationSource? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutConfigurationAggregatorResponse {
        let input = PutConfigurationAggregatorRequest(
            accountAggregationSources: accountAggregationSources, 
            aggregatorFilters: aggregatorFilters, 
            configurationAggregatorName: configurationAggregatorName, 
            organizationAggregationSource: organizationAggregationSource, 
            tags: tags
        )
        return try await self.putConfigurationAggregator(input, logger: logger)
    }

    /// Creates or updates the customer managed configuration recorder. You can use this operation to create a new customer managed configuration recorder or to update the roleARN and the recordingGroup for an existing customer managed configuration recorder. To start the customer managed configuration recorder and begin recording configuration changes for the resource types you specify,
    /// 			use the StartConfigurationRecorder operation. For more information, see  Working with the Configuration Recorder in the Config Developer Guide.   One customer managed configuration recorder per account per Region  You can create only one customer managed configuration recorder for each account for each Amazon Web Services Region.  Default is to record all supported resource types, excluding the global IAM resource types  If you have not specified values for the recordingGroup field, the default for the customer managed configuration recorder is to record all supported resource
    /// 				types, excluding the global IAM resource types: AWS::IAM::Group, AWS::IAM::Policy, AWS::IAM::Role, and AWS::IAM::User.  Tags are added at creation and cannot be updated   PutConfigurationRecorder is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 				Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different. Use TagResource and UntagResource to update tags after creation.
    @Sendable
    @inlinable
    public func putConfigurationRecorder(_ input: PutConfigurationRecorderRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutConfigurationRecorder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates the customer managed configuration recorder. You can use this operation to create a new customer managed configuration recorder or to update the roleARN and the recordingGroup for an existing customer managed configuration recorder. To start the customer managed configuration recorder and begin recording configuration changes for the resource types you specify,
    /// 			use the StartConfigurationRecorder operation. For more information, see  Working with the Configuration Recorder in the Config Developer Guide.   One customer managed configuration recorder per account per Region  You can create only one customer managed configuration recorder for each account for each Amazon Web Services Region.  Default is to record all supported resource types, excluding the global IAM resource types  If you have not specified values for the recordingGroup field, the default for the customer managed configuration recorder is to record all supported resource
    /// 				types, excluding the global IAM resource types: AWS::IAM::Group, AWS::IAM::Policy, AWS::IAM::Role, and AWS::IAM::User.  Tags are added at creation and cannot be updated   PutConfigurationRecorder is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 				Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different. Use TagResource and UntagResource to update tags after creation.
    ///
    /// Parameters:
    ///   - configurationRecorder: An object for the configuration recorder. A configuration recorder records configuration changes for the resource types in scope.
    ///   - tags: The tags for the customer managed configuration recorder. Each tag consists of a key and an optional value, both of which you define.
    ///   - logger: Logger use during operation
    @inlinable
    public func putConfigurationRecorder(
        configurationRecorder: ConfigurationRecorder,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutConfigurationRecorderRequest(
            configurationRecorder: configurationRecorder, 
            tags: tags
        )
        return try await self.putConfigurationRecorder(input, logger: logger)
    }

    /// Creates or updates a conformance pack. A conformance pack is a collection of Config rules that can be easily deployed in an account and a region and across an organization.
    /// 			For information on how many conformance packs you can have per account,
    /// 			see  Service Limits in the Config Developer Guide. This API creates a service-linked role AWSServiceRoleForConfigConforms in your account.
    /// 		The service-linked role is created only when the role does not exist in your account.   You must specify only one of the follow parameters: TemplateS3Uri, TemplateBody or TemplateSSMDocumentDetails.
    @Sendable
    @inlinable
    public func putConformancePack(_ input: PutConformancePackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutConformancePackResponse {
        try await self.client.execute(
            operation: "PutConformancePack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a conformance pack. A conformance pack is a collection of Config rules that can be easily deployed in an account and a region and across an organization.
    /// 			For information on how many conformance packs you can have per account,
    /// 			see  Service Limits in the Config Developer Guide. This API creates a service-linked role AWSServiceRoleForConfigConforms in your account.
    /// 		The service-linked role is created only when the role does not exist in your account.   You must specify only one of the follow parameters: TemplateS3Uri, TemplateBody or TemplateSSMDocumentDetails.
    ///
    /// Parameters:
    ///   - conformancePackInputParameters: A list of ConformancePackInputParameter objects.
    ///   - conformancePackName: The unique name of the conformance pack you want to deploy.
    ///   - deliveryS3Bucket: The name of the Amazon S3 bucket where Config stores conformance pack templates.  This field is optional.
    ///   - deliveryS3KeyPrefix: The prefix for the Amazon S3 bucket.   This field is optional.
    ///   - templateBody: A string containing the full conformance pack template body. The structure containing the template body has a minimum length of 1 byte and a maximum length of 51,200 bytes.  You can use a YAML template with two resource types: Config rule (AWS::Config::ConfigRule) and remediation action (AWS::Config::RemediationConfiguration).
    ///   - templateS3Uri: The location of the file containing the template body (s3://bucketname/prefix). The uri must point to a conformance pack template (max size: 300 KB) that is located in an Amazon S3 bucket in the same Region as the conformance pack.   You must have access to read Amazon S3 bucket.
    ///   - templateSSMDocumentDetails: An object of type TemplateSSMDocumentDetails, which contains the name or the Amazon Resource Name (ARN) of the Amazon Web Services Systems Manager document (SSM document) and the version of the SSM document that is used to create a conformance pack.
    ///   - logger: Logger use during operation
    @inlinable
    public func putConformancePack(
        conformancePackInputParameters: [ConformancePackInputParameter]? = nil,
        conformancePackName: String,
        deliveryS3Bucket: String? = nil,
        deliveryS3KeyPrefix: String? = nil,
        templateBody: String? = nil,
        templateS3Uri: String? = nil,
        templateSSMDocumentDetails: TemplateSSMDocumentDetails? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutConformancePackResponse {
        let input = PutConformancePackRequest(
            conformancePackInputParameters: conformancePackInputParameters, 
            conformancePackName: conformancePackName, 
            deliveryS3Bucket: deliveryS3Bucket, 
            deliveryS3KeyPrefix: deliveryS3KeyPrefix, 
            templateBody: templateBody, 
            templateS3Uri: templateS3Uri, 
            templateSSMDocumentDetails: templateSSMDocumentDetails
        )
        return try await self.putConformancePack(input, logger: logger)
    }

    /// Creates or updates a delivery channel to deliver configuration
    /// 			information and other compliance information. You can use this operation to create a new delivery channel or to update the Amazon S3 bucket and the
    /// 			Amazon SNS topic of an existing delivery channel. For more information, see  Working with the Delivery Channel in the Config Developer Guide.    One delivery channel per account per Region  You can have only one delivery channel for each account for each Amazon Web Services Region.
    @Sendable
    @inlinable
    public func putDeliveryChannel(_ input: PutDeliveryChannelRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutDeliveryChannel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates or updates a delivery channel to deliver configuration
    /// 			information and other compliance information. You can use this operation to create a new delivery channel or to update the Amazon S3 bucket and the
    /// 			Amazon SNS topic of an existing delivery channel. For more information, see  Working with the Delivery Channel in the Config Developer Guide.    One delivery channel per account per Region  You can have only one delivery channel for each account for each Amazon Web Services Region.
    ///
    /// Parameters:
    ///   - deliveryChannel: An object for the delivery channel. A delivery channel sends notifications and updated configuration states.
    ///   - logger: Logger use during operation
    @inlinable
    public func putDeliveryChannel(
        deliveryChannel: DeliveryChannel,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutDeliveryChannelRequest(
            deliveryChannel: deliveryChannel
        )
        return try await self.putDeliveryChannel(input, logger: logger)
    }

    /// Used by an Lambda function to deliver evaluation results to
    /// 			Config. This operation is required in every Lambda function
    /// 			that is invoked by an Config rule.
    @Sendable
    @inlinable
    public func putEvaluations(_ input: PutEvaluationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutEvaluationsResponse {
        try await self.client.execute(
            operation: "PutEvaluations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Used by an Lambda function to deliver evaluation results to
    /// 			Config. This operation is required in every Lambda function
    /// 			that is invoked by an Config rule.
    ///
    /// Parameters:
    ///   - evaluations: The assessments that the Lambda function performs. Each
    ///   - resultToken: An encrypted token that associates an evaluation with an Config rule. Identifies the rule and the event that triggered the
    ///   - testMode: Use this parameter to specify a test run for
    ///   - logger: Logger use during operation
    @inlinable
    public func putEvaluations(
        evaluations: [Evaluation]? = nil,
        resultToken: String,
        testMode: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutEvaluationsResponse {
        let input = PutEvaluationsRequest(
            evaluations: evaluations, 
            resultToken: resultToken, 
            testMode: testMode
        )
        return try await self.putEvaluations(input, logger: logger)
    }

    /// Add or updates the evaluations for process checks.
    /// 			This API checks if the rule is a process check when the name of the Config rule is provided.
    @Sendable
    @inlinable
    public func putExternalEvaluation(_ input: PutExternalEvaluationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutExternalEvaluationResponse {
        try await self.client.execute(
            operation: "PutExternalEvaluation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Add or updates the evaluations for process checks.
    /// 			This API checks if the rule is a process check when the name of the Config rule is provided.
    ///
    /// Parameters:
    ///   - configRuleName: The name of the Config rule.
    ///   - externalEvaluation: An ExternalEvaluation object that provides details about compliance.
    ///   - logger: Logger use during operation
    @inlinable
    public func putExternalEvaluation(
        configRuleName: String,
        externalEvaluation: ExternalEvaluation,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutExternalEvaluationResponse {
        let input = PutExternalEvaluationRequest(
            configRuleName: configRuleName, 
            externalEvaluation: externalEvaluation
        )
        return try await self.putExternalEvaluation(input, logger: logger)
    }

    /// Adds or updates an Config rule for your entire organization to evaluate if your Amazon Web Services resources comply with your
    /// 			desired configurations. For information on how many organization Config rules you can have per account,
    /// 			see  Service Limits in the Config Developer Guide. Only a management account and a delegated administrator can create or update an organization Config rule.
    /// 		When calling this API with a delegated administrator, you must ensure Organizations
    /// 		ListDelegatedAdministrator permissions are added. An organization can have up to 3 delegated administrators. This API enables organization service access through the EnableAWSServiceAccess action and creates a service-linked
    /// 			role AWSServiceRoleForConfigMultiAccountSetup in the management or delegated administrator account of your organization.
    /// 			The service-linked role is created only when the role does not exist in the caller account.
    /// 			Config verifies the existence of role with GetRole action. To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization
    /// 			register-delegated-administrator for config-multiaccountsetup.amazonaws.com.  There are two types of rules: Config Managed Rules and Config Custom Rules.
    /// 			You can use PutOrganizationConfigRule to create both Config Managed Rules and Config Custom Rules. Config Managed Rules are predefined,
    /// 			customizable rules created by Config. For a list of managed rules, see
    /// 			List of Config
    /// 				Managed Rules. If you are adding an Config managed rule, you must specify the rule's identifier for the RuleIdentifier key. Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions
    /// 			( Lambda Developer Guide) and with Guard (Guard GitHub
    /// 					Repository), a policy-as-code language.
    ///
    /// 			Config custom rules created with Lambda
    /// 			are called Config Custom Lambda Rules and Config custom rules created with
    /// 			Guard are called Config Custom Policy Rules. If you are adding a new Config Custom Lambda rule, you first need to create an Lambda function in the management account or a delegated
    /// 		administrator that the rule invokes to evaluate your resources. You also need to create an IAM role in the managed account that can be assumed by the Lambda function.
    /// 		When you use PutOrganizationConfigRule to add a Custom Lambda rule to Config, you must
    /// 			specify the Amazon Resource Name (ARN) that Lambda assigns to the function.  Prerequisite: Ensure you call EnableAllFeatures API to enable all features in an organization. Make sure to specify one of either OrganizationCustomPolicyRuleMetadata for Custom Policy rules, OrganizationCustomRuleMetadata for Custom Lambda rules, or OrganizationManagedRuleMetadata for managed rules.
    @Sendable
    @inlinable
    public func putOrganizationConfigRule(_ input: PutOrganizationConfigRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutOrganizationConfigRuleResponse {
        try await self.client.execute(
            operation: "PutOrganizationConfigRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or updates an Config rule for your entire organization to evaluate if your Amazon Web Services resources comply with your
    /// 			desired configurations. For information on how many organization Config rules you can have per account,
    /// 			see  Service Limits in the Config Developer Guide. Only a management account and a delegated administrator can create or update an organization Config rule.
    /// 		When calling this API with a delegated administrator, you must ensure Organizations
    /// 		ListDelegatedAdministrator permissions are added. An organization can have up to 3 delegated administrators. This API enables organization service access through the EnableAWSServiceAccess action and creates a service-linked
    /// 			role AWSServiceRoleForConfigMultiAccountSetup in the management or delegated administrator account of your organization.
    /// 			The service-linked role is created only when the role does not exist in the caller account.
    /// 			Config verifies the existence of role with GetRole action. To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization
    /// 			register-delegated-administrator for config-multiaccountsetup.amazonaws.com.  There are two types of rules: Config Managed Rules and Config Custom Rules.
    /// 			You can use PutOrganizationConfigRule to create both Config Managed Rules and Config Custom Rules. Config Managed Rules are predefined,
    /// 			customizable rules created by Config. For a list of managed rules, see
    /// 			List of Config
    /// 				Managed Rules. If you are adding an Config managed rule, you must specify the rule's identifier for the RuleIdentifier key. Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions
    /// 			( Lambda Developer Guide) and with Guard (Guard GitHub
    /// 					Repository), a policy-as-code language.
    ///
    /// 			Config custom rules created with Lambda
    /// 			are called Config Custom Lambda Rules and Config custom rules created with
    /// 			Guard are called Config Custom Policy Rules. If you are adding a new Config Custom Lambda rule, you first need to create an Lambda function in the management account or a delegated
    /// 		administrator that the rule invokes to evaluate your resources. You also need to create an IAM role in the managed account that can be assumed by the Lambda function.
    /// 		When you use PutOrganizationConfigRule to add a Custom Lambda rule to Config, you must
    /// 			specify the Amazon Resource Name (ARN) that Lambda assigns to the function.  Prerequisite: Ensure you call EnableAllFeatures API to enable all features in an organization. Make sure to specify one of either OrganizationCustomPolicyRuleMetadata for Custom Policy rules, OrganizationCustomRuleMetadata for Custom Lambda rules, or OrganizationManagedRuleMetadata for managed rules.
    ///
    /// Parameters:
    ///   - excludedAccounts: A comma-separated list of accounts that you want to exclude from an organization Config rule.
    ///   - organizationConfigRuleName: The name that you assign to an organization Config rule.
    ///   - organizationCustomPolicyRuleMetadata: An OrganizationCustomPolicyRuleMetadata object. This object specifies metadata for your organization's Config Custom Policy rule. The metadata includes the runtime system in use, which accounts have debug
    ///   - organizationCustomRuleMetadata: An OrganizationCustomRuleMetadata object. This object specifies organization custom rule metadata such as resource type,
    ///   - organizationManagedRuleMetadata: An OrganizationManagedRuleMetadata object. This object specifies organization
    ///   - logger: Logger use during operation
    @inlinable
    public func putOrganizationConfigRule(
        excludedAccounts: [String]? = nil,
        organizationConfigRuleName: String,
        organizationCustomPolicyRuleMetadata: OrganizationCustomPolicyRuleMetadata? = nil,
        organizationCustomRuleMetadata: OrganizationCustomRuleMetadata? = nil,
        organizationManagedRuleMetadata: OrganizationManagedRuleMetadata? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutOrganizationConfigRuleResponse {
        let input = PutOrganizationConfigRuleRequest(
            excludedAccounts: excludedAccounts, 
            organizationConfigRuleName: organizationConfigRuleName, 
            organizationCustomPolicyRuleMetadata: organizationCustomPolicyRuleMetadata, 
            organizationCustomRuleMetadata: organizationCustomRuleMetadata, 
            organizationManagedRuleMetadata: organizationManagedRuleMetadata
        )
        return try await self.putOrganizationConfigRule(input, logger: logger)
    }

    /// Deploys conformance packs across member accounts in an Amazon Web Services Organization. For information on how many organization conformance packs and how many Config rules you can have per account,
    /// 			see  Service Limits in the Config Developer Guide. Only a management account and a delegated administrator can call this API.
    /// 			When calling this API with a delegated administrator, you must ensure Organizations
    /// 			ListDelegatedAdministrator permissions are added. An organization can have up to 3 delegated administrators. This API enables organization service access for config-multiaccountsetup.amazonaws.com
    /// 			through the EnableAWSServiceAccess action and creates a
    /// 			service-linked role AWSServiceRoleForConfigMultiAccountSetup in the management or delegated administrator account of your organization.
    /// 			The service-linked role is created only when the role does not exist in the caller account.
    /// 			To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization
    /// 			register-delegate-admin for config-multiaccountsetup.amazonaws.com.  Prerequisite: Ensure you call EnableAllFeatures API to enable all features in an organization. You must specify either the TemplateS3Uri or the TemplateBody parameter, but not both.
    /// 			If you provide both Config uses the TemplateS3Uri parameter and ignores the TemplateBody parameter. Config sets the state of a conformance pack to CREATE_IN_PROGRESS and UPDATE_IN_PROGRESS until the conformance pack is created or updated.
    /// 				You cannot update a conformance pack while it is in this state.
    @Sendable
    @inlinable
    public func putOrganizationConformancePack(_ input: PutOrganizationConformancePackRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutOrganizationConformancePackResponse {
        try await self.client.execute(
            operation: "PutOrganizationConformancePack", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deploys conformance packs across member accounts in an Amazon Web Services Organization. For information on how many organization conformance packs and how many Config rules you can have per account,
    /// 			see  Service Limits in the Config Developer Guide. Only a management account and a delegated administrator can call this API.
    /// 			When calling this API with a delegated administrator, you must ensure Organizations
    /// 			ListDelegatedAdministrator permissions are added. An organization can have up to 3 delegated administrators. This API enables organization service access for config-multiaccountsetup.amazonaws.com
    /// 			through the EnableAWSServiceAccess action and creates a
    /// 			service-linked role AWSServiceRoleForConfigMultiAccountSetup in the management or delegated administrator account of your organization.
    /// 			The service-linked role is created only when the role does not exist in the caller account.
    /// 			To use this API with delegated administrator, register a delegated administrator by calling Amazon Web Services Organization
    /// 			register-delegate-admin for config-multiaccountsetup.amazonaws.com.  Prerequisite: Ensure you call EnableAllFeatures API to enable all features in an organization. You must specify either the TemplateS3Uri or the TemplateBody parameter, but not both.
    /// 			If you provide both Config uses the TemplateS3Uri parameter and ignores the TemplateBody parameter. Config sets the state of a conformance pack to CREATE_IN_PROGRESS and UPDATE_IN_PROGRESS until the conformance pack is created or updated.
    /// 				You cannot update a conformance pack while it is in this state.
    ///
    /// Parameters:
    ///   - conformancePackInputParameters: A list of ConformancePackInputParameter objects.
    ///   - deliveryS3Bucket: The name of the Amazon S3 bucket where Config stores conformance pack templates.  This field is optional. If used, it must be prefixed with awsconfigconforms.
    ///   - deliveryS3KeyPrefix: The prefix for the Amazon S3 bucket.  This field is optional.
    ///   - excludedAccounts: A list of Amazon Web Services accounts to be excluded from an organization conformance pack while deploying a conformance pack.
    ///   - organizationConformancePackName: Name of the organization conformance pack you want to create.
    ///   - templateBody: A string containing full conformance pack template body. Structure containing the template body
    ///   - templateS3Uri: Location of file containing the template body. The uri must point to the conformance pack template
    ///   - logger: Logger use during operation
    @inlinable
    public func putOrganizationConformancePack(
        conformancePackInputParameters: [ConformancePackInputParameter]? = nil,
        deliveryS3Bucket: String? = nil,
        deliveryS3KeyPrefix: String? = nil,
        excludedAccounts: [String]? = nil,
        organizationConformancePackName: String,
        templateBody: String? = nil,
        templateS3Uri: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutOrganizationConformancePackResponse {
        let input = PutOrganizationConformancePackRequest(
            conformancePackInputParameters: conformancePackInputParameters, 
            deliveryS3Bucket: deliveryS3Bucket, 
            deliveryS3KeyPrefix: deliveryS3KeyPrefix, 
            excludedAccounts: excludedAccounts, 
            organizationConformancePackName: organizationConformancePackName, 
            templateBody: templateBody, 
            templateS3Uri: templateS3Uri
        )
        return try await self.putOrganizationConformancePack(input, logger: logger)
    }

    /// Adds or updates the remediation configuration with a specific Config rule with the
    /// 			selected target or action.
    /// 			The API creates the RemediationConfiguration object for the Config rule.
    /// 		The Config rule must already exist for you to add a remediation configuration.
    /// 		The target (SSM document) must exist and have permissions to use the target.    Be aware of backward incompatible changes  If you make backward incompatible changes to the SSM document,
    /// 			you must call this again to ensure the remediations can run. This API does not support adding remediation configurations for service-linked Config Rules such as Organization Config rules,
    /// 				the rules deployed by conformance packs, and rules deployed by Amazon Web Services Security Hub.    Required fields  For manual remediation configuration, you need to provide a value for automationAssumeRole or use a value in the assumeRolefield  to remediate your resources. The SSM automation document can use either as long as it maps to a valid parameter. However, for automatic remediation configuration, the only valid assumeRole field value is AutomationAssumeRole and you need to provide a value for AutomationAssumeRole to remediate your resources.    Auto remediation can be initiated even for compliant resources  If you enable auto remediation for a specific Config rule using the PutRemediationConfigurations API or the Config console,
    /// 				it initiates the remediation process for all non-compliant resources for that specific rule.
    /// 				The auto remediation process relies on the compliance data snapshot which is captured on a periodic basis.
    /// 				Any non-compliant resource that is updated between the snapshot schedule will continue to be remediated based on the last known compliance data snapshot. This means that in some cases auto remediation can be initiated even for compliant resources, since the bootstrap processor uses a database that can have stale evaluation results based on the last known compliance data snapshot.
    @Sendable
    @inlinable
    public func putRemediationConfigurations(_ input: PutRemediationConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutRemediationConfigurationsResponse {
        try await self.client.execute(
            operation: "PutRemediationConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or updates the remediation configuration with a specific Config rule with the
    /// 			selected target or action.
    /// 			The API creates the RemediationConfiguration object for the Config rule.
    /// 		The Config rule must already exist for you to add a remediation configuration.
    /// 		The target (SSM document) must exist and have permissions to use the target.    Be aware of backward incompatible changes  If you make backward incompatible changes to the SSM document,
    /// 			you must call this again to ensure the remediations can run. This API does not support adding remediation configurations for service-linked Config Rules such as Organization Config rules,
    /// 				the rules deployed by conformance packs, and rules deployed by Amazon Web Services Security Hub.    Required fields  For manual remediation configuration, you need to provide a value for automationAssumeRole or use a value in the assumeRolefield  to remediate your resources. The SSM automation document can use either as long as it maps to a valid parameter. However, for automatic remediation configuration, the only valid assumeRole field value is AutomationAssumeRole and you need to provide a value for AutomationAssumeRole to remediate your resources.    Auto remediation can be initiated even for compliant resources  If you enable auto remediation for a specific Config rule using the PutRemediationConfigurations API or the Config console,
    /// 				it initiates the remediation process for all non-compliant resources for that specific rule.
    /// 				The auto remediation process relies on the compliance data snapshot which is captured on a periodic basis.
    /// 				Any non-compliant resource that is updated between the snapshot schedule will continue to be remediated based on the last known compliance data snapshot. This means that in some cases auto remediation can be initiated even for compliant resources, since the bootstrap processor uses a database that can have stale evaluation results based on the last known compliance data snapshot.
    ///
    /// Parameters:
    ///   - remediationConfigurations: A list of remediation configuration objects.
    ///   - logger: Logger use during operation
    @inlinable
    public func putRemediationConfigurations(
        remediationConfigurations: [RemediationConfiguration],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutRemediationConfigurationsResponse {
        let input = PutRemediationConfigurationsRequest(
            remediationConfigurations: remediationConfigurations
        )
        return try await self.putRemediationConfigurations(input, logger: logger)
    }

    /// A remediation exception is when a specified resource is no longer considered for auto-remediation.
    /// 			This API adds a new exception or updates an existing exception for a specified resource with a specified Config rule.    Exceptions block auto remediation  Config generates a remediation exception when a problem occurs running a remediation action for a specified resource.
    /// 			Remediation exceptions blocks auto-remediation until the exception is cleared.    Manual remediation is recommended when placing an exception  When placing an exception on an Amazon Web Services resource, it is recommended that remediation is set as manual remediation until
    /// 			the given Config rule for the specified resource evaluates the resource as NON_COMPLIANT.
    /// 			Once the resource has been evaluated as NON_COMPLIANT, you can add remediation exceptions and change the remediation type back from Manual to Auto if you want to use auto-remediation.
    /// 			Otherwise, using auto-remediation before a NON_COMPLIANT evaluation result can delete resources before the exception is applied.    Exceptions can only be performed on non-compliant resources  Placing an exception can only be performed on resources that are NON_COMPLIANT.
    /// 			If you use this API for COMPLIANT resources or resources that are NOT_APPLICABLE, a remediation exception will not be generated.
    /// 			For more information on the conditions that initiate the possible Config evaluation results,
    /// 			see Concepts | Config  Rules in the Config Developer Guide.    Exceptions cannot be placed on service-linked remediation actions  You cannot place an exception on service-linked remediation actions, such as remediation actions put by an organizational conformance pack.    Auto remediation can be initiated even for compliant resources  If you enable auto remediation for a specific Config rule using the PutRemediationConfigurations API or the Config console,
    /// 				it initiates the remediation process for all non-compliant resources for that specific rule.
    /// 				The auto remediation process relies on the compliance data snapshot which is captured on a periodic basis.
    /// 				Any non-compliant resource that is updated between the snapshot schedule will continue to be remediated based on the last known compliance data snapshot. This means that in some cases auto remediation can be initiated even for compliant resources, since the bootstrap processor uses a database that can have stale evaluation results based on the last known compliance data snapshot.
    @Sendable
    @inlinable
    public func putRemediationExceptions(_ input: PutRemediationExceptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutRemediationExceptionsResponse {
        try await self.client.execute(
            operation: "PutRemediationExceptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// A remediation exception is when a specified resource is no longer considered for auto-remediation.
    /// 			This API adds a new exception or updates an existing exception for a specified resource with a specified Config rule.    Exceptions block auto remediation  Config generates a remediation exception when a problem occurs running a remediation action for a specified resource.
    /// 			Remediation exceptions blocks auto-remediation until the exception is cleared.    Manual remediation is recommended when placing an exception  When placing an exception on an Amazon Web Services resource, it is recommended that remediation is set as manual remediation until
    /// 			the given Config rule for the specified resource evaluates the resource as NON_COMPLIANT.
    /// 			Once the resource has been evaluated as NON_COMPLIANT, you can add remediation exceptions and change the remediation type back from Manual to Auto if you want to use auto-remediation.
    /// 			Otherwise, using auto-remediation before a NON_COMPLIANT evaluation result can delete resources before the exception is applied.    Exceptions can only be performed on non-compliant resources  Placing an exception can only be performed on resources that are NON_COMPLIANT.
    /// 			If you use this API for COMPLIANT resources or resources that are NOT_APPLICABLE, a remediation exception will not be generated.
    /// 			For more information on the conditions that initiate the possible Config evaluation results,
    /// 			see Concepts | Config  Rules in the Config Developer Guide.    Exceptions cannot be placed on service-linked remediation actions  You cannot place an exception on service-linked remediation actions, such as remediation actions put by an organizational conformance pack.    Auto remediation can be initiated even for compliant resources  If you enable auto remediation for a specific Config rule using the PutRemediationConfigurations API or the Config console,
    /// 				it initiates the remediation process for all non-compliant resources for that specific rule.
    /// 				The auto remediation process relies on the compliance data snapshot which is captured on a periodic basis.
    /// 				Any non-compliant resource that is updated between the snapshot schedule will continue to be remediated based on the last known compliance data snapshot. This means that in some cases auto remediation can be initiated even for compliant resources, since the bootstrap processor uses a database that can have stale evaluation results based on the last known compliance data snapshot.
    ///
    /// Parameters:
    ///   - configRuleName: The name of the Config rule for which you want to create remediation exception.
    ///   - expirationTime: The exception is automatically deleted after the expiration date.
    ///   - message: The message contains an explanation of the exception.
    ///   - resourceKeys: An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys.
    ///   - logger: Logger use during operation
    @inlinable
    public func putRemediationExceptions(
        configRuleName: String,
        expirationTime: Date? = nil,
        message: String? = nil,
        resourceKeys: [RemediationExceptionResourceKey],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutRemediationExceptionsResponse {
        let input = PutRemediationExceptionsRequest(
            configRuleName: configRuleName, 
            expirationTime: expirationTime, 
            message: message, 
            resourceKeys: resourceKeys
        )
        return try await self.putRemediationExceptions(input, logger: logger)
    }

    /// Records the configuration state for the resource provided in the request.
    ///
    /// 			The configuration state of a resource is represented in Config as Configuration Items.
    /// 			Once this API records the configuration item, you can retrieve the list of configuration items for the custom resource type using existing Config APIs.   The custom resource type must be registered with CloudFormation. This API accepts the configuration item registered with CloudFormation. When you call this API, Config only stores configuration state of the resource provided in the request. This API does not change or remediate the configuration of the resource.
    /// 				 Write-only schema properites are not recorded as part of the published configuration item.
    @Sendable
    @inlinable
    public func putResourceConfig(_ input: PutResourceConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "PutResourceConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Records the configuration state for the resource provided in the request.
    ///
    /// 			The configuration state of a resource is represented in Config as Configuration Items.
    /// 			Once this API records the configuration item, you can retrieve the list of configuration items for the custom resource type using existing Config APIs.   The custom resource type must be registered with CloudFormation. This API accepts the configuration item registered with CloudFormation. When you call this API, Config only stores configuration state of the resource provided in the request. This API does not change or remediate the configuration of the resource.
    /// 				 Write-only schema properites are not recorded as part of the published configuration item.
    ///
    /// Parameters:
    ///   - configuration: The configuration object of the resource in valid JSON format. It must match the schema registered with CloudFormation.  The configuration JSON must not exceed 64 KB.
    ///   - resourceId: Unique identifier of the resource.
    ///   - resourceName: Name of the resource.
    ///   - resourceType: The type of the resource. The custom resource type must be registered with CloudFormation.   You cannot use the organization names “amzn”, “amazon”, “alexa”, “custom” with custom resource types. It is the first part of the ResourceType up to the first ::.
    ///   - schemaVersionId: Version of the schema registered for the ResourceType in CloudFormation.
    ///   - tags: Tags associated with the resource.  This field is not to be confused with the Amazon Web Services-wide tag feature for Amazon Web Services resources.
    ///   - logger: Logger use during operation
    @inlinable
    public func putResourceConfig(
        configuration: String,
        resourceId: String,
        resourceName: String? = nil,
        resourceType: String,
        schemaVersionId: String,
        tags: [String: String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = PutResourceConfigRequest(
            configuration: configuration, 
            resourceId: resourceId, 
            resourceName: resourceName, 
            resourceType: resourceType, 
            schemaVersionId: schemaVersionId, 
            tags: tags
        )
        return try await self.putResourceConfig(input, logger: logger)
    }

    /// Creates and updates the retention configuration with details
    /// 			about retention period (number of days) that Config stores your
    /// 			historical information. The API creates the
    /// 				RetentionConfiguration object and names the object
    /// 			as default. When you have a
    /// 				RetentionConfiguration object named default, calling the API modifies the
    /// 			default object.   Currently, Config supports only one retention
    /// 				configuration per region in your account.
    @Sendable
    @inlinable
    public func putRetentionConfiguration(_ input: PutRetentionConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutRetentionConfigurationResponse {
        try await self.client.execute(
            operation: "PutRetentionConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates and updates the retention configuration with details
    /// 			about retention period (number of days) that Config stores your
    /// 			historical information. The API creates the
    /// 				RetentionConfiguration object and names the object
    /// 			as default. When you have a
    /// 				RetentionConfiguration object named default, calling the API modifies the
    /// 			default object.   Currently, Config supports only one retention
    /// 				configuration per region in your account.
    ///
    /// Parameters:
    ///   - retentionPeriodInDays: Number of days Config stores your historical
    ///   - logger: Logger use during operation
    @inlinable
    public func putRetentionConfiguration(
        retentionPeriodInDays: Int,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutRetentionConfigurationResponse {
        let input = PutRetentionConfigurationRequest(
            retentionPeriodInDays: retentionPeriodInDays
        )
        return try await self.putRetentionConfiguration(input, logger: logger)
    }

    /// Creates a service-linked configuration recorder that is linked to a specific Amazon Web Services service based on the ServicePrincipal you specify. The configuration recorder's name, recordingGroup, recordingMode, and recordingScope is set by the service that is linked to the configuration recorder. For more information, see  Working with the Configuration Recorder in the Config Developer Guide. This API creates a service-linked role AWSServiceRoleForConfig in your account. The service-linked role is created only when the role does not exist in your account.   The recording scope determines if you receive configuration items  The recording scope is set by the service that is linked to the configuration recorder and determines whether you receive configuration items (CIs) in the delivery channel. If the recording scope is internal, you will not receive CIs in the delivery channel.  Tags are added at creation and cannot be updated with this operation  Use TagResource and UntagResource to update tags after creation.
    @Sendable
    @inlinable
    public func putServiceLinkedConfigurationRecorder(_ input: PutServiceLinkedConfigurationRecorderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutServiceLinkedConfigurationRecorderResponse {
        try await self.client.execute(
            operation: "PutServiceLinkedConfigurationRecorder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a service-linked configuration recorder that is linked to a specific Amazon Web Services service based on the ServicePrincipal you specify. The configuration recorder's name, recordingGroup, recordingMode, and recordingScope is set by the service that is linked to the configuration recorder. For more information, see  Working with the Configuration Recorder in the Config Developer Guide. This API creates a service-linked role AWSServiceRoleForConfig in your account. The service-linked role is created only when the role does not exist in your account.   The recording scope determines if you receive configuration items  The recording scope is set by the service that is linked to the configuration recorder and determines whether you receive configuration items (CIs) in the delivery channel. If the recording scope is internal, you will not receive CIs in the delivery channel.  Tags are added at creation and cannot be updated with this operation  Use TagResource and UntagResource to update tags after creation.
    ///
    /// Parameters:
    ///   - servicePrincipal: The service principal of the Amazon Web Services service for the service-linked configuration recorder that you want to create.
    ///   - tags: The tags for a service-linked configuration recorder. Each tag consists of a key and an optional value, both of which you define.
    ///   - logger: Logger use during operation
    @inlinable
    public func putServiceLinkedConfigurationRecorder(
        servicePrincipal: String,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutServiceLinkedConfigurationRecorderResponse {
        let input = PutServiceLinkedConfigurationRecorderRequest(
            servicePrincipal: servicePrincipal, 
            tags: tags
        )
        return try await self.putServiceLinkedConfigurationRecorder(input, logger: logger)
    }

    /// Saves a new query or updates an existing saved query. The QueryName must be unique for a single Amazon Web Services account and a single Amazon Web Services Region.
    /// 			You can create upto 300 queries in a single Amazon Web Services account and a single Amazon Web Services Region.   Tags are added at creation and cannot be updated   PutStoredQuery is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 			Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different.
    @Sendable
    @inlinable
    public func putStoredQuery(_ input: PutStoredQueryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutStoredQueryResponse {
        try await self.client.execute(
            operation: "PutStoredQuery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Saves a new query or updates an existing saved query. The QueryName must be unique for a single Amazon Web Services account and a single Amazon Web Services Region.
    /// 			You can create upto 300 queries in a single Amazon Web Services account and a single Amazon Web Services Region.   Tags are added at creation and cannot be updated   PutStoredQuery is an idempotent API. Subsequent requests won’t create a duplicate resource if one was already created. If a following request has different tags values,
    /// 			Config will ignore these differences and treat it as an idempotent request of the previous. In this case, tags will not be updated, even if they are different.
    ///
    /// Parameters:
    ///   - storedQuery: A list of StoredQuery objects.
    ///   - tags: A list of Tags object.
    ///   - logger: Logger use during operation
    @inlinable
    public func putStoredQuery(
        storedQuery: StoredQuery,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutStoredQueryResponse {
        let input = PutStoredQueryRequest(
            storedQuery: storedQuery, 
            tags: tags
        )
        return try await self.putStoredQuery(input, logger: logger)
    }

    /// Accepts a structured query language (SQL) SELECT command and an aggregator to query configuration state of Amazon Web Services resources across multiple accounts and regions,
    /// 			performs the corresponding search, and returns resource configurations matching the properties. For more information about query components, see the
    /// 			 Query Components section in the Config Developer Guide.  If you run an aggregation query (i.e., using GROUP BY or using aggregate functions such as COUNT; e.g., SELECT resourceId, COUNT(*) WHERE resourceType = 'AWS::IAM::Role' GROUP BY resourceId)
    /// 				and do not specify the MaxResults or the Limit query parameters, the default page size is set to 500. If you run a non-aggregation query (i.e., not using GROUP BY or aggregate function; e.g., SELECT * WHERE resourceType = 'AWS::IAM::Role')
    /// 				and do not specify the MaxResults or the Limit query parameters, the default page size is set to 25.
    @Sendable
    @inlinable
    public func selectAggregateResourceConfig(_ input: SelectAggregateResourceConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SelectAggregateResourceConfigResponse {
        try await self.client.execute(
            operation: "SelectAggregateResourceConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a structured query language (SQL) SELECT command and an aggregator to query configuration state of Amazon Web Services resources across multiple accounts and regions,
    /// 			performs the corresponding search, and returns resource configurations matching the properties. For more information about query components, see the
    /// 			 Query Components section in the Config Developer Guide.  If you run an aggregation query (i.e., using GROUP BY or using aggregate functions such as COUNT; e.g., SELECT resourceId, COUNT(*) WHERE resourceType = 'AWS::IAM::Role' GROUP BY resourceId)
    /// 				and do not specify the MaxResults or the Limit query parameters, the default page size is set to 500. If you run a non-aggregation query (i.e., not using GROUP BY or aggregate function; e.g., SELECT * WHERE resourceType = 'AWS::IAM::Role')
    /// 				and do not specify the MaxResults or the Limit query parameters, the default page size is set to 25.
    ///
    /// Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - expression: The SQL query SELECT command.
    ///   - limit: The maximum number of query results returned on each page.
    ///   - maxResults: The maximum number of query results returned on each page. Config also allows the Limit request parameter.
    ///   - nextToken: The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func selectAggregateResourceConfig(
        configurationAggregatorName: String,
        expression: String,
        limit: Int? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SelectAggregateResourceConfigResponse {
        let input = SelectAggregateResourceConfigRequest(
            configurationAggregatorName: configurationAggregatorName, 
            expression: expression, 
            limit: limit, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.selectAggregateResourceConfig(input, logger: logger)
    }

    /// Accepts a structured query language (SQL) SELECT command, performs the corresponding search, and returns resource configurations matching the properties. For more information about query components, see the
    /// 			 Query Components section in the Config Developer Guide.
    @Sendable
    @inlinable
    public func selectResourceConfig(_ input: SelectResourceConfigRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SelectResourceConfigResponse {
        try await self.client.execute(
            operation: "SelectResourceConfig", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a structured query language (SQL) SELECT command, performs the corresponding search, and returns resource configurations matching the properties. For more information about query components, see the
    /// 			 Query Components section in the Config Developer Guide.
    ///
    /// Parameters:
    ///   - expression: The SQL query SELECT command.
    ///   - limit: The maximum number of query results returned on each page.
    ///   - nextToken: The nextToken string returned in a previous request that you use to request the next page of results in a paginated response.
    ///   - logger: Logger use during operation
    @inlinable
    public func selectResourceConfig(
        expression: String,
        limit: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SelectResourceConfigResponse {
        let input = SelectResourceConfigRequest(
            expression: expression, 
            limit: limit, 
            nextToken: nextToken
        )
        return try await self.selectResourceConfig(input, logger: logger)
    }

    /// Runs an on-demand evaluation for the specified Config rules
    /// 			against the last known configuration state of the resources. Use
    /// 				StartConfigRulesEvaluation when you want to test
    /// 			that a rule you updated is working as expected.
    /// 				StartConfigRulesEvaluation does not re-record the
    /// 			latest configuration state for your resources. It re-runs an
    /// 			evaluation against the last known state of your resources.  You can specify up to 25 Config rules per request.  An existing StartConfigRulesEvaluation call for
    /// 			the specified rules must complete before you can call the API again.
    /// 			If you chose to have Config stream to an Amazon SNS topic, you
    /// 			will receive a ConfigRuleEvaluationStarted notification
    /// 			when the evaluation starts.  You don't need to call the
    /// 					StartConfigRulesEvaluation API to run an
    /// 				evaluation for a new rule. When you create a rule, Config
    /// 				evaluates your resources against the rule automatically.
    /// 			  The StartConfigRulesEvaluation API is useful if
    /// 			you want to run on-demand evaluations, such as the following
    /// 			example:   You have a custom rule that evaluates your IAM
    /// 					resources every 24 hours.   You update your Lambda function to add additional
    /// 					conditions to your rule.   Instead of waiting for the next periodic evaluation,
    /// 					you call the StartConfigRulesEvaluation
    /// 					API.   Config invokes your Lambda function and evaluates
    /// 					your IAM resources.   Your custom rule will still run periodic evaluations
    /// 					every 24 hours.
    @Sendable
    @inlinable
    public func startConfigRulesEvaluation(_ input: StartConfigRulesEvaluationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartConfigRulesEvaluationResponse {
        try await self.client.execute(
            operation: "StartConfigRulesEvaluation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Runs an on-demand evaluation for the specified Config rules
    /// 			against the last known configuration state of the resources. Use
    /// 				StartConfigRulesEvaluation when you want to test
    /// 			that a rule you updated is working as expected.
    /// 				StartConfigRulesEvaluation does not re-record the
    /// 			latest configuration state for your resources. It re-runs an
    /// 			evaluation against the last known state of your resources.  You can specify up to 25 Config rules per request.  An existing StartConfigRulesEvaluation call for
    /// 			the specified rules must complete before you can call the API again.
    /// 			If you chose to have Config stream to an Amazon SNS topic, you
    /// 			will receive a ConfigRuleEvaluationStarted notification
    /// 			when the evaluation starts.  You don't need to call the
    /// 					StartConfigRulesEvaluation API to run an
    /// 				evaluation for a new rule. When you create a rule, Config
    /// 				evaluates your resources against the rule automatically.
    /// 			  The StartConfigRulesEvaluation API is useful if
    /// 			you want to run on-demand evaluations, such as the following
    /// 			example:   You have a custom rule that evaluates your IAM
    /// 					resources every 24 hours.   You update your Lambda function to add additional
    /// 					conditions to your rule.   Instead of waiting for the next periodic evaluation,
    /// 					you call the StartConfigRulesEvaluation
    /// 					API.   Config invokes your Lambda function and evaluates
    /// 					your IAM resources.   Your custom rule will still run periodic evaluations
    /// 					every 24 hours.
    ///
    /// Parameters:
    ///   - configRuleNames: The list of names of Config rules that you want to run
    ///   - logger: Logger use during operation
    @inlinable
    public func startConfigRulesEvaluation(
        configRuleNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartConfigRulesEvaluationResponse {
        let input = StartConfigRulesEvaluationRequest(
            configRuleNames: configRuleNames
        )
        return try await self.startConfigRulesEvaluation(input, logger: logger)
    }

    /// Starts the customer managed configuration recorder. The customer managed configuration recorder will begin recording configuration changes for the resource types you specify. You must have created a delivery channel to
    /// 			successfully start the customer managed configuration recorder. You can use the PutDeliveryChannel operation to create a delivery channel.
    @Sendable
    @inlinable
    public func startConfigurationRecorder(_ input: StartConfigurationRecorderRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "StartConfigurationRecorder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts the customer managed configuration recorder. The customer managed configuration recorder will begin recording configuration changes for the resource types you specify. You must have created a delivery channel to
    /// 			successfully start the customer managed configuration recorder. You can use the PutDeliveryChannel operation to create a delivery channel.
    ///
    /// Parameters:
    ///   - configurationRecorderName: The name of the customer managed configuration recorder that you want to start.
    ///   - logger: Logger use during operation
    @inlinable
    public func startConfigurationRecorder(
        configurationRecorderName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = StartConfigurationRecorderRequest(
            configurationRecorderName: configurationRecorderName
        )
        return try await self.startConfigurationRecorder(input, logger: logger)
    }

    /// Runs an on-demand remediation for the specified Config rules against the last known remediation configuration. It runs an execution against the current state of your resources. Remediation execution is asynchronous. You can specify up to 100 resource keys per request. An existing StartRemediationExecution call for the specified resource keys must complete before you can call the API again.
    @Sendable
    @inlinable
    public func startRemediationExecution(_ input: StartRemediationExecutionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartRemediationExecutionResponse {
        try await self.client.execute(
            operation: "StartRemediationExecution", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Runs an on-demand remediation for the specified Config rules against the last known remediation configuration. It runs an execution against the current state of your resources. Remediation execution is asynchronous. You can specify up to 100 resource keys per request. An existing StartRemediationExecution call for the specified resource keys must complete before you can call the API again.
    ///
    /// Parameters:
    ///   - configRuleName: The list of names of Config rules that you want to run remediation execution for.
    ///   - resourceKeys: A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func startRemediationExecution(
        configRuleName: String,
        resourceKeys: [ResourceKey],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartRemediationExecutionResponse {
        let input = StartRemediationExecutionRequest(
            configRuleName: configRuleName, 
            resourceKeys: resourceKeys
        )
        return try await self.startRemediationExecution(input, logger: logger)
    }

    /// Runs an on-demand evaluation for the specified resource to determine whether the resource details will comply with configured Config rules.
    /// 			You can also use it for evaluation purposes. Config recommends using an evaluation context. It runs an execution against the resource details with all
    /// 			of the Config rules in your account that match with the specified proactive mode and resource type.  Ensure you have the cloudformation:DescribeType role setup to validate the resource type schema. You can find the
    /// 				Resource type schema in "Amazon Web Services public extensions" within the CloudFormation registry or with the following CLI commmand:
    /// 			aws cloudformation describe-type --type-name "AWS::S3::Bucket" --type RESOURCE. For more information, see Managing extensions through the CloudFormation registry
    /// 			and Amazon Web Services resource and property types reference in the CloudFormation User Guide.
    @Sendable
    @inlinable
    public func startResourceEvaluation(_ input: StartResourceEvaluationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartResourceEvaluationResponse {
        try await self.client.execute(
            operation: "StartResourceEvaluation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Runs an on-demand evaluation for the specified resource to determine whether the resource details will comply with configured Config rules.
    /// 			You can also use it for evaluation purposes. Config recommends using an evaluation context. It runs an execution against the resource details with all
    /// 			of the Config rules in your account that match with the specified proactive mode and resource type.  Ensure you have the cloudformation:DescribeType role setup to validate the resource type schema. You can find the
    /// 				Resource type schema in "Amazon Web Services public extensions" within the CloudFormation registry or with the following CLI commmand:
    /// 			aws cloudformation describe-type --type-name "AWS::S3::Bucket" --type RESOURCE. For more information, see Managing extensions through the CloudFormation registry
    /// 			and Amazon Web Services resource and property types reference in the CloudFormation User Guide.
    ///
    /// Parameters:
    ///   - clientToken: A client token is a unique, case-sensitive string of up to 64 ASCII characters.
    ///   - evaluationContext: Returns an EvaluationContext object.
    ///   - evaluationMode: The mode of an evaluation. The valid values for this API are DETECTIVE and PROACTIVE.
    ///   - evaluationTimeout: The timeout for an evaluation. The default is 900 seconds. You cannot specify a number greater than 3600. If you specify 0, Config uses the default.
    ///   - resourceDetails: Returns a ResourceDetails object.
    ///   - logger: Logger use during operation
    @inlinable
    public func startResourceEvaluation(
        clientToken: String? = nil,
        evaluationContext: EvaluationContext? = nil,
        evaluationMode: EvaluationMode,
        evaluationTimeout: Int? = nil,
        resourceDetails: ResourceDetails,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartResourceEvaluationResponse {
        let input = StartResourceEvaluationRequest(
            clientToken: clientToken, 
            evaluationContext: evaluationContext, 
            evaluationMode: evaluationMode, 
            evaluationTimeout: evaluationTimeout, 
            resourceDetails: resourceDetails
        )
        return try await self.startResourceEvaluation(input, logger: logger)
    }

    /// Stops the customer managed configuration recorder. The customer managed configuration recorder will stop recording configuration changes for the resource types you have specified.
    @Sendable
    @inlinable
    public func stopConfigurationRecorder(_ input: StopConfigurationRecorderRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "StopConfigurationRecorder", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops the customer managed configuration recorder. The customer managed configuration recorder will stop recording configuration changes for the resource types you have specified.
    ///
    /// Parameters:
    ///   - configurationRecorderName: The name of the customer managed configuration recorder that you want to stop.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopConfigurationRecorder(
        configurationRecorderName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = StopConfigurationRecorderRequest(
            configurationRecorderName: configurationRecorderName
        )
        return try await self.stopConfigurationRecorder(input, logger: logger)
    }

    /// Associates the specified tags to a resource with the specified ResourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed.
    /// 			If existing tags are specified, however, then their values will be updated. When a resource is deleted, the tags associated with that resource are deleted as well.
    @Sendable
    @inlinable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified tags to a resource with the specified ResourceArn. If existing tags on a resource are not specified in the request parameters, they are not changed.
    /// 			If existing tags are specified, however, then their values will be updated. When a resource is deleted, the tags associated with that resource are deleted as well.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. The following resources are supported:    ConfigurationRecorder     ConfigRule     OrganizationConfigRule     ConformancePack     OrganizationConformancePack     ConfigurationAggregator     AggregationAuthorization     StoredQuery
    ///   - tags: An array of tag object.
    ///   - logger: Logger use during operation
    @inlinable
    public func tagResource(
        resourceArn: String,
        tags: [Tag],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = TagResourceRequest(
            resourceArn: resourceArn, 
            tags: tags
        )
        return try await self.tagResource(input, logger: logger)
    }

    /// Deletes specified tags from a resource.
    @Sendable
    @inlinable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes specified tags from a resource.
    ///
    /// Parameters:
    ///   - resourceArn: The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. The following resources are supported:    ConfigurationRecorder     ConfigRule     OrganizationConfigRule     ConformancePack     OrganizationConformancePack     ConfigurationAggregator     AggregationAuthorization     StoredQuery
    ///   - tagKeys: The keys of the tags to be removed.
    ///   - logger: Logger use during operation
    @inlinable
    public func untagResource(
        resourceArn: String,
        tagKeys: [String],
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UntagResourceRequest(
            resourceArn: resourceArn, 
            tagKeys: tagKeys
        )
        return try await self.untagResource(input, logger: logger)
    }
}

extension ConfigService {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: ConfigService, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension ConfigService {
    /// Return PaginatorSequence for operation ``describeAggregateComplianceByConfigRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAggregateComplianceByConfigRulesPaginator(
        _ input: DescribeAggregateComplianceByConfigRulesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAggregateComplianceByConfigRulesRequest, DescribeAggregateComplianceByConfigRulesResponse> {
        return .init(
            input: input,
            command: self.describeAggregateComplianceByConfigRules,
            inputKey: \DescribeAggregateComplianceByConfigRulesRequest.nextToken,
            outputKey: \DescribeAggregateComplianceByConfigRulesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAggregateComplianceByConfigRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results by ConfigRuleComplianceFilters object.
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAggregateComplianceByConfigRulesPaginator(
        configurationAggregatorName: String,
        filters: ConfigRuleComplianceFilters? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAggregateComplianceByConfigRulesRequest, DescribeAggregateComplianceByConfigRulesResponse> {
        let input = DescribeAggregateComplianceByConfigRulesRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            limit: limit
        )
        return self.describeAggregateComplianceByConfigRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeAggregateComplianceByConformancePacks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAggregateComplianceByConformancePacksPaginator(
        _ input: DescribeAggregateComplianceByConformancePacksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAggregateComplianceByConformancePacksRequest, DescribeAggregateComplianceByConformancePacksResponse> {
        return .init(
            input: input,
            command: self.describeAggregateComplianceByConformancePacks,
            inputKey: \DescribeAggregateComplianceByConformancePacksRequest.nextToken,
            outputKey: \DescribeAggregateComplianceByConformancePacksResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAggregateComplianceByConformancePacks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the result by AggregateConformancePackComplianceFilters object.
    ///   - limit: The maximum number of conformance packs compliance details returned on each page. The default is maximum. If you specify 0, Config uses the default.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAggregateComplianceByConformancePacksPaginator(
        configurationAggregatorName: String,
        filters: AggregateConformancePackComplianceFilters? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAggregateComplianceByConformancePacksRequest, DescribeAggregateComplianceByConformancePacksResponse> {
        let input = DescribeAggregateComplianceByConformancePacksRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            limit: limit
        )
        return self.describeAggregateComplianceByConformancePacksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeAggregationAuthorizations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAggregationAuthorizationsPaginator(
        _ input: DescribeAggregationAuthorizationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAggregationAuthorizationsRequest, DescribeAggregationAuthorizationsResponse> {
        return .init(
            input: input,
            command: self.describeAggregationAuthorizations,
            inputKey: \DescribeAggregationAuthorizationsRequest.nextToken,
            outputKey: \DescribeAggregationAuthorizationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAggregationAuthorizations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The maximum number of AggregationAuthorizations returned on
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAggregationAuthorizationsPaginator(
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAggregationAuthorizationsRequest, DescribeAggregationAuthorizationsResponse> {
        let input = DescribeAggregationAuthorizationsRequest(
            limit: limit
        )
        return self.describeAggregationAuthorizationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeComplianceByConfigRule(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeComplianceByConfigRulePaginator(
        _ input: DescribeComplianceByConfigRuleRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeComplianceByConfigRuleRequest, DescribeComplianceByConfigRuleResponse> {
        return .init(
            input: input,
            command: self.describeComplianceByConfigRule,
            inputKey: \DescribeComplianceByConfigRuleRequest.nextToken,
            outputKey: \DescribeComplianceByConfigRuleResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeComplianceByConfigRule(_:logger:)``.
    ///
    /// - Parameters:
    ///   - complianceTypes: Filters the results by compliance.
    ///   - configRuleNames: Specify one or more Config rule names to filter the results
    ///   - logger: Logger used for logging
    @inlinable
    public func describeComplianceByConfigRulePaginator(
        complianceTypes: [ComplianceType]? = nil,
        configRuleNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeComplianceByConfigRuleRequest, DescribeComplianceByConfigRuleResponse> {
        let input = DescribeComplianceByConfigRuleRequest(
            complianceTypes: complianceTypes, 
            configRuleNames: configRuleNames
        )
        return self.describeComplianceByConfigRulePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeComplianceByResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeComplianceByResourcePaginator(
        _ input: DescribeComplianceByResourceRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeComplianceByResourceRequest, DescribeComplianceByResourceResponse> {
        return .init(
            input: input,
            command: self.describeComplianceByResource,
            inputKey: \DescribeComplianceByResourceRequest.nextToken,
            outputKey: \DescribeComplianceByResourceResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeComplianceByResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - complianceTypes: Filters the results by compliance.
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - resourceId: The ID of the Amazon Web Services resource for which you want compliance
    ///   - resourceType: The types of Amazon Web Services resources for which you want compliance
    ///   - logger: Logger used for logging
    @inlinable
    public func describeComplianceByResourcePaginator(
        complianceTypes: [ComplianceType]? = nil,
        limit: Int? = nil,
        resourceId: String? = nil,
        resourceType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeComplianceByResourceRequest, DescribeComplianceByResourceResponse> {
        let input = DescribeComplianceByResourceRequest(
            complianceTypes: complianceTypes, 
            limit: limit, 
            resourceId: resourceId, 
            resourceType: resourceType
        )
        return self.describeComplianceByResourcePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeConfigRuleEvaluationStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigRuleEvaluationStatusPaginator(
        _ input: DescribeConfigRuleEvaluationStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeConfigRuleEvaluationStatusRequest, DescribeConfigRuleEvaluationStatusResponse> {
        return .init(
            input: input,
            command: self.describeConfigRuleEvaluationStatus,
            inputKey: \DescribeConfigRuleEvaluationStatusRequest.nextToken,
            outputKey: \DescribeConfigRuleEvaluationStatusResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeConfigRuleEvaluationStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configRuleNames: The name of the Config managed rules for which you want
    ///   - limit: The number of rule evaluation results that you want
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigRuleEvaluationStatusPaginator(
        configRuleNames: [String]? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeConfigRuleEvaluationStatusRequest, DescribeConfigRuleEvaluationStatusResponse> {
        let input = DescribeConfigRuleEvaluationStatusRequest(
            configRuleNames: configRuleNames, 
            limit: limit
        )
        return self.describeConfigRuleEvaluationStatusPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeConfigRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigRulesPaginator(
        _ input: DescribeConfigRulesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeConfigRulesRequest, DescribeConfigRulesResponse> {
        return .init(
            input: input,
            command: self.describeConfigRules,
            inputKey: \DescribeConfigRulesRequest.nextToken,
            outputKey: \DescribeConfigRulesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeConfigRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configRuleNames: The names of the Config rules for which you want details.
    ///   - filters: Returns a list of Detective or Proactive Config rules. By default, this API returns an unfiltered list. For more information on Detective or Proactive Config rules,
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigRulesPaginator(
        configRuleNames: [String]? = nil,
        filters: DescribeConfigRulesFilters? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeConfigRulesRequest, DescribeConfigRulesResponse> {
        let input = DescribeConfigRulesRequest(
            configRuleNames: configRuleNames, 
            filters: filters
        )
        return self.describeConfigRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeConfigurationAggregatorSourcesStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigurationAggregatorSourcesStatusPaginator(
        _ input: DescribeConfigurationAggregatorSourcesStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeConfigurationAggregatorSourcesStatusRequest, DescribeConfigurationAggregatorSourcesStatusResponse> {
        return .init(
            input: input,
            command: self.describeConfigurationAggregatorSourcesStatus,
            inputKey: \DescribeConfigurationAggregatorSourcesStatusRequest.nextToken,
            outputKey: \DescribeConfigurationAggregatorSourcesStatusResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeConfigurationAggregatorSourcesStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - limit: The maximum number of AggregatorSourceStatus returned on each
    ///   - updateStatus: Filters the status type.   Valid value FAILED indicates errors while moving
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigurationAggregatorSourcesStatusPaginator(
        configurationAggregatorName: String,
        limit: Int? = nil,
        updateStatus: [AggregatedSourceStatusType]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeConfigurationAggregatorSourcesStatusRequest, DescribeConfigurationAggregatorSourcesStatusResponse> {
        let input = DescribeConfigurationAggregatorSourcesStatusRequest(
            configurationAggregatorName: configurationAggregatorName, 
            limit: limit, 
            updateStatus: updateStatus
        )
        return self.describeConfigurationAggregatorSourcesStatusPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeConfigurationAggregators(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigurationAggregatorsPaginator(
        _ input: DescribeConfigurationAggregatorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeConfigurationAggregatorsRequest, DescribeConfigurationAggregatorsResponse> {
        return .init(
            input: input,
            command: self.describeConfigurationAggregators,
            inputKey: \DescribeConfigurationAggregatorsRequest.nextToken,
            outputKey: \DescribeConfigurationAggregatorsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeConfigurationAggregators(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationAggregatorNames: The name of the configuration aggregators.
    ///   - limit: The maximum number of configuration aggregators returned on
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConfigurationAggregatorsPaginator(
        configurationAggregatorNames: [String]? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeConfigurationAggregatorsRequest, DescribeConfigurationAggregatorsResponse> {
        let input = DescribeConfigurationAggregatorsRequest(
            configurationAggregatorNames: configurationAggregatorNames, 
            limit: limit
        )
        return self.describeConfigurationAggregatorsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeConformancePackCompliance(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConformancePackCompliancePaginator(
        _ input: DescribeConformancePackComplianceRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeConformancePackComplianceRequest, DescribeConformancePackComplianceResponse> {
        return .init(
            input: input,
            command: self.describeConformancePackCompliance,
            inputKey: \DescribeConformancePackComplianceRequest.nextToken,
            outputKey: \DescribeConformancePackComplianceResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeConformancePackCompliance(_:logger:)``.
    ///
    /// - Parameters:
    ///   - conformancePackName: Name of the conformance pack.
    ///   - filters: A ConformancePackComplianceFilters object.
    ///   - limit: The maximum number of Config rules within a conformance pack are returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConformancePackCompliancePaginator(
        conformancePackName: String,
        filters: ConformancePackComplianceFilters? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeConformancePackComplianceRequest, DescribeConformancePackComplianceResponse> {
        let input = DescribeConformancePackComplianceRequest(
            conformancePackName: conformancePackName, 
            filters: filters, 
            limit: limit
        )
        return self.describeConformancePackCompliancePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeConformancePackStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConformancePackStatusPaginator(
        _ input: DescribeConformancePackStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeConformancePackStatusRequest, DescribeConformancePackStatusResponse> {
        return .init(
            input: input,
            command: self.describeConformancePackStatus,
            inputKey: \DescribeConformancePackStatusRequest.nextToken,
            outputKey: \DescribeConformancePackStatusResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeConformancePackStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - conformancePackNames: Comma-separated list of conformance pack names.
    ///   - limit: The maximum number of conformance packs status returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConformancePackStatusPaginator(
        conformancePackNames: [String]? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeConformancePackStatusRequest, DescribeConformancePackStatusResponse> {
        let input = DescribeConformancePackStatusRequest(
            conformancePackNames: conformancePackNames, 
            limit: limit
        )
        return self.describeConformancePackStatusPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeConformancePacks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConformancePacksPaginator(
        _ input: DescribeConformancePacksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeConformancePacksRequest, DescribeConformancePacksResponse> {
        return .init(
            input: input,
            command: self.describeConformancePacks,
            inputKey: \DescribeConformancePacksRequest.nextToken,
            outputKey: \DescribeConformancePacksResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeConformancePacks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - conformancePackNames: Comma-separated list of conformance pack names for which you want details. If you do not specify any names, Config returns details for all your conformance packs.
    ///   - limit: The maximum number of conformance packs returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeConformancePacksPaginator(
        conformancePackNames: [String]? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeConformancePacksRequest, DescribeConformancePacksResponse> {
        let input = DescribeConformancePacksRequest(
            conformancePackNames: conformancePackNames, 
            limit: limit
        )
        return self.describeConformancePacksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeOrganizationConfigRuleStatuses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrganizationConfigRuleStatusesPaginator(
        _ input: DescribeOrganizationConfigRuleStatusesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeOrganizationConfigRuleStatusesRequest, DescribeOrganizationConfigRuleStatusesResponse> {
        return .init(
            input: input,
            command: self.describeOrganizationConfigRuleStatuses,
            inputKey: \DescribeOrganizationConfigRuleStatusesRequest.nextToken,
            outputKey: \DescribeOrganizationConfigRuleStatusesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeOrganizationConfigRuleStatuses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The maximum number of OrganizationConfigRuleStatuses returned on each page. If you do no specify a number, Config uses the default. The default is 100.
    ///   - organizationConfigRuleNames: The names of organization Config rules for which you want status details. If you do not specify any names, Config returns details for all your organization Config rules.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrganizationConfigRuleStatusesPaginator(
        limit: Int? = nil,
        organizationConfigRuleNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeOrganizationConfigRuleStatusesRequest, DescribeOrganizationConfigRuleStatusesResponse> {
        let input = DescribeOrganizationConfigRuleStatusesRequest(
            limit: limit, 
            organizationConfigRuleNames: organizationConfigRuleNames
        )
        return self.describeOrganizationConfigRuleStatusesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeOrganizationConfigRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrganizationConfigRulesPaginator(
        _ input: DescribeOrganizationConfigRulesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeOrganizationConfigRulesRequest, DescribeOrganizationConfigRulesResponse> {
        return .init(
            input: input,
            command: self.describeOrganizationConfigRules,
            inputKey: \DescribeOrganizationConfigRulesRequest.nextToken,
            outputKey: \DescribeOrganizationConfigRulesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeOrganizationConfigRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The maximum number of organization Config rules returned on each page. If you do no specify a number, Config uses the default. The default is 100.
    ///   - organizationConfigRuleNames: The names of organization Config rules for which you want details. If you do not specify any names, Config returns details for all your organization Config rules.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrganizationConfigRulesPaginator(
        limit: Int? = nil,
        organizationConfigRuleNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeOrganizationConfigRulesRequest, DescribeOrganizationConfigRulesResponse> {
        let input = DescribeOrganizationConfigRulesRequest(
            limit: limit, 
            organizationConfigRuleNames: organizationConfigRuleNames
        )
        return self.describeOrganizationConfigRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeOrganizationConformancePackStatuses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrganizationConformancePackStatusesPaginator(
        _ input: DescribeOrganizationConformancePackStatusesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeOrganizationConformancePackStatusesRequest, DescribeOrganizationConformancePackStatusesResponse> {
        return .init(
            input: input,
            command: self.describeOrganizationConformancePackStatuses,
            inputKey: \DescribeOrganizationConformancePackStatusesRequest.nextToken,
            outputKey: \DescribeOrganizationConformancePackStatusesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeOrganizationConformancePackStatuses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The maximum number of OrganizationConformancePackStatuses returned on each page.
    ///   - organizationConformancePackNames: The names of organization conformance packs for which you want status details.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrganizationConformancePackStatusesPaginator(
        limit: Int? = nil,
        organizationConformancePackNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeOrganizationConformancePackStatusesRequest, DescribeOrganizationConformancePackStatusesResponse> {
        let input = DescribeOrganizationConformancePackStatusesRequest(
            limit: limit, 
            organizationConformancePackNames: organizationConformancePackNames
        )
        return self.describeOrganizationConformancePackStatusesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeOrganizationConformancePacks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrganizationConformancePacksPaginator(
        _ input: DescribeOrganizationConformancePacksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeOrganizationConformancePacksRequest, DescribeOrganizationConformancePacksResponse> {
        return .init(
            input: input,
            command: self.describeOrganizationConformancePacks,
            inputKey: \DescribeOrganizationConformancePacksRequest.nextToken,
            outputKey: \DescribeOrganizationConformancePacksResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeOrganizationConformancePacks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The maximum number of organization config packs returned on each page. If you do no specify a
    ///   - organizationConformancePackNames: The name that you assign to an organization conformance pack.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeOrganizationConformancePacksPaginator(
        limit: Int? = nil,
        organizationConformancePackNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeOrganizationConformancePacksRequest, DescribeOrganizationConformancePacksResponse> {
        let input = DescribeOrganizationConformancePacksRequest(
            limit: limit, 
            organizationConformancePackNames: organizationConformancePackNames
        )
        return self.describeOrganizationConformancePacksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describePendingAggregationRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describePendingAggregationRequestsPaginator(
        _ input: DescribePendingAggregationRequestsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribePendingAggregationRequestsRequest, DescribePendingAggregationRequestsResponse> {
        return .init(
            input: input,
            command: self.describePendingAggregationRequests,
            inputKey: \DescribePendingAggregationRequestsRequest.nextToken,
            outputKey: \DescribePendingAggregationRequestsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describePendingAggregationRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func describePendingAggregationRequestsPaginator(
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribePendingAggregationRequestsRequest, DescribePendingAggregationRequestsResponse> {
        let input = DescribePendingAggregationRequestsRequest(
            limit: limit
        )
        return self.describePendingAggregationRequestsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeRemediationExceptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRemediationExceptionsPaginator(
        _ input: DescribeRemediationExceptionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeRemediationExceptionsRequest, DescribeRemediationExceptionsResponse> {
        return .init(
            input: input,
            command: self.describeRemediationExceptions,
            inputKey: \DescribeRemediationExceptionsRequest.nextToken,
            outputKey: \DescribeRemediationExceptionsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeRemediationExceptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configRuleName: The name of the Config rule.
    ///   - limit: The maximum number of RemediationExceptionResourceKey returned on each page. The default is 25. If you specify 0, Config uses the default.
    ///   - resourceKeys: An exception list of resource exception keys to be processed with the current request. Config adds exception for each resource key. For example, Config adds 3 exceptions for 3 resource keys.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRemediationExceptionsPaginator(
        configRuleName: String,
        limit: Int? = nil,
        resourceKeys: [RemediationExceptionResourceKey]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeRemediationExceptionsRequest, DescribeRemediationExceptionsResponse> {
        let input = DescribeRemediationExceptionsRequest(
            configRuleName: configRuleName, 
            limit: limit, 
            resourceKeys: resourceKeys
        )
        return self.describeRemediationExceptionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeRemediationExecutionStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRemediationExecutionStatusPaginator(
        _ input: DescribeRemediationExecutionStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeRemediationExecutionStatusRequest, DescribeRemediationExecutionStatusResponse> {
        return .init(
            input: input,
            command: self.describeRemediationExecutionStatus,
            inputKey: \DescribeRemediationExecutionStatusRequest.nextToken,
            outputKey: \DescribeRemediationExecutionStatusResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeRemediationExecutionStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configRuleName: The name of the Config rule.
    ///   - limit: The maximum number of RemediationExecutionStatuses returned on each page. The default is maximum. If you specify 0, Config uses the default.
    ///   - resourceKeys: A list of resource keys to be processed with the current request. Each element in the list consists of the resource type and resource ID.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRemediationExecutionStatusPaginator(
        configRuleName: String,
        limit: Int? = nil,
        resourceKeys: [ResourceKey]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeRemediationExecutionStatusRequest, DescribeRemediationExecutionStatusResponse> {
        let input = DescribeRemediationExecutionStatusRequest(
            configRuleName: configRuleName, 
            limit: limit, 
            resourceKeys: resourceKeys
        )
        return self.describeRemediationExecutionStatusPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeRetentionConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRetentionConfigurationsPaginator(
        _ input: DescribeRetentionConfigurationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeRetentionConfigurationsRequest, DescribeRetentionConfigurationsResponse> {
        return .init(
            input: input,
            command: self.describeRetentionConfigurations,
            inputKey: \DescribeRetentionConfigurationsRequest.nextToken,
            outputKey: \DescribeRetentionConfigurationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeRetentionConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - retentionConfigurationNames: A list of names of retention configurations for which you want
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRetentionConfigurationsPaginator(
        retentionConfigurationNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeRetentionConfigurationsRequest, DescribeRetentionConfigurationsResponse> {
        let input = DescribeRetentionConfigurationsRequest(
            retentionConfigurationNames: retentionConfigurationNames
        )
        return self.describeRetentionConfigurationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getAggregateComplianceDetailsByConfigRule(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getAggregateComplianceDetailsByConfigRulePaginator(
        _ input: GetAggregateComplianceDetailsByConfigRuleRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetAggregateComplianceDetailsByConfigRuleRequest, GetAggregateComplianceDetailsByConfigRuleResponse> {
        return .init(
            input: input,
            command: self.getAggregateComplianceDetailsByConfigRule,
            inputKey: \GetAggregateComplianceDetailsByConfigRuleRequest.nextToken,
            outputKey: \GetAggregateComplianceDetailsByConfigRuleResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getAggregateComplianceDetailsByConfigRule(_:logger:)``.
    ///
    /// - Parameters:
    ///   - accountId: The 12-digit account ID of the source account.
    ///   - awsRegion: The source region from where the data is aggregated.
    ///   - complianceType: The resource compliance status.  For the
    ///   - configRuleName: The name of the Config rule for which you want compliance
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func getAggregateComplianceDetailsByConfigRulePaginator(
        accountId: String,
        awsRegion: String,
        complianceType: ComplianceType? = nil,
        configRuleName: String,
        configurationAggregatorName: String,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetAggregateComplianceDetailsByConfigRuleRequest, GetAggregateComplianceDetailsByConfigRuleResponse> {
        let input = GetAggregateComplianceDetailsByConfigRuleRequest(
            accountId: accountId, 
            awsRegion: awsRegion, 
            complianceType: complianceType, 
            configRuleName: configRuleName, 
            configurationAggregatorName: configurationAggregatorName, 
            limit: limit
        )
        return self.getAggregateComplianceDetailsByConfigRulePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getAggregateConfigRuleComplianceSummary(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getAggregateConfigRuleComplianceSummaryPaginator(
        _ input: GetAggregateConfigRuleComplianceSummaryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetAggregateConfigRuleComplianceSummaryRequest, GetAggregateConfigRuleComplianceSummaryResponse> {
        return .init(
            input: input,
            command: self.getAggregateConfigRuleComplianceSummary,
            inputKey: \GetAggregateConfigRuleComplianceSummaryRequest.nextToken,
            outputKey: \GetAggregateConfigRuleComplianceSummaryResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getAggregateConfigRuleComplianceSummary(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results based on the
    ///   - groupByKey: Groups the result based on ACCOUNT_ID or AWS_REGION.
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func getAggregateConfigRuleComplianceSummaryPaginator(
        configurationAggregatorName: String,
        filters: ConfigRuleComplianceSummaryFilters? = nil,
        groupByKey: ConfigRuleComplianceSummaryGroupKey? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetAggregateConfigRuleComplianceSummaryRequest, GetAggregateConfigRuleComplianceSummaryResponse> {
        let input = GetAggregateConfigRuleComplianceSummaryRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            groupByKey: groupByKey, 
            limit: limit
        )
        return self.getAggregateConfigRuleComplianceSummaryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getAggregateConformancePackComplianceSummary(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getAggregateConformancePackComplianceSummaryPaginator(
        _ input: GetAggregateConformancePackComplianceSummaryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetAggregateConformancePackComplianceSummaryRequest, GetAggregateConformancePackComplianceSummaryResponse> {
        return .init(
            input: input,
            command: self.getAggregateConformancePackComplianceSummary,
            inputKey: \GetAggregateConformancePackComplianceSummaryRequest.nextToken,
            outputKey: \GetAggregateConformancePackComplianceSummaryResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getAggregateConformancePackComplianceSummary(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results based on the AggregateConformancePackComplianceSummaryFilters object.
    ///   - groupByKey: Groups the result based on Amazon Web Services account ID or Amazon Web Services Region.
    ///   - limit: The maximum number of results returned on each page. The default is maximum. If you specify 0, Config uses the default.
    ///   - logger: Logger used for logging
    @inlinable
    public func getAggregateConformancePackComplianceSummaryPaginator(
        configurationAggregatorName: String,
        filters: AggregateConformancePackComplianceSummaryFilters? = nil,
        groupByKey: AggregateConformancePackComplianceSummaryGroupKey? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetAggregateConformancePackComplianceSummaryRequest, GetAggregateConformancePackComplianceSummaryResponse> {
        let input = GetAggregateConformancePackComplianceSummaryRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            groupByKey: groupByKey, 
            limit: limit
        )
        return self.getAggregateConformancePackComplianceSummaryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getAggregateDiscoveredResourceCounts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getAggregateDiscoveredResourceCountsPaginator(
        _ input: GetAggregateDiscoveredResourceCountsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetAggregateDiscoveredResourceCountsRequest, GetAggregateDiscoveredResourceCountsResponse> {
        return .init(
            input: input,
            command: self.getAggregateDiscoveredResourceCounts,
            inputKey: \GetAggregateDiscoveredResourceCountsRequest.nextToken,
            outputKey: \GetAggregateDiscoveredResourceCountsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getAggregateDiscoveredResourceCounts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results based on the ResourceCountFilters object.
    ///   - groupByKey: The key to group the resource counts.
    ///   - limit: The maximum number of GroupedResourceCount objects returned on each page. The default is 1000. You cannot specify a number greater than 1000. If you specify 0, Config uses the default.
    ///   - logger: Logger used for logging
    @inlinable
    public func getAggregateDiscoveredResourceCountsPaginator(
        configurationAggregatorName: String,
        filters: ResourceCountFilters? = nil,
        groupByKey: ResourceCountGroupKey? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetAggregateDiscoveredResourceCountsRequest, GetAggregateDiscoveredResourceCountsResponse> {
        let input = GetAggregateDiscoveredResourceCountsRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            groupByKey: groupByKey, 
            limit: limit
        )
        return self.getAggregateDiscoveredResourceCountsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getComplianceDetailsByConfigRule(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getComplianceDetailsByConfigRulePaginator(
        _ input: GetComplianceDetailsByConfigRuleRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetComplianceDetailsByConfigRuleRequest, GetComplianceDetailsByConfigRuleResponse> {
        return .init(
            input: input,
            command: self.getComplianceDetailsByConfigRule,
            inputKey: \GetComplianceDetailsByConfigRuleRequest.nextToken,
            outputKey: \GetComplianceDetailsByConfigRuleResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getComplianceDetailsByConfigRule(_:logger:)``.
    ///
    /// - Parameters:
    ///   - complianceTypes: Filters the results by compliance.  INSUFFICIENT_DATA is a valid ComplianceType that is returned when an Config rule cannot be evaluated. However, INSUFFICIENT_DATA cannot be used as a ComplianceType for filtering results.
    ///   - configRuleName: The name of the Config rule for which you want compliance
    ///   - limit: The maximum number of evaluation results returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func getComplianceDetailsByConfigRulePaginator(
        complianceTypes: [ComplianceType]? = nil,
        configRuleName: String,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetComplianceDetailsByConfigRuleRequest, GetComplianceDetailsByConfigRuleResponse> {
        let input = GetComplianceDetailsByConfigRuleRequest(
            complianceTypes: complianceTypes, 
            configRuleName: configRuleName, 
            limit: limit
        )
        return self.getComplianceDetailsByConfigRulePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getComplianceDetailsByResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getComplianceDetailsByResourcePaginator(
        _ input: GetComplianceDetailsByResourceRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetComplianceDetailsByResourceRequest, GetComplianceDetailsByResourceResponse> {
        return .init(
            input: input,
            command: self.getComplianceDetailsByResource,
            inputKey: \GetComplianceDetailsByResourceRequest.nextToken,
            outputKey: \GetComplianceDetailsByResourceResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getComplianceDetailsByResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - complianceTypes: Filters the results by compliance.  INSUFFICIENT_DATA is a valid ComplianceType that is returned when an Config rule cannot be evaluated. However, INSUFFICIENT_DATA cannot be used as a ComplianceType for filtering results.
    ///   - resourceEvaluationId: The unique ID of Amazon Web Services resource execution for which you want to retrieve evaluation results.   You need to only provide either a ResourceEvaluationID or a ResourceID and ResourceType.
    ///   - resourceId: The ID of the Amazon Web Services resource for which you want compliance
    ///   - resourceType: The type of the Amazon Web Services resource for which you want compliance
    ///   - logger: Logger used for logging
    @inlinable
    public func getComplianceDetailsByResourcePaginator(
        complianceTypes: [ComplianceType]? = nil,
        resourceEvaluationId: String? = nil,
        resourceId: String? = nil,
        resourceType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetComplianceDetailsByResourceRequest, GetComplianceDetailsByResourceResponse> {
        let input = GetComplianceDetailsByResourceRequest(
            complianceTypes: complianceTypes, 
            resourceEvaluationId: resourceEvaluationId, 
            resourceId: resourceId, 
            resourceType: resourceType
        )
        return self.getComplianceDetailsByResourcePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getConformancePackComplianceDetails(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getConformancePackComplianceDetailsPaginator(
        _ input: GetConformancePackComplianceDetailsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetConformancePackComplianceDetailsRequest, GetConformancePackComplianceDetailsResponse> {
        return .init(
            input: input,
            command: self.getConformancePackComplianceDetails,
            inputKey: \GetConformancePackComplianceDetailsRequest.nextToken,
            outputKey: \GetConformancePackComplianceDetailsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getConformancePackComplianceDetails(_:logger:)``.
    ///
    /// - Parameters:
    ///   - conformancePackName: Name of the conformance pack.
    ///   - filters: A ConformancePackEvaluationFilters object.
    ///   - limit: The maximum number of evaluation results returned on each page. If you do no specify a number, Config uses the default. The default is 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func getConformancePackComplianceDetailsPaginator(
        conformancePackName: String,
        filters: ConformancePackEvaluationFilters? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetConformancePackComplianceDetailsRequest, GetConformancePackComplianceDetailsResponse> {
        let input = GetConformancePackComplianceDetailsRequest(
            conformancePackName: conformancePackName, 
            filters: filters, 
            limit: limit
        )
        return self.getConformancePackComplianceDetailsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getConformancePackComplianceSummary(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getConformancePackComplianceSummaryPaginator(
        _ input: GetConformancePackComplianceSummaryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetConformancePackComplianceSummaryRequest, GetConformancePackComplianceSummaryResponse> {
        return .init(
            input: input,
            command: self.getConformancePackComplianceSummary,
            inputKey: \GetConformancePackComplianceSummaryRequest.nextToken,
            outputKey: \GetConformancePackComplianceSummaryResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getConformancePackComplianceSummary(_:logger:)``.
    ///
    /// - Parameters:
    ///   - conformancePackNames: Names of conformance packs.
    ///   - limit: The maximum number of conformance packs returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func getConformancePackComplianceSummaryPaginator(
        conformancePackNames: [String],
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetConformancePackComplianceSummaryRequest, GetConformancePackComplianceSummaryResponse> {
        let input = GetConformancePackComplianceSummaryRequest(
            conformancePackNames: conformancePackNames, 
            limit: limit
        )
        return self.getConformancePackComplianceSummaryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getDiscoveredResourceCounts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getDiscoveredResourceCountsPaginator(
        _ input: GetDiscoveredResourceCountsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetDiscoveredResourceCountsRequest, GetDiscoveredResourceCountsResponse> {
        return .init(
            input: input,
            command: self.getDiscoveredResourceCounts,
            inputKey: \GetDiscoveredResourceCountsRequest.nextToken,
            outputKey: \GetDiscoveredResourceCountsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getDiscoveredResourceCounts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The maximum number of ResourceCount objects
    ///   - resourceTypes: The comma-separated list that specifies the resource types that
    ///   - logger: Logger used for logging
    @inlinable
    public func getDiscoveredResourceCountsPaginator(
        limit: Int? = nil,
        resourceTypes: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetDiscoveredResourceCountsRequest, GetDiscoveredResourceCountsResponse> {
        let input = GetDiscoveredResourceCountsRequest(
            limit: limit, 
            resourceTypes: resourceTypes
        )
        return self.getDiscoveredResourceCountsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getOrganizationConfigRuleDetailedStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getOrganizationConfigRuleDetailedStatusPaginator(
        _ input: GetOrganizationConfigRuleDetailedStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetOrganizationConfigRuleDetailedStatusRequest, GetOrganizationConfigRuleDetailedStatusResponse> {
        return .init(
            input: input,
            command: self.getOrganizationConfigRuleDetailedStatus,
            inputKey: \GetOrganizationConfigRuleDetailedStatusRequest.nextToken,
            outputKey: \GetOrganizationConfigRuleDetailedStatusResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getOrganizationConfigRuleDetailedStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: A StatusDetailFilters object.
    ///   - limit: The maximum number of OrganizationConfigRuleDetailedStatus returned on each page. If you do not specify a number, Config uses the default. The default is 100.
    ///   - organizationConfigRuleName: The name of your organization Config rule for which you want status details for member accounts.
    ///   - logger: Logger used for logging
    @inlinable
    public func getOrganizationConfigRuleDetailedStatusPaginator(
        filters: StatusDetailFilters? = nil,
        limit: Int? = nil,
        organizationConfigRuleName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetOrganizationConfigRuleDetailedStatusRequest, GetOrganizationConfigRuleDetailedStatusResponse> {
        let input = GetOrganizationConfigRuleDetailedStatusRequest(
            filters: filters, 
            limit: limit, 
            organizationConfigRuleName: organizationConfigRuleName
        )
        return self.getOrganizationConfigRuleDetailedStatusPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getOrganizationConformancePackDetailedStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getOrganizationConformancePackDetailedStatusPaginator(
        _ input: GetOrganizationConformancePackDetailedStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetOrganizationConformancePackDetailedStatusRequest, GetOrganizationConformancePackDetailedStatusResponse> {
        return .init(
            input: input,
            command: self.getOrganizationConformancePackDetailedStatus,
            inputKey: \GetOrganizationConformancePackDetailedStatusRequest.nextToken,
            outputKey: \GetOrganizationConformancePackDetailedStatusResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getOrganizationConformancePackDetailedStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: An OrganizationResourceDetailedStatusFilters object.
    ///   - limit: The maximum number of OrganizationConformancePackDetailedStatuses returned on each page.
    ///   - organizationConformancePackName: The name of organization conformance pack for which you want status details for member accounts.
    ///   - logger: Logger used for logging
    @inlinable
    public func getOrganizationConformancePackDetailedStatusPaginator(
        filters: OrganizationResourceDetailedStatusFilters? = nil,
        limit: Int? = nil,
        organizationConformancePackName: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetOrganizationConformancePackDetailedStatusRequest, GetOrganizationConformancePackDetailedStatusResponse> {
        let input = GetOrganizationConformancePackDetailedStatusRequest(
            filters: filters, 
            limit: limit, 
            organizationConformancePackName: organizationConformancePackName
        )
        return self.getOrganizationConformancePackDetailedStatusPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getResourceConfigHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getResourceConfigHistoryPaginator(
        _ input: GetResourceConfigHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetResourceConfigHistoryRequest, GetResourceConfigHistoryResponse> {
        return .init(
            input: input,
            command: self.getResourceConfigHistory,
            inputKey: \GetResourceConfigHistoryRequest.nextToken,
            outputKey: \GetResourceConfigHistoryResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getResourceConfigHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - chronologicalOrder: The chronological order for configuration items listed. By
    ///   - earlierTime: The chronologically earliest time in the time range for which the history requested. If not
    ///   - laterTime: The chronologically latest time in the time range for which the history requested. If not specified,
    ///   - limit: The maximum number of configuration items returned on each
    ///   - resourceId: The ID of the resource (for example.,
    ///   - resourceType: The resource type.
    ///   - logger: Logger used for logging
    @inlinable
    public func getResourceConfigHistoryPaginator(
        chronologicalOrder: ChronologicalOrder? = nil,
        earlierTime: Date? = nil,
        laterTime: Date? = nil,
        limit: Int? = nil,
        resourceId: String,
        resourceType: ResourceType,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetResourceConfigHistoryRequest, GetResourceConfigHistoryResponse> {
        let input = GetResourceConfigHistoryRequest(
            chronologicalOrder: chronologicalOrder, 
            earlierTime: earlierTime, 
            laterTime: laterTime, 
            limit: limit, 
            resourceId: resourceId, 
            resourceType: resourceType
        )
        return self.getResourceConfigHistoryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listAggregateDiscoveredResources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listAggregateDiscoveredResourcesPaginator(
        _ input: ListAggregateDiscoveredResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAggregateDiscoveredResourcesRequest, ListAggregateDiscoveredResourcesResponse> {
        return .init(
            input: input,
            command: self.listAggregateDiscoveredResources,
            inputKey: \ListAggregateDiscoveredResourcesRequest.nextToken,
            outputKey: \ListAggregateDiscoveredResourcesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listAggregateDiscoveredResources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - filters: Filters the results based on the ResourceFilters object.
    ///   - limit: The maximum number of resource identifiers returned on each page. You cannot specify a number greater than 100. If you specify 0, Config uses the default.
    ///   - resourceType: The type of resources that you want Config to list in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func listAggregateDiscoveredResourcesPaginator(
        configurationAggregatorName: String,
        filters: ResourceFilters? = nil,
        limit: Int? = nil,
        resourceType: ResourceType,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListAggregateDiscoveredResourcesRequest, ListAggregateDiscoveredResourcesResponse> {
        let input = ListAggregateDiscoveredResourcesRequest(
            configurationAggregatorName: configurationAggregatorName, 
            filters: filters, 
            limit: limit, 
            resourceType: resourceType
        )
        return self.listAggregateDiscoveredResourcesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listConfigurationRecorders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listConfigurationRecordersPaginator(
        _ input: ListConfigurationRecordersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConfigurationRecordersRequest, ListConfigurationRecordersResponse> {
        return .init(
            input: input,
            command: self.listConfigurationRecorders,
            inputKey: \ListConfigurationRecordersRequest.nextToken,
            outputKey: \ListConfigurationRecordersResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listConfigurationRecorders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: Filters the results based on a list of ConfigurationRecorderFilter objects that you specify.
    ///   - maxResults: The maximum number of results to include in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func listConfigurationRecordersPaginator(
        filters: [ConfigurationRecorderFilter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListConfigurationRecordersRequest, ListConfigurationRecordersResponse> {
        let input = ListConfigurationRecordersRequest(
            filters: filters, 
            maxResults: maxResults
        )
        return self.listConfigurationRecordersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listConformancePackComplianceScores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listConformancePackComplianceScoresPaginator(
        _ input: ListConformancePackComplianceScoresRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListConformancePackComplianceScoresRequest, ListConformancePackComplianceScoresResponse> {
        return .init(
            input: input,
            command: self.listConformancePackComplianceScores,
            inputKey: \ListConformancePackComplianceScoresRequest.nextToken,
            outputKey: \ListConformancePackComplianceScoresResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listConformancePackComplianceScores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: Filters the results based on the ConformancePackComplianceScoresFilters.
    ///   - limit: The maximum number of conformance pack compliance scores returned on each page.
    ///   - sortBy: Sorts your conformance pack compliance scores in either ascending or descending order, depending on SortOrder. By default, conformance pack compliance scores are sorted in alphabetical order by name of the conformance pack.
    ///   - sortOrder: Determines the order in which conformance pack compliance scores are sorted. Either in ascending or descending order. By default, conformance pack compliance scores are sorted in alphabetical order by name of the conformance pack. Conformance pack compliance scores are sorted in reverse alphabetical order if you enter DESCENDING. You can sort conformance pack compliance scores by the numerical value of the compliance score by entering SCORE in the SortBy action. When compliance scores are sorted by SCORE, conformance packs with a compliance score of INSUFFICIENT_DATA will be last when sorting by ascending order and first when sorting by descending order.
    ///   - logger: Logger used for logging
    @inlinable
    public func listConformancePackComplianceScoresPaginator(
        filters: ConformancePackComplianceScoresFilters? = nil,
        limit: Int? = nil,
        sortBy: SortBy? = nil,
        sortOrder: SortOrder? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListConformancePackComplianceScoresRequest, ListConformancePackComplianceScoresResponse> {
        let input = ListConformancePackComplianceScoresRequest(
            filters: filters, 
            limit: limit, 
            sortBy: sortBy, 
            sortOrder: sortOrder
        )
        return self.listConformancePackComplianceScoresPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listDiscoveredResources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listDiscoveredResourcesPaginator(
        _ input: ListDiscoveredResourcesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListDiscoveredResourcesRequest, ListDiscoveredResourcesResponse> {
        return .init(
            input: input,
            command: self.listDiscoveredResources,
            inputKey: \ListDiscoveredResourcesRequest.nextToken,
            outputKey: \ListDiscoveredResourcesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listDiscoveredResources(_:logger:)``.
    ///
    /// - Parameters:
    ///   - includeDeletedResources: Specifies whether Config includes deleted resources in the
    ///   - limit: The maximum number of resource identifiers returned on each
    ///   - resourceIds: The IDs of only those resources that you want Config to
    ///   - resourceName: The custom name of only those resources that you want Config to list in the response. If you do not specify this
    ///   - resourceType: The type of resources that you want Config to list in the
    ///   - logger: Logger used for logging
    @inlinable
    public func listDiscoveredResourcesPaginator(
        includeDeletedResources: Bool? = nil,
        limit: Int? = nil,
        resourceIds: [String]? = nil,
        resourceName: String? = nil,
        resourceType: ResourceType,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListDiscoveredResourcesRequest, ListDiscoveredResourcesResponse> {
        let input = ListDiscoveredResourcesRequest(
            includeDeletedResources: includeDeletedResources, 
            limit: limit, 
            resourceIds: resourceIds, 
            resourceName: resourceName, 
            resourceType: resourceType
        )
        return self.listDiscoveredResourcesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listResourceEvaluations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listResourceEvaluationsPaginator(
        _ input: ListResourceEvaluationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListResourceEvaluationsRequest, ListResourceEvaluationsResponse> {
        return .init(
            input: input,
            command: self.listResourceEvaluations,
            inputKey: \ListResourceEvaluationsRequest.nextToken,
            outputKey: \ListResourceEvaluationsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listResourceEvaluations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: Returns a ResourceEvaluationFilters object.
    ///   - limit: The maximum number of evaluations returned on each page. The default is 10.
    ///   - logger: Logger used for logging
    @inlinable
    public func listResourceEvaluationsPaginator(
        filters: ResourceEvaluationFilters? = nil,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListResourceEvaluationsRequest, ListResourceEvaluationsResponse> {
        let input = ListResourceEvaluationsRequest(
            filters: filters, 
            limit: limit
        )
        return self.listResourceEvaluationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listStoredQueries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listStoredQueriesPaginator(
        _ input: ListStoredQueriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStoredQueriesRequest, ListStoredQueriesResponse> {
        return .init(
            input: input,
            command: self.listStoredQueries,
            inputKey: \ListStoredQueriesRequest.nextToken,
            outputKey: \ListStoredQueriesResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listStoredQueries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of results to be returned with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func listStoredQueriesPaginator(
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListStoredQueriesRequest, ListStoredQueriesResponse> {
        let input = ListStoredQueriesRequest(
            maxResults: maxResults
        )
        return self.listStoredQueriesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listTagsForResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listTagsForResourcePaginator(
        _ input: ListTagsForResourceRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTagsForResourceRequest, ListTagsForResourceResponse> {
        return .init(
            input: input,
            command: self.listTagsForResource,
            inputKey: \ListTagsForResourceRequest.nextToken,
            outputKey: \ListTagsForResourceResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listTagsForResource(_:logger:)``.
    ///
    /// - Parameters:
    ///   - limit: The maximum number of tags returned on each page. The limit maximum is 50. You cannot specify a number greater than 50. If you specify 0, Config uses the default.
    ///   - resourceArn: The Amazon Resource Name (ARN) that identifies the resource for which to list the tags. The following resources are supported:    ConfigurationRecorder     ConfigRule     OrganizationConfigRule     ConformancePack     OrganizationConformancePack     ConfigurationAggregator     AggregationAuthorization     StoredQuery
    ///   - logger: Logger used for logging
    @inlinable
    public func listTagsForResourcePaginator(
        limit: Int? = nil,
        resourceArn: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListTagsForResourceRequest, ListTagsForResourceResponse> {
        let input = ListTagsForResourceRequest(
            limit: limit, 
            resourceArn: resourceArn
        )
        return self.listTagsForResourcePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``selectAggregateResourceConfig(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func selectAggregateResourceConfigPaginator(
        _ input: SelectAggregateResourceConfigRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SelectAggregateResourceConfigRequest, SelectAggregateResourceConfigResponse> {
        return .init(
            input: input,
            command: self.selectAggregateResourceConfig,
            inputKey: \SelectAggregateResourceConfigRequest.nextToken,
            outputKey: \SelectAggregateResourceConfigResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``selectAggregateResourceConfig(_:logger:)``.
    ///
    /// - Parameters:
    ///   - configurationAggregatorName: The name of the configuration aggregator.
    ///   - expression: The SQL query SELECT command.
    ///   - limit: The maximum number of query results returned on each page.
    ///   - maxResults: The maximum number of query results returned on each page. Config also allows the Limit request parameter.
    ///   - logger: Logger used for logging
    @inlinable
    public func selectAggregateResourceConfigPaginator(
        configurationAggregatorName: String,
        expression: String,
        limit: Int? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SelectAggregateResourceConfigRequest, SelectAggregateResourceConfigResponse> {
        let input = SelectAggregateResourceConfigRequest(
            configurationAggregatorName: configurationAggregatorName, 
            expression: expression, 
            limit: limit, 
            maxResults: maxResults
        )
        return self.selectAggregateResourceConfigPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``selectResourceConfig(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func selectResourceConfigPaginator(
        _ input: SelectResourceConfigRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SelectResourceConfigRequest, SelectResourceConfigResponse> {
        return .init(
            input: input,
            command: self.selectResourceConfig,
            inputKey: \SelectResourceConfigRequest.nextToken,
            outputKey: \SelectResourceConfigResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``selectResourceConfig(_:logger:)``.
    ///
    /// - Parameters:
    ///   - expression: The SQL query SELECT command.
    ///   - limit: The maximum number of query results returned on each page.
    ///   - logger: Logger used for logging
    @inlinable
    public func selectResourceConfigPaginator(
        expression: String,
        limit: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SelectResourceConfigRequest, SelectResourceConfigResponse> {
        let input = SelectResourceConfigRequest(
            expression: expression, 
            limit: limit
        )
        return self.selectResourceConfigPaginator(input, logger: logger)
    }
}

extension ConfigService.DescribeAggregateComplianceByConfigRulesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeAggregateComplianceByConfigRulesRequest {
        return .init(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeAggregateComplianceByConformancePacksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeAggregateComplianceByConformancePacksRequest {
        return .init(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeAggregationAuthorizationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeAggregationAuthorizationsRequest {
        return .init(
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeComplianceByConfigRuleRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeComplianceByConfigRuleRequest {
        return .init(
            complianceTypes: self.complianceTypes,
            configRuleNames: self.configRuleNames,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeComplianceByResourceRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeComplianceByResourceRequest {
        return .init(
            complianceTypes: self.complianceTypes,
            limit: self.limit,
            nextToken: token,
            resourceId: self.resourceId,
            resourceType: self.resourceType
        )
    }
}

extension ConfigService.DescribeConfigRuleEvaluationStatusRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeConfigRuleEvaluationStatusRequest {
        return .init(
            configRuleNames: self.configRuleNames,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeConfigRulesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeConfigRulesRequest {
        return .init(
            configRuleNames: self.configRuleNames,
            filters: self.filters,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeConfigurationAggregatorSourcesStatusRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeConfigurationAggregatorSourcesStatusRequest {
        return .init(
            configurationAggregatorName: self.configurationAggregatorName,
            limit: self.limit,
            nextToken: token,
            updateStatus: self.updateStatus
        )
    }
}

extension ConfigService.DescribeConfigurationAggregatorsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeConfigurationAggregatorsRequest {
        return .init(
            configurationAggregatorNames: self.configurationAggregatorNames,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeConformancePackComplianceRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeConformancePackComplianceRequest {
        return .init(
            conformancePackName: self.conformancePackName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeConformancePackStatusRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeConformancePackStatusRequest {
        return .init(
            conformancePackNames: self.conformancePackNames,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeConformancePacksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeConformancePacksRequest {
        return .init(
            conformancePackNames: self.conformancePackNames,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeOrganizationConfigRuleStatusesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeOrganizationConfigRuleStatusesRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            organizationConfigRuleNames: self.organizationConfigRuleNames
        )
    }
}

extension ConfigService.DescribeOrganizationConfigRulesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeOrganizationConfigRulesRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            organizationConfigRuleNames: self.organizationConfigRuleNames
        )
    }
}

extension ConfigService.DescribeOrganizationConformancePackStatusesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeOrganizationConformancePackStatusesRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            organizationConformancePackNames: self.organizationConformancePackNames
        )
    }
}

extension ConfigService.DescribeOrganizationConformancePacksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeOrganizationConformancePacksRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            organizationConformancePackNames: self.organizationConformancePackNames
        )
    }
}

extension ConfigService.DescribePendingAggregationRequestsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribePendingAggregationRequestsRequest {
        return .init(
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.DescribeRemediationExceptionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeRemediationExceptionsRequest {
        return .init(
            configRuleName: self.configRuleName,
            limit: self.limit,
            nextToken: token,
            resourceKeys: self.resourceKeys
        )
    }
}

extension ConfigService.DescribeRemediationExecutionStatusRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeRemediationExecutionStatusRequest {
        return .init(
            configRuleName: self.configRuleName,
            limit: self.limit,
            nextToken: token,
            resourceKeys: self.resourceKeys
        )
    }
}

extension ConfigService.DescribeRetentionConfigurationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.DescribeRetentionConfigurationsRequest {
        return .init(
            nextToken: token,
            retentionConfigurationNames: self.retentionConfigurationNames
        )
    }
}

extension ConfigService.GetAggregateComplianceDetailsByConfigRuleRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetAggregateComplianceDetailsByConfigRuleRequest {
        return .init(
            accountId: self.accountId,
            awsRegion: self.awsRegion,
            complianceType: self.complianceType,
            configRuleName: self.configRuleName,
            configurationAggregatorName: self.configurationAggregatorName,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.GetAggregateConfigRuleComplianceSummaryRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetAggregateConfigRuleComplianceSummaryRequest {
        return .init(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            groupByKey: self.groupByKey,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.GetAggregateConformancePackComplianceSummaryRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetAggregateConformancePackComplianceSummaryRequest {
        return .init(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            groupByKey: self.groupByKey,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.GetAggregateDiscoveredResourceCountsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetAggregateDiscoveredResourceCountsRequest {
        return .init(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            groupByKey: self.groupByKey,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.GetComplianceDetailsByConfigRuleRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetComplianceDetailsByConfigRuleRequest {
        return .init(
            complianceTypes: self.complianceTypes,
            configRuleName: self.configRuleName,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.GetComplianceDetailsByResourceRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetComplianceDetailsByResourceRequest {
        return .init(
            complianceTypes: self.complianceTypes,
            nextToken: token,
            resourceEvaluationId: self.resourceEvaluationId,
            resourceId: self.resourceId,
            resourceType: self.resourceType
        )
    }
}

extension ConfigService.GetConformancePackComplianceDetailsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetConformancePackComplianceDetailsRequest {
        return .init(
            conformancePackName: self.conformancePackName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.GetConformancePackComplianceSummaryRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetConformancePackComplianceSummaryRequest {
        return .init(
            conformancePackNames: self.conformancePackNames,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.GetDiscoveredResourceCountsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetDiscoveredResourceCountsRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            resourceTypes: self.resourceTypes
        )
    }
}

extension ConfigService.GetOrganizationConfigRuleDetailedStatusRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetOrganizationConfigRuleDetailedStatusRequest {
        return .init(
            filters: self.filters,
            limit: self.limit,
            nextToken: token,
            organizationConfigRuleName: self.organizationConfigRuleName
        )
    }
}

extension ConfigService.GetOrganizationConformancePackDetailedStatusRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetOrganizationConformancePackDetailedStatusRequest {
        return .init(
            filters: self.filters,
            limit: self.limit,
            nextToken: token,
            organizationConformancePackName: self.organizationConformancePackName
        )
    }
}

extension ConfigService.GetResourceConfigHistoryRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.GetResourceConfigHistoryRequest {
        return .init(
            chronologicalOrder: self.chronologicalOrder,
            earlierTime: self.earlierTime,
            laterTime: self.laterTime,
            limit: self.limit,
            nextToken: token,
            resourceId: self.resourceId,
            resourceType: self.resourceType
        )
    }
}

extension ConfigService.ListAggregateDiscoveredResourcesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.ListAggregateDiscoveredResourcesRequest {
        return .init(
            configurationAggregatorName: self.configurationAggregatorName,
            filters: self.filters,
            limit: self.limit,
            nextToken: token,
            resourceType: self.resourceType
        )
    }
}

extension ConfigService.ListConfigurationRecordersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.ListConfigurationRecordersRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ConfigService.ListConformancePackComplianceScoresRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.ListConformancePackComplianceScoresRequest {
        return .init(
            filters: self.filters,
            limit: self.limit,
            nextToken: token,
            sortBy: self.sortBy,
            sortOrder: self.sortOrder
        )
    }
}

extension ConfigService.ListDiscoveredResourcesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.ListDiscoveredResourcesRequest {
        return .init(
            includeDeletedResources: self.includeDeletedResources,
            limit: self.limit,
            nextToken: token,
            resourceIds: self.resourceIds,
            resourceName: self.resourceName,
            resourceType: self.resourceType
        )
    }
}

extension ConfigService.ListResourceEvaluationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.ListResourceEvaluationsRequest {
        return .init(
            filters: self.filters,
            limit: self.limit,
            nextToken: token
        )
    }
}

extension ConfigService.ListStoredQueriesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.ListStoredQueriesRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ConfigService.ListTagsForResourceRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.ListTagsForResourceRequest {
        return .init(
            limit: self.limit,
            nextToken: token,
            resourceArn: self.resourceArn
        )
    }
}

extension ConfigService.SelectAggregateResourceConfigRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.SelectAggregateResourceConfigRequest {
        return .init(
            configurationAggregatorName: self.configurationAggregatorName,
            expression: self.expression,
            limit: self.limit,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension ConfigService.SelectResourceConfigRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> ConfigService.SelectResourceConfigRequest {
        return .init(
            expression: self.expression,
            limit: self.limit,
            nextToken: token
        )
    }
}
