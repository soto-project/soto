//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2023 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS Deadline service.
///
/// The Amazon Web Services Deadline Cloud API provides infrastructure and centralized management for your projects. Use the Deadline Cloud API to onboard users, assign projects, and attach permissions specific to their job function. With Deadline Cloud, content production teams can deploy resources for their workforce securely in the cloud, reducing the costs of added physical infrastructure. Keep your content production operations secure, while allowing your contributors to access the tools they need, such as scalable high-speed storage, licenses, and cost management services.
public struct Deadline: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Deadline client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "Deadline",
            serviceIdentifier: "deadline",
            serviceProtocol: .restjson,
            apiVersion: "2023-10-12",
            endpoint: endpoint,
            errorType: DeadlineErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Assigns a farm membership level to a member.
    @Sendable
    public func associateMemberToFarm(_ input: AssociateMemberToFarmRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateMemberToFarmResponse {
        return try await self.client.execute(
            operation: "AssociateMemberToFarm", 
            path: "/2023-10-12/farms/{farmId}/members/{principalId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Assigns a fleet membership level to a member.
    @Sendable
    public func associateMemberToFleet(_ input: AssociateMemberToFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateMemberToFleetResponse {
        return try await self.client.execute(
            operation: "AssociateMemberToFleet", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/members/{principalId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Assigns a job membership level to a member
    @Sendable
    public func associateMemberToJob(_ input: AssociateMemberToJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateMemberToJobResponse {
        return try await self.client.execute(
            operation: "AssociateMemberToJob", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/members/{principalId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Assigns a queue membership level to a member
    @Sendable
    public func associateMemberToQueue(_ input: AssociateMemberToQueueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateMemberToQueueResponse {
        return try await self.client.execute(
            operation: "AssociateMemberToQueue", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/members/{principalId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Get Amazon Web Services credentials from the fleet role. The IAM permissions of the credentials are scoped down to have read-only access.
    @Sendable
    public func assumeFleetRoleForRead(_ input: AssumeFleetRoleForReadRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssumeFleetRoleForReadResponse {
        return try await self.client.execute(
            operation: "AssumeFleetRoleForRead", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/read-roles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Get credentials from the fleet role for a worker.
    @Sendable
    public func assumeFleetRoleForWorker(_ input: AssumeFleetRoleForWorkerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssumeFleetRoleForWorkerResponse {
        return try await self.client.execute(
            operation: "AssumeFleetRoleForWorker", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers/{workerId}/fleet-roles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "scheduling.", 
            logger: logger
        )
    }

    /// Gets Amazon Web Services credentials from the queue role. The IAM permissions of the credentials are scoped down to have read-only access.
    @Sendable
    public func assumeQueueRoleForRead(_ input: AssumeQueueRoleForReadRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssumeQueueRoleForReadResponse {
        return try await self.client.execute(
            operation: "AssumeQueueRoleForRead", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/read-roles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Allows a user to assume a role for a queue.
    @Sendable
    public func assumeQueueRoleForUser(_ input: AssumeQueueRoleForUserRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssumeQueueRoleForUserResponse {
        return try await self.client.execute(
            operation: "AssumeQueueRoleForUser", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/user-roles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Allows a worker to assume a queue role.
    @Sendable
    public func assumeQueueRoleForWorker(_ input: AssumeQueueRoleForWorkerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssumeQueueRoleForWorkerResponse {
        return try await self.client.execute(
            operation: "AssumeQueueRoleForWorker", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers/{workerId}/queue-roles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "scheduling.", 
            logger: logger
        )
    }

    /// Get batched job details for a worker.
    @Sendable
    public func batchGetJobEntity(_ input: BatchGetJobEntityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BatchGetJobEntityResponse {
        return try await self.client.execute(
            operation: "BatchGetJobEntity", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers/{workerId}/batchGetJobEntity", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "scheduling.", 
            logger: logger
        )
    }

    /// Copies a job template to an Amazon S3 bucket.
    @Sendable
    public func copyJobTemplate(_ input: CopyJobTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyJobTemplateResponse {
        return try await self.client.execute(
            operation: "CopyJobTemplate", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/template", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates a budget to set spending thresholds for your rendering activity.
    @Sendable
    public func createBudget(_ input: CreateBudgetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateBudgetResponse {
        return try await self.client.execute(
            operation: "CreateBudget", 
            path: "/2023-10-12/farms/{farmId}/budgets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates a farm to allow space for queues and fleets. Farms are the space where the components of your renders gather and are pieced together in the cloud. Farms contain budgets and allow you to enforce permissions. Deadline Cloud farms are a useful container for large projects.
    @Sendable
    public func createFarm(_ input: CreateFarmRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFarmResponse {
        return try await self.client.execute(
            operation: "CreateFarm", 
            path: "/2023-10-12/farms", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates a fleet. Fleets gather information relating to compute, or capacity, for renders within your farms. You can choose to manage your own capacity or opt to have fleets fully managed by Deadline Cloud.
    @Sendable
    public func createFleet(_ input: CreateFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFleetResponse {
        return try await self.client.execute(
            operation: "CreateFleet", 
            path: "/2023-10-12/farms/{farmId}/fleets", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates a job. A job is a render submission submitted by a user. It contains specific job properties outlined as steps and tasks.
    @Sendable
    public func createJob(_ input: CreateJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateJobResponse {
        return try await self.client.execute(
            operation: "CreateJob", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates a license endpoint to integrate your various licensed software used for rendering on Deadline Cloud.
    @Sendable
    public func createLicenseEndpoint(_ input: CreateLicenseEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLicenseEndpointResponse {
        return try await self.client.execute(
            operation: "CreateLicenseEndpoint", 
            path: "/2023-10-12/license-endpoints", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates an Amazon Web Services Deadline Cloud monitor that you can use to view your farms, queues, and fleets. After you submit a job, you can track the progress of the tasks and steps that make up the job, and then download the job's results.
    @Sendable
    public func createMonitor(_ input: CreateMonitorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateMonitorResponse {
        return try await self.client.execute(
            operation: "CreateMonitor", 
            path: "/2023-10-12/monitors", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates a queue to coordinate the order in which jobs run on a farm. A queue can also specify where to pull resources and indicate where to output completed jobs.
    @Sendable
    public func createQueue(_ input: CreateQueueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateQueueResponse {
        return try await self.client.execute(
            operation: "CreateQueue", 
            path: "/2023-10-12/farms/{farmId}/queues", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates an environment for a queue that defines how jobs in the queue run.
    @Sendable
    public func createQueueEnvironment(_ input: CreateQueueEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateQueueEnvironmentResponse {
        return try await self.client.execute(
            operation: "CreateQueueEnvironment", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/environments", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates an association between a queue and a fleet.
    @Sendable
    public func createQueueFleetAssociation(_ input: CreateQueueFleetAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateQueueFleetAssociationResponse {
        return try await self.client.execute(
            operation: "CreateQueueFleetAssociation", 
            path: "/2023-10-12/farms/{farmId}/queue-fleet-associations", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates a storage profile that specifies the operating system, file type, and file location of resources used on a farm.
    @Sendable
    public func createStorageProfile(_ input: CreateStorageProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStorageProfileResponse {
        return try await self.client.execute(
            operation: "CreateStorageProfile", 
            path: "/2023-10-12/farms/{farmId}/storage-profiles", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Creates a worker. A worker tells your instance how much processing power (vCPU), and memory (GiB) you’ll need to assemble the digital assets held within a particular instance. You can specify certain instance types to use, or let the worker know which instances types to exclude.
    @Sendable
    public func createWorker(_ input: CreateWorkerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateWorkerResponse {
        return try await self.client.execute(
            operation: "CreateWorker", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "scheduling.", 
            logger: logger
        )
    }

    /// Deletes a budget.
    @Sendable
    public func deleteBudget(_ input: DeleteBudgetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteBudgetResponse {
        return try await self.client.execute(
            operation: "DeleteBudget", 
            path: "/2023-10-12/farms/{farmId}/budgets/{budgetId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Deletes a farm.
    @Sendable
    public func deleteFarm(_ input: DeleteFarmRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFarmResponse {
        return try await self.client.execute(
            operation: "DeleteFarm", 
            path: "/2023-10-12/farms/{farmId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Deletes a fleet.
    @Sendable
    public func deleteFleet(_ input: DeleteFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFleetResponse {
        return try await self.client.execute(
            operation: "DeleteFleet", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Deletes a license endpoint.
    @Sendable
    public func deleteLicenseEndpoint(_ input: DeleteLicenseEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLicenseEndpointResponse {
        return try await self.client.execute(
            operation: "DeleteLicenseEndpoint", 
            path: "/2023-10-12/license-endpoints/{licenseEndpointId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Deletes a metered product.
    @Sendable
    public func deleteMeteredProduct(_ input: DeleteMeteredProductRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMeteredProductResponse {
        return try await self.client.execute(
            operation: "DeleteMeteredProduct", 
            path: "/2023-10-12/license-endpoints/{licenseEndpointId}/metered-products/{productId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Removes a Deadline Cloud monitor. After you delete a monitor, you can create a new one and attach farms to the monitor.
    @Sendable
    public func deleteMonitor(_ input: DeleteMonitorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteMonitorResponse {
        return try await self.client.execute(
            operation: "DeleteMonitor", 
            path: "/2023-10-12/monitors/{monitorId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Deletes a queue.
    @Sendable
    public func deleteQueue(_ input: DeleteQueueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteQueueResponse {
        return try await self.client.execute(
            operation: "DeleteQueue", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Deletes a queue environment.
    @Sendable
    public func deleteQueueEnvironment(_ input: DeleteQueueEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteQueueEnvironmentResponse {
        return try await self.client.execute(
            operation: "DeleteQueueEnvironment", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/environments/{queueEnvironmentId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Deletes a queue-fleet association.
    @Sendable
    public func deleteQueueFleetAssociation(_ input: DeleteQueueFleetAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteQueueFleetAssociationResponse {
        return try await self.client.execute(
            operation: "DeleteQueueFleetAssociation", 
            path: "/2023-10-12/farms/{farmId}/queue-fleet-associations/{queueId}/{fleetId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Deletes a storage profile.
    @Sendable
    public func deleteStorageProfile(_ input: DeleteStorageProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteStorageProfileResponse {
        return try await self.client.execute(
            operation: "DeleteStorageProfile", 
            path: "/2023-10-12/farms/{farmId}/storage-profiles/{storageProfileId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Deletes a worker.
    @Sendable
    public func deleteWorker(_ input: DeleteWorkerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteWorkerResponse {
        return try await self.client.execute(
            operation: "DeleteWorker", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers/{workerId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Disassociates a member from a farm.
    @Sendable
    public func disassociateMemberFromFarm(_ input: DisassociateMemberFromFarmRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateMemberFromFarmResponse {
        return try await self.client.execute(
            operation: "DisassociateMemberFromFarm", 
            path: "/2023-10-12/farms/{farmId}/members/{principalId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Disassociates a member from a fleet.
    @Sendable
    public func disassociateMemberFromFleet(_ input: DisassociateMemberFromFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateMemberFromFleetResponse {
        return try await self.client.execute(
            operation: "DisassociateMemberFromFleet", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/members/{principalId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Disassociates a member from a job.
    @Sendable
    public func disassociateMemberFromJob(_ input: DisassociateMemberFromJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateMemberFromJobResponse {
        return try await self.client.execute(
            operation: "DisassociateMemberFromJob", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/members/{principalId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Disassociates a member from a queue.
    @Sendable
    public func disassociateMemberFromQueue(_ input: DisassociateMemberFromQueueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateMemberFromQueueResponse {
        return try await self.client.execute(
            operation: "DisassociateMemberFromQueue", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/members/{principalId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Get a budget.
    @Sendable
    public func getBudget(_ input: GetBudgetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetBudgetResponse {
        return try await self.client.execute(
            operation: "GetBudget", 
            path: "/2023-10-12/farms/{farmId}/budgets/{budgetId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Get a farm.
    @Sendable
    public func getFarm(_ input: GetFarmRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFarmResponse {
        return try await self.client.execute(
            operation: "GetFarm", 
            path: "/2023-10-12/farms/{farmId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Get a fleet.
    @Sendable
    public func getFleet(_ input: GetFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFleetResponse {
        return try await self.client.execute(
            operation: "GetFleet", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a Deadline Cloud job.
    @Sendable
    public func getJob(_ input: GetJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetJobResponse {
        return try await self.client.execute(
            operation: "GetJob", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a licence endpoint.
    @Sendable
    public func getLicenseEndpoint(_ input: GetLicenseEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLicenseEndpointResponse {
        return try await self.client.execute(
            operation: "GetLicenseEndpoint", 
            path: "/2023-10-12/license-endpoints/{licenseEndpointId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets information about the specified monitor.
    @Sendable
    public func getMonitor(_ input: GetMonitorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetMonitorResponse {
        return try await self.client.execute(
            operation: "GetMonitor", 
            path: "/2023-10-12/monitors/{monitorId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a queue.
    @Sendable
    public func getQueue(_ input: GetQueueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueueResponse {
        return try await self.client.execute(
            operation: "GetQueue", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a queue environment.
    @Sendable
    public func getQueueEnvironment(_ input: GetQueueEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueueEnvironmentResponse {
        return try await self.client.execute(
            operation: "GetQueueEnvironment", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/environments/{queueEnvironmentId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a queue-fleet association.
    @Sendable
    public func getQueueFleetAssociation(_ input: GetQueueFleetAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetQueueFleetAssociationResponse {
        return try await self.client.execute(
            operation: "GetQueueFleetAssociation", 
            path: "/2023-10-12/farms/{farmId}/queue-fleet-associations/{queueId}/{fleetId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a session.
    @Sendable
    public func getSession(_ input: GetSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSessionResponse {
        return try await self.client.execute(
            operation: "GetSession", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/sessions/{sessionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a session action for the job.
    @Sendable
    public func getSessionAction(_ input: GetSessionActionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSessionActionResponse {
        return try await self.client.execute(
            operation: "GetSessionAction", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/session-actions/{sessionActionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a set of statistics for queues or farms. Before you can call the GetSessionStatisticsAggregation operation, you must first call the StartSessionsStatisticsAggregation operation. Statistics are available for 1 hour after you call the StartSessionsStatisticsAggregation operation.
    @Sendable
    public func getSessionsStatisticsAggregation(_ input: GetSessionsStatisticsAggregationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSessionsStatisticsAggregationResponse {
        return try await self.client.execute(
            operation: "GetSessionsStatisticsAggregation", 
            path: "/2023-10-12/farms/{farmId}/sessions-statistics-aggregation", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a step.
    @Sendable
    public func getStep(_ input: GetStepRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStepResponse {
        return try await self.client.execute(
            operation: "GetStep", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/steps/{stepId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a storage profile.
    @Sendable
    public func getStorageProfile(_ input: GetStorageProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStorageProfileResponse {
        return try await self.client.execute(
            operation: "GetStorageProfile", 
            path: "/2023-10-12/farms/{farmId}/storage-profiles/{storageProfileId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a storage profile for a queue.
    @Sendable
    public func getStorageProfileForQueue(_ input: GetStorageProfileForQueueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetStorageProfileForQueueResponse {
        return try await self.client.execute(
            operation: "GetStorageProfileForQueue", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/storage-profiles/{storageProfileId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a task.
    @Sendable
    public func getTask(_ input: GetTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTaskResponse {
        return try await self.client.execute(
            operation: "GetTask", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/steps/{stepId}/tasks/{taskId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a worker.
    @Sendable
    public func getWorker(_ input: GetWorkerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetWorkerResponse {
        return try await self.client.execute(
            operation: "GetWorker", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers/{workerId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// A list of the available metered products.
    @Sendable
    public func listAvailableMeteredProducts(_ input: ListAvailableMeteredProductsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAvailableMeteredProductsResponse {
        return try await self.client.execute(
            operation: "ListAvailableMeteredProducts", 
            path: "/2023-10-12/metered-products", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// A list of budgets in a farm.
    @Sendable
    public func listBudgets(_ input: ListBudgetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBudgetsResponse {
        return try await self.client.execute(
            operation: "ListBudgets", 
            path: "/2023-10-12/farms/{farmId}/budgets", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists the members of a farm.
    @Sendable
    public func listFarmMembers(_ input: ListFarmMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFarmMembersResponse {
        return try await self.client.execute(
            operation: "ListFarmMembers", 
            path: "/2023-10-12/farms/{farmId}/members", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists farms.
    @Sendable
    public func listFarms(_ input: ListFarmsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFarmsResponse {
        return try await self.client.execute(
            operation: "ListFarms", 
            path: "/2023-10-12/farms", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists fleet members.
    @Sendable
    public func listFleetMembers(_ input: ListFleetMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFleetMembersResponse {
        return try await self.client.execute(
            operation: "ListFleetMembers", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/members", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists fleets.
    @Sendable
    public func listFleets(_ input: ListFleetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListFleetsResponse {
        return try await self.client.execute(
            operation: "ListFleets", 
            path: "/2023-10-12/farms/{farmId}/fleets", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists members on a job.
    @Sendable
    public func listJobMembers(_ input: ListJobMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListJobMembersResponse {
        return try await self.client.execute(
            operation: "ListJobMembers", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/members", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists jobs.
    @Sendable
    public func listJobs(_ input: ListJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListJobsResponse {
        return try await self.client.execute(
            operation: "ListJobs", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists license endpoints.
    @Sendable
    public func listLicenseEndpoints(_ input: ListLicenseEndpointsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListLicenseEndpointsResponse {
        return try await self.client.execute(
            operation: "ListLicenseEndpoints", 
            path: "/2023-10-12/license-endpoints", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists metered products.
    @Sendable
    public func listMeteredProducts(_ input: ListMeteredProductsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMeteredProductsResponse {
        return try await self.client.execute(
            operation: "ListMeteredProducts", 
            path: "/2023-10-12/license-endpoints/{licenseEndpointId}/metered-products", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Gets a list of your monitors in Deadline Cloud.
    @Sendable
    public func listMonitors(_ input: ListMonitorsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListMonitorsResponse {
        return try await self.client.execute(
            operation: "ListMonitors", 
            path: "/2023-10-12/monitors", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists queue environments.
    @Sendable
    public func listQueueEnvironments(_ input: ListQueueEnvironmentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListQueueEnvironmentsResponse {
        return try await self.client.execute(
            operation: "ListQueueEnvironments", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/environments", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists queue-fleet associations.
    @Sendable
    public func listQueueFleetAssociations(_ input: ListQueueFleetAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListQueueFleetAssociationsResponse {
        return try await self.client.execute(
            operation: "ListQueueFleetAssociations", 
            path: "/2023-10-12/farms/{farmId}/queue-fleet-associations", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists the members in a queue.
    @Sendable
    public func listQueueMembers(_ input: ListQueueMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListQueueMembersResponse {
        return try await self.client.execute(
            operation: "ListQueueMembers", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/members", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists queues.
    @Sendable
    public func listQueues(_ input: ListQueuesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListQueuesResponse {
        return try await self.client.execute(
            operation: "ListQueues", 
            path: "/2023-10-12/farms/{farmId}/queues", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists session actions.
    @Sendable
    public func listSessionActions(_ input: ListSessionActionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSessionActionsResponse {
        return try await self.client.execute(
            operation: "ListSessionActions", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/session-actions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists sessions.
    @Sendable
    public func listSessions(_ input: ListSessionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSessionsResponse {
        return try await self.client.execute(
            operation: "ListSessions", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/sessions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists sessions for a worker.
    @Sendable
    public func listSessionsForWorker(_ input: ListSessionsForWorkerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSessionsForWorkerResponse {
        return try await self.client.execute(
            operation: "ListSessionsForWorker", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers/{workerId}/sessions", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists step consumers.
    @Sendable
    public func listStepConsumers(_ input: ListStepConsumersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStepConsumersResponse {
        return try await self.client.execute(
            operation: "ListStepConsumers", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/steps/{stepId}/consumers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists the dependencies for a step.
    @Sendable
    public func listStepDependencies(_ input: ListStepDependenciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStepDependenciesResponse {
        return try await self.client.execute(
            operation: "ListStepDependencies", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/steps/{stepId}/dependencies", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists steps for a job.
    @Sendable
    public func listSteps(_ input: ListStepsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStepsResponse {
        return try await self.client.execute(
            operation: "ListSteps", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/steps", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists storage profiles.
    @Sendable
    public func listStorageProfiles(_ input: ListStorageProfilesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStorageProfilesResponse {
        return try await self.client.execute(
            operation: "ListStorageProfiles", 
            path: "/2023-10-12/farms/{farmId}/storage-profiles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists storage profiles for a queue.
    @Sendable
    public func listStorageProfilesForQueue(_ input: ListStorageProfilesForQueueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListStorageProfilesForQueueResponse {
        return try await self.client.execute(
            operation: "ListStorageProfilesForQueue", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/storage-profiles", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists tags for a resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/2023-10-12/tags/{resourceArn}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists tasks for a job.
    @Sendable
    public func listTasks(_ input: ListTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTasksResponse {
        return try await self.client.execute(
            operation: "ListTasks", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/steps/{stepId}/tasks", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Lists workers.
    @Sendable
    public func listWorkers(_ input: ListWorkersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListWorkersResponse {
        return try await self.client.execute(
            operation: "ListWorkers", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Adds a metered product.
    @Sendable
    public func putMeteredProduct(_ input: PutMeteredProductRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutMeteredProductResponse {
        return try await self.client.execute(
            operation: "PutMeteredProduct", 
            path: "/2023-10-12/license-endpoints/{licenseEndpointId}/metered-products/{productId}", 
            httpMethod: .PUT, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Searches for jobs.
    @Sendable
    public func searchJobs(_ input: SearchJobsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchJobsResponse {
        return try await self.client.execute(
            operation: "SearchJobs", 
            path: "/2023-10-12/farms/{farmId}/search/jobs", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Searches for steps.
    @Sendable
    public func searchSteps(_ input: SearchStepsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchStepsResponse {
        return try await self.client.execute(
            operation: "SearchSteps", 
            path: "/2023-10-12/farms/{farmId}/search/steps", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Searches for tasks.
    @Sendable
    public func searchTasks(_ input: SearchTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchTasksResponse {
        return try await self.client.execute(
            operation: "SearchTasks", 
            path: "/2023-10-12/farms/{farmId}/search/tasks", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Searches for workers.
    @Sendable
    public func searchWorkers(_ input: SearchWorkersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchWorkersResponse {
        return try await self.client.execute(
            operation: "SearchWorkers", 
            path: "/2023-10-12/farms/{farmId}/search/workers", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Starts an asynchronous request for getting aggregated statistics about queues and farms. Get the statistics using the GetSessionsStatisticsAggregation operation. Statistics are available for 1 hour after you call the StartSessionsStatisticsAggregation operation.
    @Sendable
    public func startSessionsStatisticsAggregation(_ input: StartSessionsStatisticsAggregationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartSessionsStatisticsAggregationResponse {
        return try await self.client.execute(
            operation: "StartSessionsStatisticsAggregation", 
            path: "/2023-10-12/farms/{farmId}/sessions-statistics-aggregation", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Tags a resource using the resource's ARN and desired tags.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/2023-10-12/tags/{resourceArn}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Removes a tag from a resource using the resource's ARN and tag to remove.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/2023-10-12/tags/{resourceArn}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a budget that sets spending thresholds for rendering activity.
    @Sendable
    public func updateBudget(_ input: UpdateBudgetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateBudgetResponse {
        return try await self.client.execute(
            operation: "UpdateBudget", 
            path: "/2023-10-12/farms/{farmId}/budgets/{budgetId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a farm.
    @Sendable
    public func updateFarm(_ input: UpdateFarmRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFarmResponse {
        return try await self.client.execute(
            operation: "UpdateFarm", 
            path: "/2023-10-12/farms/{farmId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a fleet.
    @Sendable
    public func updateFleet(_ input: UpdateFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateFleetResponse {
        return try await self.client.execute(
            operation: "UpdateFleet", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a job.
    @Sendable
    public func updateJob(_ input: UpdateJobRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateJobResponse {
        return try await self.client.execute(
            operation: "UpdateJob", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Modifies the settings for a Deadline Cloud monitor. You can modify one or all of the settings when you call UpdateMonitor.
    @Sendable
    public func updateMonitor(_ input: UpdateMonitorRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateMonitorResponse {
        return try await self.client.execute(
            operation: "UpdateMonitor", 
            path: "/2023-10-12/monitors/{monitorId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a queue.
    @Sendable
    public func updateQueue(_ input: UpdateQueueRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateQueueResponse {
        return try await self.client.execute(
            operation: "UpdateQueue", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates the queue environment.
    @Sendable
    public func updateQueueEnvironment(_ input: UpdateQueueEnvironmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateQueueEnvironmentResponse {
        return try await self.client.execute(
            operation: "UpdateQueueEnvironment", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/environments/{queueEnvironmentId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a queue-fleet association.
    @Sendable
    public func updateQueueFleetAssociation(_ input: UpdateQueueFleetAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateQueueFleetAssociationResponse {
        return try await self.client.execute(
            operation: "UpdateQueueFleetAssociation", 
            path: "/2023-10-12/farms/{farmId}/queue-fleet-associations/{queueId}/{fleetId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a session.
    @Sendable
    public func updateSession(_ input: UpdateSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSessionResponse {
        return try await self.client.execute(
            operation: "UpdateSession", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/sessions/{sessionId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a step.
    @Sendable
    public func updateStep(_ input: UpdateStepRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStepResponse {
        return try await self.client.execute(
            operation: "UpdateStep", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/steps/{stepId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a storage profile.
    @Sendable
    public func updateStorageProfile(_ input: UpdateStorageProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateStorageProfileResponse {
        return try await self.client.execute(
            operation: "UpdateStorageProfile", 
            path: "/2023-10-12/farms/{farmId}/storage-profiles/{storageProfileId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a task.
    @Sendable
    public func updateTask(_ input: UpdateTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTaskResponse {
        return try await self.client.execute(
            operation: "UpdateTask", 
            path: "/2023-10-12/farms/{farmId}/queues/{queueId}/jobs/{jobId}/steps/{stepId}/tasks/{taskId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "management.", 
            logger: logger
        )
    }

    /// Updates a worker.
    @Sendable
    public func updateWorker(_ input: UpdateWorkerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkerResponse {
        return try await self.client.execute(
            operation: "UpdateWorker", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers/{workerId}", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "scheduling.", 
            logger: logger
        )
    }

    /// Updates the schedule for a worker.
    @Sendable
    public func updateWorkerSchedule(_ input: UpdateWorkerScheduleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateWorkerScheduleResponse {
        return try await self.client.execute(
            operation: "UpdateWorkerSchedule", 
            path: "/2023-10-12/farms/{farmId}/fleets/{fleetId}/workers/{workerId}/schedule", 
            httpMethod: .PATCH, 
            serviceConfig: self.config, 
            input: input, 
            hostPrefix: "scheduling.", 
            logger: logger
        )
    }
}

extension Deadline {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Deadline, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Deadline {
    /// Gets a set of statistics for queues or farms. Before you can call the GetSessionStatisticsAggregation operation, you must first call the StartSessionsStatisticsAggregation operation. Statistics are available for 1 hour after you call the StartSessionsStatisticsAggregation operation.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func getSessionsStatisticsAggregationPaginator(
        _ input: GetSessionsStatisticsAggregationRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetSessionsStatisticsAggregationRequest, GetSessionsStatisticsAggregationResponse> {
        return .init(
            input: input,
            command: self.getSessionsStatisticsAggregation,
            inputKey: \GetSessionsStatisticsAggregationRequest.nextToken,
            outputKey: \GetSessionsStatisticsAggregationResponse.nextToken,
            logger: logger
        )
    }

    /// A list of the available metered products.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAvailableMeteredProductsPaginator(
        _ input: ListAvailableMeteredProductsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAvailableMeteredProductsRequest, ListAvailableMeteredProductsResponse> {
        return .init(
            input: input,
            command: self.listAvailableMeteredProducts,
            inputKey: \ListAvailableMeteredProductsRequest.nextToken,
            outputKey: \ListAvailableMeteredProductsResponse.nextToken,
            logger: logger
        )
    }

    /// A list of budgets in a farm.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listBudgetsPaginator(
        _ input: ListBudgetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBudgetsRequest, ListBudgetsResponse> {
        return .init(
            input: input,
            command: self.listBudgets,
            inputKey: \ListBudgetsRequest.nextToken,
            outputKey: \ListBudgetsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the members of a farm.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFarmMembersPaginator(
        _ input: ListFarmMembersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFarmMembersRequest, ListFarmMembersResponse> {
        return .init(
            input: input,
            command: self.listFarmMembers,
            inputKey: \ListFarmMembersRequest.nextToken,
            outputKey: \ListFarmMembersResponse.nextToken,
            logger: logger
        )
    }

    /// Lists farms.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFarmsPaginator(
        _ input: ListFarmsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFarmsRequest, ListFarmsResponse> {
        return .init(
            input: input,
            command: self.listFarms,
            inputKey: \ListFarmsRequest.nextToken,
            outputKey: \ListFarmsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists fleet members.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFleetMembersPaginator(
        _ input: ListFleetMembersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFleetMembersRequest, ListFleetMembersResponse> {
        return .init(
            input: input,
            command: self.listFleetMembers,
            inputKey: \ListFleetMembersRequest.nextToken,
            outputKey: \ListFleetMembersResponse.nextToken,
            logger: logger
        )
    }

    /// Lists fleets.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listFleetsPaginator(
        _ input: ListFleetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListFleetsRequest, ListFleetsResponse> {
        return .init(
            input: input,
            command: self.listFleets,
            inputKey: \ListFleetsRequest.nextToken,
            outputKey: \ListFleetsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists members on a job.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listJobMembersPaginator(
        _ input: ListJobMembersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListJobMembersRequest, ListJobMembersResponse> {
        return .init(
            input: input,
            command: self.listJobMembers,
            inputKey: \ListJobMembersRequest.nextToken,
            outputKey: \ListJobMembersResponse.nextToken,
            logger: logger
        )
    }

    /// Lists jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listJobsPaginator(
        _ input: ListJobsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListJobsRequest, ListJobsResponse> {
        return .init(
            input: input,
            command: self.listJobs,
            inputKey: \ListJobsRequest.nextToken,
            outputKey: \ListJobsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists license endpoints.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listLicenseEndpointsPaginator(
        _ input: ListLicenseEndpointsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListLicenseEndpointsRequest, ListLicenseEndpointsResponse> {
        return .init(
            input: input,
            command: self.listLicenseEndpoints,
            inputKey: \ListLicenseEndpointsRequest.nextToken,
            outputKey: \ListLicenseEndpointsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists metered products.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMeteredProductsPaginator(
        _ input: ListMeteredProductsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMeteredProductsRequest, ListMeteredProductsResponse> {
        return .init(
            input: input,
            command: self.listMeteredProducts,
            inputKey: \ListMeteredProductsRequest.nextToken,
            outputKey: \ListMeteredProductsResponse.nextToken,
            logger: logger
        )
    }

    /// Gets a list of your monitors in Deadline Cloud.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listMonitorsPaginator(
        _ input: ListMonitorsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListMonitorsRequest, ListMonitorsResponse> {
        return .init(
            input: input,
            command: self.listMonitors,
            inputKey: \ListMonitorsRequest.nextToken,
            outputKey: \ListMonitorsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists queue environments.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listQueueEnvironmentsPaginator(
        _ input: ListQueueEnvironmentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListQueueEnvironmentsRequest, ListQueueEnvironmentsResponse> {
        return .init(
            input: input,
            command: self.listQueueEnvironments,
            inputKey: \ListQueueEnvironmentsRequest.nextToken,
            outputKey: \ListQueueEnvironmentsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists queue-fleet associations.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listQueueFleetAssociationsPaginator(
        _ input: ListQueueFleetAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListQueueFleetAssociationsRequest, ListQueueFleetAssociationsResponse> {
        return .init(
            input: input,
            command: self.listQueueFleetAssociations,
            inputKey: \ListQueueFleetAssociationsRequest.nextToken,
            outputKey: \ListQueueFleetAssociationsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the members in a queue.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listQueueMembersPaginator(
        _ input: ListQueueMembersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListQueueMembersRequest, ListQueueMembersResponse> {
        return .init(
            input: input,
            command: self.listQueueMembers,
            inputKey: \ListQueueMembersRequest.nextToken,
            outputKey: \ListQueueMembersResponse.nextToken,
            logger: logger
        )
    }

    /// Lists queues.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listQueuesPaginator(
        _ input: ListQueuesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListQueuesRequest, ListQueuesResponse> {
        return .init(
            input: input,
            command: self.listQueues,
            inputKey: \ListQueuesRequest.nextToken,
            outputKey: \ListQueuesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists session actions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSessionActionsPaginator(
        _ input: ListSessionActionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSessionActionsRequest, ListSessionActionsResponse> {
        return .init(
            input: input,
            command: self.listSessionActions,
            inputKey: \ListSessionActionsRequest.nextToken,
            outputKey: \ListSessionActionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists sessions.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSessionsPaginator(
        _ input: ListSessionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSessionsRequest, ListSessionsResponse> {
        return .init(
            input: input,
            command: self.listSessions,
            inputKey: \ListSessionsRequest.nextToken,
            outputKey: \ListSessionsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists sessions for a worker.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listSessionsForWorkerPaginator(
        _ input: ListSessionsForWorkerRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSessionsForWorkerRequest, ListSessionsForWorkerResponse> {
        return .init(
            input: input,
            command: self.listSessionsForWorker,
            inputKey: \ListSessionsForWorkerRequest.nextToken,
            outputKey: \ListSessionsForWorkerResponse.nextToken,
            logger: logger
        )
    }

    /// Lists step consumers.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStepConsumersPaginator(
        _ input: ListStepConsumersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStepConsumersRequest, ListStepConsumersResponse> {
        return .init(
            input: input,
            command: self.listStepConsumers,
            inputKey: \ListStepConsumersRequest.nextToken,
            outputKey: \ListStepConsumersResponse.nextToken,
            logger: logger
        )
    }

    /// Lists the dependencies for a step.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStepDependenciesPaginator(
        _ input: ListStepDependenciesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStepDependenciesRequest, ListStepDependenciesResponse> {
        return .init(
            input: input,
            command: self.listStepDependencies,
            inputKey: \ListStepDependenciesRequest.nextToken,
            outputKey: \ListStepDependenciesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists steps for a job.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStepsPaginator(
        _ input: ListStepsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStepsRequest, ListStepsResponse> {
        return .init(
            input: input,
            command: self.listSteps,
            inputKey: \ListStepsRequest.nextToken,
            outputKey: \ListStepsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists storage profiles.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStorageProfilesPaginator(
        _ input: ListStorageProfilesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStorageProfilesRequest, ListStorageProfilesResponse> {
        return .init(
            input: input,
            command: self.listStorageProfiles,
            inputKey: \ListStorageProfilesRequest.nextToken,
            outputKey: \ListStorageProfilesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists storage profiles for a queue.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listStorageProfilesForQueuePaginator(
        _ input: ListStorageProfilesForQueueRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListStorageProfilesForQueueRequest, ListStorageProfilesForQueueResponse> {
        return .init(
            input: input,
            command: self.listStorageProfilesForQueue,
            inputKey: \ListStorageProfilesForQueueRequest.nextToken,
            outputKey: \ListStorageProfilesForQueueResponse.nextToken,
            logger: logger
        )
    }

    /// Lists tasks for a job.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTasksPaginator(
        _ input: ListTasksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTasksRequest, ListTasksResponse> {
        return .init(
            input: input,
            command: self.listTasks,
            inputKey: \ListTasksRequest.nextToken,
            outputKey: \ListTasksResponse.nextToken,
            logger: logger
        )
    }

    /// Lists workers.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listWorkersPaginator(
        _ input: ListWorkersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListWorkersRequest, ListWorkersResponse> {
        return .init(
            input: input,
            command: self.listWorkers,
            inputKey: \ListWorkersRequest.nextToken,
            outputKey: \ListWorkersResponse.nextToken,
            logger: logger
        )
    }
}

extension Deadline.GetSessionsStatisticsAggregationRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.GetSessionsStatisticsAggregationRequest {
        return .init(
            aggregationId: self.aggregationId,
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Deadline.ListAvailableMeteredProductsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListAvailableMeteredProductsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Deadline.ListBudgetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListBudgetsRequest {
        return .init(
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token,
            status: self.status
        )
    }
}

extension Deadline.ListFarmMembersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListFarmMembersRequest {
        return .init(
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Deadline.ListFarmsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListFarmsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            principalId: self.principalId
        )
    }
}

extension Deadline.ListFleetMembersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListFleetMembersRequest {
        return .init(
            farmId: self.farmId,
            fleetId: self.fleetId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Deadline.ListFleetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListFleetsRequest {
        return .init(
            displayName: self.displayName,
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token,
            principalId: self.principalId,
            status: self.status
        )
    }
}

extension Deadline.ListJobMembersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListJobMembersRequest {
        return .init(
            farmId: self.farmId,
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId
        )
    }
}

extension Deadline.ListJobsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListJobsRequest {
        return .init(
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token,
            principalId: self.principalId,
            queueId: self.queueId
        )
    }
}

extension Deadline.ListLicenseEndpointsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListLicenseEndpointsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Deadline.ListMeteredProductsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListMeteredProductsRequest {
        return .init(
            licenseEndpointId: self.licenseEndpointId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Deadline.ListMonitorsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListMonitorsRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Deadline.ListQueueEnvironmentsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListQueueEnvironmentsRequest {
        return .init(
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId
        )
    }
}

extension Deadline.ListQueueFleetAssociationsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListQueueFleetAssociationsRequest {
        return .init(
            farmId: self.farmId,
            fleetId: self.fleetId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId
        )
    }
}

extension Deadline.ListQueueMembersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListQueueMembersRequest {
        return .init(
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId
        )
    }
}

extension Deadline.ListQueuesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListQueuesRequest {
        return .init(
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token,
            principalId: self.principalId,
            status: self.status
        )
    }
}

extension Deadline.ListSessionActionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListSessionActionsRequest {
        return .init(
            farmId: self.farmId,
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId,
            sessionId: self.sessionId,
            taskId: self.taskId
        )
    }
}

extension Deadline.ListSessionsForWorkerRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListSessionsForWorkerRequest {
        return .init(
            farmId: self.farmId,
            fleetId: self.fleetId,
            maxResults: self.maxResults,
            nextToken: token,
            workerId: self.workerId
        )
    }
}

extension Deadline.ListSessionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListSessionsRequest {
        return .init(
            farmId: self.farmId,
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId
        )
    }
}

extension Deadline.ListStepConsumersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListStepConsumersRequest {
        return .init(
            farmId: self.farmId,
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId,
            stepId: self.stepId
        )
    }
}

extension Deadline.ListStepDependenciesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListStepDependenciesRequest {
        return .init(
            farmId: self.farmId,
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId,
            stepId: self.stepId
        )
    }
}

extension Deadline.ListStepsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListStepsRequest {
        return .init(
            farmId: self.farmId,
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId
        )
    }
}

extension Deadline.ListStorageProfilesForQueueRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListStorageProfilesForQueueRequest {
        return .init(
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId
        )
    }
}

extension Deadline.ListStorageProfilesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListStorageProfilesRequest {
        return .init(
            farmId: self.farmId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension Deadline.ListTasksRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListTasksRequest {
        return .init(
            farmId: self.farmId,
            jobId: self.jobId,
            maxResults: self.maxResults,
            nextToken: token,
            queueId: self.queueId,
            stepId: self.stepId
        )
    }
}

extension Deadline.ListWorkersRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> Deadline.ListWorkersRequest {
        return .init(
            farmId: self.farmId,
            fleetId: self.fleetId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Deadline {
    public func waitUntilFleetActive(
        _ input: GetFleetRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "ACTIVE")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "CREATE_FAILED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "UPDATE_FAILED")),
            ],
            minDelayTime: .seconds(5),
            maxDelayTime: .seconds(900),
            command: self.getFleet
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilJobCreateComplete(
        _ input: GetJobRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("lifecycleStatus", expected: "CREATE_COMPLETE")),
                .init(state: .success, matcher: try! JMESPathMatcher("lifecycleStatus", expected: "UPDATE_IN_PROGRESS")),
                .init(state: .success, matcher: try! JMESPathMatcher("lifecycleStatus", expected: "UPDATE_FAILED")),
                .init(state: .success, matcher: try! JMESPathMatcher("lifecycleStatus", expected: "UPDATE_SUCCEEDED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("lifecycleStatus", expected: "UPLOAD_FAILED")),
                .init(state: .failure, matcher: try! JMESPathMatcher("lifecycleStatus", expected: "CREATE_FAILED")),
            ],
            minDelayTime: .seconds(1),
            command: self.getJob
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilLicenseEndpointDeleted(
        _ input: GetLicenseEndpointRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: AWSErrorCodeMatcher("ResourceNotFoundException")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "NOT_READY")),
            ],
            minDelayTime: .seconds(10),
            maxDelayTime: .seconds(2340),
            command: self.getLicenseEndpoint
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilLicenseEndpointValid(
        _ input: GetLicenseEndpointRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "READY")),
                .init(state: .failure, matcher: try! JMESPathMatcher("status", expected: "NOT_READY")),
            ],
            minDelayTime: .seconds(10),
            maxDelayTime: .seconds(1140),
            command: self.getLicenseEndpoint
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilQueueFleetAssociationStopped(
        _ input: GetQueueFleetAssociationRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "STOPPED")),
            ],
            minDelayTime: .seconds(10),
            maxDelayTime: .seconds(600),
            command: self.getQueueFleetAssociation
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilQueueScheduling(
        _ input: GetQueueRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "SCHEDULING")),
            ],
            minDelayTime: .seconds(10),
            maxDelayTime: .seconds(700),
            command: self.getQueue
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }

    public func waitUntilQueueSchedulingBlocked(
        _ input: GetQueueRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("status", expected: "SCHEDULING_BLOCKED")),
            ],
            minDelayTime: .seconds(10),
            maxDelayTime: .seconds(300),
            command: self.getQueue
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
}
