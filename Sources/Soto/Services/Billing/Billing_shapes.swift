//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_spi(SotoInternal) import SotoCore

extension Billing {
    // MARK: Enums

    public enum BillingViewType: String, CustomStringConvertible, Codable, Sendable, CodingKeyRepresentable {
        case billingGroup = "BILLING_GROUP"
        case primary = "PRIMARY"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct ActiveTimeRange: AWSEncodableShape {
        /// The inclusive time range start date.
        public let activeAfterInclusive: Date
        ///  The inclusive time range end date.
        public let activeBeforeInclusive: Date

        @inlinable
        public init(activeAfterInclusive: Date, activeBeforeInclusive: Date) {
            self.activeAfterInclusive = activeAfterInclusive
            self.activeBeforeInclusive = activeBeforeInclusive
        }

        private enum CodingKeys: String, CodingKey {
            case activeAfterInclusive = "activeAfterInclusive"
            case activeBeforeInclusive = "activeBeforeInclusive"
        }
    }

    public struct BillingViewListElement: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) that can be used to uniquely identify the billing view.
        public let arn: String?
        /// The type of billing view.
        public let billingViewType: BillingViewType?
        ///  A list of names of the Billing view.
        public let name: String?
        ///  The list of owners of the Billing view.
        public let ownerAccountId: String?

        @inlinable
        public init(arn: String? = nil, billingViewType: BillingViewType? = nil, name: String? = nil, ownerAccountId: String? = nil) {
            self.arn = arn
            self.billingViewType = billingViewType
            self.name = name
            self.ownerAccountId = ownerAccountId
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case billingViewType = "billingViewType"
            case name = "name"
            case ownerAccountId = "ownerAccountId"
        }
    }

    public struct ListBillingViewsRequest: AWSEncodableShape {
        ///  The time range for the billing views listed. PRIMARY billing view is always listed. BILLING_GROUP billing views are listed for time ranges when the associated billing group resource in Billing Conductor is active. The time range must be within one calendar month.
        public let activeTimeRange: ActiveTimeRange
        /// The maximum number of billing views to retrieve. Default is 100.
        public let maxResults: Int?
        /// The pagination token that is used on subsequent calls to list billing views.
        public let nextToken: String?

        @inlinable
        public init(activeTimeRange: ActiveTimeRange, maxResults: Int? = nil, nextToken: String? = nil) {
            self.activeTimeRange = activeTimeRange
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 2047)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case activeTimeRange = "activeTimeRange"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListBillingViewsResponse: AWSDecodableShape {
        /// A list of BillingViewListElement retrieved.
        public let billingViews: [BillingViewListElement]
        /// The pagination token to use on subsequent calls to list billing views.
        public let nextToken: String?

        @inlinable
        public init(billingViews: [BillingViewListElement], nextToken: String? = nil) {
            self.billingViews = billingViews
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case billingViews = "billingViews"
            case nextToken = "nextToken"
        }
    }
}

// MARK: - Errors

/// Error enum for Billing
public struct BillingErrorType: AWSErrorType {
    enum Code: String {
        case accessDeniedException = "AccessDeniedException"
        case internalServerException = "InternalServerException"
        case throttlingException = "ThrottlingException"
        case validationException = "ValidationException"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize Billing
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    /// You don't have sufficient access to perform this action.
    public static var accessDeniedException: Self { .init(.accessDeniedException) }
    /// The request processing failed because of an unknown error, exception, or failure.
    public static var internalServerException: Self { .init(.internalServerException) }
    /// The request was denied due to request throttling.
    public static var throttlingException: Self { .init(.throttlingException) }
    /// The input fails to satisfy the constraints specified by an Amazon Web Services service.
    public static var validationException: Self { .init(.validationException) }
}

extension BillingErrorType: Equatable {
    public static func == (lhs: BillingErrorType, rhs: BillingErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension BillingErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
