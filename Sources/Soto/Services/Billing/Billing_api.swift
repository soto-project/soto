//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS Billing service.
///
///  You can use the Billing API to programatically list the billing views available to you for a given time period. A billing view represents a set of billing data.  The Billing API provides the following endpoint:  https://billing.us-east-1.api.aws
public struct Billing: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the Billing client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "AWSBilling",
            serviceName: "Billing",
            serviceIdentifier: "billing",
            serviceProtocol: .json(version: "1.0"),
            apiVersion: "2023-09-07",
            endpoint: endpoint,
            errorType: BillingErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Lists the billing views available for a given time period.  Every Amazon Web Services account has a unique PRIMARY billing view that represents the billing data available by default. Accounts that use Billing Conductor also have BILLING_GROUP billing views representing pro forma costs associated with each created billing group.
    @Sendable
    @inlinable
    public func listBillingViews(_ input: ListBillingViewsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListBillingViewsResponse {
        try await self.client.execute(
            operation: "ListBillingViews", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the billing views available for a given time period.  Every Amazon Web Services account has a unique PRIMARY billing view that represents the billing data available by default. Accounts that use Billing Conductor also have BILLING_GROUP billing views representing pro forma costs associated with each created billing group.
    ///
    /// Parameters:
    ///   - activeTimeRange:  The time range for the billing views listed. PRIMARY billing view is always listed. BILLING_GROUP billing views are listed for time ranges when the associated billing group resource in Billing Conductor is active. The time range must be within one calendar month.
    ///   - maxResults: The maximum number of billing views to retrieve. Default is 100.
    ///   - nextToken: The pagination token that is used on subsequent calls to list billing views.
    ///   - logger: Logger use during operation
    @inlinable
    public func listBillingViews(
        activeTimeRange: ActiveTimeRange,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListBillingViewsResponse {
        let input = ListBillingViewsRequest(
            activeTimeRange: activeTimeRange, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listBillingViews(input, logger: logger)
    }
}

extension Billing {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: Billing, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Billing {
    /// Return PaginatorSequence for operation ``listBillingViews(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listBillingViewsPaginator(
        _ input: ListBillingViewsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListBillingViewsRequest, ListBillingViewsResponse> {
        return .init(
            input: input,
            command: self.listBillingViews,
            inputKey: \ListBillingViewsRequest.nextToken,
            outputKey: \ListBillingViewsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listBillingViews(_:logger:)``.
    ///
    /// - Parameters:
    ///   - activeTimeRange:  The time range for the billing views listed. PRIMARY billing view is always listed. BILLING_GROUP billing views are listed for time ranges when the associated billing group resource in Billing Conductor is active. The time range must be within one calendar month.
    ///   - maxResults: The maximum number of billing views to retrieve. Default is 100.
    ///   - logger: Logger used for logging
    @inlinable
    public func listBillingViewsPaginator(
        activeTimeRange: ActiveTimeRange,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListBillingViewsRequest, ListBillingViewsResponse> {
        let input = ListBillingViewsRequest(
            activeTimeRange: activeTimeRange, 
            maxResults: maxResults
        )
        return self.listBillingViewsPaginator(input, logger: logger)
    }
}

extension Billing.ListBillingViewsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> Billing.ListBillingViewsRequest {
        return .init(
            activeTimeRange: self.activeTimeRange,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}
