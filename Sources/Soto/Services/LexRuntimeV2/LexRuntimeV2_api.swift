//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if canImport(FoundationEssentials)
import FoundationEssentials
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS LexRuntimeV2 service.
///
/// This section contains documentation for the Amazon Lex V2 Runtime V2 API operations.
public struct LexRuntimeV2: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the LexRuntimeV2 client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "LexRuntimeV2",
            serviceIdentifier: "runtime-v2-lex",
            signingName: "lex",
            serviceProtocol: .restjson,
            apiVersion: "2020-08-07",
            endpoint: endpoint,
            errorType: LexRuntimeV2ErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Removes session information for a specified bot, alias, and user ID.  You can use this operation to restart a conversation with a bot. When you remove a session, the entire history of the session is removed so that you can start again. You don't need to delete a session. Sessions have a time limit and will expire. Set the session time limit when you create the bot. The default is 5 minutes, but you can specify anything between 1 minute and 24 hours. If you specify a bot or alias ID that doesn't exist, you receive a BadRequestException.  If the locale doesn't exist in the bot, or if the locale hasn't been enables for the alias, you receive a BadRequestException.
    @Sendable
    @inlinable
    public func deleteSession(_ input: DeleteSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSessionResponse {
        try await self.client.execute(
            operation: "DeleteSession", 
            path: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}", 
            httpMethod: .DELETE, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes session information for a specified bot, alias, and user ID.  You can use this operation to restart a conversation with a bot. When you remove a session, the entire history of the session is removed so that you can start again. You don't need to delete a session. Sessions have a time limit and will expire. Set the session time limit when you create the bot. The default is 5 minutes, but you can specify anything between 1 minute and 24 hours. If you specify a bot or alias ID that doesn't exist, you receive a BadRequestException.  If the locale doesn't exist in the bot, or if the locale hasn't been enables for the alias, you receive a BadRequestException.
    ///
    /// Parameters:
    ///   - botAliasId: The alias identifier in use for the bot that contains the session data.
    ///   - botId: The identifier of the bot that contains the session data.
    ///   - localeId: The locale where the session is in use.
    ///   - sessionId: The identifier of the session to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSession(
        botAliasId: String,
        botId: String,
        localeId: String,
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteSessionResponse {
        let input = DeleteSessionRequest(
            botAliasId: botAliasId, 
            botId: botId, 
            localeId: localeId, 
            sessionId: sessionId
        )
        return try await self.deleteSession(input, logger: logger)
    }

    /// Returns session information for a specified bot, alias, and user. For example, you can use this operation to retrieve session information for a user that has left a long-running session in use. If the bot, alias, or session identifier doesn't exist, Amazon Lex V2 returns a BadRequestException. If the locale doesn't exist or is not enabled for the alias, you receive a BadRequestException.
    @Sendable
    @inlinable
    public func getSession(_ input: GetSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSessionResponse {
        try await self.client.execute(
            operation: "GetSession", 
            path: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}", 
            httpMethod: .GET, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns session information for a specified bot, alias, and user. For example, you can use this operation to retrieve session information for a user that has left a long-running session in use. If the bot, alias, or session identifier doesn't exist, Amazon Lex V2 returns a BadRequestException. If the locale doesn't exist or is not enabled for the alias, you receive a BadRequestException.
    ///
    /// Parameters:
    ///   - botAliasId: The alias identifier in use for the bot that contains the session data.
    ///   - botId: The identifier of the bot that contains the session data.
    ///   - localeId: The locale where the session is in use.
    ///   - sessionId: The identifier of the session to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSession(
        botAliasId: String,
        botId: String,
        localeId: String,
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSessionResponse {
        let input = GetSessionRequest(
            botAliasId: botAliasId, 
            botId: botId, 
            localeId: localeId, 
            sessionId: sessionId
        )
        return try await self.getSession(input, logger: logger)
    }

    /// Creates a new session or modifies an existing session with an Amazon Lex V2 bot. Use this operation to enable your application to set the state of the bot.
    @Sendable
    @inlinable
    public func putSession(_ input: PutSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PutSessionResponse {
        try await self.client.execute(
            operation: "PutSession", 
            path: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new session or modifies an existing session with an Amazon Lex V2 bot. Use this operation to enable your application to set the state of the bot.
    ///
    /// Parameters:
    ///   - botAliasId: The alias identifier of the bot that receives the session data.
    ///   - botId: The identifier of the bot that receives the session data.
    ///   - localeId: The locale where the session is in use.
    ///   - messages: A list of messages to send to the user. Messages are sent in the order that they are defined in the list.
    ///   - requestAttributes: Request-specific information passed between Amazon Lex V2 and the client application. The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes with the prefix x-amz-lex:.
    ///   - responseContentType: The message that Amazon Lex V2 returns in the response can be either text or speech depending on the value of this parameter.    If the value is text/plain; charset=utf-8, Amazon Lex V2 returns text in the response.
    ///   - sessionId: The identifier of the session that receives the session data.
    ///   - sessionState: Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user.
    ///   - logger: Logger use during operation
    @inlinable
    public func putSession(
        botAliasId: String,
        botId: String,
        localeId: String,
        messages: [Message]? = nil,
        requestAttributes: [String: String]? = nil,
        responseContentType: String? = nil,
        sessionId: String,
        sessionState: SessionState,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PutSessionResponse {
        let input = PutSessionRequest(
            botAliasId: botAliasId, 
            botId: botId, 
            localeId: localeId, 
            messages: messages, 
            requestAttributes: requestAttributes, 
            responseContentType: responseContentType, 
            sessionId: sessionId, 
            sessionState: sessionState
        )
        return try await self.putSession(input, logger: logger)
    }

    /// Sends user input to Amazon Lex V2. Client applications use this API to send requests to Amazon Lex V2 at runtime. Amazon Lex V2 then interprets the user input using the machine learning model that it build for the bot. In response, Amazon Lex V2 returns the next message to convey to the user and an optional response card to display. If the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see PostFulfillmentStatusSpecification.    Success message - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.    Failed message - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.    Timeout message - If you don't configure a timeout message and a timeout, and the Lambda function doesn't return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out.    For more information, see Completion message.
    @Sendable
    @inlinable
    public func recognizeText(_ input: RecognizeTextRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RecognizeTextResponse {
        try await self.client.execute(
            operation: "RecognizeText", 
            path: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/text", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sends user input to Amazon Lex V2. Client applications use this API to send requests to Amazon Lex V2 at runtime. Amazon Lex V2 then interprets the user input using the machine learning model that it build for the bot. In response, Amazon Lex V2 returns the next message to convey to the user and an optional response card to display. If the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see PostFulfillmentStatusSpecification.    Success message - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.    Failed message - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.    Timeout message - If you don't configure a timeout message and a timeout, and the Lambda function doesn't return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out.    For more information, see Completion message.
    ///
    /// Parameters:
    ///   - botAliasId: The alias identifier in use for the bot that processes the request.
    ///   - botId: The identifier of the bot that processes the request.
    ///   - localeId: The locale where the session is in use.
    ///   - requestAttributes: Request-specific information passed between the client application and Amazon Lex V2  The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes with the prefix x-amz-lex:.
    ///   - sessionId: The identifier of the user session that is having the conversation.
    ///   - sessionState: The current state of the dialog between the user and the bot.
    ///   - text: The text that the user entered. Amazon Lex V2 interprets this text.
    ///   - logger: Logger use during operation
    @inlinable
    public func recognizeText(
        botAliasId: String,
        botId: String,
        localeId: String,
        requestAttributes: [String: String]? = nil,
        sessionId: String,
        sessionState: SessionState? = nil,
        text: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RecognizeTextResponse {
        let input = RecognizeTextRequest(
            botAliasId: botAliasId, 
            botId: botId, 
            localeId: localeId, 
            requestAttributes: requestAttributes, 
            sessionId: sessionId, 
            sessionState: sessionState, 
            text: text
        )
        return try await self.recognizeText(input, logger: logger)
    }

    /// Sends user input to Amazon Lex V2. You can send text or speech. Clients use this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2 interprets the user input using the machine learning model built for the bot. The following request fields must be compressed with gzip and then base64 encoded before you send them to Amazon Lex V2.    requestAttributes   sessionState   The following response fields are compressed using gzip and then base64 encoded by Amazon Lex V2. Before you can use these fields, you must decode and decompress them.    inputTranscript   interpretations   messages   requestAttributes   sessionState   The example contains a Java application that compresses and encodes a Java object to send to Amazon Lex V2, and a second that decodes and decompresses a response from Amazon Lex V2. If the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see PostFulfillmentStatusSpecification.    Success message - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.    Failed message - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.    Timeout message - If you don't configure a timeout message and a timeout, and the Lambda function doesn't return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out.    For more information, see Completion message.
    @Sendable
    @inlinable
    public func recognizeUtterance(_ input: RecognizeUtteranceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RecognizeUtteranceResponse {
        try await self.client.execute(
            operation: "RecognizeUtterance", 
            path: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/utterance", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sends user input to Amazon Lex V2. You can send text or speech. Clients use this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2 interprets the user input using the machine learning model built for the bot. The following request fields must be compressed with gzip and then base64 encoded before you send them to Amazon Lex V2.    requestAttributes   sessionState   The following response fields are compressed using gzip and then base64 encoded by Amazon Lex V2. Before you can use these fields, you must decode and decompress them.    inputTranscript   interpretations   messages   requestAttributes   sessionState   The example contains a Java application that compresses and encodes a Java object to send to Amazon Lex V2, and a second that decodes and decompresses a response from Amazon Lex V2. If the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see PostFulfillmentStatusSpecification.    Success message - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.    Failed message - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.    Timeout message - If you don't configure a timeout message and a timeout, and the Lambda function doesn't return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out.    For more information, see Completion message.
    ///
    /// Parameters:
    ///   - botAliasId: The alias identifier in use for the bot that should receive the request.
    ///   - botId: The identifier of the bot that should receive the request.
    ///   - inputStream: User input in PCM or Opus audio format or text format as described in the requestContentType parameter.
    ///   - localeId: The locale where the session is in use.
    ///   - requestAttributes: Request-specific information passed between the client application and Amazon Lex V2  The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes for prefix x-amz-lex:. The requestAttributes field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.
    ///   - requestContentType: Indicates the format for audio input or that the content is text. The header must start with one of the following prefixes:   PCM format, audio data must be in little-endian byte order.   audio/l16; rate=16000; channels=1   audio/x-l16; sample-rate=16000; channel-count=1   audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false     Opus format   audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4     Text format   text/plain; charset=utf-8
    ///   - responseContentType: The message that Amazon Lex V2 returns in the response can be either text or speech based on the responseContentType value.   If the value is text/plain;charset=utf-8, Amazon Lex V2 returns text in the response.   If the value begins with audio/, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the responseContentType parameter. For example, if you specify audio/mpeg as the value, Amazon Lex V2 returns speech in the MPEG format.   If the value is audio/pcm, the speech returned is audio/pcm at 16 KHz in 16-bit, little-endian format.   The following are the accepted values:   audio/mpeg   audio/ogg   audio/pcm (16 KHz)   audio/* (defaults to mpeg)   text/plain; charset=utf-8
    ///   - sessionId: The identifier of the session in use.
    ///   - sessionState: Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user. The sessionState field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.
    ///   - logger: Logger use during operation
    @inlinable
    public func recognizeUtterance(
        botAliasId: String,
        botId: String,
        inputStream: AWSHTTPBody? = nil,
        localeId: String,
        requestAttributes: String? = nil,
        requestContentType: String,
        responseContentType: String? = nil,
        sessionId: String,
        sessionState: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RecognizeUtteranceResponse {
        let input = RecognizeUtteranceRequest(
            botAliasId: botAliasId, 
            botId: botId, 
            inputStream: inputStream, 
            localeId: localeId, 
            requestAttributes: requestAttributes, 
            requestContentType: requestContentType, 
            responseContentType: responseContentType, 
            sessionId: sessionId, 
            sessionState: sessionState
        )
        return try await self.recognizeUtterance(input, logger: logger)
    }

    /// Starts an HTTP/2 bidirectional event stream that enables you to send audio, text, or DTMF input in real time. After your application starts a conversation, users send input to Amazon Lex V2 as a stream of events. Amazon Lex V2 processes the incoming events and responds with streaming text or audio events.   Audio input must be in the following format: audio/lpcm sample-rate=8000 sample-size-bits=16 channel-count=1; is-big-endian=false. If the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see PostFulfillmentStatusSpecification.    Success message - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.    Failed message - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.    Timeout message - If you don't configure a timeout message and a timeout, and the Lambda function doesn't return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out.    For more information, see Completion message. If the optional update message is configured, it is played at the specified frequency while the Lambda function is running and the update message state is active. If the fulfillment update message is not active, the Lambda function runs with a 30 second timeout.  For more information, see Update message   The StartConversation operation is supported only in the following SDKs:     AWS SDK for C++     AWS SDK for Java V2     AWS SDK for Ruby V3
    @Sendable
    @inlinable
    public func startConversation(_ input: StartConversationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartConversationResponse {
        try await self.client.execute(
            operation: "StartConversation", 
            path: "/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/conversation", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts an HTTP/2 bidirectional event stream that enables you to send audio, text, or DTMF input in real time. After your application starts a conversation, users send input to Amazon Lex V2 as a stream of events. Amazon Lex V2 processes the incoming events and responds with streaming text or audio events.   Audio input must be in the following format: audio/lpcm sample-rate=8000 sample-size-bits=16 channel-count=1; is-big-endian=false. If the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see PostFulfillmentStatusSpecification.    Success message - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.    Failed message - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.    Timeout message - If you don't configure a timeout message and a timeout, and the Lambda function doesn't return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out.    For more information, see Completion message. If the optional update message is configured, it is played at the specified frequency while the Lambda function is running and the update message state is active. If the fulfillment update message is not active, the Lambda function runs with a 30 second timeout.  For more information, see Update message   The StartConversation operation is supported only in the following SDKs:     AWS SDK for C++     AWS SDK for Java V2     AWS SDK for Ruby V3
    ///
    /// Parameters:
    ///   - botAliasId: The alias identifier in use for the bot that processes the request.
    ///   - botId: The identifier of the bot to process the request.
    ///   - conversationMode: The conversation type that you are using the Amazon Lex V2. If the conversation mode is AUDIO you can send both audio and DTMF information. If the mode is TEXT you can only send text.
    ///   - localeId: The locale where the session is in use.
    ///   - requestEventStream: Represents the stream of events to Amazon Lex V2 from your application. The events are encoded as HTTP/2 data frames.
    ///   - sessionId: The identifier of the user session that is having the conversation.
    ///   - logger: Logger use during operation
    @inlinable
    public func startConversation(
        botAliasId: String,
        botId: String,
        conversationMode: ConversationMode? = nil,
        localeId: String,
        requestEventStream: AWSEventStream<StartConversationRequestEventStream>,
        sessionId: String,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartConversationResponse {
        let input = StartConversationRequest(
            botAliasId: botAliasId, 
            botId: botId, 
            conversationMode: conversationMode, 
            localeId: localeId, 
            requestEventStream: requestEventStream, 
            sessionId: sessionId
        )
        return try await self.startConversation(input, logger: logger)
    }
}

extension LexRuntimeV2 {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: LexRuntimeV2, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}
