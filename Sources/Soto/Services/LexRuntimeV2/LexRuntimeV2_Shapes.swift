//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension LexRuntimeV2 {
    // MARK: Enums

    public enum ConfirmationState: String, CustomStringConvertible, Codable {
        case confirmed = "Confirmed"
        case denied = "Denied"
        case none = "None"
        public var description: String { return self.rawValue }
    }

    public enum ConversationMode: String, CustomStringConvertible, Codable {
        case audio = "AUDIO"
        case text = "TEXT"
        public var description: String { return self.rawValue }
    }

    public enum DialogActionType: String, CustomStringConvertible, Codable {
        case close = "Close"
        case confirmintent = "ConfirmIntent"
        case delegate = "Delegate"
        case elicitintent = "ElicitIntent"
        case elicitslot = "ElicitSlot"
        public var description: String { return self.rawValue }
    }

    public enum InputMode: String, CustomStringConvertible, Codable {
        case dtmf = "DTMF"
        case speech = "Speech"
        case text = "Text"
        public var description: String { return self.rawValue }
    }

    public enum IntentState: String, CustomStringConvertible, Codable {
        case failed = "Failed"
        case fulfilled = "Fulfilled"
        case inprogress = "InProgress"
        case readyforfulfillment = "ReadyForFulfillment"
        case waiting = "Waiting"
        public var description: String { return self.rawValue }
    }

    public enum MessageContentType: String, CustomStringConvertible, Codable {
        case custompayload = "CustomPayload"
        case imageresponsecard = "ImageResponseCard"
        case plaintext = "PlainText"
        case ssml = "SSML"
        public var description: String { return self.rawValue }
    }

    public enum PlaybackInterruptionReason: String, CustomStringConvertible, Codable {
        case dtmfStartDetected = "DTMF_START_DETECTED"
        case textDetected = "TEXT_DETECTED"
        case voiceStartDetected = "VOICE_START_DETECTED"
        public var description: String { return self.rawValue }
    }

    public enum SentimentType: String, CustomStringConvertible, Codable {
        case mixed = "MIXED"
        case negative = "NEGATIVE"
        case neutral = "NEUTRAL"
        case positive = "POSITIVE"
        public var description: String { return self.rawValue }
    }

    public enum Shape: String, CustomStringConvertible, Codable {
        case list = "List"
        case scalar = "Scalar"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AccessDeniedException: AWSDecodableShape {
        public let message: String

        public init(message: String) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message
        }
    }

    public struct ActiveContext: AWSEncodableShape & AWSDecodableShape {
        /// A lis tof contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request. If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.
        public let contextAttributes: [String: String]
        /// The name of the context.
        public let name: String
        /// Indicates the number of turns or seconds that the context is active. Once the time to live expires, the context is no longer returned in a response.
        public let timeToLive: ActiveContextTimeToLive

        public init(contextAttributes: [String: String], name: String, timeToLive: ActiveContextTimeToLive) {
            self.contextAttributes = contextAttributes
            self.name = name
            self.timeToLive = timeToLive
        }

        public func validate(name: String) throws {
            try self.contextAttributes.forEach {
                try validate($0.key, name: "contextAttributes.key", parent: name, max: 100)
                try validate($0.key, name: "contextAttributes.key", parent: name, min: 1)
                try validate($0.value, name: "contextAttributes[\"\($0.key)\"]", parent: name, max: 1024)
                try validate($0.value, name: "contextAttributes[\"\($0.key)\"]", parent: name, min: 1)
            }
            try self.validate(self.name, name: "name", parent: name, max: 100)
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.validate(self.name, name: "name", parent: name, pattern: "^([A-Za-z]_?)+$")
            try self.timeToLive.validate(name: "\(name).timeToLive")
        }

        private enum CodingKeys: String, CodingKey {
            case contextAttributes
            case name
            case timeToLive
        }
    }

    public struct ActiveContextTimeToLive: AWSEncodableShape & AWSDecodableShape {
        /// The number of seconds that the context is active. You can specify between 5 and 86400 seconds (24 hours).
        public let timeToLiveInSeconds: Int
        /// The number of turns that the context is active. You can specify up to 20 turns. Each request and response from the bot is a turn.
        public let turnsToLive: Int

        public init(timeToLiveInSeconds: Int, turnsToLive: Int) {
            self.timeToLiveInSeconds = timeToLiveInSeconds
            self.turnsToLive = turnsToLive
        }

        public func validate(name: String) throws {
            try self.validate(self.timeToLiveInSeconds, name: "timeToLiveInSeconds", parent: name, max: 86400)
            try self.validate(self.timeToLiveInSeconds, name: "timeToLiveInSeconds", parent: name, min: 5)
            try self.validate(self.turnsToLive, name: "turnsToLive", parent: name, max: 20)
            try self.validate(self.turnsToLive, name: "turnsToLive", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case timeToLiveInSeconds
            case turnsToLive
        }
    }

    public struct AudioInputEvent: AWSEncodableShape {
        /// An encoded stream of audio.
        public let audioChunk: Data?
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public let clientTimestampMillis: Int64?
        /// The encoding used for the audio chunk. You must use 8 KHz PCM 16-bit mono-channel little-endian format. The value of the field should be:  audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false
        public let contentType: String
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public let eventId: String?

        public init(audioChunk: Data? = nil, clientTimestampMillis: Int64? = nil, contentType: String, eventId: String? = nil) {
            self.audioChunk = audioChunk
            self.clientTimestampMillis = clientTimestampMillis
            self.contentType = contentType
            self.eventId = eventId
        }

        public func validate(name: String) throws {
            try self.validate(self.contentType, name: "contentType", parent: name, min: 1)
            try self.validate(self.eventId, name: "eventId", parent: name, max: 100)
            try self.validate(self.eventId, name: "eventId", parent: name, min: 2)
            try self.validate(self.eventId, name: "eventId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case audioChunk
            case clientTimestampMillis
            case contentType
            case eventId
        }
    }

    public struct AudioResponseEvent: AWSDecodableShape {
        /// A chunk of the audio to play.
        public let audioChunk: Data?
        /// The encoding of the audio chunk. This is the same as the encoding configure in the contentType field of the ConfigurationEvent.
        public let contentType: String?
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public let eventId: String?

        public init(audioChunk: Data? = nil, contentType: String? = nil, eventId: String? = nil) {
            self.audioChunk = audioChunk
            self.contentType = contentType
            self.eventId = eventId
        }

        private enum CodingKeys: String, CodingKey {
            case audioChunk
            case contentType
            case eventId
        }
    }

    public struct BadGatewayException: AWSDecodableShape {
        public let message: String

        public init(message: String) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message
        }
    }

    public struct Button: AWSEncodableShape & AWSDecodableShape {
        /// The text that is displayed on the button.
        public let text: String
        /// The value returned to Amazon Lex V2 when a user chooses the button.
        public let value: String

        public init(text: String, value: String) {
            self.text = text
            self.value = value
        }

        public func validate(name: String) throws {
            try self.validate(self.text, name: "text", parent: name, max: 50)
            try self.validate(self.text, name: "text", parent: name, min: 1)
            try self.validate(self.value, name: "value", parent: name, max: 50)
            try self.validate(self.value, name: "value", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case text
            case value
        }
    }

    public struct ConfidenceScore: AWSDecodableShape {
        /// A score that indicates how confident Amazon Lex V2 is that an intent satisfies the user's intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.
        public let score: Double?

        public init(score: Double? = nil) {
            self.score = score
        }

        private enum CodingKeys: String, CodingKey {
            case score
        }
    }

    public struct ConfigurationEvent: AWSEncodableShape {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public let clientTimestampMillis: Int64?
        /// Determines whether Amazon Lex V2 should send audio responses to the client application. When this parameter if false, the client application needs to create responses for the user.
        public let disablePlayback: Bool?
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public let eventId: String?
        /// Request-specific information passed between the client application and Amazon Lex V2. The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes for prefix x-amz-lex:.
        public let requestAttributes: [String: String]?
        /// The message that Amazon Lex V2 returns in the response can be either text or speech based on the responseContentType value.   If the value is text/plain;charset=utf-8, Amazon Lex V2 returns text in the response.   If the value begins with audio/, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the requestContentType parameter. For example, if you specify audio/mpeg as the value, Amazon Lex V2 returns speech in the MPEG format.   If the value is audio/pcm, the speech returned is audio/pcm in 16-bit, little-endian format.   The following are the accepted values:   audio/mpeg   audio/ogg   audio/pcm   audio/* (defaults to mpeg)   text/plain; charset=utf-8
        public let responseContentType: String
        public let sessionState: SessionState?
        /// A list of messages to send to the user.
        public let welcomeMessages: [Message]?

        public init(clientTimestampMillis: Int64? = nil, disablePlayback: Bool? = nil, eventId: String? = nil, requestAttributes: [String: String]? = nil, responseContentType: String, sessionState: SessionState? = nil, welcomeMessages: [Message]? = nil) {
            self.clientTimestampMillis = clientTimestampMillis
            self.disablePlayback = disablePlayback
            self.eventId = eventId
            self.requestAttributes = requestAttributes
            self.responseContentType = responseContentType
            self.sessionState = sessionState
            self.welcomeMessages = welcomeMessages
        }

        public func validate(name: String) throws {
            try self.validate(self.eventId, name: "eventId", parent: name, max: 100)
            try self.validate(self.eventId, name: "eventId", parent: name, min: 2)
            try self.validate(self.eventId, name: "eventId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
            try self.requestAttributes?.forEach {
                try validate($0.key, name: "requestAttributes.key", parent: name, min: 1)
            }
            try self.validate(self.responseContentType, name: "responseContentType", parent: name, min: 1)
            try self.sessionState?.validate(name: "\(name).sessionState")
            try self.welcomeMessages?.forEach {
                try $0.validate(name: "\(name).welcomeMessages[]")
            }
            try self.validate(self.welcomeMessages, name: "welcomeMessages", parent: name, max: 10)
        }

        private enum CodingKeys: String, CodingKey {
            case clientTimestampMillis
            case disablePlayback
            case eventId
            case requestAttributes
            case responseContentType
            case sessionState
            case welcomeMessages
        }
    }

    public struct ConflictException: AWSDecodableShape {
        public let message: String

        public init(message: String) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message
        }
    }

    public struct DTMFInputEvent: AWSEncodableShape {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public let clientTimestampMillis: Int64?
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public let eventId: String?
        /// The DTMF character that the user pressed. The allowed characters are A - D, 0 - 9, # and *.
        public let inputCharacter: String

        public init(clientTimestampMillis: Int64? = nil, eventId: String? = nil, inputCharacter: String) {
            self.clientTimestampMillis = clientTimestampMillis
            self.eventId = eventId
            self.inputCharacter = inputCharacter
        }

        public func validate(name: String) throws {
            try self.validate(self.eventId, name: "eventId", parent: name, max: 100)
            try self.validate(self.eventId, name: "eventId", parent: name, min: 2)
            try self.validate(self.eventId, name: "eventId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
            try self.validate(self.inputCharacter, name: "inputCharacter", parent: name, max: 1)
            try self.validate(self.inputCharacter, name: "inputCharacter", parent: name, min: 1)
            try self.validate(self.inputCharacter, name: "inputCharacter", parent: name, pattern: "^[A-D0-9#*]{1}$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientTimestampMillis
            case eventId
            case inputCharacter
        }
    }

    public struct DeleteSessionRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "botAliasId", location: .uri(locationName: "botAliasId")),
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId")),
            AWSMemberEncoding(label: "localeId", location: .uri(locationName: "localeId")),
            AWSMemberEncoding(label: "sessionId", location: .uri(locationName: "sessionId"))
        ]

        /// The alias identifier in use for the bot that contains the session data.
        public let botAliasId: String
        /// The identifier of the bot that contains the session data.
        public let botId: String
        /// The locale where the session is in use.
        public let localeId: String
        /// The identifier of the session to delete.
        public let sessionId: String

        public init(botAliasId: String, botId: String, localeId: String, sessionId: String) {
            self.botAliasId = botAliasId
            self.botId = botId
            self.localeId = localeId
            self.sessionId = sessionId
        }

        public func validate(name: String) throws {
            try self.validate(self.botId, name: "botId", parent: name, max: 10)
            try self.validate(self.botId, name: "botId", parent: name, min: 10)
            try self.validate(self.botId, name: "botId", parent: name, pattern: "^[0-9a-zA-Z]+$")
            try self.validate(self.localeId, name: "localeId", parent: name, min: 1)
            try self.validate(self.sessionId, name: "sessionId", parent: name, max: 100)
            try self.validate(self.sessionId, name: "sessionId", parent: name, min: 2)
            try self.validate(self.sessionId, name: "sessionId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct DeleteSessionResponse: AWSDecodableShape {
        /// The alias identifier in use for the bot that contained the session data.
        public let botAliasId: String?
        /// The identifier of the bot that contained the session data.
        public let botId: String?
        /// The locale where the session was used.
        public let localeId: String?
        /// The identifier of the deleted session.
        public let sessionId: String?

        public init(botAliasId: String? = nil, botId: String? = nil, localeId: String? = nil, sessionId: String? = nil) {
            self.botAliasId = botAliasId
            self.botId = botId
            self.localeId = localeId
            self.sessionId = sessionId
        }

        private enum CodingKeys: String, CodingKey {
            case botAliasId
            case botId
            case localeId
            case sessionId
        }
    }

    public struct DependencyFailedException: AWSDecodableShape {
        public let message: String

        public init(message: String) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message
        }
    }

    public struct DialogAction: AWSEncodableShape & AWSDecodableShape {
        /// The name of the slot that should be elicited from the user.
        public let slotToElicit: String?
        /// The next action that the bot should take in its interaction with the user. The possible values are:    Close - Indicates that there will not be a response from the user. For example, the statement "Your order has been placed" does not require a response.    ConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as "Place the order?"    Delegate - The next action is determined by Amazon Lex V2.    ElicitSlot - The next action is to elicit a slot value from the user.
        public let type: DialogActionType

        public init(slotToElicit: String? = nil, type: DialogActionType) {
            self.slotToElicit = slotToElicit
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.slotToElicit, name: "slotToElicit", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case slotToElicit
            case type
        }
    }

    public struct DisconnectionEvent: AWSEncodableShape {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public let clientTimestampMillis: Int64?
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public let eventId: String?

        public init(clientTimestampMillis: Int64? = nil, eventId: String? = nil) {
            self.clientTimestampMillis = clientTimestampMillis
            self.eventId = eventId
        }

        public func validate(name: String) throws {
            try self.validate(self.eventId, name: "eventId", parent: name, max: 100)
            try self.validate(self.eventId, name: "eventId", parent: name, min: 2)
            try self.validate(self.eventId, name: "eventId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientTimestampMillis
            case eventId
        }
    }

    public struct GetSessionRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "botAliasId", location: .uri(locationName: "botAliasId")),
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId")),
            AWSMemberEncoding(label: "localeId", location: .uri(locationName: "localeId")),
            AWSMemberEncoding(label: "sessionId", location: .uri(locationName: "sessionId"))
        ]

        /// The alias identifier in use for the bot that contains the session data.
        public let botAliasId: String
        /// The identifier of the bot that contains the session data.
        public let botId: String
        /// The locale where the session is in use.
        public let localeId: String
        /// The identifier of the session to return.
        public let sessionId: String

        public init(botAliasId: String, botId: String, localeId: String, sessionId: String) {
            self.botAliasId = botAliasId
            self.botId = botId
            self.localeId = localeId
            self.sessionId = sessionId
        }

        public func validate(name: String) throws {
            try self.validate(self.botId, name: "botId", parent: name, max: 10)
            try self.validate(self.botId, name: "botId", parent: name, min: 10)
            try self.validate(self.botId, name: "botId", parent: name, pattern: "^[0-9a-zA-Z]+$")
            try self.validate(self.localeId, name: "localeId", parent: name, min: 1)
            try self.validate(self.sessionId, name: "sessionId", parent: name, max: 100)
            try self.validate(self.sessionId, name: "sessionId", parent: name, min: 2)
            try self.validate(self.sessionId, name: "sessionId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct GetSessionResponse: AWSDecodableShape {
        /// A list of intents that Amazon Lex V2 determined might satisfy the user's utterance.  Each interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.
        public let interpretations: [Interpretation]?
        /// A list of messages that were last sent to the user. The messages are ordered based on the order that your returned the messages from your Lambda function or the order that messages are defined in the bot.
        public let messages: [Message]?
        /// The identifier of the returned session.
        public let sessionId: String?
        /// Represents the current state of the dialog between the user and the bot. You can use this to determine the progress of the conversation and what the next action might be.
        public let sessionState: SessionState?

        public init(interpretations: [Interpretation]? = nil, messages: [Message]? = nil, sessionId: String? = nil, sessionState: SessionState? = nil) {
            self.interpretations = interpretations
            self.messages = messages
            self.sessionId = sessionId
            self.sessionState = sessionState
        }

        private enum CodingKeys: String, CodingKey {
            case interpretations
            case messages
            case sessionId
            case sessionState
        }
    }

    public struct HeartbeatEvent: AWSDecodableShape {
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public let eventId: String?

        public init(eventId: String? = nil) {
            self.eventId = eventId
        }

        private enum CodingKeys: String, CodingKey {
            case eventId
        }
    }

    public struct ImageResponseCard: AWSEncodableShape & AWSDecodableShape {
        /// A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.
        public let buttons: [Button]?
        /// The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.
        public let imageUrl: String?
        /// The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.
        public let subtitle: String?
        /// The title to display on the response card. The format of the title is determined by the platform displaying the response card.
        public let title: String

        public init(buttons: [Button]? = nil, imageUrl: String? = nil, subtitle: String? = nil, title: String) {
            self.buttons = buttons
            self.imageUrl = imageUrl
            self.subtitle = subtitle
            self.title = title
        }

        public func validate(name: String) throws {
            try self.buttons?.forEach {
                try $0.validate(name: "\(name).buttons[]")
            }
            try self.validate(self.buttons, name: "buttons", parent: name, max: 5)
            try self.validate(self.buttons, name: "buttons", parent: name, min: 0)
            try self.validate(self.imageUrl, name: "imageUrl", parent: name, max: 250)
            try self.validate(self.imageUrl, name: "imageUrl", parent: name, min: 1)
            try self.validate(self.subtitle, name: "subtitle", parent: name, max: 250)
            try self.validate(self.subtitle, name: "subtitle", parent: name, min: 1)
            try self.validate(self.title, name: "title", parent: name, max: 250)
            try self.validate(self.title, name: "title", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case buttons
            case imageUrl
            case subtitle
            case title
        }
    }

    public struct Intent: AWSEncodableShape & AWSDecodableShape {
        /// Contains information about whether fulfillment of the intent has been confirmed.
        public let confirmationState: ConfirmationState?
        /// The name of the intent.
        public let name: String
        /// A map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.
        public let slots: [String: Slot]?
        /// Contains fulfillment information for the intent.
        public let state: IntentState?

        public init(confirmationState: ConfirmationState? = nil, name: String, slots: [String: Slot]? = nil, state: IntentState? = nil) {
            self.confirmationState = confirmationState
            self.name = name
            self.slots = slots
            self.state = state
        }

        public func validate(name: String) throws {
            try self.validate(self.name, name: "name", parent: name, min: 1)
            try self.slots?.forEach {
                try validate($0.key, name: "slots.key", parent: name, min: 1)
                try $0.value.validate(name: "\(name).slots[\"\($0.key)\"]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case confirmationState
            case name
            case slots
            case state
        }
    }

    public struct IntentResultEvent: AWSDecodableShape {
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public let eventId: String?
        /// Indicates whether the input to the operation was text or speech.
        public let inputMode: InputMode?
        /// A list of intents that Amazon Lex V2 determined might satisfy the user's utterance. Each interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.
        public let interpretations: [Interpretation]?
        /// The attributes sent in the request.
        public let requestAttributes: [String: String]?
        /// The identifier of the session in use.
        public let sessionId: String?
        public let sessionState: SessionState?

        public init(eventId: String? = nil, inputMode: InputMode? = nil, interpretations: [Interpretation]? = nil, requestAttributes: [String: String]? = nil, sessionId: String? = nil, sessionState: SessionState? = nil) {
            self.eventId = eventId
            self.inputMode = inputMode
            self.interpretations = interpretations
            self.requestAttributes = requestAttributes
            self.sessionId = sessionId
            self.sessionState = sessionState
        }

        private enum CodingKeys: String, CodingKey {
            case eventId
            case inputMode
            case interpretations
            case requestAttributes
            case sessionId
            case sessionState
        }
    }

    public struct InternalServerException: AWSDecodableShape {
        public let message: String

        public init(message: String) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message
        }
    }

    public struct Interpretation: AWSDecodableShape {
        /// A list of intents that might satisfy the user's utterance. The intents are ordered by the confidence score.
        public let intent: Intent?
        /// Determines the threshold where Amazon Lex V2 will insert the AMAZON.FallbackIntent, AMAZON.KendraSearchIntent, or both when returning alternative intents in a response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot.
        public let nluConfidence: ConfidenceScore?
        /// The sentiment expressed in an utterance.  When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.
        public let sentimentResponse: SentimentResponse?

        public init(intent: Intent? = nil, nluConfidence: ConfidenceScore? = nil, sentimentResponse: SentimentResponse? = nil) {
            self.intent = intent
            self.nluConfidence = nluConfidence
            self.sentimentResponse = sentimentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case intent
            case nluConfidence
            case sentimentResponse
        }
    }

    public struct Message: AWSEncodableShape & AWSDecodableShape {
        /// The text of the message.
        public let content: String?
        /// Indicates the type of response.
        public let contentType: MessageContentType
        public let imageResponseCard: ImageResponseCard?

        public init(content: String? = nil, contentType: MessageContentType, imageResponseCard: ImageResponseCard? = nil) {
            self.content = content
            self.contentType = contentType
            self.imageResponseCard = imageResponseCard
        }

        public func validate(name: String) throws {
            try self.validate(self.content, name: "content", parent: name, max: 1024)
            try self.validate(self.content, name: "content", parent: name, min: 1)
            try self.imageResponseCard?.validate(name: "\(name).imageResponseCard")
        }

        private enum CodingKeys: String, CodingKey {
            case content
            case contentType
            case imageResponseCard
        }
    }

    public struct PlaybackCompletionEvent: AWSEncodableShape {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public let clientTimestampMillis: Int64?
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public let eventId: String?

        public init(clientTimestampMillis: Int64? = nil, eventId: String? = nil) {
            self.clientTimestampMillis = clientTimestampMillis
            self.eventId = eventId
        }

        public func validate(name: String) throws {
            try self.validate(self.eventId, name: "eventId", parent: name, max: 100)
            try self.validate(self.eventId, name: "eventId", parent: name, min: 2)
            try self.validate(self.eventId, name: "eventId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientTimestampMillis
            case eventId
        }
    }

    public struct PlaybackInterruptionEvent: AWSDecodableShape {
        /// The identifier of the event that contained the audio, DTMF, or text that caused the interruption.
        public let causedByEventId: String?
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public let eventId: String?
        /// Indicates the type of user input that Amazon Lex V2 detected.
        public let eventReason: PlaybackInterruptionReason?

        public init(causedByEventId: String? = nil, eventId: String? = nil, eventReason: PlaybackInterruptionReason? = nil) {
            self.causedByEventId = causedByEventId
            self.eventId = eventId
            self.eventReason = eventReason
        }

        private enum CodingKeys: String, CodingKey {
            case causedByEventId
            case eventId
            case eventReason
        }
    }

    public struct PutSessionRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "botAliasId", location: .uri(locationName: "botAliasId")),
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId")),
            AWSMemberEncoding(label: "localeId", location: .uri(locationName: "localeId")),
            AWSMemberEncoding(label: "responseContentType", location: .header(locationName: "ResponseContentType")),
            AWSMemberEncoding(label: "sessionId", location: .uri(locationName: "sessionId"))
        ]

        /// The alias identifier of the bot that receives the session data.
        public let botAliasId: String
        /// The identifier of the bot that receives the session data.
        public let botId: String
        /// The locale where the session is in use.
        public let localeId: String
        /// A list of messages to send to the user. Messages are sent in the order that they are defined in the list.
        public let messages: [Message]?
        /// Request-specific information passed between Amazon Lex V2 and the client application. The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes with the prefix x-amz-lex:.
        public let requestAttributes: [String: String]?
        /// The message that Amazon Lex V2 returns in the response can be either text or speech depending on the value of this parameter.    If the value is text/plain; charset=utf-8, Amazon Lex V2 returns text in the response.
        public let responseContentType: String?
        /// The identifier of the session that receives the session data.
        public let sessionId: String
        /// Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user.
        public let sessionState: SessionState

        public init(botAliasId: String, botId: String, localeId: String, messages: [Message]? = nil, requestAttributes: [String: String]? = nil, responseContentType: String? = nil, sessionId: String, sessionState: SessionState) {
            self.botAliasId = botAliasId
            self.botId = botId
            self.localeId = localeId
            self.messages = messages
            self.requestAttributes = requestAttributes
            self.responseContentType = responseContentType
            self.sessionId = sessionId
            self.sessionState = sessionState
        }

        public func validate(name: String) throws {
            try self.validate(self.botId, name: "botId", parent: name, max: 10)
            try self.validate(self.botId, name: "botId", parent: name, min: 10)
            try self.validate(self.botId, name: "botId", parent: name, pattern: "^[0-9a-zA-Z]+$")
            try self.validate(self.localeId, name: "localeId", parent: name, min: 1)
            try self.messages?.forEach {
                try $0.validate(name: "\(name).messages[]")
            }
            try self.validate(self.messages, name: "messages", parent: name, max: 10)
            try self.requestAttributes?.forEach {
                try validate($0.key, name: "requestAttributes.key", parent: name, min: 1)
            }
            try self.validate(self.responseContentType, name: "responseContentType", parent: name, min: 1)
            try self.validate(self.sessionId, name: "sessionId", parent: name, max: 100)
            try self.validate(self.sessionId, name: "sessionId", parent: name, min: 2)
            try self.validate(self.sessionId, name: "sessionId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
            try self.sessionState.validate(name: "\(name).sessionState")
        }

        private enum CodingKeys: String, CodingKey {
            case messages
            case requestAttributes
            case sessionState
        }
    }

    public struct PutSessionResponse: AWSDecodableShape & AWSShapeWithPayload {
        /// The key for the payload
        public static let _payloadPath: String = "audioStream"
        public static let _payloadOptions: AWSShapePayloadOptions = [.raw, .allowStreaming]
        public static var _encoding = [
            AWSMemberEncoding(label: "contentType", location: .header(locationName: "Content-Type")),
            AWSMemberEncoding(label: "messages", location: .header(locationName: "x-amz-lex-messages")),
            AWSMemberEncoding(label: "requestAttributes", location: .header(locationName: "x-amz-lex-request-attributes")),
            AWSMemberEncoding(label: "sessionId", location: .header(locationName: "x-amz-lex-session-id")),
            AWSMemberEncoding(label: "sessionState", location: .header(locationName: "x-amz-lex-session-state"))
        ]

        /// If the requested content type was audio, the audio version of the message to convey to the user.
        public let audioStream: AWSPayload?
        /// The type of response. Same as the type specified in the responseContentType field in the request.
        public let contentType: String?
        /// A list of messages that were last sent to the user. The messages are ordered based on how you return the messages from you Lambda function or the order that the messages are defined in the bot.
        public let messages: String?
        /// Request-specific information passed between the client application and Amazon Lex V2. These are the same as the requestAttribute parameter in the call to the PutSession operation.
        public let requestAttributes: String?
        /// The identifier of the session that received the data.
        public let sessionId: String?
        /// Represents the current state of the dialog between the user and the bot. Use this to determine the progress of the conversation and what the next action may be.
        public let sessionState: String?

        public init(audioStream: AWSPayload? = nil, contentType: String? = nil, messages: String? = nil, requestAttributes: String? = nil, sessionId: String? = nil, sessionState: String? = nil) {
            self.audioStream = audioStream
            self.contentType = contentType
            self.messages = messages
            self.requestAttributes = requestAttributes
            self.sessionId = sessionId
            self.sessionState = sessionState
        }

        private enum CodingKeys: String, CodingKey {
            case audioStream
            case contentType = "Content-Type"
            case messages = "x-amz-lex-messages"
            case requestAttributes = "x-amz-lex-request-attributes"
            case sessionId = "x-amz-lex-session-id"
            case sessionState = "x-amz-lex-session-state"
        }
    }

    public struct RecognizeTextRequest: AWSEncodableShape {
        public static var _encoding = [
            AWSMemberEncoding(label: "botAliasId", location: .uri(locationName: "botAliasId")),
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId")),
            AWSMemberEncoding(label: "localeId", location: .uri(locationName: "localeId")),
            AWSMemberEncoding(label: "sessionId", location: .uri(locationName: "sessionId"))
        ]

        /// The alias identifier in use for the bot that processes the request.
        public let botAliasId: String
        /// The identifier of the bot that processes the request.
        public let botId: String
        /// The locale where the session is in use.
        public let localeId: String
        /// Request-specific information passed between the client application and Amazon Lex V2  The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes with the prefix x-amz-lex:.
        public let requestAttributes: [String: String]?
        /// The identifier of the user session that is having the conversation.
        public let sessionId: String
        /// The current state of the dialog between the user and the bot.
        public let sessionState: SessionState?
        /// The text that the user entered. Amazon Lex V2 interprets this text.
        public let text: String

        public init(botAliasId: String, botId: String, localeId: String, requestAttributes: [String: String]? = nil, sessionId: String, sessionState: SessionState? = nil, text: String) {
            self.botAliasId = botAliasId
            self.botId = botId
            self.localeId = localeId
            self.requestAttributes = requestAttributes
            self.sessionId = sessionId
            self.sessionState = sessionState
            self.text = text
        }

        public func validate(name: String) throws {
            try self.validate(self.botId, name: "botId", parent: name, max: 10)
            try self.validate(self.botId, name: "botId", parent: name, min: 10)
            try self.validate(self.botId, name: "botId", parent: name, pattern: "^[0-9a-zA-Z]+$")
            try self.validate(self.localeId, name: "localeId", parent: name, min: 1)
            try self.requestAttributes?.forEach {
                try validate($0.key, name: "requestAttributes.key", parent: name, min: 1)
            }
            try self.validate(self.sessionId, name: "sessionId", parent: name, max: 100)
            try self.validate(self.sessionId, name: "sessionId", parent: name, min: 2)
            try self.validate(self.sessionId, name: "sessionId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
            try self.sessionState?.validate(name: "\(name).sessionState")
            try self.validate(self.text, name: "text", parent: name, max: 1024)
            try self.validate(self.text, name: "text", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case requestAttributes
            case sessionState
            case text
        }
    }

    public struct RecognizeTextResponse: AWSDecodableShape {
        /// A list of intents that Amazon Lex V2 determined might satisfy the user's utterance.  Each interpretation includes the intent, a score that indicates now confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.
        public let interpretations: [Interpretation]?
        /// A list of messages last sent to the user. The messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot.
        public let messages: [Message]?
        /// The attributes sent in the request.
        public let requestAttributes: [String: String]?
        /// The identifier of the session in use.
        public let sessionId: String?
        /// Represents the current state of the dialog between the user and the bot.  Use this to determine the progress of the conversation and what the next action may be.
        public let sessionState: SessionState?

        public init(interpretations: [Interpretation]? = nil, messages: [Message]? = nil, requestAttributes: [String: String]? = nil, sessionId: String? = nil, sessionState: SessionState? = nil) {
            self.interpretations = interpretations
            self.messages = messages
            self.requestAttributes = requestAttributes
            self.sessionId = sessionId
            self.sessionState = sessionState
        }

        private enum CodingKeys: String, CodingKey {
            case interpretations
            case messages
            case requestAttributes
            case sessionId
            case sessionState
        }
    }

    public struct RecognizeUtteranceRequest: AWSEncodableShape & AWSShapeWithPayload {
        /// The key for the payload
        public static let _payloadPath: String = "inputStream"
        public static let _payloadOptions: AWSShapePayloadOptions = [.raw, .allowStreaming, .allowChunkedStreaming]
        public static var _encoding = [
            AWSMemberEncoding(label: "botAliasId", location: .uri(locationName: "botAliasId")),
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId")),
            AWSMemberEncoding(label: "localeId", location: .uri(locationName: "localeId")),
            AWSMemberEncoding(label: "requestAttributes", location: .header(locationName: "x-amz-lex-request-attributes")),
            AWSMemberEncoding(label: "requestContentType", location: .header(locationName: "Content-Type")),
            AWSMemberEncoding(label: "responseContentType", location: .header(locationName: "Response-Content-Type")),
            AWSMemberEncoding(label: "sessionId", location: .uri(locationName: "sessionId")),
            AWSMemberEncoding(label: "sessionState", location: .header(locationName: "x-amz-lex-session-state"))
        ]

        /// The alias identifier in use for the bot that should receive the request.
        public let botAliasId: String
        /// The identifier of the bot that should receive the request.
        public let botId: String
        /// User input in PCM or Opus audio format or text format as described in the requestContentType parameter.
        public let inputStream: AWSPayload?
        /// The locale where the session is in use.
        public let localeId: String
        /// Request-specific information passed between the client application and Amazon Lex V2  The namespace x-amz-lex: is reserved for special attributes. Don't create any request attributes for prefix x-amz-lex:. The requestAttributes field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.
        public let requestAttributes: String?
        /// Indicates the format for audio input or that the content is text. The header must start with one of the following prefixes:   PCM format, audio data must be in little-endian byte order.   audio/l16; rate=16000; channels=1   audio/x-l16; sample-rate=16000; channel-count=1   audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false     Opus format   audio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4     Text format   text/plain; charset=utf-8
        public let requestContentType: String
        /// The message that Amazon Lex V2 returns in the response can be either text or speech based on the responseContentType value.   If the value is text/plain;charset=utf-8, Amazon Lex V2 returns text in the response.   If the value begins with audio/, Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the requestContentType parameter. For example, if you specify audio/mpeg as the value, Amazon Lex V2 returns speech in the MPEG format.   If the value is audio/pcm, the speech returned is audio/pcm at 16 KHz in 16-bit, little-endian format.   The following are the accepted values:   audio/mpeg   audio/ogg   audio/pcm (16 KHz)   audio/* (defaults to mpeg)   text/plain; charset=utf-8
        public let responseContentType: String?
        /// The identifier of the session in use.
        public let sessionId: String
        /// Sets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user. The sessionState field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.
        public let sessionState: String?

        public init(botAliasId: String, botId: String, inputStream: AWSPayload? = nil, localeId: String, requestAttributes: String? = nil, requestContentType: String, responseContentType: String? = nil, sessionId: String, sessionState: String? = nil) {
            self.botAliasId = botAliasId
            self.botId = botId
            self.inputStream = inputStream
            self.localeId = localeId
            self.requestAttributes = requestAttributes
            self.requestContentType = requestContentType
            self.responseContentType = responseContentType
            self.sessionId = sessionId
            self.sessionState = sessionState
        }

        public func validate(name: String) throws {
            try self.validate(self.botId, name: "botId", parent: name, max: 10)
            try self.validate(self.botId, name: "botId", parent: name, min: 10)
            try self.validate(self.botId, name: "botId", parent: name, pattern: "^[0-9a-zA-Z]+$")
            try self.validate(self.localeId, name: "localeId", parent: name, min: 1)
            try self.validate(self.requestContentType, name: "requestContentType", parent: name, min: 1)
            try self.validate(self.responseContentType, name: "responseContentType", parent: name, min: 1)
            try self.validate(self.sessionId, name: "sessionId", parent: name, max: 100)
            try self.validate(self.sessionId, name: "sessionId", parent: name, min: 2)
            try self.validate(self.sessionId, name: "sessionId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: CodingKey {}
    }

    public struct RecognizeUtteranceResponse: AWSDecodableShape & AWSShapeWithPayload {
        /// The key for the payload
        public static let _payloadPath: String = "audioStream"
        public static let _payloadOptions: AWSShapePayloadOptions = [.raw, .allowStreaming]
        public static var _encoding = [
            AWSMemberEncoding(label: "contentType", location: .header(locationName: "Content-Type")),
            AWSMemberEncoding(label: "inputMode", location: .header(locationName: "x-amz-lex-input-mode")),
            AWSMemberEncoding(label: "inputTranscript", location: .header(locationName: "x-amz-lex-input-transcript")),
            AWSMemberEncoding(label: "interpretations", location: .header(locationName: "x-amz-lex-interpretations")),
            AWSMemberEncoding(label: "messages", location: .header(locationName: "x-amz-lex-messages")),
            AWSMemberEncoding(label: "requestAttributes", location: .header(locationName: "x-amz-lex-request-attributes")),
            AWSMemberEncoding(label: "sessionId", location: .header(locationName: "x-amz-lex-session-id")),
            AWSMemberEncoding(label: "sessionState", location: .header(locationName: "x-amz-lex-session-state"))
        ]

        /// The prompt or statement to send to the user. This is based on the bot configuration and context. For example, if Amazon Lex V2 did not understand the user intent, it sends the clarificationPrompt configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the confirmationPrompt. Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex V2 sends that message in the response.
        public let audioStream: AWSPayload?
        /// Content type as specified in the responseContentType in the request.
        public let contentType: String?
        /// Indicates whether the input mode to the operation was text or speech.
        public let inputMode: String?
        /// The text used to process the request. If the input was an audio stream, the inputTranscript field contains the text extracted from the audio stream. This is the text that is actually processed to recognize intents and slot values. You can use this information to determine if Amazon Lex V2 is correctly processing the audio that you send. The inputTranscript field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.
        public let inputTranscript: String?
        /// A list of intents that Amazon Lex V2 determined might satisfy the user's utterance. Each interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance. The interpretations field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.
        public let interpretations: String?
        /// A list of messages that were last sent to the user. The messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot. The messages field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.
        public let messages: String?
        /// The attributes sent in the request. The requestAttributes field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents.
        public let requestAttributes: String?
        /// The identifier of the session in use.
        public let sessionId: String?
        /// Represents the current state of the dialog between the user and the bot. Use this to determine the progress of the conversation and what the next action might be. The sessionState field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.
        public let sessionState: String?

        public init(audioStream: AWSPayload? = nil, contentType: String? = nil, inputMode: String? = nil, inputTranscript: String? = nil, interpretations: String? = nil, messages: String? = nil, requestAttributes: String? = nil, sessionId: String? = nil, sessionState: String? = nil) {
            self.audioStream = audioStream
            self.contentType = contentType
            self.inputMode = inputMode
            self.inputTranscript = inputTranscript
            self.interpretations = interpretations
            self.messages = messages
            self.requestAttributes = requestAttributes
            self.sessionId = sessionId
            self.sessionState = sessionState
        }

        private enum CodingKeys: String, CodingKey {
            case audioStream
            case contentType = "Content-Type"
            case inputMode = "x-amz-lex-input-mode"
            case inputTranscript = "x-amz-lex-input-transcript"
            case interpretations = "x-amz-lex-interpretations"
            case messages = "x-amz-lex-messages"
            case requestAttributes = "x-amz-lex-request-attributes"
            case sessionId = "x-amz-lex-session-id"
            case sessionState = "x-amz-lex-session-state"
        }
    }

    public struct ResourceNotFoundException: AWSDecodableShape {
        public let message: String

        public init(message: String) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message
        }
    }

    public struct SentimentResponse: AWSDecodableShape {
        /// The overall sentiment expressed in the user's response. This is the sentiment most likely expressed by the user based on the analysis by Amazon Comprehend.
        public let sentiment: SentimentType?
        public let sentimentScore: SentimentScore?

        public init(sentiment: SentimentType? = nil, sentimentScore: SentimentScore? = nil) {
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
        }

        private enum CodingKeys: String, CodingKey {
            case sentiment
            case sentimentScore
        }
    }

    public struct SentimentScore: AWSDecodableShape {
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the MIXED sentiment.
        public let mixed: Double?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEGATIVE sentiment.
        public let negative: Double?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEUTRAL sentiment.
        public let neutral: Double?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the POSITIVE sentiment.
        public let positive: Double?

        public init(mixed: Double? = nil, negative: Double? = nil, neutral: Double? = nil, positive: Double? = nil) {
            self.mixed = mixed
            self.negative = negative
            self.neutral = neutral
            self.positive = positive
        }

        private enum CodingKeys: String, CodingKey {
            case mixed
            case negative
            case neutral
            case positive
        }
    }

    public struct SessionState: AWSEncodableShape & AWSDecodableShape {
        /// One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.
        public let activeContexts: [ActiveContext]?
        /// The next step that Amazon Lex V2 should take in the conversation with a user.
        public let dialogAction: DialogAction?
        /// The active intent that Amazon Lex V2 is processing.
        public let intent: Intent?
        public let originatingRequestId: String?
        /// Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.
        public let sessionAttributes: [String: String]?

        public init(activeContexts: [ActiveContext]? = nil, dialogAction: DialogAction? = nil, intent: Intent? = nil, originatingRequestId: String? = nil, sessionAttributes: [String: String]? = nil) {
            self.activeContexts = activeContexts
            self.dialogAction = dialogAction
            self.intent = intent
            self.originatingRequestId = originatingRequestId
            self.sessionAttributes = sessionAttributes
        }

        public func validate(name: String) throws {
            try self.activeContexts?.forEach {
                try $0.validate(name: "\(name).activeContexts[]")
            }
            try self.validate(self.activeContexts, name: "activeContexts", parent: name, max: 20)
            try self.validate(self.activeContexts, name: "activeContexts", parent: name, min: 0)
            try self.dialogAction?.validate(name: "\(name).dialogAction")
            try self.intent?.validate(name: "\(name).intent")
            try self.validate(self.originatingRequestId, name: "originatingRequestId", parent: name, min: 1)
            try self.sessionAttributes?.forEach {
                try validate($0.key, name: "sessionAttributes.key", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case activeContexts
            case dialogAction
            case intent
            case originatingRequestId
            case sessionAttributes
        }
    }

    public class Slot: AWSEncodableShape & AWSDecodableShape {
        /// When the shape value is List, it indicates that the values field contains a list of slot values. When the value is Scalar, it indicates that the value field contains a single value.
        public let shape: Shape?
        /// The current value of the slot.
        public let value: Value?
        /// A list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be "pepperoni" and "pineapple."
        public let values: [Slot]?

        public init(shape: Shape? = nil, value: Value? = nil, values: [Slot]? = nil) {
            self.shape = shape
            self.value = value
            self.values = values
        }

        public func validate(name: String) throws {
            try self.value?.validate(name: "\(name).value")
            try self.values?.forEach {
                try $0.validate(name: "\(name).values[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case shape
            case value
            case values
        }
    }

    public struct StartConversationRequest: AWSEncodableShape & AWSShapeWithPayload {
        /// The key for the payload
        public static let _payloadPath: String = "requestEventStream"
        public static var _encoding = [
            AWSMemberEncoding(label: "botAliasId", location: .uri(locationName: "botAliasId")),
            AWSMemberEncoding(label: "botId", location: .uri(locationName: "botId")),
            AWSMemberEncoding(label: "conversationMode", location: .header(locationName: "x-amz-lex-conversation-mode")),
            AWSMemberEncoding(label: "localeId", location: .uri(locationName: "localeId")),
            AWSMemberEncoding(label: "sessionId", location: .uri(locationName: "sessionId"))
        ]

        /// The alias identifier in use for the bot that processes the request.
        public let botAliasId: String
        /// The identifier of the bot to process the request.
        public let botId: String
        /// The conversation type that you are using the Amazon Lex V2. If the conversation mode is AUDIO you can send both audio and DTMF information. If the mode is TEXT you can only send text.
        public let conversationMode: ConversationMode?
        /// The locale where the session is in use.
        public let localeId: String
        /// Represents the stream of events to Amazon Lex V2 from your application. The events are encoded as HTTP/2 data frames.
        public let requestEventStream: StartConversationRequestEventStream
        /// The identifier of the user session that is having the conversation.
        public let sessionId: String

        public init(botAliasId: String, botId: String, conversationMode: ConversationMode? = nil, localeId: String, requestEventStream: StartConversationRequestEventStream, sessionId: String) {
            self.botAliasId = botAliasId
            self.botId = botId
            self.conversationMode = conversationMode
            self.localeId = localeId
            self.requestEventStream = requestEventStream
            self.sessionId = sessionId
        }

        public func validate(name: String) throws {
            try self.validate(self.botId, name: "botId", parent: name, max: 10)
            try self.validate(self.botId, name: "botId", parent: name, min: 10)
            try self.validate(self.botId, name: "botId", parent: name, pattern: "^[0-9a-zA-Z]+$")
            try self.validate(self.localeId, name: "localeId", parent: name, min: 1)
            try self.requestEventStream.validate(name: "\(name).requestEventStream")
            try self.validate(self.sessionId, name: "sessionId", parent: name, max: 100)
            try self.validate(self.sessionId, name: "sessionId", parent: name, min: 2)
            try self.validate(self.sessionId, name: "sessionId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
        }

        private enum CodingKeys: String, CodingKey {
            case requestEventStream
        }
    }

    public struct StartConversationRequestEventStream: AWSEncodableShape {
        /// Speech audio sent from your client application to Amazon Lex V2. Audio starts accumulating when Amazon Lex V2 identifies a voice and continues until a natural pause in the speech is found before processing.
        public let audioInputEvent: AudioInputEvent?
        /// Configuration information sent from your client application to Amazon Lex V2
        public let configurationEvent: ConfigurationEvent?
        /// Event sent from the client application to indicate to Amazon Lex V2 that the conversation is over.
        public let disconnectionEvent: DisconnectionEvent?
        /// DTMF information sent to Amazon Lex V2 by your application. Amazon Lex V2 accumulates the DMTF information from when the user sends the first character and ends   when there's a pause longer that the value configured for the end timeout.   when there's a digit that is the configured end character.   when Amazon Lex V2 accumulates characters equal to the maximum DTMF character configuration.
        public let dTMFInputEvent: DTMFInputEvent?
        /// Event sent from the client application to Amazon Lex V2 to indicate that it has finished playing audio and that Amazon Lex V2 should start listening for user input.
        public let playbackCompletionEvent: PlaybackCompletionEvent?
        /// Text sent from your client application to Amazon Lex V2. Each TextInputEvent is processed individually.
        public let textInputEvent: TextInputEvent?

        public init(audioInputEvent: AudioInputEvent? = nil, configurationEvent: ConfigurationEvent? = nil, disconnectionEvent: DisconnectionEvent? = nil, dTMFInputEvent: DTMFInputEvent? = nil, playbackCompletionEvent: PlaybackCompletionEvent? = nil, textInputEvent: TextInputEvent? = nil) {
            self.audioInputEvent = audioInputEvent
            self.configurationEvent = configurationEvent
            self.disconnectionEvent = disconnectionEvent
            self.dTMFInputEvent = dTMFInputEvent
            self.playbackCompletionEvent = playbackCompletionEvent
            self.textInputEvent = textInputEvent
        }

        public func validate(name: String) throws {
            try self.audioInputEvent?.validate(name: "\(name).audioInputEvent")
            try self.configurationEvent?.validate(name: "\(name).configurationEvent")
            try self.disconnectionEvent?.validate(name: "\(name).disconnectionEvent")
            try self.dTMFInputEvent?.validate(name: "\(name).dTMFInputEvent")
            try self.playbackCompletionEvent?.validate(name: "\(name).playbackCompletionEvent")
            try self.textInputEvent?.validate(name: "\(name).textInputEvent")
        }

        private enum CodingKeys: String, CodingKey {
            case audioInputEvent = "AudioInputEvent"
            case configurationEvent = "ConfigurationEvent"
            case disconnectionEvent = "DisconnectionEvent"
            case dTMFInputEvent = "DTMFInputEvent"
            case playbackCompletionEvent = "PlaybackCompletionEvent"
            case textInputEvent = "TextInputEvent"
        }
    }

    public struct StartConversationResponse: AWSDecodableShape & AWSShapeWithPayload {
        /// The key for the payload
        public static let _payloadPath: String = "responseEventStream"

        /// Represents the stream of events from Amazon Lex V2 to your application. The events are encoded as HTTP/2 data frames.
        public let responseEventStream: StartConversationResponseEventStream?

        public init(responseEventStream: StartConversationResponseEventStream? = nil) {
            self.responseEventStream = responseEventStream
        }

        private enum CodingKeys: String, CodingKey {
            case responseEventStream
        }
    }

    public struct StartConversationResponseEventStream: AWSDecodableShape {
        /// Exception thrown when the credentials passed with the request are invalid or expired. Also thrown when the credentials in the request do not have permission to access the StartConversation operation.
        public let accessDeniedException: AccessDeniedException?
        public let audioResponseEvent: AudioResponseEvent?
        public let badGatewayException: BadGatewayException?
        /// Exception thrown when two clients are using the same AWS account, Amazon Lex V2 bot, and session ID.
        public let conflictException: ConflictException?
        public let dependencyFailedException: DependencyFailedException?
        public let heartbeatEvent: HeartbeatEvent?
        /// Event sent from Amazon Lex V2 to the client application containing the current state of the conversation between the user and Amazon Lex V2.
        public let intentResultEvent: IntentResultEvent?
        /// An error occurred with Amazon Lex V2.
        public let internalServerException: InternalServerException?
        public let playbackInterruptionEvent: PlaybackInterruptionEvent?
        /// Exception thrown if one of the input parameters points to a resource that does not exist. For example, if the bot ID specified does not exist.
        public let resourceNotFoundException: ResourceNotFoundException?
        public let textResponseEvent: TextResponseEvent?
        /// Exception thrown when your application exceeds the maximum number of concurrent requests.
        public let throttlingException: ThrottlingException?
        public let transcriptEvent: TranscriptEvent?
        /// Exception thrown when one or more parameters could not be validated. The message contains the name of the field that isn't valid.
        public let validationException: ValidationException?

        public init(accessDeniedException: AccessDeniedException? = nil, audioResponseEvent: AudioResponseEvent? = nil, badGatewayException: BadGatewayException? = nil, conflictException: ConflictException? = nil, dependencyFailedException: DependencyFailedException? = nil, heartbeatEvent: HeartbeatEvent? = nil, intentResultEvent: IntentResultEvent? = nil, internalServerException: InternalServerException? = nil, playbackInterruptionEvent: PlaybackInterruptionEvent? = nil, resourceNotFoundException: ResourceNotFoundException? = nil, textResponseEvent: TextResponseEvent? = nil, throttlingException: ThrottlingException? = nil, transcriptEvent: TranscriptEvent? = nil, validationException: ValidationException? = nil) {
            self.accessDeniedException = accessDeniedException
            self.audioResponseEvent = audioResponseEvent
            self.badGatewayException = badGatewayException
            self.conflictException = conflictException
            self.dependencyFailedException = dependencyFailedException
            self.heartbeatEvent = heartbeatEvent
            self.intentResultEvent = intentResultEvent
            self.internalServerException = internalServerException
            self.playbackInterruptionEvent = playbackInterruptionEvent
            self.resourceNotFoundException = resourceNotFoundException
            self.textResponseEvent = textResponseEvent
            self.throttlingException = throttlingException
            self.transcriptEvent = transcriptEvent
            self.validationException = validationException
        }

        private enum CodingKeys: String, CodingKey {
            case accessDeniedException = "AccessDeniedException"
            case audioResponseEvent = "AudioResponseEvent"
            case badGatewayException = "BadGatewayException"
            case conflictException = "ConflictException"
            case dependencyFailedException = "DependencyFailedException"
            case heartbeatEvent = "HeartbeatEvent"
            case intentResultEvent = "IntentResultEvent"
            case internalServerException = "InternalServerException"
            case playbackInterruptionEvent = "PlaybackInterruptionEvent"
            case resourceNotFoundException = "ResourceNotFoundException"
            case textResponseEvent = "TextResponseEvent"
            case throttlingException = "ThrottlingException"
            case transcriptEvent = "TranscriptEvent"
            case validationException = "ValidationException"
        }
    }

    public struct TextInputEvent: AWSEncodableShape {
        /// A timestamp set by the client of the date and time that the event was sent to Amazon Lex V2.
        public let clientTimestampMillis: Int64?
        /// A unique identifier that your application assigns to the event. You can use this to identify events in logs.
        public let eventId: String?
        /// The text from the user. Amazon Lex V2 processes this as a complete statement.
        public let text: String

        public init(clientTimestampMillis: Int64? = nil, eventId: String? = nil, text: String) {
            self.clientTimestampMillis = clientTimestampMillis
            self.eventId = eventId
            self.text = text
        }

        public func validate(name: String) throws {
            try self.validate(self.eventId, name: "eventId", parent: name, max: 100)
            try self.validate(self.eventId, name: "eventId", parent: name, min: 2)
            try self.validate(self.eventId, name: "eventId", parent: name, pattern: "[0-9a-zA-Z._:-]+")
            try self.validate(self.text, name: "text", parent: name, max: 1024)
            try self.validate(self.text, name: "text", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientTimestampMillis
            case eventId
            case text
        }
    }

    public struct TextResponseEvent: AWSDecodableShape {
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public let eventId: String?
        /// A list of messages to send to the user. Messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot.
        public let messages: [Message]?

        public init(eventId: String? = nil, messages: [Message]? = nil) {
            self.eventId = eventId
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case eventId
            case messages
        }
    }

    public struct ThrottlingException: AWSDecodableShape {
        public let message: String

        public init(message: String) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message
        }
    }

    public struct TranscriptEvent: AWSDecodableShape {
        /// A unique identifier of the event sent by Amazon Lex V2. The identifier is in the form RESPONSE-N, where N is a number starting with one and incremented for each event sent by Amazon Lex V2 in the current session.
        public let eventId: String?
        /// The transcript of the voice audio from the user.
        public let transcript: String?

        public init(eventId: String? = nil, transcript: String? = nil) {
            self.eventId = eventId
            self.transcript = transcript
        }

        private enum CodingKeys: String, CodingKey {
            case eventId
            case transcript
        }
    }

    public struct ValidationException: AWSDecodableShape {
        public let message: String

        public init(message: String) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message
        }
    }

    public struct Value: AWSEncodableShape & AWSDecodableShape {
        /// The value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.
        public let interpretedValue: String
        /// The text of the utterance from the user that was entered for the slot.
        public let originalValue: String?
        /// A list of additional values that have been recognized for the slot.
        public let resolvedValues: [String]?

        public init(interpretedValue: String, originalValue: String? = nil, resolvedValues: [String]? = nil) {
            self.interpretedValue = interpretedValue
            self.originalValue = originalValue
            self.resolvedValues = resolvedValues
        }

        public func validate(name: String) throws {
            try self.validate(self.interpretedValue, name: "interpretedValue", parent: name, min: 1)
            try self.validate(self.originalValue, name: "originalValue", parent: name, min: 1)
            try self.resolvedValues?.forEach {
                try validate($0, name: "resolvedValues[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case interpretedValue
            case originalValue
            case resolvedValues
        }
    }
}
