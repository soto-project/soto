//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

@_exported import SotoCore

/// Service object for interacting with AWS MailManager service.
///
/// AWS SES Mail Manager API  AWS SES Mail Manager API contains operations and data types that comprise the Mail Manager feature of Amazon Simple Email Service. Mail Manager is a set of Amazon SES email gateway features designed to help you strengthen your organization's email infrastructure, simplify email workflow management, and streamline email compliance control. To learn more, see the Mail Manager chapter in the Amazon SES Developer Guide.
/// API Reference: https://w.amazon.com/bin/view/AWS/Border
public struct MailManager: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the MailManager client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            amzTarget: "MailManagerSvc",
            serviceName: "MailManager",
            serviceIdentifier: "mail-manager",
            signingName: "ses",
            serviceProtocol: .json(version: "1.0"),
            apiVersion: "2023-10-17",
            endpoint: endpoint,
            errorType: MailManagerErrorType.self,
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }





    // MARK: API Calls

    /// Creates an Add On instance for the subscription indicated in the request. The resulting Amazon Resource Name (ARN) can be used in a conditional statement for a rule set or traffic policy.
    @Sendable
    public func createAddonInstance(_ input: CreateAddonInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAddonInstanceResponse {
        return try await self.client.execute(
            operation: "CreateAddonInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a subscription for an Add On representing the acceptance of its terms of use and additional pricing. The subscription can then be used to create an instance for use in rule sets or traffic policies.
    @Sendable
    public func createAddonSubscription(_ input: CreateAddonSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateAddonSubscriptionResponse {
        return try await self.client.execute(
            operation: "CreateAddonSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a new email archive resource for storing and retaining emails.
    @Sendable
    public func createArchive(_ input: CreateArchiveRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateArchiveResponse {
        return try await self.client.execute(
            operation: "CreateArchive", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provision a new ingress endpoint resource.
    @Sendable
    public func createIngressPoint(_ input: CreateIngressPointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIngressPointResponse {
        return try await self.client.execute(
            operation: "CreateIngressPoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Creates a relay resource which can be used in rules to relay incoming emails to defined relay destinations.
    @Sendable
    public func createRelay(_ input: CreateRelayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRelayResponse {
        return try await self.client.execute(
            operation: "CreateRelay", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provision a new rule set.
    @Sendable
    public func createRuleSet(_ input: CreateRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRuleSetResponse {
        return try await self.client.execute(
            operation: "CreateRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Provision a new traffic policy resource.
    @Sendable
    public func createTrafficPolicy(_ input: CreateTrafficPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrafficPolicyResponse {
        return try await self.client.execute(
            operation: "CreateTrafficPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Add On instance.
    @Sendable
    public func deleteAddonInstance(_ input: DeleteAddonInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAddonInstanceResponse {
        return try await self.client.execute(
            operation: "DeleteAddonInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an Add On subscription.
    @Sendable
    public func deleteAddonSubscription(_ input: DeleteAddonSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteAddonSubscriptionResponse {
        return try await self.client.execute(
            operation: "DeleteAddonSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Initiates deletion of an email archive. This changes the archive state to pending deletion. In this state, no new emails can be added, and existing archived emails become inaccessible (search, export, download). The archive and all of its contents will be permanently deleted 30 days after entering the pending deletion state, regardless of the configured retention period.
    @Sendable
    public func deleteArchive(_ input: DeleteArchiveRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteArchiveResponse {
        return try await self.client.execute(
            operation: "DeleteArchive", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete an ingress endpoint resource.
    @Sendable
    public func deleteIngressPoint(_ input: DeleteIngressPointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIngressPointResponse {
        return try await self.client.execute(
            operation: "DeleteIngressPoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Deletes an existing relay resource.
    @Sendable
    public func deleteRelay(_ input: DeleteRelayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRelayResponse {
        return try await self.client.execute(
            operation: "DeleteRelay", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a rule set.
    @Sendable
    public func deleteRuleSet(_ input: DeleteRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteRuleSetResponse {
        return try await self.client.execute(
            operation: "DeleteRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Delete a traffic policy resource.
    @Sendable
    public func deleteTrafficPolicy(_ input: DeleteTrafficPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrafficPolicyResponse {
        return try await self.client.execute(
            operation: "DeleteTrafficPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets detailed information about an Add On instance.
    @Sendable
    public func getAddonInstance(_ input: GetAddonInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAddonInstanceResponse {
        return try await self.client.execute(
            operation: "GetAddonInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Gets detailed information about an Add On subscription.
    @Sendable
    public func getAddonSubscription(_ input: GetAddonSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAddonSubscriptionResponse {
        return try await self.client.execute(
            operation: "GetAddonSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the full details and current state of a specified email archive.
    @Sendable
    public func getArchive(_ input: GetArchiveRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetArchiveResponse {
        return try await self.client.execute(
            operation: "GetArchive", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the details and current status of a specific email archive export job.
    @Sendable
    public func getArchiveExport(_ input: GetArchiveExportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetArchiveExportResponse {
        return try await self.client.execute(
            operation: "GetArchiveExport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a pre-signed URL that provides temporary download access to the specific email message stored in the archive.
    @Sendable
    public func getArchiveMessage(_ input: GetArchiveMessageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetArchiveMessageResponse {
        return try await self.client.execute(
            operation: "GetArchiveMessage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the textual content of a specific email message stored in the archive. Attachments are not included.
    @Sendable
    public func getArchiveMessageContent(_ input: GetArchiveMessageContentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetArchiveMessageContentResponse {
        return try await self.client.execute(
            operation: "GetArchiveMessageContent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Retrieves the details and current status of a specific email archive search job.
    @Sendable
    public func getArchiveSearch(_ input: GetArchiveSearchRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetArchiveSearchResponse {
        return try await self.client.execute(
            operation: "GetArchiveSearch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns the results of a completed email archive search job.
    @Sendable
    public func getArchiveSearchResults(_ input: GetArchiveSearchResultsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetArchiveSearchResultsResponse {
        return try await self.client.execute(
            operation: "GetArchiveSearchResults", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Fetch ingress endpoint resource attributes.
    @Sendable
    public func getIngressPoint(_ input: GetIngressPointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIngressPointResponse {
        return try await self.client.execute(
            operation: "GetIngressPoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Fetch the relay resource and it's attributes.
    @Sendable
    public func getRelay(_ input: GetRelayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRelayResponse {
        return try await self.client.execute(
            operation: "GetRelay", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Fetch attributes of a rule set.
    @Sendable
    public func getRuleSet(_ input: GetRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetRuleSetResponse {
        return try await self.client.execute(
            operation: "GetRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Fetch attributes of a traffic policy resource.
    @Sendable
    public func getTrafficPolicy(_ input: GetTrafficPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTrafficPolicyResponse {
        return try await self.client.execute(
            operation: "GetTrafficPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all Add On instances in your account.
    @Sendable
    public func listAddonInstances(_ input: ListAddonInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAddonInstancesResponse {
        return try await self.client.execute(
            operation: "ListAddonInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all Add On subscriptions in your account.
    @Sendable
    public func listAddonSubscriptions(_ input: ListAddonSubscriptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListAddonSubscriptionsResponse {
        return try await self.client.execute(
            operation: "ListAddonSubscriptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of email archive export jobs.
    @Sendable
    public func listArchiveExports(_ input: ListArchiveExportsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListArchiveExportsResponse {
        return try await self.client.execute(
            operation: "ListArchiveExports", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of email archive search jobs.
    @Sendable
    public func listArchiveSearches(_ input: ListArchiveSearchesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListArchiveSearchesResponse {
        return try await self.client.execute(
            operation: "ListArchiveSearches", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Returns a list of all email archives in your account.
    @Sendable
    public func listArchives(_ input: ListArchivesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListArchivesResponse {
        return try await self.client.execute(
            operation: "ListArchives", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List all ingress endpoint resources.
    @Sendable
    public func listIngressPoints(_ input: ListIngressPointsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListIngressPointsResponse {
        return try await self.client.execute(
            operation: "ListIngressPoints", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Lists all the existing relay resources.
    @Sendable
    public func listRelays(_ input: ListRelaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRelaysResponse {
        return try await self.client.execute(
            operation: "ListRelays", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List rule sets for this account.
    @Sendable
    public func listRuleSets(_ input: ListRuleSetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListRuleSetsResponse {
        return try await self.client.execute(
            operation: "ListRuleSets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Retrieves the list of tags (keys and values) assigned to the resource.
    @Sendable
    public func listTagsForResource(_ input: ListTagsForResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTagsForResourceResponse {
        return try await self.client.execute(
            operation: "ListTagsForResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// List traffic policy resources.
    @Sendable
    public func listTrafficPolicies(_ input: ListTrafficPoliciesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListTrafficPoliciesResponse {
        return try await self.client.execute(
            operation: "ListTrafficPolicies", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Initiates an export of emails from the specified archive.
    @Sendable
    public func startArchiveExport(_ input: StartArchiveExportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartArchiveExportResponse {
        return try await self.client.execute(
            operation: "StartArchiveExport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Initiates a search across emails in the specified archive.
    @Sendable
    public func startArchiveSearch(_ input: StartArchiveSearchRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartArchiveSearchResponse {
        return try await self.client.execute(
            operation: "StartArchiveSearch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops an in-progress export of emails from an archive.
    @Sendable
    public func stopArchiveExport(_ input: StopArchiveExportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopArchiveExportResponse {
        return try await self.client.execute(
            operation: "StopArchiveExport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Stops an in-progress archive search job.
    @Sendable
    public func stopArchiveSearch(_ input: StopArchiveSearchRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopArchiveSearchResponse {
        return try await self.client.execute(
            operation: "StopArchiveSearch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Adds one or more tags (keys and values) to a specified resource.
    @Sendable
    public func tagResource(_ input: TagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TagResourceResponse {
        return try await self.client.execute(
            operation: "TagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    ///  Remove one or more tags (keys and values) from a specified resource.
    @Sendable
    public func untagResource(_ input: UntagResourceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UntagResourceResponse {
        return try await self.client.execute(
            operation: "UntagResource", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the attributes of an existing email archive.
    @Sendable
    public func updateArchive(_ input: UpdateArchiveRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateArchiveResponse {
        return try await self.client.execute(
            operation: "UpdateArchive", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update attributes of a provisioned ingress endpoint resource.
    @Sendable
    public func updateIngressPoint(_ input: UpdateIngressPointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateIngressPointResponse {
        return try await self.client.execute(
            operation: "UpdateIngressPoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Updates the attributes of an existing relay resource.
    @Sendable
    public func updateRelay(_ input: UpdateRelayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRelayResponse {
        return try await self.client.execute(
            operation: "UpdateRelay", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// &gt;Update attributes of an already provisioned rule set.
    @Sendable
    public func updateRuleSet(_ input: UpdateRuleSetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateRuleSetResponse {
        return try await self.client.execute(
            operation: "UpdateRuleSet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }

    /// Update attributes of an already provisioned traffic policy resource.
    @Sendable
    public func updateTrafficPolicy(_ input: UpdateTrafficPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateTrafficPolicyResponse {
        return try await self.client.execute(
            operation: "UpdateTrafficPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
}

extension MailManager {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: MailManager, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension MailManager {
    /// Lists all Add On instances in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAddonInstancesPaginator(
        _ input: ListAddonInstancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAddonInstancesRequest, ListAddonInstancesResponse> {
        return .init(
            input: input,
            command: self.listAddonInstances,
            inputKey: \ListAddonInstancesRequest.nextToken,
            outputKey: \ListAddonInstancesResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all Add On subscriptions in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listAddonSubscriptionsPaginator(
        _ input: ListAddonSubscriptionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListAddonSubscriptionsRequest, ListAddonSubscriptionsResponse> {
        return .init(
            input: input,
            command: self.listAddonSubscriptions,
            inputKey: \ListAddonSubscriptionsRequest.nextToken,
            outputKey: \ListAddonSubscriptionsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of email archive export jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listArchiveExportsPaginator(
        _ input: ListArchiveExportsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListArchiveExportsRequest, ListArchiveExportsResponse> {
        return .init(
            input: input,
            command: self.listArchiveExports,
            inputKey: \ListArchiveExportsRequest.nextToken,
            outputKey: \ListArchiveExportsResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of email archive search jobs.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listArchiveSearchesPaginator(
        _ input: ListArchiveSearchesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListArchiveSearchesRequest, ListArchiveSearchesResponse> {
        return .init(
            input: input,
            command: self.listArchiveSearches,
            inputKey: \ListArchiveSearchesRequest.nextToken,
            outputKey: \ListArchiveSearchesResponse.nextToken,
            logger: logger
        )
    }

    /// Returns a list of all email archives in your account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listArchivesPaginator(
        _ input: ListArchivesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListArchivesRequest, ListArchivesResponse> {
        return .init(
            input: input,
            command: self.listArchives,
            inputKey: \ListArchivesRequest.nextToken,
            outputKey: \ListArchivesResponse.nextToken,
            logger: logger
        )
    }

    /// List all ingress endpoint resources.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listIngressPointsPaginator(
        _ input: ListIngressPointsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListIngressPointsRequest, ListIngressPointsResponse> {
        return .init(
            input: input,
            command: self.listIngressPoints,
            inputKey: \ListIngressPointsRequest.nextToken,
            outputKey: \ListIngressPointsResponse.nextToken,
            logger: logger
        )
    }

    /// Lists all the existing relay resources.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRelaysPaginator(
        _ input: ListRelaysRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRelaysRequest, ListRelaysResponse> {
        return .init(
            input: input,
            command: self.listRelays,
            inputKey: \ListRelaysRequest.nextToken,
            outputKey: \ListRelaysResponse.nextToken,
            logger: logger
        )
    }

    /// List rule sets for this account.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listRuleSetsPaginator(
        _ input: ListRuleSetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListRuleSetsRequest, ListRuleSetsResponse> {
        return .init(
            input: input,
            command: self.listRuleSets,
            inputKey: \ListRuleSetsRequest.nextToken,
            outputKey: \ListRuleSetsResponse.nextToken,
            logger: logger
        )
    }

    /// List traffic policy resources.
    /// Return PaginatorSequence for operation.
    ///
    /// - Parameters:
    ///   - input: Input for request
    ///   - logger: Logger used flot logging
    public func listTrafficPoliciesPaginator(
        _ input: ListTrafficPoliciesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListTrafficPoliciesRequest, ListTrafficPoliciesResponse> {
        return .init(
            input: input,
            command: self.listTrafficPolicies,
            inputKey: \ListTrafficPoliciesRequest.nextToken,
            outputKey: \ListTrafficPoliciesResponse.nextToken,
            logger: logger
        )
    }
}

extension MailManager.ListAddonInstancesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MailManager.ListAddonInstancesRequest {
        return .init(
            nextToken: token,
            pageSize: self.pageSize
        )
    }
}

extension MailManager.ListAddonSubscriptionsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MailManager.ListAddonSubscriptionsRequest {
        return .init(
            nextToken: token,
            pageSize: self.pageSize
        )
    }
}

extension MailManager.ListArchiveExportsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MailManager.ListArchiveExportsRequest {
        return .init(
            archiveId: self.archiveId,
            nextToken: token,
            pageSize: self.pageSize
        )
    }
}

extension MailManager.ListArchiveSearchesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MailManager.ListArchiveSearchesRequest {
        return .init(
            archiveId: self.archiveId,
            nextToken: token,
            pageSize: self.pageSize
        )
    }
}

extension MailManager.ListArchivesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MailManager.ListArchivesRequest {
        return .init(
            nextToken: token,
            pageSize: self.pageSize
        )
    }
}

extension MailManager.ListIngressPointsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MailManager.ListIngressPointsRequest {
        return .init(
            nextToken: token,
            pageSize: self.pageSize
        )
    }
}

extension MailManager.ListRelaysRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MailManager.ListRelaysRequest {
        return .init(
            nextToken: token,
            pageSize: self.pageSize
        )
    }
}

extension MailManager.ListRuleSetsRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MailManager.ListRuleSetsRequest {
        return .init(
            nextToken: token,
            pageSize: self.pageSize
        )
    }
}

extension MailManager.ListTrafficPoliciesRequest: AWSPaginateToken {
    public func usingPaginationToken(_ token: String) -> MailManager.ListTrafficPoliciesRequest {
        return .init(
            nextToken: token,
            pageSize: self.pageSize
        )
    }
}
