//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

import SotoCore

/// Error enum for MemoryDB
public struct MemoryDBErrorType: AWSErrorType {
    enum Code: String {
        case aCLAlreadyExistsFault = "ACLAlreadyExistsFault"
        case aCLNotFoundFault = "ACLNotFoundFault"
        case aCLQuotaExceededFault = "ACLQuotaExceededFault"
        case aPICallRateForCustomerExceededFault = "APICallRateForCustomerExceededFault"
        case clusterAlreadyExistsFault = "ClusterAlreadyExistsFault"
        case clusterNotFoundFault = "ClusterNotFoundFault"
        case clusterQuotaForCustomerExceededFault = "ClusterQuotaForCustomerExceededFault"
        case defaultUserRequired = "DefaultUserRequired"
        case duplicateUserNameFault = "DuplicateUserNameFault"
        case insufficientClusterCapacityFault = "InsufficientClusterCapacityFault"
        case invalidACLStateFault = "InvalidACLStateFault"
        case invalidARNFault = "InvalidARNFault"
        case invalidClusterStateFault = "InvalidClusterStateFault"
        case invalidCredentialsException = "InvalidCredentialsException"
        case invalidKMSKeyFault = "InvalidKMSKeyFault"
        case invalidNodeStateFault = "InvalidNodeStateFault"
        case invalidParameterCombinationException = "InvalidParameterCombinationException"
        case invalidParameterGroupStateFault = "InvalidParameterGroupStateFault"
        case invalidParameterValueException = "InvalidParameterValueException"
        case invalidSnapshotStateFault = "InvalidSnapshotStateFault"
        case invalidSubnet = "InvalidSubnet"
        case invalidUserStateFault = "InvalidUserStateFault"
        case invalidVPCNetworkStateFault = "InvalidVPCNetworkStateFault"
        case noOperationFault = "NoOperationFault"
        case nodeQuotaForClusterExceededFault = "NodeQuotaForClusterExceededFault"
        case nodeQuotaForCustomerExceededFault = "NodeQuotaForCustomerExceededFault"
        case parameterGroupAlreadyExistsFault = "ParameterGroupAlreadyExistsFault"
        case parameterGroupNotFoundFault = "ParameterGroupNotFoundFault"
        case parameterGroupQuotaExceededFault = "ParameterGroupQuotaExceededFault"
        case serviceLinkedRoleNotFoundFault = "ServiceLinkedRoleNotFoundFault"
        case serviceUpdateNotFoundFault = "ServiceUpdateNotFoundFault"
        case shardNotFoundFault = "ShardNotFoundFault"
        case shardsPerClusterQuotaExceededFault = "ShardsPerClusterQuotaExceededFault"
        case snapshotAlreadyExistsFault = "SnapshotAlreadyExistsFault"
        case snapshotNotFoundFault = "SnapshotNotFoundFault"
        case snapshotQuotaExceededFault = "SnapshotQuotaExceededFault"
        case subnetGroupAlreadyExistsFault = "SubnetGroupAlreadyExistsFault"
        case subnetGroupInUseFault = "SubnetGroupInUseFault"
        case subnetGroupNotFoundFault = "SubnetGroupNotFoundFault"
        case subnetGroupQuotaExceededFault = "SubnetGroupQuotaExceededFault"
        case subnetInUse = "SubnetInUse"
        case subnetNotAllowedFault = "SubnetNotAllowedFault"
        case subnetQuotaExceededFault = "SubnetQuotaExceededFault"
        case tagNotFoundFault = "TagNotFoundFault"
        case tagQuotaPerResourceExceeded = "TagQuotaPerResourceExceeded"
        case testFailoverNotAvailableFault = "TestFailoverNotAvailableFault"
        case userAlreadyExistsFault = "UserAlreadyExistsFault"
        case userNotFoundFault = "UserNotFoundFault"
        case userQuotaExceededFault = "UserQuotaExceededFault"
    }

    private let error: Code
    public let context: AWSErrorContext?

    /// initialize MemoryDB
    public init?(errorCode: String, context: AWSErrorContext) {
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.context = context
    }

    internal init(_ error: Code) {
        self.error = error
        self.context = nil
    }

    /// return error code string
    public var errorCode: String { self.error.rawValue }

    public static var aCLAlreadyExistsFault: Self { .init(.aCLAlreadyExistsFault) }
    public static var aCLNotFoundFault: Self { .init(.aCLNotFoundFault) }
    public static var aCLQuotaExceededFault: Self { .init(.aCLQuotaExceededFault) }
    public static var aPICallRateForCustomerExceededFault: Self { .init(.aPICallRateForCustomerExceededFault) }
    public static var clusterAlreadyExistsFault: Self { .init(.clusterAlreadyExistsFault) }
    public static var clusterNotFoundFault: Self { .init(.clusterNotFoundFault) }
    public static var clusterQuotaForCustomerExceededFault: Self { .init(.clusterQuotaForCustomerExceededFault) }
    public static var defaultUserRequired: Self { .init(.defaultUserRequired) }
    public static var duplicateUserNameFault: Self { .init(.duplicateUserNameFault) }
    public static var insufficientClusterCapacityFault: Self { .init(.insufficientClusterCapacityFault) }
    public static var invalidACLStateFault: Self { .init(.invalidACLStateFault) }
    public static var invalidARNFault: Self { .init(.invalidARNFault) }
    public static var invalidClusterStateFault: Self { .init(.invalidClusterStateFault) }
    public static var invalidCredentialsException: Self { .init(.invalidCredentialsException) }
    public static var invalidKMSKeyFault: Self { .init(.invalidKMSKeyFault) }
    public static var invalidNodeStateFault: Self { .init(.invalidNodeStateFault) }
    public static var invalidParameterCombinationException: Self { .init(.invalidParameterCombinationException) }
    public static var invalidParameterGroupStateFault: Self { .init(.invalidParameterGroupStateFault) }
    public static var invalidParameterValueException: Self { .init(.invalidParameterValueException) }
    public static var invalidSnapshotStateFault: Self { .init(.invalidSnapshotStateFault) }
    public static var invalidSubnet: Self { .init(.invalidSubnet) }
    public static var invalidUserStateFault: Self { .init(.invalidUserStateFault) }
    public static var invalidVPCNetworkStateFault: Self { .init(.invalidVPCNetworkStateFault) }
    public static var noOperationFault: Self { .init(.noOperationFault) }
    public static var nodeQuotaForClusterExceededFault: Self { .init(.nodeQuotaForClusterExceededFault) }
    public static var nodeQuotaForCustomerExceededFault: Self { .init(.nodeQuotaForCustomerExceededFault) }
    public static var parameterGroupAlreadyExistsFault: Self { .init(.parameterGroupAlreadyExistsFault) }
    public static var parameterGroupNotFoundFault: Self { .init(.parameterGroupNotFoundFault) }
    public static var parameterGroupQuotaExceededFault: Self { .init(.parameterGroupQuotaExceededFault) }
    public static var serviceLinkedRoleNotFoundFault: Self { .init(.serviceLinkedRoleNotFoundFault) }
    public static var serviceUpdateNotFoundFault: Self { .init(.serviceUpdateNotFoundFault) }
    public static var shardNotFoundFault: Self { .init(.shardNotFoundFault) }
    public static var shardsPerClusterQuotaExceededFault: Self { .init(.shardsPerClusterQuotaExceededFault) }
    public static var snapshotAlreadyExistsFault: Self { .init(.snapshotAlreadyExistsFault) }
    public static var snapshotNotFoundFault: Self { .init(.snapshotNotFoundFault) }
    public static var snapshotQuotaExceededFault: Self { .init(.snapshotQuotaExceededFault) }
    public static var subnetGroupAlreadyExistsFault: Self { .init(.subnetGroupAlreadyExistsFault) }
    public static var subnetGroupInUseFault: Self { .init(.subnetGroupInUseFault) }
    public static var subnetGroupNotFoundFault: Self { .init(.subnetGroupNotFoundFault) }
    public static var subnetGroupQuotaExceededFault: Self { .init(.subnetGroupQuotaExceededFault) }
    public static var subnetInUse: Self { .init(.subnetInUse) }
    public static var subnetNotAllowedFault: Self { .init(.subnetNotAllowedFault) }
    public static var subnetQuotaExceededFault: Self { .init(.subnetQuotaExceededFault) }
    public static var tagNotFoundFault: Self { .init(.tagNotFoundFault) }
    public static var tagQuotaPerResourceExceeded: Self { .init(.tagQuotaPerResourceExceeded) }
    public static var testFailoverNotAvailableFault: Self { .init(.testFailoverNotAvailableFault) }
    public static var userAlreadyExistsFault: Self { .init(.userAlreadyExistsFault) }
    public static var userNotFoundFault: Self { .init(.userNotFoundFault) }
    public static var userQuotaExceededFault: Self { .init(.userQuotaExceededFault) }
}

extension MemoryDBErrorType: Equatable {
    public static func == (lhs: MemoryDBErrorType, rhs: MemoryDBErrorType) -> Bool {
        lhs.error == rhs.error
    }
}

extension MemoryDBErrorType: CustomStringConvertible {
    public var description: String {
        return "\(self.error.rawValue): \(self.message ?? "")"
    }
}
