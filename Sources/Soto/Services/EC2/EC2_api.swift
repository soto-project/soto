//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2024 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-codegenerator.
// DO NOT EDIT.

#if os(Linux) && compiler(<5.10)
// swift-corelibs-foundation hasn't been updated with Sendable conformances
@preconcurrency import Foundation
#else
import Foundation
#endif
@_exported import SotoCore

/// Service object for interacting with AWS EC2 service.
///
/// Amazon Elastic Compute Cloud You can access the features of Amazon Elastic Compute Cloud (Amazon EC2) programmatically. For more information, see the Amazon EC2 Developer Guide.
public struct EC2: AWSService {
    // MARK: Member variables

    /// Client used for communication with AWS
    public let client: AWSClient
    /// Service configuration
    public let config: AWSServiceConfig

    // MARK: Initialization

    /// Initialize the EC2 client
    /// - parameters:
    ///     - client: AWSClient used to process requests
    ///     - region: Region of server you want to communicate with. This will override the partition parameter.
    ///     - partition: AWS partition where service resides, standard (.aws), china (.awscn), government (.awsusgov).
    ///     - endpoint: Custom endpoint URL to use instead of standard AWS servers
    ///     - middleware: Middleware chain used to edit requests before they are sent and responses before they are decoded 
    ///     - timeout: Timeout value for HTTP requests
    ///     - byteBufferAllocator: Allocator for ByteBuffers
    ///     - options: Service options
    public init(
        client: AWSClient,
        region: SotoCore.Region? = nil,
        partition: AWSPartition = .aws,
        endpoint: String? = nil,
        middleware: AWSMiddlewareProtocol? = nil,
        timeout: TimeAmount? = nil,
        byteBufferAllocator: ByteBufferAllocator = ByteBufferAllocator(),
        options: AWSServiceConfig.Options = []
    ) {
        self.client = client
        self.config = AWSServiceConfig(
            region: region,
            partition: region?.partition ?? partition,
            serviceName: "EC2",
            serviceIdentifier: "ec2",
            serviceProtocol: .ec2,
            apiVersion: "2016-11-15",
            endpoint: endpoint,
            serviceEndpoints: Self.serviceEndpoints,
            variantEndpoints: Self.variantEndpoints,
            xmlNamespace: "http://ec2.amazonaws.com/doc/2016-11-15",
            middleware: middleware,
            timeout: timeout,
            byteBufferAllocator: byteBufferAllocator,
            options: options
        )
    }


    /// custom endpoints for regions
    static var serviceEndpoints: [String: String] {[
        "us-gov-east-1": "ec2.us-gov-east-1.amazonaws.com",
        "us-gov-west-1": "ec2.us-gov-west-1.amazonaws.com"
    ]}


    /// FIPS and dualstack endpoints
    static var variantEndpoints: [EndpointVariantType: AWSServiceConfig.EndpointVariant] {[
        [.dualstack]: .init(endpoints: [
            "af-south-1": "ec2.af-south-1.api.aws",
            "ap-east-1": "ec2.ap-east-1.api.aws",
            "ap-northeast-1": "ec2.ap-northeast-1.api.aws",
            "ap-northeast-2": "ec2.ap-northeast-2.api.aws",
            "ap-south-1": "ec2.ap-south-1.api.aws",
            "ap-southeast-1": "ec2.ap-southeast-1.api.aws",
            "ap-southeast-2": "ec2.ap-southeast-2.api.aws",
            "ca-central-1": "ec2.ca-central-1.api.aws",
            "eu-central-1": "ec2.eu-central-1.api.aws",
            "eu-north-1": "ec2.eu-north-1.api.aws",
            "eu-south-1": "ec2.eu-south-1.api.aws",
            "eu-west-1": "ec2.eu-west-1.api.aws",
            "eu-west-2": "ec2.eu-west-2.api.aws",
            "eu-west-3": "ec2.eu-west-3.api.aws",
            "me-south-1": "ec2.me-south-1.api.aws",
            "sa-east-1": "ec2.sa-east-1.api.aws",
            "us-east-1": "ec2.us-east-1.api.aws",
            "us-east-2": "ec2.us-east-2.api.aws",
            "us-gov-east-1": "ec2.us-gov-east-1.api.aws",
            "us-gov-west-1": "ec2.us-gov-west-1.api.aws",
            "us-west-1": "ec2.us-west-1.api.aws",
            "us-west-2": "ec2.us-west-2.api.aws"
        ]),
        [.fips]: .init(endpoints: [
            "ca-central-1": "ec2-fips.ca-central-1.amazonaws.com",
            "ca-west-1": "ec2-fips.ca-west-1.amazonaws.com",
            "us-east-1": "ec2-fips.us-east-1.amazonaws.com",
            "us-east-2": "ec2-fips.us-east-2.amazonaws.com",
            "us-west-1": "ec2-fips.us-west-1.amazonaws.com",
            "us-west-2": "ec2-fips.us-west-2.amazonaws.com"
        ])
    ]}

    // MARK: API Calls

    /// Accepts an Elastic IP address transfer. For more information, see Accept a transferred Elastic IP address in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func acceptAddressTransfer(_ input: AcceptAddressTransferRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptAddressTransferResult {
        try await self.client.execute(
            operation: "AcceptAddressTransfer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts an Elastic IP address transfer. For more information, see Accept a transferred Elastic IP address in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - address: The Elastic IP address you are accepting for transfer.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications:  tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptAddressTransfer(
        address: String? = nil,
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptAddressTransferResult {
        let input = AcceptAddressTransferRequest(
            address: address, 
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications
        )
        return try await self.acceptAddressTransfer(input, logger: logger)
    }

    /// Accepts a request to assign billing of the available capacity of a shared Capacity
    /// 			Reservation to your account. For more information, see  Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    @Sendable
    @inlinable
    public func acceptCapacityReservationBillingOwnership(_ input: AcceptCapacityReservationBillingOwnershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptCapacityReservationBillingOwnershipResult {
        try await self.client.execute(
            operation: "AcceptCapacityReservationBillingOwnership", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a request to assign billing of the available capacity of a shared Capacity
    /// 			Reservation to your account. For more information, see  Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    ///
    /// Parameters:
    ///   - capacityReservationId: The ID of the Capacity Reservation for which to accept the request.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptCapacityReservationBillingOwnership(
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptCapacityReservationBillingOwnershipResult {
        let input = AcceptCapacityReservationBillingOwnershipRequest(
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun
        )
        return try await self.acceptCapacityReservationBillingOwnership(input, logger: logger)
    }

    /// Accepts the Convertible Reserved Instance exchange quote described in the GetReservedInstancesExchangeQuote call.
    @Sendable
    @inlinable
    public func acceptReservedInstancesExchangeQuote(_ input: AcceptReservedInstancesExchangeQuoteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptReservedInstancesExchangeQuoteResult {
        try await self.client.execute(
            operation: "AcceptReservedInstancesExchangeQuote", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts the Convertible Reserved Instance exchange quote described in the GetReservedInstancesExchangeQuote call.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - reservedInstanceIds: The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.
    ///   - targetConfigurations: The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptReservedInstancesExchangeQuote(
        dryRun: Bool? = nil,
        reservedInstanceIds: [String]? = nil,
        targetConfigurations: [TargetConfigurationRequest]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptReservedInstancesExchangeQuoteResult {
        let input = AcceptReservedInstancesExchangeQuoteRequest(
            dryRun: dryRun, 
            reservedInstanceIds: reservedInstanceIds, 
            targetConfigurations: targetConfigurations
        )
        return try await self.acceptReservedInstancesExchangeQuote(input, logger: logger)
    }

    /// Accepts a request to associate subnets with a transit gateway multicast domain.
    @Sendable
    @inlinable
    public func acceptTransitGatewayMulticastDomainAssociations(_ input: AcceptTransitGatewayMulticastDomainAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptTransitGatewayMulticastDomainAssociationsResult {
        try await self.client.execute(
            operation: "AcceptTransitGatewayMulticastDomainAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a request to associate subnets with a transit gateway multicast domain.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - subnetIds: The IDs of the subnets to associate with the transit gateway multicast domain.
    ///   - transitGatewayAttachmentId: The ID of the transit gateway attachment.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptTransitGatewayMulticastDomainAssociations(
        dryRun: Bool? = nil,
        subnetIds: [String]? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptTransitGatewayMulticastDomainAssociationsResult {
        let input = AcceptTransitGatewayMulticastDomainAssociationsRequest(
            dryRun: dryRun, 
            subnetIds: subnetIds, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.acceptTransitGatewayMulticastDomainAssociations(input, logger: logger)
    }

    /// Accepts a transit gateway peering attachment request. The peering attachment must be in the pendingAcceptance state.
    @Sendable
    @inlinable
    public func acceptTransitGatewayPeeringAttachment(_ input: AcceptTransitGatewayPeeringAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptTransitGatewayPeeringAttachmentResult {
        try await self.client.execute(
            operation: "AcceptTransitGatewayPeeringAttachment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a transit gateway peering attachment request. The peering attachment must be in the pendingAcceptance state.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the transit gateway attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptTransitGatewayPeeringAttachment(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptTransitGatewayPeeringAttachmentResult {
        let input = AcceptTransitGatewayPeeringAttachmentRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.acceptTransitGatewayPeeringAttachment(input, logger: logger)
    }

    /// Accepts a request to attach a VPC to a transit gateway. The VPC attachment must be in the pendingAcceptance state. Use DescribeTransitGatewayVpcAttachments to view your pending VPC attachment requests. Use RejectTransitGatewayVpcAttachment to reject a VPC attachment request.
    @Sendable
    @inlinable
    public func acceptTransitGatewayVpcAttachment(_ input: AcceptTransitGatewayVpcAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptTransitGatewayVpcAttachmentResult {
        try await self.client.execute(
            operation: "AcceptTransitGatewayVpcAttachment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts a request to attach a VPC to a transit gateway. The VPC attachment must be in the pendingAcceptance state. Use DescribeTransitGatewayVpcAttachments to view your pending VPC attachment requests. Use RejectTransitGatewayVpcAttachment to reject a VPC attachment request.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptTransitGatewayVpcAttachment(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptTransitGatewayVpcAttachmentResult {
        let input = AcceptTransitGatewayVpcAttachmentRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.acceptTransitGatewayVpcAttachment(input, logger: logger)
    }

    /// Accepts connection requests to your VPC endpoint service.
    @Sendable
    @inlinable
    public func acceptVpcEndpointConnections(_ input: AcceptVpcEndpointConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptVpcEndpointConnectionsResult {
        try await self.client.execute(
            operation: "AcceptVpcEndpointConnections", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accepts connection requests to your VPC endpoint service.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - serviceId: The ID of the VPC endpoint service.
    ///   - vpcEndpointIds: The IDs of the interface VPC endpoints.
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptVpcEndpointConnections(
        dryRun: Bool? = nil,
        serviceId: String? = nil,
        vpcEndpointIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptVpcEndpointConnectionsResult {
        let input = AcceptVpcEndpointConnectionsRequest(
            dryRun: dryRun, 
            serviceId: serviceId, 
            vpcEndpointIds: vpcEndpointIds
        )
        return try await self.acceptVpcEndpointConnections(input, logger: logger)
    }

    /// Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the pending-acceptance state, and you must be the owner of the peer VPC. Use DescribeVpcPeeringConnections to view your outstanding VPC peering connection requests. For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.
    @Sendable
    @inlinable
    public func acceptVpcPeeringConnection(_ input: AcceptVpcPeeringConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AcceptVpcPeeringConnectionResult {
        try await self.client.execute(
            operation: "AcceptVpcPeeringConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the pending-acceptance state, and you must be the owner of the peer VPC. Use DescribeVpcPeeringConnections to view your outstanding VPC peering connection requests. For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - vpcPeeringConnectionId: The ID of the VPC peering connection. You must specify this parameter in the
    ///   - logger: Logger use during operation
    @inlinable
    public func acceptVpcPeeringConnection(
        dryRun: Bool? = nil,
        vpcPeeringConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AcceptVpcPeeringConnectionResult {
        let input = AcceptVpcPeeringConnectionRequest(
            dryRun: dryRun, 
            vpcPeeringConnectionId: vpcPeeringConnectionId
        )
        return try await self.acceptVpcPeeringConnection(input, logger: logger)
    }

    /// Advertises an IPv4 or IPv6 address range that is provisioned for use with your Amazon Web Services resources through  bring your own IP addresses (BYOIP). You can perform this operation at most once every 10 seconds, even if you specify different  address ranges each time. We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from Amazon Web Services. To minimize down time, you can configure your Amazon Web Services resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current  location and start advertising it through Amazon Web Services. It can take a few minutes before traffic to the specified addresses starts routing to Amazon Web Services because of BGP propagation delays. To stop advertising the BYOIP CIDR, use WithdrawByoipCidr.
    @Sendable
    @inlinable
    public func advertiseByoipCidr(_ input: AdvertiseByoipCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AdvertiseByoipCidrResult {
        try await self.client.execute(
            operation: "AdvertiseByoipCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Advertises an IPv4 or IPv6 address range that is provisioned for use with your Amazon Web Services resources through  bring your own IP addresses (BYOIP). You can perform this operation at most once every 10 seconds, even if you specify different  address ranges each time. We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from Amazon Web Services. To minimize down time, you can configure your Amazon Web Services resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current  location and start advertising it through Amazon Web Services. It can take a few minutes before traffic to the specified addresses starts routing to Amazon Web Services because of BGP propagation delays. To stop advertising the BYOIP CIDR, use WithdrawByoipCidr.
    ///
    /// Parameters:
    ///   - asn: The public 2-byte or 4-byte ASN that you want to advertise.
    ///   - cidr: The address range, in CIDR notation. This must be the exact range that you provisioned.  You can't advertise only a portion of the provisioned range.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkBorderGroup: If you have Local Zones enabled, you can choose a network border group for Local Zones when you provision and advertise a BYOIPv4 CIDR. Choose the network border group carefully as the EIP and the Amazon Web Services resource it is associated with must reside in the same network border group. You can provision BYOIP address ranges to and advertise them in the following Local Zone network border groups:   us-east-1-dfw-2   us-west-2-lax-1   us-west-2-phx-2    You cannot provision or advertise BYOIPv6 address ranges in Local Zones at this time.
    ///   - logger: Logger use during operation
    @inlinable
    public func advertiseByoipCidr(
        asn: String? = nil,
        cidr: String? = nil,
        dryRun: Bool? = nil,
        networkBorderGroup: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AdvertiseByoipCidrResult {
        let input = AdvertiseByoipCidrRequest(
            asn: asn, 
            cidr: cidr, 
            dryRun: dryRun, 
            networkBorderGroup: networkBorderGroup
        )
        return try await self.advertiseByoipCidr(input, logger: logger)
    }

    /// Allocates an Elastic IP address to your Amazon Web Services account. After you allocate the Elastic IP address you can associate   it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address  pool and can be allocated to a different Amazon Web Services account. You can allocate an Elastic IP address from an address pool owned by Amazon Web Services or from an address pool created  from a public IPv4 address range that you have brought to Amazon Web Services for use with your Amazon Web Services resources using bring your own  IP addresses (BYOIP). For more information, see Bring Your Own IP Addresses (BYOIP) in the Amazon EC2 User Guide. If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another Amazon Web Services account. To attempt to recover an Elastic IP address that you released, specify it in this operation. For more information, see Elastic IP Addresses in the Amazon EC2 User Guide. You can allocate a carrier IP address which is a public IP address from a telecommunication carrier,  to a network interface which resides in a subnet in a Wavelength Zone (for example an EC2 instance).
    @Sendable
    @inlinable
    public func allocateAddress(_ input: AllocateAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AllocateAddressResult {
        try await self.client.execute(
            operation: "AllocateAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allocates an Elastic IP address to your Amazon Web Services account. After you allocate the Elastic IP address you can associate   it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address  pool and can be allocated to a different Amazon Web Services account. You can allocate an Elastic IP address from an address pool owned by Amazon Web Services or from an address pool created  from a public IPv4 address range that you have brought to Amazon Web Services for use with your Amazon Web Services resources using bring your own  IP addresses (BYOIP). For more information, see Bring Your Own IP Addresses (BYOIP) in the Amazon EC2 User Guide. If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another Amazon Web Services account. To attempt to recover an Elastic IP address that you released, specify it in this operation. For more information, see Elastic IP Addresses in the Amazon EC2 User Guide. You can allocate a carrier IP address which is a public IP address from a telecommunication carrier,  to a network interface which resides in a subnet in a Wavelength Zone (for example an EC2 instance).
    ///
    /// Parameters:
    ///   - address: The Elastic IP address to recover or an IPv4 address from an address pool.
    ///   - customerOwnedIpv4Pool: The ID of a customer-owned address pool. Use this parameter to let Amazon EC2  select an address from the address pool. Alternatively, specify a specific  address from the address pool.
    ///   - domain: The network (vpc).
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamPoolId: The ID of an IPAM pool which has an Amazon-provided or BYOIP public IPv4 CIDR provisioned to it. For more information, see Allocate sequential Elastic IP addresses from an IPAM pool in the Amazon VPC IPAM User Guide.
    ///   - networkBorderGroup:  A unique set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses. Use this parameter to limit the IP address to this location. IP addresses cannot move between network border groups.
    ///   - publicIpv4Pool: The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the Address parameter instead.
    ///   - tagSpecifications: The tags to assign to the Elastic IP address.
    ///   - logger: Logger use during operation
    @inlinable
    public func allocateAddress(
        address: String? = nil,
        customerOwnedIpv4Pool: String? = nil,
        domain: DomainType? = nil,
        dryRun: Bool? = nil,
        ipamPoolId: String? = nil,
        networkBorderGroup: String? = nil,
        publicIpv4Pool: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AllocateAddressResult {
        let input = AllocateAddressRequest(
            address: address, 
            customerOwnedIpv4Pool: customerOwnedIpv4Pool, 
            domain: domain, 
            dryRun: dryRun, 
            ipamPoolId: ipamPoolId, 
            networkBorderGroup: networkBorderGroup, 
            publicIpv4Pool: publicIpv4Pool, 
            tagSpecifications: tagSpecifications
        )
        return try await self.allocateAddress(input, logger: logger)
    }

    /// Allocates a Dedicated Host to your account. At a minimum, specify the supported instance type or instance family, the Availability Zone in which to allocate the host, and the number of hosts to allocate.
    @Sendable
    @inlinable
    public func allocateHosts(_ input: AllocateHostsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AllocateHostsResult {
        try await self.client.execute(
            operation: "AllocateHosts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allocates a Dedicated Host to your account. At a minimum, specify the supported instance type or instance family, the Availability Zone in which to allocate the host, and the number of hosts to allocate.
    ///
    /// Parameters:
    ///   - assetIds: The IDs of the Outpost hardware assets on which to allocate the Dedicated Hosts. Targeting  specific hardware assets on an Outpost can help to minimize latency between your workloads.  This parameter is supported only if you specify OutpostArn.  If you are allocating the Dedicated Hosts in a Region, omit this parameter.   If you specify this parameter, you can omit Quantity.  In this case, Amazon EC2 allocates a Dedicated Host on each specified hardware  asset.   If you specify both AssetIds and  Quantity, then the value for  Quantity must be equal to the number of asset IDs  specified.
    ///   - autoPlacement: Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. For more information, see  Understanding auto-placement and affinity in the Amazon EC2 User Guide. Default: off
    ///   - availabilityZone: The Availability Zone in which to allocate the Dedicated Host.
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
    ///   - hostMaintenance: Indicates whether to enable or disable host maintenance for the Dedicated Host. For more information, see Host maintenance in the Amazon EC2 User Guide.
    ///   - hostRecovery: Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default. For more information, see  Host recovery in the Amazon EC2 User Guide. Default: off
    ///   - instanceFamily: Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family. If you want the Dedicated Hosts to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request.
    ///   - instanceType: Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only. If you want the Dedicated Hosts to support multiple instance types in a specific instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request.
    ///   - outpostArn: The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which to allocate the Dedicated Host. If you specify OutpostArn, you can  optionally specify AssetIds. If you are allocating the Dedicated Host in a Region, omit this parameter.
    ///   - quantity: The number of Dedicated Hosts to allocate to your account with these parameters. If you are  allocating the Dedicated Hosts on an Outpost, and you specify AssetIds,  you can omit this parameter. In this case, Amazon EC2 allocates a Dedicated Host on each  specified hardware asset. If you specify both AssetIds and  Quantity, then the value that you specify for  Quantity must be equal to the number of asset IDs specified.
    ///   - tagSpecifications: The tags to apply to the Dedicated Host during creation.
    ///   - logger: Logger use during operation
    @inlinable
    public func allocateHosts(
        assetIds: [String]? = nil,
        autoPlacement: AutoPlacement? = nil,
        availabilityZone: String? = nil,
        clientToken: String? = nil,
        hostMaintenance: HostMaintenance? = nil,
        hostRecovery: HostRecovery? = nil,
        instanceFamily: String? = nil,
        instanceType: String? = nil,
        outpostArn: String? = nil,
        quantity: Int? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AllocateHostsResult {
        let input = AllocateHostsRequest(
            assetIds: assetIds, 
            autoPlacement: autoPlacement, 
            availabilityZone: availabilityZone, 
            clientToken: clientToken, 
            hostMaintenance: hostMaintenance, 
            hostRecovery: hostRecovery, 
            instanceFamily: instanceFamily, 
            instanceType: instanceType, 
            outpostArn: outpostArn, 
            quantity: quantity, 
            tagSpecifications: tagSpecifications
        )
        return try await self.allocateHosts(input, logger: logger)
    }

    /// Allocate a CIDR from an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations. In IPAM, an allocation is a CIDR assignment from an IPAM pool to another IPAM pool or to a resource. For more information, see Allocate CIDRs in the Amazon VPC IPAM User Guide.  This action creates an allocation with strong consistency. The returned CIDR will not overlap with any other allocations from the same pool.
    @Sendable
    @inlinable
    public func allocateIpamPoolCidr(_ input: AllocateIpamPoolCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AllocateIpamPoolCidrResult {
        try await self.client.execute(
            operation: "AllocateIpamPoolCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allocate a CIDR from an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations. In IPAM, an allocation is a CIDR assignment from an IPAM pool to another IPAM pool or to a resource. For more information, see Allocate CIDRs in the Amazon VPC IPAM User Guide.  This action creates an allocation with strong consistency. The returned CIDR will not overlap with any other allocations from the same pool.
    ///
    /// Parameters:
    ///   - allowedCidrs: Include a particular CIDR range that can be returned by the pool. Allowed CIDRs are only allowed if using netmask length for allocation.
    ///   - cidr: The CIDR you would like to allocate from the IPAM pool. Note the following:   If there is no DefaultNetmaskLength allocation rule set on the pool, you must specify either the NetmaskLength or the CIDR.   If the DefaultNetmaskLength allocation rule is set on the pool, you can specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength allocation rule will be ignored.   Possible values: Any available IPv4 or IPv6 CIDR.
    ///   - clientToken: A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - description: A description for the allocation.
    ///   - disallowedCidrs: Exclude a particular CIDR range from being returned by the pool. Disallowed CIDRs are only allowed if using netmask length for allocation.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamPoolId: The ID of the IPAM pool from which you would like to allocate a CIDR.
    ///   - netmaskLength: The netmask length of the CIDR you would like to allocate from the IPAM pool. Note the following:   If there is no DefaultNetmaskLength allocation rule set on the pool, you must specify either the NetmaskLength or the CIDR.   If the DefaultNetmaskLength allocation rule is set on the pool, you can specify either the NetmaskLength or the CIDR and the DefaultNetmaskLength allocation rule will be ignored.   Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are 0 - 128.
    ///   - previewNextCidr: A preview of the next available CIDR in a pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func allocateIpamPoolCidr(
        allowedCidrs: [String]? = nil,
        cidr: String? = nil,
        clientToken: String? = AllocateIpamPoolCidrRequest.idempotencyToken(),
        description: String? = nil,
        disallowedCidrs: [String]? = nil,
        dryRun: Bool? = nil,
        ipamPoolId: String? = nil,
        netmaskLength: Int? = nil,
        previewNextCidr: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AllocateIpamPoolCidrResult {
        let input = AllocateIpamPoolCidrRequest(
            allowedCidrs: allowedCidrs, 
            cidr: cidr, 
            clientToken: clientToken, 
            description: description, 
            disallowedCidrs: disallowedCidrs, 
            dryRun: dryRun, 
            ipamPoolId: ipamPoolId, 
            netmaskLength: netmaskLength, 
            previewNextCidr: previewNextCidr
        )
        return try await self.allocateIpamPoolCidr(input, logger: logger)
    }

    /// Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing
    /// 			security groups with the specified security groups.
    @Sendable
    @inlinable
    public func applySecurityGroupsToClientVpnTargetNetwork(_ input: ApplySecurityGroupsToClientVpnTargetNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ApplySecurityGroupsToClientVpnTargetNetworkResult {
        try await self.client.execute(
            operation: "ApplySecurityGroupsToClientVpnTargetNetwork", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing
    /// 			security groups with the specified security groups.
    ///
    /// Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - securityGroupIds: The IDs of the security groups to apply to the associated target network. Up to 5 security groups can
    ///   - vpcId: The ID of the VPC in which the associated target network is located.
    ///   - logger: Logger use during operation
    @inlinable
    public func applySecurityGroupsToClientVpnTargetNetwork(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        securityGroupIds: [String]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ApplySecurityGroupsToClientVpnTargetNetworkResult {
        let input = ApplySecurityGroupsToClientVpnTargetNetworkRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            securityGroupIds: securityGroupIds, 
            vpcId: vpcId
        )
        return try await self.applySecurityGroupsToClientVpnTargetNetwork(input, logger: logger)
    }

    /// Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. You must specify either the IPv6 addresses or the IPv6 address count in the request.  You can optionally use Prefix Delegation on the network interface. You must specify either the IPV6 Prefix Delegation prefixes, or the IPv6 Prefix Delegation count. For information, see  Assigning prefixes to network interfaces in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func assignIpv6Addresses(_ input: AssignIpv6AddressesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssignIpv6AddressesResult {
        try await self.client.execute(
            operation: "AssignIpv6Addresses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet's IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. You must specify either the IPv6 addresses or the IPv6 address count in the request.  You can optionally use Prefix Delegation on the network interface. You must specify either the IPV6 Prefix Delegation prefixes, or the IPv6 Prefix Delegation count. For information, see  Assigning prefixes to network interfaces in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - ipv6AddressCount: The number of additional IPv6 addresses to assign to the network interface.  		The specified number of IPv6 addresses are assigned in addition to the  		existing IPv6 addresses that are already assigned to the network interface.  		Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You  		can't use this option if specifying specific IPv6 addresses.
    ///   - ipv6Addresses: The IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.
    ///   - ipv6PrefixCount: The number of IPv6 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the Ipv6Prefixes option.
    ///   - ipv6Prefixes: One or more IPv6 prefixes assigned to the network interface. You cannot use this option if you use the Ipv6PrefixCount option.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - logger: Logger use during operation
    @inlinable
    public func assignIpv6Addresses(
        ipv6AddressCount: Int? = nil,
        ipv6Addresses: [String]? = nil,
        ipv6PrefixCount: Int? = nil,
        ipv6Prefixes: [String]? = nil,
        networkInterfaceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssignIpv6AddressesResult {
        let input = AssignIpv6AddressesRequest(
            ipv6AddressCount: ipv6AddressCount, 
            ipv6Addresses: ipv6Addresses, 
            ipv6PrefixCount: ipv6PrefixCount, 
            ipv6Prefixes: ipv6Prefixes, 
            networkInterfaceId: networkInterfaceId
        )
        return try await self.assignIpv6Addresses(input, logger: logger)
    }

    /// Assigns one or more secondary private IP addresses to the specified network interface. You can specify one or more specific secondary IP addresses, or you can specify the number  of secondary IP addresses to be automatically assigned within the subnet's CIDR block range.  The number of secondary IP addresses that you can assign to an instance varies by instance type. For more information about Elastic IP addresses, see Elastic IP Addresses in the Amazon EC2 User Guide. When you move a secondary private IP address to another network interface, any Elastic IP address  that is associated with the IP address is also moved. Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check network/interfaces/macs/mac/local-ipv4s in the instance metadata to confirm that the remapping is complete. You must specify either the IP addresses or the IP address count in the request. You can optionally use Prefix Delegation on the network interface. You must specify either the IPv4 Prefix Delegation prefixes, or the IPv4 Prefix Delegation count. For information, see  Assigning prefixes to network interfaces in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func assignPrivateIpAddresses(_ input: AssignPrivateIpAddressesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssignPrivateIpAddressesResult {
        try await self.client.execute(
            operation: "AssignPrivateIpAddresses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns one or more secondary private IP addresses to the specified network interface. You can specify one or more specific secondary IP addresses, or you can specify the number  of secondary IP addresses to be automatically assigned within the subnet's CIDR block range.  The number of secondary IP addresses that you can assign to an instance varies by instance type. For more information about Elastic IP addresses, see Elastic IP Addresses in the Amazon EC2 User Guide. When you move a secondary private IP address to another network interface, any Elastic IP address  that is associated with the IP address is also moved. Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check network/interfaces/macs/mac/local-ipv4s in the instance metadata to confirm that the remapping is complete. You must specify either the IP addresses or the IP address count in the request. You can optionally use Prefix Delegation on the network interface. You must specify either the IPv4 Prefix Delegation prefixes, or the IPv4 Prefix Delegation count. For information, see  Assigning prefixes to network interfaces in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - allowReassignment: Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
    ///   - ipv4PrefixCount: The number of IPv4 prefixes that Amazon Web Services automatically assigns to the network interface. You cannot use this option if you use the Ipv4 Prefixes option.
    ///   - ipv4Prefixes: One or more IPv4 prefixes assigned to the network interface. You cannot use this option if you use the Ipv4PrefixCount option.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - privateIpAddresses: The IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses. If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.
    ///   - secondaryPrivateIpAddressCount: The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
    ///   - logger: Logger use during operation
    @inlinable
    public func assignPrivateIpAddresses(
        allowReassignment: Bool? = nil,
        ipv4PrefixCount: Int? = nil,
        ipv4Prefixes: [String]? = nil,
        networkInterfaceId: String? = nil,
        privateIpAddresses: [String]? = nil,
        secondaryPrivateIpAddressCount: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssignPrivateIpAddressesResult {
        let input = AssignPrivateIpAddressesRequest(
            allowReassignment: allowReassignment, 
            ipv4PrefixCount: ipv4PrefixCount, 
            ipv4Prefixes: ipv4Prefixes, 
            networkInterfaceId: networkInterfaceId, 
            privateIpAddresses: privateIpAddresses, 
            secondaryPrivateIpAddressCount: secondaryPrivateIpAddressCount
        )
        return try await self.assignPrivateIpAddresses(input, logger: logger)
    }

    /// Assigns private IPv4 addresses to a private NAT gateway. For more information, see  Work with NAT gateways in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func assignPrivateNatGatewayAddress(_ input: AssignPrivateNatGatewayAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssignPrivateNatGatewayAddressResult {
        try await self.client.execute(
            operation: "AssignPrivateNatGatewayAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Assigns private IPv4 addresses to a private NAT gateway. For more information, see  Work with NAT gateways in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - natGatewayId: The ID of the NAT gateway.
    ///   - privateIpAddressCount: The number of private IP addresses to assign to the NAT gateway. You can't specify this parameter when also specifying private IP addresses.
    ///   - privateIpAddresses: The private IPv4 addresses you want to assign to the private NAT gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func assignPrivateNatGatewayAddress(
        dryRun: Bool? = nil,
        natGatewayId: String? = nil,
        privateIpAddressCount: Int? = nil,
        privateIpAddresses: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssignPrivateNatGatewayAddressResult {
        let input = AssignPrivateNatGatewayAddressRequest(
            dryRun: dryRun, 
            natGatewayId: natGatewayId, 
            privateIpAddressCount: privateIpAddressCount, 
            privateIpAddresses: privateIpAddresses
        )
        return try await self.assignPrivateNatGatewayAddress(input, logger: logger)
    }

    /// Associates an Elastic IP address, or carrier IP address (for instances that are in subnets in Wavelength Zones) with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account. If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account. [Subnets in Wavelength Zones] You can associate an IP address from the telecommunication carrier to the instance or network interface.  You cannot associate an Elastic IP address with an interface in a different network border group.  This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the Elastic IP Addresses section of Amazon EC2 Pricing.
    @Sendable
    @inlinable
    public func associateAddress(_ input: AssociateAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateAddressResult {
        try await self.client.execute(
            operation: "AssociateAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates an Elastic IP address, or carrier IP address (for instances that are in subnets in Wavelength Zones) with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account. If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account. [Subnets in Wavelength Zones] You can associate an IP address from the telecommunication carrier to the instance or network interface.  You cannot associate an Elastic IP address with an interface in a different network border group.  This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the Elastic IP Addresses section of Amazon EC2 Pricing.
    ///
    /// Parameters:
    ///   - allocationId: The allocation ID. This is required.
    ///   - allowReassociation: Reassociation is automatic, but you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance. The instance must have exactly one attached network interface. You can specify either the instance ID or the network interface ID, but not both.
    ///   - networkInterfaceId: The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID. You can specify either the instance ID or the network interface ID, but not both.
    ///   - privateIpAddress: The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
    ///   - publicIp: Deprecated.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateAddress(
        allocationId: String? = nil,
        allowReassociation: Bool? = nil,
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        networkInterfaceId: String? = nil,
        privateIpAddress: String? = nil,
        publicIp: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateAddressResult {
        let input = AssociateAddressRequest(
            allocationId: allocationId, 
            allowReassociation: allowReassociation, 
            dryRun: dryRun, 
            instanceId: instanceId, 
            networkInterfaceId: networkInterfaceId, 
            privateIpAddress: privateIpAddress, 
            publicIp: publicIp
        )
        return try await self.associateAddress(input, logger: logger)
    }

    /// Initiates a request to assign billing of the unused capacity of a shared Capacity
    /// 			Reservation to a consumer account that is consolidated under the same Amazon Web Services
    /// 			organizations payer account. For more information, see Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    @Sendable
    @inlinable
    public func associateCapacityReservationBillingOwner(_ input: AssociateCapacityReservationBillingOwnerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateCapacityReservationBillingOwnerResult {
        try await self.client.execute(
            operation: "AssociateCapacityReservationBillingOwner", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Initiates a request to assign billing of the unused capacity of a shared Capacity
    /// 			Reservation to a consumer account that is consolidated under the same Amazon Web Services
    /// 			organizations payer account. For more information, see Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    ///
    /// Parameters:
    ///   - capacityReservationId: The ID of the Capacity Reservation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - unusedReservationBillingOwnerId: The ID of the consumer account to which to assign billing.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateCapacityReservationBillingOwner(
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        unusedReservationBillingOwnerId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateCapacityReservationBillingOwnerResult {
        let input = AssociateCapacityReservationBillingOwnerRequest(
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun, 
            unusedReservationBillingOwnerId: unusedReservationBillingOwnerId
        )
        return try await self.associateCapacityReservationBillingOwner(input, logger: logger)
    }

    /// Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy. If you specified a VPC when you created the Client VPN endpoint or if you have previous subnet associations, the specified subnet must be in the same VPC. To specify a subnet that's in a different VPC, you must first modify the Client VPN endpoint (ModifyClientVpnEndpoint) and change the VPC that's associated with it.
    @Sendable
    @inlinable
    public func associateClientVpnTargetNetwork(_ input: AssociateClientVpnTargetNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateClientVpnTargetNetworkResult {
        try await self.client.execute(
            operation: "AssociateClientVpnTargetNetwork", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy. If you specified a VPC when you created the Client VPN endpoint or if you have previous subnet associations, the specified subnet must be in the same VPC. To specify a subnet that's in a different VPC, you must first modify the Client VPN endpoint (ModifyClientVpnEndpoint) and change the VPC that's associated with it.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - subnetId: The ID of the subnet to associate with the Client VPN endpoint.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateClientVpnTargetNetwork(
        clientToken: String? = AssociateClientVpnTargetNetworkRequest.idempotencyToken(),
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        subnetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateClientVpnTargetNetworkResult {
        let input = AssociateClientVpnTargetNetworkRequest(
            clientToken: clientToken, 
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            subnetId: subnetId
        )
        return try await self.associateClientVpnTargetNetwork(input, logger: logger)
    }

    /// Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC. After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance. For more information, see DHCP option sets in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func associateDhcpOptions(_ input: AssociateDhcpOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AssociateDhcpOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a set of DHCP options (that you've previously created) with the specified VPC, or associates no DHCP options with the VPC. After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don't need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance. For more information, see DHCP option sets in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dhcpOptionsId: The ID of the DHCP options set, or default to associate  no DHCP options with the VPC.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateDhcpOptions(
        dhcpOptionsId: String? = nil,
        dryRun: Bool? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AssociateDhcpOptionsRequest(
            dhcpOptionsId: dhcpOptionsId, 
            dryRun: dryRun, 
            vpcId: vpcId
        )
        return try await self.associateDhcpOptions(input, logger: logger)
    }

    /// Associates an Identity and Access Management (IAM) role with an Certificate Manager (ACM) certificate.
    /// 			This enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave. For more
    /// 			information, see Certificate Manager for Nitro Enclaves in the Amazon Web Services Nitro Enclaves
    /// 					User Guide. When the IAM role is associated with the ACM certificate, the certificate, certificate chain, and encrypted
    /// 			private key are placed in an Amazon S3 location that only the associated IAM role can access. The private key of the certificate
    /// 			is encrypted with an Amazon Web Services managed key that has an attached attestation-based key policy. To enable the IAM role to access the Amazon S3 object, you must grant it permission to call s3:GetObject
    /// 			on the Amazon S3 bucket returned by the command. To enable the IAM role to access the KMS key,
    /// 			you must grant it permission to call kms:Decrypt on the KMS key returned by the command.
    /// 			For more information, see
    /// 				Grant the role permission to access the certificate and encryption key in the
    /// 			Amazon Web Services Nitro Enclaves User Guide.
    @Sendable
    @inlinable
    public func associateEnclaveCertificateIamRole(_ input: AssociateEnclaveCertificateIamRoleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateEnclaveCertificateIamRoleResult {
        try await self.client.execute(
            operation: "AssociateEnclaveCertificateIamRole", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates an Identity and Access Management (IAM) role with an Certificate Manager (ACM) certificate.
    /// 			This enables the certificate to be used by the ACM for Nitro Enclaves application inside an enclave. For more
    /// 			information, see Certificate Manager for Nitro Enclaves in the Amazon Web Services Nitro Enclaves
    /// 					User Guide. When the IAM role is associated with the ACM certificate, the certificate, certificate chain, and encrypted
    /// 			private key are placed in an Amazon S3 location that only the associated IAM role can access. The private key of the certificate
    /// 			is encrypted with an Amazon Web Services managed key that has an attached attestation-based key policy. To enable the IAM role to access the Amazon S3 object, you must grant it permission to call s3:GetObject
    /// 			on the Amazon S3 bucket returned by the command. To enable the IAM role to access the KMS key,
    /// 			you must grant it permission to call kms:Decrypt on the KMS key returned by the command.
    /// 			For more information, see
    /// 				Grant the role permission to access the certificate and encryption key in the
    /// 			Amazon Web Services Nitro Enclaves User Guide.
    ///
    /// Parameters:
    ///   - certificateArn: The ARN of the ACM certificate with which to associate the IAM role.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - roleArn: The ARN of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM
    ///   - logger: Logger use during operation
    @inlinable
    public func associateEnclaveCertificateIamRole(
        certificateArn: String? = nil,
        dryRun: Bool? = nil,
        roleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateEnclaveCertificateIamRoleResult {
        let input = AssociateEnclaveCertificateIamRoleRequest(
            certificateArn: certificateArn, 
            dryRun: dryRun, 
            roleArn: roleArn
        )
        return try await self.associateEnclaveCertificateIamRole(input, logger: logger)
    }

    /// Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.
    @Sendable
    @inlinable
    public func associateIamInstanceProfile(_ input: AssociateIamInstanceProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateIamInstanceProfileResult {
        try await self.client.execute(
            operation: "AssociateIamInstanceProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.
    ///
    /// Parameters:
    ///   - iamInstanceProfile: The IAM instance profile.
    ///   - instanceId: The ID of the instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateIamInstanceProfile(
        iamInstanceProfile: IamInstanceProfileSpecification? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateIamInstanceProfileResult {
        let input = AssociateIamInstanceProfileRequest(
            iamInstanceProfile: iamInstanceProfile, 
            instanceId: instanceId
        )
        return try await self.associateIamInstanceProfile(input, logger: logger)
    }

    /// Associates one or more targets with an event window. Only one type of target (instance IDs, Dedicated Host IDs, or tags) can be specified with an event window. For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func associateInstanceEventWindow(_ input: AssociateInstanceEventWindowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateInstanceEventWindowResult {
        try await self.client.execute(
            operation: "AssociateInstanceEventWindow", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates one or more targets with an event window. Only one type of target (instance IDs, Dedicated Host IDs, or tags) can be specified with an event window. For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - associationTarget: One or more targets associated with the specified event window.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceEventWindowId: The ID of the event window.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateInstanceEventWindow(
        associationTarget: InstanceEventWindowAssociationRequest? = nil,
        dryRun: Bool? = nil,
        instanceEventWindowId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateInstanceEventWindowResult {
        let input = AssociateInstanceEventWindowRequest(
            associationTarget: associationTarget, 
            dryRun: dryRun, 
            instanceEventWindowId: instanceEventWindowId
        )
        return try await self.associateInstanceEventWindow(input, logger: logger)
    }

    /// Associates your Autonomous System Number (ASN) with a BYOIP CIDR that you own in the same Amazon Web Services Region.  For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide. After the association succeeds, the ASN is eligible for  advertisement. You can view the association with DescribeByoipCidrs. You can advertise the CIDR with AdvertiseByoipCidr.
    @Sendable
    @inlinable
    public func associateIpamByoasn(_ input: AssociateIpamByoasnRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateIpamByoasnResult {
        try await self.client.execute(
            operation: "AssociateIpamByoasn", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates your Autonomous System Number (ASN) with a BYOIP CIDR that you own in the same Amazon Web Services Region.  For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide. After the association succeeds, the ASN is eligible for  advertisement. You can view the association with DescribeByoipCidrs. You can advertise the CIDR with AdvertiseByoipCidr.
    ///
    /// Parameters:
    ///   - asn: A public 2-byte or 4-byte ASN.
    ///   - cidr: The BYOIP CIDR you want to associate with an ASN.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateIpamByoasn(
        asn: String? = nil,
        cidr: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateIpamByoasnResult {
        let input = AssociateIpamByoasnRequest(
            asn: asn, 
            cidr: cidr, 
            dryRun: dryRun
        )
        return try await self.associateIpamByoasn(input, logger: logger)
    }

    /// Associates an IPAM resource discovery with an Amazon VPC IPAM. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    @Sendable
    @inlinable
    public func associateIpamResourceDiscovery(_ input: AssociateIpamResourceDiscoveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateIpamResourceDiscoveryResult {
        try await self.client.execute(
            operation: "AssociateIpamResourceDiscovery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates an IPAM resource discovery with an Amazon VPC IPAM. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    ///
    /// Parameters:
    ///   - clientToken: A client token.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamId: An IPAM ID.
    ///   - ipamResourceDiscoveryId: A resource discovery ID.
    ///   - tagSpecifications: Tag specifications.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateIpamResourceDiscovery(
        clientToken: String? = AssociateIpamResourceDiscoveryRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        ipamId: String? = nil,
        ipamResourceDiscoveryId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateIpamResourceDiscoveryResult {
        let input = AssociateIpamResourceDiscoveryRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            ipamId: ipamId, 
            ipamResourceDiscoveryId: ipamResourceDiscoveryId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.associateIpamResourceDiscovery(input, logger: logger)
    }

    /// Associates Elastic IP addresses (EIPs) and private IPv4 addresses with a public NAT gateway. For more information,  see Work with NAT gateways in the Amazon VPC User Guide. By default, you can associate up to 2 Elastic IP addresses per public NAT gateway. You can increase the limit by requesting a quota adjustment.  For more information, see Elastic IP address quotas in the Amazon VPC User Guide.  When you associate an EIP or secondary EIPs with a public NAT gateway, the network border group of the EIPs  must match the network border group of the Availability Zone (AZ) that the public NAT gateway is in. If it's not the same,  the EIP will fail to associate. You can see the network border group for the subnet's AZ by viewing the details of the subnet. Similarly, you can view the network border group of an EIP by viewing the details of the EIP address. For more information  about network border groups and EIPs, see Allocate an Elastic IP address in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func associateNatGatewayAddress(_ input: AssociateNatGatewayAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateNatGatewayAddressResult {
        try await self.client.execute(
            operation: "AssociateNatGatewayAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates Elastic IP addresses (EIPs) and private IPv4 addresses with a public NAT gateway. For more information,  see Work with NAT gateways in the Amazon VPC User Guide. By default, you can associate up to 2 Elastic IP addresses per public NAT gateway. You can increase the limit by requesting a quota adjustment.  For more information, see Elastic IP address quotas in the Amazon VPC User Guide.  When you associate an EIP or secondary EIPs with a public NAT gateway, the network border group of the EIPs  must match the network border group of the Availability Zone (AZ) that the public NAT gateway is in. If it's not the same,  the EIP will fail to associate. You can see the network border group for the subnet's AZ by viewing the details of the subnet. Similarly, you can view the network border group of an EIP by viewing the details of the EIP address. For more information  about network border groups and EIPs, see Allocate an Elastic IP address in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - allocationIds: The allocation IDs of EIPs that you want to associate with your NAT gateway.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - natGatewayId: The ID of the NAT gateway.
    ///   - privateIpAddresses: The private IPv4 addresses that you want to assign to the NAT gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateNatGatewayAddress(
        allocationIds: [String]? = nil,
        dryRun: Bool? = nil,
        natGatewayId: String? = nil,
        privateIpAddresses: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateNatGatewayAddressResult {
        let input = AssociateNatGatewayAddressRequest(
            allocationIds: allocationIds, 
            dryRun: dryRun, 
            natGatewayId: natGatewayId, 
            privateIpAddresses: privateIpAddresses
        )
        return try await self.associateNatGatewayAddress(input, logger: logger)
    }

    /// Associates a subnet in your VPC or an internet gateway or virtual private gateway attached to your VPC with a route table in your VPC. This association causes traffic from the subnet or gateway to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table later. A route table can be associated with multiple subnets. For more information, see Route tables in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func associateRouteTable(_ input: AssociateRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateRouteTableResult {
        try await self.client.execute(
            operation: "AssociateRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a subnet in your VPC or an internet gateway or virtual private gateway attached to your VPC with a route table in your VPC. This association causes traffic from the subnet or gateway to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table later. A route table can be associated with multiple subnets. For more information, see Route tables in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - gatewayId: The ID of the internet gateway or virtual private gateway.
    ///   - routeTableId: The ID of the route table.
    ///   - subnetId: The ID of the subnet.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateRouteTable(
        dryRun: Bool? = nil,
        gatewayId: String? = nil,
        routeTableId: String? = nil,
        subnetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateRouteTableResult {
        let input = AssociateRouteTableRequest(
            dryRun: dryRun, 
            gatewayId: gatewayId, 
            routeTableId: routeTableId, 
            subnetId: subnetId
        )
        return try await self.associateRouteTable(input, logger: logger)
    }

    /// Associates a security group with another VPC in the same Region. This enables you to use the same security group with network interfaces and instances in the specified VPC.    The VPC you want to associate the security group with must be in the same Region.   You can associate the security group with another VPC if your account owns the VPC or if the VPC was shared with you.   You must own the security group and the VPC that it was created in.   You cannot use this feature with default security groups.   You cannot use this feature with the default VPC.
    @Sendable
    @inlinable
    public func associateSecurityGroupVpc(_ input: AssociateSecurityGroupVpcRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateSecurityGroupVpcResult {
        try await self.client.execute(
            operation: "AssociateSecurityGroupVpc", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a security group with another VPC in the same Region. This enables you to use the same security group with network interfaces and instances in the specified VPC.    The VPC you want to associate the security group with must be in the same Region.   You can associate the security group with another VPC if your account owns the VPC or if the VPC was shared with you.   You must own the security group and the VPC that it was created in.   You cannot use this feature with default security groups.   You cannot use this feature with the default VPC.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupId: A security group ID.
    ///   - vpcId: A VPC ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateSecurityGroupVpc(
        dryRun: Bool? = nil,
        groupId: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateSecurityGroupVpcResult {
        let input = AssociateSecurityGroupVpcRequest(
            dryRun: dryRun, 
            groupId: groupId, 
            vpcId: vpcId
        )
        return try await self.associateSecurityGroupVpc(input, logger: logger)
    }

    /// Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet.
    @Sendable
    @inlinable
    public func associateSubnetCidrBlock(_ input: AssociateSubnetCidrBlockRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateSubnetCidrBlockResult {
        try await self.client.execute(
            operation: "AssociateSubnetCidrBlock", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet.
    ///
    /// Parameters:
    ///   - ipv6CidrBlock: The IPv6 CIDR block for your subnet.
    ///   - ipv6IpamPoolId: An IPv6 IPAM pool ID.
    ///   - ipv6NetmaskLength: An IPv6 netmask length.
    ///   - subnetId: The ID of your subnet.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateSubnetCidrBlock(
        ipv6CidrBlock: String? = nil,
        ipv6IpamPoolId: String? = nil,
        ipv6NetmaskLength: Int? = nil,
        subnetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateSubnetCidrBlockResult {
        let input = AssociateSubnetCidrBlockRequest(
            ipv6CidrBlock: ipv6CidrBlock, 
            ipv6IpamPoolId: ipv6IpamPoolId, 
            ipv6NetmaskLength: ipv6NetmaskLength, 
            subnetId: subnetId
        )
        return try await self.associateSubnetCidrBlock(input, logger: logger)
    }

    /// Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain. The transit gateway attachment must be in the available state before you can add a resource. Use DescribeTransitGatewayAttachments  to see the state of the attachment.
    @Sendable
    @inlinable
    public func associateTransitGatewayMulticastDomain(_ input: AssociateTransitGatewayMulticastDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateTransitGatewayMulticastDomainResult {
        try await self.client.execute(
            operation: "AssociateTransitGatewayMulticastDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain. The transit gateway attachment must be in the available state before you can add a resource. Use DescribeTransitGatewayAttachments  to see the state of the attachment.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - subnetIds: The IDs of the subnets to associate with the transit gateway multicast domain.
    ///   - transitGatewayAttachmentId: The ID of the transit gateway attachment to associate with the transit gateway multicast domain.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateTransitGatewayMulticastDomain(
        dryRun: Bool? = nil,
        subnetIds: [String]? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateTransitGatewayMulticastDomainResult {
        let input = AssociateTransitGatewayMulticastDomainRequest(
            dryRun: dryRun, 
            subnetIds: subnetIds, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.associateTransitGatewayMulticastDomain(input, logger: logger)
    }

    /// Associates the specified transit gateway attachment with a transit gateway policy table.
    @Sendable
    @inlinable
    public func associateTransitGatewayPolicyTable(_ input: AssociateTransitGatewayPolicyTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateTransitGatewayPolicyTableResult {
        try await self.client.execute(
            operation: "AssociateTransitGatewayPolicyTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified transit gateway attachment with a transit gateway policy table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the transit gateway attachment to associate with the policy table.
    ///   - transitGatewayPolicyTableId: The ID of the transit gateway policy table to associate with the transit gateway attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateTransitGatewayPolicyTable(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayPolicyTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateTransitGatewayPolicyTableResult {
        let input = AssociateTransitGatewayPolicyTableRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayPolicyTableId: transitGatewayPolicyTableId
        )
        return try await self.associateTransitGatewayPolicyTable(input, logger: logger)
    }

    /// Associates the specified attachment with the specified transit gateway route table. You can  associate only one route table with an attachment.
    @Sendable
    @inlinable
    public func associateTransitGatewayRouteTable(_ input: AssociateTransitGatewayRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateTransitGatewayRouteTableResult {
        try await self.client.execute(
            operation: "AssociateTransitGatewayRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified attachment with the specified transit gateway route table. You can  associate only one route table with an attachment.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateTransitGatewayRouteTable(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateTransitGatewayRouteTableResult {
        let input = AssociateTransitGatewayRouteTableRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.associateTransitGatewayRouteTable(input, logger: logger)
    }

    /// Associates a branch network interface with a trunk network interface. Before you create the association, use CreateNetworkInterface command and set the interface type to trunk. You must also create a network interface for  each branch network interface that you want to associate with the trunk  network interface.
    @Sendable
    @inlinable
    public func associateTrunkInterface(_ input: AssociateTrunkInterfaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateTrunkInterfaceResult {
        try await self.client.execute(
            operation: "AssociateTrunkInterface", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a branch network interface with a trunk network interface. Before you create the association, use CreateNetworkInterface command and set the interface type to trunk. You must also create a network interface for  each branch network interface that you want to associate with the trunk  network interface.
    ///
    /// Parameters:
    ///   - branchInterfaceId: The ID of the branch network interface.
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - greKey: The application key. This applies to the GRE protocol.
    ///   - trunkInterfaceId: The ID of the trunk network interface.
    ///   - vlanId: The ID of the VLAN. This applies to the VLAN protocol.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateTrunkInterface(
        branchInterfaceId: String? = nil,
        clientToken: String? = AssociateTrunkInterfaceRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        greKey: Int? = nil,
        trunkInterfaceId: String? = nil,
        vlanId: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateTrunkInterfaceResult {
        let input = AssociateTrunkInterfaceRequest(
            branchInterfaceId: branchInterfaceId, 
            clientToken: clientToken, 
            dryRun: dryRun, 
            greKey: greKey, 
            trunkInterfaceId: trunkInterfaceId, 
            vlanId: vlanId
        )
        return try await self.associateTrunkInterface(input, logger: logger)
    }

    /// Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (BYOIP). You must specify one of the following in the request: an IPv4 CIDR block, an IPv6 pool, or an Amazon-provided IPv6 CIDR block. For more information about associating CIDR blocks with your VPC and applicable restrictions, see IP addressing for your VPCs and subnets  in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func associateVpcCidrBlock(_ input: AssociateVpcCidrBlockRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AssociateVpcCidrBlockResult {
        try await self.client.execute(
            operation: "AssociateVpcCidrBlock", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, an Amazon-provided IPv6 CIDR block, or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (BYOIP). You must specify one of the following in the request: an IPv4 CIDR block, an IPv6 pool, or an Amazon-provided IPv6 CIDR block. For more information about associating CIDR blocks with your VPC and applicable restrictions, see IP addressing for your VPCs and subnets  in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - amazonProvidedIpv6CidrBlock: Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses or the size of the CIDR block.
    ///   - cidrBlock: An IPv4 CIDR block to associate with the VPC.
    ///   - ipv4IpamPoolId: Associate a CIDR allocated from an IPv4 IPAM pool to a VPC. For more information about Amazon VPC IP Address Manager (IPAM), see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///   - ipv4NetmaskLength: The netmask length of the IPv4 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///   - ipv6CidrBlock: An IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
    ///   - ipv6CidrBlockNetworkBorderGroup: The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the CIDR block to this location. You must set AmazonProvidedIpv6CidrBlock to true to use this parameter. You can have one IPv6 CIDR block association per network border group.
    ///   - ipv6IpamPoolId: Associates a CIDR allocated from an IPv6 IPAM pool to a VPC. For more information about Amazon VPC IP Address Manager (IPAM), see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///   - ipv6NetmaskLength: The netmask length of the IPv6 CIDR you would like to associate from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///   - ipv6Pool: The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func associateVpcCidrBlock(
        amazonProvidedIpv6CidrBlock: Bool? = nil,
        cidrBlock: String? = nil,
        ipv4IpamPoolId: String? = nil,
        ipv4NetmaskLength: Int? = nil,
        ipv6CidrBlock: String? = nil,
        ipv6CidrBlockNetworkBorderGroup: String? = nil,
        ipv6IpamPoolId: String? = nil,
        ipv6NetmaskLength: Int? = nil,
        ipv6Pool: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AssociateVpcCidrBlockResult {
        let input = AssociateVpcCidrBlockRequest(
            amazonProvidedIpv6CidrBlock: amazonProvidedIpv6CidrBlock, 
            cidrBlock: cidrBlock, 
            ipv4IpamPoolId: ipv4IpamPoolId, 
            ipv4NetmaskLength: ipv4NetmaskLength, 
            ipv6CidrBlock: ipv6CidrBlock, 
            ipv6CidrBlockNetworkBorderGroup: ipv6CidrBlockNetworkBorderGroup, 
            ipv6IpamPoolId: ipv6IpamPoolId, 
            ipv6NetmaskLength: ipv6NetmaskLength, 
            ipv6Pool: ipv6Pool, 
            vpcId: vpcId
        )
        return try await self.associateVpcCidrBlock(input, logger: logger)
    }

    ///  This action is deprecated.  Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC
    /// 			security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You
    /// 			can only link an instance that's in the running state. An instance is
    /// 			automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when
    /// 			you restart it. After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again. Linking your instance to a VPC is sometimes referred to as attaching your instance.
    @Sendable
    @inlinable
    public func attachClassicLinkVpc(_ input: AttachClassicLinkVpcRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AttachClassicLinkVpcResult {
        try await self.client.execute(
            operation: "AttachClassicLinkVpc", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC
    /// 			security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You
    /// 			can only link an instance that's in the running state. An instance is
    /// 			automatically unlinked from a VPC when it's stopped - you can link it to the VPC again when
    /// 			you restart it. After you've linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again. Linking your instance to a VPC is sometimes referred to as attaching your instance.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groups: The IDs of the security groups. You cannot specify security groups from a different VPC.
    ///   - instanceId: The ID of the EC2-Classic instance.
    ///   - vpcId: The ID of the ClassicLink-enabled VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func attachClassicLinkVpc(
        dryRun: Bool? = nil,
        groups: [String]? = nil,
        instanceId: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AttachClassicLinkVpcResult {
        let input = AttachClassicLinkVpcRequest(
            dryRun: dryRun, 
            groups: groups, 
            instanceId: instanceId, 
            vpcId: vpcId
        )
        return try await self.attachClassicLinkVpc(input, logger: logger)
    }

    /// Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity
    /// 		        between the internet and the VPC. For more information, see Internet gateways in the
    /// 		        Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func attachInternetGateway(_ input: AttachInternetGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "AttachInternetGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity
    /// 		        between the internet and the VPC. For more information, see Internet gateways in the
    /// 		        Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - internetGatewayId: The ID of the internet gateway.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func attachInternetGateway(
        dryRun: Bool? = nil,
        internetGatewayId: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = AttachInternetGatewayRequest(
            dryRun: dryRun, 
            internetGatewayId: internetGatewayId, 
            vpcId: vpcId
        )
        return try await self.attachInternetGateway(input, logger: logger)
    }

    /// Attaches a network interface to an instance.
    @Sendable
    @inlinable
    public func attachNetworkInterface(_ input: AttachNetworkInterfaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AttachNetworkInterfaceResult {
        try await self.client.execute(
            operation: "AttachNetworkInterface", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attaches a network interface to an instance.
    ///
    /// Parameters:
    ///   - deviceIndex: The index of the device for the network interface attachment.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - enaSrdSpecification: Configures ENA Express for the network interface that this action attaches to the instance.
    ///   - instanceId: The ID of the instance.
    ///   - networkCardIndex: The index of the network card. Some instance types support multiple network cards.  The primary network interface must be assigned to network card index 0.  The default is network card index 0.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - logger: Logger use during operation
    @inlinable
    public func attachNetworkInterface(
        deviceIndex: Int? = nil,
        dryRun: Bool? = nil,
        enaSrdSpecification: EnaSrdSpecification? = nil,
        instanceId: String? = nil,
        networkCardIndex: Int? = nil,
        networkInterfaceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AttachNetworkInterfaceResult {
        let input = AttachNetworkInterfaceRequest(
            deviceIndex: deviceIndex, 
            dryRun: dryRun, 
            enaSrdSpecification: enaSrdSpecification, 
            instanceId: instanceId, 
            networkCardIndex: networkCardIndex, 
            networkInterfaceId: networkInterfaceId
        )
        return try await self.attachNetworkInterface(input, logger: logger)
    }

    /// Attaches the specified Amazon Web Services Verified Access trust provider to the specified Amazon Web Services Verified Access instance.
    @Sendable
    @inlinable
    public func attachVerifiedAccessTrustProvider(_ input: AttachVerifiedAccessTrustProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AttachVerifiedAccessTrustProviderResult {
        try await self.client.execute(
            operation: "AttachVerifiedAccessTrustProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attaches the specified Amazon Web Services Verified Access trust provider to the specified Amazon Web Services Verified Access instance.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - verifiedAccessTrustProviderId: The ID of the Verified Access trust provider.
    ///   - logger: Logger use during operation
    @inlinable
    public func attachVerifiedAccessTrustProvider(
        clientToken: String? = AttachVerifiedAccessTrustProviderRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        verifiedAccessInstanceId: String? = nil,
        verifiedAccessTrustProviderId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AttachVerifiedAccessTrustProviderResult {
        let input = AttachVerifiedAccessTrustProviderRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            verifiedAccessInstanceId: verifiedAccessInstanceId, 
            verifiedAccessTrustProviderId: verifiedAccessTrustProviderId
        )
        return try await self.attachVerifiedAccessTrustProvider(input, logger: logger)
    }

    /// Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name. Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see Amazon EBS encryption in the Amazon EBS User Guide. After you attach an EBS volume, you must make it available. For more information, see  Make an EBS volume available for use. If a volume has an Amazon Web Services Marketplace product code:   The volume can be attached only to a stopped instance.   Amazon Web Services Marketplace product codes are copied from the volume to the instance.   You must be subscribed to the product.   The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.   For more information, see Attach an Amazon EBS volume to an instance in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func attachVolume(_ input: AttachVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> VolumeAttachment {
        try await self.client.execute(
            operation: "AttachVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name. Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see Amazon EBS encryption in the Amazon EBS User Guide. After you attach an EBS volume, you must make it available. For more information, see  Make an EBS volume available for use. If a volume has an Amazon Web Services Marketplace product code:   The volume can be attached only to a stopped instance.   Amazon Web Services Marketplace product codes are copied from the volume to the instance.   You must be subscribed to the product.   The instance type and operating system of the instance must support the product. For example, you can't detach a volume from a Windows instance and attach it to a Linux instance.   For more information, see Attach an Amazon EBS volume to an instance in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - device: The device name (for example, /dev/sdh or xvdh).
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance.
    ///   - volumeId: The ID of the EBS volume. The volume and instance must be within the same Availability Zone.
    ///   - logger: Logger use during operation
    @inlinable
    public func attachVolume(
        device: String? = nil,
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        volumeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> VolumeAttachment {
        let input = AttachVolumeRequest(
            device: device, 
            dryRun: dryRun, 
            instanceId: instanceId, 
            volumeId: volumeId
        )
        return try await self.attachVolume(input, logger: logger)
    }

    /// Attaches an available virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    @Sendable
    @inlinable
    public func attachVpnGateway(_ input: AttachVpnGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AttachVpnGatewayResult {
        try await self.client.execute(
            operation: "AttachVpnGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attaches an available virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - vpcId: The ID of the VPC.
    ///   - vpnGatewayId: The ID of the virtual private gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func attachVpnGateway(
        dryRun: Bool? = nil,
        vpcId: String? = nil,
        vpnGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AttachVpnGatewayResult {
        let input = AttachVpnGatewayRequest(
            dryRun: dryRun, 
            vpcId: vpcId, 
            vpnGatewayId: vpnGatewayId
        )
        return try await self.attachVpnGateway(input, logger: logger)
    }

    /// Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as
    /// 			firewall rules that grant access to networks. You must configure ingress authorization rules to
    /// 			enable clients to access resources in Amazon Web Services or on-premises networks.
    @Sendable
    @inlinable
    public func authorizeClientVpnIngress(_ input: AuthorizeClientVpnIngressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AuthorizeClientVpnIngressResult {
        try await self.client.execute(
            operation: "AuthorizeClientVpnIngress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as
    /// 			firewall rules that grant access to networks. You must configure ingress authorization rules to
    /// 			enable clients to access resources in Amazon Web Services or on-premises networks.
    ///
    /// Parameters:
    ///   - accessGroupId: The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if AuthorizeAllGroups is false or not specified.
    ///   - authorizeAllGroups: Indicates whether to grant access to all clients. Specify true to grant all clients who successfully establish a VPN connection access to the network. Must be set to true if AccessGroupId is not specified.
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - description: A brief description of the authorization rule.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - targetNetworkCidr: The IPv4 address range, in CIDR notation, of the network for which access is being authorized.
    ///   - logger: Logger use during operation
    @inlinable
    public func authorizeClientVpnIngress(
        accessGroupId: String? = nil,
        authorizeAllGroups: Bool? = nil,
        clientToken: String? = AuthorizeClientVpnIngressRequest.idempotencyToken(),
        clientVpnEndpointId: String? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        targetNetworkCidr: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AuthorizeClientVpnIngressResult {
        let input = AuthorizeClientVpnIngressRequest(
            accessGroupId: accessGroupId, 
            authorizeAllGroups: authorizeAllGroups, 
            clientToken: clientToken, 
            clientVpnEndpointId: clientVpnEndpointId, 
            description: description, 
            dryRun: dryRun, 
            targetNetworkCidr: targetNetworkCidr
        )
        return try await self.authorizeClientVpnIngress(input, logger: logger)
    }

    /// Adds the specified outbound (egress) rules to a security group. An outbound rule permits instances to send traffic to the specified IPv4 or IPv6  address ranges, the IP address ranges specified by a prefix list, or the instances  that are associated with a source security group. For more information, see Security group rules. You must specify exactly one of the following destinations: an IPv4 or IPv6 address range,  a prefix list, or a security group. You must specify a protocol for each rule (for example, TCP).  If the protocol is TCP or UDP, you must also specify a port or port range. If the protocol is  ICMP or ICMPv6, you must also specify the ICMP type and code. Rule changes are propagated to instances associated with the security group as quickly  as possible. However, a small delay might occur. For examples of rules that you can add to security groups for specific access scenarios,  see Security group rules for different use cases in the Amazon EC2 User Guide. For information about security group quotas, see Amazon VPC quotas in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func authorizeSecurityGroupEgress(_ input: AuthorizeSecurityGroupEgressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AuthorizeSecurityGroupEgressResult {
        try await self.client.execute(
            operation: "AuthorizeSecurityGroupEgress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds the specified outbound (egress) rules to a security group. An outbound rule permits instances to send traffic to the specified IPv4 or IPv6  address ranges, the IP address ranges specified by a prefix list, or the instances  that are associated with a source security group. For more information, see Security group rules. You must specify exactly one of the following destinations: an IPv4 or IPv6 address range,  a prefix list, or a security group. You must specify a protocol for each rule (for example, TCP).  If the protocol is TCP or UDP, you must also specify a port or port range. If the protocol is  ICMP or ICMPv6, you must also specify the ICMP type and code. Rule changes are propagated to instances associated with the security group as quickly  as possible. However, a small delay might occur. For examples of rules that you can add to security groups for specific access scenarios,  see Security group rules for different use cases in the Amazon EC2 User Guide. For information about security group quotas, see Amazon VPC quotas in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - cidrIp: Not supported. Use IP permissions instead.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fromPort: Not supported. Use IP permissions instead.
    ///   - groupId: The ID of the security group.
    ///   - ipPermissions: The permissions for the security group rules.
    ///   - ipProtocol: Not supported. Use IP permissions instead.
    ///   - sourceSecurityGroupName: Not supported. Use IP permissions instead.
    ///   - sourceSecurityGroupOwnerId: Not supported. Use IP permissions instead.
    ///   - tagSpecifications: The tags applied to the security group rule.
    ///   - toPort: Not supported. Use IP permissions instead.
    ///   - logger: Logger use during operation
    @inlinable
    public func authorizeSecurityGroupEgress(
        cidrIp: String? = nil,
        dryRun: Bool? = nil,
        fromPort: Int? = nil,
        groupId: String? = nil,
        ipPermissions: [IpPermission]? = nil,
        ipProtocol: String? = nil,
        sourceSecurityGroupName: String? = nil,
        sourceSecurityGroupOwnerId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        toPort: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AuthorizeSecurityGroupEgressResult {
        let input = AuthorizeSecurityGroupEgressRequest(
            cidrIp: cidrIp, 
            dryRun: dryRun, 
            fromPort: fromPort, 
            groupId: groupId, 
            ipPermissions: ipPermissions, 
            ipProtocol: ipProtocol, 
            sourceSecurityGroupName: sourceSecurityGroupName, 
            sourceSecurityGroupOwnerId: sourceSecurityGroupOwnerId, 
            tagSpecifications: tagSpecifications, 
            toPort: toPort
        )
        return try await self.authorizeSecurityGroupEgress(input, logger: logger)
    }

    /// Adds the specified inbound (ingress) rules to a security group. An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6  address range, the IP address ranges that are specified by a prefix list, or the instances  that are associated with a destination security group. For more information, see Security group rules. You must specify exactly one of the following sources: an IPv4 or IPv6 address range, a prefix list, or a security group. You must specify a protocol for each rule (for example, TCP).  If the protocol is TCP or UDP, you must also specify a port or port range. If the protocol is  ICMP or ICMPv6, you must also specify the ICMP/ICMPv6 type and code. Rule changes are propagated to instances associated with the security group as quickly  as possible. However, a small delay might occur. For examples of rules that you can add to security groups for specific access scenarios,  see Security group rules for different use cases in the Amazon EC2 User Guide. For more information about security group quotas, see Amazon VPC quotas in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func authorizeSecurityGroupIngress(_ input: AuthorizeSecurityGroupIngressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> AuthorizeSecurityGroupIngressResult {
        try await self.client.execute(
            operation: "AuthorizeSecurityGroupIngress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds the specified inbound (ingress) rules to a security group. An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6  address range, the IP address ranges that are specified by a prefix list, or the instances  that are associated with a destination security group. For more information, see Security group rules. You must specify exactly one of the following sources: an IPv4 or IPv6 address range, a prefix list, or a security group. You must specify a protocol for each rule (for example, TCP).  If the protocol is TCP or UDP, you must also specify a port or port range. If the protocol is  ICMP or ICMPv6, you must also specify the ICMP/ICMPv6 type and code. Rule changes are propagated to instances associated with the security group as quickly  as possible. However, a small delay might occur. For examples of rules that you can add to security groups for specific access scenarios,  see Security group rules for different use cases in the Amazon EC2 User Guide. For more information about security group quotas, see Amazon VPC quotas in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - cidrIp: The IPv4 address range, in CIDR format. To specify an IPv6 address range, use IP permissions instead. To specify multiple rules and descriptions for the rules, use IP permissions instead.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fromPort: If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP, this is the ICMP type or -1 (all ICMP types). To specify multiple rules and descriptions for the rules, use IP permissions instead.
    ///   - groupId: The ID of the security group.
    ///   - groupName: [Default VPC] The name of the security group. For security groups for a default VPC you can specify either the ID or the name of the security group. For security groups for a nondefault VPC, you must specify the ID of the security group.
    ///   - ipPermissions: The permissions for the security group rules.
    ///   - ipProtocol: The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). To specify all protocols, use -1. To specify icmpv6, use IP permissions instead. If you specify a protocol other than one of the supported values, traffic is allowed  on all ports, regardless of any ports that you specify. To specify multiple rules and descriptions for the rules, use IP permissions instead.
    ///   - sourceSecurityGroupName: [Default VPC] The name of the source security group. The rule grants full ICMP, UDP, and TCP access. To create a rule with a specific protocol and port range, specify a set of IP permissions instead.
    ///   - sourceSecurityGroupOwnerId: The Amazon Web Services account ID for the source security group, if the source security group is  in a different account. The rule grants full ICMP, UDP, and TCP access. To create a rule with a specific protocol  and port range, use IP permissions instead.
    ///   - tagSpecifications: The tags applied to the security group rule.
    ///   - toPort: If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP, this is the ICMP code or -1 (all ICMP codes).  If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes). To specify multiple rules and descriptions for the rules, use IP permissions instead.
    ///   - logger: Logger use during operation
    @inlinable
    public func authorizeSecurityGroupIngress(
        cidrIp: String? = nil,
        dryRun: Bool? = nil,
        fromPort: Int? = nil,
        groupId: String? = nil,
        groupName: String? = nil,
        ipPermissions: [IpPermission]? = nil,
        ipProtocol: String? = nil,
        sourceSecurityGroupName: String? = nil,
        sourceSecurityGroupOwnerId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        toPort: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> AuthorizeSecurityGroupIngressResult {
        let input = AuthorizeSecurityGroupIngressRequest(
            cidrIp: cidrIp, 
            dryRun: dryRun, 
            fromPort: fromPort, 
            groupId: groupId, 
            groupName: groupName, 
            ipPermissions: ipPermissions, 
            ipProtocol: ipProtocol, 
            sourceSecurityGroupName: sourceSecurityGroupName, 
            sourceSecurityGroupOwnerId: sourceSecurityGroupOwnerId, 
            tagSpecifications: tagSpecifications, 
            toPort: toPort
        )
        return try await self.authorizeSecurityGroupIngress(input, logger: logger)
    }

    /// Bundles an Amazon instance store-backed Windows instance. During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.  This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.
    @Sendable
    @inlinable
    public func bundleInstance(_ input: BundleInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> BundleInstanceResult {
        try await self.client.execute(
            operation: "BundleInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Bundles an Amazon instance store-backed Windows instance. During bundling, only the root device volume (C:\) is bundled. Data on other instance store volumes is not preserved.  This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - instanceId: The ID of the instance to bundle. Default: None
    ///   - storage: The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
    ///   - logger: Logger use during operation
    @inlinable
    public func bundleInstance(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        storage: Storage? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> BundleInstanceResult {
        let input = BundleInstanceRequest(
            dryRun: dryRun, 
            instanceId: instanceId, 
            storage: storage
        )
        return try await self.bundleInstance(input, logger: logger)
    }

    /// Cancels a bundling operation for an instance store-backed Windows instance.
    @Sendable
    @inlinable
    public func cancelBundleTask(_ input: CancelBundleTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelBundleTaskResult {
        try await self.client.execute(
            operation: "CancelBundleTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels a bundling operation for an instance store-backed Windows instance.
    ///
    /// Parameters:
    ///   - bundleId: The ID of the bundle task.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelBundleTask(
        bundleId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelBundleTaskResult {
        let input = CancelBundleTaskRequest(
            bundleId: bundleId, 
            dryRun: dryRun
        )
        return try await self.cancelBundleTask(input, logger: logger)
    }

    /// Cancels the specified Capacity Reservation, releases the reserved capacity, and changes
    /// 			the Capacity Reservation's state to cancelled. You can cancel a Capacity Reservation that is in the following states:    assessing     active and there is no commitment duration or the commitment
    /// 					duration has elapsed. You can't cancel a future-dated Capacity Reservation during the commitment duration.   If a future-dated Capacity Reservation enters the delayed state, the commitment
    /// 			duration is waived, and you can cancel it as soon as it enters the active state. Instances running in the reserved capacity continue running until you stop them. Stopped
    /// 			instances that target the Capacity Reservation can no longer launch. Modify these instances to either
    /// 			target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation
    /// 			that has matching attributes and sufficient capacity.
    @Sendable
    @inlinable
    public func cancelCapacityReservation(_ input: CancelCapacityReservationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelCapacityReservationResult {
        try await self.client.execute(
            operation: "CancelCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the specified Capacity Reservation, releases the reserved capacity, and changes
    /// 			the Capacity Reservation's state to cancelled. You can cancel a Capacity Reservation that is in the following states:    assessing     active and there is no commitment duration or the commitment
    /// 					duration has elapsed. You can't cancel a future-dated Capacity Reservation during the commitment duration.   If a future-dated Capacity Reservation enters the delayed state, the commitment
    /// 			duration is waived, and you can cancel it as soon as it enters the active state. Instances running in the reserved capacity continue running until you stop them. Stopped
    /// 			instances that target the Capacity Reservation can no longer launch. Modify these instances to either
    /// 			target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation
    /// 			that has matching attributes and sufficient capacity.
    ///
    /// Parameters:
    ///   - capacityReservationId: The ID of the Capacity Reservation to be cancelled.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelCapacityReservation(
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelCapacityReservationResult {
        let input = CancelCapacityReservationRequest(
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun
        )
        return try await self.cancelCapacityReservation(input, logger: logger)
    }

    /// Cancels one or more Capacity Reservation Fleets. When you cancel a Capacity
    /// 			Reservation Fleet, the following happens:   The Capacity Reservation Fleet's status changes to
    /// 					cancelled.   The individual Capacity Reservations in the Fleet are cancelled. Instances
    /// 					running in the Capacity Reservations at the time of cancelling the Fleet
    /// 					continue to run in shared capacity.   The Fleet stops creating new Capacity Reservations.
    @Sendable
    @inlinable
    public func cancelCapacityReservationFleets(_ input: CancelCapacityReservationFleetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelCapacityReservationFleetsResult {
        try await self.client.execute(
            operation: "CancelCapacityReservationFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels one or more Capacity Reservation Fleets. When you cancel a Capacity
    /// 			Reservation Fleet, the following happens:   The Capacity Reservation Fleet's status changes to
    /// 					cancelled.   The individual Capacity Reservations in the Fleet are cancelled. Instances
    /// 					running in the Capacity Reservations at the time of cancelling the Fleet
    /// 					continue to run in shared capacity.   The Fleet stops creating new Capacity Reservations.
    ///
    /// Parameters:
    ///   - capacityReservationFleetIds: The IDs of the Capacity Reservation Fleets to cancel.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelCapacityReservationFleets(
        capacityReservationFleetIds: [String]? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelCapacityReservationFleetsResult {
        let input = CancelCapacityReservationFleetsRequest(
            capacityReservationFleetIds: capacityReservationFleetIds, 
            dryRun: dryRun
        )
        return try await self.cancelCapacityReservationFleets(input, logger: logger)
    }

    /// Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.
    @Sendable
    @inlinable
    public func cancelConversionTask(_ input: CancelConversionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CancelConversionTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.
    ///
    /// Parameters:
    ///   - conversionTaskId: The ID of the conversion task.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - reasonMessage: The reason for canceling the conversion task.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelConversionTask(
        conversionTaskId: String? = nil,
        dryRun: Bool? = nil,
        reasonMessage: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CancelConversionRequest(
            conversionTaskId: conversionTaskId, 
            dryRun: dryRun, 
            reasonMessage: reasonMessage
        )
        return try await self.cancelConversionTask(input, logger: logger)
    }

    /// Cancels the generation of an account status report. You can only cancel a report while it has the running status. Reports with other statuses (complete, cancelled, or error) can't be canceled. For more information, see Generating the account status report for declarative policies in the Amazon Web Services Organizations User Guide.
    @Sendable
    @inlinable
    public func cancelDeclarativePoliciesReport(_ input: CancelDeclarativePoliciesReportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelDeclarativePoliciesReportResult {
        try await self.client.execute(
            operation: "CancelDeclarativePoliciesReport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the generation of an account status report. You can only cancel a report while it has the running status. Reports with other statuses (complete, cancelled, or error) can't be canceled. For more information, see Generating the account status report for declarative policies in the Amazon Web Services Organizations User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - reportId: The ID of the report.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelDeclarativePoliciesReport(
        dryRun: Bool? = nil,
        reportId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelDeclarativePoliciesReportResult {
        let input = CancelDeclarativePoliciesReportRequest(
            dryRun: dryRun, 
            reportId: reportId
        )
        return try await self.cancelDeclarativePoliciesReport(input, logger: logger)
    }

    /// Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.
    @Sendable
    @inlinable
    public func cancelExportTask(_ input: CancelExportTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CancelExportTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.
    ///
    /// Parameters:
    ///   - exportTaskId: The ID of the export task. This is the ID returned by the CreateInstanceExportTask and ExportImage operations.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelExportTask(
        exportTaskId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CancelExportTaskRequest(
            exportTaskId: exportTaskId
        )
        return try await self.cancelExportTask(input, logger: logger)
    }

    /// Removes your Amazon Web Services account from the launch permissions for the specified AMI. For more information, see  Cancel having an AMI shared with your Amazon Web Services account in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func cancelImageLaunchPermission(_ input: CancelImageLaunchPermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelImageLaunchPermissionResult {
        try await self.client.execute(
            operation: "CancelImageLaunchPermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes your Amazon Web Services account from the launch permissions for the specified AMI. For more information, see  Cancel having an AMI shared with your Amazon Web Services account in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI that was shared with your Amazon Web Services account.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelImageLaunchPermission(
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelImageLaunchPermissionResult {
        let input = CancelImageLaunchPermissionRequest(
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.cancelImageLaunchPermission(input, logger: logger)
    }

    /// Cancels an in-process import virtual machine or import snapshot task.
    @Sendable
    @inlinable
    public func cancelImportTask(_ input: CancelImportTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelImportTaskResult {
        try await self.client.execute(
            operation: "CancelImportTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels an in-process import virtual machine or import snapshot task.
    ///
    /// Parameters:
    ///   - cancelReason: The reason for canceling the task.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - importTaskId: The ID of the import image or import snapshot task to be canceled.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelImportTask(
        cancelReason: String? = nil,
        dryRun: Bool? = nil,
        importTaskId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelImportTaskResult {
        let input = CancelImportTaskRequest(
            cancelReason: cancelReason, 
            dryRun: dryRun, 
            importTaskId: importTaskId
        )
        return try await self.cancelImportTask(input, logger: logger)
    }

    /// Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace. For more information, see Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func cancelReservedInstancesListing(_ input: CancelReservedInstancesListingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelReservedInstancesListingResult {
        try await self.client.execute(
            operation: "CancelReservedInstancesListing", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace. For more information, see Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - reservedInstancesListingId: The ID of the Reserved Instance listing.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelReservedInstancesListing(
        reservedInstancesListingId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelReservedInstancesListingResult {
        let input = CancelReservedInstancesListingRequest(
            reservedInstancesListingId: reservedInstancesListingId
        )
        return try await self.cancelReservedInstancesListing(input, logger: logger)
    }

    /// Cancels the specified Spot Fleet requests. After you cancel a Spot Fleet request, the Spot Fleet launches no new instances. You must also specify whether a canceled Spot Fleet request should terminate its instances. If you choose to terminate the instances, the Spot Fleet request enters the cancelled_terminating state. Otherwise, the Spot Fleet request enters the cancelled_running state and the instances continue to run until they are interrupted or you terminate them manually.  Restrictions    You can delete up to 100 fleets in a single request. If you exceed the specified number, no fleets are deleted.
    @Sendable
    @inlinable
    public func cancelSpotFleetRequests(_ input: CancelSpotFleetRequestsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelSpotFleetRequestsResponse {
        try await self.client.execute(
            operation: "CancelSpotFleetRequests", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the specified Spot Fleet requests. After you cancel a Spot Fleet request, the Spot Fleet launches no new instances. You must also specify whether a canceled Spot Fleet request should terminate its instances. If you choose to terminate the instances, the Spot Fleet request enters the cancelled_terminating state. Otherwise, the Spot Fleet request enters the cancelled_running state and the instances continue to run until they are interrupted or you terminate them manually.  Restrictions    You can delete up to 100 fleets in a single request. If you exceed the specified number, no fleets are deleted.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - spotFleetRequestIds: The IDs of the Spot Fleet requests. Constraint: You can specify up to 100 IDs in a single request.
    ///   - terminateInstances: Indicates whether to terminate the associated instances when the Spot Fleet request is canceled.  The default is to terminate the instances. To let the instances continue to run after the Spot Fleet request is canceled, specify no-terminate-instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelSpotFleetRequests(
        dryRun: Bool? = nil,
        spotFleetRequestIds: [String]? = nil,
        terminateInstances: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelSpotFleetRequestsResponse {
        let input = CancelSpotFleetRequestsRequest(
            dryRun: dryRun, 
            spotFleetRequestIds: spotFleetRequestIds, 
            terminateInstances: terminateInstances
        )
        return try await self.cancelSpotFleetRequests(input, logger: logger)
    }

    /// Cancels one or more Spot Instance requests.  Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.
    @Sendable
    @inlinable
    public func cancelSpotInstanceRequests(_ input: CancelSpotInstanceRequestsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CancelSpotInstanceRequestsResult {
        try await self.client.execute(
            operation: "CancelSpotInstanceRequests", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels one or more Spot Instance requests.  Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - spotInstanceRequestIds: The IDs of the Spot Instance requests.
    ///   - logger: Logger use during operation
    @inlinable
    public func cancelSpotInstanceRequests(
        dryRun: Bool? = nil,
        spotInstanceRequestIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CancelSpotInstanceRequestsResult {
        let input = CancelSpotInstanceRequestsRequest(
            dryRun: dryRun, 
            spotInstanceRequestIds: spotInstanceRequestIds
        )
        return try await self.cancelSpotInstanceRequests(input, logger: logger)
    }

    /// Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user's instance is eligible for support.
    @Sendable
    @inlinable
    public func confirmProductInstance(_ input: ConfirmProductInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ConfirmProductInstanceResult {
        try await self.client.execute(
            operation: "ConfirmProductInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user's instance is eligible for support.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance.
    ///   - productCode: The product code. This must be a product code that you own.
    ///   - logger: Logger use during operation
    @inlinable
    public func confirmProductInstance(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        productCode: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ConfirmProductInstanceResult {
        let input = ConfirmProductInstanceRequest(
            dryRun: dryRun, 
            instanceId: instanceId, 
            productCode: productCode
        )
        return try await self.confirmProductInstance(input, logger: logger)
    }

    /// Copies the specified Amazon FPGA Image (AFI) to the current Region.
    @Sendable
    @inlinable
    public func copyFpgaImage(_ input: CopyFpgaImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyFpgaImageResult {
        try await self.client.execute(
            operation: "CopyFpgaImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Copies the specified Amazon FPGA Image (AFI) to the current Region.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.  	For more information, see Ensuring idempotency.
    ///   - description: The description for the new AFI.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - name: The name for the new AFI. The default is the name of the source AFI.
    ///   - sourceFpgaImageId: The ID of the source AFI.
    ///   - sourceRegion: The Region that contains the source AFI.
    ///   - logger: Logger use during operation
    @inlinable
    public func copyFpgaImage(
        clientToken: String? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        name: String? = nil,
        sourceFpgaImageId: String? = nil,
        sourceRegion: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopyFpgaImageResult {
        let input = CopyFpgaImageRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            name: name, 
            sourceFpgaImageId: sourceFpgaImageId, 
            sourceRegion: sourceRegion
        )
        return try await self.copyFpgaImage(input, logger: logger)
    }

    /// Initiates an AMI copy operation. You can copy an AMI from one Region to another, or from a Region to an Outpost. You can't copy an AMI from an Outpost to a Region, from one Outpost to another, or within the same Outpost. To copy an AMI to another partition, see CreateStoreImageTask. When you copy an AMI from one Region to another, the destination Region is the current Region. When you copy an AMI from a Region to an Outpost, specify the ARN of the Outpost as the destination. Backing snapshots copied to an Outpost are encrypted by default using the default encryption key for the Region or the key that you specify. Outposts do not support unencrypted snapshots. For information about the prerequisites when copying an AMI, see Copy an AMI in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func copyImage(_ input: CopyImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopyImageResult {
        try await self.client.execute(
            operation: "CopyImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Initiates an AMI copy operation. You can copy an AMI from one Region to another, or from a Region to an Outpost. You can't copy an AMI from an Outpost to a Region, from one Outpost to another, or within the same Outpost. To copy an AMI to another partition, see CreateStoreImageTask. When you copy an AMI from one Region to another, the destination Region is the current Region. When you copy an AMI from a Region to an Outpost, specify the ARN of the Outpost as the destination. Backing snapshots copied to an Outpost are encrypted by default using the default encryption key for the Region or the key that you specify. Outposts do not support unencrypted snapshots. For information about the prerequisites when copying an AMI, see Copy an AMI in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see Ensuring idempotency in the Amazon EC2 API Reference.
    ///   - copyImageTags: Indicates whether to include your user-defined AMI tags when copying the AMI. The following tags will not be copied:   System tags (prefixed with aws:)   For public and shared AMIs, user-defined tags that are attached by other Amazon Web Services accounts   Default: Your user-defined AMI tags are not copied.
    ///   - description: A description for the new AMI in the destination Region.
    ///   - destinationOutpostArn: The Amazon Resource Name (ARN) of the Outpost to which to copy the AMI. Only specify this parameter when copying an AMI from an Amazon Web Services Region to an Outpost. The AMI must be in the Region of the destination Outpost. You cannot copy an AMI from an Outpost to a Region, from one Outpost to another, or within the same Outpost. For more information, see Copy AMIs from an Amazon Web Services Region to an Outpost in the Amazon EBS User Guide.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - encrypted: Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default KMS key for Amazon EBS is used unless you specify a non-default Key Management Service (KMS) KMS key using KmsKeyId. For more information, see Use encryption with EBS-backed AMIs in the Amazon EC2 User Guide.
    ///   - kmsKeyId: The identifier of the symmetric Key Management Service (KMS) KMS key to use when creating encrypted volumes. If this parameter is not specified, your Amazon Web Services managed KMS key for Amazon EBS is used. If you specify a KMS key, you must also set the encrypted state to true. You can specify a KMS key using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an identifier that is not valid, the action can appear to complete, but eventually fails. The specified KMS key must exist in the destination Region. Amazon EBS does not support asymmetric KMS keys.
    ///   - name: The name of the new AMI in the destination Region.
    ///   - sourceImageId: The ID of the AMI to copy.
    ///   - sourceRegion: The name of the Region that contains the AMI to copy.
    ///   - tagSpecifications: The tags to apply to the new AMI and new snapshots. You can tag the AMI, the snapshots, or both.   To tag the new AMI, the value for ResourceType must be image.   To tag the new snapshots, the value for ResourceType must be snapshot. The same tag is applied to all the new snapshots.   If you specify other values for ResourceType, the request fails. To tag an AMI or snapshot after it has been created, see CreateTags.
    ///   - logger: Logger use during operation
    @inlinable
    public func copyImage(
        clientToken: String? = nil,
        copyImageTags: Bool? = nil,
        description: String? = nil,
        destinationOutpostArn: String? = nil,
        dryRun: Bool? = nil,
        encrypted: Bool? = nil,
        kmsKeyId: String? = nil,
        name: String? = nil,
        sourceImageId: String? = nil,
        sourceRegion: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopyImageResult {
        let input = CopyImageRequest(
            clientToken: clientToken, 
            copyImageTags: copyImageTags, 
            description: description, 
            destinationOutpostArn: destinationOutpostArn, 
            dryRun: dryRun, 
            encrypted: encrypted, 
            kmsKeyId: kmsKeyId, 
            name: name, 
            sourceImageId: sourceImageId, 
            sourceRegion: sourceRegion, 
            tagSpecifications: tagSpecifications
        )
        return try await self.copyImage(input, logger: logger)
    }

    /// Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy a snapshot within the same Region, from one Region to another, or from a Region to an Outpost.  You can't copy a snapshot from an Outpost to a Region, from one Outpost to another, or within  the same Outpost. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs). When copying snapshots to a Region, copies of encrypted EBS snapshots remain encrypted.  	Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the  	snapshot copy operation. By default, encrypted snapshot copies use the default KMS key;  	however, you can specify a different KMS key. To copy an encrypted  	snapshot that has been shared from another account, you must have permissions for the KMS key  	used to encrypt the snapshot. Snapshots copied to an Outpost are encrypted by default using the default 		encryption key for the Region, or a different key that you specify in the request using  		KmsKeyId. Outposts do not support unencrypted  	  snapshots. For more information,  			Amazon EBS local snapshots on Outposts in the Amazon EBS User Guide. Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose. For more information, see Copy an Amazon EBS snapshot in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func copySnapshot(_ input: CopySnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CopySnapshotResult {
        try await self.client.execute(
            operation: "CopySnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy a snapshot within the same Region, from one Region to another, or from a Region to an Outpost.  You can't copy a snapshot from an Outpost to a Region, from one Outpost to another, or within  the same Outpost. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs). When copying snapshots to a Region, copies of encrypted EBS snapshots remain encrypted.  	Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the  	snapshot copy operation. By default, encrypted snapshot copies use the default KMS key;  	however, you can specify a different KMS key. To copy an encrypted  	snapshot that has been shared from another account, you must have permissions for the KMS key  	used to encrypt the snapshot. Snapshots copied to an Outpost are encrypted by default using the default 		encryption key for the Region, or a different key that you specify in the request using  		KmsKeyId. Outposts do not support unencrypted  	  snapshots. For more information,  			Amazon EBS local snapshots on Outposts in the Amazon EBS User Guide. Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose. For more information, see Copy an Amazon EBS snapshot in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - completionDurationMinutes: Specify a completion duration, in 15 minute increments, to initiate a time-based snapshot  copy. Time-based snapshot copy operations complete within the specified duration. For more  information, see  Time-based copies. If you do not specify a value, the snapshot copy operation is completed on a  best-effort basis.
    ///   - description: A description for the EBS snapshot.
    ///   - destinationOutpostArn: The Amazon Resource Name (ARN) of the Outpost to which to copy the snapshot. Only
    ///   - destinationRegion: The destination Region to use in the PresignedUrl parameter of a snapshot copy operation. This parameter is only valid for specifying the destination Region in a PresignedUrl parameter, where it is required. The snapshot copy is sent to the regional endpoint that you sent the HTTP 	request to (for example, ec2.us-east-1.amazonaws.com). With the CLI, this is specified using the --region parameter or the default Region in your Amazon Web Services configuration file.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - encrypted: To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled,  enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots  are encrypted, even if you omit this parameter and encryption by default is not enabled. You  cannot set this parameter to false. For more information, see Amazon EBS encryption in the  Amazon EBS User Guide.
    ///   - kmsKeyId: The identifier of the KMS key to use for Amazon EBS encryption. If this parameter is not specified, your KMS key for Amazon EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the KMS key using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid,  the action can appear to complete, but eventually fails.
    ///   - presignedUrl: When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see Query requests. The PresignedUrl should use the snapshot source endpoint, the CopySnapshot action, and include the SourceRegion, SourceSnapshotId, and DestinationRegion parameters. The PresignedUrl must be signed using Amazon Web Services Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in  Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4) in the Amazon S3 API Reference. An invalid or improperly signed PresignedUrl will cause the copy operation to fail asynchronously, and the snapshot will move to an error state.
    ///   - sourceRegion: The ID of the Region that contains the snapshot to be copied.
    ///   - sourceSnapshotId: The ID of the EBS snapshot to copy.
    ///   - tagSpecifications: The tags to apply to the new snapshot.
    ///   - logger: Logger use during operation
    @inlinable
    public func copySnapshot(
        completionDurationMinutes: Int? = nil,
        description: String? = nil,
        destinationOutpostArn: String? = nil,
        destinationRegion: String? = nil,
        dryRun: Bool? = nil,
        encrypted: Bool? = nil,
        kmsKeyId: String? = nil,
        presignedUrl: String? = nil,
        sourceRegion: String? = nil,
        sourceSnapshotId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CopySnapshotResult {
        let input = CopySnapshotRequest(
            completionDurationMinutes: completionDurationMinutes, 
            description: description, 
            destinationOutpostArn: destinationOutpostArn, 
            destinationRegion: destinationRegion, 
            dryRun: dryRun, 
            encrypted: encrypted, 
            kmsKeyId: kmsKeyId, 
            presignedUrl: presignedUrl, 
            sourceRegion: sourceRegion, 
            sourceSnapshotId: sourceSnapshotId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.copySnapshot(input, logger: logger)
    }

    /// Creates a new Capacity Reservation with the specified attributes. Capacity Reservations enable
    /// 			you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any
    /// 			duration. You can create a Capacity Reservation at any time, and you can choose when it starts. You can create a
    /// 			Capacity Reservation for immediate use or you can request a Capacity Reservation for a future date. For more information, see
    /// 			Reserve compute capacity with On-Demand Capacity Reservations in the Amazon EC2 User Guide. Your request to create a Capacity Reservation could fail if:   Amazon EC2 does not have sufficient capacity. In this case, try again at a later
    /// 					time, try in a different Availability Zone, or request a smaller Capacity Reservation. If
    /// 					your workload is flexible across instance types and sizes, try with different instance
    /// 					attributes.   The requested quantity exceeds your On-Demand Instance quota. In this case, increase your
    /// 					On-Demand Instance quota for the requested instance type and try again. For more information,
    /// 					see
    /// 						Amazon EC2 Service Quotas in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createCapacityReservation(_ input: CreateCapacityReservationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCapacityReservationResult {
        try await self.client.execute(
            operation: "CreateCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new Capacity Reservation with the specified attributes. Capacity Reservations enable
    /// 			you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any
    /// 			duration. You can create a Capacity Reservation at any time, and you can choose when it starts. You can create a
    /// 			Capacity Reservation for immediate use or you can request a Capacity Reservation for a future date. For more information, see
    /// 			Reserve compute capacity with On-Demand Capacity Reservations in the Amazon EC2 User Guide. Your request to create a Capacity Reservation could fail if:   Amazon EC2 does not have sufficient capacity. In this case, try again at a later
    /// 					time, try in a different Availability Zone, or request a smaller Capacity Reservation. If
    /// 					your workload is flexible across instance types and sizes, try with different instance
    /// 					attributes.   The requested quantity exceeds your On-Demand Instance quota. In this case, increase your
    /// 					On-Demand Instance quota for the requested instance type and try again. For more information,
    /// 					see
    /// 						Amazon EC2 Service Quotas in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - availabilityZone: The Availability Zone in which to create the Capacity Reservation.
    ///   - availabilityZoneId: The ID of the Availability Zone in which to create the Capacity Reservation.
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensure Idempotency.
    ///   - commitmentDuration:  Required for future-dated Capacity Reservations only. To create a Capacity
    ///   - deliveryPreference:  Required for future-dated Capacity Reservations only. To create a Capacity
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - ebsOptimized: Indicates whether the Capacity Reservation supports EBS-optimized instances. This
    ///   - endDate: The date and time at which the Capacity Reservation expires. When a Capacity
    ///   - endDateType: Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can
    ///   - ephemeralStorage:  Deprecated.
    ///   - instanceCount: The number of instances for which to reserve capacity.  You can request future-dated Capacity Reservations for an instance count
    ///   - instanceMatchCriteria: Indicates the type of instance launches that the Capacity Reservation accepts. The
    ///   - instancePlatform: The type of operating system for which to reserve capacity.
    ///   - instanceType: The instance type for which to reserve capacity.  You can request future-dated Capacity Reservations for instance types in the C, M, R, I,
    ///   - outpostArn:  Not supported for future-dated Capacity Reservations.  The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity
    ///   - placementGroupArn:  Not supported for future-dated Capacity Reservations.  The Amazon Resource Name (ARN) of the cluster placement group in which
    ///   - startDate:  Required for future-dated Capacity Reservations only. To create a Capacity
    ///   - tagSpecifications: The tags to apply to the Capacity Reservation during launch.
    ///   - tenancy: Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one
    ///   - logger: Logger use during operation
    @inlinable
    public func createCapacityReservation(
        availabilityZone: String? = nil,
        availabilityZoneId: String? = nil,
        clientToken: String? = nil,
        commitmentDuration: Int64? = nil,
        deliveryPreference: CapacityReservationDeliveryPreference? = nil,
        dryRun: Bool? = nil,
        ebsOptimized: Bool? = nil,
        endDate: Date? = nil,
        endDateType: EndDateType? = nil,
        ephemeralStorage: Bool? = nil,
        instanceCount: Int? = nil,
        instanceMatchCriteria: InstanceMatchCriteria? = nil,
        instancePlatform: CapacityReservationInstancePlatform? = nil,
        instanceType: String? = nil,
        outpostArn: String? = nil,
        placementGroupArn: String? = nil,
        startDate: Date? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        tenancy: CapacityReservationTenancy? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCapacityReservationResult {
        let input = CreateCapacityReservationRequest(
            availabilityZone: availabilityZone, 
            availabilityZoneId: availabilityZoneId, 
            clientToken: clientToken, 
            commitmentDuration: commitmentDuration, 
            deliveryPreference: deliveryPreference, 
            dryRun: dryRun, 
            ebsOptimized: ebsOptimized, 
            endDate: endDate, 
            endDateType: endDateType, 
            ephemeralStorage: ephemeralStorage, 
            instanceCount: instanceCount, 
            instanceMatchCriteria: instanceMatchCriteria, 
            instancePlatform: instancePlatform, 
            instanceType: instanceType, 
            outpostArn: outpostArn, 
            placementGroupArn: placementGroupArn, 
            startDate: startDate, 
            tagSpecifications: tagSpecifications, 
            tenancy: tenancy
        )
        return try await self.createCapacityReservation(input, logger: logger)
    }

    ///  Create a new Capacity Reservation by splitting the capacity of the source Capacity
    /// 			Reservation. The new Capacity Reservation will have the same attributes as the source
    /// 			Capacity Reservation except for tags. The source Capacity Reservation must be
    /// 				active and owned by your Amazon Web Services account.
    @Sendable
    @inlinable
    public func createCapacityReservationBySplitting(_ input: CreateCapacityReservationBySplittingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCapacityReservationBySplittingResult {
        try await self.client.execute(
            operation: "CreateCapacityReservationBySplitting", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Create a new Capacity Reservation by splitting the capacity of the source Capacity
    /// 			Reservation. The new Capacity Reservation will have the same attributes as the source
    /// 			Capacity Reservation except for tags. The source Capacity Reservation must be
    /// 				active and owned by your Amazon Web Services account.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensure Idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceCount:  The number of instances to split from the source Capacity Reservation.
    ///   - sourceCapacityReservationId:  The ID of the Capacity Reservation from which you want to split the capacity.
    ///   - tagSpecifications:  The tags to apply to the new Capacity Reservation.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCapacityReservationBySplitting(
        clientToken: String? = CreateCapacityReservationBySplittingRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        instanceCount: Int? = nil,
        sourceCapacityReservationId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCapacityReservationBySplittingResult {
        let input = CreateCapacityReservationBySplittingRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            instanceCount: instanceCount, 
            sourceCapacityReservationId: sourceCapacityReservationId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createCapacityReservationBySplitting(input, logger: logger)
    }

    /// Creates a Capacity Reservation Fleet. For more information, see Create a
    /// 				Capacity Reservation Fleet in the
    /// 			Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createCapacityReservationFleet(_ input: CreateCapacityReservationFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCapacityReservationFleetResult {
        try await self.client.execute(
            operation: "CreateCapacityReservationFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Capacity Reservation Fleet. For more information, see Create a
    /// 				Capacity Reservation Fleet in the
    /// 			Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - allocationStrategy: The strategy used by the Capacity Reservation Fleet to determine which of the
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensure Idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - endDate: The date and time at which the Capacity Reservation Fleet expires. When the Capacity
    ///   - instanceMatchCriteria: Indicates the type of instance launches that the Capacity Reservation Fleet accepts.
    ///   - instanceTypeSpecifications: Information about the instance types for which to reserve the capacity.
    ///   - tagSpecifications: The tags to assign to the Capacity Reservation Fleet. The tags are automatically
    ///   - tenancy: Indicates the tenancy of the Capacity Reservation Fleet. All Capacity Reservations in
    ///   - totalTargetCapacity: The total number of capacity units to be reserved by the Capacity Reservation Fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCapacityReservationFleet(
        allocationStrategy: String? = nil,
        clientToken: String? = CreateCapacityReservationFleetRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        endDate: Date? = nil,
        instanceMatchCriteria: FleetInstanceMatchCriteria? = nil,
        instanceTypeSpecifications: [ReservationFleetInstanceSpecification]? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        tenancy: FleetCapacityReservationTenancy? = nil,
        totalTargetCapacity: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCapacityReservationFleetResult {
        let input = CreateCapacityReservationFleetRequest(
            allocationStrategy: allocationStrategy, 
            clientToken: clientToken, 
            dryRun: dryRun, 
            endDate: endDate, 
            instanceMatchCriteria: instanceMatchCriteria, 
            instanceTypeSpecifications: instanceTypeSpecifications, 
            tagSpecifications: tagSpecifications, 
            tenancy: tenancy, 
            totalTargetCapacity: totalTargetCapacity
        )
        return try await self.createCapacityReservationFleet(input, logger: logger)
    }

    /// Creates a carrier gateway.   For more information about carrier gateways, see Carrier gateways in the Amazon Web Services Wavelength Developer Guide.
    @Sendable
    @inlinable
    public func createCarrierGateway(_ input: CreateCarrierGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCarrierGatewayResult {
        try await self.client.execute(
            operation: "CreateCarrierGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a carrier gateway.   For more information about carrier gateways, see Carrier gateways in the Amazon Web Services Wavelength Developer Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags to associate with the carrier gateway.
    ///   - vpcId: The ID of the VPC to associate with the carrier gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCarrierGateway(
        clientToken: String? = CreateCarrierGatewayRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCarrierGatewayResult {
        let input = CreateCarrierGatewayRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications, 
            vpcId: vpcId
        )
        return try await self.createCarrierGateway(input, logger: logger)
    }

    /// Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to
    /// 			enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions
    /// 			are terminated.
    @Sendable
    @inlinable
    public func createClientVpnEndpoint(_ input: CreateClientVpnEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateClientVpnEndpointResult {
        try await self.client.execute(
            operation: "CreateClientVpnEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to
    /// 			enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions
    /// 			are terminated.
    ///
    /// Parameters:
    ///   - authenticationOptions: Information about the authentication method to be used to authenticate clients.
    ///   - clientCidrBlock: The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. Client CIDR range must have a size of at least /22 and must not be greater than /12.
    ///   - clientConnectOptions: The options for managing connection authorization for new client connections.
    ///   - clientLoginBannerOptions: Options for enabling a customizable text banner that will be displayed on
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    ///   - connectionLogOptions: Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a
    ///   - description: A brief description of the Client VPN endpoint.
    ///   - dnsServers: Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - securityGroupIds: The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
    ///   - selfServicePortal: Specify whether to enable the self-service portal for the Client VPN endpoint. Default Value: enabled
    ///   - serverCertificateArn: The ARN of the server certificate. For more information, see
    ///   - sessionTimeoutHours: The maximum VPN session duration time in hours. Valid values: 8 | 10 | 12 | 24  Default value: 24
    ///   - splitTunnel: Indicates whether split-tunnel is enabled on the Client VPN endpoint. By default, split-tunnel on a VPN endpoint is disabled. For information about split-tunnel VPN endpoints, see Split-tunnel Client VPN endpoint in the
    ///   - tagSpecifications: The tags to apply to the Client VPN endpoint during creation.
    ///   - transportProtocol: The transport protocol to be used by the VPN session. Default value: udp
    ///   - vpcId: The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
    ///   - vpnPort: The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194  Default Value: 443
    ///   - logger: Logger use during operation
    @inlinable
    public func createClientVpnEndpoint(
        authenticationOptions: [ClientVpnAuthenticationRequest]? = nil,
        clientCidrBlock: String? = nil,
        clientConnectOptions: ClientConnectOptions? = nil,
        clientLoginBannerOptions: ClientLoginBannerOptions? = nil,
        clientToken: String? = CreateClientVpnEndpointRequest.idempotencyToken(),
        connectionLogOptions: ConnectionLogOptions? = nil,
        description: String? = nil,
        dnsServers: [String]? = nil,
        dryRun: Bool? = nil,
        securityGroupIds: [String]? = nil,
        selfServicePortal: SelfServicePortal? = nil,
        serverCertificateArn: String? = nil,
        sessionTimeoutHours: Int? = nil,
        splitTunnel: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transportProtocol: TransportProtocol? = nil,
        vpcId: String? = nil,
        vpnPort: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateClientVpnEndpointResult {
        let input = CreateClientVpnEndpointRequest(
            authenticationOptions: authenticationOptions, 
            clientCidrBlock: clientCidrBlock, 
            clientConnectOptions: clientConnectOptions, 
            clientLoginBannerOptions: clientLoginBannerOptions, 
            clientToken: clientToken, 
            connectionLogOptions: connectionLogOptions, 
            description: description, 
            dnsServers: dnsServers, 
            dryRun: dryRun, 
            securityGroupIds: securityGroupIds, 
            selfServicePortal: selfServicePortal, 
            serverCertificateArn: serverCertificateArn, 
            sessionTimeoutHours: sessionTimeoutHours, 
            splitTunnel: splitTunnel, 
            tagSpecifications: tagSpecifications, 
            transportProtocol: transportProtocol, 
            vpcId: vpcId, 
            vpnPort: vpnPort
        )
        return try await self.createClientVpnEndpoint(input, logger: logger)
    }

    /// Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the
    /// 			available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.
    @Sendable
    @inlinable
    public func createClientVpnRoute(_ input: CreateClientVpnRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateClientVpnRouteResult {
        try await self.client.execute(
            operation: "CreateClientVpnRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the
    /// 			available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint to which to add the route.
    ///   - description: A brief description of the route.
    ///   - destinationCidrBlock: The IPv4 address range, in CIDR notation, of the route destination. For example:   To add a route for Internet access, enter 0.0.0.0/0    To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range   To add a route for an on-premises network, enter the Amazon Web Services Site-to-Site VPN connection's IPv4 CIDR range   To add a route for the local network, enter the client CIDR range
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - targetVpcSubnetId: The ID of the subnet through which you want to route traffic. The specified subnet must be
    ///   - logger: Logger use during operation
    @inlinable
    public func createClientVpnRoute(
        clientToken: String? = CreateClientVpnRouteRequest.idempotencyToken(),
        clientVpnEndpointId: String? = nil,
        description: String? = nil,
        destinationCidrBlock: String? = nil,
        dryRun: Bool? = nil,
        targetVpcSubnetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateClientVpnRouteResult {
        let input = CreateClientVpnRouteRequest(
            clientToken: clientToken, 
            clientVpnEndpointId: clientVpnEndpointId, 
            description: description, 
            destinationCidrBlock: destinationCidrBlock, 
            dryRun: dryRun, 
            targetVpcSubnetId: targetVpcSubnetId
        )
        return try await self.createClientVpnRoute(input, logger: logger)
    }

    ///  Creates a range of customer-owned IP addresses.
    @Sendable
    @inlinable
    public func createCoipCidr(_ input: CreateCoipCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCoipCidrResult {
        try await self.client.execute(
            operation: "CreateCoipCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Creates a range of customer-owned IP addresses.
    ///
    /// Parameters:
    ///   - cidr:  A customer-owned IP address range to create.
    ///   - coipPoolId:  The ID of the address pool.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCoipCidr(
        cidr: String? = nil,
        coipPoolId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCoipCidrResult {
        let input = CreateCoipCidrRequest(
            cidr: cidr, 
            coipPoolId: coipPoolId, 
            dryRun: dryRun
        )
        return try await self.createCoipCidr(input, logger: logger)
    }

    ///  Creates a pool of customer-owned IP (CoIP) addresses.
    @Sendable
    @inlinable
    public func createCoipPool(_ input: CreateCoipPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCoipPoolResult {
        try await self.client.execute(
            operation: "CreateCoipPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Creates a pool of customer-owned IP (CoIP) addresses.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayRouteTableId:  The ID of the local gateway route table.
    ///   - tagSpecifications:  The tags to assign to the CoIP address pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func createCoipPool(
        dryRun: Bool? = nil,
        localGatewayRouteTableId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCoipPoolResult {
        let input = CreateCoipPoolRequest(
            dryRun: dryRun, 
            localGatewayRouteTableId: localGatewayRouteTableId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createCoipPool(input, logger: logger)
    }

    /// Provides information to Amazon Web Services about your customer gateway device. The customer gateway device is the appliance at your end of the VPN connection. You must provide the IP address of the customer gateway device’s external interface. The IP address must be static and can be behind a device performing network address translation (NAT). For devices that use Border Gateway Protocol (BGP), you can also provide the device's BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don't have an ASN already, you can use a private ASN. For more information, see  Customer gateway  options for your Site-to-Site VPN connection in the Amazon Web Services Site-to-Site VPN User Guide. To create more than one customer gateway with the same VPN type, IP address, and BGP ASN, specify a unique device name for each customer gateway. An identical request returns information about the existing customer gateway; it doesn't create a new customer gateway.
    @Sendable
    @inlinable
    public func createCustomerGateway(_ input: CreateCustomerGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateCustomerGatewayResult {
        try await self.client.execute(
            operation: "CreateCustomerGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provides information to Amazon Web Services about your customer gateway device. The customer gateway device is the appliance at your end of the VPN connection. You must provide the IP address of the customer gateway device’s external interface. The IP address must be static and can be behind a device performing network address translation (NAT). For devices that use Border Gateway Protocol (BGP), you can also provide the device's BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don't have an ASN already, you can use a private ASN. For more information, see  Customer gateway  options for your Site-to-Site VPN connection in the Amazon Web Services Site-to-Site VPN User Guide. To create more than one customer gateway with the same VPN type, IP address, and BGP ASN, specify a unique device name for each customer gateway. An identical request returns information about the existing customer gateway; it doesn't create a new customer gateway.
    ///
    /// Parameters:
    ///   - bgpAsn: For customer gateway devices that support BGP, specify the device's ASN. You must specify either BgpAsn or BgpAsnExtended when creating the customer gateway. If the ASN is larger than 2,147,483,647, you must use BgpAsnExtended. Default: 65000 Valid values: 1 to 2,147,483,647
    ///   - bgpAsnExtended: For customer gateway devices that support BGP, specify the device's ASN. You must specify either BgpAsn or BgpAsnExtended when creating the customer gateway. If the ASN is larger than 2,147,483,647, you must use BgpAsnExtended. Valid values: 2,147,483,648 to 4,294,967,295
    ///   - certificateArn: The Amazon Resource Name (ARN) for the customer gateway certificate.
    ///   - deviceName: A name for the customer gateway device. Length Constraints: Up to 255 characters.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - ipAddress: IPv4 address for the customer gateway device's outside interface. The address must be static. If OutsideIpAddressType in your VPN connection options is set to PrivateIpv4, you can use an RFC6598 or RFC1918 private IPv4 address. If OutsideIpAddressType is set to PublicIpv4, you can use a public IPv4 address.
    ///   - publicIp:  This member has been deprecated. The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
    ///   - tagSpecifications: The tags to apply to the customer gateway.
    ///   - type: The type of VPN connection that this customer gateway supports (ipsec.1).
    ///   - logger: Logger use during operation
    @inlinable
    public func createCustomerGateway(
        bgpAsn: Int? = nil,
        bgpAsnExtended: Int64? = nil,
        certificateArn: String? = nil,
        deviceName: String? = nil,
        dryRun: Bool? = nil,
        ipAddress: String? = nil,
        publicIp: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        type: GatewayType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateCustomerGatewayResult {
        let input = CreateCustomerGatewayRequest(
            bgpAsn: bgpAsn, 
            bgpAsnExtended: bgpAsnExtended, 
            certificateArn: certificateArn, 
            deviceName: deviceName, 
            dryRun: dryRun, 
            ipAddress: ipAddress, 
            publicIp: publicIp, 
            tagSpecifications: tagSpecifications, 
            type: type
        )
        return try await self.createCustomerGateway(input, logger: logger)
    }

    /// Creates a default subnet with a size /20 IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see Create a default subnet in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createDefaultSubnet(_ input: CreateDefaultSubnetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDefaultSubnetResult {
        try await self.client.execute(
            operation: "CreateDefaultSubnet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a default subnet with a size /20 IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see Create a default subnet in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - availabilityZone: The Availability Zone in which to create the default subnet.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipv6Native: Indicates whether to create an IPv6 only subnet. If you already have a default subnet for this Availability Zone, you must delete it before you can create an IPv6 only subnet.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDefaultSubnet(
        availabilityZone: String? = nil,
        dryRun: Bool? = nil,
        ipv6Native: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDefaultSubnetResult {
        let input = CreateDefaultSubnetRequest(
            availabilityZone: availabilityZone, 
            dryRun: dryRun, 
            ipv6Native: ipv6Native
        )
        return try await self.createDefaultSubnet(input, logger: logger)
    }

    /// Creates a default VPC with a size /16 IPv4 CIDR block and a default subnet
    /// 			in each Availability Zone. For more information about the components of a default VPC,
    /// 			see Default VPCs
    /// 		    in the Amazon VPC User Guide. You cannot specify the components of the
    /// 		    default VPC yourself. If you deleted your previous default VPC, you can create a default VPC. You cannot have
    /// 			more than one default VPC per Region.
    @Sendable
    @inlinable
    public func createDefaultVpc(_ input: CreateDefaultVpcRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDefaultVpcResult {
        try await self.client.execute(
            operation: "CreateDefaultVpc", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a default VPC with a size /16 IPv4 CIDR block and a default subnet
    /// 			in each Availability Zone. For more information about the components of a default VPC,
    /// 			see Default VPCs
    /// 		    in the Amazon VPC User Guide. You cannot specify the components of the
    /// 		    default VPC yourself. If you deleted your previous default VPC, you can create a default VPC. You cannot have
    /// 			more than one default VPC per Region.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDefaultVpc(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDefaultVpcResult {
        let input = CreateDefaultVpcRequest(
            dryRun: dryRun
        )
        return try await self.createDefaultVpc(input, logger: logger)
    }

    /// Creates a custom set of DHCP options. After you create a DHCP option set, you associate
    /// 	       it with a VPC. After you associate a DHCP option set with a VPC, all existing and newly
    /// 	       launched instances in the VPC use this set of DHCP options. The following are the individual DHCP options you can specify. For more information, see  DHCP option sets  in the Amazon VPC User Guide.    domain-name - If you're using AmazonProvidedDNS in us-east-1,  specify ec2.internal. If you're using AmazonProvidedDNS in any other Region,  specify region.compute.internal. Otherwise, specify a custom domain name. This value is used to complete unqualified DNS hostnames. Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP option set is associated with a VPC that has instances running operating systems that treat the value as a single domain, specify only one domain name.    domain-name-servers - The IP addresses of up to four DNS servers, or AmazonProvidedDNS. To specify multiple domain name servers in a single parameter,  separate the IP addresses using commas. To have your instances receive custom DNS  hostnames as specified in domain-name, you must specify a custom DNS server.    ntp-servers - The IP addresses of up to eight Network Time Protocol (NTP) servers (four IPv4 addresses and four IPv6 addresses).    netbios-name-servers - The IP addresses of up to four NetBIOS name servers.    netbios-node-type - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2. Broadcast and multicast are not supported. For more information about  NetBIOS node types, see RFC 2132.    ipv6-address-preferred-lease-time - A value (in seconds, minutes, hours, or years) for how frequently a running instance with an IPv6 assigned to it goes through DHCPv6 lease renewal.  Acceptable values are between 140 and 2147483647 seconds (approximately 68 years). If no value is entered, the default lease time is 140 seconds. If you use long-term addressing for EC2 instances, you can increase the lease time and avoid frequent  lease renewal requests. Lease renewal typically occurs when half of the lease time has elapsed.
    @Sendable
    @inlinable
    public func createDhcpOptions(_ input: CreateDhcpOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateDhcpOptionsResult {
        try await self.client.execute(
            operation: "CreateDhcpOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a custom set of DHCP options. After you create a DHCP option set, you associate
    /// 	       it with a VPC. After you associate a DHCP option set with a VPC, all existing and newly
    /// 	       launched instances in the VPC use this set of DHCP options. The following are the individual DHCP options you can specify. For more information, see  DHCP option sets  in the Amazon VPC User Guide.    domain-name - If you're using AmazonProvidedDNS in us-east-1,  specify ec2.internal. If you're using AmazonProvidedDNS in any other Region,  specify region.compute.internal. Otherwise, specify a custom domain name. This value is used to complete unqualified DNS hostnames. Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP option set is associated with a VPC that has instances running operating systems that treat the value as a single domain, specify only one domain name.    domain-name-servers - The IP addresses of up to four DNS servers, or AmazonProvidedDNS. To specify multiple domain name servers in a single parameter,  separate the IP addresses using commas. To have your instances receive custom DNS  hostnames as specified in domain-name, you must specify a custom DNS server.    ntp-servers - The IP addresses of up to eight Network Time Protocol (NTP) servers (four IPv4 addresses and four IPv6 addresses).    netbios-name-servers - The IP addresses of up to four NetBIOS name servers.    netbios-node-type - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2. Broadcast and multicast are not supported. For more information about  NetBIOS node types, see RFC 2132.    ipv6-address-preferred-lease-time - A value (in seconds, minutes, hours, or years) for how frequently a running instance with an IPv6 assigned to it goes through DHCPv6 lease renewal.  Acceptable values are between 140 and 2147483647 seconds (approximately 68 years). If no value is entered, the default lease time is 140 seconds. If you use long-term addressing for EC2 instances, you can increase the lease time and avoid frequent  lease renewal requests. Lease renewal typically occurs when half of the lease time has elapsed.
    ///
    /// Parameters:
    ///   - dhcpConfigurations: A DHCP configuration option.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags to assign to the DHCP option.
    ///   - logger: Logger use during operation
    @inlinable
    public func createDhcpOptions(
        dhcpConfigurations: [NewDhcpConfiguration]? = nil,
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateDhcpOptionsResult {
        let input = CreateDhcpOptionsRequest(
            dhcpConfigurations: dhcpConfigurations, 
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createDhcpOptions(input, logger: logger)
    }

    /// [IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only
    /// 			internet gateway is used to enable outbound communication over IPv6 from instances in
    /// 			your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6
    /// 			connection with your instance.
    @Sendable
    @inlinable
    public func createEgressOnlyInternetGateway(_ input: CreateEgressOnlyInternetGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateEgressOnlyInternetGatewayResult {
        try await self.client.execute(
            operation: "CreateEgressOnlyInternetGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// [IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only
    /// 			internet gateway is used to enable outbound communication over IPv6 from instances in
    /// 			your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6
    /// 			connection with your instance.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags to assign to the egress-only internet gateway.
    ///   - vpcId: The ID of the VPC for which to create the egress-only internet gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func createEgressOnlyInternetGateway(
        clientToken: String? = nil,
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateEgressOnlyInternetGatewayResult {
        let input = CreateEgressOnlyInternetGatewayRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications, 
            vpcId: vpcId
        )
        return try await self.createEgressOnlyInternetGateway(input, logger: logger)
    }

    /// Creates an EC2 Fleet that contains the configuration information for On-Demand Instances and Spot Instances. Instances are launched immediately if there is available capacity. A single EC2 Fleet can include multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet. For more information, see EC2 Fleet in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createFleet(_ input: CreateFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFleetResult {
        try await self.client.execute(
            operation: "CreateFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an EC2 Fleet that contains the configuration information for On-Demand Instances and Spot Instances. Instances are launched immediately if there is available capacity. A single EC2 Fleet can include multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet. For more information, see EC2 Fleet in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - context: Reserved.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - excessCapacityTerminationPolicy: Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet. Supported only for fleets of type maintain.
    ///   - launchTemplateConfigs: The configuration for the EC2 Fleet.
    ///   - onDemandOptions: Describes the configuration of On-Demand Instances in an EC2 Fleet.
    ///   - replaceUnhealthyInstances: Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for fleets of type maintain. For more information, see EC2 Fleet health checks in the Amazon EC2 User Guide.
    ///   - spotOptions: Describes the configuration of Spot Instances in an EC2 Fleet.
    ///   - tagSpecifications: The key-value pair for tagging the EC2 Fleet request on creation. For more information, see  Tag your resources. If the fleet type is instant, specify a resource type of fleet  to tag the fleet or instance to tag the instances at launch. If the fleet type is maintain or request, specify a resource type of fleet to tag the fleet. You cannot specify a resource type of instance. To tag instances at launch, specify the tags in a launch template.
    ///   - targetCapacitySpecification: The number of units to request.
    ///   - terminateInstancesWithExpiration: Indicates whether running instances should be terminated when the EC2 Fleet expires.
    ///   - type: The fleet type. The default value is maintain.    maintain - The EC2 Fleet places an asynchronous request for your desired capacity, and continues to maintain your desired Spot capacity by replenishing interrupted Spot Instances.    request - The EC2 Fleet places an asynchronous one-time request for your desired capacity, but does submit Spot requests in alternative capacity pools if Spot capacity is unavailable, and does not maintain Spot capacity if Spot Instances are interrupted.    instant - The EC2 Fleet places a synchronous one-time request for your desired capacity, and returns errors for any instances that could not be launched.   For more information, see EC2 Fleet request types in the Amazon EC2 User Guide.
    ///   - validFrom: The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
    ///   - validUntil: The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFleet(
        clientToken: String? = nil,
        context: String? = nil,
        dryRun: Bool? = nil,
        excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil,
        launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]? = nil,
        onDemandOptions: OnDemandOptionsRequest? = nil,
        replaceUnhealthyInstances: Bool? = nil,
        spotOptions: SpotOptionsRequest? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        targetCapacitySpecification: TargetCapacitySpecificationRequest? = nil,
        terminateInstancesWithExpiration: Bool? = nil,
        type: FleetType? = nil,
        validFrom: Date? = nil,
        validUntil: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFleetResult {
        let input = CreateFleetRequest(
            clientToken: clientToken, 
            context: context, 
            dryRun: dryRun, 
            excessCapacityTerminationPolicy: excessCapacityTerminationPolicy, 
            launchTemplateConfigs: launchTemplateConfigs, 
            onDemandOptions: onDemandOptions, 
            replaceUnhealthyInstances: replaceUnhealthyInstances, 
            spotOptions: spotOptions, 
            tagSpecifications: tagSpecifications, 
            targetCapacitySpecification: targetCapacitySpecification, 
            terminateInstancesWithExpiration: terminateInstancesWithExpiration, 
            type: type, 
            validFrom: validFrom, 
            validUntil: validUntil
        )
        return try await self.createFleet(input, logger: logger)
    }

    /// Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC.  Flow log data for a monitored network interface is recorded as flow log records, which are log events  consisting of fields that describe the traffic flow. For more information, see  Flow log records  in the Amazon VPC User Guide. When publishing to CloudWatch Logs, flow log records are published to a log group, and each network  interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all  of the monitored network interfaces are published to a single log file object that is stored in the specified  bucket. For more information, see VPC Flow Logs  in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createFlowLogs(_ input: CreateFlowLogsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFlowLogsResult {
        try await self.client.execute(
            operation: "CreateFlowLogs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC.  Flow log data for a monitored network interface is recorded as flow log records, which are log events  consisting of fields that describe the traffic flow. For more information, see  Flow log records  in the Amazon VPC User Guide. When publishing to CloudWatch Logs, flow log records are published to a log group, and each network  interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all  of the monitored network interfaces are published to a single log file object that is stored in the specified  bucket. For more information, see VPC Flow Logs  in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
    ///   - deliverCrossAccountRole: The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
    ///   - deliverLogsPermissionArn: The ARN of the IAM role that allows Amazon EC2 to publish flow logs to the log destination. This parameter is required if the destination type is cloud-watch-logs, or if the destination type is kinesis-data-firehose and the delivery stream and the resources to monitor are in different accounts.
    ///   - destinationOptions: The destination options.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logDestination: The destination for the flow log data. The meaning of this parameter depends on the destination type.   If the destination type is cloud-watch-logs, specify the ARN of a CloudWatch Logs log group. For example: arn:aws:logs:region:account_id:log-group:my_group  Alternatively, use the LogGroupName parameter.   If the destination type is s3, specify the ARN of an S3 bucket. For example: arn:aws:s3:::my_bucket/my_subfolder/ The subfolder is optional. Note that you can't use AWSLogs as a subfolder name.   If the destination type is kinesis-data-firehose, specify the ARN of a Kinesis Data Firehose delivery stream. For example: arn:aws:firehose:region:account_id:deliverystream:my_stream
    ///   - logDestinationType: The type of destination for the flow log data. Default: cloud-watch-logs
    ///   - logFormat: The fields to include in the flow log record. List the fields in the order in which they should appear. If you omit this parameter, the flow log is created using the default format. If you specify this parameter, you must include at least one field. For more information about the available fields, see Flow log records  in the Amazon VPC User Guide or Transit Gateway Flow Log records in the Amazon Web Services Transit Gateway Guide. Specify the fields using the ${field-id} format, separated by spaces.
    ///   - logGroupName: The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. This parameter is valid only if the destination type is cloud-watch-logs.
    ///   - maxAggregationInterval: The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record.  The possible values are 60 seconds (1 minute) or 600 seconds (10 minutes). This parameter must be 60 seconds for transit gateway resource types. When a network interface is attached to a Nitro-based instance, the aggregation interval is always 60 seconds or less, regardless of the value that you specify. Default: 600
    ///   - resourceIds: The IDs of the resources to monitor. For example, if the resource type is VPC, specify the IDs of the VPCs. Constraints: Maximum of 25 for transit gateway resource types. Maximum of 1000 for the other resource types.
    ///   - resourceType: The type of resource to monitor.
    ///   - tagSpecifications: The tags to apply to the flow logs.
    ///   - trafficType: The type of traffic to monitor (accepted traffic, rejected traffic, or all traffic). This parameter is not supported for transit gateway resource types. It is required for the other resource types.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFlowLogs(
        clientToken: String? = nil,
        deliverCrossAccountRole: String? = nil,
        deliverLogsPermissionArn: String? = nil,
        destinationOptions: DestinationOptionsRequest? = nil,
        dryRun: Bool? = nil,
        logDestination: String? = nil,
        logDestinationType: LogDestinationType? = nil,
        logFormat: String? = nil,
        logGroupName: String? = nil,
        maxAggregationInterval: Int? = nil,
        resourceIds: [String]? = nil,
        resourceType: FlowLogsResourceType? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        trafficType: TrafficType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFlowLogsResult {
        let input = CreateFlowLogsRequest(
            clientToken: clientToken, 
            deliverCrossAccountRole: deliverCrossAccountRole, 
            deliverLogsPermissionArn: deliverLogsPermissionArn, 
            destinationOptions: destinationOptions, 
            dryRun: dryRun, 
            logDestination: logDestination, 
            logDestinationType: logDestinationType, 
            logFormat: logFormat, 
            logGroupName: logGroupName, 
            maxAggregationInterval: maxAggregationInterval, 
            resourceIds: resourceIds, 
            resourceType: resourceType, 
            tagSpecifications: tagSpecifications, 
            trafficType: trafficType
        )
        return try await self.createFlowLogs(input, logger: logger)
    }

    /// Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP). The create operation is asynchronous. To verify that the AFI is ready for use,  check the output logs. An AFI contains the FPGA bitstream that is ready to download to an FPGA.  You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the Amazon Web Services FPGA Hardware Development Kit.
    @Sendable
    @inlinable
    public func createFpgaImage(_ input: CreateFpgaImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateFpgaImageResult {
        try await self.client.execute(
            operation: "CreateFpgaImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP). The create operation is asynchronous. To verify that the AFI is ready for use,  check the output logs. An AFI contains the FPGA bitstream that is ready to download to an FPGA.  You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the Amazon Web Services FPGA Hardware Development Kit.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.  	For more information, see Ensuring Idempotency.
    ///   - description: A description for the AFI.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - inputStorageLocation: The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.
    ///   - logsStorageLocation: The location in Amazon S3 for the output logs.
    ///   - name: A name for the AFI.
    ///   - tagSpecifications: The tags to apply to the FPGA image during creation.
    ///   - logger: Logger use during operation
    @inlinable
    public func createFpgaImage(
        clientToken: String? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        inputStorageLocation: StorageLocation? = nil,
        logsStorageLocation: StorageLocation? = nil,
        name: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateFpgaImageResult {
        let input = CreateFpgaImageRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            inputStorageLocation: inputStorageLocation, 
            logsStorageLocation: logsStorageLocation, 
            name: name, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createFpgaImage(input, logger: logger)
    }

    /// Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped. If you customized your instance with instance store volumes or Amazon EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes. For more information, see Create an Amazon EBS-backed Linux AMI in the Amazon Elastic Compute Cloud User Guide.
    @Sendable
    @inlinable
    public func createImage(_ input: CreateImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateImageResult {
        try await self.client.execute(
            operation: "CreateImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped. If you customized your instance with instance store volumes or Amazon EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes. For more information, see Create an Amazon EBS-backed Linux AMI in the Amazon Elastic Compute Cloud User Guide.
    ///
    /// Parameters:
    ///   - blockDeviceMappings: The block device mappings. When using the CreateImage action:   You can't change the volume size using the VolumeSize parameter. If you want a different volume size, you must first change the volume size of the source instance.   You can't modify the encryption status of existing volumes or snapshots. To create an AMI with volumes or snapshots that have a different encryption status (for example, where the source volume and snapshots are unencrypted, and you want to create an AMI with encrypted volumes or snapshots), use the CopyImage action.   The only option that can be changed for existing mappings or snapshots is DeleteOnTermination.
    ///   - description: A description for the new image.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - instanceId: The ID of the instance.
    ///   - name: A name for the new image. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
    ///   - noReboot: Indicates whether or not the instance should be automatically rebooted before creating the image. Specify one of the following values:    true - The instance is not rebooted before creating the image. This creates crash-consistent snapshots that include only the data that has been written to the volumes at the time the snapshots are created. Buffered data and data in memory that has not yet been written to the volumes is not included in the snapshots.    false - The instance is rebooted before creating the image. This ensures that all buffered data and data in memory is written to the volumes before the snapshots are created.   Default: false
    ///   - tagSpecifications: The tags to apply to the AMI and snapshots on creation. You can tag the AMI, the snapshots, or both.   To tag the AMI, the value for ResourceType must be image.   To tag the snapshots that are created of the root volume and of other Amazon EBS volumes that are attached to the instance, the value for ResourceType must be snapshot. The same tag is applied to all of the snapshots that are created.   If you specify other values for ResourceType, the request fails. To tag an AMI or snapshot after it has been created, see CreateTags.
    ///   - logger: Logger use during operation
    @inlinable
    public func createImage(
        blockDeviceMappings: [BlockDeviceMapping]? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        name: String? = nil,
        noReboot: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateImageResult {
        let input = CreateImageRequest(
            blockDeviceMappings: blockDeviceMappings, 
            description: description, 
            dryRun: dryRun, 
            instanceId: instanceId, 
            name: name, 
            noReboot: noReboot, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createImage(input, logger: logger)
    }

    /// Creates an EC2 Instance Connect Endpoint. An EC2 Instance Connect Endpoint allows you to connect to an instance, without requiring the instance to have a public IPv4 address. For more information, see Connect to your instances without requiring a public IPv4 address using EC2 Instance Connect Endpoint in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createInstanceConnectEndpoint(_ input: CreateInstanceConnectEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInstanceConnectEndpointResult {
        try await self.client.execute(
            operation: "CreateInstanceConnectEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an EC2 Instance Connect Endpoint. An EC2 Instance Connect Endpoint allows you to connect to an instance, without requiring the instance to have a public IPv4 address. For more information, see Connect to your instances without requiring a public IPv4 address using EC2 Instance Connect Endpoint in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - preserveClientIp: Indicates whether the client IP address is preserved as the source. The following are the possible values.    true - Use the client IP address as the source.    false - Use the network interface IP address as the source.   Default: false
    ///   - securityGroupIds: One or more security groups to associate with the endpoint. If you don't specify a security group,  the default security group for your VPC will be associated with the endpoint.
    ///   - subnetId: The ID of the subnet in which to create the EC2 Instance Connect Endpoint.
    ///   - tagSpecifications: The tags to apply to the EC2 Instance Connect Endpoint during creation.
    ///   - logger: Logger use during operation
    @inlinable
    public func createInstanceConnectEndpoint(
        clientToken: String? = CreateInstanceConnectEndpointRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        preserveClientIp: Bool? = nil,
        securityGroupIds: [String]? = nil,
        subnetId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateInstanceConnectEndpointResult {
        let input = CreateInstanceConnectEndpointRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            preserveClientIp: preserveClientIp, 
            securityGroupIds: securityGroupIds, 
            subnetId: subnetId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createInstanceConnectEndpoint(input, logger: logger)
    }

    /// Creates an event window in which scheduled events for the associated Amazon EC2 instances can run. You can define either a set of time ranges or a cron expression when creating the event window, but not both. All event window times are in UTC. You can create up to 200 event windows per Amazon Web Services Region. When you create the event window, targets (instance IDs, Dedicated Host IDs, or tags) are not yet associated with it. To ensure that the event window can be used, you must associate one or more targets with it by using the AssociateInstanceEventWindow API.  Event windows are applicable only for scheduled events that stop, reboot, or terminate instances. Event windows are not applicable for:   Expedited scheduled events and network maintenance events.    Unscheduled maintenance such as AutoRecovery and unplanned reboots.    For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createInstanceEventWindow(_ input: CreateInstanceEventWindowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInstanceEventWindowResult {
        try await self.client.execute(
            operation: "CreateInstanceEventWindow", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an event window in which scheduled events for the associated Amazon EC2 instances can run. You can define either a set of time ranges or a cron expression when creating the event window, but not both. All event window times are in UTC. You can create up to 200 event windows per Amazon Web Services Region. When you create the event window, targets (instance IDs, Dedicated Host IDs, or tags) are not yet associated with it. To ensure that the event window can be used, you must associate one or more targets with it by using the AssociateInstanceEventWindow API.  Event windows are applicable only for scheduled events that stop, reboot, or terminate instances. Event windows are not applicable for:   Expedited scheduled events and network maintenance events.    Unscheduled maintenance such as AutoRecovery and unplanned reboots.    For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - cronExpression: The cron expression for the event window, for example, * 0-4,20-23 * * 1,5. If you specify a cron expression, you can't specify a time range. Constraints:   Only hour and day of the week values are supported.   For day of the week values, you can specify either integers 0 through 6, or alternative single values SUN through SAT.   The minute, month, and year must be specified by *.   The hour value must be one or a multiple range, for example, 0-4 or 0-4,20-23.   Each hour range must be >= 2 hours, for example, 0-2 or 20-23.   The event window must be >= 4 hours. The combined total time ranges in the event window must be >= 4 hours.   For more information about cron expressions, see cron on the Wikipedia website.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - name: The name of the event window.
    ///   - tagSpecifications: The tags to apply to the event window.
    ///   - timeRanges: The time range for the event window. If you specify a time range, you can't specify a cron expression.
    ///   - logger: Logger use during operation
    @inlinable
    public func createInstanceEventWindow(
        cronExpression: String? = nil,
        dryRun: Bool? = nil,
        name: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        timeRanges: [InstanceEventWindowTimeRangeRequest]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateInstanceEventWindowResult {
        let input = CreateInstanceEventWindowRequest(
            cronExpression: cronExpression, 
            dryRun: dryRun, 
            name: name, 
            tagSpecifications: tagSpecifications, 
            timeRanges: timeRanges
        )
        return try await self.createInstanceEventWindow(input, logger: logger)
    }

    /// Exports a running or stopped instance to an Amazon S3 bucket. For information about the prerequisites for your Amazon S3 bucket, supported operating systems, image formats, and known limitations for the types of instances you can export, see Exporting an instance as a VM Using VM Import/Export in the VM Import/Export User Guide.
    @Sendable
    @inlinable
    public func createInstanceExportTask(_ input: CreateInstanceExportTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInstanceExportTaskResult {
        try await self.client.execute(
            operation: "CreateInstanceExportTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Exports a running or stopped instance to an Amazon S3 bucket. For information about the prerequisites for your Amazon S3 bucket, supported operating systems, image formats, and known limitations for the types of instances you can export, see Exporting an instance as a VM Using VM Import/Export in the VM Import/Export User Guide.
    ///
    /// Parameters:
    ///   - description: A description for the conversion task or the resource being exported. The maximum length is 255 characters.
    ///   - exportToS3Task: The format and location for an export instance task.
    ///   - instanceId: The ID of the instance.
    ///   - tagSpecifications: The tags to apply to the export instance task during creation.
    ///   - targetEnvironment: The target virtualization environment.
    ///   - logger: Logger use during operation
    @inlinable
    public func createInstanceExportTask(
        description: String? = nil,
        exportToS3Task: ExportToS3TaskSpecification? = nil,
        instanceId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        targetEnvironment: ExportEnvironment? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateInstanceExportTaskResult {
        let input = CreateInstanceExportTaskRequest(
            description: description, 
            exportToS3Task: exportToS3Task, 
            instanceId: instanceId, 
            tagSpecifications: tagSpecifications, 
            targetEnvironment: targetEnvironment
        )
        return try await self.createInstanceExportTask(input, logger: logger)
    }

    /// Creates an internet gateway for use with a VPC. After creating the internet gateway,
    /// 			you attach it to a VPC using AttachInternetGateway. For more information, see Internet gateways in the  Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createInternetGateway(_ input: CreateInternetGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateInternetGatewayResult {
        try await self.client.execute(
            operation: "CreateInternetGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an internet gateway for use with a VPC. After creating the internet gateway,
    /// 			you attach it to a VPC using AttachInternetGateway. For more information, see Internet gateways in the  Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags to assign to the internet gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func createInternetGateway(
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateInternetGatewayResult {
        let input = CreateInternetGatewayRequest(
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createInternetGateway(input, logger: logger)
    }

    /// Create an IPAM. Amazon VPC IP Address Manager (IPAM) is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see Create an IPAM in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func createIpam(_ input: CreateIpamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIpamResult {
        try await self.client.execute(
            operation: "CreateIpam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create an IPAM. Amazon VPC IP Address Manager (IPAM) is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see Create an IPAM in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - description: A description for the IPAM.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - enablePrivateGua: Enable this option to use your own GUA ranges as private IPv6 addresses. This option is disabled by default.
    ///   - operatingRegions: The operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.  For more information about operating Regions, see Create an IPAM in the Amazon VPC IPAM User Guide.
    ///   - tagSpecifications: The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - tier: IPAM is offered in a Free Tier and an Advanced Tier. For more information about the features available in each tier and the costs associated with the tiers, see Amazon VPC pricing > IPAM tab.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIpam(
        clientToken: String? = CreateIpamRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        enablePrivateGua: Bool? = nil,
        operatingRegions: [AddIpamOperatingRegion]? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        tier: IpamTier? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIpamResult {
        let input = CreateIpamRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            enablePrivateGua: enablePrivateGua, 
            operatingRegions: operatingRegions, 
            tagSpecifications: tagSpecifications, 
            tier: tier
        )
        return try await self.createIpam(input, logger: logger)
    }

    /// Create a verification token. A verification token is an Amazon Web Services-generated random value that you can use to prove ownership of an external resource. For example, you can use a verification token to validate that you control a public IP address range when you bring an IP address range to Amazon Web Services (BYOIP).
    @Sendable
    @inlinable
    public func createIpamExternalResourceVerificationToken(_ input: CreateIpamExternalResourceVerificationTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIpamExternalResourceVerificationTokenResult {
        try await self.client.execute(
            operation: "CreateIpamExternalResourceVerificationToken", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create a verification token. A verification token is an Amazon Web Services-generated random value that you can use to prove ownership of an external resource. For example, you can use a verification token to validate that you control a public IP address range when you bring an IP address range to Amazon Web Services (BYOIP).
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamId: The ID of the IPAM that will create the token.
    ///   - tagSpecifications: Token tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIpamExternalResourceVerificationToken(
        clientToken: String? = CreateIpamExternalResourceVerificationTokenRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        ipamId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIpamExternalResourceVerificationTokenResult {
        let input = CreateIpamExternalResourceVerificationTokenRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            ipamId: ipamId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createIpamExternalResourceVerificationToken(input, logger: logger)
    }

    /// Create an IP address pool for Amazon VPC IP Address Manager (IPAM). In IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools enable you to organize your IP addresses according to your routing and security needs. For example, if you have separate routing and security needs for development and production applications, you can create a pool for each. For more information, see Create a top-level pool in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func createIpamPool(_ input: CreateIpamPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIpamPoolResult {
        try await self.client.execute(
            operation: "CreateIpamPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create an IP address pool for Amazon VPC IP Address Manager (IPAM). In IPAM, a pool is a collection of contiguous IP addresses CIDRs. Pools enable you to organize your IP addresses according to your routing and security needs. For example, if you have separate routing and security needs for development and production applications, you can create a pool for each. For more information, see Create a top-level pool in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - addressFamily: The IP protocol assigned to this IPAM pool. You must choose either IPv4 or IPv6 protocol for a pool.
    ///   - allocationDefaultNetmaskLength: The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here,  new allocations will default to 10.0.0.0/16.
    ///   - allocationMaxNetmaskLength: The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. The maximum netmask length must be  greater than the minimum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.
    ///   - allocationMinNetmaskLength: The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. The minimum netmask length must be  less than the maximum netmask length. Possible netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.
    ///   - allocationResourceTags: Tags that are required for resources that use CIDRs from this IPAM pool. Resources that do not have these tags will not be allowed to allocate space from the pool. If the resources have their tags changed after they have allocated space or if the allocation tagging requirements are changed on the pool, the resource may be marked as noncompliant.
    ///   - autoImport: If selected, IPAM will continuously look for resources within the CIDR range of this pool  and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import  a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently  marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM  discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.  A locale must be set on the pool for this feature to work.
    ///   - awsService: Limits which service in Amazon Web Services that the pool can be used in. "ec2", for example, allows users to use space for Elastic IP addresses and VPCs.
    ///   - clientToken: A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - description: A description for the IPAM pool.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamScopeId: The ID of the scope in which you would like to create the IPAM pool.
    ///   - locale: The locale for the pool should be one of the following:   An Amazon Web Services Region where you want this IPAM pool to be available for allocations.   The network border group for an Amazon Web Services Local Zone where you want this IPAM pool to be available for allocations (supported Local Zones). This option is only available for IPAM IPv4 pools in the public scope.   Possible values: Any Amazon Web Services Region or supported Amazon Web Services Local Zone. Default is none and means any locale.
    ///   - publicIpSource: The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is byoip. For more information, see Create IPv6 pools in the Amazon VPC IPAM User Guide.  By default, you can add only one Amazon-provided IPv6 CIDR block to a top-level IPv6 pool if PublicIpSource is amazon. For information on increasing the default limit, see  Quotas for your IPAM in the Amazon VPC IPAM User Guide.
    ///   - publiclyAdvertisable: Determines if the pool is publicly advertisable. The request can only contain PubliclyAdvertisable if AddressFamily is ipv6 and PublicIpSource is byoip.
    ///   - sourceIpamPoolId: The ID of the source IPAM pool. Use this option to create a pool within an existing pool. Note that the CIDR you provision for the pool within the source pool must be available in the source pool's CIDR range.
    ///   - sourceResource: The resource used to provision CIDRs to a resource planning pool.
    ///   - tagSpecifications: The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIpamPool(
        addressFamily: AddressFamily? = nil,
        allocationDefaultNetmaskLength: Int? = nil,
        allocationMaxNetmaskLength: Int? = nil,
        allocationMinNetmaskLength: Int? = nil,
        allocationResourceTags: [RequestIpamResourceTag]? = nil,
        autoImport: Bool? = nil,
        awsService: IpamPoolAwsService? = nil,
        clientToken: String? = CreateIpamPoolRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        ipamScopeId: String? = nil,
        locale: String? = nil,
        publicIpSource: IpamPoolPublicIpSource? = nil,
        publiclyAdvertisable: Bool? = nil,
        sourceIpamPoolId: String? = nil,
        sourceResource: IpamPoolSourceResourceRequest? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIpamPoolResult {
        let input = CreateIpamPoolRequest(
            addressFamily: addressFamily, 
            allocationDefaultNetmaskLength: allocationDefaultNetmaskLength, 
            allocationMaxNetmaskLength: allocationMaxNetmaskLength, 
            allocationMinNetmaskLength: allocationMinNetmaskLength, 
            allocationResourceTags: allocationResourceTags, 
            autoImport: autoImport, 
            awsService: awsService, 
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            ipamScopeId: ipamScopeId, 
            locale: locale, 
            publicIpSource: publicIpSource, 
            publiclyAdvertisable: publiclyAdvertisable, 
            sourceIpamPoolId: sourceIpamPoolId, 
            sourceResource: sourceResource, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createIpamPool(input, logger: logger)
    }

    /// Creates an IPAM resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    @Sendable
    @inlinable
    public func createIpamResourceDiscovery(_ input: CreateIpamResourceDiscoveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIpamResourceDiscoveryResult {
        try await self.client.execute(
            operation: "CreateIpamResourceDiscovery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an IPAM resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    ///
    /// Parameters:
    ///   - clientToken: A client token for the IPAM resource discovery.
    ///   - description: A description for the IPAM resource discovery.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - operatingRegions: Operating Regions for the IPAM resource discovery. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.
    ///   - tagSpecifications: Tag specifications for the IPAM resource discovery.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIpamResourceDiscovery(
        clientToken: String? = CreateIpamResourceDiscoveryRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        operatingRegions: [AddIpamOperatingRegion]? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIpamResourceDiscoveryResult {
        let input = CreateIpamResourceDiscoveryRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            operatingRegions: operatingRegions, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createIpamResourceDiscovery(input, logger: logger)
    }

    /// Create an IPAM scope. In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict. For more information, see Add a scope in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func createIpamScope(_ input: CreateIpamScopeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateIpamScopeResult {
        try await self.client.execute(
            operation: "CreateIpamScope", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create an IPAM scope. In IPAM, a scope is the highest-level container within IPAM. An IPAM contains two default scopes. Each scope represents the IP space for a single network. The private scope is intended for all private IP address space. The public scope is intended for all public IP address space. Scopes enable you to reuse IP addresses across multiple unconnected networks without causing IP address overlap or conflict. For more information, see Add a scope in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - description: A description for the scope you're creating.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamId: The ID of the IPAM for which you're creating this scope.
    ///   - tagSpecifications: The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - logger: Logger use during operation
    @inlinable
    public func createIpamScope(
        clientToken: String? = CreateIpamScopeRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        ipamId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateIpamScopeResult {
        let input = CreateIpamScopeRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            ipamId: ipamId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createIpamScope(input, logger: logger)
    }

    /// Creates an ED25519 or 2048-bit RSA key pair with the specified name and in the specified format. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key or an unencrypted PPK formatted private key for use with PuTTY. If a key with the specified name already exists, Amazon EC2 returns an error. The key pair returned to you is available only in the Amazon Web Services Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using ImportKeyPair. You can have up to 5,000 key pairs per Amazon Web Services Region. For more information, see Amazon EC2 key pairs in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createKeyPair(_ input: CreateKeyPairRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> KeyPair {
        try await self.client.execute(
            operation: "CreateKeyPair", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an ED25519 or 2048-bit RSA key pair with the specified name and in the specified format. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key or an unencrypted PPK formatted private key for use with PuTTY. If a key with the specified name already exists, Amazon EC2 returns an error. The key pair returned to you is available only in the Amazon Web Services Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using ImportKeyPair. You can have up to 5,000 key pairs per Amazon Web Services Region. For more information, see Amazon EC2 key pairs in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - keyFormat: The format of the key pair. Default: pem
    ///   - keyName: A unique name for the key pair. Constraints: Up to 255 ASCII characters
    ///   - keyType: The type of key pair. Note that ED25519 keys are not supported for Windows instances. Default: rsa
    ///   - tagSpecifications: The tags to apply to the new key pair.
    ///   - logger: Logger use during operation
    @inlinable
    public func createKeyPair(
        dryRun: Bool? = nil,
        keyFormat: KeyFormat? = nil,
        keyName: String? = nil,
        keyType: KeyType? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> KeyPair {
        let input = CreateKeyPairRequest(
            dryRun: dryRun, 
            keyFormat: keyFormat, 
            keyName: keyName, 
            keyType: keyType, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createKeyPair(input, logger: logger)
    }

    /// Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using RunInstances, you can specify a launch template instead of providing the launch parameters in the request. For more information, see Launch an instance from a launch template in the Amazon EC2 User Guide. To clone an existing launch template as the basis for a new launch template, use the  Amazon EC2 console. The API, SDKs, and CLI do not support cloning a template. For more  information, see Create a launch template from an existing launch template in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createLaunchTemplate(_ input: CreateLaunchTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLaunchTemplateResult {
        try await self.client.execute(
            operation: "CreateLaunchTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using RunInstances, you can specify a launch template instead of providing the launch parameters in the request. For more information, see Launch an instance from a launch template in the Amazon EC2 User Guide. To clone an existing launch template as the basis for a new launch template, use the  Amazon EC2 console. The API, SDKs, and CLI do not support cloning a template. For more  information, see Create a launch template from an existing launch template in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency. Constraint: Maximum 128 ASCII characters.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - launchTemplateData: The information for the launch template.
    ///   - launchTemplateName: A name for the launch template.
    ///   - operator: Reserved for internal use.
    ///   - tagSpecifications: The tags to apply to the launch template on creation. To tag the launch template, the resource type must be launch-template. To specify the tags for the resources that are created when an instance is launched, you must use the TagSpecifications parameter in the launch template data structure.
    ///   - versionDescription: A description for the first version of the launch template.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLaunchTemplate(
        clientToken: String? = nil,
        dryRun: Bool? = nil,
        launchTemplateData: RequestLaunchTemplateData? = nil,
        launchTemplateName: String? = nil,
        operator: OperatorRequest? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        versionDescription: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLaunchTemplateResult {
        let input = CreateLaunchTemplateRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            launchTemplateData: launchTemplateData, 
            launchTemplateName: launchTemplateName, 
            operator: `operator`, 
            tagSpecifications: tagSpecifications, 
            versionDescription: versionDescription
        )
        return try await self.createLaunchTemplate(input, logger: logger)
    }

    /// Creates a new version of a launch template. You must specify an existing launch template, either by name or ID. You can determine whether the new version inherits  parameters from a source version, and add or overwrite parameters as needed. Launch template versions are numbered in the order in which they are created. You can't specify, change, or replace the numbering of launch template versions. Launch templates are immutable; after you create a launch template, you can't modify it. Instead, you can create a new version of the launch template that includes the changes that you require. For more information, see Modify a launch template (manage launch template versions) in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createLaunchTemplateVersion(_ input: CreateLaunchTemplateVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLaunchTemplateVersionResult {
        try await self.client.execute(
            operation: "CreateLaunchTemplateVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a new version of a launch template. You must specify an existing launch template, either by name or ID. You can determine whether the new version inherits  parameters from a source version, and add or overwrite parameters as needed. Launch template versions are numbered in the order in which they are created. You can't specify, change, or replace the numbering of launch template versions. Launch templates are immutable; after you create a launch template, you can't modify it. Instead, you can create a new version of the launch template that includes the changes that you require. For more information, see Modify a launch template (manage launch template versions) in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency. Constraint: Maximum 128 ASCII characters.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - launchTemplateData: The information for the launch template.
    ///   - launchTemplateId: The ID of the launch template. You must specify either the launch template ID or the launch template name, but not both.
    ///   - launchTemplateName: The name of the launch template. You must specify either the launch template ID or the launch template name, but not both.
    ///   - resolveAlias: If true, and if a Systems Manager parameter is specified for ImageId, the AMI ID is displayed in the response for imageID. For more information, see Use a Systems  Manager parameter instead of an AMI ID in the Amazon EC2 User Guide. Default: false
    ///   - sourceVersion: The version of the launch template on which to base the new version.  Snapshots applied to the block device mapping are ignored when creating a new version  unless they are explicitly included. If you specify this parameter, the new version inherits the launch parameters from the source version. If you specify additional launch parameters for the new version, they  overwrite any corresponding launch parameters inherited from the source version. If you omit this parameter, the new version contains only the launch parameters that you specify for the new version.
    ///   - versionDescription: A description for the version of the launch template.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLaunchTemplateVersion(
        clientToken: String? = nil,
        dryRun: Bool? = nil,
        launchTemplateData: RequestLaunchTemplateData? = nil,
        launchTemplateId: String? = nil,
        launchTemplateName: String? = nil,
        resolveAlias: Bool? = nil,
        sourceVersion: String? = nil,
        versionDescription: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLaunchTemplateVersionResult {
        let input = CreateLaunchTemplateVersionRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            launchTemplateData: launchTemplateData, 
            launchTemplateId: launchTemplateId, 
            launchTemplateName: launchTemplateName, 
            resolveAlias: resolveAlias, 
            sourceVersion: sourceVersion, 
            versionDescription: versionDescription
        )
        return try await self.createLaunchTemplateVersion(input, logger: logger)
    }

    /// Creates a static route for the specified local gateway route table. You must specify one of the  following targets:     LocalGatewayVirtualInterfaceGroupId     NetworkInterfaceId
    @Sendable
    @inlinable
    public func createLocalGatewayRoute(_ input: CreateLocalGatewayRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLocalGatewayRouteResult {
        try await self.client.execute(
            operation: "CreateLocalGatewayRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a static route for the specified local gateway route table. You must specify one of the  following targets:     LocalGatewayVirtualInterfaceGroupId     NetworkInterfaceId
    ///
    /// Parameters:
    ///   - destinationCidrBlock: The CIDR range used for destination matches. Routing decisions are based on  the most specific match.
    ///   - destinationPrefixListId:  The ID of the prefix list. Use a prefix list in place of DestinationCidrBlock. You  cannot use DestinationPrefixListId and DestinationCidrBlock in the same request.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayRouteTableId: The ID of the local gateway route table.
    ///   - localGatewayVirtualInterfaceGroupId: The ID of the virtual interface group.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLocalGatewayRoute(
        destinationCidrBlock: String? = nil,
        destinationPrefixListId: String? = nil,
        dryRun: Bool? = nil,
        localGatewayRouteTableId: String? = nil,
        localGatewayVirtualInterfaceGroupId: String? = nil,
        networkInterfaceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLocalGatewayRouteResult {
        let input = CreateLocalGatewayRouteRequest(
            destinationCidrBlock: destinationCidrBlock, 
            destinationPrefixListId: destinationPrefixListId, 
            dryRun: dryRun, 
            localGatewayRouteTableId: localGatewayRouteTableId, 
            localGatewayVirtualInterfaceGroupId: localGatewayVirtualInterfaceGroupId, 
            networkInterfaceId: networkInterfaceId
        )
        return try await self.createLocalGatewayRoute(input, logger: logger)
    }

    ///  Creates a local gateway route table.
    @Sendable
    @inlinable
    public func createLocalGatewayRouteTable(_ input: CreateLocalGatewayRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLocalGatewayRouteTableResult {
        try await self.client.execute(
            operation: "CreateLocalGatewayRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Creates a local gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayId:  The ID of the local gateway.
    ///   - mode:  The mode of the local gateway route table.
    ///   - tagSpecifications:  The tags assigned to the local gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLocalGatewayRouteTable(
        dryRun: Bool? = nil,
        localGatewayId: String? = nil,
        mode: LocalGatewayRouteTableMode? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLocalGatewayRouteTableResult {
        let input = CreateLocalGatewayRouteTableRequest(
            dryRun: dryRun, 
            localGatewayId: localGatewayId, 
            mode: mode, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createLocalGatewayRouteTable(input, logger: logger)
    }

    ///  Creates a local gateway route table virtual interface group association.
    @Sendable
    @inlinable
    public func createLocalGatewayRouteTableVirtualInterfaceGroupAssociation(_ input: CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult {
        try await self.client.execute(
            operation: "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Creates a local gateway route table virtual interface group association.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayRouteTableId:  The ID of the local gateway route table.
    ///   - localGatewayVirtualInterfaceGroupId:  The ID of the local gateway route table virtual interface group association.
    ///   - tagSpecifications:  The tags assigned to the local gateway route table virtual interface group association.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLocalGatewayRouteTableVirtualInterfaceGroupAssociation(
        dryRun: Bool? = nil,
        localGatewayRouteTableId: String? = nil,
        localGatewayVirtualInterfaceGroupId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult {
        let input = CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(
            dryRun: dryRun, 
            localGatewayRouteTableId: localGatewayRouteTableId, 
            localGatewayVirtualInterfaceGroupId: localGatewayVirtualInterfaceGroupId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createLocalGatewayRouteTableVirtualInterfaceGroupAssociation(input, logger: logger)
    }

    /// Associates the specified VPC with the specified local gateway route table.
    @Sendable
    @inlinable
    public func createLocalGatewayRouteTableVpcAssociation(_ input: CreateLocalGatewayRouteTableVpcAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateLocalGatewayRouteTableVpcAssociationResult {
        try await self.client.execute(
            operation: "CreateLocalGatewayRouteTableVpcAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Associates the specified VPC with the specified local gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayRouteTableId: The ID of the local gateway route table.
    ///   - tagSpecifications: The tags to assign to the local gateway route table VPC association.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func createLocalGatewayRouteTableVpcAssociation(
        dryRun: Bool? = nil,
        localGatewayRouteTableId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateLocalGatewayRouteTableVpcAssociationResult {
        let input = CreateLocalGatewayRouteTableVpcAssociationRequest(
            dryRun: dryRun, 
            localGatewayRouteTableId: localGatewayRouteTableId, 
            tagSpecifications: tagSpecifications, 
            vpcId: vpcId
        )
        return try await self.createLocalGatewayRouteTableVpcAssociation(input, logger: logger)
    }

    /// Creates a managed prefix list. You can specify one or more entries for the prefix list.  Each entry consists of a CIDR block and an optional description.
    @Sendable
    @inlinable
    public func createManagedPrefixList(_ input: CreateManagedPrefixListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateManagedPrefixListResult {
        try await self.client.execute(
            operation: "CreateManagedPrefixList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a managed prefix list. You can specify one or more entries for the prefix list.  Each entry consists of a CIDR block and an optional description.
    ///
    /// Parameters:
    ///   - addressFamily: The IP address type. Valid Values: IPv4 | IPv6
    ///   - clientToken: Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency. Constraints: Up to 255 UTF-8 characters in length.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - entries: One or more entries for the prefix list.
    ///   - maxEntries: The maximum number of entries for the prefix list.
    ///   - prefixListName: A name for the prefix list. Constraints: Up to 255 characters in length. The name cannot start with com.amazonaws.
    ///   - tagSpecifications: The tags to apply to the prefix list during creation.
    ///   - logger: Logger use during operation
    @inlinable
    public func createManagedPrefixList(
        addressFamily: String? = nil,
        clientToken: String? = CreateManagedPrefixListRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        entries: [AddPrefixListEntry]? = nil,
        maxEntries: Int? = nil,
        prefixListName: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateManagedPrefixListResult {
        let input = CreateManagedPrefixListRequest(
            addressFamily: addressFamily, 
            clientToken: clientToken, 
            dryRun: dryRun, 
            entries: entries, 
            maxEntries: maxEntries, 
            prefixListName: prefixListName, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createManagedPrefixList(input, logger: logger)
    }

    /// Creates a NAT gateway in the specified subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. You can create either a public NAT gateway or a private NAT gateway. With a public NAT gateway, internet-bound traffic from a private subnet can be routed to the NAT gateway, so that instances in a private subnet can connect to the internet. With a private NAT gateway, private communication is routed across VPCs and on-premises networks through a transit gateway or virtual private gateway. Common use cases include running large workloads behind a small pool of allowlisted IPv4 addresses, preserving private IPv4 addresses, and communicating between overlapping networks. For more information, see NAT gateways in the Amazon VPC User Guide.  When you create a public NAT gateway and assign it an EIP or secondary EIPs,  the network border group of the EIPs must match the network border group of the Availability Zone (AZ)  that the public NAT gateway is in. If it's not the same, the NAT gateway will fail to launch.  You can see the network border group for the subnet's AZ by viewing the details of the subnet.  Similarly, you can view the network border group of an EIP by viewing the details of the EIP address.  For more information about network border groups and EIPs, see Allocate an Elastic IP address  in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createNatGateway(_ input: CreateNatGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNatGatewayResult {
        try await self.client.execute(
            operation: "CreateNatGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a NAT gateway in the specified subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. You can create either a public NAT gateway or a private NAT gateway. With a public NAT gateway, internet-bound traffic from a private subnet can be routed to the NAT gateway, so that instances in a private subnet can connect to the internet. With a private NAT gateway, private communication is routed across VPCs and on-premises networks through a transit gateway or virtual private gateway. Common use cases include running large workloads behind a small pool of allowlisted IPv4 addresses, preserving private IPv4 addresses, and communicating between overlapping networks. For more information, see NAT gateways in the Amazon VPC User Guide.  When you create a public NAT gateway and assign it an EIP or secondary EIPs,  the network border group of the EIPs must match the network border group of the Availability Zone (AZ)  that the public NAT gateway is in. If it's not the same, the NAT gateway will fail to launch.  You can see the network border group for the subnet's AZ by viewing the details of the subnet.  Similarly, you can view the network border group of an EIP by viewing the details of the EIP address.  For more information about network border groups and EIPs, see Allocate an Elastic IP address  in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - allocationId: [Public NAT gateways only] The allocation ID of an Elastic IP address to associate  with the NAT gateway. You cannot specify an Elastic IP address with a private NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the
    ///   - connectivityType: Indicates whether the NAT gateway supports public or private connectivity.  The default is public connectivity.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - privateIpAddress: The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
    ///   - secondaryAllocationIds: Secondary EIP allocation IDs. For more information, see Create a NAT gateway  in the Amazon VPC User Guide.
    ///   - secondaryPrivateIpAddressCount: [Private NAT gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT gateway.  For more information about secondary addresses, see Create a NAT gateway  in the Amazon VPC User Guide.
    ///   - secondaryPrivateIpAddresses: Secondary private IPv4 addresses. For more information about secondary addresses, see  Create a NAT gateway in the Amazon VPC User Guide.
    ///   - subnetId: The ID of the subnet in which to create the NAT gateway.
    ///   - tagSpecifications: The tags to assign to the NAT gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNatGateway(
        allocationId: String? = nil,
        clientToken: String? = CreateNatGatewayRequest.idempotencyToken(),
        connectivityType: ConnectivityType? = nil,
        dryRun: Bool? = nil,
        privateIpAddress: String? = nil,
        secondaryAllocationIds: [String]? = nil,
        secondaryPrivateIpAddressCount: Int? = nil,
        secondaryPrivateIpAddresses: [String]? = nil,
        subnetId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNatGatewayResult {
        let input = CreateNatGatewayRequest(
            allocationId: allocationId, 
            clientToken: clientToken, 
            connectivityType: connectivityType, 
            dryRun: dryRun, 
            privateIpAddress: privateIpAddress, 
            secondaryAllocationIds: secondaryAllocationIds, 
            secondaryPrivateIpAddressCount: secondaryPrivateIpAddressCount, 
            secondaryPrivateIpAddresses: secondaryPrivateIpAddresses, 
            subnetId: subnetId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createNatGateway(input, logger: logger)
    }

    /// Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC. For more information, see Network ACLs in the
    /// 				Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createNetworkAcl(_ input: CreateNetworkAclRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNetworkAclResult {
        try await self.client.execute(
            operation: "CreateNetworkAcl", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC. For more information, see Network ACLs in the
    /// 				Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags to assign to the network ACL.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNetworkAcl(
        clientToken: String? = CreateNetworkAclRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNetworkAclResult {
        let input = CreateNetworkAclRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications, 
            vpcId: vpcId
        )
        return try await self.createNetworkAcl(input, logger: logger)
    }

    /// Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules
    /// 		        and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated
    /// 		        with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of
    /// 		        ingress rules and a separate set of egress rules. We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the
    /// 		        other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules. After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one. For more information about network ACLs, see Network ACLs  in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createNetworkAclEntry(_ input: CreateNetworkAclEntryRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CreateNetworkAclEntry", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules
    /// 		        and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated
    /// 		        with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of
    /// 		        ingress rules and a separate set of egress rules. We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the
    /// 		        other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules. After you add an entry, you can't modify it; you must either replace it, or create an entry and delete the old one. For more information about network ACLs, see Network ACLs  in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - cidrBlock: The IPv4 network range to allow or deny, in CIDR notation (for example
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - egress: Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).
    ///   - icmpTypeCode: ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
    ///   - ipv6CidrBlock: The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64).
    ///   - networkAclId: The ID of the network ACL.
    ///   - portRange: TCP or UDP protocols: The range of ports the rule applies to.
    ///   - protocol: The protocol number. A value of "-1" means all protocols. If you specify "-1" or a 			protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is
    ///   - ruleAction: Indicates whether to allow or deny the traffic that matches the rule.
    ///   - ruleNumber: The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNetworkAclEntry(
        cidrBlock: String? = nil,
        dryRun: Bool? = nil,
        egress: Bool? = nil,
        icmpTypeCode: IcmpTypeCode? = nil,
        ipv6CidrBlock: String? = nil,
        networkAclId: String? = nil,
        portRange: PortRange? = nil,
        protocol: String? = nil,
        ruleAction: RuleAction? = nil,
        ruleNumber: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CreateNetworkAclEntryRequest(
            cidrBlock: cidrBlock, 
            dryRun: dryRun, 
            egress: egress, 
            icmpTypeCode: icmpTypeCode, 
            ipv6CidrBlock: ipv6CidrBlock, 
            networkAclId: networkAclId, 
            portRange: portRange, 
            protocol: `protocol`, 
            ruleAction: ruleAction, 
            ruleNumber: ruleNumber
        )
        return try await self.createNetworkAclEntry(input, logger: logger)
    }

    /// Creates a Network Access Scope. Amazon Web Services Network Access Analyzer enables cloud networking and cloud operations teams  to verify that their networks on Amazon Web Services conform to their network security and governance  objectives. For more information, see the Amazon Web Services Network Access Analyzer Guide.
    @Sendable
    @inlinable
    public func createNetworkInsightsAccessScope(_ input: CreateNetworkInsightsAccessScopeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNetworkInsightsAccessScopeResult {
        try await self.client.execute(
            operation: "CreateNetworkInsightsAccessScope", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Network Access Scope. Amazon Web Services Network Access Analyzer enables cloud networking and cloud operations teams  to verify that their networks on Amazon Web Services conform to their network security and governance  objectives. For more information, see the Amazon Web Services Network Access Analyzer Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,  see How to ensure idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - excludePaths: The paths to exclude.
    ///   - matchPaths: The paths to match.
    ///   - tagSpecifications: The tags to apply.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNetworkInsightsAccessScope(
        clientToken: String? = nil,
        dryRun: Bool? = nil,
        excludePaths: [AccessScopePathRequest]? = nil,
        matchPaths: [AccessScopePathRequest]? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNetworkInsightsAccessScopeResult {
        let input = CreateNetworkInsightsAccessScopeRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            excludePaths: excludePaths, 
            matchPaths: matchPaths, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createNetworkInsightsAccessScope(input, logger: logger)
    }

    /// Creates a path to analyze for reachability. Reachability Analyzer enables you to analyze and debug network reachability between two resources in your virtual private cloud (VPC). For more information, see the  Reachability Analyzer Guide.
    @Sendable
    @inlinable
    public func createNetworkInsightsPath(_ input: CreateNetworkInsightsPathRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNetworkInsightsPathResult {
        try await self.client.execute(
            operation: "CreateNetworkInsightsPath", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a path to analyze for reachability. Reachability Analyzer enables you to analyze and debug network reachability between two resources in your virtual private cloud (VPC). For more information, see the  Reachability Analyzer Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,  see How to ensure idempotency.
    ///   - destination: The ID or ARN of the destination. If the resource is in another account, you must specify an ARN.
    ///   - destinationIp: The IP address of the destination.
    ///   - destinationPort: The destination port.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filterAtDestination: Scopes the analysis to network paths that match specific filters at the destination. If you specify this parameter, you can't specify the parameter for the destination IP address.
    ///   - filterAtSource: Scopes the analysis to network paths that match specific filters at the source. If you specify this parameter, you can't specify the parameters for the source IP address or the destination port.
    ///   - protocol: The protocol.
    ///   - source: The ID or ARN of the source. If the resource is in another account, you must specify an ARN.
    ///   - sourceIp: The IP address of the source.
    ///   - tagSpecifications: The tags to add to the path.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNetworkInsightsPath(
        clientToken: String? = nil,
        destination: String? = nil,
        destinationIp: String? = nil,
        destinationPort: Int? = nil,
        dryRun: Bool? = nil,
        filterAtDestination: PathRequestFilter? = nil,
        filterAtSource: PathRequestFilter? = nil,
        protocol: `Protocol`? = nil,
        source: String? = nil,
        sourceIp: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNetworkInsightsPathResult {
        let input = CreateNetworkInsightsPathRequest(
            clientToken: clientToken, 
            destination: destination, 
            destinationIp: destinationIp, 
            destinationPort: destinationPort, 
            dryRun: dryRun, 
            filterAtDestination: filterAtDestination, 
            filterAtSource: filterAtSource, 
            protocol: `protocol`, 
            source: source, 
            sourceIp: sourceIp, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createNetworkInsightsPath(input, logger: logger)
    }

    /// Creates a network interface in the specified subnet. The number of IP addresses you can assign to a network interface varies by instance type. For more information about network interfaces, see Elastic network interfaces  in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createNetworkInterface(_ input: CreateNetworkInterfaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNetworkInterfaceResult {
        try await self.client.execute(
            operation: "CreateNetworkInterface", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a network interface in the specified subnet. The number of IP addresses you can assign to a network interface varies by instance type. For more information about network interfaces, see Elastic network interfaces  in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - connectionTrackingSpecification: A connection tracking specification for the network interface.
    ///   - description: A description for the network interface.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - enablePrimaryIpv6: If you’re creating a network interface in a dual-stack or IPv6-only subnet, you have the option to assign a primary IPv6 IP address. A primary IPv6 address is an IPv6 GUA address associated with an ENI that you have enabled to use a primary IPv6 address. Use this option if the instance that this ENI will be attached to relies on its IPv6 address not changing. Amazon Web Services will automatically assign an IPv6 address associated with the ENI attached to your instance to be the primary IPv6 address. Once you enable an IPv6 GUA address to be a primary IPv6, you cannot disable it. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. If you have multiple IPv6 addresses associated with an ENI attached to your instance and you enable a primary IPv6 address, the first IPv6 GUA address associated with the ENI becomes the primary IPv6 address.
    ///   - groups: The IDs of one or more security groups.
    ///   - interfaceType: The type of network interface. The default is interface. If you specify efa-only, do not assign any IP addresses to the network  interface. EFA-only network interfaces do not support IP addresses. The only supported values are interface, efa, efa-only, and trunk.
    ///   - ipv4PrefixCount: The number of IPv4 prefixes that Amazon Web Services automatically assigns to the network interface. You can't specify a count of IPv4 prefixes if you've specified one of the following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
    ///   - ipv4Prefixes: The IPv4 prefixes assigned to the network interface. You can't specify IPv4 prefixes if you've specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.
    ///   - ipv6AddressCount: The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't specify a count of IPv6 addresses using this parameter if you've specified  one of the following: specific IPv6 addresses, specific IPv6 prefixes, or a count of IPv6 prefixes. If your subnet has the AssignIpv6AddressOnCreation attribute set, you can override that setting by specifying 0 as the IPv6 address count.
    ///   - ipv6Addresses: The IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't specify IPv6 addresses using this parameter if you've specified one of the  following: a count of IPv6 addresses, specific IPv6 prefixes, or a count of IPv6 prefixes.
    ///   - ipv6PrefixCount: The number of IPv6 prefixes that Amazon Web Services automatically assigns to the network interface. You can't specify a count of IPv6 prefixes if you've specified one of the following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
    ///   - ipv6Prefixes: The IPv6 prefixes assigned to the network interface. You can't specify IPv6 prefixes if you've specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.
    ///   - operator: Reserved for internal use.
    ///   - privateIpAddress: The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in privateIpAddresses as primary (only one IP address can be designated as primary).
    ///   - privateIpAddresses: The private IPv4 addresses. You can't specify private IPv4 addresses if you've specified one of the following: a count of private IPv4 addresses, specific IPv4 prefixes, or a count of IPv4 prefixes.
    ///   - secondaryPrivateIpAddressCount: The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses. You can't specify a count of private IPv4 addresses if you've specified one of the following: specific private IPv4 addresses, specific IPv4 prefixes, or a count of IPv4 prefixes.
    ///   - subnetId: The ID of the subnet to associate with the network interface.
    ///   - tagSpecifications: The tags to apply to the new network interface.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNetworkInterface(
        clientToken: String? = CreateNetworkInterfaceRequest.idempotencyToken(),
        connectionTrackingSpecification: ConnectionTrackingSpecificationRequest? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        enablePrimaryIpv6: Bool? = nil,
        groups: [String]? = nil,
        interfaceType: NetworkInterfaceCreationType? = nil,
        ipv4PrefixCount: Int? = nil,
        ipv4Prefixes: [Ipv4PrefixSpecificationRequest]? = nil,
        ipv6AddressCount: Int? = nil,
        ipv6Addresses: [InstanceIpv6Address]? = nil,
        ipv6PrefixCount: Int? = nil,
        ipv6Prefixes: [Ipv6PrefixSpecificationRequest]? = nil,
        operator: OperatorRequest? = nil,
        privateIpAddress: String? = nil,
        privateIpAddresses: [PrivateIpAddressSpecification]? = nil,
        secondaryPrivateIpAddressCount: Int? = nil,
        subnetId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNetworkInterfaceResult {
        let input = CreateNetworkInterfaceRequest(
            clientToken: clientToken, 
            connectionTrackingSpecification: connectionTrackingSpecification, 
            description: description, 
            dryRun: dryRun, 
            enablePrimaryIpv6: enablePrimaryIpv6, 
            groups: groups, 
            interfaceType: interfaceType, 
            ipv4PrefixCount: ipv4PrefixCount, 
            ipv4Prefixes: ipv4Prefixes, 
            ipv6AddressCount: ipv6AddressCount, 
            ipv6Addresses: ipv6Addresses, 
            ipv6PrefixCount: ipv6PrefixCount, 
            ipv6Prefixes: ipv6Prefixes, 
            operator: `operator`, 
            privateIpAddress: privateIpAddress, 
            privateIpAddresses: privateIpAddresses, 
            secondaryPrivateIpAddressCount: secondaryPrivateIpAddressCount, 
            subnetId: subnetId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createNetworkInterface(input, logger: logger)
    }

    /// Grants an Amazon Web Services-authorized account permission to attach the specified network interface to an instance in their account. You can grant permission to a single Amazon Web Services account only, and only one account at a time.
    @Sendable
    @inlinable
    public func createNetworkInterfacePermission(_ input: CreateNetworkInterfacePermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateNetworkInterfacePermissionResult {
        try await self.client.execute(
            operation: "CreateNetworkInterfacePermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Grants an Amazon Web Services-authorized account permission to attach the specified network interface to an instance in their account. You can grant permission to a single Amazon Web Services account only, and only one account at a time.
    ///
    /// Parameters:
    ///   - awsAccountId: The Amazon Web Services account ID.
    ///   - awsService: The Amazon Web Services service. Currently not supported.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - permission: The type of permission to grant.
    ///   - logger: Logger use during operation
    @inlinable
    public func createNetworkInterfacePermission(
        awsAccountId: String? = nil,
        awsService: String? = nil,
        dryRun: Bool? = nil,
        networkInterfaceId: String? = nil,
        permission: InterfacePermissionType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateNetworkInterfacePermissionResult {
        let input = CreateNetworkInterfacePermissionRequest(
            awsAccountId: awsAccountId, 
            awsService: awsService, 
            dryRun: dryRun, 
            networkInterfaceId: networkInterfaceId, 
            permission: permission
        )
        return try await self.createNetworkInterfacePermission(input, logger: logger)
    }

    /// Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group.  A cluster placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A spread placement group places instances on distinct hardware. A partition placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition. For more information, see Placement groups in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createPlacementGroup(_ input: CreatePlacementGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePlacementGroupResult {
        try await self.client.execute(
            operation: "CreatePlacementGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group.  A cluster placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A spread placement group places instances on distinct hardware. A partition placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition. For more information, see Placement groups in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - groupName: A name for the placement group. Must be unique within the scope of your account for the Region. Constraints: Up to 255 ASCII characters
    ///   - partitionCount: The number of partitions. Valid only when Strategy is set to partition.
    ///   - spreadLevel: Determines how placement groups spread instances.    Host – You can use host only with Outpost placement groups.   Rack – No usage restrictions.
    ///   - strategy: The placement strategy.
    ///   - tagSpecifications: The tags to apply to the new placement group.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPlacementGroup(
        dryRun: Bool? = nil,
        groupName: String? = nil,
        partitionCount: Int? = nil,
        spreadLevel: SpreadLevel? = nil,
        strategy: PlacementStrategy? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePlacementGroupResult {
        let input = CreatePlacementGroupRequest(
            dryRun: dryRun, 
            groupName: groupName, 
            partitionCount: partitionCount, 
            spreadLevel: spreadLevel, 
            strategy: strategy, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createPlacementGroup(input, logger: logger)
    }

    /// Creates a public IPv4 address pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only. To monitor the status of pool creation, use DescribePublicIpv4Pools.
    @Sendable
    @inlinable
    public func createPublicIpv4Pool(_ input: CreatePublicIpv4PoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreatePublicIpv4PoolResult {
        try await self.client.execute(
            operation: "CreatePublicIpv4Pool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a public IPv4 address pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only. To monitor the status of pool creation, use DescribePublicIpv4Pools.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkBorderGroup: The Availability Zone (AZ) or Local Zone (LZ) network border group that the resource that the IP address is assigned to is in. Defaults to an AZ network border group. For more information on available Local Zones, see Local Zone availability in the Amazon EC2 User Guide.
    ///   - tagSpecifications: The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - logger: Logger use during operation
    @inlinable
    public func createPublicIpv4Pool(
        dryRun: Bool? = nil,
        networkBorderGroup: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreatePublicIpv4PoolResult {
        let input = CreatePublicIpv4PoolRequest(
            dryRun: dryRun, 
            networkBorderGroup: networkBorderGroup, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createPublicIpv4Pool(input, logger: logger)
    }

    /// Replaces the EBS-backed root volume for a running instance with a new  volume that is restored to the original root volume's launch state, that is restored to a  specific snapshot taken from the original root volume, or that is restored from an AMI  that has the same key characteristics as that of the instance. For more information, see Replace a root volume in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createReplaceRootVolumeTask(_ input: CreateReplaceRootVolumeTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateReplaceRootVolumeTaskResult {
        try await self.client.execute(
            operation: "CreateReplaceRootVolumeTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Replaces the EBS-backed root volume for a running instance with a new  volume that is restored to the original root volume's launch state, that is restored to a  specific snapshot taken from the original root volume, or that is restored from an AMI  that has the same key characteristics as that of the instance. For more information, see Replace a root volume in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier you provide to ensure the idempotency of the request.  If you do not specify a client token, a randomly generated token is used for the request  to ensure idempotency. For more information, see Ensuring idempotency.
    ///   - deleteReplacedRootVolume: Indicates whether to automatically delete the original root volume after the root volume  replacement task completes. To delete the original root volume, specify true.  If you choose to keep the original root volume after the replacement task completes, you must  manually delete it when you no longer need it.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - imageId: The ID of the AMI to use to restore the root volume. The specified AMI must have the  same product code, billing information, architecture type, and virtualization type as  that of the instance. If you want to restore the replacement volume from a specific snapshot, or if you want  to restore it to its launch state, omit this parameter.
    ///   - instanceId: The ID of the instance for which to replace the root volume.
    ///   - snapshotId: The ID of the snapshot from which to restore the replacement root volume. The  specified snapshot must be a snapshot that you previously created from the original  root volume. If you want to restore the replacement root volume to the initial launch state,  or if you want to restore the replacement root volume from an AMI, omit this  parameter.
    ///   - tagSpecifications: The tags to apply to the root volume replacement task.
    ///   - logger: Logger use during operation
    @inlinable
    public func createReplaceRootVolumeTask(
        clientToken: String? = CreateReplaceRootVolumeTaskRequest.idempotencyToken(),
        deleteReplacedRootVolume: Bool? = nil,
        dryRun: Bool? = nil,
        imageId: String? = nil,
        instanceId: String? = nil,
        snapshotId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateReplaceRootVolumeTaskResult {
        let input = CreateReplaceRootVolumeTaskRequest(
            clientToken: clientToken, 
            deleteReplacedRootVolume: deleteReplacedRootVolume, 
            dryRun: dryRun, 
            imageId: imageId, 
            instanceId: instanceId, 
            snapshotId: snapshotId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createReplaceRootVolumeTask(input, logger: logger)
    }

    /// Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance
    /// 			Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your
    /// 			Standard Reserved Instances, you can use the DescribeReservedInstances operation.  Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace.  Convertible Reserved Instances cannot be sold.  The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances. To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the DescribeReservedInstancesListings operation. For more information, see Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createReservedInstancesListing(_ input: CreateReservedInstancesListingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateReservedInstancesListingResult {
        try await self.client.execute(
            operation: "CreateReservedInstancesListing", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance
    /// 			Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your
    /// 			Standard Reserved Instances, you can use the DescribeReservedInstances operation.  Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace.  Convertible Reserved Instances cannot be sold.  The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances. To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the DescribeReservedInstancesListings operation. For more information, see Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier you provide to ensure idempotency of your
    ///   - instanceCount: The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.
    ///   - priceSchedules: A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.
    ///   - reservedInstancesId: The ID of the active Standard Reserved Instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func createReservedInstancesListing(
        clientToken: String? = nil,
        instanceCount: Int? = nil,
        priceSchedules: [PriceScheduleSpecification]? = nil,
        reservedInstancesId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateReservedInstancesListingResult {
        let input = CreateReservedInstancesListingRequest(
            clientToken: clientToken, 
            instanceCount: instanceCount, 
            priceSchedules: priceSchedules, 
            reservedInstancesId: reservedInstancesId
        )
        return try await self.createReservedInstancesListing(input, logger: logger)
    }

    /// Starts a task that restores an AMI from an Amazon S3 object that was previously created by using CreateStoreImageTask. To use this API, you must have the required permissions. For more information, see Permissions for storing and restoring AMIs using Amazon S3 in the Amazon EC2 User Guide. For more information, see Store and restore an AMI using Amazon S3 in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createRestoreImageTask(_ input: CreateRestoreImageTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRestoreImageTaskResult {
        try await self.client.execute(
            operation: "CreateRestoreImageTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts a task that restores an AMI from an Amazon S3 object that was previously created by using CreateStoreImageTask. To use this API, you must have the required permissions. For more information, see Permissions for storing and restoring AMIs using Amazon S3 in the Amazon EC2 User Guide. For more information, see Store and restore an AMI using Amazon S3 in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - bucket: The name of the Amazon S3 bucket that contains the stored AMI object.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - name: The name for the restored AMI. The name must be unique for AMIs in the Region for this account. If you do not provide a name, the new AMI gets the same name as the original AMI.
    ///   - objectKey: The name of the stored AMI object in the bucket.
    ///   - tagSpecifications: The tags to apply to the AMI and snapshots on restoration. You can tag the AMI, the snapshots, or both.   To tag the AMI, the value for ResourceType must be image.   To tag the snapshots, the value for ResourceType must be snapshot. The same tag is applied to all of the snapshots that are created.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRestoreImageTask(
        bucket: String? = nil,
        dryRun: Bool? = nil,
        name: String? = nil,
        objectKey: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRestoreImageTaskResult {
        let input = CreateRestoreImageTaskRequest(
            bucket: bucket, 
            dryRun: dryRun, 
            name: name, 
            objectKey: objectKey, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createRestoreImageTask(input, logger: logger)
    }

    /// Creates a route in a route table within a VPC. You must specify either a destination CIDR block or a prefix list ID. You must also specify   exactly one of the resources from the parameter list. When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address 192.0.2.3, and the route table includes the following two IPv4 routes:    192.0.2.0/24 (goes to some target A)    192.0.2.0/28 (goes to some target B)   Both routes apply to the traffic destined for 192.0.2.3. However, the second route
    /// 				in the list covers a smaller number of IP addresses and is therefore more specific,
    /// 				so we use that route to determine where to target the traffic. For more information about route tables, see Route tables in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createRoute(_ input: CreateRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRouteResult {
        try await self.client.execute(
            operation: "CreateRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a route in a route table within a VPC. You must specify either a destination CIDR block or a prefix list ID. You must also specify   exactly one of the resources from the parameter list. When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address 192.0.2.3, and the route table includes the following two IPv4 routes:    192.0.2.0/24 (goes to some target A)    192.0.2.0/28 (goes to some target B)   Both routes apply to the traffic destined for 192.0.2.3. However, the second route
    /// 				in the list covers a smaller number of IP addresses and is therefore more specific,
    /// 				so we use that route to determine where to target the traffic. For more information about route tables, see Route tables in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - carrierGatewayId: The ID of the carrier gateway. You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.
    ///   - coreNetworkArn: The Amazon Resource Name (ARN) of the core network.
    ///   - destinationCidrBlock: The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
    ///   - destinationIpv6CidrBlock: The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
    ///   - destinationPrefixListId: The ID of a prefix list used for the destination match.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - egressOnlyInternetGatewayId: [IPv6 traffic only] The ID of an egress-only internet gateway.
    ///   - gatewayId: The ID of an internet gateway or virtual private gateway attached to your
    ///   - instanceId: The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
    ///   - localGatewayId: The ID of the local gateway.
    ///   - natGatewayId: [IPv4 traffic only] The ID of a NAT gateway.
    ///   - networkInterfaceId: The ID of a network interface.
    ///   - routeTableId: The ID of the route table for the route.
    ///   - transitGatewayId: The ID of a transit gateway.
    ///   - vpcEndpointId: The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
    ///   - vpcPeeringConnectionId: The ID of a VPC peering connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRoute(
        carrierGatewayId: String? = nil,
        coreNetworkArn: String? = nil,
        destinationCidrBlock: String? = nil,
        destinationIpv6CidrBlock: String? = nil,
        destinationPrefixListId: String? = nil,
        dryRun: Bool? = nil,
        egressOnlyInternetGatewayId: String? = nil,
        gatewayId: String? = nil,
        instanceId: String? = nil,
        localGatewayId: String? = nil,
        natGatewayId: String? = nil,
        networkInterfaceId: String? = nil,
        routeTableId: String? = nil,
        transitGatewayId: String? = nil,
        vpcEndpointId: String? = nil,
        vpcPeeringConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRouteResult {
        let input = CreateRouteRequest(
            carrierGatewayId: carrierGatewayId, 
            coreNetworkArn: coreNetworkArn, 
            destinationCidrBlock: destinationCidrBlock, 
            destinationIpv6CidrBlock: destinationIpv6CidrBlock, 
            destinationPrefixListId: destinationPrefixListId, 
            dryRun: dryRun, 
            egressOnlyInternetGatewayId: egressOnlyInternetGatewayId, 
            gatewayId: gatewayId, 
            instanceId: instanceId, 
            localGatewayId: localGatewayId, 
            natGatewayId: natGatewayId, 
            networkInterfaceId: networkInterfaceId, 
            routeTableId: routeTableId, 
            transitGatewayId: transitGatewayId, 
            vpcEndpointId: vpcEndpointId, 
            vpcPeeringConnectionId: vpcPeeringConnectionId
        )
        return try await self.createRoute(input, logger: logger)
    }

    /// Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet. For more information, see Route tables in the
    /// 				Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createRouteTable(_ input: CreateRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateRouteTableResult {
        try await self.client.execute(
            operation: "CreateRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet. For more information, see Route tables in the
    /// 				Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags to assign to the route table.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func createRouteTable(
        clientToken: String? = CreateRouteTableRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateRouteTableResult {
        let input = CreateRouteTableRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications, 
            vpcId: vpcId
        )
        return try await self.createRouteTable(input, logger: logger)
    }

    /// Creates a security group. A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see
    /// 				Amazon EC2 security groups in
    /// 				the Amazon EC2 User Guide and
    /// 				Security groups for your VPC in the
    /// 				Amazon VPC User Guide. When you create a security group, you specify a friendly name of your choice.  You can't have two security groups for the same VPC with the same name. You have a default security group for use in your VPC. If you don't specify a security group  when you launch an instance, the instance is launched into the appropriate default security group.  A default security group includes a default rule that grants instances unrestricted network access  to each other. You can add or remove rules from your security groups using
    /// 					AuthorizeSecurityGroupIngress,
    /// 					AuthorizeSecurityGroupEgress,
    /// 					RevokeSecurityGroupIngress, and
    /// 					RevokeSecurityGroupEgress. For more information about VPC security group limits, see Amazon VPC Limits.
    @Sendable
    @inlinable
    public func createSecurityGroup(_ input: CreateSecurityGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSecurityGroupResult {
        try await self.client.execute(
            operation: "CreateSecurityGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a security group. A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see
    /// 				Amazon EC2 security groups in
    /// 				the Amazon EC2 User Guide and
    /// 				Security groups for your VPC in the
    /// 				Amazon VPC User Guide. When you create a security group, you specify a friendly name of your choice.  You can't have two security groups for the same VPC with the same name. You have a default security group for use in your VPC. If you don't specify a security group  when you launch an instance, the instance is launched into the appropriate default security group.  A default security group includes a default rule that grants instances unrestricted network access  to each other. You can add or remove rules from your security groups using
    /// 					AuthorizeSecurityGroupIngress,
    /// 					AuthorizeSecurityGroupEgress,
    /// 					RevokeSecurityGroupIngress, and
    /// 					RevokeSecurityGroupEgress. For more information about VPC security group limits, see Amazon VPC Limits.
    ///
    /// Parameters:
    ///   - description: A description for the security group. Constraints: Up to 255 characters in length Valid characters: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupName: The name of the security group. Constraints: Up to 255 characters in length. Cannot start with sg-. Valid characters: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
    ///   - tagSpecifications: The tags to assign to the security group.
    ///   - vpcId: The ID of the VPC. Required for a nondefault VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSecurityGroup(
        description: String? = nil,
        dryRun: Bool? = nil,
        groupName: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSecurityGroupResult {
        let input = CreateSecurityGroupRequest(
            description: description, 
            dryRun: dryRun, 
            groupName: groupName, 
            tagSpecifications: tagSpecifications, 
            vpcId: vpcId
        )
        return try await self.createSecurityGroup(input, logger: logger)
    }

    /// Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for 	backups, to make copies of EBS volumes, and to save data before shutting down an 	instance. You can create snapshots of volumes in a Region and volumes on an Outpost. If you  	create a snapshot of a volume in a Region, the snapshot must be stored in the same  	Region as the volume. If you create a snapshot of a volume on an Outpost, the snapshot  	can be stored on the same Outpost as the volume, or in the Region for that Outpost. When a snapshot is created, any Amazon Web Services Marketplace product codes that are associated with the source volume are propagated to the snapshot. You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your Amazon EBS volume at the time the snapshot command is issued; this might exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is pending. When you create a snapshot for an EBS volume that serves as a root device, we recommend  that you stop the instance before taking the snapshot. Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected. You can tag your snapshots during creation. For more information, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide. For more information, see Amazon EBS and Amazon EBS encryption in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func createSnapshot(_ input: CreateSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Snapshot {
        try await self.client.execute(
            operation: "CreateSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for 	backups, to make copies of EBS volumes, and to save data before shutting down an 	instance. You can create snapshots of volumes in a Region and volumes on an Outpost. If you  	create a snapshot of a volume in a Region, the snapshot must be stored in the same  	Region as the volume. If you create a snapshot of a volume on an Outpost, the snapshot  	can be stored on the same Outpost as the volume, or in the Region for that Outpost. When a snapshot is created, any Amazon Web Services Marketplace product codes that are associated with the source volume are propagated to the snapshot. You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your Amazon EBS volume at the time the snapshot command is issued; this might exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is pending. When you create a snapshot for an EBS volume that serves as a root device, we recommend  that you stop the instance before taking the snapshot. Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected. You can tag your snapshots during creation. For more information, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide. For more information, see Amazon EBS and Amazon EBS encryption in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - description: A description for the snapshot.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - outpostArn: The Amazon Resource Name (ARN) of the Outpost on which to create a local   	snapshot.   To create a snapshot of a volume in a Region, omit this parameter. The snapshot  				is created in the same Region as the volume.   To create a snapshot of a volume on an Outpost and store the snapshot in the  				Region, omit this parameter. The snapshot is created in the Region for the  				Outpost.   To create a snapshot of a volume on an Outpost and store the snapshot on an  			Outpost, specify the ARN of the destination Outpost. The snapshot must be created on  			the same Outpost as the volume.   For more information, see Create local snapshots from volumes on an Outpost in the Amazon EBS User Guide.
    ///   - tagSpecifications: The tags to apply to the snapshot during creation.
    ///   - volumeId: The ID of the Amazon EBS volume.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSnapshot(
        description: String? = nil,
        dryRun: Bool? = nil,
        outpostArn: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        volumeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Snapshot {
        let input = CreateSnapshotRequest(
            description: description, 
            dryRun: dryRun, 
            outpostArn: outpostArn, 
            tagSpecifications: tagSpecifications, 
            volumeId: volumeId
        )
        return try await self.createSnapshot(input, logger: logger)
    }

    /// Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. You can include all of the volumes currently attached to the instance, or you can exclude  the root volume or specific data (non-root) volumes from the multi-volume snapshot set. You can create multi-volume snapshots of instances in a Region and instances on an  	Outpost. If you create snapshots from an instance in a Region, the snapshots must be stored  	in the same Region as the instance. If you create snapshots from an instance on an Outpost,  	the snapshots can be stored on the same Outpost as the instance, or in the Region for that  	Outpost.
    @Sendable
    @inlinable
    public func createSnapshots(_ input: CreateSnapshotsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSnapshotsResult {
        try await self.client.execute(
            operation: "CreateSnapshots", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. You can include all of the volumes currently attached to the instance, or you can exclude  the root volume or specific data (non-root) volumes from the multi-volume snapshot set. You can create multi-volume snapshots of instances in a Region and instances on an  	Outpost. If you create snapshots from an instance in a Region, the snapshots must be stored  	in the same Region as the instance. If you create snapshots from an instance on an Outpost,  	the snapshots can be stored on the same Outpost as the instance, or in the Region for that  	Outpost.
    ///
    /// Parameters:
    ///   - copyTagsFromSource: Copies the tags from the specified volume to corresponding snapshot.
    ///   - description:  A description propagated to every snapshot specified by the instance.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceSpecification: The instance to specify which volumes should be included in the snapshots.
    ///   - outpostArn: The Amazon Resource Name (ARN) of the Outpost on which to create the local   		snapshots.   To create snapshots from an instance in a Region, omit this parameter. The  				snapshots are created in the same Region as the instance.   To create snapshots from an instance on an Outpost and store the snapshots  				in the Region, omit this parameter. The snapshots are created in the Region  				for the Outpost.   To create snapshots from an instance on an Outpost and store the snapshots  				on an Outpost, specify the ARN of the destination Outpost. The snapshots must  				be created on the same Outpost as the instance.   For more information, see  		Create multi-volume local snapshots from instances on an Outpost in the  		Amazon EBS User Guide.
    ///   - tagSpecifications: Tags to apply to every snapshot specified by the instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSnapshots(
        copyTagsFromSource: CopyTagsFromSource? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        instanceSpecification: InstanceSpecification? = nil,
        outpostArn: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSnapshotsResult {
        let input = CreateSnapshotsRequest(
            copyTagsFromSource: copyTagsFromSource, 
            description: description, 
            dryRun: dryRun, 
            instanceSpecification: instanceSpecification, 
            outpostArn: outpostArn, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createSnapshots(input, logger: logger)
    }

    /// Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per Amazon Web Services account. For more information, see Spot Instance data feed  in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createSpotDatafeedSubscription(_ input: CreateSpotDatafeedSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSpotDatafeedSubscriptionResult {
        try await self.client.execute(
            operation: "CreateSpotDatafeedSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per Amazon Web Services account. For more information, see Spot Instance data feed  in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - bucket: The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For more information about bucket names, see Bucket naming rules  in the Amazon S3 User Guide.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - prefix: The prefix for the data feed file names.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSpotDatafeedSubscription(
        bucket: String? = nil,
        dryRun: Bool? = nil,
        prefix: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSpotDatafeedSubscriptionResult {
        let input = CreateSpotDatafeedSubscriptionRequest(
            bucket: bucket, 
            dryRun: dryRun, 
            prefix: prefix
        )
        return try await self.createSpotDatafeedSubscription(input, logger: logger)
    }

    /// Stores an AMI as a single object in an Amazon S3 bucket. To use this API, you must have the required permissions. For more information, see Permissions for storing and restoring AMIs using Amazon S3 in the Amazon EC2 User Guide. For more information, see Store and restore an AMI using Amazon S3 in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createStoreImageTask(_ input: CreateStoreImageTaskRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateStoreImageTaskResult {
        try await self.client.execute(
            operation: "CreateStoreImageTask", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stores an AMI as a single object in an Amazon S3 bucket. To use this API, you must have the required permissions. For more information, see Permissions for storing and restoring AMIs using Amazon S3 in the Amazon EC2 User Guide. For more information, see Store and restore an AMI using Amazon S3 in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - bucket: The name of the Amazon S3 bucket in which the AMI object will be stored. The bucket must be in the Region in which the request is being made. The AMI object appears in the bucket only after the upload task has completed.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - s3ObjectTags: The tags to apply to the AMI object that will be stored in the Amazon S3 bucket.
    ///   - logger: Logger use during operation
    @inlinable
    public func createStoreImageTask(
        bucket: String? = nil,
        dryRun: Bool? = nil,
        imageId: String? = nil,
        s3ObjectTags: [S3ObjectTag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateStoreImageTaskResult {
        let input = CreateStoreImageTaskRequest(
            bucket: bucket, 
            dryRun: dryRun, 
            imageId: imageId, 
            s3ObjectTags: s3ObjectTags
        )
        return try await self.createStoreImageTask(input, logger: logger)
    }

    /// Creates a subnet in the specified VPC. For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block. A subnet CIDR block must not overlap the CIDR block of an existing subnet in the VPC. After you create a subnet, you can't change its CIDR block. The allowed size for an IPv4 subnet is between a /28 netmask (16 IP addresses) and   a /16 netmask (65,536 IP addresses). Amazon Web Services reserves both the first four and  the last IPv4 address in each subnet's CIDR block. They're not available for your use. If you've associated an IPv6 CIDR block with your VPC, you can associate an IPv6 CIDR block with a subnet when you create it.  If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle. When you stop an instance in a subnet, it retains its private IPv4 address. It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available. For more information, see Subnets in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createSubnet(_ input: CreateSubnetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSubnetResult {
        try await self.client.execute(
            operation: "CreateSubnet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a subnet in the specified VPC. For an IPv4 only subnet, specify an IPv4 CIDR block. If the VPC has an IPv6 CIDR block, you can create an IPv6 only subnet or a dual stack subnet instead. For an IPv6 only subnet, specify an IPv6 CIDR block. For a dual stack subnet, specify both an IPv4 CIDR block and an IPv6 CIDR block. A subnet CIDR block must not overlap the CIDR block of an existing subnet in the VPC. After you create a subnet, you can't change its CIDR block. The allowed size for an IPv4 subnet is between a /28 netmask (16 IP addresses) and   a /16 netmask (65,536 IP addresses). Amazon Web Services reserves both the first four and  the last IPv4 address in each subnet's CIDR block. They're not available for your use. If you've associated an IPv6 CIDR block with your VPC, you can associate an IPv6 CIDR block with a subnet when you create it.  If you add more than one subnet to a VPC, they're set up in a star topology with a logical router in the middle. When you stop an instance in a subnet, it retains its private IPv4 address. It's therefore possible to have a subnet with no running instances (they're all stopped), but no remaining IP addresses available. For more information, see Subnets in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - availabilityZone: The Availability Zone or Local Zone for the subnet. Default: Amazon Web Services selects one for you. If you create more than one subnet in your VPC, we  do not necessarily select a different zone for each subnet. To create a subnet in a Local Zone, set this value to the Local Zone ID, for example us-west-2-lax-1a. For information about the Regions that support Local Zones,  see Available Local Zones. To create a subnet in an Outpost, set this value to the Availability Zone for the Outpost and specify the Outpost ARN.
    ///   - availabilityZoneId: The AZ ID or the Local Zone ID of the subnet.
    ///   - cidrBlock: The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24.  We modify the specified CIDR block to its canonical form; for example, if you specify  100.68.0.18/18, we modify it to 100.68.0.0/18. This parameter is not supported for an IPv6 only subnet.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipv4IpamPoolId: An IPv4 IPAM pool ID for the subnet.
    ///   - ipv4NetmaskLength: An IPv4 netmask length for the subnet.
    ///   - ipv6CidrBlock: The IPv6 network range for the subnet, in CIDR notation. This parameter is required for an IPv6 only subnet.
    ///   - ipv6IpamPoolId: An IPv6 IPAM pool ID for the subnet.
    ///   - ipv6Native: Indicates whether to create an IPv6 only subnet.
    ///   - ipv6NetmaskLength: An IPv6 netmask length for the subnet.
    ///   - outpostArn: The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost ARN, you must also specify the Availability Zone of the Outpost subnet.
    ///   - tagSpecifications: The tags to assign to the subnet.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSubnet(
        availabilityZone: String? = nil,
        availabilityZoneId: String? = nil,
        cidrBlock: String? = nil,
        dryRun: Bool? = nil,
        ipv4IpamPoolId: String? = nil,
        ipv4NetmaskLength: Int? = nil,
        ipv6CidrBlock: String? = nil,
        ipv6IpamPoolId: String? = nil,
        ipv6Native: Bool? = nil,
        ipv6NetmaskLength: Int? = nil,
        outpostArn: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSubnetResult {
        let input = CreateSubnetRequest(
            availabilityZone: availabilityZone, 
            availabilityZoneId: availabilityZoneId, 
            cidrBlock: cidrBlock, 
            dryRun: dryRun, 
            ipv4IpamPoolId: ipv4IpamPoolId, 
            ipv4NetmaskLength: ipv4NetmaskLength, 
            ipv6CidrBlock: ipv6CidrBlock, 
            ipv6IpamPoolId: ipv6IpamPoolId, 
            ipv6Native: ipv6Native, 
            ipv6NetmaskLength: ipv6NetmaskLength, 
            outpostArn: outpostArn, 
            tagSpecifications: tagSpecifications, 
            vpcId: vpcId
        )
        return try await self.createSubnet(input, logger: logger)
    }

    /// Creates a subnet CIDR reservation. For more information, see Subnet CIDR reservations  in the Amazon VPC User Guide and Manage prefixes  for your network interfaces in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createSubnetCidrReservation(_ input: CreateSubnetCidrReservationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateSubnetCidrReservationResult {
        try await self.client.execute(
            operation: "CreateSubnetCidrReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a subnet CIDR reservation. For more information, see Subnet CIDR reservations  in the Amazon VPC User Guide and Manage prefixes  for your network interfaces in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - cidr: The IPv4 or IPV6 CIDR range to reserve.
    ///   - description: The description to assign to the subnet CIDR reservation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - reservationType: The type of reservation. The reservation type determines how the reserved IP addresses are  assigned to resources.    prefix - Amazon Web Services assigns the reserved IP addresses to  network interfaces.    explicit - You assign the reserved IP addresses to network interfaces.
    ///   - subnetId: The ID of the subnet.
    ///   - tagSpecifications: The tags to assign to the subnet CIDR reservation.
    ///   - logger: Logger use during operation
    @inlinable
    public func createSubnetCidrReservation(
        cidr: String? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        reservationType: SubnetCidrReservationType? = nil,
        subnetId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateSubnetCidrReservationResult {
        let input = CreateSubnetCidrReservationRequest(
            cidr: cidr, 
            description: description, 
            dryRun: dryRun, 
            reservationType: reservationType, 
            subnetId: subnetId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createSubnetCidrReservation(input, logger: logger)
    }

    /// Adds or overwrites only the specified tags for the specified Amazon EC2 resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource. For more information about tags, see Tag your Amazon EC2 resources in the Amazon Elastic Compute Cloud User Guide. For more information about creating IAM policies that control users' access to resources based on tags, see Supported resource-level permissions for Amazon EC2 API actions in the Amazon Elastic Compute Cloud User Guide.
    @Sendable
    @inlinable
    public func createTags(_ input: CreateTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CreateTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or overwrites only the specified tags for the specified Amazon EC2 resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource. For more information about tags, see Tag your Amazon EC2 resources in the Amazon Elastic Compute Cloud User Guide. For more information about creating IAM policies that control users' access to resources based on tags, see Supported resource-level permissions for Amazon EC2 API actions in the Amazon Elastic Compute Cloud User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - resources: The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
    ///   - tags: The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTags(
        dryRun: Bool? = nil,
        resources: [String]? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CreateTagsRequest(
            dryRun: dryRun, 
            resources: resources, 
            tags: tags
        )
        return try await self.createTags(input, logger: logger)
    }

    /// Creates a Traffic Mirror filter. A Traffic Mirror filter is a set of rules that defines the traffic to mirror. By default, no traffic is mirrored. To mirror traffic, use CreateTrafficMirrorFilterRule  to add Traffic Mirror rules to the filter. The rules you add define what traffic gets mirrored.  You can also use ModifyTrafficMirrorFilterNetworkServices to mirror supported network services.
    @Sendable
    @inlinable
    public func createTrafficMirrorFilter(_ input: CreateTrafficMirrorFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrafficMirrorFilterResult {
        try await self.client.execute(
            operation: "CreateTrafficMirrorFilter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Traffic Mirror filter. A Traffic Mirror filter is a set of rules that defines the traffic to mirror. By default, no traffic is mirrored. To mirror traffic, use CreateTrafficMirrorFilterRule  to add Traffic Mirror rules to the filter. The rules you add define what traffic gets mirrored.  You can also use ModifyTrafficMirrorFilterNetworkServices to mirror supported network services.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
    ///   - description: The description of the Traffic Mirror filter.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags to assign to a Traffic Mirror filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTrafficMirrorFilter(
        clientToken: String? = CreateTrafficMirrorFilterRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTrafficMirrorFilterResult {
        let input = CreateTrafficMirrorFilterRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createTrafficMirrorFilter(input, logger: logger)
    }

    /// Creates a Traffic Mirror filter rule. A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror. You need the Traffic Mirror filter ID when you create the rule.
    @Sendable
    @inlinable
    public func createTrafficMirrorFilterRule(_ input: CreateTrafficMirrorFilterRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrafficMirrorFilterRuleResult {
        try await self.client.execute(
            operation: "CreateTrafficMirrorFilterRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Traffic Mirror filter rule. A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror. You need the Traffic Mirror filter ID when you create the rule.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
    ///   - description: The description of the Traffic Mirror rule.
    ///   - destinationCidrBlock: The destination CIDR block to assign to the Traffic Mirror rule.
    ///   - destinationPortRange: The destination port range.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - protocol: The protocol, for example UDP, to assign to the Traffic Mirror rule. For information about the protocol value, see Protocol Numbers on the  Internet Assigned Numbers Authority (IANA) website.
    ///   - ruleAction: The action to take on the filtered traffic.
    ///   - ruleNumber: The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
    ///   - sourceCidrBlock: The source CIDR block to assign to the Traffic Mirror rule.
    ///   - sourcePortRange: The source port range.
    ///   - tagSpecifications: Traffic Mirroring tags specifications.
    ///   - trafficDirection: The type of traffic.
    ///   - trafficMirrorFilterId: The ID of the filter that this rule is associated with.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTrafficMirrorFilterRule(
        clientToken: String? = CreateTrafficMirrorFilterRuleRequest.idempotencyToken(),
        description: String? = nil,
        destinationCidrBlock: String? = nil,
        destinationPortRange: TrafficMirrorPortRangeRequest? = nil,
        dryRun: Bool? = nil,
        protocol: Int? = nil,
        ruleAction: TrafficMirrorRuleAction? = nil,
        ruleNumber: Int? = nil,
        sourceCidrBlock: String? = nil,
        sourcePortRange: TrafficMirrorPortRangeRequest? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        trafficDirection: TrafficDirection? = nil,
        trafficMirrorFilterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTrafficMirrorFilterRuleResult {
        let input = CreateTrafficMirrorFilterRuleRequest(
            clientToken: clientToken, 
            description: description, 
            destinationCidrBlock: destinationCidrBlock, 
            destinationPortRange: destinationPortRange, 
            dryRun: dryRun, 
            protocol: `protocol`, 
            ruleAction: ruleAction, 
            ruleNumber: ruleNumber, 
            sourceCidrBlock: sourceCidrBlock, 
            sourcePortRange: sourcePortRange, 
            tagSpecifications: tagSpecifications, 
            trafficDirection: trafficDirection, 
            trafficMirrorFilterId: trafficMirrorFilterId
        )
        return try await self.createTrafficMirrorFilterRule(input, logger: logger)
    }

    /// Creates a Traffic Mirror session. A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it to the session to define a subset of the traffic to mirror, for example all TCP traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway.  By default, no traffic is mirrored. Use CreateTrafficMirrorFilter to create filter rules that specify the traffic to mirror.
    @Sendable
    @inlinable
    public func createTrafficMirrorSession(_ input: CreateTrafficMirrorSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrafficMirrorSessionResult {
        try await self.client.execute(
            operation: "CreateTrafficMirrorSession", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Traffic Mirror session. A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it to the session to define a subset of the traffic to mirror, for example all TCP traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway.  By default, no traffic is mirrored. Use CreateTrafficMirrorFilter to create filter rules that specify the traffic to mirror.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
    ///   - description: The description of the Traffic Mirror session.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInterfaceId: The ID of the source network interface.
    ///   - packetLength: The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. If you do not want to mirror the entire packet, use the PacketLength parameter to specify the number of bytes in each packet to mirror. For sessions with Network Load Balancer (NLB) Traffic Mirror targets the default PacketLength will be set to 8500. Valid values are 1-8500. Setting a PacketLength greater than 8500 will result in an error response.
    ///   - sessionNumber: The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
    ///   - tagSpecifications: The tags to assign to a Traffic Mirror session.
    ///   - trafficMirrorFilterId: The ID of the Traffic Mirror filter.
    ///   - trafficMirrorTargetId: The ID of the Traffic Mirror target.
    ///   - virtualNetworkId: The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique ID is chosen at random.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTrafficMirrorSession(
        clientToken: String? = CreateTrafficMirrorSessionRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        networkInterfaceId: String? = nil,
        packetLength: Int? = nil,
        sessionNumber: Int? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        trafficMirrorFilterId: String? = nil,
        trafficMirrorTargetId: String? = nil,
        virtualNetworkId: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTrafficMirrorSessionResult {
        let input = CreateTrafficMirrorSessionRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            networkInterfaceId: networkInterfaceId, 
            packetLength: packetLength, 
            sessionNumber: sessionNumber, 
            tagSpecifications: tagSpecifications, 
            trafficMirrorFilterId: trafficMirrorFilterId, 
            trafficMirrorTargetId: trafficMirrorTargetId, 
            virtualNetworkId: virtualNetworkId
        )
        return try await self.createTrafficMirrorSession(input, logger: logger)
    }

    /// Creates a target for your Traffic Mirror session. A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in different VPCs connected via VPC peering or a transit gateway. A Traffic Mirror target can be a network interface, a Network Load Balancer, or a Gateway Load Balancer endpoint. To use the target in a Traffic Mirror session, use  CreateTrafficMirrorSession.
    @Sendable
    @inlinable
    public func createTrafficMirrorTarget(_ input: CreateTrafficMirrorTargetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTrafficMirrorTargetResult {
        try await self.client.execute(
            operation: "CreateTrafficMirrorTarget", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a target for your Traffic Mirror session. A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in different VPCs connected via VPC peering or a transit gateway. A Traffic Mirror target can be a network interface, a Network Load Balancer, or a Gateway Load Balancer endpoint. To use the target in a Traffic Mirror session, use  CreateTrafficMirrorSession.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
    ///   - description: The description of the Traffic Mirror target.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - gatewayLoadBalancerEndpointId: The ID of the Gateway Load Balancer endpoint.
    ///   - networkInterfaceId: The network interface ID that is associated with the target.
    ///   - networkLoadBalancerArn: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
    ///   - tagSpecifications: The tags to assign to the Traffic Mirror target.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTrafficMirrorTarget(
        clientToken: String? = CreateTrafficMirrorTargetRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        gatewayLoadBalancerEndpointId: String? = nil,
        networkInterfaceId: String? = nil,
        networkLoadBalancerArn: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTrafficMirrorTargetResult {
        let input = CreateTrafficMirrorTargetRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            gatewayLoadBalancerEndpointId: gatewayLoadBalancerEndpointId, 
            networkInterfaceId: networkInterfaceId, 
            networkLoadBalancerArn: networkLoadBalancerArn, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createTrafficMirrorTarget(input, logger: logger)
    }

    /// Creates a transit gateway. You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the available state, you can attach your VPCs and VPN connections to the transit gateway. To attach your VPCs, use CreateTransitGatewayVpcAttachment. To attach a VPN connection, use CreateCustomerGateway to create a customer  gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to CreateVpnConnection. When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use CreateTransitGatewayRouteTable to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table.  You can use EnableTransitGatewayRouteTablePropagation to propagate routes from a resource  attachment to a transit gateway route table. If you disable automatic associations, you can use AssociateTransitGatewayRouteTable to associate a resource attachment with a transit gateway route table.
    @Sendable
    @inlinable
    public func createTransitGateway(_ input: CreateTransitGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayResult {
        try await self.client.execute(
            operation: "CreateTransitGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a transit gateway. You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the available state, you can attach your VPCs and VPN connections to the transit gateway. To attach your VPCs, use CreateTransitGatewayVpcAttachment. To attach a VPN connection, use CreateCustomerGateway to create a customer  gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to CreateVpnConnection. When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use CreateTransitGatewayRouteTable to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table.  You can use EnableTransitGatewayRouteTablePropagation to propagate routes from a resource  attachment to a transit gateway route table. If you disable automatic associations, you can use AssociateTransitGatewayRouteTable to associate a resource attachment with a transit gateway route table.
    ///
    /// Parameters:
    ///   - description: A description of the transit gateway.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - options: The transit gateway options.
    ///   - tagSpecifications: The tags to apply to the transit gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGateway(
        description: String? = nil,
        dryRun: Bool? = nil,
        options: TransitGatewayRequestOptions? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayResult {
        let input = CreateTransitGatewayRequest(
            description: description, 
            dryRun: dryRun, 
            options: options, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createTransitGateway(input, logger: logger)
    }

    /// Creates a Connect attachment from a specified transit gateway attachment. A Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a transit gateway and an appliance. A Connect attachment uses an existing VPC or Amazon Web Services Direct Connect attachment as the underlying transport mechanism.
    @Sendable
    @inlinable
    public func createTransitGatewayConnect(_ input: CreateTransitGatewayConnectRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayConnectResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayConnect", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Connect attachment from a specified transit gateway attachment. A Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a transit gateway and an appliance. A Connect attachment uses an existing VPC or Amazon Web Services Direct Connect attachment as the underlying transport mechanism.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - options: The Connect attachment options.
    ///   - tagSpecifications: The tags to apply to the Connect attachment.
    ///   - transportTransitGatewayAttachmentId: The ID of the transit gateway attachment. You can specify a VPC attachment or Amazon Web Services Direct Connect attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayConnect(
        dryRun: Bool? = nil,
        options: CreateTransitGatewayConnectRequestOptions? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transportTransitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayConnectResult {
        let input = CreateTransitGatewayConnectRequest(
            dryRun: dryRun, 
            options: options, 
            tagSpecifications: tagSpecifications, 
            transportTransitGatewayAttachmentId: transportTransitGatewayAttachmentId
        )
        return try await self.createTransitGatewayConnect(input, logger: logger)
    }

    /// Creates a Connect peer for a specified transit gateway Connect attachment between a transit gateway and an appliance. The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6). For more information, see Connect peers in the Amazon Web Services Transit Gateways Guide.
    @Sendable
    @inlinable
    public func createTransitGatewayConnectPeer(_ input: CreateTransitGatewayConnectPeerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayConnectPeerResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayConnectPeer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Connect peer for a specified transit gateway Connect attachment between a transit gateway and an appliance. The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6). For more information, see Connect peers in the Amazon Web Services Transit Gateways Guide.
    ///
    /// Parameters:
    ///   - bgpOptions: The BGP options for the Connect peer.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - insideCidrBlocks: The range of inside IP addresses that are used for BGP peering. You must specify a size /29 IPv4 CIDR block from the 169.254.0.0/16 range. The first address from the range must be configured on the appliance as the BGP IP address. You can also optionally specify a size /125 IPv6 CIDR block from the fd00::/8 range.
    ///   - peerAddress: The peer IP address (GRE outer IP address) on the appliance side of the Connect peer.
    ///   - tagSpecifications: The tags to apply to the Connect peer.
    ///   - transitGatewayAddress: The peer IP address (GRE outer IP address) on the transit gateway side of the Connect peer, which must be specified from a transit gateway CIDR block. If not specified, Amazon automatically assigns the first available IP address from the transit gateway CIDR block.
    ///   - transitGatewayAttachmentId: The ID of the Connect attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayConnectPeer(
        bgpOptions: TransitGatewayConnectRequestBgpOptions? = nil,
        dryRun: Bool? = nil,
        insideCidrBlocks: [String]? = nil,
        peerAddress: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transitGatewayAddress: String? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayConnectPeerResult {
        let input = CreateTransitGatewayConnectPeerRequest(
            bgpOptions: bgpOptions, 
            dryRun: dryRun, 
            insideCidrBlocks: insideCidrBlocks, 
            peerAddress: peerAddress, 
            tagSpecifications: tagSpecifications, 
            transitGatewayAddress: transitGatewayAddress, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.createTransitGatewayConnectPeer(input, logger: logger)
    }

    /// Creates a multicast domain using the specified transit gateway. The transit gateway  must be in the available state before you create a domain. Use DescribeTransitGateways to see the state of transit gateway.
    @Sendable
    @inlinable
    public func createTransitGatewayMulticastDomain(_ input: CreateTransitGatewayMulticastDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayMulticastDomainResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayMulticastDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a multicast domain using the specified transit gateway. The transit gateway  must be in the available state before you create a domain. Use DescribeTransitGateways to see the state of transit gateway.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - options: The options for the transit gateway multicast domain.
    ///   - tagSpecifications: The tags for the transit gateway multicast domain.
    ///   - transitGatewayId: The ID of the transit gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayMulticastDomain(
        dryRun: Bool? = nil,
        options: CreateTransitGatewayMulticastDomainRequestOptions? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transitGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayMulticastDomainResult {
        let input = CreateTransitGatewayMulticastDomainRequest(
            dryRun: dryRun, 
            options: options, 
            tagSpecifications: tagSpecifications, 
            transitGatewayId: transitGatewayId
        )
        return try await self.createTransitGatewayMulticastDomain(input, logger: logger)
    }

    /// Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter). The peer transit gateway can be in  your account or a different Amazon Web Services account. After you create the peering attachment, the owner of the accepter transit gateway  must accept the attachment request.
    @Sendable
    @inlinable
    public func createTransitGatewayPeeringAttachment(_ input: CreateTransitGatewayPeeringAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayPeeringAttachmentResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayPeeringAttachment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter). The peer transit gateway can be in  your account or a different Amazon Web Services account. After you create the peering attachment, the owner of the accepter transit gateway  must accept the attachment request.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - options: Requests a transit gateway peering attachment.
    ///   - peerAccountId: The ID of the Amazon Web Services account that owns the peer transit gateway.
    ///   - peerRegion: The Region where the peer transit gateway is located.
    ///   - peerTransitGatewayId: The ID of the peer transit gateway with which to create the peering attachment.
    ///   - tagSpecifications: The tags to apply to the transit gateway peering attachment.
    ///   - transitGatewayId: The ID of the transit gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayPeeringAttachment(
        dryRun: Bool? = nil,
        options: CreateTransitGatewayPeeringAttachmentRequestOptions? = nil,
        peerAccountId: String? = nil,
        peerRegion: String? = nil,
        peerTransitGatewayId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transitGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayPeeringAttachmentResult {
        let input = CreateTransitGatewayPeeringAttachmentRequest(
            dryRun: dryRun, 
            options: options, 
            peerAccountId: peerAccountId, 
            peerRegion: peerRegion, 
            peerTransitGatewayId: peerTransitGatewayId, 
            tagSpecifications: tagSpecifications, 
            transitGatewayId: transitGatewayId
        )
        return try await self.createTransitGatewayPeeringAttachment(input, logger: logger)
    }

    /// Creates a transit gateway policy table.
    @Sendable
    @inlinable
    public func createTransitGatewayPolicyTable(_ input: CreateTransitGatewayPolicyTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayPolicyTableResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayPolicyTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a transit gateway policy table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags specification for the transit gateway policy table created during the request.
    ///   - transitGatewayId: The ID of the transit gateway used for the policy table.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayPolicyTable(
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transitGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayPolicyTableResult {
        let input = CreateTransitGatewayPolicyTableRequest(
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications, 
            transitGatewayId: transitGatewayId
        )
        return try await self.createTransitGatewayPolicyTable(input, logger: logger)
    }

    /// Creates a reference (route) to a prefix list in a specified transit gateway route table.
    @Sendable
    @inlinable
    public func createTransitGatewayPrefixListReference(_ input: CreateTransitGatewayPrefixListReferenceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayPrefixListReferenceResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayPrefixListReference", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a reference (route) to a prefix list in a specified transit gateway route table.
    ///
    /// Parameters:
    ///   - blackhole: Indicates whether to drop traffic that matches this route.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - prefixListId: The ID of the prefix list that is used for destination matches.
    ///   - transitGatewayAttachmentId: The ID of the attachment to which traffic is routed.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayPrefixListReference(
        blackhole: Bool? = nil,
        dryRun: Bool? = nil,
        prefixListId: String? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayPrefixListReferenceResult {
        let input = CreateTransitGatewayPrefixListReferenceRequest(
            blackhole: blackhole, 
            dryRun: dryRun, 
            prefixListId: prefixListId, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.createTransitGatewayPrefixListReference(input, logger: logger)
    }

    /// Creates a static route for the specified transit gateway route table.
    @Sendable
    @inlinable
    public func createTransitGatewayRoute(_ input: CreateTransitGatewayRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayRouteResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a static route for the specified transit gateway route table.
    ///
    /// Parameters:
    ///   - blackhole: Indicates whether to drop traffic that matches this route.
    ///   - destinationCidrBlock: The CIDR range used for destination matches. Routing decisions are based on the most specific match.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayRoute(
        blackhole: Bool? = nil,
        destinationCidrBlock: String? = nil,
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayRouteResult {
        let input = CreateTransitGatewayRouteRequest(
            blackhole: blackhole, 
            destinationCidrBlock: destinationCidrBlock, 
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.createTransitGatewayRoute(input, logger: logger)
    }

    /// Creates a route table for the specified transit gateway.
    @Sendable
    @inlinable
    public func createTransitGatewayRouteTable(_ input: CreateTransitGatewayRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayRouteTableResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a route table for the specified transit gateway.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags to apply to the transit gateway route table.
    ///   - transitGatewayId: The ID of the transit gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayRouteTable(
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transitGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayRouteTableResult {
        let input = CreateTransitGatewayRouteTableRequest(
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications, 
            transitGatewayId: transitGatewayId
        )
        return try await self.createTransitGatewayRouteTable(input, logger: logger)
    }

    /// Advertises a new transit gateway route table.
    @Sendable
    @inlinable
    public func createTransitGatewayRouteTableAnnouncement(_ input: CreateTransitGatewayRouteTableAnnouncementRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayRouteTableAnnouncementResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayRouteTableAnnouncement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Advertises a new transit gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - peeringAttachmentId: The ID of the peering attachment.
    ///   - tagSpecifications: The tags specifications applied to the transit gateway route table announcement.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayRouteTableAnnouncement(
        dryRun: Bool? = nil,
        peeringAttachmentId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayRouteTableAnnouncementResult {
        let input = CreateTransitGatewayRouteTableAnnouncementRequest(
            dryRun: dryRun, 
            peeringAttachmentId: peeringAttachmentId, 
            tagSpecifications: tagSpecifications, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.createTransitGatewayRouteTableAnnouncement(input, logger: logger)
    }

    /// Attaches the specified VPC to the specified transit gateway. If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table. To send VPC traffic to an attached transit gateway, add a route to the VPC route table using CreateRoute.
    @Sendable
    @inlinable
    public func createTransitGatewayVpcAttachment(_ input: CreateTransitGatewayVpcAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateTransitGatewayVpcAttachmentResult {
        try await self.client.execute(
            operation: "CreateTransitGatewayVpcAttachment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Attaches the specified VPC to the specified transit gateway. If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table. To send VPC traffic to an attached transit gateway, add a route to the VPC route table using CreateRoute.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - options: The VPC attachment options.
    ///   - subnetIds: The IDs of one or more subnets. You can specify only one subnet per Availability Zone.  You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet.
    ///   - tagSpecifications: The tags to apply to the VPC attachment.
    ///   - transitGatewayId: The ID of the transit gateway.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func createTransitGatewayVpcAttachment(
        dryRun: Bool? = nil,
        options: CreateTransitGatewayVpcAttachmentRequestOptions? = nil,
        subnetIds: [String]? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transitGatewayId: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateTransitGatewayVpcAttachmentResult {
        let input = CreateTransitGatewayVpcAttachmentRequest(
            dryRun: dryRun, 
            options: options, 
            subnetIds: subnetIds, 
            tagSpecifications: tagSpecifications, 
            transitGatewayId: transitGatewayId, 
            vpcId: vpcId
        )
        return try await self.createTransitGatewayVpcAttachment(input, logger: logger)
    }

    /// An Amazon Web Services Verified Access endpoint is where you define your application along with an optional endpoint-level access policy.
    @Sendable
    @inlinable
    public func createVerifiedAccessEndpoint(_ input: CreateVerifiedAccessEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVerifiedAccessEndpointResult {
        try await self.client.execute(
            operation: "CreateVerifiedAccessEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// An Amazon Web Services Verified Access endpoint is where you define your application along with an optional endpoint-level access policy.
    ///
    /// Parameters:
    ///   - applicationDomain: The DNS name for users to reach your application.
    ///   - attachmentType: The type of attachment.
    ///   - cidrOptions: The CIDR options. This parameter is required if the endpoint type is cidr.
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - description: A description for the Verified Access endpoint.
    ///   - domainCertificateArn: The ARN of the public TLS/SSL certificate in Amazon Web Services Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - endpointDomainPrefix: A custom identifier that is prepended to the DNS name that is generated for the endpoint.
    ///   - endpointType: The type of Verified Access endpoint to create.
    ///   - loadBalancerOptions: The load balancer details. This parameter is required if the endpoint type is load-balancer.
    ///   - networkInterfaceOptions: The network interface details. This parameter is required if the endpoint type is network-interface.
    ///   - policyDocument: The Verified Access policy document.
    ///   - rdsOptions: The RDS details. This parameter is required if the endpoint type is rds.
    ///   - securityGroupIds: The IDs of the security groups to associate with the Verified Access endpoint. Required if AttachmentType is set to vpc.
    ///   - sseSpecification: The options for server side encryption.
    ///   - tagSpecifications: The tags to assign to the Verified Access endpoint.
    ///   - verifiedAccessGroupId: The ID of the Verified Access group to associate the endpoint with.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVerifiedAccessEndpoint(
        applicationDomain: String? = nil,
        attachmentType: VerifiedAccessEndpointAttachmentType? = nil,
        cidrOptions: CreateVerifiedAccessEndpointCidrOptions? = nil,
        clientToken: String? = CreateVerifiedAccessEndpointRequest.idempotencyToken(),
        description: String? = nil,
        domainCertificateArn: String? = nil,
        dryRun: Bool? = nil,
        endpointDomainPrefix: String? = nil,
        endpointType: VerifiedAccessEndpointType? = nil,
        loadBalancerOptions: CreateVerifiedAccessEndpointLoadBalancerOptions? = nil,
        networkInterfaceOptions: CreateVerifiedAccessEndpointEniOptions? = nil,
        policyDocument: String? = nil,
        rdsOptions: CreateVerifiedAccessEndpointRdsOptions? = nil,
        securityGroupIds: [String]? = nil,
        sseSpecification: VerifiedAccessSseSpecificationRequest? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        verifiedAccessGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVerifiedAccessEndpointResult {
        let input = CreateVerifiedAccessEndpointRequest(
            applicationDomain: applicationDomain, 
            attachmentType: attachmentType, 
            cidrOptions: cidrOptions, 
            clientToken: clientToken, 
            description: description, 
            domainCertificateArn: domainCertificateArn, 
            dryRun: dryRun, 
            endpointDomainPrefix: endpointDomainPrefix, 
            endpointType: endpointType, 
            loadBalancerOptions: loadBalancerOptions, 
            networkInterfaceOptions: networkInterfaceOptions, 
            policyDocument: policyDocument, 
            rdsOptions: rdsOptions, 
            securityGroupIds: securityGroupIds, 
            sseSpecification: sseSpecification, 
            tagSpecifications: tagSpecifications, 
            verifiedAccessGroupId: verifiedAccessGroupId
        )
        return try await self.createVerifiedAccessEndpoint(input, logger: logger)
    }

    /// An Amazon Web Services Verified Access group is a collection of Amazon Web Services Verified Access endpoints who's associated applications have similar security requirements. Each instance within a Verified Access group shares an Verified Access policy. For example, you can group all Verified Access instances associated with "sales" applications together and use one common Verified Access policy.
    @Sendable
    @inlinable
    public func createVerifiedAccessGroup(_ input: CreateVerifiedAccessGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVerifiedAccessGroupResult {
        try await self.client.execute(
            operation: "CreateVerifiedAccessGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// An Amazon Web Services Verified Access group is a collection of Amazon Web Services Verified Access endpoints who's associated applications have similar security requirements. Each instance within a Verified Access group shares an Verified Access policy. For example, you can group all Verified Access instances associated with "sales" applications together and use one common Verified Access policy.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - description: A description for the Verified Access group.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - policyDocument: The Verified Access policy document.
    ///   - sseSpecification: The options for server side encryption.
    ///   - tagSpecifications: The tags to assign to the Verified Access group.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVerifiedAccessGroup(
        clientToken: String? = CreateVerifiedAccessGroupRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        policyDocument: String? = nil,
        sseSpecification: VerifiedAccessSseSpecificationRequest? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVerifiedAccessGroupResult {
        let input = CreateVerifiedAccessGroupRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            policyDocument: policyDocument, 
            sseSpecification: sseSpecification, 
            tagSpecifications: tagSpecifications, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return try await self.createVerifiedAccessGroup(input, logger: logger)
    }

    /// An Amazon Web Services Verified Access instance is a regional entity that evaluates application requests and grants access only when your security requirements are met.
    @Sendable
    @inlinable
    public func createVerifiedAccessInstance(_ input: CreateVerifiedAccessInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVerifiedAccessInstanceResult {
        try await self.client.execute(
            operation: "CreateVerifiedAccessInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// An Amazon Web Services Verified Access instance is a regional entity that evaluates application requests and grants access only when your security requirements are met.
    ///
    /// Parameters:
    ///   - cidrEndpointsCustomSubDomain: The custom subdomain.
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - description: A description for the Verified Access instance.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fipsEnabled: Enable or disable support for Federal Information Processing Standards (FIPS) on the instance.
    ///   - tagSpecifications: The tags to assign to the Verified Access instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVerifiedAccessInstance(
        cidrEndpointsCustomSubDomain: String? = nil,
        clientToken: String? = CreateVerifiedAccessInstanceRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        fipsEnabled: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVerifiedAccessInstanceResult {
        let input = CreateVerifiedAccessInstanceRequest(
            cidrEndpointsCustomSubDomain: cidrEndpointsCustomSubDomain, 
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            fipsEnabled: fipsEnabled, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createVerifiedAccessInstance(input, logger: logger)
    }

    /// A trust provider is a third-party entity that creates, maintains, and manages identity information for users and devices. When an application request is made, the identity information sent by the trust provider is evaluated by Verified Access before allowing or denying the application request.
    @Sendable
    @inlinable
    public func createVerifiedAccessTrustProvider(_ input: CreateVerifiedAccessTrustProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVerifiedAccessTrustProviderResult {
        try await self.client.execute(
            operation: "CreateVerifiedAccessTrustProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// A trust provider is a third-party entity that creates, maintains, and manages identity information for users and devices. When an application request is made, the identity information sent by the trust provider is evaluated by Verified Access before allowing or denying the application request.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - description: A description for the Verified Access trust provider.
    ///   - deviceOptions: The options for a device-based trust provider. This parameter is required when the provider type is device.
    ///   - deviceTrustProviderType: The type of device-based trust provider. This parameter is required when the provider type is device.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - nativeApplicationOidcOptions: The OpenID Connect (OIDC) options.
    ///   - oidcOptions: The options for a OpenID Connect-compatible user-identity trust provider. This parameter is required when the provider type is user.
    ///   - policyReferenceName: The identifier to be used when working with policy rules.
    ///   - sseSpecification: The options for server side encryption.
    ///   - tagSpecifications: The tags to assign to the Verified Access trust provider.
    ///   - trustProviderType: The type of trust provider.
    ///   - userTrustProviderType: The type of user-based trust provider. This parameter is required when the provider type is user.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVerifiedAccessTrustProvider(
        clientToken: String? = CreateVerifiedAccessTrustProviderRequest.idempotencyToken(),
        description: String? = nil,
        deviceOptions: CreateVerifiedAccessTrustProviderDeviceOptions? = nil,
        deviceTrustProviderType: DeviceTrustProviderType? = nil,
        dryRun: Bool? = nil,
        nativeApplicationOidcOptions: CreateVerifiedAccessNativeApplicationOidcOptions? = nil,
        oidcOptions: CreateVerifiedAccessTrustProviderOidcOptions? = nil,
        policyReferenceName: String? = nil,
        sseSpecification: VerifiedAccessSseSpecificationRequest? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        trustProviderType: TrustProviderType? = nil,
        userTrustProviderType: UserTrustProviderType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVerifiedAccessTrustProviderResult {
        let input = CreateVerifiedAccessTrustProviderRequest(
            clientToken: clientToken, 
            description: description, 
            deviceOptions: deviceOptions, 
            deviceTrustProviderType: deviceTrustProviderType, 
            dryRun: dryRun, 
            nativeApplicationOidcOptions: nativeApplicationOidcOptions, 
            oidcOptions: oidcOptions, 
            policyReferenceName: policyReferenceName, 
            sseSpecification: sseSpecification, 
            tagSpecifications: tagSpecifications, 
            trustProviderType: trustProviderType, 
            userTrustProviderType: userTrustProviderType
        )
        return try await self.createVerifiedAccessTrustProvider(input, logger: logger)
    }

    /// Creates an EBS volume that can be attached to an instance in the same Availability Zone. You can create a new empty volume or restore a volume from an EBS snapshot. Any Amazon Web Services Marketplace product codes from the snapshot are propagated to the volume. You can create encrypted volumes. Encrypted volumes must be attached to instances that  support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically  encrypted. For more information, see Amazon EBS encryption in the Amazon EBS User Guide. You can tag your volumes during creation. For more information, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide. For more information, see Create an Amazon EBS volume in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func createVolume(_ input: CreateVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Volume {
        try await self.client.execute(
            operation: "CreateVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates an EBS volume that can be attached to an instance in the same Availability Zone. You can create a new empty volume or restore a volume from an EBS snapshot. Any Amazon Web Services Marketplace product codes from the snapshot are propagated to the volume. You can create encrypted volumes. Encrypted volumes must be attached to instances that  support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically  encrypted. For more information, see Amazon EBS encryption in the Amazon EBS User Guide. You can tag your volumes during creation. For more information, see Tag your Amazon EC2 resources in the Amazon EC2 User Guide. For more information, see Create an Amazon EBS volume in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - availabilityZone: The ID of the Availability Zone in which to create the volume. For example, us-east-1a.
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency  of the request. For more information, see Ensure  Idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - encrypted: Indicates whether the volume should be encrypted.  The effect of setting the encryption state to true depends on
    ///   - iops: The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents  the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline  performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:    gp3: 3,000 - 16,000 IOPS    io1: 100 - 64,000 IOPS    io2: 100 - 256,000 IOPS   For io2 volumes, you can achieve up to 256,000 IOPS on
    ///   - kmsKeyId: The identifier of the KMS key to use for Amazon EBS encryption. If this parameter is not specified, your KMS key for Amazon EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the KMS key using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid,  the action can appear to complete, but eventually fails.
    ///   - multiAttachEnabled: Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the  volume to up to 16 Instances built on the Nitro System in the same Availability Zone. This parameter is  	supported with io1 and io2 volumes only. For more information,  	see  		Amazon EBS Multi-Attach in the Amazon EBS User Guide.
    ///   - operator: Reserved for internal use.
    ///   - outpostArn: The Amazon Resource Name (ARN) of the Outpost on which to create the volume. If you intend to use a volume with an instance running on an outpost, then you must  create the volume on the same outpost as the instance. You can't use a volume created  in an Amazon Web Services Region with an instance on an Amazon Web Services outpost, or the other way around.
    ///   - size: The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume  size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:    gp2 and gp3: 1 - 16,384 GiB    io1: 4 - 16,384 GiB    io2: 4 - 65,536 GiB    st1 and sc1: 125 - 16,384 GiB    standard: 1 - 1024 GiB
    ///   - snapshotId: The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
    ///   - tagSpecifications: The tags to apply to the volume during creation.
    ///   - throughput: The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This parameter is valid only for gp3 volumes. Valid Range: Minimum value of 125. Maximum value of 1000.
    ///   - volumeType: The volume type. This parameter can be one of the following values:   General Purpose SSD: gp2 | gp3    Provisioned IOPS SSD: io1 | io2    Throughput Optimized HDD: st1    Cold HDD: sc1    Magnetic: standard     Throughput Optimized HDD (st1) and Cold HDD (sc1) volumes can't be used as boot volumes.  For more information, see Amazon EBS volume types in the Amazon EBS User Guide. Default: gp2
    ///   - logger: Logger use during operation
    @inlinable
    public func createVolume(
        availabilityZone: String? = nil,
        clientToken: String? = CreateVolumeRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        encrypted: Bool? = nil,
        iops: Int? = nil,
        kmsKeyId: String? = nil,
        multiAttachEnabled: Bool? = nil,
        operator: OperatorRequest? = nil,
        outpostArn: String? = nil,
        size: Int? = nil,
        snapshotId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        throughput: Int? = nil,
        volumeType: VolumeType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Volume {
        let input = CreateVolumeRequest(
            availabilityZone: availabilityZone, 
            clientToken: clientToken, 
            dryRun: dryRun, 
            encrypted: encrypted, 
            iops: iops, 
            kmsKeyId: kmsKeyId, 
            multiAttachEnabled: multiAttachEnabled, 
            operator: `operator`, 
            outpostArn: outpostArn, 
            size: size, 
            snapshotId: snapshotId, 
            tagSpecifications: tagSpecifications, 
            throughput: throughput, 
            volumeType: volumeType
        )
        return try await self.createVolume(input, logger: logger)
    }

    /// Creates a VPC with the specified CIDR blocks. For more information, see IP addressing for your VPCs and subnets in the  Amazon VPC User Guide. You can optionally request an IPv6 CIDR block for the VPC. You can request an Amazon-provided IPv6 CIDR block from Amazon's pool of IPv6 addresses or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (BYOIP). By default, each instance that you launch in the VPC has the default DHCP options, which
    /// 			include only a default DNS server that we provide (AmazonProvidedDNS). For more
    /// 			information, see DHCP option sets in the Amazon VPC User Guide. You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see Dedicated Instances in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func createVpc(_ input: CreateVpcRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcResult {
        try await self.client.execute(
            operation: "CreateVpc", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a VPC with the specified CIDR blocks. For more information, see IP addressing for your VPCs and subnets in the  Amazon VPC User Guide. You can optionally request an IPv6 CIDR block for the VPC. You can request an Amazon-provided IPv6 CIDR block from Amazon's pool of IPv6 addresses or an IPv6 CIDR block from an IPv6 address pool that you provisioned through bring your own IP addresses (BYOIP). By default, each instance that you launch in the VPC has the default DHCP options, which
    /// 			include only a default DNS server that we provide (AmazonProvidedDNS). For more
    /// 			information, see DHCP option sets in the Amazon VPC User Guide. You can specify the instance tenancy value for the VPC when you create it. You can't change this value for the VPC after you create it. For more information, see Dedicated Instances in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - amazonProvidedIpv6CidrBlock: Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
    ///   - cidrBlock: The IPv4 network range for the VPC, in CIDR notation. For example,
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceTenancy: The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC.   Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default
    ///   - ipv4IpamPoolId: The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///   - ipv4NetmaskLength: The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///   - ipv6CidrBlock: The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
    ///   - ipv6CidrBlockNetworkBorderGroup: The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location. You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.
    ///   - ipv6IpamPoolId: The ID of an IPv6 IPAM pool which will be used to allocate this VPC an IPv6 CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across Amazon Web Services Regions and accounts throughout your Amazon Web Services Organization. For more information, see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///   - ipv6NetmaskLength: The netmask length of the IPv6 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///   - ipv6Pool: The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
    ///   - tagSpecifications: The tags to assign to the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpc(
        amazonProvidedIpv6CidrBlock: Bool? = nil,
        cidrBlock: String? = nil,
        dryRun: Bool? = nil,
        instanceTenancy: Tenancy? = nil,
        ipv4IpamPoolId: String? = nil,
        ipv4NetmaskLength: Int? = nil,
        ipv6CidrBlock: String? = nil,
        ipv6CidrBlockNetworkBorderGroup: String? = nil,
        ipv6IpamPoolId: String? = nil,
        ipv6NetmaskLength: Int? = nil,
        ipv6Pool: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpcResult {
        let input = CreateVpcRequest(
            amazonProvidedIpv6CidrBlock: amazonProvidedIpv6CidrBlock, 
            cidrBlock: cidrBlock, 
            dryRun: dryRun, 
            instanceTenancy: instanceTenancy, 
            ipv4IpamPoolId: ipv4IpamPoolId, 
            ipv4NetmaskLength: ipv4NetmaskLength, 
            ipv6CidrBlock: ipv6CidrBlock, 
            ipv6CidrBlockNetworkBorderGroup: ipv6CidrBlockNetworkBorderGroup, 
            ipv6IpamPoolId: ipv6IpamPoolId, 
            ipv6NetmaskLength: ipv6NetmaskLength, 
            ipv6Pool: ipv6Pool, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createVpc(input, logger: logger)
    }

    /// Create a VPC Block Public Access (BPA) exclusion. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func createVpcBlockPublicAccessExclusion(_ input: CreateVpcBlockPublicAccessExclusionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcBlockPublicAccessExclusionResult {
        try await self.client.execute(
            operation: "CreateVpcBlockPublicAccessExclusion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Create a VPC Block Public Access (BPA) exclusion. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - internetGatewayExclusionMode: The exclusion mode for internet gateway traffic.    allow-bidirectional: Allow all internet traffic to and from the excluded VPCs and subnets.    allow-egress: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.
    ///   - subnetId: A subnet ID.
    ///   - tagSpecifications:  tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - vpcId: A VPC ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpcBlockPublicAccessExclusion(
        dryRun: Bool? = nil,
        internetGatewayExclusionMode: InternetGatewayExclusionMode? = nil,
        subnetId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpcBlockPublicAccessExclusionResult {
        let input = CreateVpcBlockPublicAccessExclusionRequest(
            dryRun: dryRun, 
            internetGatewayExclusionMode: internetGatewayExclusionMode, 
            subnetId: subnetId, 
            tagSpecifications: tagSpecifications, 
            vpcId: vpcId
        )
        return try await self.createVpcBlockPublicAccessExclusion(input, logger: logger)
    }

    /// Creates a VPC endpoint. A VPC endpoint provides a private connection between the specified VPC and the specified endpoint service. You can use an endpoint service provided by Amazon Web Services, an Amazon Web Services Marketplace Partner, or another Amazon Web Services account. For more information, see the Amazon Web Services PrivateLink User Guide.
    @Sendable
    @inlinable
    public func createVpcEndpoint(_ input: CreateVpcEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcEndpointResult {
        try await self.client.execute(
            operation: "CreateVpcEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a VPC endpoint. A VPC endpoint provides a private connection between the specified VPC and the specified endpoint service. You can use an endpoint service provided by Amazon Web Services, an Amazon Web Services Marketplace Partner, or another Amazon Web Services account. For more information, see the Amazon Web Services PrivateLink User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
    ///   - dnsOptions: The DNS options for the endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipAddressType: The IP address type for the endpoint.
    ///   - policyDocument: (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
    ///   - privateDnsEnabled: (Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to set the VPC attributes. Default: true
    ///   - resourceConfigurationArn: The Amazon Resource Name (ARN) of a resource configuration that will be associated with the VPC endpoint of type resource.
    ///   - routeTableIds: (Gateway endpoint) The route table IDs.
    ///   - securityGroupIds: (Interface endpoint) The IDs of the security groups to associate with the endpoint network interfaces. If this parameter is not specified, we use the default  security group for the VPC.
    ///   - serviceName: The name of the endpoint service.
    ///   - serviceNetworkArn: The Amazon Resource Name (ARN) of a service network that will be associated with the VPC endpoint of type service-network.
    ///   - serviceRegion: The Region where the service is hosted. The default is the current Region.
    ///   - subnetConfigurations: The subnet configurations for the endpoint.
    ///   - subnetIds: (Interface and Gateway Load Balancer endpoints) The IDs of the subnets in which to create endpoint network interfaces. For a Gateway Load Balancer endpoint, you can specify only one subnet.
    ///   - tagSpecifications: The tags to associate with the endpoint.
    ///   - vpcEndpointType: The type of endpoint. Default: Gateway
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpcEndpoint(
        clientToken: String? = nil,
        dnsOptions: DnsOptionsSpecification? = nil,
        dryRun: Bool? = nil,
        ipAddressType: IpAddressType? = nil,
        policyDocument: String? = nil,
        privateDnsEnabled: Bool? = nil,
        resourceConfigurationArn: String? = nil,
        routeTableIds: [String]? = nil,
        securityGroupIds: [String]? = nil,
        serviceName: String? = nil,
        serviceNetworkArn: String? = nil,
        serviceRegion: String? = nil,
        subnetConfigurations: [SubnetConfiguration]? = nil,
        subnetIds: [String]? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcEndpointType: VpcEndpointType? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpcEndpointResult {
        let input = CreateVpcEndpointRequest(
            clientToken: clientToken, 
            dnsOptions: dnsOptions, 
            dryRun: dryRun, 
            ipAddressType: ipAddressType, 
            policyDocument: policyDocument, 
            privateDnsEnabled: privateDnsEnabled, 
            resourceConfigurationArn: resourceConfigurationArn, 
            routeTableIds: routeTableIds, 
            securityGroupIds: securityGroupIds, 
            serviceName: serviceName, 
            serviceNetworkArn: serviceNetworkArn, 
            serviceRegion: serviceRegion, 
            subnetConfigurations: subnetConfigurations, 
            subnetIds: subnetIds, 
            tagSpecifications: tagSpecifications, 
            vpcEndpointType: vpcEndpointType, 
            vpcId: vpcId
        )
        return try await self.createVpcEndpoint(input, logger: logger)
    }

    /// Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see Creating an Amazon SNS topic in the Amazon SNS Developer Guide. You can create a connection notification for interface endpoints only.
    @Sendable
    @inlinable
    public func createVpcEndpointConnectionNotification(_ input: CreateVpcEndpointConnectionNotificationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcEndpointConnectionNotificationResult {
        try await self.client.execute(
            operation: "CreateVpcEndpointConnectionNotification", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see Creating an Amazon SNS topic in the Amazon SNS Developer Guide. You can create a connection notification for interface endpoints only.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
    ///   - connectionEvents: The endpoint events for which to receive notifications. Valid values are Accept, Connect, Delete, and Reject.
    ///   - connectionNotificationArn: The ARN of the SNS topic for the notifications.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - serviceId: The ID of the endpoint service.
    ///   - vpcEndpointId: The ID of the endpoint.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpcEndpointConnectionNotification(
        clientToken: String? = nil,
        connectionEvents: [String]? = nil,
        connectionNotificationArn: String? = nil,
        dryRun: Bool? = nil,
        serviceId: String? = nil,
        vpcEndpointId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpcEndpointConnectionNotificationResult {
        let input = CreateVpcEndpointConnectionNotificationRequest(
            clientToken: clientToken, 
            connectionEvents: connectionEvents, 
            connectionNotificationArn: connectionNotificationArn, 
            dryRun: dryRun, 
            serviceId: serviceId, 
            vpcEndpointId: vpcEndpointId
        )
        return try await self.createVpcEndpointConnectionNotification(input, logger: logger)
    }

    /// Creates a VPC endpoint service to which service consumers (Amazon Web Services accounts, users, and IAM roles) can connect. Before you create an endpoint service, you must create one of the following for your service:   A Network Load Balancer.  Service consumers connect to your service using an interface endpoint.   A Gateway Load Balancer.  Service consumers connect to your service using a Gateway Load Balancer endpoint.   If you set the private DNS name, you must prove that you own the private DNS domain name. For more information, see the Amazon Web Services PrivateLink
    /// 	        Guide.
    @Sendable
    @inlinable
    public func createVpcEndpointServiceConfiguration(_ input: CreateVpcEndpointServiceConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcEndpointServiceConfigurationResult {
        try await self.client.execute(
            operation: "CreateVpcEndpointServiceConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a VPC endpoint service to which service consumers (Amazon Web Services accounts, users, and IAM roles) can connect. Before you create an endpoint service, you must create one of the following for your service:   A Network Load Balancer.  Service consumers connect to your service using an interface endpoint.   A Gateway Load Balancer.  Service consumers connect to your service using a Gateway Load Balancer endpoint.   If you set the private DNS name, you must prove that you own the private DNS domain name. For more information, see the Amazon Web Services PrivateLink
    /// 	        Guide.
    ///
    /// Parameters:
    ///   - acceptanceRequired: Indicates whether requests from service consumers to create an endpoint to your service must be accepted manually.
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to ensure idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - gatewayLoadBalancerArns: The Amazon Resource Names (ARNs) of the Gateway Load Balancers.
    ///   - networkLoadBalancerArns: The Amazon Resource Names (ARNs) of the Network Load Balancers.
    ///   - privateDnsName: (Interface endpoint configuration) The private DNS name to assign to the VPC endpoint service.
    ///   - supportedIpAddressTypes: The supported IP address types. The possible values are ipv4 and ipv6.
    ///   - supportedRegions: The Regions from which service consumers can access the service.
    ///   - tagSpecifications: The tags to associate with the service.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpcEndpointServiceConfiguration(
        acceptanceRequired: Bool? = nil,
        clientToken: String? = nil,
        dryRun: Bool? = nil,
        gatewayLoadBalancerArns: [String]? = nil,
        networkLoadBalancerArns: [String]? = nil,
        privateDnsName: String? = nil,
        supportedIpAddressTypes: [String]? = nil,
        supportedRegions: [String]? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpcEndpointServiceConfigurationResult {
        let input = CreateVpcEndpointServiceConfigurationRequest(
            acceptanceRequired: acceptanceRequired, 
            clientToken: clientToken, 
            dryRun: dryRun, 
            gatewayLoadBalancerArns: gatewayLoadBalancerArns, 
            networkLoadBalancerArns: networkLoadBalancerArns, 
            privateDnsName: privateDnsName, 
            supportedIpAddressTypes: supportedIpAddressTypes, 
            supportedRegions: supportedRegions, 
            tagSpecifications: tagSpecifications
        )
        return try await self.createVpcEndpointServiceConfiguration(input, logger: logger)
    }

    /// Requests a VPC peering connection between two VPCs: a requester VPC that you own and
    /// 		  an accepter VPC with which to create the connection. The accepter VPC can belong to
    /// 		  another Amazon Web Services account and can be in a different Region to the requester VPC.  The requester VPC and accepter VPC cannot have overlapping CIDR blocks.  Limitations and rules apply to a VPC peering connection. For more information, see  the VPC peering limitations in the VPC Peering Guide.  The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected. If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of failed.
    @Sendable
    @inlinable
    public func createVpcPeeringConnection(_ input: CreateVpcPeeringConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpcPeeringConnectionResult {
        try await self.client.execute(
            operation: "CreateVpcPeeringConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a VPC peering connection between two VPCs: a requester VPC that you own and
    /// 		  an accepter VPC with which to create the connection. The accepter VPC can belong to
    /// 		  another Amazon Web Services account and can be in a different Region to the requester VPC.  The requester VPC and accepter VPC cannot have overlapping CIDR blocks.  Limitations and rules apply to a VPC peering connection. For more information, see  the VPC peering limitations in the VPC Peering Guide.  The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected. If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of failed.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - peerOwnerId: The Amazon Web Services account ID of the owner of the accepter VPC. Default: Your Amazon Web Services account ID
    ///   - peerRegion: The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request. Default: The Region in which you make the request.
    ///   - peerVpcId: The ID of the VPC with which you are creating the VPC peering connection. You must
    ///   - tagSpecifications: The tags to assign to the peering connection.
    ///   - vpcId: The ID of the requester VPC. You must specify this parameter in the
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpcPeeringConnection(
        dryRun: Bool? = nil,
        peerOwnerId: String? = nil,
        peerRegion: String? = nil,
        peerVpcId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpcPeeringConnectionResult {
        let input = CreateVpcPeeringConnectionRequest(
            dryRun: dryRun, 
            peerOwnerId: peerOwnerId, 
            peerRegion: peerRegion, 
            peerVpcId: peerVpcId, 
            tagSpecifications: tagSpecifications, 
            vpcId: vpcId
        )
        return try await self.createVpcPeeringConnection(input, logger: logger)
    }

    /// Creates a VPN connection between an existing virtual private gateway or transit gateway and a customer gateway. The supported connection type is ipsec.1. The response includes information that you need to give to your network administrator to configure your customer gateway.  We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway device.  If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call. This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    @Sendable
    @inlinable
    public func createVpnConnection(_ input: CreateVpnConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpnConnectionResult {
        try await self.client.execute(
            operation: "CreateVpnConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a VPN connection between an existing virtual private gateway or transit gateway and a customer gateway. The supported connection type is ipsec.1. The response includes information that you need to give to your network administrator to configure your customer gateway.  We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway device.  If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call. This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    ///
    /// Parameters:
    ///   - customerGatewayId: The ID of the customer gateway.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - options: The options for the VPN connection.
    ///   - tagSpecifications: The tags to apply to the VPN connection.
    ///   - transitGatewayId: The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.
    ///   - type: The type of VPN connection (ipsec.1).
    ///   - vpnGatewayId: The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpnConnection(
        customerGatewayId: String? = nil,
        dryRun: Bool? = nil,
        options: VpnConnectionOptionsSpecification? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        transitGatewayId: String? = nil,
        type: String? = nil,
        vpnGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpnConnectionResult {
        let input = CreateVpnConnectionRequest(
            customerGatewayId: customerGatewayId, 
            dryRun: dryRun, 
            options: options, 
            tagSpecifications: tagSpecifications, 
            transitGatewayId: transitGatewayId, 
            type: type, 
            vpnGatewayId: vpnGatewayId
        )
        return try await self.createVpnConnection(input, logger: logger)
    }

    /// Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    @Sendable
    @inlinable
    public func createVpnConnectionRoute(_ input: CreateVpnConnectionRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "CreateVpnConnectionRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    ///
    /// Parameters:
    ///   - destinationCidrBlock: The CIDR block associated with the local subnet of the customer network.
    ///   - vpnConnectionId: The ID of the VPN connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpnConnectionRoute(
        destinationCidrBlock: String? = nil,
        vpnConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = CreateVpnConnectionRouteRequest(
            destinationCidrBlock: destinationCidrBlock, 
            vpnConnectionId: vpnConnectionId
        )
        return try await self.createVpnConnectionRoute(input, logger: logger)
    }

    /// Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    @Sendable
    @inlinable
    public func createVpnGateway(_ input: CreateVpnGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> CreateVpnGatewayResult {
        try await self.client.execute(
            operation: "CreateVpnGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    ///
    /// Parameters:
    ///   - amazonSideAsn: A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range. Default: 64512
    ///   - availabilityZone: The Availability Zone for the virtual private gateway.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - tagSpecifications: The tags to apply to the virtual private gateway.
    ///   - type: The type of VPN connection this virtual private gateway supports.
    ///   - logger: Logger use during operation
    @inlinable
    public func createVpnGateway(
        amazonSideAsn: Int64? = nil,
        availabilityZone: String? = nil,
        dryRun: Bool? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        type: GatewayType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> CreateVpnGatewayResult {
        let input = CreateVpnGatewayRequest(
            amazonSideAsn: amazonSideAsn, 
            availabilityZone: availabilityZone, 
            dryRun: dryRun, 
            tagSpecifications: tagSpecifications, 
            type: type
        )
        return try await self.createVpnGateway(input, logger: logger)
    }

    /// Deletes a carrier gateway.  If you do not delete the route that contains the carrier gateway as the Target, the route is a blackhole route. For information about how to delete a route, see  DeleteRoute.
    @Sendable
    @inlinable
    public func deleteCarrierGateway(_ input: DeleteCarrierGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCarrierGatewayResult {
        try await self.client.execute(
            operation: "DeleteCarrierGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a carrier gateway.  If you do not delete the route that contains the carrier gateway as the Target, the route is a blackhole route. For information about how to delete a route, see  DeleteRoute.
    ///
    /// Parameters:
    ///   - carrierGatewayId: The ID of the carrier gateway.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCarrierGateway(
        carrierGatewayId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteCarrierGatewayResult {
        let input = DeleteCarrierGatewayRequest(
            carrierGatewayId: carrierGatewayId, 
            dryRun: dryRun
        )
        return try await self.deleteCarrierGateway(input, logger: logger)
    }

    /// Deletes the specified Client VPN endpoint. You must disassociate all target networks before you
    /// 			can delete a Client VPN endpoint.
    @Sendable
    @inlinable
    public func deleteClientVpnEndpoint(_ input: DeleteClientVpnEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteClientVpnEndpointResult {
        try await self.client.execute(
            operation: "DeleteClientVpnEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Client VPN endpoint. You must disassociate all target networks before you
    /// 			can delete a Client VPN endpoint.
    ///
    /// Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN to be deleted.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteClientVpnEndpoint(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteClientVpnEndpointResult {
        let input = DeleteClientVpnEndpointRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun
        )
        return try await self.deleteClientVpnEndpoint(input, logger: logger)
    }

    /// Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using
    /// 			the CreateClientVpnRoute action. You cannot delete routes that were
    /// 			automatically added when associating a subnet. To remove routes that have been automatically added,
    /// 			disassociate the target subnet from the Client VPN endpoint.
    @Sendable
    @inlinable
    public func deleteClientVpnRoute(_ input: DeleteClientVpnRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteClientVpnRouteResult {
        try await self.client.execute(
            operation: "DeleteClientVpnRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using
    /// 			the CreateClientVpnRoute action. You cannot delete routes that were
    /// 			automatically added when associating a subnet. To remove routes that have been automatically added,
    /// 			disassociate the target subnet from the Client VPN endpoint.
    ///
    /// Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint from which the route is to be deleted.
    ///   - destinationCidrBlock: The IPv4 address range, in CIDR notation, of the route to be deleted.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - targetVpcSubnetId: The ID of the target subnet used by the route.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteClientVpnRoute(
        clientVpnEndpointId: String? = nil,
        destinationCidrBlock: String? = nil,
        dryRun: Bool? = nil,
        targetVpcSubnetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteClientVpnRouteResult {
        let input = DeleteClientVpnRouteRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            destinationCidrBlock: destinationCidrBlock, 
            dryRun: dryRun, 
            targetVpcSubnetId: targetVpcSubnetId
        )
        return try await self.deleteClientVpnRoute(input, logger: logger)
    }

    ///  Deletes a range of customer-owned IP addresses.
    @Sendable
    @inlinable
    public func deleteCoipCidr(_ input: DeleteCoipCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCoipCidrResult {
        try await self.client.execute(
            operation: "DeleteCoipCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Deletes a range of customer-owned IP addresses.
    ///
    /// Parameters:
    ///   - cidr:  A customer-owned IP address range that you want to delete.
    ///   - coipPoolId:  The ID of the customer-owned address pool.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCoipCidr(
        cidr: String? = nil,
        coipPoolId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteCoipCidrResult {
        let input = DeleteCoipCidrRequest(
            cidr: cidr, 
            coipPoolId: coipPoolId, 
            dryRun: dryRun
        )
        return try await self.deleteCoipCidr(input, logger: logger)
    }

    /// Deletes a pool of customer-owned IP (CoIP) addresses.
    @Sendable
    @inlinable
    public func deleteCoipPool(_ input: DeleteCoipPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteCoipPoolResult {
        try await self.client.execute(
            operation: "DeleteCoipPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a pool of customer-owned IP (CoIP) addresses.
    ///
    /// Parameters:
    ///   - coipPoolId: The ID of the CoIP pool that you want to delete.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCoipPool(
        coipPoolId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteCoipPoolResult {
        let input = DeleteCoipPoolRequest(
            coipPoolId: coipPoolId, 
            dryRun: dryRun
        )
        return try await self.deleteCoipPool(input, logger: logger)
    }

    /// Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.
    @Sendable
    @inlinable
    public func deleteCustomerGateway(_ input: DeleteCustomerGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteCustomerGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.
    ///
    /// Parameters:
    ///   - customerGatewayId: The ID of the customer gateway.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteCustomerGateway(
        customerGatewayId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteCustomerGatewayRequest(
            customerGatewayId: customerGatewayId, 
            dryRun: dryRun
        )
        return try await self.deleteCustomerGateway(input, logger: logger)
    }

    /// Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.
    @Sendable
    @inlinable
    public func deleteDhcpOptions(_ input: DeleteDhcpOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteDhcpOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.
    ///
    /// Parameters:
    ///   - dhcpOptionsId: The ID of the DHCP options set.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteDhcpOptions(
        dhcpOptionsId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteDhcpOptionsRequest(
            dhcpOptionsId: dhcpOptionsId, 
            dryRun: dryRun
        )
        return try await self.deleteDhcpOptions(input, logger: logger)
    }

    /// Deletes an egress-only internet gateway.
    @Sendable
    @inlinable
    public func deleteEgressOnlyInternetGateway(_ input: DeleteEgressOnlyInternetGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteEgressOnlyInternetGatewayResult {
        try await self.client.execute(
            operation: "DeleteEgressOnlyInternetGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an egress-only internet gateway.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - egressOnlyInternetGatewayId: The ID of the egress-only internet gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteEgressOnlyInternetGateway(
        dryRun: Bool? = nil,
        egressOnlyInternetGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteEgressOnlyInternetGatewayResult {
        let input = DeleteEgressOnlyInternetGatewayRequest(
            dryRun: dryRun, 
            egressOnlyInternetGatewayId: egressOnlyInternetGatewayId
        )
        return try await self.deleteEgressOnlyInternetGateway(input, logger: logger)
    }

    /// Deletes the specified EC2 Fleets. After you delete an EC2 Fleet, it launches no new instances. You must also specify whether a deleted EC2 Fleet should terminate its instances. If you choose to terminate the instances, the EC2 Fleet enters the deleted_terminating state. Otherwise, the EC2 Fleet enters the deleted_running state, and the instances continue to run until they are interrupted or you terminate them manually. For instant fleets, EC2 Fleet must terminate the instances when the fleet is deleted. Up to 1000 instances can be terminated in a single request to delete instant fleets. A deleted instant fleet with running instances is not supported.  Restrictions    You can delete up to 25 fleets of type instant in a single request.   You can delete up to 100 fleets of type maintain or request in a single request.   You can delete up to 125 fleets in a single request, provided you do not exceed the quota for each fleet type, as specified above.   If you exceed the specified number of fleets to delete, no fleets are deleted.   For more information, see Delete an EC2 Fleet in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func deleteFleets(_ input: DeleteFleetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFleetsResult {
        try await self.client.execute(
            operation: "DeleteFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified EC2 Fleets. After you delete an EC2 Fleet, it launches no new instances. You must also specify whether a deleted EC2 Fleet should terminate its instances. If you choose to terminate the instances, the EC2 Fleet enters the deleted_terminating state. Otherwise, the EC2 Fleet enters the deleted_running state, and the instances continue to run until they are interrupted or you terminate them manually. For instant fleets, EC2 Fleet must terminate the instances when the fleet is deleted. Up to 1000 instances can be terminated in a single request to delete instant fleets. A deleted instant fleet with running instances is not supported.  Restrictions    You can delete up to 25 fleets of type instant in a single request.   You can delete up to 100 fleets of type maintain or request in a single request.   You can delete up to 125 fleets in a single request, provided you do not exceed the quota for each fleet type, as specified above.   If you exceed the specified number of fleets to delete, no fleets are deleted.   For more information, see Delete an EC2 Fleet in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fleetIds: The IDs of the EC2 Fleets. Constraints: In a single request, you can specify up to 25 instant fleet IDs and up to 100 maintain or request fleet IDs.
    ///   - terminateInstances: Indicates whether to terminate the associated instances when the EC2 Fleet is deleted. The default is to terminate the instances. To let the instances continue to run after the EC2 Fleet is deleted, specify no-terminate-instances. Supported only for fleets of type maintain and request. For instant fleets, you cannot specify NoTerminateInstances. A deleted instant fleet with running instances is not supported.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFleets(
        dryRun: Bool? = nil,
        fleetIds: [String]? = nil,
        terminateInstances: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteFleetsResult {
        let input = DeleteFleetsRequest(
            dryRun: dryRun, 
            fleetIds: fleetIds, 
            terminateInstances: terminateInstances
        )
        return try await self.deleteFleets(input, logger: logger)
    }

    /// Deletes one or more flow logs.
    @Sendable
    @inlinable
    public func deleteFlowLogs(_ input: DeleteFlowLogsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFlowLogsResult {
        try await self.client.execute(
            operation: "DeleteFlowLogs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes one or more flow logs.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - flowLogIds: One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFlowLogs(
        dryRun: Bool? = nil,
        flowLogIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteFlowLogsResult {
        let input = DeleteFlowLogsRequest(
            dryRun: dryRun, 
            flowLogIds: flowLogIds
        )
        return try await self.deleteFlowLogs(input, logger: logger)
    }

    /// Deletes the specified Amazon FPGA Image (AFI).
    @Sendable
    @inlinable
    public func deleteFpgaImage(_ input: DeleteFpgaImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteFpgaImageResult {
        try await self.client.execute(
            operation: "DeleteFpgaImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Amazon FPGA Image (AFI).
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fpgaImageId: The ID of the AFI.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteFpgaImage(
        dryRun: Bool? = nil,
        fpgaImageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteFpgaImageResult {
        let input = DeleteFpgaImageRequest(
            dryRun: dryRun, 
            fpgaImageId: fpgaImageId
        )
        return try await self.deleteFpgaImage(input, logger: logger)
    }

    /// Deletes the specified EC2 Instance Connect Endpoint.
    @Sendable
    @inlinable
    public func deleteInstanceConnectEndpoint(_ input: DeleteInstanceConnectEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteInstanceConnectEndpointResult {
        try await self.client.execute(
            operation: "DeleteInstanceConnectEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified EC2 Instance Connect Endpoint.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceConnectEndpointId: The ID of the EC2 Instance Connect Endpoint to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteInstanceConnectEndpoint(
        dryRun: Bool? = nil,
        instanceConnectEndpointId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteInstanceConnectEndpointResult {
        let input = DeleteInstanceConnectEndpointRequest(
            dryRun: dryRun, 
            instanceConnectEndpointId: instanceConnectEndpointId
        )
        return try await self.deleteInstanceConnectEndpoint(input, logger: logger)
    }

    /// Deletes the specified event window. For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func deleteInstanceEventWindow(_ input: DeleteInstanceEventWindowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteInstanceEventWindowResult {
        try await self.client.execute(
            operation: "DeleteInstanceEventWindow", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified event window. For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - forceDelete: Specify true to force delete the event window. Use the force delete parameter if the event window is currently associated with targets.
    ///   - instanceEventWindowId: The ID of the event window.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteInstanceEventWindow(
        dryRun: Bool? = nil,
        forceDelete: Bool? = nil,
        instanceEventWindowId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteInstanceEventWindowResult {
        let input = DeleteInstanceEventWindowRequest(
            dryRun: dryRun, 
            forceDelete: forceDelete, 
            instanceEventWindowId: instanceEventWindowId
        )
        return try await self.deleteInstanceEventWindow(input, logger: logger)
    }

    /// Deletes the specified internet gateway. You must detach the internet gateway from the
    /// 			VPC before you can delete it.
    @Sendable
    @inlinable
    public func deleteInternetGateway(_ input: DeleteInternetGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteInternetGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified internet gateway. You must detach the internet gateway from the
    /// 			VPC before you can delete it.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - internetGatewayId: The ID of the internet gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteInternetGateway(
        dryRun: Bool? = nil,
        internetGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteInternetGatewayRequest(
            dryRun: dryRun, 
            internetGatewayId: internetGatewayId
        )
        return try await self.deleteInternetGateway(input, logger: logger)
    }

    /// Delete an IPAM. Deleting an IPAM removes all monitored data associated with the IPAM including the historical data for CIDRs. For more information, see Delete an IPAM in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func deleteIpam(_ input: DeleteIpamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIpamResult {
        try await self.client.execute(
            operation: "DeleteIpam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete an IPAM. Deleting an IPAM removes all monitored data associated with the IPAM including the historical data for CIDRs. For more information, see Delete an IPAM in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - cascade: Enables you to quickly delete an IPAM, private scopes, pools in private scopes, and any allocations in the pools in private scopes. You cannot delete the IPAM with this option if there is a pool in your public scope. If you use this option, IPAM does the following:   Deallocates any CIDRs allocated to VPC resources (such as VPCs) in pools in private scopes.  No VPC resources are deleted as a result of enabling this option. The CIDR associated with the resource will no longer be allocated from an IPAM pool, but the CIDR itself will remain unchanged.    Deprovisions all IPv4 CIDRs provisioned to IPAM pools in private scopes.   Deletes all IPAM pools in private scopes.   Deletes all non-default private scopes in the IPAM.   Deletes the default public and private scopes and the IPAM.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamId: The ID of the IPAM to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIpam(
        cascade: Bool? = nil,
        dryRun: Bool? = nil,
        ipamId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIpamResult {
        let input = DeleteIpamRequest(
            cascade: cascade, 
            dryRun: dryRun, 
            ipamId: ipamId
        )
        return try await self.deleteIpam(input, logger: logger)
    }

    /// Delete a verification token. A verification token is an Amazon Web Services-generated random value that you can use to prove ownership of an external resource. For example, you can use a verification token to validate that you control a public IP address range when you bring an IP address range to Amazon Web Services (BYOIP).
    @Sendable
    @inlinable
    public func deleteIpamExternalResourceVerificationToken(_ input: DeleteIpamExternalResourceVerificationTokenRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIpamExternalResourceVerificationTokenResult {
        try await self.client.execute(
            operation: "DeleteIpamExternalResourceVerificationToken", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete a verification token. A verification token is an Amazon Web Services-generated random value that you can use to prove ownership of an external resource. For example, you can use a verification token to validate that you control a public IP address range when you bring an IP address range to Amazon Web Services (BYOIP).
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamExternalResourceVerificationTokenId: The token ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIpamExternalResourceVerificationToken(
        dryRun: Bool? = nil,
        ipamExternalResourceVerificationTokenId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIpamExternalResourceVerificationTokenResult {
        let input = DeleteIpamExternalResourceVerificationTokenRequest(
            dryRun: dryRun, 
            ipamExternalResourceVerificationTokenId: ipamExternalResourceVerificationTokenId
        )
        return try await self.deleteIpamExternalResourceVerificationToken(input, logger: logger)
    }

    /// Delete an IPAM pool.  You cannot delete an IPAM pool if there are allocations in it or CIDRs provisioned to it. To release  allocations, see ReleaseIpamPoolAllocation. To deprovision pool  CIDRs, see DeprovisionIpamPoolCidr.  For more information, see Delete a pool in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func deleteIpamPool(_ input: DeleteIpamPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIpamPoolResult {
        try await self.client.execute(
            operation: "DeleteIpamPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete an IPAM pool.  You cannot delete an IPAM pool if there are allocations in it or CIDRs provisioned to it. To release  allocations, see ReleaseIpamPoolAllocation. To deprovision pool  CIDRs, see DeprovisionIpamPoolCidr.  For more information, see Delete a pool in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - cascade: Enables you to quickly delete an IPAM pool and all resources within that pool, including provisioned CIDRs, allocations, and other pools.  You can only use this option to delete pools in the private scope or pools in the public scope with a source resource. A source resource is a resource used to provision CIDRs to a resource planning pool.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamPoolId: The ID of the pool to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIpamPool(
        cascade: Bool? = nil,
        dryRun: Bool? = nil,
        ipamPoolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIpamPoolResult {
        let input = DeleteIpamPoolRequest(
            cascade: cascade, 
            dryRun: dryRun, 
            ipamPoolId: ipamPoolId
        )
        return try await self.deleteIpamPool(input, logger: logger)
    }

    /// Deletes an IPAM resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    @Sendable
    @inlinable
    public func deleteIpamResourceDiscovery(_ input: DeleteIpamResourceDiscoveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIpamResourceDiscoveryResult {
        try await self.client.execute(
            operation: "DeleteIpamResourceDiscovery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes an IPAM resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamResourceDiscoveryId: The IPAM resource discovery ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIpamResourceDiscovery(
        dryRun: Bool? = nil,
        ipamResourceDiscoveryId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIpamResourceDiscoveryResult {
        let input = DeleteIpamResourceDiscoveryRequest(
            dryRun: dryRun, 
            ipamResourceDiscoveryId: ipamResourceDiscoveryId
        )
        return try await self.deleteIpamResourceDiscovery(input, logger: logger)
    }

    /// Delete the scope for an IPAM. You cannot delete the default scopes. For more information, see Delete a scope in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func deleteIpamScope(_ input: DeleteIpamScopeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteIpamScopeResult {
        try await self.client.execute(
            operation: "DeleteIpamScope", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete the scope for an IPAM. You cannot delete the default scopes. For more information, see Delete a scope in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamScopeId: The ID of the scope to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteIpamScope(
        dryRun: Bool? = nil,
        ipamScopeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteIpamScopeResult {
        let input = DeleteIpamScopeRequest(
            dryRun: dryRun, 
            ipamScopeId: ipamScopeId
        )
        return try await self.deleteIpamScope(input, logger: logger)
    }

    /// Deletes the specified key pair, by removing the public key from Amazon EC2.
    @Sendable
    @inlinable
    public func deleteKeyPair(_ input: DeleteKeyPairRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteKeyPairResult {
        try await self.client.execute(
            operation: "DeleteKeyPair", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified key pair, by removing the public key from Amazon EC2.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - keyName: The name of the key pair.
    ///   - keyPairId: The ID of the key pair.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteKeyPair(
        dryRun: Bool? = nil,
        keyName: String? = nil,
        keyPairId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteKeyPairResult {
        let input = DeleteKeyPairRequest(
            dryRun: dryRun, 
            keyName: keyName, 
            keyPairId: keyPairId
        )
        return try await self.deleteKeyPair(input, logger: logger)
    }

    /// Deletes a launch template. Deleting a launch template deletes all of its versions.
    @Sendable
    @inlinable
    public func deleteLaunchTemplate(_ input: DeleteLaunchTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLaunchTemplateResult {
        try await self.client.execute(
            operation: "DeleteLaunchTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a launch template. Deleting a launch template deletes all of its versions.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - launchTemplateId: The ID of the launch template. You must specify either the launch template ID or the launch template name, but not both.
    ///   - launchTemplateName: The name of the launch template. You must specify either the launch template ID or the launch template name, but not both.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLaunchTemplate(
        dryRun: Bool? = nil,
        launchTemplateId: String? = nil,
        launchTemplateName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLaunchTemplateResult {
        let input = DeleteLaunchTemplateRequest(
            dryRun: dryRun, 
            launchTemplateId: launchTemplateId, 
            launchTemplateName: launchTemplateName
        )
        return try await self.deleteLaunchTemplate(input, logger: logger)
    }

    /// Deletes one or more versions of a launch template. You can't delete the default version of a launch template; you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using DeleteLaunchTemplate. You can delete up to 200 launch template versions in a single request. To delete more than 200 versions in a single request, use DeleteLaunchTemplate, which deletes the launch template and all of its versions. For more information, see Delete a launch template version in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func deleteLaunchTemplateVersions(_ input: DeleteLaunchTemplateVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLaunchTemplateVersionsResult {
        try await self.client.execute(
            operation: "DeleteLaunchTemplateVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes one or more versions of a launch template. You can't delete the default version of a launch template; you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using DeleteLaunchTemplate. You can delete up to 200 launch template versions in a single request. To delete more than 200 versions in a single request, use DeleteLaunchTemplate, which deletes the launch template and all of its versions. For more information, see Delete a launch template version in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - launchTemplateId: The ID of the launch template. You must specify either the launch template ID or the launch template name, but not both.
    ///   - launchTemplateName: The name of the launch template. You must specify either the launch template ID or the launch template name, but not both.
    ///   - versions: The version numbers of one or more launch template versions to delete. You can specify up to 200 launch template version numbers.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLaunchTemplateVersions(
        dryRun: Bool? = nil,
        launchTemplateId: String? = nil,
        launchTemplateName: String? = nil,
        versions: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLaunchTemplateVersionsResult {
        let input = DeleteLaunchTemplateVersionsRequest(
            dryRun: dryRun, 
            launchTemplateId: launchTemplateId, 
            launchTemplateName: launchTemplateName, 
            versions: versions
        )
        return try await self.deleteLaunchTemplateVersions(input, logger: logger)
    }

    /// Deletes the specified route from the specified local gateway route table.
    @Sendable
    @inlinable
    public func deleteLocalGatewayRoute(_ input: DeleteLocalGatewayRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLocalGatewayRouteResult {
        try await self.client.execute(
            operation: "DeleteLocalGatewayRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified route from the specified local gateway route table.
    ///
    /// Parameters:
    ///   - destinationCidrBlock: The CIDR range for the route. This must match the CIDR for the route exactly.
    ///   - destinationPrefixListId:  Use a prefix list in place of DestinationCidrBlock. You cannot use  DestinationPrefixListId and DestinationCidrBlock in the same request.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayRouteTableId: The ID of the local gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLocalGatewayRoute(
        destinationCidrBlock: String? = nil,
        destinationPrefixListId: String? = nil,
        dryRun: Bool? = nil,
        localGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLocalGatewayRouteResult {
        let input = DeleteLocalGatewayRouteRequest(
            destinationCidrBlock: destinationCidrBlock, 
            destinationPrefixListId: destinationPrefixListId, 
            dryRun: dryRun, 
            localGatewayRouteTableId: localGatewayRouteTableId
        )
        return try await self.deleteLocalGatewayRoute(input, logger: logger)
    }

    ///  Deletes a local gateway route table.
    @Sendable
    @inlinable
    public func deleteLocalGatewayRouteTable(_ input: DeleteLocalGatewayRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLocalGatewayRouteTableResult {
        try await self.client.execute(
            operation: "DeleteLocalGatewayRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Deletes a local gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayRouteTableId:  The ID of the local gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLocalGatewayRouteTable(
        dryRun: Bool? = nil,
        localGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLocalGatewayRouteTableResult {
        let input = DeleteLocalGatewayRouteTableRequest(
            dryRun: dryRun, 
            localGatewayRouteTableId: localGatewayRouteTableId
        )
        return try await self.deleteLocalGatewayRouteTable(input, logger: logger)
    }

    ///  Deletes a local gateway route table virtual interface group association.
    @Sendable
    @inlinable
    public func deleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation(_ input: DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult {
        try await self.client.execute(
            operation: "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Deletes a local gateway route table virtual interface group association.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayRouteTableVirtualInterfaceGroupAssociationId:  The ID of the local gateway route table virtual interface group association.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation(
        dryRun: Bool? = nil,
        localGatewayRouteTableVirtualInterfaceGroupAssociationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult {
        let input = DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(
            dryRun: dryRun, 
            localGatewayRouteTableVirtualInterfaceGroupAssociationId: localGatewayRouteTableVirtualInterfaceGroupAssociationId
        )
        return try await self.deleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation(input, logger: logger)
    }

    /// Deletes the specified association between a VPC and local gateway route table.
    @Sendable
    @inlinable
    public func deleteLocalGatewayRouteTableVpcAssociation(_ input: DeleteLocalGatewayRouteTableVpcAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteLocalGatewayRouteTableVpcAssociationResult {
        try await self.client.execute(
            operation: "DeleteLocalGatewayRouteTableVpcAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified association between a VPC and local gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayRouteTableVpcAssociationId: The ID of the association.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteLocalGatewayRouteTableVpcAssociation(
        dryRun: Bool? = nil,
        localGatewayRouteTableVpcAssociationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteLocalGatewayRouteTableVpcAssociationResult {
        let input = DeleteLocalGatewayRouteTableVpcAssociationRequest(
            dryRun: dryRun, 
            localGatewayRouteTableVpcAssociationId: localGatewayRouteTableVpcAssociationId
        )
        return try await self.deleteLocalGatewayRouteTableVpcAssociation(input, logger: logger)
    }

    /// Deletes the specified managed prefix list. You must first remove all references to the prefix list in your resources.
    @Sendable
    @inlinable
    public func deleteManagedPrefixList(_ input: DeleteManagedPrefixListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteManagedPrefixListResult {
        try await self.client.execute(
            operation: "DeleteManagedPrefixList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified managed prefix list. You must first remove all references to the prefix list in your resources.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - prefixListId: The ID of the prefix list.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteManagedPrefixList(
        dryRun: Bool? = nil,
        prefixListId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteManagedPrefixListResult {
        let input = DeleteManagedPrefixListRequest(
            dryRun: dryRun, 
            prefixListId: prefixListId
        )
        return try await self.deleteManagedPrefixList(input, logger: logger)
    }

    /// Deletes the specified NAT gateway. Deleting a public NAT gateway disassociates its Elastic IP address,  but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway  routes in your route tables.
    @Sendable
    @inlinable
    public func deleteNatGateway(_ input: DeleteNatGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNatGatewayResult {
        try await self.client.execute(
            operation: "DeleteNatGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified NAT gateway. Deleting a public NAT gateway disassociates its Elastic IP address,  but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway  routes in your route tables.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - natGatewayId: The ID of the NAT gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNatGateway(
        dryRun: Bool? = nil,
        natGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteNatGatewayResult {
        let input = DeleteNatGatewayRequest(
            dryRun: dryRun, 
            natGatewayId: natGatewayId
        )
        return try await self.deleteNatGateway(input, logger: logger)
    }

    /// Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.
    @Sendable
    @inlinable
    public func deleteNetworkAcl(_ input: DeleteNetworkAclRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteNetworkAcl", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified network ACL. You can't delete the ACL if it's associated with any subnets. You can't delete the default network ACL.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkAclId: The ID of the network ACL.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNetworkAcl(
        dryRun: Bool? = nil,
        networkAclId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteNetworkAclRequest(
            dryRun: dryRun, 
            networkAclId: networkAclId
        )
        return try await self.deleteNetworkAcl(input, logger: logger)
    }

    /// Deletes the specified ingress or egress entry (rule) from the specified network ACL.
    @Sendable
    @inlinable
    public func deleteNetworkAclEntry(_ input: DeleteNetworkAclEntryRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteNetworkAclEntry", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified ingress or egress entry (rule) from the specified network ACL.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - egress: Indicates whether the rule is an egress rule.
    ///   - networkAclId: The ID of the network ACL.
    ///   - ruleNumber: The rule number of the entry to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNetworkAclEntry(
        dryRun: Bool? = nil,
        egress: Bool? = nil,
        networkAclId: String? = nil,
        ruleNumber: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteNetworkAclEntryRequest(
            dryRun: dryRun, 
            egress: egress, 
            networkAclId: networkAclId, 
            ruleNumber: ruleNumber
        )
        return try await self.deleteNetworkAclEntry(input, logger: logger)
    }

    /// Deletes the specified Network Access Scope.
    @Sendable
    @inlinable
    public func deleteNetworkInsightsAccessScope(_ input: DeleteNetworkInsightsAccessScopeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNetworkInsightsAccessScopeResult {
        try await self.client.execute(
            operation: "DeleteNetworkInsightsAccessScope", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Network Access Scope.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInsightsAccessScopeId: The ID of the Network Access Scope.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNetworkInsightsAccessScope(
        dryRun: Bool? = nil,
        networkInsightsAccessScopeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteNetworkInsightsAccessScopeResult {
        let input = DeleteNetworkInsightsAccessScopeRequest(
            dryRun: dryRun, 
            networkInsightsAccessScopeId: networkInsightsAccessScopeId
        )
        return try await self.deleteNetworkInsightsAccessScope(input, logger: logger)
    }

    /// Deletes the specified Network Access Scope analysis.
    @Sendable
    @inlinable
    public func deleteNetworkInsightsAccessScopeAnalysis(_ input: DeleteNetworkInsightsAccessScopeAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNetworkInsightsAccessScopeAnalysisResult {
        try await self.client.execute(
            operation: "DeleteNetworkInsightsAccessScopeAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Network Access Scope analysis.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInsightsAccessScopeAnalysisId: The ID of the Network Access Scope analysis.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNetworkInsightsAccessScopeAnalysis(
        dryRun: Bool? = nil,
        networkInsightsAccessScopeAnalysisId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteNetworkInsightsAccessScopeAnalysisResult {
        let input = DeleteNetworkInsightsAccessScopeAnalysisRequest(
            dryRun: dryRun, 
            networkInsightsAccessScopeAnalysisId: networkInsightsAccessScopeAnalysisId
        )
        return try await self.deleteNetworkInsightsAccessScopeAnalysis(input, logger: logger)
    }

    /// Deletes the specified network insights analysis.
    @Sendable
    @inlinable
    public func deleteNetworkInsightsAnalysis(_ input: DeleteNetworkInsightsAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNetworkInsightsAnalysisResult {
        try await self.client.execute(
            operation: "DeleteNetworkInsightsAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified network insights analysis.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInsightsAnalysisId: The ID of the network insights analysis.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNetworkInsightsAnalysis(
        dryRun: Bool? = nil,
        networkInsightsAnalysisId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteNetworkInsightsAnalysisResult {
        let input = DeleteNetworkInsightsAnalysisRequest(
            dryRun: dryRun, 
            networkInsightsAnalysisId: networkInsightsAnalysisId
        )
        return try await self.deleteNetworkInsightsAnalysis(input, logger: logger)
    }

    /// Deletes the specified path.
    @Sendable
    @inlinable
    public func deleteNetworkInsightsPath(_ input: DeleteNetworkInsightsPathRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNetworkInsightsPathResult {
        try await self.client.execute(
            operation: "DeleteNetworkInsightsPath", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified path.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInsightsPathId: The ID of the path.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNetworkInsightsPath(
        dryRun: Bool? = nil,
        networkInsightsPathId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteNetworkInsightsPathResult {
        let input = DeleteNetworkInsightsPathRequest(
            dryRun: dryRun, 
            networkInsightsPathId: networkInsightsPathId
        )
        return try await self.deleteNetworkInsightsPath(input, logger: logger)
    }

    /// Deletes the specified network interface. You must detach the network interface before you can delete it.
    @Sendable
    @inlinable
    public func deleteNetworkInterface(_ input: DeleteNetworkInterfaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteNetworkInterface", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified network interface. You must detach the network interface before you can delete it.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNetworkInterface(
        dryRun: Bool? = nil,
        networkInterfaceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteNetworkInterfaceRequest(
            dryRun: dryRun, 
            networkInterfaceId: networkInterfaceId
        )
        return try await self.deleteNetworkInterface(input, logger: logger)
    }

    /// Deletes a permission for a network interface. By default, you cannot delete the
    /// 			permission if the account for which you're removing the permission has attached the
    /// 			network interface to an instance. However, you can force delete the permission,
    /// 			regardless of any attachment.
    @Sendable
    @inlinable
    public func deleteNetworkInterfacePermission(_ input: DeleteNetworkInterfacePermissionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteNetworkInterfacePermissionResult {
        try await self.client.execute(
            operation: "DeleteNetworkInterfacePermission", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a permission for a network interface. By default, you cannot delete the
    /// 			permission if the account for which you're removing the permission has attached the
    /// 			network interface to an instance. However, you can force delete the permission,
    /// 			regardless of any attachment.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - force: Specify true to remove the permission even if the network interface is
    ///   - networkInterfacePermissionId: The ID of the network interface permission.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteNetworkInterfacePermission(
        dryRun: Bool? = nil,
        force: Bool? = nil,
        networkInterfacePermissionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteNetworkInterfacePermissionResult {
        let input = DeleteNetworkInterfacePermissionRequest(
            dryRun: dryRun, 
            force: force, 
            networkInterfacePermissionId: networkInterfacePermissionId
        )
        return try await self.deleteNetworkInterfacePermission(input, logger: logger)
    }

    /// Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see Placement groups in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func deletePlacementGroup(_ input: DeletePlacementGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeletePlacementGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see Placement groups in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - groupName: The name of the placement group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePlacementGroup(
        dryRun: Bool? = nil,
        groupName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeletePlacementGroupRequest(
            dryRun: dryRun, 
            groupName: groupName
        )
        return try await self.deletePlacementGroup(input, logger: logger)
    }

    /// Delete a public IPv4 pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only.
    @Sendable
    @inlinable
    public func deletePublicIpv4Pool(_ input: DeletePublicIpv4PoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeletePublicIpv4PoolResult {
        try await self.client.execute(
            operation: "DeletePublicIpv4Pool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete a public IPv4 pool. A public IPv4 pool is an EC2 IP address pool required for the public IPv4 CIDRs that you own and bring to Amazon Web Services to manage with IPAM. IPv6 addresses you bring to Amazon Web Services, however, use IPAM pools only.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkBorderGroup: The Availability Zone (AZ) or Local Zone (LZ) network border group that the resource that the IP address is assigned to is in. Defaults to an AZ network border group. For more information on available Local Zones, see Local Zone availability in the Amazon EC2 User Guide.
    ///   - poolId: The ID of the public IPv4 pool you want to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deletePublicIpv4Pool(
        dryRun: Bool? = nil,
        networkBorderGroup: String? = nil,
        poolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeletePublicIpv4PoolResult {
        let input = DeletePublicIpv4PoolRequest(
            dryRun: dryRun, 
            networkBorderGroup: networkBorderGroup, 
            poolId: poolId
        )
        return try await self.deletePublicIpv4Pool(input, logger: logger)
    }

    /// Deletes the queued purchases for the specified Reserved Instances.
    @Sendable
    @inlinable
    public func deleteQueuedReservedInstances(_ input: DeleteQueuedReservedInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteQueuedReservedInstancesResult {
        try await self.client.execute(
            operation: "DeleteQueuedReservedInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the queued purchases for the specified Reserved Instances.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - reservedInstancesIds: The IDs of the Reserved Instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteQueuedReservedInstances(
        dryRun: Bool? = nil,
        reservedInstancesIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteQueuedReservedInstancesResult {
        let input = DeleteQueuedReservedInstancesRequest(
            dryRun: dryRun, 
            reservedInstancesIds: reservedInstancesIds
        )
        return try await self.deleteQueuedReservedInstances(input, logger: logger)
    }

    /// Deletes the specified route from the specified route table.
    @Sendable
    @inlinable
    public func deleteRoute(_ input: DeleteRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified route from the specified route table.
    ///
    /// Parameters:
    ///   - destinationCidrBlock: The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
    ///   - destinationIpv6CidrBlock: The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
    ///   - destinationPrefixListId: The ID of the prefix list for the route.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - routeTableId: The ID of the route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRoute(
        destinationCidrBlock: String? = nil,
        destinationIpv6CidrBlock: String? = nil,
        destinationPrefixListId: String? = nil,
        dryRun: Bool? = nil,
        routeTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRouteRequest(
            destinationCidrBlock: destinationCidrBlock, 
            destinationIpv6CidrBlock: destinationIpv6CidrBlock, 
            destinationPrefixListId: destinationPrefixListId, 
            dryRun: dryRun, 
            routeTableId: routeTableId
        )
        return try await self.deleteRoute(input, logger: logger)
    }

    /// Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.
    @Sendable
    @inlinable
    public func deleteRouteTable(_ input: DeleteRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can't delete the main route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - routeTableId: The ID of the route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteRouteTable(
        dryRun: Bool? = nil,
        routeTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteRouteTableRequest(
            dryRun: dryRun, 
            routeTableId: routeTableId
        )
        return try await self.deleteRouteTable(input, logger: logger)
    }

    /// Deletes a security group. If you attempt to delete a security group that is associated with an instance or network interface, is
    /// 			  referenced by another security group in the same VPC, or has a VPC association, the operation fails with
    /// 				DependencyViolation.
    @Sendable
    @inlinable
    public func deleteSecurityGroup(_ input: DeleteSecurityGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteSecurityGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a security group. If you attempt to delete a security group that is associated with an instance or network interface, is
    /// 			  referenced by another security group in the same VPC, or has a VPC association, the operation fails with
    /// 				DependencyViolation.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupId: The ID of the security group.
    ///   - groupName: [Default VPC] The name of the security group. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, you must specify the security group ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSecurityGroup(
        dryRun: Bool? = nil,
        groupId: String? = nil,
        groupName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteSecurityGroupRequest(
            dryRun: dryRun, 
            groupId: groupId, 
            groupName: groupName
        )
        return try await self.deleteSecurityGroup(input, logger: logger)
    }

    /// Deletes the specified snapshot. When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume. You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot. For more information, see Delete an Amazon EBS snapshot in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func deleteSnapshot(_ input: DeleteSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified snapshot. When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume. You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot. For more information, see Delete an Amazon EBS snapshot in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - snapshotId: The ID of the EBS snapshot.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSnapshot(
        dryRun: Bool? = nil,
        snapshotId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteSnapshotRequest(
            dryRun: dryRun, 
            snapshotId: snapshotId
        )
        return try await self.deleteSnapshot(input, logger: logger)
    }

    /// Deletes the data feed for Spot Instances.
    @Sendable
    @inlinable
    public func deleteSpotDatafeedSubscription(_ input: DeleteSpotDatafeedSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteSpotDatafeedSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the data feed for Spot Instances.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSpotDatafeedSubscription(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteSpotDatafeedSubscriptionRequest(
            dryRun: dryRun
        )
        return try await self.deleteSpotDatafeedSubscription(input, logger: logger)
    }

    /// Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.
    @Sendable
    @inlinable
    public func deleteSubnet(_ input: DeleteSubnetRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteSubnet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - subnetId: The ID of the subnet.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSubnet(
        dryRun: Bool? = nil,
        subnetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteSubnetRequest(
            dryRun: dryRun, 
            subnetId: subnetId
        )
        return try await self.deleteSubnet(input, logger: logger)
    }

    /// Deletes a subnet CIDR reservation.
    @Sendable
    @inlinable
    public func deleteSubnetCidrReservation(_ input: DeleteSubnetCidrReservationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteSubnetCidrReservationResult {
        try await self.client.execute(
            operation: "DeleteSubnetCidrReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a subnet CIDR reservation.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - subnetCidrReservationId: The ID of the subnet CIDR reservation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteSubnetCidrReservation(
        dryRun: Bool? = nil,
        subnetCidrReservationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteSubnetCidrReservationResult {
        let input = DeleteSubnetCidrReservationRequest(
            dryRun: dryRun, 
            subnetCidrReservationId: subnetCidrReservationId
        )
        return try await self.deleteSubnetCidrReservation(input, logger: logger)
    }

    /// Deletes the specified set of tags from the specified set of resources. To list the current tags, use DescribeTags. For more information about tags, see Tag your Amazon EC2 resources in the Amazon Elastic Compute Cloud User Guide.
    @Sendable
    @inlinable
    public func deleteTags(_ input: DeleteTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified set of tags from the specified set of resources. To list the current tags, use DescribeTags. For more information about tags, see Tag your Amazon EC2 resources in the Amazon Elastic Compute Cloud User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - resources: The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
    ///   - tags: The tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string. If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete Amazon Web Services-generated tags (tags that have the aws: prefix). Constraints: Up to 1000 tags.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTags(
        dryRun: Bool? = nil,
        resources: [String]? = nil,
        tags: [Tag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteTagsRequest(
            dryRun: dryRun, 
            resources: resources, 
            tags: tags
        )
        return try await self.deleteTags(input, logger: logger)
    }

    /// Deletes the specified Traffic Mirror filter. You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.
    @Sendable
    @inlinable
    public func deleteTrafficMirrorFilter(_ input: DeleteTrafficMirrorFilterRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrafficMirrorFilterResult {
        try await self.client.execute(
            operation: "DeleteTrafficMirrorFilter", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Traffic Mirror filter. You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - trafficMirrorFilterId: The ID of the Traffic Mirror filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTrafficMirrorFilter(
        dryRun: Bool? = nil,
        trafficMirrorFilterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTrafficMirrorFilterResult {
        let input = DeleteTrafficMirrorFilterRequest(
            dryRun: dryRun, 
            trafficMirrorFilterId: trafficMirrorFilterId
        )
        return try await self.deleteTrafficMirrorFilter(input, logger: logger)
    }

    /// Deletes the specified Traffic Mirror rule.
    @Sendable
    @inlinable
    public func deleteTrafficMirrorFilterRule(_ input: DeleteTrafficMirrorFilterRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrafficMirrorFilterRuleResult {
        try await self.client.execute(
            operation: "DeleteTrafficMirrorFilterRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Traffic Mirror rule.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - trafficMirrorFilterRuleId: The ID of the Traffic Mirror rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTrafficMirrorFilterRule(
        dryRun: Bool? = nil,
        trafficMirrorFilterRuleId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTrafficMirrorFilterRuleResult {
        let input = DeleteTrafficMirrorFilterRuleRequest(
            dryRun: dryRun, 
            trafficMirrorFilterRuleId: trafficMirrorFilterRuleId
        )
        return try await self.deleteTrafficMirrorFilterRule(input, logger: logger)
    }

    /// Deletes the specified Traffic Mirror session.
    @Sendable
    @inlinable
    public func deleteTrafficMirrorSession(_ input: DeleteTrafficMirrorSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrafficMirrorSessionResult {
        try await self.client.execute(
            operation: "DeleteTrafficMirrorSession", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Traffic Mirror session.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - trafficMirrorSessionId: The ID of the Traffic Mirror session.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTrafficMirrorSession(
        dryRun: Bool? = nil,
        trafficMirrorSessionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTrafficMirrorSessionResult {
        let input = DeleteTrafficMirrorSessionRequest(
            dryRun: dryRun, 
            trafficMirrorSessionId: trafficMirrorSessionId
        )
        return try await self.deleteTrafficMirrorSession(input, logger: logger)
    }

    /// Deletes the specified Traffic Mirror target. You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.
    @Sendable
    @inlinable
    public func deleteTrafficMirrorTarget(_ input: DeleteTrafficMirrorTargetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTrafficMirrorTargetResult {
        try await self.client.execute(
            operation: "DeleteTrafficMirrorTarget", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Traffic Mirror target. You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - trafficMirrorTargetId: The ID of the Traffic Mirror target.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTrafficMirrorTarget(
        dryRun: Bool? = nil,
        trafficMirrorTargetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTrafficMirrorTargetResult {
        let input = DeleteTrafficMirrorTargetRequest(
            dryRun: dryRun, 
            trafficMirrorTargetId: trafficMirrorTargetId
        )
        return try await self.deleteTrafficMirrorTarget(input, logger: logger)
    }

    /// Deletes the specified transit gateway.
    @Sendable
    @inlinable
    public func deleteTransitGateway(_ input: DeleteTransitGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayResult {
        try await self.client.execute(
            operation: "DeleteTransitGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified transit gateway.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayId: The ID of the transit gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGateway(
        dryRun: Bool? = nil,
        transitGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayResult {
        let input = DeleteTransitGatewayRequest(
            dryRun: dryRun, 
            transitGatewayId: transitGatewayId
        )
        return try await self.deleteTransitGateway(input, logger: logger)
    }

    /// Deletes the specified Connect attachment. You must first delete any Connect peers for the attachment.
    @Sendable
    @inlinable
    public func deleteTransitGatewayConnect(_ input: DeleteTransitGatewayConnectRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayConnectResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayConnect", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Connect attachment. You must first delete any Connect peers for the attachment.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the Connect attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayConnect(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayConnectResult {
        let input = DeleteTransitGatewayConnectRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.deleteTransitGatewayConnect(input, logger: logger)
    }

    /// Deletes the specified Connect peer.
    @Sendable
    @inlinable
    public func deleteTransitGatewayConnectPeer(_ input: DeleteTransitGatewayConnectPeerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayConnectPeerResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayConnectPeer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified Connect peer.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayConnectPeerId: The ID of the Connect peer.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayConnectPeer(
        dryRun: Bool? = nil,
        transitGatewayConnectPeerId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayConnectPeerResult {
        let input = DeleteTransitGatewayConnectPeerRequest(
            dryRun: dryRun, 
            transitGatewayConnectPeerId: transitGatewayConnectPeerId
        )
        return try await self.deleteTransitGatewayConnectPeer(input, logger: logger)
    }

    /// Deletes the specified transit gateway multicast domain.
    @Sendable
    @inlinable
    public func deleteTransitGatewayMulticastDomain(_ input: DeleteTransitGatewayMulticastDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayMulticastDomainResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayMulticastDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified transit gateway multicast domain.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayMulticastDomain(
        dryRun: Bool? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayMulticastDomainResult {
        let input = DeleteTransitGatewayMulticastDomainRequest(
            dryRun: dryRun, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.deleteTransitGatewayMulticastDomain(input, logger: logger)
    }

    /// Deletes a transit gateway peering attachment.
    @Sendable
    @inlinable
    public func deleteTransitGatewayPeeringAttachment(_ input: DeleteTransitGatewayPeeringAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayPeeringAttachmentResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayPeeringAttachment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a transit gateway peering attachment.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the transit gateway peering attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayPeeringAttachment(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayPeeringAttachmentResult {
        let input = DeleteTransitGatewayPeeringAttachmentRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.deleteTransitGatewayPeeringAttachment(input, logger: logger)
    }

    /// Deletes the specified transit gateway policy table.
    @Sendable
    @inlinable
    public func deleteTransitGatewayPolicyTable(_ input: DeleteTransitGatewayPolicyTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayPolicyTableResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayPolicyTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified transit gateway policy table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayPolicyTableId: The transit gateway policy table to delete.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayPolicyTable(
        dryRun: Bool? = nil,
        transitGatewayPolicyTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayPolicyTableResult {
        let input = DeleteTransitGatewayPolicyTableRequest(
            dryRun: dryRun, 
            transitGatewayPolicyTableId: transitGatewayPolicyTableId
        )
        return try await self.deleteTransitGatewayPolicyTable(input, logger: logger)
    }

    /// Deletes a reference (route) to a prefix list in a specified transit gateway route table.
    @Sendable
    @inlinable
    public func deleteTransitGatewayPrefixListReference(_ input: DeleteTransitGatewayPrefixListReferenceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayPrefixListReferenceResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayPrefixListReference", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a reference (route) to a prefix list in a specified transit gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - prefixListId: The ID of the prefix list.
    ///   - transitGatewayRouteTableId: The ID of the route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayPrefixListReference(
        dryRun: Bool? = nil,
        prefixListId: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayPrefixListReferenceResult {
        let input = DeleteTransitGatewayPrefixListReferenceRequest(
            dryRun: dryRun, 
            prefixListId: prefixListId, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.deleteTransitGatewayPrefixListReference(input, logger: logger)
    }

    /// Deletes the specified route from the specified transit gateway route table.
    @Sendable
    @inlinable
    public func deleteTransitGatewayRoute(_ input: DeleteTransitGatewayRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayRouteResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified route from the specified transit gateway route table.
    ///
    /// Parameters:
    ///   - destinationCidrBlock: The CIDR range for the route. This must match the CIDR for the route exactly.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayRoute(
        destinationCidrBlock: String? = nil,
        dryRun: Bool? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayRouteResult {
        let input = DeleteTransitGatewayRouteRequest(
            destinationCidrBlock: destinationCidrBlock, 
            dryRun: dryRun, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.deleteTransitGatewayRoute(input, logger: logger)
    }

    /// Deletes the specified transit gateway route table. If there are any route tables associated with the transit gateway route table, you must first run DisassociateRouteTable before you can delete the transit gateway route table. This removes any route tables associated with the transit gateway route table.
    @Sendable
    @inlinable
    public func deleteTransitGatewayRouteTable(_ input: DeleteTransitGatewayRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayRouteTableResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified transit gateway route table. If there are any route tables associated with the transit gateway route table, you must first run DisassociateRouteTable before you can delete the transit gateway route table. This removes any route tables associated with the transit gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayRouteTable(
        dryRun: Bool? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayRouteTableResult {
        let input = DeleteTransitGatewayRouteTableRequest(
            dryRun: dryRun, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.deleteTransitGatewayRouteTable(input, logger: logger)
    }

    /// Advertises to the transit gateway that a transit gateway route table is deleted.
    @Sendable
    @inlinable
    public func deleteTransitGatewayRouteTableAnnouncement(_ input: DeleteTransitGatewayRouteTableAnnouncementRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayRouteTableAnnouncementResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayRouteTableAnnouncement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Advertises to the transit gateway that a transit gateway route table is deleted.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayRouteTableAnnouncementId: The transit gateway route table ID that's being deleted.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayRouteTableAnnouncement(
        dryRun: Bool? = nil,
        transitGatewayRouteTableAnnouncementId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayRouteTableAnnouncementResult {
        let input = DeleteTransitGatewayRouteTableAnnouncementRequest(
            dryRun: dryRun, 
            transitGatewayRouteTableAnnouncementId: transitGatewayRouteTableAnnouncementId
        )
        return try await self.deleteTransitGatewayRouteTableAnnouncement(input, logger: logger)
    }

    /// Deletes the specified VPC attachment.
    @Sendable
    @inlinable
    public func deleteTransitGatewayVpcAttachment(_ input: DeleteTransitGatewayVpcAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteTransitGatewayVpcAttachmentResult {
        try await self.client.execute(
            operation: "DeleteTransitGatewayVpcAttachment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified VPC attachment.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteTransitGatewayVpcAttachment(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteTransitGatewayVpcAttachmentResult {
        let input = DeleteTransitGatewayVpcAttachmentRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.deleteTransitGatewayVpcAttachment(input, logger: logger)
    }

    /// Delete an Amazon Web Services Verified Access endpoint.
    @Sendable
    @inlinable
    public func deleteVerifiedAccessEndpoint(_ input: DeleteVerifiedAccessEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVerifiedAccessEndpointResult {
        try await self.client.execute(
            operation: "DeleteVerifiedAccessEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete an Amazon Web Services Verified Access endpoint.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessEndpointId: The ID of the Verified Access endpoint.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVerifiedAccessEndpoint(
        clientToken: String? = DeleteVerifiedAccessEndpointRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        verifiedAccessEndpointId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVerifiedAccessEndpointResult {
        let input = DeleteVerifiedAccessEndpointRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            verifiedAccessEndpointId: verifiedAccessEndpointId
        )
        return try await self.deleteVerifiedAccessEndpoint(input, logger: logger)
    }

    /// Delete an Amazon Web Services Verified Access group.
    @Sendable
    @inlinable
    public func deleteVerifiedAccessGroup(_ input: DeleteVerifiedAccessGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVerifiedAccessGroupResult {
        try await self.client.execute(
            operation: "DeleteVerifiedAccessGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete an Amazon Web Services Verified Access group.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessGroupId: The ID of the Verified Access group.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVerifiedAccessGroup(
        clientToken: String? = DeleteVerifiedAccessGroupRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        verifiedAccessGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVerifiedAccessGroupResult {
        let input = DeleteVerifiedAccessGroupRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            verifiedAccessGroupId: verifiedAccessGroupId
        )
        return try await self.deleteVerifiedAccessGroup(input, logger: logger)
    }

    /// Delete an Amazon Web Services Verified Access instance.
    @Sendable
    @inlinable
    public func deleteVerifiedAccessInstance(_ input: DeleteVerifiedAccessInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVerifiedAccessInstanceResult {
        try await self.client.execute(
            operation: "DeleteVerifiedAccessInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete an Amazon Web Services Verified Access instance.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVerifiedAccessInstance(
        clientToken: String? = DeleteVerifiedAccessInstanceRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVerifiedAccessInstanceResult {
        let input = DeleteVerifiedAccessInstanceRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return try await self.deleteVerifiedAccessInstance(input, logger: logger)
    }

    /// Delete an Amazon Web Services Verified Access trust provider.
    @Sendable
    @inlinable
    public func deleteVerifiedAccessTrustProvider(_ input: DeleteVerifiedAccessTrustProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVerifiedAccessTrustProviderResult {
        try await self.client.execute(
            operation: "DeleteVerifiedAccessTrustProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete an Amazon Web Services Verified Access trust provider.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessTrustProviderId: The ID of the Verified Access trust provider.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVerifiedAccessTrustProvider(
        clientToken: String? = DeleteVerifiedAccessTrustProviderRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        verifiedAccessTrustProviderId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVerifiedAccessTrustProviderResult {
        let input = DeleteVerifiedAccessTrustProviderRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            verifiedAccessTrustProviderId: verifiedAccessTrustProviderId
        )
        return try await self.deleteVerifiedAccessTrustProvider(input, logger: logger)
    }

    /// Deletes the specified EBS volume. The volume must be in the available state (not attached to an instance). The volume can remain in the deleting state for several minutes. For more information, see Delete an Amazon EBS volume in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func deleteVolume(_ input: DeleteVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified EBS volume. The volume must be in the available state (not attached to an instance). The volume can remain in the deleting state for several minutes. For more information, see Delete an Amazon EBS volume in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - volumeId: The ID of the volume.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVolume(
        dryRun: Bool? = nil,
        volumeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVolumeRequest(
            dryRun: dryRun, 
            volumeId: volumeId
        )
        return try await self.deleteVolume(input, logger: logger)
    }

    /// Deletes the specified VPC. You must detach or delete all gateways and resources that are associated
    /// 		  with the VPC before you can delete it. For example, you must terminate all instances running in the VPC,
    /// 		  delete all security groups associated with the VPC (except the default one), delete all route tables
    /// 		  associated with the VPC (except the default one), and so on. When you delete the VPC, it deletes the
    /// 		  default security group, network ACL, and route table for the VPC. If you created a flow log for the VPC that you are deleting, note that flow logs for deleted  VPCs are eventually automatically removed.
    @Sendable
    @inlinable
    public func deleteVpc(_ input: DeleteVpcRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVpc", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified VPC. You must detach or delete all gateways and resources that are associated
    /// 		  with the VPC before you can delete it. For example, you must terminate all instances running in the VPC,
    /// 		  delete all security groups associated with the VPC (except the default one), delete all route tables
    /// 		  associated with the VPC (except the default one), and so on. When you delete the VPC, it deletes the
    /// 		  default security group, network ACL, and route table for the VPC. If you created a flow log for the VPC that you are deleting, note that flow logs for deleted  VPCs are eventually automatically removed.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpc(
        dryRun: Bool? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVpcRequest(
            dryRun: dryRun, 
            vpcId: vpcId
        )
        return try await self.deleteVpc(input, logger: logger)
    }

    /// Delete a VPC Block Public Access (BPA) exclusion. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func deleteVpcBlockPublicAccessExclusion(_ input: DeleteVpcBlockPublicAccessExclusionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVpcBlockPublicAccessExclusionResult {
        try await self.client.execute(
            operation: "DeleteVpcBlockPublicAccessExclusion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Delete a VPC Block Public Access (BPA) exclusion. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - exclusionId: The ID of the exclusion.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpcBlockPublicAccessExclusion(
        dryRun: Bool? = nil,
        exclusionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVpcBlockPublicAccessExclusionResult {
        let input = DeleteVpcBlockPublicAccessExclusionRequest(
            dryRun: dryRun, 
            exclusionId: exclusionId
        )
        return try await self.deleteVpcBlockPublicAccessExclusion(input, logger: logger)
    }

    /// Deletes the specified VPC endpoint connection notifications.
    @Sendable
    @inlinable
    public func deleteVpcEndpointConnectionNotifications(_ input: DeleteVpcEndpointConnectionNotificationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVpcEndpointConnectionNotificationsResult {
        try await self.client.execute(
            operation: "DeleteVpcEndpointConnectionNotifications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified VPC endpoint connection notifications.
    ///
    /// Parameters:
    ///   - connectionNotificationIds: The IDs of the notifications.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpcEndpointConnectionNotifications(
        connectionNotificationIds: [String]? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVpcEndpointConnectionNotificationsResult {
        let input = DeleteVpcEndpointConnectionNotificationsRequest(
            connectionNotificationIds: connectionNotificationIds, 
            dryRun: dryRun
        )
        return try await self.deleteVpcEndpointConnectionNotifications(input, logger: logger)
    }

    /// Deletes the specified VPC endpoint service configurations. Before you can delete an endpoint service configuration, you must reject any Available or PendingAcceptance interface endpoint connections that are attached to the service.
    @Sendable
    @inlinable
    public func deleteVpcEndpointServiceConfigurations(_ input: DeleteVpcEndpointServiceConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVpcEndpointServiceConfigurationsResult {
        try await self.client.execute(
            operation: "DeleteVpcEndpointServiceConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified VPC endpoint service configurations. Before you can delete an endpoint service configuration, you must reject any Available or PendingAcceptance interface endpoint connections that are attached to the service.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - serviceIds: The IDs of the services.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpcEndpointServiceConfigurations(
        dryRun: Bool? = nil,
        serviceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVpcEndpointServiceConfigurationsResult {
        let input = DeleteVpcEndpointServiceConfigurationsRequest(
            dryRun: dryRun, 
            serviceIds: serviceIds
        )
        return try await self.deleteVpcEndpointServiceConfigurations(input, logger: logger)
    }

    /// Deletes the specified VPC endpoints. When you delete a gateway endpoint, we delete the endpoint routes in the route tables for the endpoint. When you delete a Gateway Load Balancer endpoint, we delete its endpoint network interfaces.  You can only delete Gateway Load Balancer endpoints when the routes that are associated with the endpoint are deleted. When you delete an interface endpoint, we delete its endpoint network interfaces.
    @Sendable
    @inlinable
    public func deleteVpcEndpoints(_ input: DeleteVpcEndpointsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVpcEndpointsResult {
        try await self.client.execute(
            operation: "DeleteVpcEndpoints", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified VPC endpoints. When you delete a gateway endpoint, we delete the endpoint routes in the route tables for the endpoint. When you delete a Gateway Load Balancer endpoint, we delete its endpoint network interfaces.  You can only delete Gateway Load Balancer endpoints when the routes that are associated with the endpoint are deleted. When you delete an interface endpoint, we delete its endpoint network interfaces.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - vpcEndpointIds: The IDs of the VPC endpoints.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpcEndpoints(
        dryRun: Bool? = nil,
        vpcEndpointIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVpcEndpointsResult {
        let input = DeleteVpcEndpointsRequest(
            dryRun: dryRun, 
            vpcEndpointIds: vpcEndpointIds
        )
        return try await self.deleteVpcEndpoints(input, logger: logger)
    }

    /// Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it's in the active state. The owner of the requester VPC can delete a VPC peering connection in the pending-acceptance state. You cannot delete a VPC peering connection that's in the failed or rejected state.
    @Sendable
    @inlinable
    public func deleteVpcPeeringConnection(_ input: DeleteVpcPeeringConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeleteVpcPeeringConnectionResult {
        try await self.client.execute(
            operation: "DeleteVpcPeeringConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it's in the active state. The owner of the requester VPC can delete a VPC peering connection in the pending-acceptance state. You cannot delete a VPC peering connection that's in the failed or rejected state.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - vpcPeeringConnectionId: The ID of the VPC peering connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpcPeeringConnection(
        dryRun: Bool? = nil,
        vpcPeeringConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeleteVpcPeeringConnectionResult {
        let input = DeleteVpcPeeringConnectionRequest(
            dryRun: dryRun, 
            vpcPeeringConnectionId: vpcPeeringConnectionId
        )
        return try await self.deleteVpcPeeringConnection(input, logger: logger)
    }

    /// Deletes the specified VPN connection. If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway device using the new configuration information returned with the new VPN connection ID. For certificate-based authentication, delete all Certificate Manager (ACM) private certificates used for the Amazon Web Services-side tunnel endpoints for the VPN connection before deleting the VPN connection.
    @Sendable
    @inlinable
    public func deleteVpnConnection(_ input: DeleteVpnConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVpnConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified VPN connection. If you're deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway device using the new configuration information returned with the new VPN connection ID. For certificate-based authentication, delete all Certificate Manager (ACM) private certificates used for the Amazon Web Services-side tunnel endpoints for the VPN connection before deleting the VPN connection.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - vpnConnectionId: The ID of the VPN connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpnConnection(
        dryRun: Bool? = nil,
        vpnConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVpnConnectionRequest(
            dryRun: dryRun, 
            vpnConnectionId: vpnConnectionId
        )
        return try await self.deleteVpnConnection(input, logger: logger)
    }

    /// Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.
    @Sendable
    @inlinable
    public func deleteVpnConnectionRoute(_ input: DeleteVpnConnectionRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVpnConnectionRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.
    ///
    /// Parameters:
    ///   - destinationCidrBlock: The CIDR block associated with the local subnet of the customer network.
    ///   - vpnConnectionId: The ID of the VPN connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpnConnectionRoute(
        destinationCidrBlock: String? = nil,
        vpnConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVpnConnectionRouteRequest(
            destinationCidrBlock: destinationCidrBlock, 
            vpnConnectionId: vpnConnectionId
        )
        return try await self.deleteVpnConnectionRoute(input, logger: logger)
    }

    /// Deletes the specified virtual private gateway. You must first detach the virtual private gateway from the VPC. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.
    @Sendable
    @inlinable
    public func deleteVpnGateway(_ input: DeleteVpnGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeleteVpnGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deletes the specified virtual private gateway. You must first detach the virtual private gateway from the VPC. Note that you don't need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - vpnGatewayId: The ID of the virtual private gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func deleteVpnGateway(
        dryRun: Bool? = nil,
        vpnGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeleteVpnGatewayRequest(
            dryRun: dryRun, 
            vpnGatewayId: vpnGatewayId
        )
        return try await self.deleteVpnGateway(input, logger: logger)
    }

    /// Releases the specified address range that you provisioned for use with your Amazon Web Services resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool. Before you can release an address range, you must stop advertising it using WithdrawByoipCidr and you must not have any IP addresses allocated from its address range.
    @Sendable
    @inlinable
    public func deprovisionByoipCidr(_ input: DeprovisionByoipCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeprovisionByoipCidrResult {
        try await self.client.execute(
            operation: "DeprovisionByoipCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Releases the specified address range that you provisioned for use with your Amazon Web Services resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool. Before you can release an address range, you must stop advertising it using WithdrawByoipCidr and you must not have any IP addresses allocated from its address range.
    ///
    /// Parameters:
    ///   - cidr: The address range, in CIDR notation. The prefix must be the same prefix  that you specified when you provisioned the address range.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func deprovisionByoipCidr(
        cidr: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeprovisionByoipCidrResult {
        let input = DeprovisionByoipCidrRequest(
            cidr: cidr, 
            dryRun: dryRun
        )
        return try await self.deprovisionByoipCidr(input, logger: logger)
    }

    /// Deprovisions your Autonomous System Number (ASN) from your Amazon Web Services account. This action can only be called after any BYOIP CIDR associations are removed from your Amazon Web Services account with DisassociateIpamByoasn. For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide.
    @Sendable
    @inlinable
    public func deprovisionIpamByoasn(_ input: DeprovisionIpamByoasnRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeprovisionIpamByoasnResult {
        try await self.client.execute(
            operation: "DeprovisionIpamByoasn", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deprovisions your Autonomous System Number (ASN) from your Amazon Web Services account. This action can only be called after any BYOIP CIDR associations are removed from your Amazon Web Services account with DisassociateIpamByoasn. For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide.
    ///
    /// Parameters:
    ///   - asn: An ASN.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamId: The IPAM ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func deprovisionIpamByoasn(
        asn: String? = nil,
        dryRun: Bool? = nil,
        ipamId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeprovisionIpamByoasnResult {
        let input = DeprovisionIpamByoasnRequest(
            asn: asn, 
            dryRun: dryRun, 
            ipamId: ipamId
        )
        return try await self.deprovisionIpamByoasn(input, logger: logger)
    }

    /// Deprovision a CIDR provisioned from an IPAM pool. If you deprovision a CIDR from a pool that has a source pool, the CIDR is recycled back into the source pool. For more information, see Deprovision pool CIDRs in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func deprovisionIpamPoolCidr(_ input: DeprovisionIpamPoolCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeprovisionIpamPoolCidrResult {
        try await self.client.execute(
            operation: "DeprovisionIpamPoolCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deprovision a CIDR provisioned from an IPAM pool. If you deprovision a CIDR from a pool that has a source pool, the CIDR is recycled back into the source pool. For more information, see Deprovision pool CIDRs in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - cidr: The CIDR which you want to deprovision from the pool.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamPoolId: The ID of the pool that has the CIDR you want to deprovision.
    ///   - logger: Logger use during operation
    @inlinable
    public func deprovisionIpamPoolCidr(
        cidr: String? = nil,
        dryRun: Bool? = nil,
        ipamPoolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeprovisionIpamPoolCidrResult {
        let input = DeprovisionIpamPoolCidrRequest(
            cidr: cidr, 
            dryRun: dryRun, 
            ipamPoolId: ipamPoolId
        )
        return try await self.deprovisionIpamPoolCidr(input, logger: logger)
    }

    /// Deprovision a CIDR from a public IPv4 pool.
    @Sendable
    @inlinable
    public func deprovisionPublicIpv4PoolCidr(_ input: DeprovisionPublicIpv4PoolCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeprovisionPublicIpv4PoolCidrResult {
        try await self.client.execute(
            operation: "DeprovisionPublicIpv4PoolCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deprovision a CIDR from a public IPv4 pool.
    ///
    /// Parameters:
    ///   - cidr: The CIDR you want to deprovision from the pool. Enter the CIDR you want to deprovision with a netmask of /32. You must rerun this command for each IP address in the CIDR range. If your CIDR is a /24, you will have to run this command to deprovision each of the 256 IP addresses in the /24 CIDR.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - poolId: The ID of the pool that you want to deprovision the CIDR from.
    ///   - logger: Logger use during operation
    @inlinable
    public func deprovisionPublicIpv4PoolCidr(
        cidr: String? = nil,
        dryRun: Bool? = nil,
        poolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeprovisionPublicIpv4PoolCidrResult {
        let input = DeprovisionPublicIpv4PoolCidrRequest(
            cidr: cidr, 
            dryRun: dryRun, 
            poolId: poolId
        )
        return try await self.deprovisionPublicIpv4PoolCidr(input, logger: logger)
    }

    /// Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch new instances. If you deregister an AMI that matches a Recycle Bin retention rule, the AMI is retained in the Recycle Bin for the specified retention period. For more information, see Recycle Bin in the Amazon EC2 User Guide. When you deregister an AMI, it doesn't affect any instances that you've already launched from the AMI. You'll continue to incur usage costs for those instances until you terminate them. When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn't affect the files that you uploaded to Amazon S3 when you created the AMI.
    @Sendable
    @inlinable
    public func deregisterImage(_ input: DeregisterImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DeregisterImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters the specified AMI. After you deregister an AMI, it can't be used to launch new instances. If you deregister an AMI that matches a Recycle Bin retention rule, the AMI is retained in the Recycle Bin for the specified retention period. For more information, see Recycle Bin in the Amazon EC2 User Guide. When you deregister an AMI, it doesn't affect any instances that you've already launched from the AMI. You'll continue to incur usage costs for those instances until you terminate them. When you deregister an Amazon EBS-backed AMI, it doesn't affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn't affect the files that you uploaded to Amazon S3 when you created the AMI.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterImage(
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DeregisterImageRequest(
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.deregisterImage(input, logger: logger)
    }

    /// Deregisters tag keys to prevent tags that have the specified tag keys from being included
    /// 			in scheduled event notifications for resources in the Region.
    @Sendable
    @inlinable
    public func deregisterInstanceEventNotificationAttributes(_ input: DeregisterInstanceEventNotificationAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterInstanceEventNotificationAttributesResult {
        try await self.client.execute(
            operation: "DeregisterInstanceEventNotificationAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters tag keys to prevent tags that have the specified tag keys from being included
    /// 			in scheduled event notifications for resources in the Region.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceTagAttribute: Information about the tag keys to deregister.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterInstanceEventNotificationAttributes(
        dryRun: Bool? = nil,
        instanceTagAttribute: DeregisterInstanceTagAttributeRequest? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeregisterInstanceEventNotificationAttributesResult {
        let input = DeregisterInstanceEventNotificationAttributesRequest(
            dryRun: dryRun, 
            instanceTagAttribute: instanceTagAttribute
        )
        return try await self.deregisterInstanceEventNotificationAttributes(input, logger: logger)
    }

    /// Deregisters the specified members (network interfaces) from the  transit gateway multicast group.
    @Sendable
    @inlinable
    public func deregisterTransitGatewayMulticastGroupMembers(_ input: DeregisterTransitGatewayMulticastGroupMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterTransitGatewayMulticastGroupMembersResult {
        try await self.client.execute(
            operation: "DeregisterTransitGatewayMulticastGroupMembers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters the specified members (network interfaces) from the  transit gateway multicast group.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupIpAddress: The IP address assigned to the  transit gateway multicast group.
    ///   - networkInterfaceIds: The IDs of the group members' network interfaces.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterTransitGatewayMulticastGroupMembers(
        dryRun: Bool? = nil,
        groupIpAddress: String? = nil,
        networkInterfaceIds: [String]? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeregisterTransitGatewayMulticastGroupMembersResult {
        let input = DeregisterTransitGatewayMulticastGroupMembersRequest(
            dryRun: dryRun, 
            groupIpAddress: groupIpAddress, 
            networkInterfaceIds: networkInterfaceIds, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.deregisterTransitGatewayMulticastGroupMembers(input, logger: logger)
    }

    /// Deregisters the specified sources (network interfaces) from the  transit gateway multicast group.
    @Sendable
    @inlinable
    public func deregisterTransitGatewayMulticastGroupSources(_ input: DeregisterTransitGatewayMulticastGroupSourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DeregisterTransitGatewayMulticastGroupSourcesResult {
        try await self.client.execute(
            operation: "DeregisterTransitGatewayMulticastGroupSources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Deregisters the specified sources (network interfaces) from the  transit gateway multicast group.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupIpAddress: The IP address assigned to the  transit gateway multicast group.
    ///   - networkInterfaceIds: The IDs of the group sources' network interfaces.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func deregisterTransitGatewayMulticastGroupSources(
        dryRun: Bool? = nil,
        groupIpAddress: String? = nil,
        networkInterfaceIds: [String]? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DeregisterTransitGatewayMulticastGroupSourcesResult {
        let input = DeregisterTransitGatewayMulticastGroupSourcesRequest(
            dryRun: dryRun, 
            groupIpAddress: groupIpAddress, 
            networkInterfaceIds: networkInterfaceIds, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.deregisterTransitGatewayMulticastGroupSources(input, logger: logger)
    }

    /// Describes attributes of your Amazon Web Services account. The following are the supported account attributes:    default-vpc: The ID of the default VPC for your account, or none.    max-instances: This attribute is no longer supported. The returned value does not reflect your actual vCPU limit for running On-Demand Instances. For more information, see On-Demand Instance Limits in the Amazon Elastic Compute Cloud User Guide.    max-elastic-ips: The maximum number of Elastic IP addresses that you can allocate.    supported-platforms: This attribute is deprecated.    vpc-max-elastic-ips: The maximum number of Elastic IP addresses that you can allocate.    vpc-max-security-groups-per-interface: The maximum number of security groups that you can assign to a network interface.    The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeAccountAttributes(_ input: DescribeAccountAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAccountAttributesResult {
        try await self.client.execute(
            operation: "DescribeAccountAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes attributes of your Amazon Web Services account. The following are the supported account attributes:    default-vpc: The ID of the default VPC for your account, or none.    max-instances: This attribute is no longer supported. The returned value does not reflect your actual vCPU limit for running On-Demand Instances. For more information, see On-Demand Instance Limits in the Amazon Elastic Compute Cloud User Guide.    max-elastic-ips: The maximum number of Elastic IP addresses that you can allocate.    supported-platforms: This attribute is deprecated.    vpc-max-elastic-ips: The maximum number of Elastic IP addresses that you can allocate.    vpc-max-security-groups-per-interface: The maximum number of security groups that you can assign to a network interface.    The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - attributeNames: The account attribute names.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAccountAttributes(
        attributeNames: [AccountAttributeName]? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAccountAttributesResult {
        let input = DescribeAccountAttributesRequest(
            attributeNames: attributeNames, 
            dryRun: dryRun
        )
        return try await self.describeAccountAttributes(input, logger: logger)
    }

    /// Describes an Elastic IP address transfer. For more information, see Transfer Elastic IP addresses in the Amazon VPC User Guide. When you transfer an Elastic IP address, there is a two-step handshake between the source and transfer Amazon Web Services accounts. When the source account starts the transfer, the transfer account has seven days to accept the Elastic IP address transfer. During those seven days, the source account can view the pending transfer by using this action. After seven days, the transfer expires and ownership of the Elastic IP address returns to the source account. Accepted transfers are visible to the source account for 14 days after the transfers have been accepted.
    @Sendable
    @inlinable
    public func describeAddressTransfers(_ input: DescribeAddressTransfersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAddressTransfersResult {
        try await self.client.execute(
            operation: "DescribeAddressTransfers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes an Elastic IP address transfer. For more information, see Transfer Elastic IP addresses in the Amazon VPC User Guide. When you transfer an Elastic IP address, there is a two-step handshake between the source and transfer Amazon Web Services accounts. When the source account starts the transfer, the transfer account has seven days to accept the Elastic IP address transfer. During those seven days, the source account can view the pending transfer by using this action. After seven days, the transfer expires and ownership of the Elastic IP address returns to the source account. Accepted transfers are visible to the source account for 14 days after the transfers have been accepted.
    ///
    /// Parameters:
    ///   - allocationIds: The allocation IDs of Elastic IP addresses.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of address transfers to return in one page of results.
    ///   - nextToken: Specify the pagination token from a previous request to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAddressTransfers(
        allocationIds: [String]? = nil,
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAddressTransfersResult {
        let input = DescribeAddressTransfersRequest(
            allocationIds: allocationIds, 
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeAddressTransfers(input, logger: logger)
    }

    /// Describes the specified Elastic IP addresses or all of your Elastic IP addresses.
    @Sendable
    @inlinable
    public func describeAddresses(_ input: DescribeAddressesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAddressesResult {
        try await self.client.execute(
            operation: "DescribeAddresses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Elastic IP addresses or all of your Elastic IP addresses.
    ///
    /// Parameters:
    ///   - allocationIds: Information about the allocation IDs.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    allocation-id - The allocation ID for the address.    association-id - The association ID for the address.    instance-id - The ID of the instance the address is associated with, if any.    network-border-group -  A unique set of Availability Zones, Local Zones, or Wavelength Zones from where Amazon Web Services advertises IP addresses.     network-interface-id - The ID of the network interface that the address is associated with, if any.    network-interface-owner-id - The Amazon Web Services account ID of the owner.    private-ip-address - The private IP address associated with the Elastic IP address.    public-ip - The Elastic IP address, or the carrier IP address.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - publicIps: One or more Elastic IP addresses. Default: Describes all your Elastic IP addresses.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAddresses(
        allocationIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        publicIps: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAddressesResult {
        let input = DescribeAddressesRequest(
            allocationIds: allocationIds, 
            dryRun: dryRun, 
            filters: filters, 
            publicIps: publicIps
        )
        return try await self.describeAddresses(input, logger: logger)
    }

    /// Describes the attributes of the specified Elastic IP addresses. For requirements, see Using reverse DNS for email applications.
    @Sendable
    @inlinable
    public func describeAddressesAttribute(_ input: DescribeAddressesAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAddressesAttributeResult {
        try await self.client.execute(
            operation: "DescribeAddressesAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the attributes of the specified Elastic IP addresses. For requirements, see Using reverse DNS for email applications.
    ///
    /// Parameters:
    ///   - allocationIds: [EC2-VPC] The allocation IDs.
    ///   - attribute: The attribute of the IP address.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAddressesAttribute(
        allocationIds: [String]? = nil,
        attribute: AddressAttributeName? = nil,
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAddressesAttributeResult {
        let input = DescribeAddressesAttributeRequest(
            allocationIds: allocationIds, 
            attribute: attribute, 
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeAddressesAttribute(input, logger: logger)
    }

    /// Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs). This request only returns information about resource types that support longer IDs. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.
    @Sendable
    @inlinable
    public func describeAggregateIdFormat(_ input: DescribeAggregateIdFormatRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAggregateIdFormatResult {
        try await self.client.execute(
            operation: "DescribeAggregateIdFormat", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs). This request only returns information about resource types that support longer IDs. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAggregateIdFormat(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAggregateIdFormatResult {
        let input = DescribeAggregateIdFormatRequest(
            dryRun: dryRun
        )
        return try await self.describeAggregateIdFormat(input, logger: logger)
    }

    /// Describes the Availability Zones, Local Zones, and Wavelength Zones that are available to you. If there is an event impacting a zone, you can use this request to view the state and any provided messages for that zone. For more information about Availability Zones, Local Zones, and Wavelength Zones, see Regions and zones  in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeAvailabilityZones(_ input: DescribeAvailabilityZonesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAvailabilityZonesResult {
        try await self.client.execute(
            operation: "DescribeAvailabilityZones", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the Availability Zones, Local Zones, and Wavelength Zones that are available to you. If there is an event impacting a zone, you can use this request to view the state and any provided messages for that zone. For more information about Availability Zones, Local Zones, and Wavelength Zones, see Regions and zones  in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - allAvailabilityZones: Include all Availability Zones, Local Zones, and Wavelength Zones regardless of your opt-in status. If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    group-name - For Availability Zones, use the Region name. For Local Zones, use the name of the group associated with the Local Zone (for example, us-west-2-lax-1) For Wavelength Zones, use the name of the group associated with the Wavelength Zone (for example, us-east-1-wl1).    message - The Zone message.    opt-in-status - The opt-in status (opted-in | not-opted-in | opt-in-not-required).    parent-zone-id - The ID of the zone that handles some of the Local Zone and Wavelength Zone control plane operations, such as API calls.    parent-zone-name - The ID of the zone that handles some of the Local Zone and Wavelength Zone control plane operations, such as API calls.    region-name - The name of the Region for the Zone (for example, us-east-1).    state - The state of the Availability Zone, the Local Zone, or the Wavelength Zone (available).    zone-id - The ID of the Availability Zone (for example, use1-az1), the Local Zone (for example, usw2-lax1-az1), or the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    zone-name - The name of the Availability Zone (for example, us-east-1a), the Local Zone (for example, us-west-2-lax-1a), or the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    zone-type - The type of zone (availability-zone |  local-zone | wavelength-zone).
    ///   - zoneIds: The IDs of the Availability Zones, Local Zones, and Wavelength Zones.
    ///   - zoneNames: The names of the Availability Zones, Local Zones, and Wavelength Zones.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAvailabilityZones(
        allAvailabilityZones: Bool? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        zoneIds: [String]? = nil,
        zoneNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAvailabilityZonesResult {
        let input = DescribeAvailabilityZonesRequest(
            allAvailabilityZones: allAvailabilityZones, 
            dryRun: dryRun, 
            filters: filters, 
            zoneIds: zoneIds, 
            zoneNames: zoneNames
        )
        return try await self.describeAvailabilityZones(input, logger: logger)
    }

    /// Describes the current Infrastructure Performance metric subscriptions.
    @Sendable
    @inlinable
    public func describeAwsNetworkPerformanceMetricSubscriptions(_ input: DescribeAwsNetworkPerformanceMetricSubscriptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeAwsNetworkPerformanceMetricSubscriptionsResult {
        try await self.client.execute(
            operation: "DescribeAwsNetworkPerformanceMetricSubscriptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the current Infrastructure Performance metric subscriptions.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeAwsNetworkPerformanceMetricSubscriptions(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeAwsNetworkPerformanceMetricSubscriptionsResult {
        let input = DescribeAwsNetworkPerformanceMetricSubscriptionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeAwsNetworkPerformanceMetricSubscriptions(input, logger: logger)
    }

    /// Describes the specified bundle tasks or all of your bundle tasks.  Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use RegisterImage with the Amazon S3 bucket name and image manifest name you provided to the bundle task.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeBundleTasks(_ input: DescribeBundleTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeBundleTasksResult {
        try await self.client.execute(
            operation: "DescribeBundleTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified bundle tasks or all of your bundle tasks.  Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use RegisterImage with the Amazon S3 bucket name and image manifest name you provided to the bundle task.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - bundleIds: The bundle task IDs. Default: Describes all your bundle tasks.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - filters: The filters.    bundle-id - The ID of the bundle task.    error-code - If the task failed, the error code returned.    error-message - If the task failed, the error message returned.    instance-id - The ID of the instance.    progress - The level of task completion, as a percentage (for example, 20%).    s3-bucket - The Amazon S3 bucket to store the AMI.    s3-prefix - The beginning of the AMI name.    start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).    state - The state of the task (pending | waiting-for-shutdown | bundling | storing | cancelling | complete | failed).    update-time - The time of the most recent update for the task.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeBundleTasks(
        bundleIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeBundleTasksResult {
        let input = DescribeBundleTasksRequest(
            bundleIds: bundleIds, 
            dryRun: dryRun, 
            filters: filters
        )
        return try await self.describeBundleTasks(input, logger: logger)
    }

    /// Describes the IP address ranges that were specified in calls to ProvisionByoipCidr. To describe the address pools that were created when you provisioned the address ranges, use DescribePublicIpv4Pools or DescribeIpv6Pools.
    @Sendable
    @inlinable
    public func describeByoipCidrs(_ input: DescribeByoipCidrsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeByoipCidrsResult {
        try await self.client.execute(
            operation: "DescribeByoipCidrs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the IP address ranges that were specified in calls to ProvisionByoipCidr. To describe the address pools that were created when you provisioned the address ranges, use DescribePublicIpv4Pools or DescribeIpv6Pools.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeByoipCidrs(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeByoipCidrsResult {
        let input = DescribeByoipCidrsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeByoipCidrs(input, logger: logger)
    }

    /// Describes the events for the specified Capacity Block extension during the specified
    /// 			time.
    @Sendable
    @inlinable
    public func describeCapacityBlockExtensionHistory(_ input: DescribeCapacityBlockExtensionHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCapacityBlockExtensionHistoryResult {
        try await self.client.execute(
            operation: "DescribeCapacityBlockExtensionHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the events for the specified Capacity Block extension during the specified
    /// 			time.
    ///
    /// Parameters:
    ///   - capacityReservationIds: The IDs of Capacity Block reservations that you want to display the history
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters    availability-zone - The Availability Zone of the
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCapacityBlockExtensionHistory(
        capacityReservationIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCapacityBlockExtensionHistoryResult {
        let input = DescribeCapacityBlockExtensionHistoryRequest(
            capacityReservationIds: capacityReservationIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeCapacityBlockExtensionHistory(input, logger: logger)
    }

    /// Describes Capacity Block extension offerings available for purchase in the Amazon Web Services Region
    /// 			that you're currently using.
    @Sendable
    @inlinable
    public func describeCapacityBlockExtensionOfferings(_ input: DescribeCapacityBlockExtensionOfferingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCapacityBlockExtensionOfferingsResult {
        try await self.client.execute(
            operation: "DescribeCapacityBlockExtensionOfferings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes Capacity Block extension offerings available for purchase in the Amazon Web Services Region
    /// 			that you're currently using.
    ///
    /// Parameters:
    ///   - capacityBlockExtensionDurationHours: The duration of the Capacity Block extension offering in hours.
    ///   - capacityReservationId: The ID of the Capacity reservation to be extended.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCapacityBlockExtensionOfferings(
        capacityBlockExtensionDurationHours: Int? = nil,
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCapacityBlockExtensionOfferingsResult {
        let input = DescribeCapacityBlockExtensionOfferingsRequest(
            capacityBlockExtensionDurationHours: capacityBlockExtensionDurationHours, 
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeCapacityBlockExtensionOfferings(input, logger: logger)
    }

    /// Describes Capacity Block offerings available for purchase in the Amazon Web Services Region that you're currently using. With Capacity Blocks, you purchase a
    /// 			specific instance type for a period of time.
    @Sendable
    @inlinable
    public func describeCapacityBlockOfferings(_ input: DescribeCapacityBlockOfferingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCapacityBlockOfferingsResult {
        try await self.client.execute(
            operation: "DescribeCapacityBlockOfferings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes Capacity Block offerings available for purchase in the Amazon Web Services Region that you're currently using. With Capacity Blocks, you purchase a
    /// 			specific instance type for a period of time.
    ///
    /// Parameters:
    ///   - capacityDurationHours: The number of hours for which to reserve Capacity Block.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - endDateRange: The latest end date for the Capacity Block offering.
    ///   - instanceCount: The number of instances for which to reserve capacity.
    ///   - instanceType: The type of instance for which the Capacity Block offering reserves capacity.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - startDateRange: The earliest start date for the Capacity Block offering.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCapacityBlockOfferings(
        capacityDurationHours: Int? = nil,
        dryRun: Bool? = nil,
        endDateRange: Date? = nil,
        instanceCount: Int? = nil,
        instanceType: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        startDateRange: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCapacityBlockOfferingsResult {
        let input = DescribeCapacityBlockOfferingsRequest(
            capacityDurationHours: capacityDurationHours, 
            dryRun: dryRun, 
            endDateRange: endDateRange, 
            instanceCount: instanceCount, 
            instanceType: instanceType, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            startDateRange: startDateRange
        )
        return try await self.describeCapacityBlockOfferings(input, logger: logger)
    }

    /// Describes a request to assign the billing of the unused capacity of a Capacity
    /// 			Reservation. For more information, see  Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    @Sendable
    @inlinable
    public func describeCapacityReservationBillingRequests(_ input: DescribeCapacityReservationBillingRequestsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCapacityReservationBillingRequestsResult {
        try await self.client.execute(
            operation: "DescribeCapacityReservationBillingRequests", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes a request to assign the billing of the unused capacity of a Capacity
    /// 			Reservation. For more information, see  Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    ///
    /// Parameters:
    ///   - capacityReservationIds: The ID of the Capacity Reservation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    status - The state of the request (pending |
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - role: Specify one of the following:    odcr-owner - If you are the Capacity Reservation owner, specify
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCapacityReservationBillingRequests(
        capacityReservationIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        role: CallerRole? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCapacityReservationBillingRequestsResult {
        let input = DescribeCapacityReservationBillingRequestsRequest(
            capacityReservationIds: capacityReservationIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            role: role
        )
        return try await self.describeCapacityReservationBillingRequests(input, logger: logger)
    }

    /// Describes one or more Capacity Reservation Fleets.
    @Sendable
    @inlinable
    public func describeCapacityReservationFleets(_ input: DescribeCapacityReservationFleetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCapacityReservationFleetsResult {
        try await self.client.execute(
            operation: "DescribeCapacityReservationFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more Capacity Reservation Fleets.
    ///
    /// Parameters:
    ///   - capacityReservationFleetIds: The IDs of the Capacity Reservation Fleets to describe.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    state - The state of the Fleet (submitted |
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCapacityReservationFleets(
        capacityReservationFleetIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCapacityReservationFleetsResult {
        let input = DescribeCapacityReservationFleetsRequest(
            capacityReservationFleetIds: capacityReservationFleetIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeCapacityReservationFleets(input, logger: logger)
    }

    /// Describes one or more of your Capacity Reservations. The results describe only the
    /// 			Capacity Reservations in the Amazon Web Services Region that you're currently
    /// 			using.
    @Sendable
    @inlinable
    public func describeCapacityReservations(_ input: DescribeCapacityReservationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCapacityReservationsResult {
        try await self.client.execute(
            operation: "DescribeCapacityReservations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your Capacity Reservations. The results describe only the
    /// 			Capacity Reservations in the Amazon Web Services Region that you're currently
    /// 			using.
    ///
    /// Parameters:
    ///   - capacityReservationIds: The ID of the Capacity Reservation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    instance-type - The type of instance for which the Capacity
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCapacityReservations(
        capacityReservationIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCapacityReservationsResult {
        let input = DescribeCapacityReservationsRequest(
            capacityReservationIds: capacityReservationIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeCapacityReservations(input, logger: logger)
    }

    /// Describes one or more of your carrier gateways.
    @Sendable
    @inlinable
    public func describeCarrierGateways(_ input: DescribeCarrierGatewaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCarrierGatewaysResult {
        try await self.client.execute(
            operation: "DescribeCarrierGateways", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your carrier gateways.
    ///
    /// Parameters:
    ///   - carrierGatewayIds: One or more carrier gateway IDs.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    carrier-gateway-id - The ID of the carrier gateway.    state - The state of the carrier gateway (pending | failed | available | deleting | deleted).    owner-id - The Amazon Web Services account ID of the owner of the carrier gateway.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC associated with the carrier gateway.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCarrierGateways(
        carrierGatewayIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCarrierGatewaysResult {
        let input = DescribeCarrierGatewaysRequest(
            carrierGatewayIds: carrierGatewayIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeCarrierGateways(input, logger: logger)
    }

    ///  This action is deprecated.  Describes your linked EC2-Classic instances. This request only returns
    /// 			information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot
    /// 			use this request to return information about other instances.
    @Sendable
    @inlinable
    public func describeClassicLinkInstances(_ input: DescribeClassicLinkInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClassicLinkInstancesResult {
        try await self.client.execute(
            operation: "DescribeClassicLinkInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Describes your linked EC2-Classic instances. This request only returns
    /// 			information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot
    /// 			use this request to return information about other instances.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    group-id - The ID of a VPC security group that's associated with the instance.    instance-id - The ID of the instance.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC to which the instance is linked.
    ///   - instanceIds: The instance IDs. Must be instances linked to a VPC through ClassicLink.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeClassicLinkInstances(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClassicLinkInstancesResult {
        let input = DescribeClassicLinkInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeClassicLinkInstances(input, logger: logger)
    }

    /// Describes the authorization rules for a specified Client VPN endpoint.
    @Sendable
    @inlinable
    public func describeClientVpnAuthorizationRules(_ input: DescribeClientVpnAuthorizationRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClientVpnAuthorizationRulesResult {
        try await self.client.execute(
            operation: "DescribeClientVpnAuthorizationRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the authorization rules for a specified Client VPN endpoint.
    ///
    /// Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    description - The description of the authorization rule.    destination-cidr - The CIDR of the network to which the authorization rule applies.    group-id - The ID of the Active Directory group to which the authorization rule grants access.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeClientVpnAuthorizationRules(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClientVpnAuthorizationRulesResult {
        let input = DescribeClientVpnAuthorizationRulesRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeClientVpnAuthorizationRules(input, logger: logger)
    }

    /// Describes active client connections and connections that have been terminated within the last 60
    /// 			minutes for the specified Client VPN endpoint.
    @Sendable
    @inlinable
    public func describeClientVpnConnections(_ input: DescribeClientVpnConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClientVpnConnectionsResult {
        try await self.client.execute(
            operation: "DescribeClientVpnConnections", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes active client connections and connections that have been terminated within the last 60
    /// 			minutes for the specified Client VPN endpoint.
    ///
    /// Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    connection-id - The ID of the connection.    username - For Active Directory client authentication, the user name of the client who established the client connection.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeClientVpnConnections(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClientVpnConnectionsResult {
        let input = DescribeClientVpnConnectionsRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeClientVpnConnections(input, logger: logger)
    }

    /// Describes one or more Client VPN endpoints in the account.
    @Sendable
    @inlinable
    public func describeClientVpnEndpoints(_ input: DescribeClientVpnEndpointsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClientVpnEndpointsResult {
        try await self.client.execute(
            operation: "DescribeClientVpnEndpoints", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more Client VPN endpoints in the account.
    ///
    /// Parameters:
    ///   - clientVpnEndpointIds: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    endpoint-id - The ID of the Client VPN endpoint.    transport-protocol - The transport protocol (tcp | udp).
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeClientVpnEndpoints(
        clientVpnEndpointIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClientVpnEndpointsResult {
        let input = DescribeClientVpnEndpointsRequest(
            clientVpnEndpointIds: clientVpnEndpointIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeClientVpnEndpoints(input, logger: logger)
    }

    /// Describes the routes for the specified Client VPN endpoint.
    @Sendable
    @inlinable
    public func describeClientVpnRoutes(_ input: DescribeClientVpnRoutesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClientVpnRoutesResult {
        try await self.client.execute(
            operation: "DescribeClientVpnRoutes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the routes for the specified Client VPN endpoint.
    ///
    /// Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    destination-cidr - The CIDR of the route destination.    origin - How the route was associated with the Client VPN endpoint (associate | add-route).    target-subnet - The ID of the subnet through which traffic is routed.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeClientVpnRoutes(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClientVpnRoutesResult {
        let input = DescribeClientVpnRoutesRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeClientVpnRoutes(input, logger: logger)
    }

    /// Describes the target networks associated with the specified Client VPN endpoint.
    @Sendable
    @inlinable
    public func describeClientVpnTargetNetworks(_ input: DescribeClientVpnTargetNetworksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeClientVpnTargetNetworksResult {
        try await self.client.execute(
            operation: "DescribeClientVpnTargetNetworks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the target networks associated with the specified Client VPN endpoint.
    ///
    /// Parameters:
    ///   - associationIds: The IDs of the target network associations.
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    association-id - The ID of the association.    target-network-id - The ID of the subnet specified as the target network.    vpc-id - The ID of the VPC in which the target network is located.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeClientVpnTargetNetworks(
        associationIds: [String]? = nil,
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeClientVpnTargetNetworksResult {
        let input = DescribeClientVpnTargetNetworksRequest(
            associationIds: associationIds, 
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeClientVpnTargetNetworks(input, logger: logger)
    }

    /// Describes the specified customer-owned address pools or all of your customer-owned address pools.
    @Sendable
    @inlinable
    public func describeCoipPools(_ input: DescribeCoipPoolsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCoipPoolsResult {
        try await self.client.execute(
            operation: "DescribeCoipPools", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified customer-owned address pools or all of your customer-owned address pools.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    coip-pool.local-gateway-route-table-id - The ID of the local gateway route table.    coip-pool.pool-id - The ID of the address pool.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - poolIds: The IDs of the address pools.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCoipPools(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        poolIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCoipPoolsResult {
        let input = DescribeCoipPoolsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            poolIds: poolIds
        )
        return try await self.describeCoipPools(input, logger: logger)
    }

    /// Describes the specified conversion tasks or all your conversion tasks. For more information, see the VM Import/Export User Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
    @Sendable
    @inlinable
    public func describeConversionTasks(_ input: DescribeConversionTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeConversionTasksResult {
        try await self.client.execute(
            operation: "DescribeConversionTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified conversion tasks or all your conversion tasks. For more information, see the VM Import/Export User Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
    ///
    /// Parameters:
    ///   - conversionTaskIds: The conversion task IDs.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeConversionTasks(
        conversionTaskIds: [String]? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeConversionTasksResult {
        let input = DescribeConversionTasksRequest(
            conversionTaskIds: conversionTaskIds, 
            dryRun: dryRun
        )
        return try await self.describeConversionTasks(input, logger: logger)
    }

    /// Describes one or more of your VPN customer gateways. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    @Sendable
    @inlinable
    public func describeCustomerGateways(_ input: DescribeCustomerGatewaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeCustomerGatewaysResult {
        try await self.client.execute(
            operation: "DescribeCustomerGateways", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your VPN customer gateways. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    ///
    /// Parameters:
    ///   - customerGatewayIds: One or more customer gateway IDs. Default: Describes all your customer gateways.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).    customer-gateway-id - The ID of the customer gateway.    ip-address - The IP address of the customer gateway device's external interface.    state - The state of the customer gateway (pending | available | deleting | deleted).    type - The type of customer gateway. Currently, the only supported type is ipsec.1.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeCustomerGateways(
        customerGatewayIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeCustomerGatewaysResult {
        let input = DescribeCustomerGatewaysRequest(
            customerGatewayIds: customerGatewayIds, 
            dryRun: dryRun, 
            filters: filters
        )
        return try await self.describeCustomerGateways(input, logger: logger)
    }

    /// Describes the metadata of an account status report, including the status of the report. To view the full report, download it from the Amazon S3 bucket where it was saved. Reports are accessible only when they have the complete status. Reports with other statuses (running, cancelled, or error) are not available in the S3 bucket. For more information about downloading objects from an S3 bucket, see Downloading objects in the Amazon Simple Storage Service User Guide. For more information, see Generating the account status report for declarative policies in the Amazon Web Services Organizations User Guide.
    @Sendable
    @inlinable
    public func describeDeclarativePoliciesReports(_ input: DescribeDeclarativePoliciesReportsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDeclarativePoliciesReportsResult {
        try await self.client.execute(
            operation: "DescribeDeclarativePoliciesReports", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the metadata of an account status report, including the status of the report. To view the full report, download it from the Amazon S3 bucket where it was saved. Reports are accessible only when they have the complete status. Reports with other statuses (running, cancelled, or error) are not available in the S3 bucket. For more information about downloading objects from an S3 bucket, see Downloading objects in the Amazon Simple Storage Service User Guide. For more information, see Generating the account status report for declarative policies in the Amazon Web Services Organizations User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - reportIds: One or more report IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDeclarativePoliciesReports(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        reportIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDeclarativePoliciesReportsResult {
        let input = DescribeDeclarativePoliciesReportsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            reportIds: reportIds
        )
        return try await self.describeDeclarativePoliciesReports(input, logger: logger)
    }

    /// Describes your DHCP option sets. The default is to describe all your DHCP option sets.
    /// 		        Alternatively, you can specify specific DHCP option set IDs or filter the results to
    /// 		        include only the DHCP option sets that match specific criteria. For more information, see DHCP option sets in the
    /// 				Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func describeDhcpOptions(_ input: DescribeDhcpOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeDhcpOptionsResult {
        try await self.client.execute(
            operation: "DescribeDhcpOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your DHCP option sets. The default is to describe all your DHCP option sets.
    /// 		        Alternatively, you can specify specific DHCP option set IDs or filter the results to
    /// 		        include only the DHCP option sets that match specific criteria. For more information, see DHCP option sets in the
    /// 				Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dhcpOptionsIds: The IDs of DHCP option sets.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    dhcp-options-id - The ID of a DHCP options set.    key - The key for one of the options (for example, domain-name).    value - The value for one of the options.    owner-id - The ID of the Amazon Web Services account that owns the DHCP options set.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeDhcpOptions(
        dhcpOptionsIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeDhcpOptionsResult {
        let input = DescribeDhcpOptionsRequest(
            dhcpOptionsIds: dhcpOptionsIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeDhcpOptions(input, logger: logger)
    }

    /// Describes your egress-only internet gateways. The default is to describe all your egress-only internet gateways.  Alternatively, you can specify specific egress-only internet gateway IDs or filter the results to include only the egress-only internet gateways that match specific criteria.
    @Sendable
    @inlinable
    public func describeEgressOnlyInternetGateways(_ input: DescribeEgressOnlyInternetGatewaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeEgressOnlyInternetGatewaysResult {
        try await self.client.execute(
            operation: "DescribeEgressOnlyInternetGateways", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your egress-only internet gateways. The default is to describe all your egress-only internet gateways.  Alternatively, you can specify specific egress-only internet gateway IDs or filter the results to include only the egress-only internet gateways that match specific criteria.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - egressOnlyInternetGatewayIds: The IDs of the egress-only internet gateways.
    ///   - filters: The filters.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeEgressOnlyInternetGateways(
        dryRun: Bool? = nil,
        egressOnlyInternetGatewayIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeEgressOnlyInternetGatewaysResult {
        let input = DescribeEgressOnlyInternetGatewaysRequest(
            dryRun: dryRun, 
            egressOnlyInternetGatewayIds: egressOnlyInternetGatewayIds, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeEgressOnlyInternetGateways(input, logger: logger)
    }

    ///  Amazon Elastic Graphics reached end of life on January 8, 2024.  Describes the Elastic Graphics accelerator associated with your instances.
    @Sendable
    @inlinable
    public func describeElasticGpus(_ input: DescribeElasticGpusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeElasticGpusResult {
        try await self.client.execute(
            operation: "DescribeElasticGpus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  Amazon Elastic Graphics reached end of life on January 8, 2024.  Describes the Elastic Graphics accelerator associated with your instances.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - elasticGpuIds: The Elastic Graphics accelerator IDs.
    ///   - filters: The filters.    availability-zone - The Availability Zone in which the Elastic Graphics accelerator resides.    elastic-gpu-health - The status of the Elastic Graphics accelerator (OK | IMPAIRED).    elastic-gpu-state - The state of the Elastic Graphics accelerator (ATTACHED).    elastic-gpu-type - The type of Elastic Graphics accelerator; for example, eg1.medium.    instance-id - The ID of the instance to which the Elastic Graphics accelerator is associated.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeElasticGpus(
        dryRun: Bool? = nil,
        elasticGpuIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeElasticGpusResult {
        let input = DescribeElasticGpusRequest(
            dryRun: dryRun, 
            elasticGpuIds: elasticGpuIds, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeElasticGpus(input, logger: logger)
    }

    /// Describes the specified export image tasks or all of your export image tasks.
    @Sendable
    @inlinable
    public func describeExportImageTasks(_ input: DescribeExportImageTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeExportImageTasksResult {
        try await self.client.execute(
            operation: "DescribeExportImageTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified export image tasks or all of your export image tasks.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - exportImageTaskIds: The IDs of the export image tasks.
    ///   - filters: Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: A token that indicates the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeExportImageTasks(
        dryRun: Bool? = nil,
        exportImageTaskIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeExportImageTasksResult {
        let input = DescribeExportImageTasksRequest(
            dryRun: dryRun, 
            exportImageTaskIds: exportImageTaskIds, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeExportImageTasks(input, logger: logger)
    }

    /// Describes the specified export instance tasks or all of your export instance tasks.
    @Sendable
    @inlinable
    public func describeExportTasks(_ input: DescribeExportTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeExportTasksResult {
        try await self.client.execute(
            operation: "DescribeExportTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified export instance tasks or all of your export instance tasks.
    ///
    /// Parameters:
    ///   - exportTaskIds: The export task IDs.
    ///   - filters: the filters for the export tasks.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeExportTasks(
        exportTaskIds: [String]? = nil,
        filters: [Filter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeExportTasksResult {
        let input = DescribeExportTasksRequest(
            exportTaskIds: exportTaskIds, 
            filters: filters
        )
        return try await self.describeExportTasks(input, logger: logger)
    }

    /// Describe details for Windows AMIs that are configured for Windows fast launch.
    @Sendable
    @inlinable
    public func describeFastLaunchImages(_ input: DescribeFastLaunchImagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFastLaunchImagesResult {
        try await self.client.execute(
            operation: "DescribeFastLaunchImages", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describe details for Windows AMIs that are configured for Windows fast launch.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - filters: Use the following filters to streamline results.    resource-type - The resource type for pre-provisioning.    owner-id - The owner ID for the pre-provisioning resource.    state - The current state of fast launching for the Windows AMI.
    ///   - imageIds: Specify one or more Windows AMI image IDs for the request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFastLaunchImages(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFastLaunchImagesResult {
        let input = DescribeFastLaunchImagesRequest(
            dryRun: dryRun, 
            filters: filters, 
            imageIds: imageIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeFastLaunchImages(input, logger: logger)
    }

    /// Describes the state of fast snapshot restores for your snapshots.
    @Sendable
    @inlinable
    public func describeFastSnapshotRestores(_ input: DescribeFastSnapshotRestoresRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFastSnapshotRestoresResult {
        try await self.client.execute(
            operation: "DescribeFastSnapshotRestores", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the state of fast snapshot restores for your snapshots.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. The possible values are:    availability-zone: The Availability Zone of the snapshot.    owner-id: The ID of the Amazon Web Services account that enabled fast snapshot restore on the snapshot.    snapshot-id: The ID of the snapshot.    state: The state of fast snapshot restores for the snapshot  (enabling |  optimizing |  enabled |  disabling |  disabled).
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFastSnapshotRestores(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFastSnapshotRestoresResult {
        let input = DescribeFastSnapshotRestoresRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeFastSnapshotRestores(input, logger: logger)
    }

    /// Describes the events for the specified EC2 Fleet during the specified time. EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events are available for 48 hours. For more information, see Monitor fleet events using Amazon EventBridge in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeFleetHistory(_ input: DescribeFleetHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFleetHistoryResult {
        try await self.client.execute(
            operation: "DescribeFleetHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the events for the specified EC2 Fleet during the specified time. EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events are available for 48 hours. For more information, see Monitor fleet events using Amazon EventBridge in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - eventType: The type of events to describe. By default, all events are described.
    ///   - fleetId: The ID of the EC2 Fleet.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - startTime: The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFleetHistory(
        dryRun: Bool? = nil,
        eventType: FleetEventType? = nil,
        fleetId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFleetHistoryResult {
        let input = DescribeFleetHistoryRequest(
            dryRun: dryRun, 
            eventType: eventType, 
            fleetId: fleetId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            startTime: startTime
        )
        return try await self.describeFleetHistory(input, logger: logger)
    }

    /// Describes the running instances for the specified EC2 Fleet.  Currently, DescribeFleetInstances does not support fleets of type instant. Instead, use DescribeFleets, specifying the instant fleet ID in the request.  For more information, see Describe your EC2 Fleet in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeFleetInstances(_ input: DescribeFleetInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFleetInstancesResult {
        try await self.client.execute(
            operation: "DescribeFleetInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the running instances for the specified EC2 Fleet.  Currently, DescribeFleetInstances does not support fleets of type instant. Instead, use DescribeFleets, specifying the instant fleet ID in the request.  For more information, see Describe your EC2 Fleet in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    instance-type - The instance type.
    ///   - fleetId: The ID of the EC2 Fleet.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFleetInstances(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        fleetId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFleetInstancesResult {
        let input = DescribeFleetInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            fleetId: fleetId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeFleetInstances(input, logger: logger)
    }

    /// Describes the specified EC2 Fleet or all of your EC2 Fleets.  If a fleet is of type instant, you must specify the fleet ID in the request, otherwise the fleet does not appear in the response.  For more information, see Describe your EC2 Fleet in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeFleets(_ input: DescribeFleetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFleetsResult {
        try await self.client.execute(
            operation: "DescribeFleets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified EC2 Fleet or all of your EC2 Fleets.  If a fleet is of type instant, you must specify the fleet ID in the request, otherwise the fleet does not appear in the response.  For more information, see Describe your EC2 Fleet in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    activity-status - The progress of the EC2 Fleet ( error | pending-fulfillment | pending-termination | fulfilled).    excess-capacity-termination-policy - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (true | false).    fleet-state - The state of the EC2 Fleet (submitted | active | deleted | failed | deleted-running | deleted-terminating | modifying).    replace-unhealthy-instances - Indicates whether EC2 Fleet should replace unhealthy instances (true | false).    type - The type of request (instant | request | maintain).
    ///   - fleetIds: The IDs of the EC2 Fleets.  If a fleet is of type instant, you must specify the fleet ID, otherwise it does not appear in the response.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFleets(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        fleetIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFleetsResult {
        let input = DescribeFleetsRequest(
            dryRun: dryRun, 
            filters: filters, 
            fleetIds: fleetIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeFleets(input, logger: logger)
    }

    /// Describes one or more flow logs. To view the published flow log records, you must view the log destination. For example,  the CloudWatch Logs log group, the Amazon S3 bucket, or the Kinesis Data Firehose delivery stream.
    @Sendable
    @inlinable
    public func describeFlowLogs(_ input: DescribeFlowLogsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFlowLogsResult {
        try await self.client.execute(
            operation: "DescribeFlowLogs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more flow logs. To view the published flow log records, you must view the log destination. For example,  the CloudWatch Logs log group, the Amazon S3 bucket, or the Kinesis Data Firehose delivery stream.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filter: One or more filters.    deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).    log-destination-type - The type of destination for the flow log data (cloud-watch-logs | s3 | kinesis-data-firehose).    flow-log-id - The ID of the flow log.    log-group-name - The name of the log group.    resource-id - The ID of the VPC, subnet, or network interface.    traffic-type - The type of traffic (ACCEPT | REJECT | ALL).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - flowLogIds: One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token to request the next page of items. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFlowLogs(
        dryRun: Bool? = nil,
        filter: [Filter]? = nil,
        flowLogIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFlowLogsResult {
        let input = DescribeFlowLogsRequest(
            dryRun: dryRun, 
            filter: filter, 
            flowLogIds: flowLogIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeFlowLogs(input, logger: logger)
    }

    /// Describes the specified attribute of the specified Amazon FPGA Image (AFI).
    @Sendable
    @inlinable
    public func describeFpgaImageAttribute(_ input: DescribeFpgaImageAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFpgaImageAttributeResult {
        try await self.client.execute(
            operation: "DescribeFpgaImageAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified attribute of the specified Amazon FPGA Image (AFI).
    ///
    /// Parameters:
    ///   - attribute: The AFI attribute.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fpgaImageId: The ID of the AFI.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFpgaImageAttribute(
        attribute: FpgaImageAttributeName? = nil,
        dryRun: Bool? = nil,
        fpgaImageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFpgaImageAttributeResult {
        let input = DescribeFpgaImageAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            fpgaImageId: fpgaImageId
        )
        return try await self.describeFpgaImageAttribute(input, logger: logger)
    }

    /// Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs,
    /// 			private AFIs that you own, and AFIs owned by other Amazon Web Services accounts for which you have load
    /// 			permissions.
    @Sendable
    @inlinable
    public func describeFpgaImages(_ input: DescribeFpgaImagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeFpgaImagesResult {
        try await self.client.execute(
            operation: "DescribeFpgaImages", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs,
    /// 			private AFIs that you own, and AFIs owned by other Amazon Web Services accounts for which you have load
    /// 			permissions.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    create-time - The creation time of the AFI.    fpga-image-id - The FPGA image identifier (AFI ID).    fpga-image-global-id - The global FPGA image identifier (AGFI ID).    name - The name of the AFI.    owner-id - The Amazon Web Services account ID of the AFI owner.    product-code - The product code.    shell-version - The version of the Amazon Web Services Shell that was used to create the bitstream.    state - The state of the AFI (pending | failed | available | unavailable).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    update-time - The time of the most recent update.
    ///   - fpgaImageIds: The AFI IDs.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - owners: Filters the AFI by owner. Specify an Amazon Web Services account ID, self
    ///   - logger: Logger use during operation
    @inlinable
    public func describeFpgaImages(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        fpgaImageIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        owners: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeFpgaImagesResult {
        let input = DescribeFpgaImagesRequest(
            dryRun: dryRun, 
            filters: filters, 
            fpgaImageIds: fpgaImageIds, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            owners: owners
        )
        return try await self.describeFpgaImages(input, logger: logger)
    }

    /// Describes the Dedicated Host reservations that are available to purchase. The results describe all of the Dedicated Host reservation offerings, including offerings that might not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see Dedicated Hosts in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeHostReservationOfferings(_ input: DescribeHostReservationOfferingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeHostReservationOfferingsResult {
        try await self.client.execute(
            operation: "DescribeHostReservationOfferings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the Dedicated Host reservations that are available to purchase. The results describe all of the Dedicated Host reservation offerings, including offerings that might not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see Dedicated Hosts in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - filter: The filters.    instance-family - The instance family of the offering (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).
    ///   - maxDuration: This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
    ///   - minDuration: This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - offeringId: The ID of the reservation offering.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeHostReservationOfferings(
        filter: [Filter]? = nil,
        maxDuration: Int? = nil,
        maxResults: Int? = nil,
        minDuration: Int? = nil,
        nextToken: String? = nil,
        offeringId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeHostReservationOfferingsResult {
        let input = DescribeHostReservationOfferingsRequest(
            filter: filter, 
            maxDuration: maxDuration, 
            maxResults: maxResults, 
            minDuration: minDuration, 
            nextToken: nextToken, 
            offeringId: offeringId
        )
        return try await self.describeHostReservationOfferings(input, logger: logger)
    }

    /// Describes reservations that are associated with Dedicated Hosts in your account.
    @Sendable
    @inlinable
    public func describeHostReservations(_ input: DescribeHostReservationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeHostReservationsResult {
        try await self.client.execute(
            operation: "DescribeHostReservations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes reservations that are associated with Dedicated Hosts in your account.
    ///
    /// Parameters:
    ///   - filter: The filters.    instance-family - The instance family (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).    state - The state of the reservation (payment-pending | payment-failed | active | retired).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - hostReservationIdSet: The host reservation IDs.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeHostReservations(
        filter: [Filter]? = nil,
        hostReservationIdSet: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeHostReservationsResult {
        let input = DescribeHostReservationsRequest(
            filter: filter, 
            hostReservationIdSet: hostReservationIdSet, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeHostReservations(input, logger: logger)
    }

    /// Describes the specified Dedicated Hosts or all your Dedicated Hosts. The results describe only the Dedicated Hosts in the Region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state released.
    @Sendable
    @inlinable
    public func describeHosts(_ input: DescribeHostsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeHostsResult {
        try await self.client.execute(
            operation: "DescribeHosts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Dedicated Hosts or all your Dedicated Hosts. The results describe only the Dedicated Hosts in the Region you're currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state released.
    ///
    /// Parameters:
    ///   - filter: The filters.    auto-placement - Whether auto-placement is enabled or disabled (on | off).    availability-zone - The Availability Zone of the host.    client-token - The idempotency token that you provided when you allocated the host.    host-reservation-id - The ID of the reservation assigned to this host.    instance-type - The instance type size that the Dedicated Host is configured to support.    state - The allocation state of the Dedicated Host (available | under-assessment | permanent-failure | released | released-permanent-failure).    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - hostIds: The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. You cannot specify this parameter and the host IDs parameter in the same request.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeHosts(
        filter: [Filter]? = nil,
        hostIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeHostsResult {
        let input = DescribeHostsRequest(
            filter: filter, 
            hostIds: hostIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeHosts(input, logger: logger)
    }

    /// Describes your IAM instance profile associations.
    @Sendable
    @inlinable
    public func describeIamInstanceProfileAssociations(_ input: DescribeIamInstanceProfileAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIamInstanceProfileAssociationsResult {
        try await self.client.execute(
            operation: "DescribeIamInstanceProfileAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your IAM instance profile associations.
    ///
    /// Parameters:
    ///   - associationIds: The IAM instance profile associations.
    ///   - filters: The filters.    instance-id - The ID of the instance.    state - The state of the association (associating | associated | disassociating).
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIamInstanceProfileAssociations(
        associationIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIamInstanceProfileAssociationsResult {
        let input = DescribeIamInstanceProfileAssociationsRequest(
            associationIds: associationIds, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeIamInstanceProfileAssociations(input, logger: logger)
    }

    /// Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  These settings apply to the IAM user who makes the request; they do not apply to the entire Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the ModifyIdFormat command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
    @Sendable
    @inlinable
    public func describeIdFormat(_ input: DescribeIdFormatRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIdFormatResult {
        try await self.client.execute(
            operation: "DescribeIdFormat", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  These settings apply to the IAM user who makes the request; they do not apply to the entire Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the ModifyIdFormat command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
    ///
    /// Parameters:
    ///   - resource: The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIdFormat(
        resource: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIdFormatResult {
        let input = DescribeIdFormatRequest(
            resource: resource
        )
        return try await self.describeIdFormat(input, logger: logger)
    }

    /// Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide.  The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.
    @Sendable
    @inlinable
    public func describeIdentityIdFormat(_ input: DescribeIdentityIdFormatRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIdentityIdFormatResult {
        try await self.client.execute(
            operation: "DescribeIdentityIdFormat", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified; it does not return information about other resource types. For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide.  The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.
    ///
    /// Parameters:
    ///   - principalArn: The ARN of the principal, which can be an IAM role, IAM user, or the root user.
    ///   - resource: The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIdentityIdFormat(
        principalArn: String? = nil,
        resource: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIdentityIdFormatResult {
        let input = DescribeIdentityIdFormatRequest(
            principalArn: principalArn, 
            resource: resource
        )
        return try await self.describeIdentityIdFormat(input, logger: logger)
    }

    /// Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeImageAttribute(_ input: DescribeImageAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImageAttribute {
        try await self.client.execute(
            operation: "DescribeImageAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - attribute: The AMI attribute.  Note: The blockDeviceMapping attribute is deprecated. Using this attribute returns the Client.AuthFailure error. To get information about the block device mappings for an AMI, use the DescribeImages action.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeImageAttribute(
        attribute: ImageAttributeName? = nil,
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImageAttribute {
        let input = DescribeImageAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.describeImageAttribute(input, logger: logger)
    }

    /// Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you. The images available to you include public images, private images that you own, and private images owned by other Amazon Web Services accounts for which you have explicit launch permissions. Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image will eventually return an error indicating that the AMI ID cannot be found. When Allowed AMIs is set to enabled, only allowed images are returned in the results, with the imageAllowed field set to true for each image. In audit-mode, the imageAllowed field is set to true for images that meet the account's Allowed AMIs criteria, and false for images that don't meet the criteria. For more information, see EnableAllowedImagesSettings.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeImages(_ input: DescribeImagesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImagesResult {
        try await self.client.execute(
            operation: "DescribeImages", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you. The images available to you include public images, private images that you own, and private images owned by other Amazon Web Services accounts for which you have explicit launch permissions. Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image will eventually return an error indicating that the AMI ID cannot be found. When Allowed AMIs is set to enabled, only allowed images are returned in the results, with the imageAllowed field set to true for each image. In audit-mode, the imageAllowed field is set to true for images that meet the account's Allowed AMIs criteria, and false for images that don't meet the criteria. For more information, see EnableAllowedImagesSettings.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - executableUsers: Scopes the images by users with explicit launch permissions. Specify an Amazon Web Services account ID, self (the sender of the request), or all (public AMIs).   If you specify an Amazon Web Services account ID that is not your own, only AMIs shared with that specific Amazon Web Services account ID are returned. However, AMIs that are shared with the account’s organization or organizational unit (OU) are not returned.   If you specify self or your own Amazon Web Services account ID, AMIs shared with your account are returned. In addition, AMIs that are shared with the organization or OU of which you are member are also returned.    If you specify all, all public AMIs are returned.
    ///   - filters: The filters.    architecture - The image architecture (i386 | x86_64 | arm64 | x86_64_mac | arm64_mac).    block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the Amazon EBS volume.    block-device-mapping.volume-size - The volume size of the Amazon EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the Amazon EBS volume (io1 | io2 | gp2 | gp3 | sc1 | st1 | standard).    block-device-mapping.encrypted - A Boolean that indicates whether the Amazon EBS volume is encrypted.    creation-date - The time when the image was created, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-allowed - A Boolean that indicates whether the image meets the criteria specified for Allowed AMIs.    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - The owner alias (amazon | aws-backup-vault | aws-marketplace). The valid aliases are defined in an Amazon-maintained list. This is not the Amazon Web Services account alias that can be set using the IAM console. We recommend that you use the Owner request parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that you use the Owner request parameter instead of this filter.    platform - The platform. The only supported value is windows.    product-code - The product code.    product-code.type - The type of the product code (marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-image-id - The ID of the source AMI from which the AMI was created.    source-image-region - The Region of the source AMI.    source-instance-id - The ID of the instance that the AMI was created from if the AMI was created using CreateImage. This filter is applicable only if the AMI was created using CreateImage.    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    sriov-net-support - A value of simple indicates that enhanced networking with the Intel 82599 VF interface is enabled.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    virtualization-type - The virtualization type (paravirtual | hvm).
    ///   - imageIds: The image IDs. Default: Describes all images available to you.
    ///   - includeDeprecated: Specifies whether to include deprecated AMIs. Default: No deprecated AMIs are included in the response.  If you are the AMI owner, all deprecated AMIs appear in the response regardless of what you specify for this parameter.
    ///   - includeDisabled: Specifies whether to include disabled AMIs. Default: No disabled AMIs are included in the response.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - owners: Scopes the results to images with the specified owners. You can specify a combination of Amazon Web Services account IDs, self, amazon, aws-backup-vault, and aws-marketplace. If you omit this parameter, the results include all images for which you have launch permissions, regardless of ownership.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeImages(
        dryRun: Bool? = nil,
        executableUsers: [String]? = nil,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        includeDeprecated: Bool? = nil,
        includeDisabled: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        owners: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeImagesResult {
        let input = DescribeImagesRequest(
            dryRun: dryRun, 
            executableUsers: executableUsers, 
            filters: filters, 
            imageIds: imageIds, 
            includeDeprecated: includeDeprecated, 
            includeDisabled: includeDisabled, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            owners: owners
        )
        return try await self.describeImages(input, logger: logger)
    }

    /// Displays details about an import virtual machine or import snapshot tasks that are already created.
    @Sendable
    @inlinable
    public func describeImportImageTasks(_ input: DescribeImportImageTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImportImageTasksResult {
        try await self.client.execute(
            operation: "DescribeImportImageTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Displays details about an import virtual machine or import snapshot tasks that are already created.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
    ///   - importTaskIds: The IDs of the import image tasks.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - nextToken: A token that indicates the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeImportImageTasks(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        importTaskIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeImportImageTasksResult {
        let input = DescribeImportImageTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            importTaskIds: importTaskIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeImportImageTasks(input, logger: logger)
    }

    /// Describes your import snapshot tasks.
    @Sendable
    @inlinable
    public func describeImportSnapshotTasks(_ input: DescribeImportSnapshotTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeImportSnapshotTasksResult {
        try await self.client.execute(
            operation: "DescribeImportSnapshotTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your import snapshot tasks.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.
    ///   - importTaskIds: A list of import snapshot task IDs.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
    ///   - nextToken: A token that indicates the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeImportSnapshotTasks(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        importTaskIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeImportSnapshotTasksResult {
        let input = DescribeImportSnapshotTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            importTaskIds: importTaskIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeImportSnapshotTasks(input, logger: logger)
    }

    /// Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: instanceType | kernel | ramdisk | userData | disableApiTermination | instanceInitiatedShutdownBehavior | rootDeviceName | blockDeviceMapping | productCodes | sourceDestCheck | groupSet | ebsOptimized | sriovNetSupport
    @Sendable
    @inlinable
    public func describeInstanceAttribute(_ input: DescribeInstanceAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> InstanceAttribute {
        try await self.client.execute(
            operation: "DescribeInstanceAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: instanceType | kernel | ramdisk | userData | disableApiTermination | instanceInitiatedShutdownBehavior | rootDeviceName | blockDeviceMapping | productCodes | sourceDestCheck | groupSet | ebsOptimized | sriovNetSupport
    ///
    /// Parameters:
    ///   - attribute: The instance attribute. Note: The enaSupport attribute is not supported at this time.
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceAttribute(
        attribute: InstanceAttributeName? = nil,
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> InstanceAttribute {
        let input = DescribeInstanceAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            instanceId: instanceId
        )
        return try await self.describeInstanceAttribute(input, logger: logger)
    }

    /// Describes the specified EC2 Instance Connect Endpoints or all EC2 Instance Connect Endpoints.
    @Sendable
    @inlinable
    public func describeInstanceConnectEndpoints(_ input: DescribeInstanceConnectEndpointsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceConnectEndpointsResult {
        try await self.client.execute(
            operation: "DescribeInstanceConnectEndpoints", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified EC2 Instance Connect Endpoints or all EC2 Instance Connect Endpoints.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    instance-connect-endpoint-id - The ID of the EC2 Instance Connect Endpoint.    state - The state of the EC2 Instance Connect Endpoint (create-in-progress | create-complete | create-failed |  delete-in-progress | delete-complete | delete-failed).    subnet-id - The ID of the subnet in which the EC2 Instance Connect Endpoint was created.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    tag-value - The value of a tag assigned to the resource. Use this filter to find all resources  that have a tag with a specific value, regardless of tag key.    vpc-id - The ID of the VPC in which the EC2 Instance Connect Endpoint was created.
    ///   - instanceConnectEndpointIds: One or more EC2 Instance Connect Endpoint IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceConnectEndpoints(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceConnectEndpointIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstanceConnectEndpointsResult {
        let input = DescribeInstanceConnectEndpointsRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceConnectEndpointIds: instanceConnectEndpointIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInstanceConnectEndpoints(input, logger: logger)
    }

    /// Describes the credit option for CPU usage of the specified burstable performance instances. The credit options are standard and unlimited. If you do not specify an instance ID, Amazon EC2 returns burstable performance instances with the unlimited credit option, as well as instances that were previously configured as T2, T3, and T3a with the unlimited credit option. For example, if you resize a T2 instance, while it is configured as unlimited, to an M4 instance, Amazon EC2 returns the M4 instance. If you specify one or more instance IDs, Amazon EC2 returns the credit option (standard or unlimited) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a burstable performance instance, an error is returned. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally. For more information, see Burstable performance instances in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeInstanceCreditSpecifications(_ input: DescribeInstanceCreditSpecificationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceCreditSpecificationsResult {
        try await self.client.execute(
            operation: "DescribeInstanceCreditSpecifications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the credit option for CPU usage of the specified burstable performance instances. The credit options are standard and unlimited. If you do not specify an instance ID, Amazon EC2 returns burstable performance instances with the unlimited credit option, as well as instances that were previously configured as T2, T3, and T3a with the unlimited credit option. For example, if you resize a T2 instance, while it is configured as unlimited, to an M4 instance, Amazon EC2 returns the M4 instance. If you specify one or more instance IDs, Amazon EC2 returns the credit option (standard or unlimited) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a burstable performance instance, an error is returned. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally. For more information, see Burstable performance instances in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    instance-id - The ID of the instance.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances. Constraints: Maximum 1000 explicitly specified instance IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceCreditSpecifications(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstanceCreditSpecificationsResult {
        let input = DescribeInstanceCreditSpecificationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInstanceCreditSpecifications(input, logger: logger)
    }

    /// Describes the tag keys that are registered to appear in scheduled event notifications for  	resources in the current Region.
    @Sendable
    @inlinable
    public func describeInstanceEventNotificationAttributes(_ input: DescribeInstanceEventNotificationAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceEventNotificationAttributesResult {
        try await self.client.execute(
            operation: "DescribeInstanceEventNotificationAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the tag keys that are registered to appear in scheduled event notifications for  	resources in the current Region.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceEventNotificationAttributes(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstanceEventNotificationAttributesResult {
        let input = DescribeInstanceEventNotificationAttributesRequest(
            dryRun: dryRun
        )
        return try await self.describeInstanceEventNotificationAttributes(input, logger: logger)
    }

    /// Describes the specified event windows or all event windows. If you specify event window IDs, the output includes information for only the specified event windows. If you specify filters, the output includes information for only those event windows that meet the filter criteria. If you do not specify event windows IDs or filters, the output includes information for all event windows, which can affect performance. We recommend that you use pagination to ensure that the operation returns quickly and successfully.  For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeInstanceEventWindows(_ input: DescribeInstanceEventWindowsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceEventWindowsResult {
        try await self.client.execute(
            operation: "DescribeInstanceEventWindows", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified event windows or all event windows. If you specify event window IDs, the output includes information for only the specified event windows. If you specify filters, the output includes information for only those event windows that meet the filter criteria. If you do not specify event windows IDs or filters, the output includes information for all event windows, which can affect performance. We recommend that you use pagination to ensure that the operation returns quickly and successfully.  For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    dedicated-host-id - The event windows associated with the specified Dedicated Host ID.    event-window-name - The event windows associated with the specified names.     instance-id - The event windows associated with the specified instance ID.    instance-tag - The event windows associated with the specified tag and value.    instance-tag-key - The event windows associated with the specified tag key, regardless of the value.    instance-tag-value - The event windows associated with the specified tag value, regardless of the key.    tag: - The key/value combination of a tag assigned to the event window. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value CMX, specify tag:Owner for the filter name and CMX for the filter value.     tag-key - The key of a tag assigned to the event window. Use this filter to find all event windows that have a tag with a specific key, regardless of the tag value.     tag-value - The value of a tag assigned to the event window. Use this filter to find all event windows that have a tag with a specific value, regardless of the tag key.
    ///   - instanceEventWindowIds: The IDs of the event windows.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 20 and 500. You cannot specify this parameter and the event window IDs parameter in the same call.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceEventWindows(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceEventWindowIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstanceEventWindowsResult {
        let input = DescribeInstanceEventWindowsRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceEventWindowIds: instanceEventWindowIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInstanceEventWindows(input, logger: logger)
    }

    /// Describes the AMI that was used to launch an instance, even if the AMI is deprecated, deregistered, made private (no longer public or shared with your account), or not allowed. If you specify instance IDs, the output includes information for only the specified instances. If you specify filters, the output includes information for only those instances that meet the filter criteria. If you do not specify instance IDs or filters, the output includes information for all instances, which can affect performance. If you specify an instance ID that is not valid, an instance that doesn't exist, or an instance that you do not own, an error (InvalidInstanceID.NotFound) is returned. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. In the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected Availability Zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs that are in an unaffected Availability Zone, the call works normally.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeInstanceImageMetadata(_ input: DescribeInstanceImageMetadataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceImageMetadataResult {
        try await self.client.execute(
            operation: "DescribeInstanceImageMetadata", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the AMI that was used to launch an instance, even if the AMI is deprecated, deregistered, made private (no longer public or shared with your account), or not allowed. If you specify instance IDs, the output includes information for only the specified instances. If you specify filters, the output includes information for only those instances that meet the filter criteria. If you do not specify instance IDs or filters, the output includes information for all instances, which can affect performance. If you specify an instance ID that is not valid, an instance that doesn't exist, or an instance that you do not own, an error (InvalidInstanceID.NotFound) is returned. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. In the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected Availability Zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs that are in an unaffected Availability Zone, the call works normally.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - filters: The filters.    availability-zone - The name of the Availability Zone (for example, us-west-2a) or Local Zone (for example, us-west-2-lax-1b) of the instance.    instance-id - The ID of the instance.    image-allowed - A Boolean that indicates whether the image meets the criteria specified for Allowed AMIs.    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t3.micro).    launch-time - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2023-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2023-09-29T*, which matches an entire day.    owner-alias - The owner alias (amazon | aws-marketplace | aws-backup-vault). The valid aliases are defined in an Amazon-maintained list. This is not the Amazon Web Services account alias that can be set using the IAM console. We recommend that you use the Owner request parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that you use the Owner request parameter instead of this filter.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    zone-id - The ID of the Availability Zone (for example, usw2-az2) or Local Zone (for example, usw2-lax1-az1) of the instance.
    ///   - instanceIds: The instance IDs. If you don't specify an instance ID or filters, the output includes information for all instances.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceImageMetadata(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstanceImageMetadataResult {
        let input = DescribeInstanceImageMetadataRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInstanceImageMetadata(input, logger: logger)
    }

    /// Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances. Instance status includes the following components:    Status checks - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see Status checks for your instances and Troubleshoot instances with failed status checks in the Amazon EC2 User Guide.    Scheduled events - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see Scheduled events for your instances in the Amazon EC2 User Guide.    Instance state - You can manage your instances from the moment you launch them through their termination. For more information, see Instance lifecycle in the Amazon EC2 User Guide.    The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeInstanceStatus(_ input: DescribeInstanceStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceStatusResult {
        try await self.client.execute(
            operation: "DescribeInstanceStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances. Instance status includes the following components:    Status checks - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see Status checks for your instances and Troubleshoot instances with failed status checks in the Amazon EC2 User Guide.    Scheduled events - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see Scheduled events for your instances in the Amazon EC2 User Guide.    Instance state - You can manage your instances from the moment you launch them through their termination. For more information, see Instance lifecycle in the Amazon EC2 User Guide.    The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.instance-event-id - The ID of the event whose date and time you are modifying.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before-deadline - The deadline for starting the event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    attached-ebs-status.status - The status of the attached EBS volume  for the instance (ok | impaired | initializing |  insufficient-data | not-applicable).
    ///   - includeAllInstances: When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false
    ///   - instanceIds: The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceStatus(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        includeAllInstances: Bool? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstanceStatusResult {
        let input = DescribeInstanceStatusRequest(
            dryRun: dryRun, 
            filters: filters, 
            includeAllInstances: includeAllInstances, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInstanceStatus(input, logger: logger)
    }

    /// Describes a tree-based hierarchy that represents the physical host placement of your EC2 instances within an Availability Zone or Local Zone. You can use this information to determine the relative proximity of your EC2 instances within the Amazon Web Services network to support your tightly coupled workloads.  Limitations    Supported zones   Availability Zone   Local Zone     Supported instance types    hpc6a.48xlarge | hpc6id.32xlarge | hpc7a.12xlarge | hpc7a.24xlarge | hpc7a.48xlarge | hpc7a.96xlarge | hpc7g.4xlarge | hpc7g.8xlarge | hpc7g.16xlarge     p3dn.24xlarge | p4d.24xlarge | p4de.24xlarge | p5.48xlarge | p5e.48xlarge     trn1.2xlarge | trn1.32xlarge | trn1n.32xlarge      For more information, see Amazon EC2 instance topology in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeInstanceTopology(_ input: DescribeInstanceTopologyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceTopologyResult {
        try await self.client.execute(
            operation: "DescribeInstanceTopology", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes a tree-based hierarchy that represents the physical host placement of your EC2 instances within an Availability Zone or Local Zone. You can use this information to determine the relative proximity of your EC2 instances within the Amazon Web Services network to support your tightly coupled workloads.  Limitations    Supported zones   Availability Zone   Local Zone     Supported instance types    hpc6a.48xlarge | hpc6id.32xlarge | hpc7a.12xlarge | hpc7a.24xlarge | hpc7a.48xlarge | hpc7a.96xlarge | hpc7g.4xlarge | hpc7g.8xlarge | hpc7g.16xlarge     p3dn.24xlarge | p4d.24xlarge | p4de.24xlarge | p5.48xlarge | p5e.48xlarge     trn1.2xlarge | trn1.32xlarge | trn1n.32xlarge      For more information, see Amazon EC2 instance topology in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The name of the Availability Zone (for example, us-west-2a) or Local Zone (for example, us-west-2-lax-1b) that the instance is in.    instance-type - The instance type (for example, p4d.24xlarge) or instance family (for example, p4d*). You can use the * wildcard to match zero or more characters, or the ? wildcard to match zero or one character.    zone-id - The ID of the Availability Zone (for example, usw2-az2) or Local Zone (for example, usw2-lax1-az1) that the instance is in.
    ///   - groupNames: The name of the placement group that each instance is in. Constraints: Maximum 100 explicitly specified placement group names.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceTopology(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        groupNames: [String]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstanceTopologyResult {
        let input = DescribeInstanceTopologyRequest(
            dryRun: dryRun, 
            filters: filters, 
            groupNames: groupNames, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInstanceTopology(input, logger: logger)
    }

    /// Lists the instance types that are offered for the specified location. If no location is specified, the default is to list the instance types that are offered in the current Region.
    @Sendable
    @inlinable
    public func describeInstanceTypeOfferings(_ input: DescribeInstanceTypeOfferingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceTypeOfferingsResult {
        try await self.client.execute(
            operation: "DescribeInstanceTypeOfferings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the instance types that are offered for the specified location. If no location is specified, the default is to list the instance types that are offered in the current Region.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    instance-type - The instance type. For a list of possible values, see Instance.    location - The location. For a list of possible identifiers, see Regions and Zones.
    ///   - locationType: The location type.    availability-zone - The Availability Zone. When you specify a location filter, it must be an Availability Zone for the current Region.    availability-zone-id - The AZ ID. When you specify a location filter, it must be an AZ ID for the current Region.    outpost - The Outpost ARN. When you specify a location filter, it must be an Outpost ARN for the current Region.    region - The current Region. If you specify a location filter, it must match the current Region.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceTypeOfferings(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        locationType: LocationType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstanceTypeOfferingsResult {
        let input = DescribeInstanceTypeOfferingsRequest(
            dryRun: dryRun, 
            filters: filters, 
            locationType: locationType, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInstanceTypeOfferings(input, logger: logger)
    }

    /// Describes the specified instance types. By default, all instance types for the current Region are described. Alternatively, you can filter the results.
    @Sendable
    @inlinable
    public func describeInstanceTypes(_ input: DescribeInstanceTypesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstanceTypesResult {
        try await self.client.execute(
            operation: "DescribeInstanceTypes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified instance types. By default, all instance types for the current Region are described. Alternatively, you can filter the results.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    auto-recovery-supported - Indicates whether Amazon CloudWatch action based recovery is supported  (true | false).    bare-metal - Indicates whether it is a bare metal instance type (true | false).    burstable-performance-supported - Indicates whether the instance type is a burstable performance T instance type  (true | false).    current-generation - Indicates whether this instance type is the latest generation instance type of an instance family  (true | false).    ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps - The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.baseline-iops - The baseline input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-info.baseline-throughput-in-mbps - The baseline throughput performance for an EBS-optimized instance type, in MB/s.    ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps - The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.maximum-iops - The maximum input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-info.maximum-throughput-in-mbps - The maximum throughput performance for an EBS-optimized instance type, in MB/s.    ebs-info.ebs-optimized-support - Indicates whether the instance type is EBS-optimized (supported | unsupported | default).    ebs-info.encryption-support - Indicates whether EBS encryption is supported (supported | unsupported).    ebs-info.nvme-support - Indicates whether non-volatile memory express (NVMe) is supported for EBS volumes (required | supported | unsupported).    free-tier-eligible - Indicates whether the instance type is eligible to use in the free tier  (true | false).    hibernation-supported - Indicates whether On-Demand hibernation is supported (true | false).    hypervisor - The hypervisor (nitro | xen).    instance-storage-info.disk.count - The number of local disks.    instance-storage-info.disk.size-in-gb - The storage size of each instance storage disk, in GB.    instance-storage-info.disk.type - The storage technology for the local instance storage disks (hdd | ssd).    instance-storage-info.encryption-support - Indicates whether data is encrypted at rest (required | supported | unsupported).    instance-storage-info.nvme-support - Indicates whether non-volatile memory express (NVMe) is supported for instance store (required | supported | unsupported).    instance-storage-info.total-size-in-gb - The total amount of storage available from all local instance storage, in GB.    instance-storage-supported - Indicates whether the instance type has local instance storage  (true | false).    instance-type - The instance type (for example c5.2xlarge or c5*).    memory-info.size-in-mib - The memory size.    network-info.efa-info.maximum-efa-interfaces - The maximum number of Elastic Fabric Adapters (EFAs) per instance.    network-info.efa-supported - Indicates whether the instance type supports Elastic Fabric Adapter (EFA)  (true | false).    network-info.ena-support - Indicates whether Elastic Network Adapter (ENA) is supported or required (required | supported | unsupported).    network-info.encryption-in-transit-supported - Indicates whether the instance type automatically encrypts in-transit traffic between instances  (true | false).    network-info.ipv4-addresses-per-interface - The maximum number of private IPv4 addresses per network interface.    network-info.ipv6-addresses-per-interface - The maximum number of private IPv6 addresses per network interface.    network-info.ipv6-supported - Indicates whether the instance type supports IPv6  (true | false).    network-info.maximum-network-cards - The maximum number of network cards per instance.    network-info.maximum-network-interfaces - The maximum number of network interfaces per instance.    network-info.network-performance - The network performance (for example, "25 Gigabit").    nitro-enclaves-support - Indicates whether Nitro Enclaves is supported (supported | unsupported).    nitro-tpm-support - Indicates whether NitroTPM is supported (supported | unsupported).    nitro-tpm-info.supported-versions - The supported NitroTPM version (2.0).    processor-info.supported-architecture - The CPU architecture (arm64 | i386 | x86_64).    processor-info.sustained-clock-speed-in-ghz - The CPU clock speed, in GHz.    processor-info.supported-features - The supported CPU features (amd-sev-snp).    supported-boot-mode - The boot mode (legacy-bios | uefi).    supported-root-device-type - The root device type (ebs | instance-store).    supported-usage-class - The usage class (on-demand | spot |  capacity-block).    supported-virtualization-type - The virtualization type (hvm | paravirtual).    vcpu-info.default-cores - The default number of cores for the instance type.    vcpu-info.default-threads-per-core - The default number of threads per core for the instance type.    vcpu-info.default-vcpus - The default number of vCPUs for the instance type.    vcpu-info.valid-cores - The number of cores that can be configured for the instance type.    vcpu-info.valid-threads-per-core - The number of threads per core that can be configured for the instance type. For example, "1" or "1,2".
    ///   - instanceTypes: The instance types.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstanceTypes(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceTypes: [InstanceType]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstanceTypesResult {
        let input = DescribeInstanceTypesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceTypes: instanceTypes, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInstanceTypes(input, logger: logger)
    }

    /// Describes the specified instances or all instances. If you specify instance IDs, the output includes information for only the specified instances. If you specify filters, the output includes information for only those instances that meet the filter criteria. If you do not specify instance IDs or filters, the output includes information for all instances, which can affect performance. We recommend that you use pagination to ensure that the operation returns quickly and successfully. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the output. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeInstances(_ input: DescribeInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInstancesResult {
        try await self.client.execute(
            operation: "DescribeInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified instances or all instances. If you specify instance IDs, the output includes information for only the specified instances. If you specify filters, the output includes information for only those instances that meet the filter criteria. If you do not specify instance IDs or filters, the output includes information for all instances, which can affect performance. We recommend that you use pagination to ensure that the operation returns quickly and successfully. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the output. Recently terminated instances might appear in the returned results. This interval is usually less than one hour. If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64 | arm64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2022-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    boot-mode - The boot mode that was specified by the AMI (legacy-bios | uefi | uefi-preferred).    capacity-reservation-id - The ID of the Capacity Reservation into which the instance was launched.    capacity-reservation-specification.capacity-reservation-preference - The instance's Capacity Reservation preference (open | none).    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-id - The ID of the targeted Capacity Reservation.    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-resource-group-arn - The ARN of the targeted Capacity Reservation group.    client-token - The idempotency token you provided when you launched the instance.    current-instance-boot-mode - The boot mode that is used to launch the instance at launch or start (legacy-bios | uefi).    dns-name - The public DNS name of the instance.    ebs-optimized - A Boolean that indicates whether the instance is optimized for Amazon EBS I/O.    ena-support - A Boolean that indicates whether the instance is enabled for enhanced networking with ENA.    enclave-options.enabled - A Boolean that indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.    host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen). The value xen is used for both Xen and Nitro hypervisors.    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    iam-instance-profile.id - The instance profile associated with the instance. Specified as an ID.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance, a Scheduled Instance, or a Capacity Block (spot | scheduled | capacity-block).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    ipv6-address - The IPv6 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    maintenance-options.auto-recovery - The current automatic recovery behavior of the instance (disabled | default).    metadata-options.http-endpoint - The status of access to the HTTP metadata endpoint on your instance (enabled | disabled)    metadata-options.http-protocol-ipv4 - Indicates whether the IPv4 endpoint is enabled (disabled | enabled).    metadata-options.http-protocol-ipv6 - Indicates whether the IPv6 endpoint is enabled (disabled | enabled).    metadata-options.http-put-response-hop-limit - The HTTP metadata request put response hop limit (integer, possible values 1 to 64)    metadata-options.http-tokens - The metadata request authorization state (optional | required)    metadata-options.instance-metadata-tags - The status of access to instance tags from the instance metadata (enabled | disabled)    metadata-options.state - The state of the metadata option changes (pending | applied).    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.association.allocation-id - The allocation ID.    network-interface.addresses.association.association-id - The association ID.    network-interface.addresses.association.carrier-ip - The carrier IP address.    network-interface.addresses.association.customer-owned-ip - The customer-owned IP address.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.addresses.association.public-dns-name - The public DNS name.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.private-dns-name - The private DNS name.    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.association.carrier-ip - The customer-owned IP address.    network-interface.association.customer-owned-ip - The customer-owned IP address.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.public-dns-name - The public DNS name.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.network-card-index - The index of the network card.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.deny-all-igw-traffic - A Boolean that indicates whether  a network interface with an IPv6 address is unreachable from the public internet.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv4-prefixes.ipv4-prefix - The IPv4 prefixes that are assigned to the network interface.    network-interface.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.is-primary-ipv6 - A Boolean that indicates whether this is the primary IPv6 address.    network-interface.ipv6-native - A Boolean that indicates whether this is an IPv6 only network interface.    network-interface.ipv6-prefixes.ipv6-prefix - The IPv6 prefix assigned to the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.operator.managed - A Boolean that indicates whether the instance has a managed network interface.    network-interface.operator.principal - The principal that manages the network interface. Only valid for instances with managed network interfaces, where managed is true.    network-interface.outpost-arn - The ARN of the Outpost.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.private-ip-address - The private IPv4 address.    network-interface.public-dns-name - The public DNS name.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by Amazon Web Services.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.tag-key - The key of a tag assigned to the network interface.    network-interface.tag-value - The value of a tag assigned to the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The Amazon Web Services account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. To list only Windows instances, use windows.    platform-details - The platform (Linux/UNIX | Red Hat BYOL Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA | Red Hat Enterprise Linux with SQL Server Standard and HA | Red Hat Enterprise Linux with SQL Server Enterprise and HA | Red Hat Enterprise Linux with SQL Server Standard | Red Hat Enterprise Linux with SQL Server Web | Red Hat Enterprise Linux with SQL Server Enterprise | SQL Server Enterprise | SQL Server Standard | SQL Server Web | SUSE Linux | Ubuntu Pro | Windows | Windows BYOL | Windows with SQL Server Enterprise | Windows with SQL Server Standard | Windows with SQL Server Web).    private-dns-name - The private IPv4 DNS name of the instance.    private-dns-name-options.enable-resource-name-dns-a-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options.enable-resource-name-dns-aaaa-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    private-dns-name-options.hostname-type - The type of hostname (ip-name | resource-name).    private-ip-address - The private IPv4 address of the instance. This can only be used to filter by the primary IP address of the network interface attached to the instance. To filter by additional IP addresses assigned to the network interface, use the filter network-interface.addresses.private-ip-address.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    tpm-support - Indicates if the instance is configured for NitroTPM support (v2.0).     usage-operation - The usage operation value for the instance (RunInstances | RunInstances:00g0 | RunInstances:0010 | RunInstances:1010 | RunInstances:1014 | RunInstances:1110 | RunInstances:0014 | RunInstances:0210 | RunInstances:0110 | RunInstances:0100 | RunInstances:0004 | RunInstances:0200 | RunInstances:000g | RunInstances:0g00 | RunInstances:0002 | RunInstances:0800 | RunInstances:0102 | RunInstances:0006 | RunInstances:0202).    usage-operation-update-time - The time that the usage operation was last updated, for example, 2022-09-15T17:15:20.000Z.    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInstances(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInstancesResult {
        let input = DescribeInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInstances(input, logger: logger)
    }

    /// Describes your internet gateways. The default is to describe all your internet gateways.  Alternatively, you can specify specific internet gateway IDs or filter the results to include only the internet gateways that match specific criteria.
    @Sendable
    @inlinable
    public func describeInternetGateways(_ input: DescribeInternetGatewaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeInternetGatewaysResult {
        try await self.client.execute(
            operation: "DescribeInternetGateways", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your internet gateways. The default is to describe all your internet gateways.  Alternatively, you can specify specific internet gateway IDs or filter the results to include only the internet gateways that match specific criteria.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    attachment.state - The current state of the attachment between the gateway and the VPC (available). Present only if a VPC is attached.    attachment.vpc-id - The ID of an attached VPC.    internet-gateway-id - The ID of the Internet gateway.    owner-id - The ID of the Amazon Web Services account that owns the internet gateway.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - internetGatewayIds: The IDs of the internet gateways. Default: Describes all your internet gateways.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeInternetGateways(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        internetGatewayIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeInternetGatewaysResult {
        let input = DescribeInternetGatewaysRequest(
            dryRun: dryRun, 
            filters: filters, 
            internetGatewayIds: internetGatewayIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeInternetGateways(input, logger: logger)
    }

    /// Describes your Autonomous System Numbers (ASNs), their provisioning statuses, and the BYOIP CIDRs with which they are associated. For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide.
    @Sendable
    @inlinable
    public func describeIpamByoasn(_ input: DescribeIpamByoasnRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIpamByoasnResult {
        try await self.client.execute(
            operation: "DescribeIpamByoasn", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your Autonomous System Numbers (ASNs), their provisioning statuses, and the BYOIP CIDRs with which they are associated. For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIpamByoasn(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIpamByoasnResult {
        let input = DescribeIpamByoasnRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeIpamByoasn(input, logger: logger)
    }

    /// Describe verification tokens. A verification token is an Amazon Web Services-generated random value that you can use to prove ownership of an external resource. For example, you can use a verification token to validate that you control a public IP address range when you bring an IP address range to Amazon Web Services (BYOIP).
    @Sendable
    @inlinable
    public func describeIpamExternalResourceVerificationTokens(_ input: DescribeIpamExternalResourceVerificationTokensRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIpamExternalResourceVerificationTokensResult {
        try await self.client.execute(
            operation: "DescribeIpamExternalResourceVerificationTokens", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describe verification tokens. A verification token is an Amazon Web Services-generated random value that you can use to prove ownership of an external resource. For example, you can use a verification token to validate that you control a public IP address range when you bring an IP address range to Amazon Web Services (BYOIP).
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output. Available filters:    ipam-arn     ipam-external-resource-verification-token-arn     ipam-external-resource-verification-token-id     ipam-id     ipam-region     state     status     token-name     token-value
    ///   - ipamExternalResourceVerificationTokenIds: Verification token IDs.
    ///   - maxResults: The maximum number of tokens to return in one page of results.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIpamExternalResourceVerificationTokens(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamExternalResourceVerificationTokenIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIpamExternalResourceVerificationTokensResult {
        let input = DescribeIpamExternalResourceVerificationTokensRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamExternalResourceVerificationTokenIds: ipamExternalResourceVerificationTokenIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeIpamExternalResourceVerificationTokens(input, logger: logger)
    }

    /// Get information about your IPAM pools.
    @Sendable
    @inlinable
    public func describeIpamPools(_ input: DescribeIpamPoolsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIpamPoolsResult {
        try await self.client.execute(
            operation: "DescribeIpamPools", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get information about your IPAM pools.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamPoolIds: The IDs of the IPAM pools you would like information on.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIpamPools(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamPoolIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIpamPoolsResult {
        let input = DescribeIpamPoolsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamPoolIds: ipamPoolIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeIpamPools(input, logger: logger)
    }

    /// Describes IPAM resource discoveries. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    @Sendable
    @inlinable
    public func describeIpamResourceDiscoveries(_ input: DescribeIpamResourceDiscoveriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIpamResourceDiscoveriesResult {
        try await self.client.execute(
            operation: "DescribeIpamResourceDiscoveries", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes IPAM resource discoveries. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The resource discovery filters.
    ///   - ipamResourceDiscoveryIds: The IPAM resource discovery IDs.
    ///   - maxResults: The maximum number of resource discoveries to return in one page of results.
    ///   - nextToken: Specify the pagination token from a previous request to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIpamResourceDiscoveries(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamResourceDiscoveryIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIpamResourceDiscoveriesResult {
        let input = DescribeIpamResourceDiscoveriesRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamResourceDiscoveryIds: ipamResourceDiscoveryIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeIpamResourceDiscoveries(input, logger: logger)
    }

    /// Describes resource discovery association with an Amazon VPC IPAM. An associated resource discovery is a resource discovery that has been associated with an IPAM..
    @Sendable
    @inlinable
    public func describeIpamResourceDiscoveryAssociations(_ input: DescribeIpamResourceDiscoveryAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIpamResourceDiscoveryAssociationsResult {
        try await self.client.execute(
            operation: "DescribeIpamResourceDiscoveryAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes resource discovery association with an Amazon VPC IPAM. An associated resource discovery is a resource discovery that has been associated with an IPAM..
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The resource discovery association filters.
    ///   - ipamResourceDiscoveryAssociationIds: The resource discovery association IDs.
    ///   - maxResults: The maximum number of resource discovery associations to return in one page of results.
    ///   - nextToken: Specify the pagination token from a previous request to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIpamResourceDiscoveryAssociations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamResourceDiscoveryAssociationIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIpamResourceDiscoveryAssociationsResult {
        let input = DescribeIpamResourceDiscoveryAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamResourceDiscoveryAssociationIds: ipamResourceDiscoveryAssociationIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeIpamResourceDiscoveryAssociations(input, logger: logger)
    }

    /// Get information about your IPAM scopes.
    @Sendable
    @inlinable
    public func describeIpamScopes(_ input: DescribeIpamScopesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIpamScopesResult {
        try await self.client.execute(
            operation: "DescribeIpamScopes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get information about your IPAM scopes.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamScopeIds: The IDs of the scopes you want information on.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIpamScopes(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamScopeIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIpamScopesResult {
        let input = DescribeIpamScopesRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamScopeIds: ipamScopeIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeIpamScopes(input, logger: logger)
    }

    /// Get information about your IPAM pools. For more information, see What is IPAM? in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func describeIpams(_ input: DescribeIpamsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIpamsResult {
        try await self.client.execute(
            operation: "DescribeIpams", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get information about your IPAM pools. For more information, see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamIds: The IDs of the IPAMs you want information on.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIpams(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIpamsResult {
        let input = DescribeIpamsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamIds: ipamIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeIpams(input, logger: logger)
    }

    /// Describes your IPv6 address pools.
    @Sendable
    @inlinable
    public func describeIpv6Pools(_ input: DescribeIpv6PoolsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeIpv6PoolsResult {
        try await self.client.execute(
            operation: "DescribeIpv6Pools", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your IPv6 address pools.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - poolIds: The IDs of the IPv6 address pools.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeIpv6Pools(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        poolIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeIpv6PoolsResult {
        let input = DescribeIpv6PoolsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            poolIds: poolIds
        )
        return try await self.describeIpv6Pools(input, logger: logger)
    }

    /// Describes the specified key pairs or all of your key pairs. For more information about key pairs, see Amazon EC2 key pairs
    /// 				in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeKeyPairs(_ input: DescribeKeyPairsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeKeyPairsResult {
        try await self.client.execute(
            operation: "DescribeKeyPairs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified key pairs or all of your key pairs. For more information about key pairs, see Amazon EC2 key pairs
    /// 				in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    key-pair-id - The ID of the key pair.    fingerprint - The fingerprint of the key pair.    key-name - The name of the key pair.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - includePublicKey: If true, the public key material is included in the response. Default: false
    ///   - keyNames: The key pair names. Default: Describes all of your key pairs.
    ///   - keyPairIds: The IDs of the key pairs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeKeyPairs(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        includePublicKey: Bool? = nil,
        keyNames: [String]? = nil,
        keyPairIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeKeyPairsResult {
        let input = DescribeKeyPairsRequest(
            dryRun: dryRun, 
            filters: filters, 
            includePublicKey: includePublicKey, 
            keyNames: keyNames, 
            keyPairIds: keyPairIds
        )
        return try await self.describeKeyPairs(input, logger: logger)
    }

    /// Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions. You can also describe all the latest versions or all the default versions of all the launch templates in your account.
    @Sendable
    @inlinable
    public func describeLaunchTemplateVersions(_ input: DescribeLaunchTemplateVersionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLaunchTemplateVersionsResult {
        try await self.client.execute(
            operation: "DescribeLaunchTemplateVersions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions. You can also describe all the latest versions or all the default versions of all the launch templates in your account.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    create-time - The time the launch template version was created.    ebs-optimized - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.    http-endpoint - Indicates whether the HTTP metadata endpoint on your instances is enabled (enabled | disabled).    http-protocol-ipv4 - Indicates whether the IPv4 endpoint for the instance metadata service is enabled (enabled | disabled).    host-resource-group-arn - The ARN of the host resource group in which to launch the instances.    http-tokens - The state of token usage for your instance metadata requests (optional | required).    iam-instance-profile - The ARN of the IAM instance profile.    image-id - The ID of the AMI.    instance-type - The instance type.    is-default-version - A boolean that indicates whether the launch template version is the default version.    kernel-id - The kernel ID.    license-configuration-arn - The ARN of the license configuration.    network-card-index - The index of the network card.    ram-disk-id - The RAM disk ID.
    ///   - launchTemplateId: The ID of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template ID or the launch template name, but not both. To describe all the latest or default launch template versions in your account, you must omit this parameter.
    ///   - launchTemplateName: The name of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template name or the launch template ID, but not both. To describe all the latest or default launch template versions in your account, you must omit this parameter.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
    ///   - maxVersion: The version number up to which to describe launch template versions.
    ///   - minVersion: The version number after which to describe launch template versions.
    ///   - nextToken: The token to request the next page of results.
    ///   - resolveAlias: If true, and if a Systems Manager parameter is specified for ImageId, the AMI ID is displayed in the response for imageId. If false, and if a Systems Manager parameter is specified for ImageId, the parameter is displayed in the response for imageId. For more information, see Use a Systems  Manager parameter instead of an AMI ID in the Amazon EC2 User Guide. Default: false
    ///   - versions: One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account. To describe one or more versions of a specified launch template, valid values are $Latest, $Default, and numbers. To describe all launch templates in your account that are defined as the latest version, the valid value is $Latest. To describe all launch templates in your account that are defined as the default version, the valid value is $Default. You can specify $Latest and $Default in the same request. You cannot specify numbers.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLaunchTemplateVersions(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        launchTemplateId: String? = nil,
        launchTemplateName: String? = nil,
        maxResults: Int? = nil,
        maxVersion: String? = nil,
        minVersion: String? = nil,
        nextToken: String? = nil,
        resolveAlias: Bool? = nil,
        versions: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLaunchTemplateVersionsResult {
        let input = DescribeLaunchTemplateVersionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            launchTemplateId: launchTemplateId, 
            launchTemplateName: launchTemplateName, 
            maxResults: maxResults, 
            maxVersion: maxVersion, 
            minVersion: minVersion, 
            nextToken: nextToken, 
            resolveAlias: resolveAlias, 
            versions: versions
        )
        return try await self.describeLaunchTemplateVersions(input, logger: logger)
    }

    /// Describes one or more launch templates.
    @Sendable
    @inlinable
    public func describeLaunchTemplates(_ input: DescribeLaunchTemplatesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLaunchTemplatesResult {
        try await self.client.execute(
            operation: "DescribeLaunchTemplates", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more launch templates.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    create-time - The time the launch template was created.    launch-template-name - The name of the launch template.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - launchTemplateIds: One or more launch template IDs.
    ///   - launchTemplateNames: One or more launch template names.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLaunchTemplates(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        launchTemplateIds: [String]? = nil,
        launchTemplateNames: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLaunchTemplatesResult {
        let input = DescribeLaunchTemplatesRequest(
            dryRun: dryRun, 
            filters: filters, 
            launchTemplateIds: launchTemplateIds, 
            launchTemplateNames: launchTemplateNames, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeLaunchTemplates(input, logger: logger)
    }

    /// Describes the associations between virtual interface groups and local gateway route tables.
    @Sendable
    @inlinable
    public func describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(_ input: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult {
        try await self.client.execute(
            operation: "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the associations between virtual interface groups and local gateway route tables.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-arn - The Amazon Resource Name (ARN) of the local  gateway route table for the virtual interface group.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-virtual-interface-group-association-id - The ID of the association.    local-gateway-route-table-virtual-interface-group-id - The ID of the virtual interface group.    owner-id - The ID of the Amazon Web Services account that owns the local gateway virtual  interface group association.    state - The state of the association.
    ///   - localGatewayRouteTableVirtualInterfaceGroupAssociationIds: The IDs of the associations.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayRouteTableVirtualInterfaceGroupAssociationIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult {
        let input = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayRouteTableVirtualInterfaceGroupAssociationIds: localGatewayRouteTableVirtualInterfaceGroupAssociationIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(input, logger: logger)
    }

    /// Describes the specified associations between VPCs and local gateway route tables.
    @Sendable
    @inlinable
    public func describeLocalGatewayRouteTableVpcAssociations(_ input: DescribeLocalGatewayRouteTableVpcAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLocalGatewayRouteTableVpcAssociationsResult {
        try await self.client.execute(
            operation: "DescribeLocalGatewayRouteTableVpcAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified associations between VPCs and local gateway route tables.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-arn - The Amazon Resource Name (ARN) of the local  gateway route table for the association.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-vpc-association-id - The ID of the association.    owner-id - The ID of the Amazon Web Services account that owns the local gateway route table for the association.    state - The state of the association.    vpc-id - The ID of the VPC.
    ///   - localGatewayRouteTableVpcAssociationIds: The IDs of the associations.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLocalGatewayRouteTableVpcAssociations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayRouteTableVpcAssociationIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLocalGatewayRouteTableVpcAssociationsResult {
        let input = DescribeLocalGatewayRouteTableVpcAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayRouteTableVpcAssociationIds: localGatewayRouteTableVpcAssociationIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeLocalGatewayRouteTableVpcAssociations(input, logger: logger)
    }

    /// Describes one or more local gateway route tables. By default, all local gateway route tables are described. Alternatively, you can filter the results.
    @Sendable
    @inlinable
    public func describeLocalGatewayRouteTables(_ input: DescribeLocalGatewayRouteTablesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLocalGatewayRouteTablesResult {
        try await self.client.execute(
            operation: "DescribeLocalGatewayRouteTables", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more local gateway route tables. By default, all local gateway route tables are described. Alternatively, you can filter the results.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-arn - The Amazon Resource Name (ARN) of the  local gateway route table.    local-gateway-route-table-id - The ID of a local gateway route table.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the local gateway route table.    state - The state of the local gateway route table.
    ///   - localGatewayRouteTableIds: The IDs of the local gateway route tables.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLocalGatewayRouteTables(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayRouteTableIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLocalGatewayRouteTablesResult {
        let input = DescribeLocalGatewayRouteTablesRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayRouteTableIds: localGatewayRouteTableIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeLocalGatewayRouteTables(input, logger: logger)
    }

    /// Describes the specified local gateway virtual interface groups.
    @Sendable
    @inlinable
    public func describeLocalGatewayVirtualInterfaceGroups(_ input: DescribeLocalGatewayVirtualInterfaceGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLocalGatewayVirtualInterfaceGroupsResult {
        try await self.client.execute(
            operation: "DescribeLocalGatewayVirtualInterfaceGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified local gateway virtual interface groups.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-virtual-interface-group-id - The ID of the virtual interface group.    local-gateway-virtual-interface-id - The ID of the virtual interface.    owner-id - The ID of the Amazon Web Services account that owns the local gateway virtual interface group.
    ///   - localGatewayVirtualInterfaceGroupIds: The IDs of the virtual interface groups.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLocalGatewayVirtualInterfaceGroups(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayVirtualInterfaceGroupIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLocalGatewayVirtualInterfaceGroupsResult {
        let input = DescribeLocalGatewayVirtualInterfaceGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayVirtualInterfaceGroupIds: localGatewayVirtualInterfaceGroupIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeLocalGatewayVirtualInterfaceGroups(input, logger: logger)
    }

    /// Describes the specified local gateway virtual interfaces.
    @Sendable
    @inlinable
    public func describeLocalGatewayVirtualInterfaces(_ input: DescribeLocalGatewayVirtualInterfacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLocalGatewayVirtualInterfacesResult {
        try await self.client.execute(
            operation: "DescribeLocalGatewayVirtualInterfaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified local gateway virtual interfaces.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-address - The local address.    local-bgp-asn - The Border Gateway Protocol (BGP) Autonomous System Number (ASN)  of the local gateway.    local-gateway-id - The ID of the local gateway.    local-gateway-virtual-interface-id - The ID of the virtual interface.    owner-id - The ID of the Amazon Web Services account that owns the local gateway virtual interface.    peer-address - The peer address.    peer-bgp-asn - The peer BGP ASN.    vlan - The ID of the VLAN.
    ///   - localGatewayVirtualInterfaceIds: The IDs of the virtual interfaces.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLocalGatewayVirtualInterfaces(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayVirtualInterfaceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLocalGatewayVirtualInterfacesResult {
        let input = DescribeLocalGatewayVirtualInterfacesRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayVirtualInterfaceIds: localGatewayVirtualInterfaceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeLocalGatewayVirtualInterfaces(input, logger: logger)
    }

    /// Describes one or more local gateways. By default, all local gateways are described.  Alternatively, you can filter the results.
    @Sendable
    @inlinable
    public func describeLocalGateways(_ input: DescribeLocalGatewaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLocalGatewaysResult {
        try await self.client.execute(
            operation: "DescribeLocalGateways", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more local gateways. By default, all local gateways are described.  Alternatively, you can filter the results.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the local gateway.    state - The state of the association.
    ///   - localGatewayIds: The IDs of the local gateways.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLocalGateways(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLocalGatewaysResult {
        let input = DescribeLocalGatewaysRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayIds: localGatewayIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeLocalGateways(input, logger: logger)
    }

    /// Describes the lock status for a snapshot.
    @Sendable
    @inlinable
    public func describeLockedSnapshots(_ input: DescribeLockedSnapshotsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeLockedSnapshotsResult {
        try await self.client.execute(
            operation: "DescribeLockedSnapshots", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the lock status for a snapshot.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    lock-state - The state of the snapshot lock (compliance-cooloff |  governance | compliance | expired).
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - snapshotIds: The IDs of the snapshots for which to view the lock status.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeLockedSnapshots(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        snapshotIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeLockedSnapshotsResult {
        let input = DescribeLockedSnapshotsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            snapshotIds: snapshotIds
        )
        return try await self.describeLockedSnapshots(input, logger: logger)
    }

    /// Describes the specified EC2 Mac Dedicated Host or all of your EC2 Mac Dedicated Hosts.
    @Sendable
    @inlinable
    public func describeMacHosts(_ input: DescribeMacHostsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeMacHostsResult {
        try await self.client.execute(
            operation: "DescribeMacHosts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified EC2 Mac Dedicated Host or all of your EC2 Mac Dedicated Hosts.
    ///
    /// Parameters:
    ///   - filters: The filters.    availability-zone - The Availability Zone of the EC2 Mac Dedicated Host.    instance-type - The instance type size that the EC2 Mac Dedicated Host is configured to support.
    ///   - hostIds:  The IDs of the EC2 Mac Dedicated Hosts.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeMacHosts(
        filters: [Filter]? = nil,
        hostIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeMacHostsResult {
        let input = DescribeMacHostsRequest(
            filters: filters, 
            hostIds: hostIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeMacHosts(input, logger: logger)
    }

    /// Describes your managed prefix lists and any Amazon Web Services-managed prefix lists. To view the entries for your prefix list, use GetManagedPrefixListEntries.
    @Sendable
    @inlinable
    public func describeManagedPrefixLists(_ input: DescribeManagedPrefixListsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeManagedPrefixListsResult {
        try await self.client.execute(
            operation: "DescribeManagedPrefixLists", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your managed prefix lists and any Amazon Web Services-managed prefix lists. To view the entries for your prefix list, use GetManagedPrefixListEntries.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    owner-id - The ID of the prefix list owner.    prefix-list-id - The ID of the prefix list.    prefix-list-name - The name of the prefix list.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - prefixListIds: One or more prefix list IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeManagedPrefixLists(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        prefixListIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeManagedPrefixListsResult {
        let input = DescribeManagedPrefixListsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            prefixListIds: prefixListIds
        )
        return try await self.describeManagedPrefixLists(input, logger: logger)
    }

    ///  This action is deprecated.  Describes your Elastic IP addresses that are being moved from or being restored to the EC2-Classic platform.  This request does not return information about any other Elastic IP addresses in your account.
    @Sendable
    @inlinable
    public func describeMovingAddresses(_ input: DescribeMovingAddressesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeMovingAddressesResult {
        try await self.client.execute(
            operation: "DescribeMovingAddresses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Describes your Elastic IP addresses that are being moved from or being restored to the EC2-Classic platform.  This request does not return information about any other Elastic IP addresses in your account.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    moving-status - The status of the Elastic IP address (MovingToVpc | RestoringToClassic).
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value outside of this range, an error is returned. Default: If no value is provided, the default is 1000.
    ///   - nextToken: The token for the next page of results.
    ///   - publicIps: One or more Elastic IP addresses.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeMovingAddresses(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        publicIps: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeMovingAddressesResult {
        let input = DescribeMovingAddressesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            publicIps: publicIps
        )
        return try await self.describeMovingAddresses(input, logger: logger)
    }

    /// Describes your NAT gateways. The default is to describe all your NAT gateways.  Alternatively, you can specify specific NAT gateway IDs or filter the results to include only the NAT gateways that match specific criteria.
    @Sendable
    @inlinable
    public func describeNatGateways(_ input: DescribeNatGatewaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNatGatewaysResult {
        try await self.client.execute(
            operation: "DescribeNatGateways", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your NAT gateways. The default is to describe all your NAT gateways.  Alternatively, you can specify specific NAT gateway IDs or filter the results to include only the NAT gateways that match specific criteria.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filter: The filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the NAT gateway resides.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - natGatewayIds: The IDs of the NAT gateways.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNatGateways(
        dryRun: Bool? = nil,
        filter: [Filter]? = nil,
        maxResults: Int? = nil,
        natGatewayIds: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNatGatewaysResult {
        let input = DescribeNatGatewaysRequest(
            dryRun: dryRun, 
            filter: filter, 
            maxResults: maxResults, 
            natGatewayIds: natGatewayIds, 
            nextToken: nextToken
        )
        return try await self.describeNatGateways(input, logger: logger)
    }

    /// Describes your network ACLs. The default is to describe all your network ACLs.  Alternatively, you can specify specific network ACL IDs or filter the results to include only the network ACLs that match specific criteria. For more information, see Network ACLs in the
    /// 				Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func describeNetworkAcls(_ input: DescribeNetworkAclsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNetworkAclsResult {
        try await self.client.execute(
            operation: "DescribeNetworkAcls", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your network ACLs. The default is to describe all your network ACLs.  Alternatively, you can specify specific network ACL IDs or filter the results to include only the network ACLs that match specific criteria. For more information, see Network ACLs in the
    /// 				Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    association.association-id - The ID of an association ID for the ACL.    association.network-acl-id - The ID of the network ACL involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    default - Indicates whether the ACL is the default network ACL for the VPC.    entry.cidr - The IPv4 CIDR range specified in the entry.    entry.icmp.code - The ICMP code specified in the entry, if any.    entry.icmp.type - The ICMP type specified in the entry, if any.    entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.    entry.port-range.from - The start of the port range specified in the entry.     entry.port-range.to - The end of the port range specified in the entry.     entry.protocol - The protocol specified in the entry (tcp | udp | icmp or a protocol number).    entry.rule-action - Allows or denies the matching traffic (allow | deny).    entry.egress - A Boolean that indicates the type of rule. Specify true
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - networkAclIds: The IDs of the network ACLs.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNetworkAcls(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkAclIds: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNetworkAclsResult {
        let input = DescribeNetworkAclsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkAclIds: networkAclIds, 
            nextToken: nextToken
        )
        return try await self.describeNetworkAcls(input, logger: logger)
    }

    /// Describes the specified Network Access Scope analyses.
    @Sendable
    @inlinable
    public func describeNetworkInsightsAccessScopeAnalyses(_ input: DescribeNetworkInsightsAccessScopeAnalysesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNetworkInsightsAccessScopeAnalysesResult {
        try await self.client.execute(
            operation: "DescribeNetworkInsightsAccessScopeAnalyses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Network Access Scope analyses.
    ///
    /// Parameters:
    ///   - analysisStartTimeBegin: Filters the results based on the start time. The analysis must have started on or after this time.
    ///   - analysisStartTimeEnd: Filters the results based on the start time. The analysis must have started on or before this time.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: There are no supported filters.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsAccessScopeAnalysisIds: The IDs of the Network Access Scope analyses.
    ///   - networkInsightsAccessScopeId: The ID of the Network Access Scope.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNetworkInsightsAccessScopeAnalyses(
        analysisStartTimeBegin: Date? = nil,
        analysisStartTimeEnd: Date? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInsightsAccessScopeAnalysisIds: [String]? = nil,
        networkInsightsAccessScopeId: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNetworkInsightsAccessScopeAnalysesResult {
        let input = DescribeNetworkInsightsAccessScopeAnalysesRequest(
            analysisStartTimeBegin: analysisStartTimeBegin, 
            analysisStartTimeEnd: analysisStartTimeEnd, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInsightsAccessScopeAnalysisIds: networkInsightsAccessScopeAnalysisIds, 
            networkInsightsAccessScopeId: networkInsightsAccessScopeId, 
            nextToken: nextToken
        )
        return try await self.describeNetworkInsightsAccessScopeAnalyses(input, logger: logger)
    }

    /// Describes the specified Network Access Scopes.
    @Sendable
    @inlinable
    public func describeNetworkInsightsAccessScopes(_ input: DescribeNetworkInsightsAccessScopesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNetworkInsightsAccessScopesResult {
        try await self.client.execute(
            operation: "DescribeNetworkInsightsAccessScopes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Network Access Scopes.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: There are no supported filters.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsAccessScopeIds: The IDs of the Network Access Scopes.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNetworkInsightsAccessScopes(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInsightsAccessScopeIds: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNetworkInsightsAccessScopesResult {
        let input = DescribeNetworkInsightsAccessScopesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInsightsAccessScopeIds: networkInsightsAccessScopeIds, 
            nextToken: nextToken
        )
        return try await self.describeNetworkInsightsAccessScopes(input, logger: logger)
    }

    /// Describes one or more of your network insights analyses.
    @Sendable
    @inlinable
    public func describeNetworkInsightsAnalyses(_ input: DescribeNetworkInsightsAnalysesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNetworkInsightsAnalysesResult {
        try await self.client.execute(
            operation: "DescribeNetworkInsightsAnalyses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your network insights analyses.
    ///
    /// Parameters:
    ///   - analysisEndTime: The time when the network insights analyses ended.
    ///   - analysisStartTime: The time when the network insights analyses started.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. The following are the possible values:   path-found - A Boolean value that indicates whether a feasible path is found.   status - The status of the analysis (running | succeeded | failed).
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsAnalysisIds: The ID of the network insights analyses. You must specify either analysis IDs or a path ID.
    ///   - networkInsightsPathId: The ID of the path. You must specify either a path ID or analysis IDs.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNetworkInsightsAnalyses(
        analysisEndTime: Date? = nil,
        analysisStartTime: Date? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInsightsAnalysisIds: [String]? = nil,
        networkInsightsPathId: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNetworkInsightsAnalysesResult {
        let input = DescribeNetworkInsightsAnalysesRequest(
            analysisEndTime: analysisEndTime, 
            analysisStartTime: analysisStartTime, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInsightsAnalysisIds: networkInsightsAnalysisIds, 
            networkInsightsPathId: networkInsightsPathId, 
            nextToken: nextToken
        )
        return try await self.describeNetworkInsightsAnalyses(input, logger: logger)
    }

    /// Describes one or more of your paths.
    @Sendable
    @inlinable
    public func describeNetworkInsightsPaths(_ input: DescribeNetworkInsightsPathsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNetworkInsightsPathsResult {
        try await self.client.execute(
            operation: "DescribeNetworkInsightsPaths", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your paths.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. The following are the possible values:   destination - The ID of the resource.   filter-at-source.source-address - The source IPv4 address at the source.   filter-at-source.source-port-range - The source port range at the source.   filter-at-source.destination-address - The destination IPv4 address at the source.   filter-at-source.destination-port-range - The destination port range at the source.   filter-at-destination.source-address - The source IPv4 address at the destination.   filter-at-destination.source-port-range - The source port range at the destination.   filter-at-destination.destination-address - The destination IPv4 address at the destination.   filter-at-destination.destination-port-range - The destination port range at the destination.   protocol - The protocol.   source - The ID of the resource.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsPathIds: The IDs of the paths.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNetworkInsightsPaths(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInsightsPathIds: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNetworkInsightsPathsResult {
        let input = DescribeNetworkInsightsPathsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInsightsPathIds: networkInsightsPathIds, 
            nextToken: nextToken
        )
        return try await self.describeNetworkInsightsPaths(input, logger: logger)
    }

    /// Describes a network interface attribute. You can specify only one attribute at a time.
    @Sendable
    @inlinable
    public func describeNetworkInterfaceAttribute(_ input: DescribeNetworkInterfaceAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNetworkInterfaceAttributeResult {
        try await self.client.execute(
            operation: "DescribeNetworkInterfaceAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes a network interface attribute. You can specify only one attribute at a time.
    ///
    /// Parameters:
    ///   - attribute: The attribute of the network interface. This parameter is required.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNetworkInterfaceAttribute(
        attribute: NetworkInterfaceAttribute? = nil,
        dryRun: Bool? = nil,
        networkInterfaceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNetworkInterfaceAttributeResult {
        let input = DescribeNetworkInterfaceAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            networkInterfaceId: networkInterfaceId
        )
        return try await self.describeNetworkInterfaceAttribute(input, logger: logger)
    }

    /// Describes the permissions for your network interfaces.
    @Sendable
    @inlinable
    public func describeNetworkInterfacePermissions(_ input: DescribeNetworkInterfacePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNetworkInterfacePermissionsResult {
        try await self.client.execute(
            operation: "DescribeNetworkInterfacePermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the permissions for your network interfaces.
    ///
    /// Parameters:
    ///   - filters: One or more filters.    network-interface-permission.network-interface-permission-id - The ID of the
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items,
    ///   - networkInterfacePermissionIds: The network interface permission IDs.
    ///   - nextToken: The token returned from a previous paginated request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNetworkInterfacePermissions(
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInterfacePermissionIds: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNetworkInterfacePermissionsResult {
        let input = DescribeNetworkInterfacePermissionsRequest(
            filters: filters, 
            maxResults: maxResults, 
            networkInterfacePermissionIds: networkInterfacePermissionIds, 
            nextToken: nextToken
        )
        return try await self.describeNetworkInterfacePermissions(input, logger: logger)
    }

    /// Describes one or more of your network interfaces. If you have a large number of network interfaces, the operation fails unless  you use pagination or one of the following filters: group-id,  mac-address, private-dns-name, private-ip-address,  private-dns-name, subnet-id, or vpc-id.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.
    @Sendable
    @inlinable
    public func describeNetworkInterfaces(_ input: DescribeNetworkInterfacesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeNetworkInterfacesResult {
        try await self.client.execute(
            operation: "DescribeNetworkInterfaces", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your network interfaces. If you have a large number of network interfaces, the operation fails unless  you use pagination or one of the following filters: group-id,  mac-address, private-dns-name, private-ip-address,  private-dns-name, subnet-id, or vpc-id.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    association.allocation-id - The allocation ID returned when you
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items,
    ///   - networkInterfaceIds: The network interface IDs. Default: Describes all your network interfaces.
    ///   - nextToken: The token returned from a previous paginated request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeNetworkInterfaces(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInterfaceIds: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeNetworkInterfacesResult {
        let input = DescribeNetworkInterfacesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInterfaceIds: networkInterfaceIds, 
            nextToken: nextToken
        )
        return try await self.describeNetworkInterfaces(input, logger: logger)
    }

    /// Describes the specified placement groups or all of your placement groups.  To describe a specific placement group that is shared with your account, you must specify the ID of the placement group using the GroupId parameter. Specifying the name of a shared placement group using the GroupNames parameter will result in an error.  For more information, see Placement groups in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describePlacementGroups(_ input: DescribePlacementGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePlacementGroupsResult {
        try await self.client.execute(
            operation: "DescribePlacementGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified placement groups or all of your placement groups.  To describe a specific placement group that is shared with your account, you must specify the ID of the placement group using the GroupId parameter. Specifying the name of a shared placement group using the GroupNames parameter will result in an error.  For more information, see Placement groups in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    group-name - The name of the placement group.    group-arn - The Amazon Resource Name (ARN) of the placement group.    spread-level - The spread level for the placement group (host | rack).     state - The state of the placement group (pending | available | deleting | deleted).    strategy - The strategy of the placement group (cluster | spread | partition).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.
    ///   - groupIds: The IDs of the placement groups.
    ///   - groupNames: The names of the placement groups. Constraints:   You can specify a name only if the placement group is owned by your account.   If a placement group is shared with your account, specifying the name results in an error. You must use the GroupId parameter instead.
    ///   - logger: Logger use during operation
    @inlinable
    public func describePlacementGroups(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        groupIds: [String]? = nil,
        groupNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribePlacementGroupsResult {
        let input = DescribePlacementGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            groupIds: groupIds, 
            groupNames: groupNames
        )
        return try await self.describePlacementGroups(input, logger: logger)
    }

    /// Describes available Amazon Web Services services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. We recommend that you use DescribeManagedPrefixLists instead.
    @Sendable
    @inlinable
    public func describePrefixLists(_ input: DescribePrefixListsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePrefixListsResult {
        try await self.client.execute(
            operation: "DescribePrefixLists", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes available Amazon Web Services services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. We recommend that you use DescribeManagedPrefixLists instead.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    prefix-list-id: The ID of a prefix list.    prefix-list-name: The name of a prefix list.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - prefixListIds: One or more prefix list IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describePrefixLists(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        prefixListIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribePrefixListsResult {
        let input = DescribePrefixListsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            prefixListIds: prefixListIds
        )
        return try await self.describePrefixLists(input, logger: logger)
    }

    /// Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference.  By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.
    @Sendable
    @inlinable
    public func describePrincipalIdFormat(_ input: DescribePrincipalIdFormatRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePrincipalIdFormatResult {
        try await self.client.execute(
            operation: "DescribePrincipalIdFormat", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference.  By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings. The following resource types support longer IDs: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
    ///   - nextToken: The token to request the next page of results.
    ///   - resources: The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
    ///   - logger: Logger use during operation
    @inlinable
    public func describePrincipalIdFormat(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resources: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribePrincipalIdFormatResult {
        let input = DescribePrincipalIdFormatRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            resources: resources
        )
        return try await self.describePrincipalIdFormat(input, logger: logger)
    }

    /// Describes the specified IPv4 address pools.
    @Sendable
    @inlinable
    public func describePublicIpv4Pools(_ input: DescribePublicIpv4PoolsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribePublicIpv4PoolsResult {
        try await self.client.execute(
            operation: "DescribePublicIpv4Pools", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified IPv4 address pools.
    ///
    /// Parameters:
    ///   - filters: One or more filters.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - poolIds: The IDs of the address pools.
    ///   - logger: Logger use during operation
    @inlinable
    public func describePublicIpv4Pools(
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        poolIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribePublicIpv4PoolsResult {
        let input = DescribePublicIpv4PoolsRequest(
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            poolIds: poolIds
        )
        return try await self.describePublicIpv4Pools(input, logger: logger)
    }

    /// Describes the Regions that are enabled for your account, or all Regions. For a list of the Regions supported by Amazon EC2, see Amazon EC2 service endpoints. For information about enabling and disabling Regions for your account, see Specify which Amazon Web Services Regions  your account can use in the Amazon Web Services Account Management Reference Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeRegions(_ input: DescribeRegionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRegionsResult {
        try await self.client.execute(
            operation: "DescribeRegions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the Regions that are enabled for your account, or all Regions. For a list of the Regions supported by Amazon EC2, see Amazon EC2 service endpoints. For information about enabling and disabling Regions for your account, see Specify which Amazon Web Services Regions  your account can use in the Amazon Web Services Account Management Reference Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - allRegions: Indicates whether to display all Regions, including Regions that are disabled for your account.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    endpoint - The endpoint of the Region (for example, ec2.us-east-1.amazonaws.com).    opt-in-status - The opt-in status of the Region (opt-in-not-required | opted-in |  not-opted-in).    region-name - The name of the Region (for example, us-east-1).
    ///   - regionNames: The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRegions(
        allRegions: Bool? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        regionNames: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRegionsResult {
        let input = DescribeRegionsRequest(
            allRegions: allRegions, 
            dryRun: dryRun, 
            filters: filters, 
            regionNames: regionNames
        )
        return try await self.describeRegions(input, logger: logger)
    }

    /// Describes a root volume replacement task. For more information, see  Replace a root volume in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeReplaceRootVolumeTasks(_ input: DescribeReplaceRootVolumeTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReplaceRootVolumeTasksResult {
        try await self.client.execute(
            operation: "DescribeReplaceRootVolumeTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes a root volume replacement task. For more information, see  Replace a root volume in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Filter to use:    instance-id - The ID of the instance for which the root volume replacement task was created.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - replaceRootVolumeTaskIds: The ID of the root volume replacement task to view.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReplaceRootVolumeTasks(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        replaceRootVolumeTaskIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeReplaceRootVolumeTasksResult {
        let input = DescribeReplaceRootVolumeTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            replaceRootVolumeTaskIds: replaceRootVolumeTaskIds
        )
        return try await self.describeReplaceRootVolumeTasks(input, logger: logger)
    }

    /// Describes one or more of the Reserved Instances that you purchased. For more information about Reserved Instances, see Reserved
    /// 				Instances in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeReservedInstances(_ input: DescribeReservedInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReservedInstancesResult {
        try await self.client.execute(
            operation: "DescribeReservedInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of the Reserved Instances that you purchased. For more information about Reserved Instances, see Reserved
    /// 				Instances in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (one year or three years), in seconds (31536000 | 94608000).    end - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    scope - The scope of the Reserved Instance (Region or Availability Zone).    product-description - The Reserved Instance product platform description (Linux/UNIX | Linux with SQL Server Standard | Linux with SQL Server Web | Linux with SQL Server Enterprise | SUSE Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA |  Windows | Windows with SQL Server Standard | Windows with SQL Server Web | Windows with SQL Server Enterprise).    reserved-instances-id - The ID of the Reserved Instance.    start - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).    state - The state of the Reserved Instance (payment-pending | active | payment-failed | retired).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).
    ///   - offeringClass: Describes whether the Reserved Instance is Standard or Convertible.
    ///   - offeringType: The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API
    ///   - reservedInstancesIds: One or more Reserved Instance IDs. Default: Describes all your Reserved Instances, or only those otherwise specified.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReservedInstances(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        offeringClass: OfferingClassType? = nil,
        offeringType: OfferingTypeValues? = nil,
        reservedInstancesIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeReservedInstancesResult {
        let input = DescribeReservedInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            offeringClass: offeringClass, 
            offeringType: offeringType, 
            reservedInstancesIds: reservedInstancesIds
        )
        return try await self.describeReservedInstances(input, logger: logger)
    }

    /// Describes your account's Reserved Instance listings in the Reserved Instance Marketplace. The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances. As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase. As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase. For more information, see Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeReservedInstancesListings(_ input: DescribeReservedInstancesListingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReservedInstancesListingsResult {
        try await self.client.execute(
            operation: "DescribeReservedInstancesListings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your account's Reserved Instance listings in the Reserved Instance Marketplace. The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances. As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase. As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you're searching for with what's available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase. For more information, see Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - filters: One or more filters.    reserved-instances-id - The ID of the Reserved Instances.    reserved-instances-listing-id - The ID of the Reserved Instances listing.    status - The status of the Reserved Instance listing (pending | active | cancelled | closed).    status-message - The reason for the status.
    ///   - reservedInstancesId: One or more Reserved Instance IDs.
    ///   - reservedInstancesListingId: One or more Reserved Instance listing IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReservedInstancesListings(
        filters: [Filter]? = nil,
        reservedInstancesId: String? = nil,
        reservedInstancesListingId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeReservedInstancesListingsResult {
        let input = DescribeReservedInstancesListingsRequest(
            filters: filters, 
            reservedInstancesId: reservedInstancesId, 
            reservedInstancesListingId: reservedInstancesListingId
        )
        return try await self.describeReservedInstancesListings(input, logger: logger)
    }

    /// Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned. For more information, see Modify Reserved Instances in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeReservedInstancesModifications(_ input: DescribeReservedInstancesModificationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReservedInstancesModificationsResult {
        try await self.client.execute(
            operation: "DescribeReservedInstancesModifications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned. For more information, see Modify Reserved Instances in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - filters: One or more filters.    client-token - The idempotency token for the modification request.    create-date - The time when the modification request was created.    effective-date - The time when the modification becomes effective.    modification-result.reserved-instances-id - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is fulfilled.    modification-result.target-configuration.availability-zone - The Availability Zone for the new Reserved Instances.    modification-result.target-configuration.instance-count  - The number of new Reserved Instances.    modification-result.target-configuration.instance-type - The instance type of the new Reserved Instances.    reserved-instances-id - The ID of the Reserved Instances modified.    reserved-instances-modification-id - The ID of the modification request.    status - The status of the Reserved Instances modification request (processing | fulfilled | failed).    status-message - The reason for the status.    update-date - The time when the modification request was last updated.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - reservedInstancesModificationIds: IDs for the submitted modification request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReservedInstancesModifications(
        filters: [Filter]? = nil,
        nextToken: String? = nil,
        reservedInstancesModificationIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeReservedInstancesModificationsResult {
        let input = DescribeReservedInstancesModificationsRequest(
            filters: filters, 
            nextToken: nextToken, 
            reservedInstancesModificationIds: reservedInstancesModificationIds
        )
        return try await self.describeReservedInstancesModifications(input, logger: logger)
    }

    /// Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used. If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances. For more information, see Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeReservedInstancesOfferings(_ input: DescribeReservedInstancesOfferingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeReservedInstancesOfferingsResult {
        try await self.client.execute(
            operation: "DescribeReservedInstancesOfferings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used. If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances. For more information, see Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - availabilityZone: The Availability Zone in which the Reserved Instance can be used.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (for example, one year or three years), in seconds (31536000 | 94608000).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    marketplace - Set to true to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both Amazon Web Services and the Reserved Instance Marketplace are listed.    product-description - The Reserved Instance product platform description (Linux/UNIX | Linux with SQL Server Standard | Linux with SQL Server Web | Linux with SQL Server Enterprise | SUSE Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA |  Windows | Windows with SQL Server Standard | Windows with SQL Server Web | Windows with SQL Server Enterprise).    reserved-instances-offering-id - The Reserved Instances offering ID.    scope - The scope of the Reserved Instance (Availability Zone or Region).    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).
    ///   - includeMarketplace: Include Reserved Instance Marketplace offerings in the response.
    ///   - instanceTenancy: The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of dedicated is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).  Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default
    ///   - instanceType: The instance type that the reservation will cover (for example, m1.small). For more information, see Amazon EC2 instance types in the Amazon EC2 User Guide.
    ///   - maxDuration: The maximum duration (in seconds) to filter when searching for offerings. Default: 94608000 (3 years)
    ///   - maxInstanceCount: The maximum number of instances to filter when searching for offerings. Default: 20
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining
    ///   - minDuration: The minimum duration (in seconds) to filter when searching for offerings. Default: 2592000 (1 month)
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - offeringClass: The offering class of the Reserved Instance. Can be standard or convertible.
    ///   - offeringType: The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API
    ///   - productDescription: The Reserved Instance product platform description. Instances that include (Amazon VPC) in the description are for use with Amazon VPC.
    ///   - reservedInstancesOfferingIds: One or more Reserved Instances offering IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeReservedInstancesOfferings(
        availabilityZone: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        includeMarketplace: Bool? = nil,
        instanceTenancy: Tenancy? = nil,
        instanceType: InstanceType? = nil,
        maxDuration: Int64? = nil,
        maxInstanceCount: Int? = nil,
        maxResults: Int? = nil,
        minDuration: Int64? = nil,
        nextToken: String? = nil,
        offeringClass: OfferingClassType? = nil,
        offeringType: OfferingTypeValues? = nil,
        productDescription: RIProductDescription? = nil,
        reservedInstancesOfferingIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeReservedInstancesOfferingsResult {
        let input = DescribeReservedInstancesOfferingsRequest(
            availabilityZone: availabilityZone, 
            dryRun: dryRun, 
            filters: filters, 
            includeMarketplace: includeMarketplace, 
            instanceTenancy: instanceTenancy, 
            instanceType: instanceType, 
            maxDuration: maxDuration, 
            maxInstanceCount: maxInstanceCount, 
            maxResults: maxResults, 
            minDuration: minDuration, 
            nextToken: nextToken, 
            offeringClass: offeringClass, 
            offeringType: offeringType, 
            productDescription: productDescription, 
            reservedInstancesOfferingIds: reservedInstancesOfferingIds
        )
        return try await self.describeReservedInstancesOfferings(input, logger: logger)
    }

    /// Describes your route tables. The default is to describe all your route tables.  Alternatively, you can specify specific route table IDs or filter the results to include only the route tables that match specific criteria. Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations. For more information, see Route tables in the
    /// 				Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func describeRouteTables(_ input: DescribeRouteTablesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeRouteTablesResult {
        try await self.client.execute(
            operation: "DescribeRouteTables", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your route tables. The default is to describe all your route tables.  Alternatively, you can specify specific route table IDs or filter the results to include only the route tables that match specific criteria. Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations. For more information, see Route tables in the
    /// 				Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    association.gateway-id - The ID of the gateway involved in the
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - routeTableIds: The IDs of the route tables.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeRouteTables(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        routeTableIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeRouteTablesResult {
        let input = DescribeRouteTablesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            routeTableIds: routeTableIds
        )
        return try await self.describeRouteTables(input, logger: logger)
    }

    /// Finds available schedules that meet the specified criteria. You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours. After you find a schedule that meets your needs, call PurchaseScheduledInstances to purchase Scheduled Instances with that schedule.
    @Sendable
    @inlinable
    public func describeScheduledInstanceAvailability(_ input: DescribeScheduledInstanceAvailabilityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeScheduledInstanceAvailabilityResult {
        try await self.client.execute(
            operation: "DescribeScheduledInstanceAvailability", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Finds available schedules that meet the specified criteria. You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours. After you find a schedule that meets your needs, call PurchaseScheduledInstances to purchase Scheduled Instances with that schedule.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    platform - The platform (Linux/UNIX or Windows).
    ///   - firstSlotStartTimeRange: The time period for the first schedule to start.
    ///   - maxResults: The maximum number of results to return in a single call.  This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned NextToken value.
    ///   - maxSlotDurationInHours: The maximum available duration, in hours. This value must be greater than MinSlotDurationInHours and less than 1,720.
    ///   - minSlotDurationInHours: The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
    ///   - nextToken: The token for the next set of results.
    ///   - recurrence: The schedule recurrence.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeScheduledInstanceAvailability(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        firstSlotStartTimeRange: SlotDateTimeRangeRequest? = nil,
        maxResults: Int? = nil,
        maxSlotDurationInHours: Int? = nil,
        minSlotDurationInHours: Int? = nil,
        nextToken: String? = nil,
        recurrence: ScheduledInstanceRecurrenceRequest? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeScheduledInstanceAvailabilityResult {
        let input = DescribeScheduledInstanceAvailabilityRequest(
            dryRun: dryRun, 
            filters: filters, 
            firstSlotStartTimeRange: firstSlotStartTimeRange, 
            maxResults: maxResults, 
            maxSlotDurationInHours: maxSlotDurationInHours, 
            minSlotDurationInHours: minSlotDurationInHours, 
            nextToken: nextToken, 
            recurrence: recurrence
        )
        return try await self.describeScheduledInstanceAvailability(input, logger: logger)
    }

    /// Describes the specified Scheduled Instances or all your Scheduled Instances.
    @Sendable
    @inlinable
    public func describeScheduledInstances(_ input: DescribeScheduledInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeScheduledInstancesResult {
        try await self.client.execute(
            operation: "DescribeScheduledInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Scheduled Instances or all your Scheduled Instances.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    platform - The platform (Linux/UNIX or Windows).
    ///   - maxResults: The maximum number of results to return in a single call.  This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned NextToken value.
    ///   - nextToken: The token for the next set of results.
    ///   - scheduledInstanceIds: The Scheduled Instance IDs.
    ///   - slotStartTimeRange: The time period for the first schedule to start.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeScheduledInstances(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        scheduledInstanceIds: [String]? = nil,
        slotStartTimeRange: SlotStartTimeRangeRequest? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeScheduledInstancesResult {
        let input = DescribeScheduledInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            scheduledInstanceIds: scheduledInstanceIds, 
            slotStartTimeRange: slotStartTimeRange
        )
        return try await self.describeScheduledInstances(input, logger: logger)
    }

    /// Describes the VPCs on the other side of a VPC peering or Transit Gateway connection that are referencing the security groups you've specified in this request.
    @Sendable
    @inlinable
    public func describeSecurityGroupReferences(_ input: DescribeSecurityGroupReferencesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSecurityGroupReferencesResult {
        try await self.client.execute(
            operation: "DescribeSecurityGroupReferences", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the VPCs on the other side of a VPC peering or Transit Gateway connection that are referencing the security groups you've specified in this request.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupId: The IDs of the security groups in your account.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSecurityGroupReferences(
        dryRun: Bool? = nil,
        groupId: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSecurityGroupReferencesResult {
        let input = DescribeSecurityGroupReferencesRequest(
            dryRun: dryRun, 
            groupId: groupId
        )
        return try await self.describeSecurityGroupReferences(input, logger: logger)
    }

    /// Describes one or more of your security group rules.
    @Sendable
    @inlinable
    public func describeSecurityGroupRules(_ input: DescribeSecurityGroupRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSecurityGroupRulesResult {
        try await self.client.execute(
            operation: "DescribeSecurityGroupRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your security group rules.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    group-id - The ID of the security group.    security-group-rule-id - The ID of the security group rule.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of  items, make another request with the token returned in the output. This value can be between 5 and 1000. If this parameter is not specified, then all items are returned. For more information, see Pagination.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - securityGroupRuleIds: The IDs of the security group rules.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSecurityGroupRules(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        securityGroupRuleIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSecurityGroupRulesResult {
        let input = DescribeSecurityGroupRulesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            securityGroupRuleIds: securityGroupRuleIds
        )
        return try await self.describeSecurityGroupRules(input, logger: logger)
    }

    /// Describes security group VPC associations made with AssociateSecurityGroupVpc.
    @Sendable
    @inlinable
    public func describeSecurityGroupVpcAssociations(_ input: DescribeSecurityGroupVpcAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSecurityGroupVpcAssociationsResult {
        try await self.client.execute(
            operation: "DescribeSecurityGroupVpcAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes security group VPC associations made with AssociateSecurityGroupVpc.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Security group VPC association filters.    group-id: The security group ID.    vpc-id: The ID of the associated VPC.    vpc-owner-id: The account ID of the VPC owner.    state: The state of the association.    tag:: The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key: The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSecurityGroupVpcAssociations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSecurityGroupVpcAssociationsResult {
        let input = DescribeSecurityGroupVpcAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeSecurityGroupVpcAssociations(input, logger: logger)
    }

    /// Describes the specified security groups or all of your security groups.
    @Sendable
    @inlinable
    public func describeSecurityGroups(_ input: DescribeSecurityGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSecurityGroupsResult {
        try await self.client.execute(
            operation: "DescribeSecurityGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified security groups or all of your security groups.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.    description - The description of the security group.    egress.ip-permission.cidr - An IPv4 CIDR block for an outbound security group rule.    egress.ip-permission.from-port - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    egress.ip-permission.group-id - The ID of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.group-name - The name of a security group that is referenced in an outbound security group rule.    egress.ip-permission.ipv6-cidr - An IPv6 CIDR block for an outbound security group rule.    egress.ip-permission.prefix-list-id - The ID of a prefix list to which a security group rule allows outbound access.    egress.ip-permission.protocol - The IP protocol for an outbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    egress.ip-permission.to-port - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    egress.ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an outbound security group rule.    group-id - The ID of the security group.     group-name - The name of the security group.    ip-permission.cidr - An IPv4 CIDR block for an inbound security group rule.    ip-permission.from-port - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    ip-permission.group-id - The ID of a security group that has been referenced in an inbound security group rule.    ip-permission.group-name - The name of a security group that is referenced in an inbound security group rule.    ip-permission.ipv6-cidr - An IPv6 CIDR block for an inbound security group rule.    ip-permission.prefix-list-id - The ID of a prefix list from which a security group rule allows inbound access.    ip-permission.protocol - The IP protocol for an inbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    ip-permission.to-port - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an inbound security group rule.    owner-id - The Amazon Web Services account ID of the owner of the security group.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC specified when the security group was created.
    ///   - groupIds: The IDs of the security groups. Required for security groups in a nondefault VPC. Default: Describes all of your security groups.
    ///   - groupNames: [Default VPC] The names of the security groups. You can specify either
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. This value can be between 5 and 1000.  If this parameter is not specified, then all items are returned. For more information, see  Pagination.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSecurityGroups(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        groupIds: [String]? = nil,
        groupNames: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSecurityGroupsResult {
        let input = DescribeSecurityGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            groupIds: groupIds, 
            groupNames: groupNames, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeSecurityGroups(input, logger: logger)
    }

    /// Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time. For more information about EBS snapshots, see Amazon EBS snapshots in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func describeSnapshotAttribute(_ input: DescribeSnapshotAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSnapshotAttributeResult {
        try await self.client.execute(
            operation: "DescribeSnapshotAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time. For more information about EBS snapshots, see Amazon EBS snapshots in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - attribute: The snapshot attribute you would like to view.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - snapshotId: The ID of the EBS snapshot.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSnapshotAttribute(
        attribute: SnapshotAttributeName? = nil,
        dryRun: Bool? = nil,
        snapshotId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSnapshotAttributeResult {
        let input = DescribeSnapshotAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            snapshotId: snapshotId
        )
        return try await self.describeSnapshotAttribute(input, logger: logger)
    }

    /// Describes the storage tier status of one or more Amazon EBS snapshots.
    @Sendable
    @inlinable
    public func describeSnapshotTierStatus(_ input: DescribeSnapshotTierStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSnapshotTierStatusResult {
        try await self.client.execute(
            operation: "DescribeSnapshotTierStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the storage tier status of one or more Amazon EBS snapshots.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    snapshot-id - The snapshot ID.    volume-id - The ID of the volume the snapshot is for.    last-tiering-operation - The state of the last archive or restore action. (archival-in-progress | archival-completed | archival-failed | permanent-restore-in-progress | permanent-restore-completed | permanent-restore-failed |
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSnapshotTierStatus(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSnapshotTierStatusResult {
        let input = DescribeSnapshotTierStatusRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeSnapshotTierStatus(input, logger: logger)
    }

    /// Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you. The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other Amazon Web Services accounts for which you have explicit create volume permissions. The create volume permissions fall into the following categories:    public: The owner of the snapshot granted create volume permissions for the snapshot to the all group. All Amazon Web Services accounts have create volume permissions for these snapshots.    explicit: The owner of the snapshot granted create volume permissions to a specific Amazon Web Services account.    implicit: An Amazon Web Services account has implicit create volume permissions for all snapshots it owns.   The list of snapshots returned can be filtered by specifying snapshot IDs, snapshot owners, or Amazon Web Services accounts with create volume permissions. If no options are specified,  Amazon EC2 returns all snapshots for which you have create volume permissions. If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results. If you specify one or more snapshot owners using the OwnerIds option, only snapshots from the specified owners and for which you have access are returned. The results can include the Amazon Web Services account IDs of the specified owners, amazon for snapshots owned by Amazon, or self for snapshots that you own. If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify Amazon Web Services account IDs (if you own the snapshots), self for snapshots for which you own or have explicit permissions, or all for public snapshots. If you are describing a long list of snapshots, we recommend that you paginate the output to make the list more manageable. For more information, see Pagination. To get the state of fast snapshot restores for a snapshot, use DescribeFastSnapshotRestores. For more information about EBS snapshots, see Amazon EBS snapshots in the Amazon EBS User Guide.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.
    @Sendable
    @inlinable
    public func describeSnapshots(_ input: DescribeSnapshotsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSnapshotsResult {
        try await self.client.execute(
            operation: "DescribeSnapshots", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you. The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other Amazon Web Services accounts for which you have explicit create volume permissions. The create volume permissions fall into the following categories:    public: The owner of the snapshot granted create volume permissions for the snapshot to the all group. All Amazon Web Services accounts have create volume permissions for these snapshots.    explicit: The owner of the snapshot granted create volume permissions to a specific Amazon Web Services account.    implicit: An Amazon Web Services account has implicit create volume permissions for all snapshots it owns.   The list of snapshots returned can be filtered by specifying snapshot IDs, snapshot owners, or Amazon Web Services accounts with create volume permissions. If no options are specified,  Amazon EC2 returns all snapshots for which you have create volume permissions. If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results. If you specify one or more snapshot owners using the OwnerIds option, only snapshots from the specified owners and for which you have access are returned. The results can include the Amazon Web Services account IDs of the specified owners, amazon for snapshots owned by Amazon, or self for snapshots that you own. If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify Amazon Web Services account IDs (if you own the snapshots), self for snapshots for which you own or have explicit permissions, or all for public snapshots. If you are describing a long list of snapshots, we recommend that you paginate the output to make the list more manageable. For more information, see Pagination. To get the state of fast snapshot restores for a snapshot, use DescribeFastSnapshotRestores. For more information about EBS snapshots, see Amazon EBS snapshots in the Amazon EBS User Guide.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    description - A description of the snapshot.    encrypted - Indicates whether the snapshot is encrypted (true | false)    owner-alias - The owner alias, from an Amazon-maintained list   (amazon).  This is not the user-configured Amazon Web Services account alias set using the IAM console. We recommend that you use the related parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that  you use the related parameter instead of this filter.    progress - The progress of the snapshot, as a percentage (for example, 80%).    snapshot-id - The snapshot ID.    start-time - The time stamp when the snapshot was initiated.    status - The status of the snapshot (pending | completed | error).    storage-tier - The storage tier of the snapshot (archive | standard).    transfer-type - The type of operation used to create the snapshot (time-based | standard).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The ID of the volume the snapshot is for.    volume-size - The size of the volume, in GiB.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - ownerIds: Scopes the results to snapshots with the specified owners. You can specify a combination of Amazon Web Services account IDs, self, and amazon.
    ///   - restorableByUserIds: The IDs of the Amazon Web Services accounts that can create volumes from the snapshot.
    ///   - snapshotIds: The snapshot IDs. Default: Describes the snapshots for which you have create volume permissions.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSnapshots(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        ownerIds: [String]? = nil,
        restorableByUserIds: [String]? = nil,
        snapshotIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSnapshotsResult {
        let input = DescribeSnapshotsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            ownerIds: ownerIds, 
            restorableByUserIds: restorableByUserIds, 
            snapshotIds: snapshotIds
        )
        return try await self.describeSnapshots(input, logger: logger)
    }

    /// Describes the data feed for Spot Instances. For more information, see Spot Instance data feed in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeSpotDatafeedSubscription(_ input: DescribeSpotDatafeedSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSpotDatafeedSubscriptionResult {
        try await self.client.execute(
            operation: "DescribeSpotDatafeedSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the data feed for Spot Instances. For more information, see Spot Instance data feed in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSpotDatafeedSubscription(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSpotDatafeedSubscriptionResult {
        let input = DescribeSpotDatafeedSubscriptionRequest(
            dryRun: dryRun
        )
        return try await self.describeSpotDatafeedSubscription(input, logger: logger)
    }

    /// Describes the running instances for the specified Spot Fleet.
    @Sendable
    @inlinable
    public func describeSpotFleetInstances(_ input: DescribeSpotFleetInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSpotFleetInstancesResponse {
        try await self.client.execute(
            operation: "DescribeSpotFleetInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the running instances for the specified Spot Fleet.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token to include in another request to get the next page of items. This value is null when there are no more items to return.
    ///   - spotFleetRequestId: The ID of the Spot Fleet request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSpotFleetInstances(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        spotFleetRequestId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSpotFleetInstancesResponse {
        let input = DescribeSpotFleetInstancesRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            spotFleetRequestId: spotFleetRequestId
        )
        return try await self.describeSpotFleetInstances(input, logger: logger)
    }

    /// Describes the events for the specified Spot Fleet request during the specified time. Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours. For more information, see Monitor fleet events using Amazon EventBridge in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeSpotFleetRequestHistory(_ input: DescribeSpotFleetRequestHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSpotFleetRequestHistoryResponse {
        try await self.client.execute(
            operation: "DescribeSpotFleetRequestHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the events for the specified Spot Fleet request during the specified time. Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours. For more information, see Monitor fleet events using Amazon EventBridge in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - eventType: The type of events to describe. By default, all events are described.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token to include in another request to get the next page of items. This value is null when there are no more items to return.
    ///   - spotFleetRequestId: The ID of the Spot Fleet request.
    ///   - startTime: The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSpotFleetRequestHistory(
        dryRun: Bool? = nil,
        eventType: EventType? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        spotFleetRequestId: String? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSpotFleetRequestHistoryResponse {
        let input = DescribeSpotFleetRequestHistoryRequest(
            dryRun: dryRun, 
            eventType: eventType, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            spotFleetRequestId: spotFleetRequestId, 
            startTime: startTime
        )
        return try await self.describeSpotFleetRequestHistory(input, logger: logger)
    }

    /// Describes your Spot Fleet requests. Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.
    @Sendable
    @inlinable
    public func describeSpotFleetRequests(_ input: DescribeSpotFleetRequestsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSpotFleetRequestsResponse {
        try await self.client.execute(
            operation: "DescribeSpotFleetRequests", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your Spot Fleet requests. Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token to include in another request to get the next page of items. This value is null when there are no more items to return.
    ///   - spotFleetRequestIds: The IDs of the Spot Fleet requests.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSpotFleetRequests(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        spotFleetRequestIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSpotFleetRequestsResponse {
        let input = DescribeSpotFleetRequestsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            spotFleetRequestIds: spotFleetRequestIds
        )
        return try await self.describeSpotFleetRequests(input, logger: logger)
    }

    /// Describes the specified Spot Instance requests. You can use DescribeSpotInstanceRequests to find a running Spot Instance by examining the response. If the status of the Spot Instance is fulfilled, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use DescribeInstances with a filter to look for instances where the instance lifecycle is spot. We recommend that you set MaxResults to a value between 5 and 1000 to limit the number of items returned. This paginates the output, which makes the list more manageable and returns the items faster. If the list of items exceeds your MaxResults value, then that number of items is returned along with a NextToken value that can be passed to a subsequent DescribeSpotInstanceRequests request to retrieve the remaining items. Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.
    @Sendable
    @inlinable
    public func describeSpotInstanceRequests(_ input: DescribeSpotInstanceRequestsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSpotInstanceRequestsResult {
        try await self.client.execute(
            operation: "DescribeSpotInstanceRequests", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Spot Instance requests. You can use DescribeSpotInstanceRequests to find a running Spot Instance by examining the response. If the status of the Spot Instance is fulfilled, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use DescribeInstances with a filter to look for instances where the instance lifecycle is spot. We recommend that you set MaxResults to a value between 5 and 1000 to limit the number of items returned. This paginates the output, which makes the list more manageable and returns the items faster. If the list of items exceeds your MaxResults value, then that number of items is returned along with a NextToken value that can be passed to a subsequent DescribeSpotInstanceRequests request to retrieve the remaining items. Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone-group - The Availability Zone group.    create-time - The time stamp when the Spot Instance request was created.    fault-code - The fault code related to the request.    fault-message - The fault message related to the request.    instance-id - The ID of the instance that fulfilled the request.    launch-group - The Spot Instance launch group.    launch.block-device-mapping.delete-on-termination - Indicates whether the EBS volume is deleted on instance termination.    launch.block-device-mapping.device-name - The device name for the volume in the block device mapping (for example, /dev/sdh or xvdh).    launch.block-device-mapping.snapshot-id - The ID of the snapshot for the EBS volume.    launch.block-device-mapping.volume-size - The size of the EBS volume, in GiB.    launch.block-device-mapping.volume-type - The type of EBS volume: gp2 or gp3 for General Purpose SSD, io1  or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic.    launch.group-id - The ID of the security group for the instance.    launch.group-name - The name of the security group for the instance.    launch.image-id - The ID of the AMI.    launch.instance-type - The type of instance (for example, m3.medium).    launch.kernel-id - The kernel ID.    launch.key-name - The name of the key pair the instance launched with.    launch.monitoring-enabled - Whether detailed monitoring is enabled for the Spot Instance.    launch.ramdisk-id - The RAM disk ID.    launched-availability-zone - The Availability Zone in which the request is launched.    network-interface.addresses.primary - Indicates whether the IP address is the primary private IP address.    network-interface.delete-on-termination - Indicates whether the network interface is deleted when the instance is terminated.    network-interface.description - A description of the network interface.    network-interface.device-index - The index of the device for the network interface attachment on the instance.    network-interface.group-id - The ID of the security group associated with the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.private-ip-address - The primary private IP address of the network interface.    network-interface.subnet-id - The ID of the subnet for the instance.    product-description - The product description associated with the instance (Linux/UNIX | Windows).    spot-instance-request-id - The Spot Instance request ID.    spot-price - The maximum hourly price for any Spot Instance launched to fulfill the request.    state - The state of the Spot Instance request (open | active | closed | cancelled | failed). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see Spot request status in the Amazon EC2 User Guide.    status-code - The short code describing the most recent evaluation of your Spot Instance request.    status-message - The message explaining the status of the Spot Instance request.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of Spot Instance request (one-time | persistent).    valid-from - The start date of the request.    valid-until - The end date of the request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - spotInstanceRequestIds: The IDs of the Spot Instance requests.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSpotInstanceRequests(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        spotInstanceRequestIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSpotInstanceRequestsResult {
        let input = DescribeSpotInstanceRequestsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            spotInstanceRequestIds: spotInstanceRequestIds
        )
        return try await self.describeSpotInstanceRequests(input, logger: logger)
    }

    /// Describes the Spot price history. For more information, see Spot Instance pricing history in the Amazon EC2 User Guide. When you specify a start and end time, the operation returns the prices of the instance types within that time range. It also returns the last price change before the start time, which is the effective price as of the start time.
    @Sendable
    @inlinable
    public func describeSpotPriceHistory(_ input: DescribeSpotPriceHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSpotPriceHistoryResult {
        try await self.client.execute(
            operation: "DescribeSpotPriceHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the Spot price history. For more information, see Spot Instance pricing history in the Amazon EC2 User Guide. When you specify a start and end time, the operation returns the prices of the instance types within that time range. It also returns the last price change before the start time, which is the effective price as of the start time.
    ///
    /// Parameters:
    ///   - availabilityZone: Filters the results by the specified Availability Zone.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - endTime: The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
    ///   - filters: The filters.    availability-zone - The Availability Zone for which prices should be returned.    instance-type - The type of instance (for example, m3.medium).    product-description - The product description for the Spot price (Linux/UNIX | Red Hat Enterprise Linux | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | Red Hat Enterprise Linux (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon VPC)).    spot-price - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).    timestamp - The time stamp of the Spot price history, in UTC format (for example, ddd MMM dd HH:mm:ss UTC YYYY). You can use wildcards (* and ?). Greater than or less than comparison is not supported.
    ///   - instanceTypes: Filters the results by the specified instance types.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - productDescriptions: Filters the results by the specified basic product descriptions.
    ///   - startTime: The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSpotPriceHistory(
        availabilityZone: String? = nil,
        dryRun: Bool? = nil,
        endTime: Date? = nil,
        filters: [Filter]? = nil,
        instanceTypes: [InstanceType]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        productDescriptions: [String]? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSpotPriceHistoryResult {
        let input = DescribeSpotPriceHistoryRequest(
            availabilityZone: availabilityZone, 
            dryRun: dryRun, 
            endTime: endTime, 
            filters: filters, 
            instanceTypes: instanceTypes, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            productDescriptions: productDescriptions, 
            startTime: startTime
        )
        return try await self.describeSpotPriceHistory(input, logger: logger)
    }

    /// Describes the stale security group rules for security groups referenced across a VPC peering connection, transit gateway connection, or with a security group VPC association. Rules are stale when they reference a deleted security group. Rules can also be stale if they reference a security group in a peer VPC for which the VPC peering connection has been deleted, across a transit gateway where the transit gateway has been deleted (or the transit gateway security group referencing feature has been disabled), or if a security group VPC association has been disassociated.
    @Sendable
    @inlinable
    public func describeStaleSecurityGroups(_ input: DescribeStaleSecurityGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStaleSecurityGroupsResult {
        try await self.client.execute(
            operation: "DescribeStaleSecurityGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the stale security group rules for security groups referenced across a VPC peering connection, transit gateway connection, or with a security group VPC association. Rules are stale when they reference a deleted security group. Rules can also be stale if they reference a security group in a peer VPC for which the VPC peering connection has been deleted, across a transit gateway where the transit gateway has been deleted (or the transit gateway security group referencing feature has been disabled), or if a security group VPC association has been disassociated.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeStaleSecurityGroups(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeStaleSecurityGroupsResult {
        let input = DescribeStaleSecurityGroupsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcId: vpcId
        )
        return try await self.describeStaleSecurityGroups(input, logger: logger)
    }

    /// Describes the progress of the AMI store tasks. You can describe the store tasks for specified AMIs. If you don't specify the AMIs, you get a paginated list of store tasks from the last 31 days. For each AMI task, the response indicates if the task is InProgress, Completed, or Failed. For tasks InProgress, the response shows the estimated progress as a percentage. Tasks are listed in reverse chronological order. Currently, only tasks from the past 31 days can be viewed. To use this API, you must have the required permissions. For more information, see Permissions for storing and restoring AMIs using Amazon S3 in the Amazon EC2 User Guide. For more information, see Store and restore an AMI using Amazon S3 in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func describeStoreImageTasks(_ input: DescribeStoreImageTasksRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeStoreImageTasksResult {
        try await self.client.execute(
            operation: "DescribeStoreImageTasks", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the progress of the AMI store tasks. You can describe the store tasks for specified AMIs. If you don't specify the AMIs, you get a paginated list of store tasks from the last 31 days. For each AMI task, the response indicates if the task is InProgress, Completed, or Failed. For tasks InProgress, the response shows the estimated progress as a percentage. Tasks are listed in reverse chronological order. Currently, only tasks from the past 31 days can be viewed. To use this API, you must have the required permissions. For more information, see Permissions for storing and restoring AMIs using Amazon S3 in the Amazon EC2 User Guide. For more information, see Store and restore an AMI using Amazon S3 in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - filters: The filters.    task-state - Returns tasks in a certain state (InProgress | Completed | Failed)    bucket - Returns task information for tasks that targeted a specific bucket. For the filter value, specify the bucket name.    When you specify the ImageIds parameter, any filters that you specify are ignored. To use the filters, you must remove the ImageIds parameter.
    ///   - imageIds: The AMI IDs for which to show progress. Up to 20 AMI IDs can be included in a request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeStoreImageTasks(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeStoreImageTasksResult {
        let input = DescribeStoreImageTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            imageIds: imageIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeStoreImageTasks(input, logger: logger)
    }

    /// Describes your subnets. The default is to describe all your subnets.  Alternatively, you can specify specific subnet IDs or filter the results to include only the subnets that match specific criteria. For more information, see Subnets in the
    /// 				Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func describeSubnets(_ input: DescribeSubnetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeSubnetsResult {
        try await self.client.execute(
            operation: "DescribeSubnets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your subnets. The default is to describe all your subnets.  Alternatively, you can specify specific subnet IDs or filter the results to include only the subnets that match specific criteria. For more information, see Subnets in the
    /// 				Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone for the subnet. You can also use availabilityZone as the filter name.    availability-zone-id - The ID of the Availability Zone for the subnet. You can also use availabilityZoneId as the filter name.    available-ip-address-count - The number of IPv4 addresses in the subnet that are available.    cidr-block - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use cidr or cidrBlock as the filter names.    customer-owned-ipv4-pool - The customer-owned IPv4 address pool associated with the subnet.    default-for-az - Indicates whether this is the default subnet for the Availability Zone (true | false). You can also use defaultForAz as the filter name.    enable-dns64 - Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.    enable-lni-at-device-index - Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1).     ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.association-id - An association ID for an IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the subnet.    ipv6-native - Indicates whether this is an IPv6 only subnet (true | false).    map-customer-owned-ip-on-launch - Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.    map-public-ip-on-launch - Indicates whether instances launched in this subnet receive a public IPv4 address.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the subnet.    private-dns-name-options-on-launch.hostname-type - The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).    private-dns-name-options-on-launch.enable-resource-name-dns-a-record - Indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options-on-launch.enable-resource-name-dns-aaaa-record - Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    state - The state of the subnet (pending | available).    subnet-arn - The Amazon Resource Name (ARN) of the subnet.    subnet-id - The ID of the subnet.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the subnet.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - subnetIds: The IDs of the subnets. Default: Describes all your subnets.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeSubnets(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        subnetIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeSubnetsResult {
        let input = DescribeSubnetsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            subnetIds: subnetIds
        )
        return try await self.describeSubnets(input, logger: logger)
    }

    /// Describes the specified tags for your EC2 resources. For more information about tags, see Tag your Amazon EC2 resources in the Amazon Elastic Compute Cloud User Guide.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeTags(_ input: DescribeTagsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTagsResult {
        try await self.client.execute(
            operation: "DescribeTags", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified tags for your EC2 resources. For more information about tags, see Tag your Amazon EC2 resources in the Amazon Elastic Compute Cloud User Guide.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    key - The tag key.    resource-id - The ID of the resource.    resource-type - The resource type. For a list of possible values, see  TagSpecification.    tag: - The key/value combination of the tag. For example, specify "tag:Owner" for the filter name and "TeamA" for the filter value to find resources with the tag "Owner=TeamA".    value - The tag value.
    ///   - maxResults: The maximum number of items to return for this request. This value can be between 5 and 1000.  To get the next page of items, make another request with the token returned in the output. For more information, see Pagination.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTags(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTagsResult {
        let input = DescribeTagsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeTags(input, logger: logger)
    }

    /// Describe traffic mirror filters that determine the traffic that is mirrored.
    @Sendable
    @inlinable
    public func describeTrafficMirrorFilterRules(_ input: DescribeTrafficMirrorFilterRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrafficMirrorFilterRulesResult {
        try await self.client.execute(
            operation: "DescribeTrafficMirrorFilterRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describe traffic mirror filters that determine the traffic that is mirrored.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Traffic mirror filters.    traffic-mirror-filter-rule-id: The ID of the Traffic Mirror rule.    traffic-mirror-filter-id: The ID of the filter that this rule is associated with.    rule-number: The number of the Traffic Mirror rule.    rule-action: The action taken on the filtered traffic. Possible actions are accept and reject.    traffic-direction: The traffic direction. Possible directions are ingress and egress.    protocol: The protocol, for example UDP, assigned to the Traffic Mirror rule.    source-cidr-block: The source CIDR block assigned to the Traffic Mirror rule.    destination-cidr-block: The destination CIDR block assigned to the Traffic Mirror rule.    description: The description of the Traffic Mirror rule.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - trafficMirrorFilterId: Traffic filter ID.
    ///   - trafficMirrorFilterRuleIds: Traffic filter rule IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTrafficMirrorFilterRules(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        trafficMirrorFilterId: String? = nil,
        trafficMirrorFilterRuleIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTrafficMirrorFilterRulesResult {
        let input = DescribeTrafficMirrorFilterRulesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            trafficMirrorFilterId: trafficMirrorFilterId, 
            trafficMirrorFilterRuleIds: trafficMirrorFilterRuleIds
        )
        return try await self.describeTrafficMirrorFilterRules(input, logger: logger)
    }

    /// Describes one or more Traffic Mirror filters.
    @Sendable
    @inlinable
    public func describeTrafficMirrorFilters(_ input: DescribeTrafficMirrorFiltersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrafficMirrorFiltersResult {
        try await self.client.execute(
            operation: "DescribeTrafficMirrorFilters", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more Traffic Mirror filters.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    description: The Traffic Mirror filter description.    traffic-mirror-filter-id: The ID of the Traffic Mirror filter.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - trafficMirrorFilterIds: The ID of the Traffic Mirror filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTrafficMirrorFilters(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        trafficMirrorFilterIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTrafficMirrorFiltersResult {
        let input = DescribeTrafficMirrorFiltersRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            trafficMirrorFilterIds: trafficMirrorFilterIds
        )
        return try await self.describeTrafficMirrorFilters(input, logger: logger)
    }

    /// Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.
    @Sendable
    @inlinable
    public func describeTrafficMirrorSessions(_ input: DescribeTrafficMirrorSessionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrafficMirrorSessionsResult {
        try await self.client.execute(
            operation: "DescribeTrafficMirrorSessions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    description: The Traffic Mirror session description.    network-interface-id: The ID of the Traffic Mirror session network interface.    owner-id: The ID of the account that owns the Traffic Mirror session.    packet-length: The assigned number of packets to mirror.     session-number: The assigned session number.     traffic-mirror-filter-id: The ID of the Traffic Mirror filter.    traffic-mirror-session-id: The ID of the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.    virtual-network-id: The virtual network ID of the Traffic Mirror session.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - trafficMirrorSessionIds: The ID of the Traffic Mirror session.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTrafficMirrorSessions(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        trafficMirrorSessionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTrafficMirrorSessionsResult {
        let input = DescribeTrafficMirrorSessionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            trafficMirrorSessionIds: trafficMirrorSessionIds
        )
        return try await self.describeTrafficMirrorSessions(input, logger: logger)
    }

    /// Information about one or more Traffic Mirror targets.
    @Sendable
    @inlinable
    public func describeTrafficMirrorTargets(_ input: DescribeTrafficMirrorTargetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrafficMirrorTargetsResult {
        try await self.client.execute(
            operation: "DescribeTrafficMirrorTargets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Information about one or more Traffic Mirror targets.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    description: The Traffic Mirror target description.    network-interface-id: The ID of the Traffic Mirror session network interface.    network-load-balancer-arn: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.    owner-id: The ID of the account that owns the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - trafficMirrorTargetIds: The ID of the Traffic Mirror targets.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTrafficMirrorTargets(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        trafficMirrorTargetIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTrafficMirrorTargetsResult {
        let input = DescribeTrafficMirrorTargetsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            trafficMirrorTargetIds: trafficMirrorTargetIds
        )
        return try await self.describeTrafficMirrorTargets(input, logger: logger)
    }

    /// Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.
    @Sendable
    @inlinable
    public func describeTransitGatewayAttachments(_ input: DescribeTransitGatewayAttachmentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewayAttachmentsResult {
        try await self.client.execute(
            operation: "DescribeTransitGatewayAttachments", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    association.state - The state of the association (associating | associated | disassociating).    association.transit-gateway-route-table-id - The ID of the route table for the transit gateway.    resource-id - The ID of the resource.    resource-owner-id - The ID of the Amazon Web Services account that owns the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    state - The state of the attachment. Valid values are available | deleted | deleting | failed |  failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-owner-id - The ID of the Amazon Web Services account that owns the transit gateway.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayAttachmentIds: The IDs of the attachments.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGatewayAttachments(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayAttachmentIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewayAttachmentsResult {
        let input = DescribeTransitGatewayAttachmentsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayAttachmentIds: transitGatewayAttachmentIds
        )
        return try await self.describeTransitGatewayAttachments(input, logger: logger)
    }

    /// Describes one or more Connect peers.
    @Sendable
    @inlinable
    public func describeTransitGatewayConnectPeers(_ input: DescribeTransitGatewayConnectPeersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewayConnectPeersResult {
        try await self.client.execute(
            operation: "DescribeTransitGatewayConnectPeers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more Connect peers.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    state - The state of the Connect peer (pending | available | deleting | deleted).    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-connect-peer-id - The ID of the Connect peer.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayConnectPeerIds: The IDs of the Connect peers.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGatewayConnectPeers(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayConnectPeerIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewayConnectPeersResult {
        let input = DescribeTransitGatewayConnectPeersRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayConnectPeerIds: transitGatewayConnectPeerIds
        )
        return try await self.describeTransitGatewayConnectPeers(input, logger: logger)
    }

    /// Describes one or more Connect attachments.
    @Sendable
    @inlinable
    public func describeTransitGatewayConnects(_ input: DescribeTransitGatewayConnectsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewayConnectsResult {
        try await self.client.execute(
            operation: "DescribeTransitGatewayConnects", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more Connect attachments.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    options.protocol - The tunnel protocol (gre).    state - The state of the attachment (initiating | initiatingRequest | pendingAcceptance | rollingBack | pending | available | modifying | deleting | deleted | failed | rejected | rejecting | failing).    transit-gateway-attachment-id - The ID of the Connect attachment.    transit-gateway-id - The ID of the transit gateway.    transport-transit-gateway-attachment-id - The ID of the transit gateway attachment from which the Connect attachment was created.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayAttachmentIds: The IDs of the attachments.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGatewayConnects(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayAttachmentIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewayConnectsResult {
        let input = DescribeTransitGatewayConnectsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayAttachmentIds: transitGatewayAttachmentIds
        )
        return try await self.describeTransitGatewayConnects(input, logger: logger)
    }

    /// Describes one or more transit gateway multicast domains.
    @Sendable
    @inlinable
    public func describeTransitGatewayMulticastDomains(_ input: DescribeTransitGatewayMulticastDomainsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewayMulticastDomainsResult {
        try await self.client.execute(
            operation: "DescribeTransitGatewayMulticastDomains", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more transit gateway multicast domains.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    state - The state of the transit gateway multicast domain. Valid values are pending | available | deleting | deleted.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-multicast-domain-id - The ID of the transit gateway multicast domain.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayMulticastDomainIds: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGatewayMulticastDomains(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayMulticastDomainIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewayMulticastDomainsResult {
        let input = DescribeTransitGatewayMulticastDomainsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayMulticastDomainIds: transitGatewayMulticastDomainIds
        )
        return try await self.describeTransitGatewayMulticastDomains(input, logger: logger)
    }

    /// Describes your transit gateway peering attachments.
    @Sendable
    @inlinable
    public func describeTransitGatewayPeeringAttachments(_ input: DescribeTransitGatewayPeeringAttachmentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewayPeeringAttachmentsResult {
        try await self.client.execute(
            operation: "DescribeTransitGatewayPeeringAttachments", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your transit gateway peering attachments.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    transit-gateway-attachment-id - The ID of the transit gateway attachment.    local-owner-id - The ID of your Amazon Web Services account.    remote-owner-id - The ID of the Amazon Web Services account in the remote Region that owns the transit gateway.    state - The state of the peering attachment. Valid values are available | deleted | deleting | failed |  failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    transit-gateway-id - The ID of the transit gateway.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayAttachmentIds: One or more IDs of the transit gateway peering attachments.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGatewayPeeringAttachments(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayAttachmentIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewayPeeringAttachmentsResult {
        let input = DescribeTransitGatewayPeeringAttachmentsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayAttachmentIds: transitGatewayAttachmentIds
        )
        return try await self.describeTransitGatewayPeeringAttachments(input, logger: logger)
    }

    /// Describes one or more transit gateway route policy tables.
    @Sendable
    @inlinable
    public func describeTransitGatewayPolicyTables(_ input: DescribeTransitGatewayPolicyTablesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewayPolicyTablesResult {
        try await self.client.execute(
            operation: "DescribeTransitGatewayPolicyTables", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more transit gateway route policy tables.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters associated with the transit gateway policy table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayPolicyTableIds: The IDs of the transit gateway policy tables.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGatewayPolicyTables(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayPolicyTableIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewayPolicyTablesResult {
        let input = DescribeTransitGatewayPolicyTablesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayPolicyTableIds: transitGatewayPolicyTableIds
        )
        return try await self.describeTransitGatewayPolicyTables(input, logger: logger)
    }

    /// Describes one or more transit gateway route table advertisements.
    @Sendable
    @inlinable
    public func describeTransitGatewayRouteTableAnnouncements(_ input: DescribeTransitGatewayRouteTableAnnouncementsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewayRouteTableAnnouncementsResult {
        try await self.client.execute(
            operation: "DescribeTransitGatewayRouteTableAnnouncements", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more transit gateway route table advertisements.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters associated with the transit gateway policy table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayRouteTableAnnouncementIds: The IDs of the transit gateway route tables that are being advertised.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGatewayRouteTableAnnouncements(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayRouteTableAnnouncementIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewayRouteTableAnnouncementsResult {
        let input = DescribeTransitGatewayRouteTableAnnouncementsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayRouteTableAnnouncementIds: transitGatewayRouteTableAnnouncementIds
        )
        return try await self.describeTransitGatewayRouteTableAnnouncements(input, logger: logger)
    }

    /// Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.
    @Sendable
    @inlinable
    public func describeTransitGatewayRouteTables(_ input: DescribeTransitGatewayRouteTablesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewayRouteTablesResult {
        try await self.client.execute(
            operation: "DescribeTransitGatewayRouteTables", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    default-association-route-table - Indicates whether this is the default association route table for the transit gateway (true | false).    default-propagation-route-table - Indicates whether this is the default propagation route table for the transit gateway (true | false).    state - The state of the route table (available | deleting | deleted | pending).    transit-gateway-id - The ID of the transit gateway.    transit-gateway-route-table-id - The ID of the transit gateway route table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayRouteTableIds: The IDs of the transit gateway route tables.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGatewayRouteTables(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayRouteTableIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewayRouteTablesResult {
        let input = DescribeTransitGatewayRouteTablesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayRouteTableIds: transitGatewayRouteTableIds
        )
        return try await self.describeTransitGatewayRouteTables(input, logger: logger)
    }

    /// Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.
    @Sendable
    @inlinable
    public func describeTransitGatewayVpcAttachments(_ input: DescribeTransitGatewayVpcAttachmentsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewayVpcAttachmentsResult {
        try await self.client.execute(
            operation: "DescribeTransitGatewayVpcAttachments", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    state - The state of the attachment. Valid values are available | deleted | deleting | failed |  failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    vpc-id - The ID of the VPC.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayAttachmentIds: The IDs of the attachments.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGatewayVpcAttachments(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayAttachmentIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewayVpcAttachmentsResult {
        let input = DescribeTransitGatewayVpcAttachmentsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayAttachmentIds: transitGatewayAttachmentIds
        )
        return try await self.describeTransitGatewayVpcAttachments(input, logger: logger)
    }

    /// Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.
    @Sendable
    @inlinable
    public func describeTransitGateways(_ input: DescribeTransitGatewaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTransitGatewaysResult {
        try await self.client.execute(
            operation: "DescribeTransitGateways", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    options.propagation-default-route-table-id - The ID of the default propagation route table.    options.amazon-side-asn - The private ASN for the Amazon side of a BGP session.    options.association-default-route-table-id - The ID of the default association route table.    options.auto-accept-shared-attachments - Indicates whether there is automatic acceptance of attachment requests (enable | disable).    options.default-route-table-association - Indicates whether resource attachments are automatically  associated with the default association route table (enable | disable).    options.default-route-table-propagation - Indicates whether resource attachments automatically propagate  routes to the default propagation route table (enable | disable).    options.dns-support - Indicates whether DNS support is enabled (enable | disable).    options.vpn-ecmp-support - Indicates whether Equal Cost Multipath Protocol support is enabled  (enable | disable).    owner-id - The ID of the Amazon Web Services account that owns the transit gateway.    state - The state of the transit gateway (available | deleted | deleting | modifying | pending).    transit-gateway-id - The ID of the transit gateway.    tag-key - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayIds: The IDs of the transit gateways.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTransitGateways(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTransitGatewaysResult {
        let input = DescribeTransitGatewaysRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayIds: transitGatewayIds
        )
        return try await self.describeTransitGateways(input, logger: logger)
    }

    /// Describes one or more network interface trunk associations.
    @Sendable
    @inlinable
    public func describeTrunkInterfaceAssociations(_ input: DescribeTrunkInterfaceAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeTrunkInterfaceAssociationsResult {
        try await self.client.execute(
            operation: "DescribeTrunkInterfaceAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more network interface trunk associations.
    ///
    /// Parameters:
    ///   - associationIds: The IDs of the associations.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    gre-key - The ID of a trunk interface association.    interface-protocol - The interface protocol. Valid values are VLAN and GRE.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeTrunkInterfaceAssociations(
        associationIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeTrunkInterfaceAssociationsResult {
        let input = DescribeTrunkInterfaceAssociationsRequest(
            associationIds: associationIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeTrunkInterfaceAssociations(input, logger: logger)
    }

    /// Describes the specified Amazon Web Services Verified Access endpoints.
    @Sendable
    @inlinable
    public func describeVerifiedAccessEndpoints(_ input: DescribeVerifiedAccessEndpointsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVerifiedAccessEndpointsResult {
        try await self.client.execute(
            operation: "DescribeVerifiedAccessEndpoints", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Amazon Web Services Verified Access endpoints.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - verifiedAccessEndpointIds: The ID of the Verified Access endpoint.
    ///   - verifiedAccessGroupId: The ID of the Verified Access group.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVerifiedAccessEndpoints(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        verifiedAccessEndpointIds: [String]? = nil,
        verifiedAccessGroupId: String? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVerifiedAccessEndpointsResult {
        let input = DescribeVerifiedAccessEndpointsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            verifiedAccessEndpointIds: verifiedAccessEndpointIds, 
            verifiedAccessGroupId: verifiedAccessGroupId, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return try await self.describeVerifiedAccessEndpoints(input, logger: logger)
    }

    /// Describes the specified Verified Access groups.
    @Sendable
    @inlinable
    public func describeVerifiedAccessGroups(_ input: DescribeVerifiedAccessGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVerifiedAccessGroupsResult {
        try await self.client.execute(
            operation: "DescribeVerifiedAccessGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Verified Access groups.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - verifiedAccessGroupIds: The ID of the Verified Access groups.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVerifiedAccessGroups(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        verifiedAccessGroupIds: [String]? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVerifiedAccessGroupsResult {
        let input = DescribeVerifiedAccessGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            verifiedAccessGroupIds: verifiedAccessGroupIds, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return try await self.describeVerifiedAccessGroups(input, logger: logger)
    }

    /// Describes the specified Amazon Web Services Verified Access instances.
    @Sendable
    @inlinable
    public func describeVerifiedAccessInstanceLoggingConfigurations(_ input: DescribeVerifiedAccessInstanceLoggingConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVerifiedAccessInstanceLoggingConfigurationsResult {
        try await self.client.execute(
            operation: "DescribeVerifiedAccessInstanceLoggingConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Amazon Web Services Verified Access instances.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - verifiedAccessInstanceIds: The IDs of the Verified Access instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVerifiedAccessInstanceLoggingConfigurations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        verifiedAccessInstanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVerifiedAccessInstanceLoggingConfigurationsResult {
        let input = DescribeVerifiedAccessInstanceLoggingConfigurationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            verifiedAccessInstanceIds: verifiedAccessInstanceIds
        )
        return try await self.describeVerifiedAccessInstanceLoggingConfigurations(input, logger: logger)
    }

    /// Describes the specified Amazon Web Services Verified Access instances.
    @Sendable
    @inlinable
    public func describeVerifiedAccessInstances(_ input: DescribeVerifiedAccessInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVerifiedAccessInstancesResult {
        try await self.client.execute(
            operation: "DescribeVerifiedAccessInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Amazon Web Services Verified Access instances.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - verifiedAccessInstanceIds: The IDs of the Verified Access instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVerifiedAccessInstances(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        verifiedAccessInstanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVerifiedAccessInstancesResult {
        let input = DescribeVerifiedAccessInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            verifiedAccessInstanceIds: verifiedAccessInstanceIds
        )
        return try await self.describeVerifiedAccessInstances(input, logger: logger)
    }

    /// Describes the specified Amazon Web Services Verified Access trust providers.
    @Sendable
    @inlinable
    public func describeVerifiedAccessTrustProviders(_ input: DescribeVerifiedAccessTrustProvidersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVerifiedAccessTrustProvidersResult {
        try await self.client.execute(
            operation: "DescribeVerifiedAccessTrustProviders", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified Amazon Web Services Verified Access trust providers.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - verifiedAccessTrustProviderIds: The IDs of the Verified Access trust providers.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVerifiedAccessTrustProviders(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        verifiedAccessTrustProviderIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVerifiedAccessTrustProvidersResult {
        let input = DescribeVerifiedAccessTrustProvidersRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            verifiedAccessTrustProviderIds: verifiedAccessTrustProviderIds
        )
        return try await self.describeVerifiedAccessTrustProviders(input, logger: logger)
    }

    /// Describes the specified attribute of the specified volume. You can specify only one attribute at a time. For more information about EBS volumes, see Amazon EBS volumes in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func describeVolumeAttribute(_ input: DescribeVolumeAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVolumeAttributeResult {
        try await self.client.execute(
            operation: "DescribeVolumeAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified attribute of the specified volume. You can specify only one attribute at a time. For more information about EBS volumes, see Amazon EBS volumes in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - attribute: The attribute of the volume. This parameter is required.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - volumeId: The ID of the volume.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVolumeAttribute(
        attribute: VolumeAttributeName? = nil,
        dryRun: Bool? = nil,
        volumeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVolumeAttributeResult {
        let input = DescribeVolumeAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            volumeId: volumeId
        )
        return try await self.describeVolumeAttribute(input, logger: logger)
    }

    /// Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event. The DescribeVolumeStatus operation provides the following information about the specified volumes:  Status: Reflects the current status of the volume. The possible values are ok, impaired , warning, or insufficient-data. If all checks pass, the overall status of the volume is ok. If the check fails, the overall status is impaired. If the status is insufficient-data, then the checks might still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see Monitor the status of your volumes in the Amazon EBS User Guide.  Events: Reflect the cause of a volume status and might require you to take action. For example, if your volume returns an impaired status, then the volume event might be potential-data-inconsistency. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and might have inconsistent data.  Actions: Reflect the actions you might have to take in response to an event. For example, if the status of the volume is impaired and the volume event shows potential-data-inconsistency, then the action shows enable-volume-io. This means that you may want to enable the I/O operations for the volume by calling the EnableVolumeIO action and then check the volume for data consistency. Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the error state (for example, when a volume is incapable of accepting I/O.)  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeVolumeStatus(_ input: DescribeVolumeStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVolumeStatusResult {
        try await self.client.execute(
            operation: "DescribeVolumeStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume's underlying host. If the volume's underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event. The DescribeVolumeStatus operation provides the following information about the specified volumes:  Status: Reflects the current status of the volume. The possible values are ok, impaired , warning, or insufficient-data. If all checks pass, the overall status of the volume is ok. If the check fails, the overall status is impaired. If the status is insufficient-data, then the checks might still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see Monitor the status of your volumes in the Amazon EBS User Guide.  Events: Reflect the cause of a volume status and might require you to take action. For example, if your volume returns an impaired status, then the volume event might be potential-data-inconsistency. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and might have inconsistent data.  Actions: Reflect the actions you might have to take in response to an event. For example, if the status of the volume is impaired and the volume event shows potential-data-inconsistency, then the action shows enable-volume-io. This means that you may want to enable the I/O operations for the volume by calling the EnableVolumeIO action and then check the volume for data consistency. Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the error state (for example, when a volume is incapable of accepting I/O.)  The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    action.code - The action code for the event (for example, enable-volume-io).    action.description - A description of the action.    action.event-id - The event ID associated with the action.    availability-zone - The Availability Zone of the instance.    event.description - A description of the event.    event.event-id - The event ID.    event.event-type - The event type (for io-enabled: passed | failed; for io-performance: io-performance:degraded | io-performance:severely-degraded | io-performance:stalled).    event.not-after - The latest end time for the event.    event.not-before - The earliest start time for the event.    volume-status.details-name - The cause for volume-status.status (io-enabled | io-performance).    volume-status.details-status - The status of volume-status.details-name (for io-enabled: passed | failed; for io-performance: normal | degraded | severely-degraded | stalled).    volume-status.status - The status of the volume (ok | impaired | warning | insufficient-data).
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - volumeIds: The IDs of the volumes. Default: Describes all your volumes.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVolumeStatus(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVolumeStatusResult {
        let input = DescribeVolumeStatusRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            volumeIds: volumeIds
        )
        return try await self.describeVolumeStatus(input, logger: logger)
    }

    /// Describes the specified EBS volumes or all of your EBS volumes. If you are describing a long list of volumes, we recommend that you paginate the output to make the list more manageable. For more information, see Pagination. For more information about EBS volumes, see Amazon EBS volumes in the Amazon EBS User Guide.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    @Sendable
    @inlinable
    public func describeVolumes(_ input: DescribeVolumesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVolumesResult {
        try await self.client.execute(
            operation: "DescribeVolumes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified EBS volumes or all of your EBS volumes. If you are describing a long list of volumes, we recommend that you paginate the output to make the list more manageable. For more information, see Pagination. For more information about EBS volumes, see Amazon EBS volumes in the Amazon EBS User Guide.  We strongly recommend using only paginated requests. Unpaginated requests are susceptible to throttling and timeouts.   The order of the elements in the response, including those within nested structures, might vary. Applications should not assume the elements appear in a particular order.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - Indicates whether the volume is encrypted (true | false)    fast-restored - Indicates whether the volume was created from a  snapshot that is enabled for fast snapshot restore (true |  false).    multi-attach-enabled - Indicates whether the volume is enabled for Multi-Attach (true 			| false)    operator.managed - A Boolean that indicates whether this is a managed volume.    operator.principal - The principal that manages the volume. Only valid for managed volumes, where managed is true.    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The state of the volume (creating | available | in-use | deleting | deleted | error).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type (gp2 | gp3 | io1 | io2 |  st1 | sc1| standard)
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - volumeIds: The volume IDs. If not specified, then all volumes are included in the response.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVolumes(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVolumesResult {
        let input = DescribeVolumesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            volumeIds: volumeIds
        )
        return try await self.describeVolumes(input, logger: logger)
    }

    /// Describes the most recent volume modification request for the specified EBS volumes. For more information, see  Monitor the progress of volume modifications in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func describeVolumesModifications(_ input: DescribeVolumesModificationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVolumesModificationsResult {
        try await self.client.execute(
            operation: "DescribeVolumesModifications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the most recent volume modification request for the specified EBS volumes. For more information, see  Monitor the progress of volume modifications in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    modification-state - The current modification state (modifying |  optimizing | completed | failed).    original-iops - The original IOPS rate of the volume.    original-size - The original size of the volume, in GiB.    original-volume-type - The original volume type of the volume (standard |  io1 | io2 | gp2 | sc1 | st1).    originalMultiAttachEnabled - Indicates whether Multi-Attach support was enabled (true | false).    start-time - The modification start time.    target-iops - The target IOPS rate of the volume.    target-size - The target size of the volume, in GiB.    target-volume-type - The target volume type of the volume (standard |  io1 | io2 | gp2 | sc1 | st1).    targetMultiAttachEnabled - Indicates whether Multi-Attach support is to be enabled (true | false).    volume-id - The ID of the volume.
    ///   - maxResults: The maximum number of results (up to a limit of 500) to be returned in a paginated request. For more information, see Pagination.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - volumeIds: The IDs of the volumes.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVolumesModifications(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVolumesModificationsResult {
        let input = DescribeVolumesModificationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            volumeIds: volumeIds
        )
        return try await self.describeVolumesModifications(input, logger: logger)
    }

    /// Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.
    @Sendable
    @inlinable
    public func describeVpcAttribute(_ input: DescribeVpcAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcAttributeResult {
        try await self.client.execute(
            operation: "DescribeVpcAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.
    ///
    /// Parameters:
    ///   - attribute: The VPC attribute.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcAttribute(
        attribute: VpcAttributeName? = nil,
        dryRun: Bool? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcAttributeResult {
        let input = DescribeVpcAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            vpcId: vpcId
        )
        return try await self.describeVpcAttribute(input, logger: logger)
    }

    /// Describe VPC Block Public Access (BPA) exclusions. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func describeVpcBlockPublicAccessExclusions(_ input: DescribeVpcBlockPublicAccessExclusionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcBlockPublicAccessExclusionsResult {
        try await self.client.execute(
            operation: "DescribeVpcBlockPublicAccessExclusions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describe VPC Block Public Access (BPA) exclusions. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - exclusionIds: IDs of exclusions.
    ///   - filters: Filters for the request:    resource-arn - The Amazon Resource Name (ARN) of a exclusion.    internet-gateway-exclusion-mode - The mode of a VPC BPA exclusion. Possible values: allow-bidirectional | allow-egress.    state - The state of VPC BPA. Possible values: create-in-progress | create-complete | update-in-progress | update-complete | delete-in-progress | deleted-complete | disable-in-progress | disable-complete     tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    tag-value: The value of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific value, regardless of the tag key.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcBlockPublicAccessExclusions(
        dryRun: Bool? = nil,
        exclusionIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcBlockPublicAccessExclusionsResult {
        let input = DescribeVpcBlockPublicAccessExclusionsRequest(
            dryRun: dryRun, 
            exclusionIds: exclusionIds, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeVpcBlockPublicAccessExclusions(input, logger: logger)
    }

    /// Describe VPC Block Public Access (BPA) options. VPC Block Public Access (BPA) enables you to block resources in VPCs and subnets that you own in a Region from reaching or being reached from the internet through internet gateways and egress-only internet gateways. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func describeVpcBlockPublicAccessOptions(_ input: DescribeVpcBlockPublicAccessOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcBlockPublicAccessOptionsResult {
        try await self.client.execute(
            operation: "DescribeVpcBlockPublicAccessOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describe VPC Block Public Access (BPA) options. VPC Block Public Access (BPA) enables you to block resources in VPCs and subnets that you own in a Region from reaching or being reached from the internet through internet gateways and egress-only internet gateways. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcBlockPublicAccessOptions(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcBlockPublicAccessOptionsResult {
        let input = DescribeVpcBlockPublicAccessOptionsRequest(
            dryRun: dryRun
        )
        return try await self.describeVpcBlockPublicAccessOptions(input, logger: logger)
    }

    ///  This action is deprecated.  Describes the ClassicLink status of the specified VPCs.
    @Sendable
    @inlinable
    public func describeVpcClassicLink(_ input: DescribeVpcClassicLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcClassicLinkResult {
        try await self.client.execute(
            operation: "DescribeVpcClassicLink", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Describes the ClassicLink status of the specified VPCs.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    is-classic-link-enabled - Whether the VPC is enabled for ClassicLink
    ///   - vpcIds: The VPCs for which you want to describe the ClassicLink status.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcClassicLink(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        vpcIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcClassicLinkResult {
        let input = DescribeVpcClassicLinkRequest(
            dryRun: dryRun, 
            filters: filters, 
            vpcIds: vpcIds
        )
        return try await self.describeVpcClassicLink(input, logger: logger)
    }

    ///  This action is deprecated.  Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance.
    @Sendable
    @inlinable
    public func describeVpcClassicLinkDnsSupport(_ input: DescribeVpcClassicLinkDnsSupportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcClassicLinkDnsSupportResult {
        try await self.client.execute(
            operation: "DescribeVpcClassicLinkDnsSupport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance.
    ///
    /// Parameters:
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - vpcIds: The IDs of the VPCs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcClassicLinkDnsSupport(
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcClassicLinkDnsSupportResult {
        let input = DescribeVpcClassicLinkDnsSupportRequest(
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcIds: vpcIds
        )
        return try await self.describeVpcClassicLinkDnsSupport(input, logger: logger)
    }

    /// Describes the VPC resources, VPC endpoint services, Amazon Lattice services, or service networks associated with the VPC endpoint.
    @Sendable
    @inlinable
    public func describeVpcEndpointAssociations(_ input: DescribeVpcEndpointAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcEndpointAssociationsResult {
        try await self.client.execute(
            operation: "DescribeVpcEndpointAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the VPC resources, VPC endpoint services, Amazon Lattice services, or service networks associated with the VPC endpoint.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    vpc-endpoint-id - The ID of the VPC endpoint.    associated-resource-accessibility - The association state. When the state is accessible, it returns AVAILABLE. When the state is inaccessible, it returns PENDING or FAILED.    association-id - The ID of the VPC endpoint association.    associated-resource-id - The ID of the associated resource configuration.    service-network-arn - The Amazon Resource Name (ARN) of the associated service network. Only VPC endpoints of type service network will be returned.    resource-configuration-group-arn - The Amazon Resource Name (ARN) of the resource configuration of type GROUP.    service-network-resource-association-id - The ID of the association.
    ///   - maxResults: The maximum page size.
    ///   - nextToken: The pagination token.
    ///   - vpcEndpointIds: The IDs of the VPC endpoints.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcEndpointAssociations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcEndpointIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcEndpointAssociationsResult {
        let input = DescribeVpcEndpointAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcEndpointIds: vpcEndpointIds
        )
        return try await self.describeVpcEndpointAssociations(input, logger: logger)
    }

    /// Describes the connection notifications for VPC endpoints and VPC endpoint services.
    @Sendable
    @inlinable
    public func describeVpcEndpointConnectionNotifications(_ input: DescribeVpcEndpointConnectionNotificationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcEndpointConnectionNotificationsResult {
        try await self.client.execute(
            operation: "DescribeVpcEndpointConnectionNotifications", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the connection notifications for VPC endpoints and VPC endpoint services.
    ///
    /// Parameters:
    ///   - connectionNotificationId: The ID of the notification.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    connection-notification-arn - The ARN of the SNS topic for the notification.    connection-notification-id - The ID of the notification.    connection-notification-state - The state of the notification (Enabled | Disabled).    connection-notification-type - The type of notification (Topic).    service-id - The ID of the endpoint service.    vpc-endpoint-id - The ID of the VPC endpoint.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value.
    ///   - nextToken: The token to request the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcEndpointConnectionNotifications(
        connectionNotificationId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcEndpointConnectionNotificationsResult {
        let input = DescribeVpcEndpointConnectionNotificationsRequest(
            connectionNotificationId: connectionNotificationId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeVpcEndpointConnectionNotifications(input, logger: logger)
    }

    /// Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.
    @Sendable
    @inlinable
    public func describeVpcEndpointConnections(_ input: DescribeVpcEndpointConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcEndpointConnectionsResult {
        try await self.client.execute(
            operation: "DescribeVpcEndpointConnections", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    ip-address-type - The IP address type (ipv4 | ipv6).    service-id - The ID of the service.    vpc-endpoint-owner - The ID of the Amazon Web Services account ID
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcEndpointConnections(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcEndpointConnectionsResult {
        let input = DescribeVpcEndpointConnectionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.describeVpcEndpointConnections(input, logger: logger)
    }

    /// Describes the VPC endpoint service configurations in your account (your services).
    @Sendable
    @inlinable
    public func describeVpcEndpointServiceConfigurations(_ input: DescribeVpcEndpointServiceConfigurationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcEndpointServiceConfigurationsResult {
        try await self.client.execute(
            operation: "DescribeVpcEndpointServiceConfigurations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the VPC endpoint service configurations in your account (your services).
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    service-name - The name of the service.    service-id - The ID of the service.    service-state - The state of the service (Pending | Available | Deleting | Deleted | Failed).     supported-ip-address-types - The IP address type (ipv4 | ipv6).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - serviceIds: The IDs of the endpoint services.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcEndpointServiceConfigurations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        serviceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcEndpointServiceConfigurationsResult {
        let input = DescribeVpcEndpointServiceConfigurationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            serviceIds: serviceIds
        )
        return try await self.describeVpcEndpointServiceConfigurations(input, logger: logger)
    }

    /// Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.
    @Sendable
    @inlinable
    public func describeVpcEndpointServicePermissions(_ input: DescribeVpcEndpointServicePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcEndpointServicePermissionsResult {
        try await self.client.execute(
            operation: "DescribeVpcEndpointServicePermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    principal - The ARN of the principal.    principal-type - The principal type (All |
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
    ///   - nextToken: The token to retrieve the next page of results.
    ///   - serviceId: The ID of the service.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcEndpointServicePermissions(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        serviceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcEndpointServicePermissionsResult {
        let input = DescribeVpcEndpointServicePermissionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            serviceId: serviceId
        )
        return try await self.describeVpcEndpointServicePermissions(input, logger: logger)
    }

    /// Describes available services to which you can create a VPC endpoint. When the service provider and the consumer have different accounts in multiple Availability Zones, and the consumer views the VPC endpoint service information, the response only includes the common Availability Zones. For example, when the service provider account uses us-east-1a and us-east-1c and the consumer uses us-east-1a and us-east-1b, the response includes the VPC endpoint services in the common Availability Zone, us-east-1a.
    @Sendable
    @inlinable
    public func describeVpcEndpointServices(_ input: DescribeVpcEndpointServicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcEndpointServicesResult {
        try await self.client.execute(
            operation: "DescribeVpcEndpointServices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes available services to which you can create a VPC endpoint. When the service provider and the consumer have different accounts in multiple Availability Zones, and the consumer views the VPC endpoint service information, the response only includes the common Availability Zones. For example, when the service provider account uses us-east-1a and us-east-1c and the consumer uses us-east-1a and us-east-1b, the response includes the VPC endpoint services in the common Availability Zone, us-east-1a.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    owner - The ID or alias of the Amazon Web Services account that owns  the service.    service-name - The name of the service.    service-region - The Region of the service.    service-type - The type of service (Interface | Gateway | GatewayLoadBalancer).    supported-ip-address-types - The IP address type (ipv4 | ipv6).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a prior call.)
    ///   - serviceNames: The service names.
    ///   - serviceRegions: The service Regions.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcEndpointServices(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        serviceNames: [String]? = nil,
        serviceRegions: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcEndpointServicesResult {
        let input = DescribeVpcEndpointServicesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            serviceNames: serviceNames, 
            serviceRegions: serviceRegions
        )
        return try await self.describeVpcEndpointServices(input, logger: logger)
    }

    /// Describes your VPC endpoints. The default is to describe all your VPC endpoints.  Alternatively, you can specify specific VPC endpoint IDs or filter the results to include only the VPC endpoints that match specific criteria.
    @Sendable
    @inlinable
    public func describeVpcEndpoints(_ input: DescribeVpcEndpointsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcEndpointsResult {
        try await self.client.execute(
            operation: "DescribeVpcEndpoints", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your VPC endpoints. The default is to describe all your VPC endpoints.  Alternatively, you can specify specific VPC endpoint IDs or filter the results to include only the VPC endpoints that match specific criteria.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    ip-address-type - The IP address type (ipv4 | ipv6).    service-name - The name of the service.    service-region - The Region of the service.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the endpoint resides.    vpc-endpoint-id - The ID of the endpoint.    vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).    vpc-endpoint-type - The type of VPC endpoint (Interface | Gateway | GatewayLoadBalancer).
    ///   - maxResults: The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
    ///   - nextToken: The token for the next set of items to return. (You received this token from a prior call.)
    ///   - vpcEndpointIds: The IDs of the VPC endpoints.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcEndpoints(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcEndpointIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcEndpointsResult {
        let input = DescribeVpcEndpointsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcEndpointIds: vpcEndpointIds
        )
        return try await self.describeVpcEndpoints(input, logger: logger)
    }

    /// Describes your VPC peering connections. The default is to describe all your VPC peering connections.  Alternatively, you can specify specific VPC peering connection IDs or filter the results to include only the VPC peering connections that match specific criteria.
    @Sendable
    @inlinable
    public func describeVpcPeeringConnections(_ input: DescribeVpcPeeringConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcPeeringConnectionsResult {
        try await self.client.execute(
            operation: "DescribeVpcPeeringConnections", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your VPC peering connections. The default is to describe all your VPC peering connections.  Alternatively, you can specify specific VPC peering connection IDs or filter the results to include only the VPC peering connections that match specific criteria.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.    accepter-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the accepter VPC.    accepter-vpc-info.vpc-id - The ID of the accepter VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleting | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-peering-connection-id - The ID of the VPC peering connection.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - vpcPeeringConnectionIds: The IDs of the VPC peering connections. Default: Describes all your VPC peering connections.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcPeeringConnections(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcPeeringConnectionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcPeeringConnectionsResult {
        let input = DescribeVpcPeeringConnectionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcPeeringConnectionIds: vpcPeeringConnectionIds
        )
        return try await self.describeVpcPeeringConnections(input, logger: logger)
    }

    /// Describes your VPCs. The default is to describe all your VPCs.  Alternatively, you can specify specific VPC IDs or filter the results to include only the VPCs that match specific criteria.
    @Sendable
    @inlinable
    public func describeVpcs(_ input: DescribeVpcsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpcsResult {
        try await self.client.execute(
            operation: "DescribeVpcs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes your VPCs. The default is to describe all your VPCs.  Alternatively, you can specify specific VPC IDs or filter the results to include only the VPCs that match specific criteria.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    cidr-block-association.cidr-block - An IPv4 CIDR block associated with the VPC.    cidr-block-association.association-id - The association ID for an IPv4 CIDR block associated with the VPC.    cidr-block-association.state - The state of an IPv4 CIDR block associated with the VPC.    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.ipv6-pool - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    is-default - Indicates whether the VPC is the default VPC.    owner-id - The ID of the Amazon Web Services account that owns the VPC.    state - The state of the VPC (pending | available).    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - vpcIds: The IDs of the VPCs.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpcs(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpcsResult {
        let input = DescribeVpcsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcIds: vpcIds
        )
        return try await self.describeVpcs(input, logger: logger)
    }

    /// Describes one or more of your VPN connections. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    @Sendable
    @inlinable
    public func describeVpnConnections(_ input: DescribeVpnConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpnConnectionsResult {
        try await self.client.execute(
            operation: "DescribeVpnConnections", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your VPN connections. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    customer-gateway-configuration - The configuration information for the customer gateway.    customer-gateway-id - The ID of a customer gateway associated with the VPN connection.    state - The state of the VPN connection (pending | available | deleting | deleted).    option.static-routes-only - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).    route.destination-cidr-block - The destination CIDR block. This corresponds to the subnet used in a customer data center.    bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP device.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of VPN connection. Currently the only supported type is ipsec.1.    vpn-connection-id - The ID of the VPN connection.    vpn-gateway-id - The ID of a virtual private gateway associated with the VPN connection.    transit-gateway-id - The ID of a transit gateway associated with the VPN connection.
    ///   - vpnConnectionIds: One or more VPN connection IDs. Default: Describes your VPN connections.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpnConnections(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        vpnConnectionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpnConnectionsResult {
        let input = DescribeVpnConnectionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            vpnConnectionIds: vpnConnectionIds
        )
        return try await self.describeVpnConnections(input, logger: logger)
    }

    /// Describes one or more of your virtual private gateways. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    @Sendable
    @inlinable
    public func describeVpnGateways(_ input: DescribeVpnGatewaysRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DescribeVpnGatewaysResult {
        try await self.client.execute(
            operation: "DescribeVpnGateways", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes one or more of your virtual private gateways. For more information, see Amazon Web Services Site-to-Site VPN in the Amazon Web Services Site-to-Site VPN User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    amazon-side-asn - The Autonomous System Number (ASN) for the Amazon side of the gateway.    attachment.state - The current state of the attachment between the gateway and the VPC (attaching | attached | detaching | detached).    attachment.vpc-id - The ID of an attached VPC.    availability-zone - The Availability Zone for the virtual private gateway (if applicable).    state - The state of the virtual private gateway (pending | available | deleting | deleted).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of virtual private gateway. Currently the only supported type is ipsec.1.    vpn-gateway-id - The ID of the virtual private gateway.
    ///   - vpnGatewayIds: One or more virtual private gateway IDs. Default: Describes all your virtual private gateways.
    ///   - logger: Logger use during operation
    @inlinable
    public func describeVpnGateways(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        vpnGatewayIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DescribeVpnGatewaysResult {
        let input = DescribeVpnGatewaysRequest(
            dryRun: dryRun, 
            filters: filters, 
            vpnGatewayIds: vpnGatewayIds
        )
        return try await self.describeVpnGateways(input, logger: logger)
    }

    ///  This action is deprecated.  Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked,
    /// 		    the VPC security groups are no longer associated with it. An instance is automatically unlinked from
    /// 		    a VPC when it's stopped.
    @Sendable
    @inlinable
    public func detachClassicLinkVpc(_ input: DetachClassicLinkVpcRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DetachClassicLinkVpcResult {
        try await self.client.execute(
            operation: "DetachClassicLinkVpc", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked,
    /// 		    the VPC security groups are no longer associated with it. An instance is automatically unlinked from
    /// 		    a VPC when it's stopped.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance to unlink from the VPC.
    ///   - vpcId: The ID of the VPC to which the instance is linked.
    ///   - logger: Logger use during operation
    @inlinable
    public func detachClassicLinkVpc(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DetachClassicLinkVpcResult {
        let input = DetachClassicLinkVpcRequest(
            dryRun: dryRun, 
            instanceId: instanceId, 
            vpcId: vpcId
        )
        return try await self.detachClassicLinkVpc(input, logger: logger)
    }

    /// Detaches an internet gateway from a VPC, disabling connectivity between the internet
    /// 			and the VPC. The VPC must not contain any running instances with Elastic IP addresses or
    /// 			public IPv4 addresses.
    @Sendable
    @inlinable
    public func detachInternetGateway(_ input: DetachInternetGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DetachInternetGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Detaches an internet gateway from a VPC, disabling connectivity between the internet
    /// 			and the VPC. The VPC must not contain any running instances with Elastic IP addresses or
    /// 			public IPv4 addresses.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - internetGatewayId: The ID of the internet gateway.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func detachInternetGateway(
        dryRun: Bool? = nil,
        internetGatewayId: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DetachInternetGatewayRequest(
            dryRun: dryRun, 
            internetGatewayId: internetGatewayId, 
            vpcId: vpcId
        )
        return try await self.detachInternetGateway(input, logger: logger)
    }

    /// Detaches a network interface from an instance.
    @Sendable
    @inlinable
    public func detachNetworkInterface(_ input: DetachNetworkInterfaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DetachNetworkInterface", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Detaches a network interface from an instance.
    ///
    /// Parameters:
    ///   - attachmentId: The ID of the attachment.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - force: Specifies whether to force a detachment.    Use the Force parameter only as a last resort to detach a network interface from a failed instance.    If you use the Force parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.   If you force the detachment of a network interface, the instance metadata might not get updated. This means that the attributes associated with the detached network interface might still be visible. The instance metadata will get updated when you stop and start the instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func detachNetworkInterface(
        attachmentId: String? = nil,
        dryRun: Bool? = nil,
        force: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DetachNetworkInterfaceRequest(
            attachmentId: attachmentId, 
            dryRun: dryRun, 
            force: force
        )
        return try await self.detachNetworkInterface(input, logger: logger)
    }

    /// Detaches the specified Amazon Web Services Verified Access trust provider from the specified Amazon Web Services Verified Access instance.
    @Sendable
    @inlinable
    public func detachVerifiedAccessTrustProvider(_ input: DetachVerifiedAccessTrustProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DetachVerifiedAccessTrustProviderResult {
        try await self.client.execute(
            operation: "DetachVerifiedAccessTrustProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Detaches the specified Amazon Web Services Verified Access trust provider from the specified Amazon Web Services Verified Access instance.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - verifiedAccessTrustProviderId: The ID of the Verified Access trust provider.
    ///   - logger: Logger use during operation
    @inlinable
    public func detachVerifiedAccessTrustProvider(
        clientToken: String? = DetachVerifiedAccessTrustProviderRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        verifiedAccessInstanceId: String? = nil,
        verifiedAccessTrustProviderId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DetachVerifiedAccessTrustProviderResult {
        let input = DetachVerifiedAccessTrustProviderRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            verifiedAccessInstanceId: verifiedAccessInstanceId, 
            verifiedAccessTrustProviderId: verifiedAccessTrustProviderId
        )
        return try await self.detachVerifiedAccessTrustProvider(input, logger: logger)
    }

    /// Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the busy state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first. When a volume with an Amazon Web Services Marketplace product code is detached from an instance, the product code is no longer associated with the instance. You can't detach or force detach volumes that are attached to Amazon ECS or  Fargate tasks. Attempting to do this results in the UnsupportedOperationException  exception with the Unable to detach volume attached to ECS tasks error message. For more information, see Detach an Amazon EBS volume in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func detachVolume(_ input: DetachVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> VolumeAttachment {
        try await self.client.execute(
            operation: "DetachVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the busy state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can't be detached while the instance is running. To detach the root volume, stop the instance first. When a volume with an Amazon Web Services Marketplace product code is detached from an instance, the product code is no longer associated with the instance. You can't detach or force detach volumes that are attached to Amazon ECS or  Fargate tasks. Attempting to do this results in the UnsupportedOperationException  exception with the Unable to detach volume attached to ECS tasks error message. For more information, see Detach an Amazon EBS volume in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - device: The device name.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - force: Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
    ///   - instanceId: The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.
    ///   - volumeId: The ID of the volume.
    ///   - logger: Logger use during operation
    @inlinable
    public func detachVolume(
        device: String? = nil,
        dryRun: Bool? = nil,
        force: Bool? = nil,
        instanceId: String? = nil,
        volumeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> VolumeAttachment {
        let input = DetachVolumeRequest(
            device: device, 
            dryRun: dryRun, 
            force: force, 
            instanceId: instanceId, 
            volumeId: volumeId
        )
        return try await self.detachVolume(input, logger: logger)
    }

    /// Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described). You must wait for the attachment's state to switch to detached before you can delete the VPC or attach a different VPC to the virtual private gateway.
    @Sendable
    @inlinable
    public func detachVpnGateway(_ input: DetachVpnGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DetachVpnGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Detaches a virtual private gateway from a VPC. You do this if you're planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described). You must wait for the attachment's state to switch to detached before you can delete the VPC or attach a different VPC to the virtual private gateway.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - vpcId: The ID of the VPC.
    ///   - vpnGatewayId: The ID of the virtual private gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func detachVpnGateway(
        dryRun: Bool? = nil,
        vpcId: String? = nil,
        vpnGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DetachVpnGatewayRequest(
            dryRun: dryRun, 
            vpcId: vpcId, 
            vpnGatewayId: vpnGatewayId
        )
        return try await self.detachVpnGateway(input, logger: logger)
    }

    /// Disables Elastic IP address transfer. For more information, see Transfer Elastic IP addresses in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func disableAddressTransfer(_ input: DisableAddressTransferRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableAddressTransferResult {
        try await self.client.execute(
            operation: "DisableAddressTransfer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables Elastic IP address transfer. For more information, see Transfer Elastic IP addresses in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - allocationId: The allocation ID of an Elastic IP address.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableAddressTransfer(
        allocationId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableAddressTransferResult {
        let input = DisableAddressTransferRequest(
            allocationId: allocationId, 
            dryRun: dryRun
        )
        return try await self.disableAddressTransfer(input, logger: logger)
    }

    /// Disables Allowed AMIs for your account in the specified Amazon Web Services Region. When set to disabled, the image criteria in your Allowed AMIs settings do not apply, and no restrictions are placed on AMI discoverability or usage. Users in your account can launch instances using any public AMI or AMI shared with your account.  The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.  For more information, see Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs in Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func disableAllowedImagesSettings(_ input: DisableAllowedImagesSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableAllowedImagesSettingsResult {
        try await self.client.execute(
            operation: "DisableAllowedImagesSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables Allowed AMIs for your account in the specified Amazon Web Services Region. When set to disabled, the image criteria in your Allowed AMIs settings do not apply, and no restrictions are placed on AMI discoverability or usage. Users in your account can launch instances using any public AMI or AMI shared with your account.  The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.  For more information, see Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs in Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - logger: Logger use during operation
    @inlinable
    public func disableAllowedImagesSettings(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableAllowedImagesSettingsResult {
        let input = DisableAllowedImagesSettingsRequest(
            dryRun: dryRun
        )
        return try await self.disableAllowedImagesSettings(input, logger: logger)
    }

    /// Disables Infrastructure Performance metric subscriptions.
    @Sendable
    @inlinable
    public func disableAwsNetworkPerformanceMetricSubscription(_ input: DisableAwsNetworkPerformanceMetricSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableAwsNetworkPerformanceMetricSubscriptionResult {
        try await self.client.execute(
            operation: "DisableAwsNetworkPerformanceMetricSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables Infrastructure Performance metric subscriptions.
    ///
    /// Parameters:
    ///   - destination: The target Region or Availability Zone that the metric subscription is disabled for. For example, eu-north-1.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - metric: The metric used for the disabled subscription.
    ///   - source: The source Region or Availability Zone that the metric subscription is disabled for. For example, us-east-1.
    ///   - statistic: The statistic used for the disabled subscription.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableAwsNetworkPerformanceMetricSubscription(
        destination: String? = nil,
        dryRun: Bool? = nil,
        metric: MetricType? = nil,
        source: String? = nil,
        statistic: StatisticType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableAwsNetworkPerformanceMetricSubscriptionResult {
        let input = DisableAwsNetworkPerformanceMetricSubscriptionRequest(
            destination: destination, 
            dryRun: dryRun, 
            metric: metric, 
            source: source, 
            statistic: statistic
        )
        return try await self.disableAwsNetworkPerformanceMetricSubscription(input, logger: logger)
    }

    /// Disables EBS encryption by default for your account in the current Region. After you disable encryption by default, you can still create encrypted volumes by  enabling encryption when you create each volume. Disabling encryption by default does not change the encryption status of your existing volumes. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func disableEbsEncryptionByDefault(_ input: DisableEbsEncryptionByDefaultRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableEbsEncryptionByDefaultResult {
        try await self.client.execute(
            operation: "DisableEbsEncryptionByDefault", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables EBS encryption by default for your account in the current Region. After you disable encryption by default, you can still create encrypted volumes by  enabling encryption when you create each volume. Disabling encryption by default does not change the encryption status of your existing volumes. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableEbsEncryptionByDefault(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableEbsEncryptionByDefaultResult {
        let input = DisableEbsEncryptionByDefaultRequest(
            dryRun: dryRun
        )
        return try await self.disableEbsEncryptionByDefault(input, logger: logger)
    }

    /// Discontinue Windows fast launch for a Windows AMI, and clean up existing pre-provisioned snapshots. After you disable Windows fast launch, the AMI uses the standard launch process for each new instance. Amazon EC2 must remove all pre-provisioned snapshots before you can enable Windows fast launch again.  You can only change these settings for Windows AMIs that you own or that have been shared with you.
    @Sendable
    @inlinable
    public func disableFastLaunch(_ input: DisableFastLaunchRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableFastLaunchResult {
        try await self.client.execute(
            operation: "DisableFastLaunch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Discontinue Windows fast launch for a Windows AMI, and clean up existing pre-provisioned snapshots. After you disable Windows fast launch, the AMI uses the standard launch process for each new instance. Amazon EC2 must remove all pre-provisioned snapshots before you can enable Windows fast launch again.  You can only change these settings for Windows AMIs that you own or that have been shared with you.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - force: Forces the image settings to turn off Windows fast launch for your Windows AMI. This parameter overrides any errors that are encountered while cleaning up resources in your account.
    ///   - imageId: Specify the ID of the image for which to disable Windows fast launch.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableFastLaunch(
        dryRun: Bool? = nil,
        force: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableFastLaunchResult {
        let input = DisableFastLaunchRequest(
            dryRun: dryRun, 
            force: force, 
            imageId: imageId
        )
        return try await self.disableFastLaunch(input, logger: logger)
    }

    /// Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.
    @Sendable
    @inlinable
    public func disableFastSnapshotRestores(_ input: DisableFastSnapshotRestoresRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableFastSnapshotRestoresResult {
        try await self.client.execute(
            operation: "DisableFastSnapshotRestores", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.
    ///
    /// Parameters:
    ///   - availabilityZones: One or more Availability Zones. For example, us-east-2a.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - sourceSnapshotIds: The IDs of one or more snapshots. For example, snap-1234567890abcdef0.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableFastSnapshotRestores(
        availabilityZones: [String]? = nil,
        dryRun: Bool? = nil,
        sourceSnapshotIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableFastSnapshotRestoresResult {
        let input = DisableFastSnapshotRestoresRequest(
            availabilityZones: availabilityZones, 
            dryRun: dryRun, 
            sourceSnapshotIds: sourceSnapshotIds
        )
        return try await self.disableFastSnapshotRestores(input, logger: logger)
    }

    /// Sets the AMI state to disabled and removes all launch permissions from the AMI. A disabled AMI can't be used for instance launches. A disabled AMI can't be shared. If an AMI was public or previously shared, it is made private. If an AMI was shared with an Amazon Web Services account, organization, or Organizational Unit, they lose access to the disabled AMI.  A disabled AMI does not appear in DescribeImages API calls by default. Only the AMI owner can disable an AMI. You can re-enable a disabled AMI using EnableImage. For more information, see Disable an AMI in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func disableImage(_ input: DisableImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableImageResult {
        try await self.client.execute(
            operation: "DisableImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets the AMI state to disabled and removes all launch permissions from the AMI. A disabled AMI can't be used for instance launches. A disabled AMI can't be shared. If an AMI was public or previously shared, it is made private. If an AMI was shared with an Amazon Web Services account, organization, or Organizational Unit, they lose access to the disabled AMI.  A disabled AMI does not appear in DescribeImages API calls by default. Only the AMI owner can disable an AMI. You can re-enable a disabled AMI using EnableImage. For more information, see Disable an AMI in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableImage(
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableImageResult {
        let input = DisableImageRequest(
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.disableImage(input, logger: logger)
    }

    /// Disables block public access for AMIs at the account level in the specified Amazon Web Services Region. This removes the block public access restriction from your account. With the restriction removed, you can publicly share your AMIs in the specified Amazon Web Services Region. The API can take up to 10 minutes to configure this setting. During this time, if you run GetImageBlockPublicAccessState, the response will be block-new-sharing. When the API has completed the configuration, the response will be unblocked. For more information, see Block public access to your AMIs in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func disableImageBlockPublicAccess(_ input: DisableImageBlockPublicAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableImageBlockPublicAccessResult {
        try await self.client.execute(
            operation: "DisableImageBlockPublicAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables block public access for AMIs at the account level in the specified Amazon Web Services Region. This removes the block public access restriction from your account. With the restriction removed, you can publicly share your AMIs in the specified Amazon Web Services Region. The API can take up to 10 minutes to configure this setting. During this time, if you run GetImageBlockPublicAccessState, the response will be block-new-sharing. When the API has completed the configuration, the response will be unblocked. For more information, see Block public access to your AMIs in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - logger: Logger use during operation
    @inlinable
    public func disableImageBlockPublicAccess(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableImageBlockPublicAccessResult {
        let input = DisableImageBlockPublicAccessRequest(
            dryRun: dryRun
        )
        return try await self.disableImageBlockPublicAccess(input, logger: logger)
    }

    /// Cancels the deprecation of the specified AMI. For more information, see Deprecate an AMI in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func disableImageDeprecation(_ input: DisableImageDeprecationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableImageDeprecationResult {
        try await self.client.execute(
            operation: "DisableImageDeprecation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels the deprecation of the specified AMI. For more information, see Deprecate an AMI in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableImageDeprecation(
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableImageDeprecationResult {
        let input = DisableImageDeprecationRequest(
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.disableImageDeprecation(input, logger: logger)
    }

    /// Disables deregistration protection for an AMI. When deregistration protection is disabled, the AMI can be deregistered. If you chose to include a 24-hour cooldown period when you enabled deregistration protection for the AMI, then, when you disable deregistration protection, you won’t immediately be able to deregister the AMI. For more information, see Protect an AMI from deregistration in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func disableImageDeregistrationProtection(_ input: DisableImageDeregistrationProtectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableImageDeregistrationProtectionResult {
        try await self.client.execute(
            operation: "DisableImageDeregistrationProtection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables deregistration protection for an AMI. When deregistration protection is disabled, the AMI can be deregistered. If you chose to include a 24-hour cooldown period when you enabled deregistration protection for the AMI, then, when you disable deregistration protection, you won’t immediately be able to deregister the AMI. For more information, see Protect an AMI from deregistration in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableImageDeregistrationProtection(
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableImageDeregistrationProtectionResult {
        let input = DisableImageDeregistrationProtectionRequest(
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.disableImageDeregistrationProtection(input, logger: logger)
    }

    /// Disable the IPAM account. For more information, see Enable integration with Organizations in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func disableIpamOrganizationAdminAccount(_ input: DisableIpamOrganizationAdminAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableIpamOrganizationAdminAccountResult {
        try await self.client.execute(
            operation: "DisableIpamOrganizationAdminAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disable the IPAM account. For more information, see Enable integration with Organizations in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - delegatedAdminAccountId: The Organizations member account ID that you want to disable as IPAM account.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableIpamOrganizationAdminAccount(
        delegatedAdminAccountId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableIpamOrganizationAdminAccountResult {
        let input = DisableIpamOrganizationAdminAccountRequest(
            delegatedAdminAccountId: delegatedAdminAccountId, 
            dryRun: dryRun
        )
        return try await self.disableIpamOrganizationAdminAccount(input, logger: logger)
    }

    /// Disables access to the EC2 serial console of all instances for your account. By default,
    /// 			access to the EC2 serial console is disabled for your account. For more information, see
    /// 				Manage account access to the EC2 serial console in the Amazon EC2
    /// 				User Guide.
    @Sendable
    @inlinable
    public func disableSerialConsoleAccess(_ input: DisableSerialConsoleAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableSerialConsoleAccessResult {
        try await self.client.execute(
            operation: "DisableSerialConsoleAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables access to the EC2 serial console of all instances for your account. By default,
    /// 			access to the EC2 serial console is disabled for your account. For more information, see
    /// 				Manage account access to the EC2 serial console in the Amazon EC2
    /// 				User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableSerialConsoleAccess(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableSerialConsoleAccessResult {
        let input = DisableSerialConsoleAccessRequest(
            dryRun: dryRun
        )
        return try await self.disableSerialConsoleAccess(input, logger: logger)
    }

    /// Disables the block public access for snapshots setting at  the account level for the specified Amazon Web Services Region. After you disable block public  access for snapshots in a Region, users can publicly share snapshots in that Region.  Enabling block public access for snapshots in block-all-sharing  mode does not change the permissions for snapshots that are already publicly shared.  Instead, it prevents these snapshots from be publicly visible and publicly accessible.  Therefore, the attributes for these snapshots still indicate that they are publicly  shared, even though they are not publicly available. If you disable block public access , these snapshots will become publicly available  again.  For more information, see  Block public access for snapshots in the Amazon EBS User Guide .
    @Sendable
    @inlinable
    public func disableSnapshotBlockPublicAccess(_ input: DisableSnapshotBlockPublicAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableSnapshotBlockPublicAccessResult {
        try await self.client.execute(
            operation: "DisableSnapshotBlockPublicAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables the block public access for snapshots setting at  the account level for the specified Amazon Web Services Region. After you disable block public  access for snapshots in a Region, users can publicly share snapshots in that Region.  Enabling block public access for snapshots in block-all-sharing  mode does not change the permissions for snapshots that are already publicly shared.  Instead, it prevents these snapshots from be publicly visible and publicly accessible.  Therefore, the attributes for these snapshots still indicate that they are publicly  shared, even though they are not publicly available. If you disable block public access , these snapshots will become publicly available  again.  For more information, see  Block public access for snapshots in the Amazon EBS User Guide .
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableSnapshotBlockPublicAccess(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableSnapshotBlockPublicAccessResult {
        let input = DisableSnapshotBlockPublicAccessRequest(
            dryRun: dryRun
        )
        return try await self.disableSnapshotBlockPublicAccess(input, logger: logger)
    }

    /// Disables the specified resource attachment from propagating routes to the specified propagation route table.
    @Sendable
    @inlinable
    public func disableTransitGatewayRouteTablePropagation(_ input: DisableTransitGatewayRouteTablePropagationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableTransitGatewayRouteTablePropagationResult {
        try await self.client.execute(
            operation: "DisableTransitGatewayRouteTablePropagation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables the specified resource attachment from propagating routes to the specified propagation route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - transitGatewayRouteTableAnnouncementId: The ID of the route table announcement.
    ///   - transitGatewayRouteTableId: The ID of the propagation route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableTransitGatewayRouteTablePropagation(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayRouteTableAnnouncementId: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableTransitGatewayRouteTablePropagationResult {
        let input = DisableTransitGatewayRouteTablePropagationRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayRouteTableAnnouncementId: transitGatewayRouteTableAnnouncementId, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.disableTransitGatewayRouteTablePropagation(input, logger: logger)
    }

    /// Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.
    @Sendable
    @inlinable
    public func disableVgwRoutePropagation(_ input: DisableVgwRoutePropagationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DisableVgwRoutePropagation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - gatewayId: The ID of the virtual private gateway.
    ///   - routeTableId: The ID of the route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableVgwRoutePropagation(
        dryRun: Bool? = nil,
        gatewayId: String? = nil,
        routeTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DisableVgwRoutePropagationRequest(
            dryRun: dryRun, 
            gatewayId: gatewayId, 
            routeTableId: routeTableId
        )
        return try await self.disableVgwRoutePropagation(input, logger: logger)
    }

    ///  This action is deprecated.  Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.
    @Sendable
    @inlinable
    public func disableVpcClassicLink(_ input: DisableVpcClassicLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableVpcClassicLinkResult {
        try await self.client.execute(
            operation: "DisableVpcClassicLink", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableVpcClassicLink(
        dryRun: Bool? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableVpcClassicLinkResult {
        let input = DisableVpcClassicLinkRequest(
            dryRun: dryRun, 
            vpcId: vpcId
        )
        return try await self.disableVpcClassicLink(input, logger: logger)
    }

    ///  This action is deprecated.  Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to
    /// 			public IP addresses when addressed between a linked EC2-Classic instance and instances
    /// 			in the VPC to which it's linked. You must specify a VPC ID in the request.
    @Sendable
    @inlinable
    public func disableVpcClassicLinkDnsSupport(_ input: DisableVpcClassicLinkDnsSupportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisableVpcClassicLinkDnsSupportResult {
        try await self.client.execute(
            operation: "DisableVpcClassicLinkDnsSupport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to
    /// 			public IP addresses when addressed between a linked EC2-Classic instance and instances
    /// 			in the VPC to which it's linked. You must specify a VPC ID in the request.
    ///
    /// Parameters:
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func disableVpcClassicLinkDnsSupport(
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisableVpcClassicLinkDnsSupportResult {
        let input = DisableVpcClassicLinkDnsSupportRequest(
            vpcId: vpcId
        )
        return try await self.disableVpcClassicLinkDnsSupport(input, logger: logger)
    }

    /// Disassociates an Elastic IP address from the instance or network interface it's associated with. This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.
    @Sendable
    @inlinable
    public func disassociateAddress(_ input: DisassociateAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DisassociateAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates an Elastic IP address from the instance or network interface it's associated with. This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.
    ///
    /// Parameters:
    ///   - associationId: The association ID. This parameter is required.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - publicIp: Deprecated.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateAddress(
        associationId: String? = nil,
        dryRun: Bool? = nil,
        publicIp: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DisassociateAddressRequest(
            associationId: associationId, 
            dryRun: dryRun, 
            publicIp: publicIp
        )
        return try await self.disassociateAddress(input, logger: logger)
    }

    /// Cancels a pending request to assign billing of the unused capacity of a Capacity
    /// 			Reservation to a consumer account, or revokes a request that has already been accepted.
    /// 			For more information, see Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    @Sendable
    @inlinable
    public func disassociateCapacityReservationBillingOwner(_ input: DisassociateCapacityReservationBillingOwnerRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateCapacityReservationBillingOwnerResult {
        try await self.client.execute(
            operation: "DisassociateCapacityReservationBillingOwner", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Cancels a pending request to assign billing of the unused capacity of a Capacity
    /// 			Reservation to a consumer account, or revokes a request that has already been accepted.
    /// 			For more information, see Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    ///
    /// Parameters:
    ///   - capacityReservationId: The ID of the Capacity Reservation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - unusedReservationBillingOwnerId: The ID of the consumer account to which the request was sent.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateCapacityReservationBillingOwner(
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        unusedReservationBillingOwnerId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateCapacityReservationBillingOwnerResult {
        let input = DisassociateCapacityReservationBillingOwnerRequest(
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun, 
            unusedReservationBillingOwnerId: unusedReservationBillingOwnerId
        )
        return try await self.disassociateCapacityReservationBillingOwner(input, logger: logger)
    }

    /// Disassociates a target network from the specified Client VPN endpoint. When you disassociate the
    /// 			last target network from a Client VPN, the following happens:   The route that was automatically added for the VPC is deleted   All active client connections are terminated   New client connections are disallowed   The Client VPN endpoint's status changes to pending-associate
    @Sendable
    @inlinable
    public func disassociateClientVpnTargetNetwork(_ input: DisassociateClientVpnTargetNetworkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateClientVpnTargetNetworkResult {
        try await self.client.execute(
            operation: "DisassociateClientVpnTargetNetwork", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a target network from the specified Client VPN endpoint. When you disassociate the
    /// 			last target network from a Client VPN, the following happens:   The route that was automatically added for the VPC is deleted   All active client connections are terminated   New client connections are disallowed   The Client VPN endpoint's status changes to pending-associate
    ///
    /// Parameters:
    ///   - associationId: The ID of the target network association.
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint from which to disassociate the target network.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateClientVpnTargetNetwork(
        associationId: String? = nil,
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateClientVpnTargetNetworkResult {
        let input = DisassociateClientVpnTargetNetworkRequest(
            associationId: associationId, 
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun
        )
        return try await self.disassociateClientVpnTargetNetwork(input, logger: logger)
    }

    /// Disassociates an IAM role from an Certificate Manager (ACM) certificate. Disassociating an IAM role
    /// 			from an ACM certificate removes the Amazon S3 object that contains the certificate, certificate chain, and
    /// 			encrypted private key from the Amazon S3 bucket. It also revokes the IAM role's permission to use the
    /// 			KMS key used to encrypt the private key. This effectively revokes the role's permission
    /// 			to use the certificate.
    @Sendable
    @inlinable
    public func disassociateEnclaveCertificateIamRole(_ input: DisassociateEnclaveCertificateIamRoleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateEnclaveCertificateIamRoleResult {
        try await self.client.execute(
            operation: "DisassociateEnclaveCertificateIamRole", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates an IAM role from an Certificate Manager (ACM) certificate. Disassociating an IAM role
    /// 			from an ACM certificate removes the Amazon S3 object that contains the certificate, certificate chain, and
    /// 			encrypted private key from the Amazon S3 bucket. It also revokes the IAM role's permission to use the
    /// 			KMS key used to encrypt the private key. This effectively revokes the role's permission
    /// 			to use the certificate.
    ///
    /// Parameters:
    ///   - certificateArn: The ARN of the ACM certificate from which to disassociate the IAM role.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - roleArn: The ARN of the IAM role to disassociate.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateEnclaveCertificateIamRole(
        certificateArn: String? = nil,
        dryRun: Bool? = nil,
        roleArn: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateEnclaveCertificateIamRoleResult {
        let input = DisassociateEnclaveCertificateIamRoleRequest(
            certificateArn: certificateArn, 
            dryRun: dryRun, 
            roleArn: roleArn
        )
        return try await self.disassociateEnclaveCertificateIamRole(input, logger: logger)
    }

    /// Disassociates an IAM instance profile from a running or stopped instance. Use DescribeIamInstanceProfileAssociations to get the association ID.
    @Sendable
    @inlinable
    public func disassociateIamInstanceProfile(_ input: DisassociateIamInstanceProfileRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateIamInstanceProfileResult {
        try await self.client.execute(
            operation: "DisassociateIamInstanceProfile", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates an IAM instance profile from a running or stopped instance. Use DescribeIamInstanceProfileAssociations to get the association ID.
    ///
    /// Parameters:
    ///   - associationId: The ID of the IAM instance profile association.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateIamInstanceProfile(
        associationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateIamInstanceProfileResult {
        let input = DisassociateIamInstanceProfileRequest(
            associationId: associationId
        )
        return try await self.disassociateIamInstanceProfile(input, logger: logger)
    }

    /// Disassociates one or more targets from an event window. For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func disassociateInstanceEventWindow(_ input: DisassociateInstanceEventWindowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateInstanceEventWindowResult {
        try await self.client.execute(
            operation: "DisassociateInstanceEventWindow", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates one or more targets from an event window. For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - associationTarget: One or more targets to disassociate from the specified event window.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceEventWindowId: The ID of the event window.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateInstanceEventWindow(
        associationTarget: InstanceEventWindowDisassociationRequest? = nil,
        dryRun: Bool? = nil,
        instanceEventWindowId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateInstanceEventWindowResult {
        let input = DisassociateInstanceEventWindowRequest(
            associationTarget: associationTarget, 
            dryRun: dryRun, 
            instanceEventWindowId: instanceEventWindowId
        )
        return try await self.disassociateInstanceEventWindow(input, logger: logger)
    }

    /// Remove the association between your Autonomous System Number (ASN) and your BYOIP CIDR. You may want to use this action to disassociate an ASN from a CIDR or if you want to swap ASNs.  For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide.
    @Sendable
    @inlinable
    public func disassociateIpamByoasn(_ input: DisassociateIpamByoasnRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateIpamByoasnResult {
        try await self.client.execute(
            operation: "DisassociateIpamByoasn", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Remove the association between your Autonomous System Number (ASN) and your BYOIP CIDR. You may want to use this action to disassociate an ASN from a CIDR or if you want to swap ASNs.  For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide.
    ///
    /// Parameters:
    ///   - asn: A public 2-byte or 4-byte ASN.
    ///   - cidr: A BYOIP CIDR.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateIpamByoasn(
        asn: String? = nil,
        cidr: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateIpamByoasnResult {
        let input = DisassociateIpamByoasnRequest(
            asn: asn, 
            cidr: cidr, 
            dryRun: dryRun
        )
        return try await self.disassociateIpamByoasn(input, logger: logger)
    }

    /// Disassociates a resource discovery from an Amazon VPC IPAM. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    @Sendable
    @inlinable
    public func disassociateIpamResourceDiscovery(_ input: DisassociateIpamResourceDiscoveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateIpamResourceDiscoveryResult {
        try await self.client.execute(
            operation: "DisassociateIpamResourceDiscovery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a resource discovery from an Amazon VPC IPAM. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamResourceDiscoveryAssociationId: A resource discovery association ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateIpamResourceDiscovery(
        dryRun: Bool? = nil,
        ipamResourceDiscoveryAssociationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateIpamResourceDiscoveryResult {
        let input = DisassociateIpamResourceDiscoveryRequest(
            dryRun: dryRun, 
            ipamResourceDiscoveryAssociationId: ipamResourceDiscoveryAssociationId
        )
        return try await self.disassociateIpamResourceDiscovery(input, logger: logger)
    }

    /// Disassociates secondary Elastic IP addresses (EIPs) from a public NAT gateway.  You cannot disassociate your primary EIP. For more information, see Edit secondary IP address associations in the Amazon VPC User Guide. While disassociating is in progress, you cannot associate/disassociate additional EIPs while the connections are being drained. You are, however, allowed to delete the NAT gateway. An EIP is released only at the end of MaxDrainDurationSeconds. It stays associated and supports the existing connections but does not support any new connections (new connections are distributed across the remaining associated EIPs). As the existing connections drain out, the EIPs (and the corresponding private IP addresses mapped to them)  are released.
    @Sendable
    @inlinable
    public func disassociateNatGatewayAddress(_ input: DisassociateNatGatewayAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateNatGatewayAddressResult {
        try await self.client.execute(
            operation: "DisassociateNatGatewayAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates secondary Elastic IP addresses (EIPs) from a public NAT gateway.  You cannot disassociate your primary EIP. For more information, see Edit secondary IP address associations in the Amazon VPC User Guide. While disassociating is in progress, you cannot associate/disassociate additional EIPs while the connections are being drained. You are, however, allowed to delete the NAT gateway. An EIP is released only at the end of MaxDrainDurationSeconds. It stays associated and supports the existing connections but does not support any new connections (new connections are distributed across the remaining associated EIPs). As the existing connections drain out, the EIPs (and the corresponding private IP addresses mapped to them)  are released.
    ///
    /// Parameters:
    ///   - associationIds: The association IDs of EIPs that have been associated with the NAT gateway.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxDrainDurationSeconds: The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in progress. Default value is 350 seconds.
    ///   - natGatewayId: The ID of the NAT gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateNatGatewayAddress(
        associationIds: [String]? = nil,
        dryRun: Bool? = nil,
        maxDrainDurationSeconds: Int? = nil,
        natGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateNatGatewayAddressResult {
        let input = DisassociateNatGatewayAddressRequest(
            associationIds: associationIds, 
            dryRun: dryRun, 
            maxDrainDurationSeconds: maxDrainDurationSeconds, 
            natGatewayId: natGatewayId
        )
        return try await self.disassociateNatGatewayAddress(input, logger: logger)
    }

    /// Disassociates a subnet or gateway from a route table. After you perform this action, the subnet no longer uses the routes in the route table.
    /// 				Instead, it uses the routes in the VPC's main route table. For more information
    /// 				about route tables, see Route
    /// 				tables in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func disassociateRouteTable(_ input: DisassociateRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "DisassociateRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a subnet or gateway from a route table. After you perform this action, the subnet no longer uses the routes in the route table.
    /// 				Instead, it uses the routes in the VPC's main route table. For more information
    /// 				about route tables, see Route
    /// 				tables in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - associationId: The association ID representing the current association between the route table and subnet or gateway.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateRouteTable(
        associationId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DisassociateRouteTableRequest(
            associationId: associationId, 
            dryRun: dryRun
        )
        return try await self.disassociateRouteTable(input, logger: logger)
    }

    /// Disassociates a security group from a VPC. You cannot disassociate the security group if any Elastic network interfaces in the associated VPC are still associated with the security group.  Note that the disassociation is asynchronous and you can check the status of the request with DescribeSecurityGroupVpcAssociations.
    @Sendable
    @inlinable
    public func disassociateSecurityGroupVpc(_ input: DisassociateSecurityGroupVpcRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateSecurityGroupVpcResult {
        try await self.client.execute(
            operation: "DisassociateSecurityGroupVpc", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a security group from a VPC. You cannot disassociate the security group if any Elastic network interfaces in the associated VPC are still associated with the security group.  Note that the disassociation is asynchronous and you can check the status of the request with DescribeSecurityGroupVpcAssociations.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupId: A security group ID.
    ///   - vpcId: A VPC ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateSecurityGroupVpc(
        dryRun: Bool? = nil,
        groupId: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateSecurityGroupVpcResult {
        let input = DisassociateSecurityGroupVpcRequest(
            dryRun: dryRun, 
            groupId: groupId, 
            vpcId: vpcId
        )
        return try await self.disassociateSecurityGroupVpc(input, logger: logger)
    }

    /// Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.
    @Sendable
    @inlinable
    public func disassociateSubnetCidrBlock(_ input: DisassociateSubnetCidrBlockRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateSubnetCidrBlockResult {
        try await self.client.execute(
            operation: "DisassociateSubnetCidrBlock", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.
    ///
    /// Parameters:
    ///   - associationId: The association ID for the CIDR block.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateSubnetCidrBlock(
        associationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateSubnetCidrBlockResult {
        let input = DisassociateSubnetCidrBlockRequest(
            associationId: associationId
        )
        return try await self.disassociateSubnetCidrBlock(input, logger: logger)
    }

    /// Disassociates the specified subnets from the transit gateway multicast domain.
    @Sendable
    @inlinable
    public func disassociateTransitGatewayMulticastDomain(_ input: DisassociateTransitGatewayMulticastDomainRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateTransitGatewayMulticastDomainResult {
        try await self.client.execute(
            operation: "DisassociateTransitGatewayMulticastDomain", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates the specified subnets from the transit gateway multicast domain.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - subnetIds: The IDs of the subnets;
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateTransitGatewayMulticastDomain(
        dryRun: Bool? = nil,
        subnetIds: [String]? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateTransitGatewayMulticastDomainResult {
        let input = DisassociateTransitGatewayMulticastDomainRequest(
            dryRun: dryRun, 
            subnetIds: subnetIds, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.disassociateTransitGatewayMulticastDomain(input, logger: logger)
    }

    /// Removes the association between an an attachment and a policy table.
    @Sendable
    @inlinable
    public func disassociateTransitGatewayPolicyTable(_ input: DisassociateTransitGatewayPolicyTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateTransitGatewayPolicyTableResult {
        try await self.client.execute(
            operation: "DisassociateTransitGatewayPolicyTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the association between an an attachment and a policy table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the transit gateway attachment to disassociate from the policy table.
    ///   - transitGatewayPolicyTableId: The ID of the disassociated policy table.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateTransitGatewayPolicyTable(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayPolicyTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateTransitGatewayPolicyTableResult {
        let input = DisassociateTransitGatewayPolicyTableRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayPolicyTableId: transitGatewayPolicyTableId
        )
        return try await self.disassociateTransitGatewayPolicyTable(input, logger: logger)
    }

    /// Disassociates a resource attachment from a transit gateway route table.
    @Sendable
    @inlinable
    public func disassociateTransitGatewayRouteTable(_ input: DisassociateTransitGatewayRouteTableRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateTransitGatewayRouteTableResult {
        try await self.client.execute(
            operation: "DisassociateTransitGatewayRouteTable", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a resource attachment from a transit gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateTransitGatewayRouteTable(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateTransitGatewayRouteTableResult {
        let input = DisassociateTransitGatewayRouteTableRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.disassociateTransitGatewayRouteTable(input, logger: logger)
    }

    /// Removes an association between a branch network interface with a trunk network interface.
    @Sendable
    @inlinable
    public func disassociateTrunkInterface(_ input: DisassociateTrunkInterfaceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateTrunkInterfaceResult {
        try await self.client.execute(
            operation: "DisassociateTrunkInterface", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes an association between a branch network interface with a trunk network interface.
    ///
    /// Parameters:
    ///   - associationId: The ID of the association
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateTrunkInterface(
        associationId: String? = nil,
        clientToken: String? = DisassociateTrunkInterfaceRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateTrunkInterfaceResult {
        let input = DisassociateTrunkInterfaceRequest(
            associationId: associationId, 
            clientToken: clientToken, 
            dryRun: dryRun
        )
        return try await self.disassociateTrunkInterface(input, logger: logger)
    }

    /// Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using DescribeVpcs. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.  You cannot disassociate the CIDR block with which you originally created the VPC (the
    /// 			primary CIDR block).
    @Sendable
    @inlinable
    public func disassociateVpcCidrBlock(_ input: DisassociateVpcCidrBlockRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> DisassociateVpcCidrBlockResult {
        try await self.client.execute(
            operation: "DisassociateVpcCidrBlock", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using DescribeVpcs. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.  You cannot disassociate the CIDR block with which you originally created the VPC (the
    /// 			primary CIDR block).
    ///
    /// Parameters:
    ///   - associationId: The association ID for the CIDR block.
    ///   - logger: Logger use during operation
    @inlinable
    public func disassociateVpcCidrBlock(
        associationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> DisassociateVpcCidrBlockResult {
        let input = DisassociateVpcCidrBlockRequest(
            associationId: associationId
        )
        return try await self.disassociateVpcCidrBlock(input, logger: logger)
    }

    /// Enables Elastic IP address transfer. For more information, see Transfer Elastic IP addresses in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func enableAddressTransfer(_ input: EnableAddressTransferRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableAddressTransferResult {
        try await self.client.execute(
            operation: "EnableAddressTransfer", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables Elastic IP address transfer. For more information, see Transfer Elastic IP addresses in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - allocationId: The allocation ID of an Elastic IP address.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transferAccountId: The ID of the account that you want to transfer the Elastic IP address to.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableAddressTransfer(
        allocationId: String? = nil,
        dryRun: Bool? = nil,
        transferAccountId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableAddressTransferResult {
        let input = EnableAddressTransferRequest(
            allocationId: allocationId, 
            dryRun: dryRun, 
            transferAccountId: transferAccountId
        )
        return try await self.enableAddressTransfer(input, logger: logger)
    }

    /// Enables Allowed AMIs for your account in the specified Amazon Web Services Region. Two values are accepted:    enabled: The image criteria in your Allowed AMIs settings are applied. As a result, only AMIs matching these criteria are discoverable and can be used by your account to launch instances.    audit-mode: The image criteria in your Allowed AMIs settings are not applied. No restrictions are placed on AMI discoverability or usage. Users in your account can launch instances using any public AMI or AMI shared with your account. The purpose of audit-mode is to indicate which AMIs will be affected when Allowed AMIs is enabled. In audit-mode, each AMI displays either "ImageAllowed": true or "ImageAllowed": false to indicate whether the AMI will be discoverable and available to users in the account when Allowed AMIs is enabled.    The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.  For more information, see Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs in Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func enableAllowedImagesSettings(_ input: EnableAllowedImagesSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableAllowedImagesSettingsResult {
        try await self.client.execute(
            operation: "EnableAllowedImagesSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables Allowed AMIs for your account in the specified Amazon Web Services Region. Two values are accepted:    enabled: The image criteria in your Allowed AMIs settings are applied. As a result, only AMIs matching these criteria are discoverable and can be used by your account to launch instances.    audit-mode: The image criteria in your Allowed AMIs settings are not applied. No restrictions are placed on AMI discoverability or usage. Users in your account can launch instances using any public AMI or AMI shared with your account. The purpose of audit-mode is to indicate which AMIs will be affected when Allowed AMIs is enabled. In audit-mode, each AMI displays either "ImageAllowed": true or "ImageAllowed": false to indicate whether the AMI will be discoverable and available to users in the account when Allowed AMIs is enabled.    The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.  For more information, see Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs in Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - allowedImagesSettingsState: Specify enabled to apply the image criteria specified by the Allowed AMIs settings. Specify audit-mode so that you can check which AMIs will be allowed or not allowed by the image criteria.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - logger: Logger use during operation
    @inlinable
    public func enableAllowedImagesSettings(
        allowedImagesSettingsState: AllowedImagesSettingsEnabledState? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableAllowedImagesSettingsResult {
        let input = EnableAllowedImagesSettingsRequest(
            allowedImagesSettingsState: allowedImagesSettingsState, 
            dryRun: dryRun
        )
        return try await self.enableAllowedImagesSettings(input, logger: logger)
    }

    /// Enables Infrastructure Performance subscriptions.
    @Sendable
    @inlinable
    public func enableAwsNetworkPerformanceMetricSubscription(_ input: EnableAwsNetworkPerformanceMetricSubscriptionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableAwsNetworkPerformanceMetricSubscriptionResult {
        try await self.client.execute(
            operation: "EnableAwsNetworkPerformanceMetricSubscription", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables Infrastructure Performance subscriptions.
    ///
    /// Parameters:
    ///   - destination: The target Region (like us-east-2) or Availability Zone ID (like use2-az2) that the metric subscription is enabled for. If you use Availability Zone IDs, the Source and Destination Availability Zones must be in the same Region.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - metric: The metric used for the enabled subscription.
    ///   - source: The source Region (like us-east-1) or Availability Zone ID (like use1-az1) that the metric subscription is enabled for. If you use Availability Zone IDs, the Source and Destination Availability Zones must be in the same Region.
    ///   - statistic: The statistic used for the enabled subscription.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableAwsNetworkPerformanceMetricSubscription(
        destination: String? = nil,
        dryRun: Bool? = nil,
        metric: MetricType? = nil,
        source: String? = nil,
        statistic: StatisticType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableAwsNetworkPerformanceMetricSubscriptionResult {
        let input = EnableAwsNetworkPerformanceMetricSubscriptionRequest(
            destination: destination, 
            dryRun: dryRun, 
            metric: metric, 
            source: source, 
            statistic: statistic
        )
        return try await self.enableAwsNetworkPerformanceMetricSubscription(input, logger: logger)
    }

    /// Enables EBS encryption by default for your account in the current Region. After you enable encryption by default, the EBS volumes that you create are 	always encrypted, either using the default KMS key or the KMS key that you specified when you created each volume. For more information, see Amazon EBS encryption in the Amazon EBS User Guide. You can specify the default KMS key for encryption by default using ModifyEbsDefaultKmsKeyId or ResetEbsDefaultKmsKeyId. Enabling encryption by default has no effect on the encryption status of your  existing volumes. After you enable encryption by default, you can no longer launch instances using instance types that do not support encryption. For more information, see Supported instance types.
    @Sendable
    @inlinable
    public func enableEbsEncryptionByDefault(_ input: EnableEbsEncryptionByDefaultRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableEbsEncryptionByDefaultResult {
        try await self.client.execute(
            operation: "EnableEbsEncryptionByDefault", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables EBS encryption by default for your account in the current Region. After you enable encryption by default, the EBS volumes that you create are 	always encrypted, either using the default KMS key or the KMS key that you specified when you created each volume. For more information, see Amazon EBS encryption in the Amazon EBS User Guide. You can specify the default KMS key for encryption by default using ModifyEbsDefaultKmsKeyId or ResetEbsDefaultKmsKeyId. Enabling encryption by default has no effect on the encryption status of your  existing volumes. After you enable encryption by default, you can no longer launch instances using instance types that do not support encryption. For more information, see Supported instance types.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableEbsEncryptionByDefault(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableEbsEncryptionByDefaultResult {
        let input = EnableEbsEncryptionByDefaultRequest(
            dryRun: dryRun
        )
        return try await self.enableEbsEncryptionByDefault(input, logger: logger)
    }

    /// When you enable Windows fast launch for a Windows AMI, images are pre-provisioned, using snapshots to launch instances up to 65% faster. To create the optimized Windows image, Amazon EC2 launches an instance and runs through Sysprep steps, rebooting as required. Then it creates a set of reserved snapshots that are used for subsequent launches. The reserved snapshots are automatically replenished as they are used, depending on your settings for launch frequency.  You can only change these settings for Windows AMIs that you own or that have been shared with you.
    @Sendable
    @inlinable
    public func enableFastLaunch(_ input: EnableFastLaunchRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableFastLaunchResult {
        try await self.client.execute(
            operation: "EnableFastLaunch", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// When you enable Windows fast launch for a Windows AMI, images are pre-provisioned, using snapshots to launch instances up to 65% faster. To create the optimized Windows image, Amazon EC2 launches an instance and runs through Sysprep steps, rebooting as required. Then it creates a set of reserved snapshots that are used for subsequent launches. The reserved snapshots are automatically replenished as they are used, depending on your settings for launch frequency.  You can only change these settings for Windows AMIs that you own or that have been shared with you.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: Specify the ID of the image for which to enable Windows fast launch.
    ///   - launchTemplate: The launch template to use when launching Windows instances from pre-provisioned snapshots. Launch template parameters can include either the name or ID of the launch template, but not both.
    ///   - maxParallelLaunches: The maximum number of instances that Amazon EC2 can launch at the same time to create pre-provisioned snapshots for Windows fast launch. Value must be 6 or greater.
    ///   - resourceType: The type of resource to use for pre-provisioning the AMI for Windows fast launch. Supported values include: snapshot, which is the default value.
    ///   - snapshotConfiguration: Configuration settings for creating and managing the snapshots that are used for pre-provisioning the AMI for Windows fast launch. The associated ResourceType must be snapshot.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableFastLaunch(
        dryRun: Bool? = nil,
        imageId: String? = nil,
        launchTemplate: FastLaunchLaunchTemplateSpecificationRequest? = nil,
        maxParallelLaunches: Int? = nil,
        resourceType: String? = nil,
        snapshotConfiguration: FastLaunchSnapshotConfigurationRequest? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableFastLaunchResult {
        let input = EnableFastLaunchRequest(
            dryRun: dryRun, 
            imageId: imageId, 
            launchTemplate: launchTemplate, 
            maxParallelLaunches: maxParallelLaunches, 
            resourceType: resourceType, 
            snapshotConfiguration: snapshotConfiguration
        )
        return try await self.enableFastLaunch(input, logger: logger)
    }

    /// Enables fast snapshot restores for the specified snapshots in the specified Availability Zones. You get the full benefit of fast snapshot restores after they enter the enabled state. To get the current state of fast snapshot restores, use DescribeFastSnapshotRestores. To disable fast snapshot restores, use DisableFastSnapshotRestores. For more information, see Amazon EBS fast snapshot restore in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func enableFastSnapshotRestores(_ input: EnableFastSnapshotRestoresRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableFastSnapshotRestoresResult {
        try await self.client.execute(
            operation: "EnableFastSnapshotRestores", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables fast snapshot restores for the specified snapshots in the specified Availability Zones. You get the full benefit of fast snapshot restores after they enter the enabled state. To get the current state of fast snapshot restores, use DescribeFastSnapshotRestores. To disable fast snapshot restores, use DisableFastSnapshotRestores. For more information, see Amazon EBS fast snapshot restore in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - availabilityZones: One or more Availability Zones. For example, us-east-2a.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - sourceSnapshotIds: The IDs of one or more snapshots. For example, snap-1234567890abcdef0. You can specify a snapshot that was shared with you from another Amazon Web Services account.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableFastSnapshotRestores(
        availabilityZones: [String]? = nil,
        dryRun: Bool? = nil,
        sourceSnapshotIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableFastSnapshotRestoresResult {
        let input = EnableFastSnapshotRestoresRequest(
            availabilityZones: availabilityZones, 
            dryRun: dryRun, 
            sourceSnapshotIds: sourceSnapshotIds
        )
        return try await self.enableFastSnapshotRestores(input, logger: logger)
    }

    /// Re-enables a disabled AMI. The re-enabled AMI is marked as available and can be used for instance launches, appears in describe operations, and can be shared. Amazon Web Services accounts, organizations, and Organizational Units that lost access to the AMI when it was disabled do not regain access automatically. Once the AMI is available, it can be shared with them again. Only the AMI owner can re-enable a disabled AMI. For more information, see Disable an AMI in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func enableImage(_ input: EnableImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableImageResult {
        try await self.client.execute(
            operation: "EnableImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Re-enables a disabled AMI. The re-enabled AMI is marked as available and can be used for instance launches, appears in describe operations, and can be shared. Amazon Web Services accounts, organizations, and Organizational Units that lost access to the AMI when it was disabled do not regain access automatically. Once the AMI is available, it can be shared with them again. Only the AMI owner can re-enable a disabled AMI. For more information, see Disable an AMI in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableImage(
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableImageResult {
        let input = EnableImageRequest(
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.enableImage(input, logger: logger)
    }

    /// Enables block public access for AMIs at the account level in the specified Amazon Web Services Region. This prevents the public sharing of your AMIs. However, if you already have public AMIs, they will remain publicly available. The API can take up to 10 minutes to configure this setting. During this time, if you run GetImageBlockPublicAccessState, the response will be unblocked. When the API has completed the configuration, the response will be block-new-sharing. For more information, see Block public access to your AMIs in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func enableImageBlockPublicAccess(_ input: EnableImageBlockPublicAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableImageBlockPublicAccessResult {
        try await self.client.execute(
            operation: "EnableImageBlockPublicAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables block public access for AMIs at the account level in the specified Amazon Web Services Region. This prevents the public sharing of your AMIs. However, if you already have public AMIs, they will remain publicly available. The API can take up to 10 minutes to configure this setting. During this time, if you run GetImageBlockPublicAccessState, the response will be unblocked. When the API has completed the configuration, the response will be block-new-sharing. For more information, see Block public access to your AMIs in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageBlockPublicAccessState: Specify block-new-sharing to enable block public access for AMIs at the account level in the specified Region. This will block any attempt to publicly share your AMIs in the specified Region.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableImageBlockPublicAccess(
        dryRun: Bool? = nil,
        imageBlockPublicAccessState: ImageBlockPublicAccessEnabledState? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableImageBlockPublicAccessResult {
        let input = EnableImageBlockPublicAccessRequest(
            dryRun: dryRun, 
            imageBlockPublicAccessState: imageBlockPublicAccessState
        )
        return try await self.enableImageBlockPublicAccess(input, logger: logger)
    }

    /// Enables deprecation of the specified AMI at the specified date and time. For more information, see Deprecate an AMI in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func enableImageDeprecation(_ input: EnableImageDeprecationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableImageDeprecationResult {
        try await self.client.execute(
            operation: "EnableImageDeprecation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables deprecation of the specified AMI at the specified date and time. For more information, see Deprecate an AMI in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - deprecateAt: The date and time to deprecate the AMI, in UTC, in the following format: YYYY-MM-DDTHH:MM:SSZ. If you specify a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. You can’t specify a date in the past. The upper limit for DeprecateAt is 10 years from now, except for public AMIs, where the upper limit is 2 years from the creation date.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableImageDeprecation(
        deprecateAt: Date? = nil,
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableImageDeprecationResult {
        let input = EnableImageDeprecationRequest(
            deprecateAt: deprecateAt, 
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.enableImageDeprecation(input, logger: logger)
    }

    /// Enables deregistration protection for an AMI. When deregistration protection is enabled, the AMI can't be deregistered. To allow the AMI to be deregistered, you must first disable deregistration protection using DisableImageDeregistrationProtection. For more information, see Protect an AMI from deregistration in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func enableImageDeregistrationProtection(_ input: EnableImageDeregistrationProtectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableImageDeregistrationProtectionResult {
        try await self.client.execute(
            operation: "EnableImageDeregistrationProtection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables deregistration protection for an AMI. When deregistration protection is enabled, the AMI can't be deregistered. To allow the AMI to be deregistered, you must first disable deregistration protection using DisableImageDeregistrationProtection. For more information, see Protect an AMI from deregistration in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - withCooldown: If true, enforces deregistration protection for 24 hours after deregistration protection is disabled.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableImageDeregistrationProtection(
        dryRun: Bool? = nil,
        imageId: String? = nil,
        withCooldown: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableImageDeregistrationProtectionResult {
        let input = EnableImageDeregistrationProtectionRequest(
            dryRun: dryRun, 
            imageId: imageId, 
            withCooldown: withCooldown
        )
        return try await self.enableImageDeregistrationProtection(input, logger: logger)
    }

    /// Enable an Organizations member account as the IPAM admin account. You cannot select the Organizations management account as the IPAM admin account. For more information, see Enable integration with Organizations in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func enableIpamOrganizationAdminAccount(_ input: EnableIpamOrganizationAdminAccountRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableIpamOrganizationAdminAccountResult {
        try await self.client.execute(
            operation: "EnableIpamOrganizationAdminAccount", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enable an Organizations member account as the IPAM admin account. You cannot select the Organizations management account as the IPAM admin account. For more information, see Enable integration with Organizations in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - delegatedAdminAccountId: The Organizations member account ID that you want to enable as the IPAM account.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableIpamOrganizationAdminAccount(
        delegatedAdminAccountId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableIpamOrganizationAdminAccountResult {
        let input = EnableIpamOrganizationAdminAccountRequest(
            delegatedAdminAccountId: delegatedAdminAccountId, 
            dryRun: dryRun
        )
        return try await self.enableIpamOrganizationAdminAccount(input, logger: logger)
    }

    /// Establishes a trust relationship between Reachability Analyzer and Organizations. This operation must be performed by the management account for the organization. After you establish a trust relationship, a user in the management account or  a delegated administrator account can run a cross-account analysis using resources  from the member accounts.
    @Sendable
    @inlinable
    public func enableReachabilityAnalyzerOrganizationSharing(_ input: EnableReachabilityAnalyzerOrganizationSharingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableReachabilityAnalyzerOrganizationSharingResult {
        try await self.client.execute(
            operation: "EnableReachabilityAnalyzerOrganizationSharing", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Establishes a trust relationship between Reachability Analyzer and Organizations. This operation must be performed by the management account for the organization. After you establish a trust relationship, a user in the management account or  a delegated administrator account can run a cross-account analysis using resources  from the member accounts.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableReachabilityAnalyzerOrganizationSharing(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableReachabilityAnalyzerOrganizationSharingResult {
        let input = EnableReachabilityAnalyzerOrganizationSharingRequest(
            dryRun: dryRun
        )
        return try await self.enableReachabilityAnalyzerOrganizationSharing(input, logger: logger)
    }

    /// Enables access to the EC2 serial console of all instances for your account. By default,
    /// 			access to the EC2 serial console is disabled for your account. For more information, see Manage account access to the EC2 serial console
    /// 			in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func enableSerialConsoleAccess(_ input: EnableSerialConsoleAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableSerialConsoleAccessResult {
        try await self.client.execute(
            operation: "EnableSerialConsoleAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables access to the EC2 serial console of all instances for your account. By default,
    /// 			access to the EC2 serial console is disabled for your account. For more information, see Manage account access to the EC2 serial console
    /// 			in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableSerialConsoleAccess(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableSerialConsoleAccessResult {
        let input = EnableSerialConsoleAccessRequest(
            dryRun: dryRun
        )
        return try await self.enableSerialConsoleAccess(input, logger: logger)
    }

    /// Enables or modifies the block public access for snapshots  setting at the account level for the specified Amazon Web Services Region. After you enable block  public access for snapshots in a Region, users can no longer request public sharing  for snapshots in that Region. Snapshots that are already publicly shared are either  treated as private or they remain publicly shared, depending on the  State that you specify.  Enabling block public access for snapshots in block all sharing  mode does not change the permissions for snapshots that are already publicly shared.  Instead, it prevents these snapshots from be publicly visible and publicly accessible.  Therefore, the attributes for these snapshots still indicate that they are publicly  shared, even though they are not publicly available. If you later disable block public access or change the mode to block new  sharing, these snapshots will become publicly available again.  For more information, see  Block public access for snapshots in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func enableSnapshotBlockPublicAccess(_ input: EnableSnapshotBlockPublicAccessRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableSnapshotBlockPublicAccessResult {
        try await self.client.execute(
            operation: "EnableSnapshotBlockPublicAccess", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables or modifies the block public access for snapshots  setting at the account level for the specified Amazon Web Services Region. After you enable block  public access for snapshots in a Region, users can no longer request public sharing  for snapshots in that Region. Snapshots that are already publicly shared are either  treated as private or they remain publicly shared, depending on the  State that you specify.  Enabling block public access for snapshots in block all sharing  mode does not change the permissions for snapshots that are already publicly shared.  Instead, it prevents these snapshots from be publicly visible and publicly accessible.  Therefore, the attributes for these snapshots still indicate that they are publicly  shared, even though they are not publicly available. If you later disable block public access or change the mode to block new  sharing, these snapshots will become publicly available again.  For more information, see  Block public access for snapshots in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - state: The mode in which to enable block public access for snapshots for the Region.  Specify one of the following values:    block-all-sharing - Prevents all public sharing of snapshots in  the Region. Users in the account will no longer be able to request new public  sharing. Additionally, snapshots that are already publicly shared are treated as  private and they are no longer publicly available.    block-new-sharing  - Prevents only new public sharing of snapshots  in the Region. Users in the account will no longer be able to request new public  sharing. However, snapshots that are already publicly shared, remain publicly  available.    unblocked is not a valid value for EnableSnapshotBlockPublicAccess.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableSnapshotBlockPublicAccess(
        dryRun: Bool? = nil,
        state: SnapshotBlockPublicAccessState? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableSnapshotBlockPublicAccessResult {
        let input = EnableSnapshotBlockPublicAccessRequest(
            dryRun: dryRun, 
            state: state
        )
        return try await self.enableSnapshotBlockPublicAccess(input, logger: logger)
    }

    /// Enables the specified attachment to propagate routes to the specified propagation route table.
    @Sendable
    @inlinable
    public func enableTransitGatewayRouteTablePropagation(_ input: EnableTransitGatewayRouteTablePropagationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableTransitGatewayRouteTablePropagationResult {
        try await self.client.execute(
            operation: "EnableTransitGatewayRouteTablePropagation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables the specified attachment to propagate routes to the specified propagation route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - transitGatewayRouteTableAnnouncementId: The ID of the transit gateway route table announcement.
    ///   - transitGatewayRouteTableId: The ID of the propagation route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableTransitGatewayRouteTablePropagation(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayRouteTableAnnouncementId: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableTransitGatewayRouteTablePropagationResult {
        let input = EnableTransitGatewayRouteTablePropagationRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayRouteTableAnnouncementId: transitGatewayRouteTableAnnouncementId, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.enableTransitGatewayRouteTablePropagation(input, logger: logger)
    }

    /// Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.
    @Sendable
    @inlinable
    public func enableVgwRoutePropagation(_ input: EnableVgwRoutePropagationRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "EnableVgwRoutePropagation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - gatewayId: The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with.
    ///   - routeTableId: The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableVgwRoutePropagation(
        dryRun: Bool? = nil,
        gatewayId: String? = nil,
        routeTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = EnableVgwRoutePropagationRequest(
            dryRun: dryRun, 
            gatewayId: gatewayId, 
            routeTableId: routeTableId
        )
        return try await self.enableVgwRoutePropagation(input, logger: logger)
    }

    /// Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.
    @Sendable
    @inlinable
    public func enableVolumeIO(_ input: EnableVolumeIORequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "EnableVolumeIO", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - volumeId: The ID of the volume.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableVolumeIO(
        dryRun: Bool? = nil,
        volumeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = EnableVolumeIORequest(
            dryRun: dryRun, 
            volumeId: volumeId
        )
        return try await self.enableVolumeIO(input, logger: logger)
    }

    ///  This action is deprecated.  Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your
    /// 			ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot
    /// 			enable your VPC for ClassicLink if any of your VPC route tables have existing routes for
    /// 			address ranges within the 10.0.0.0/8 IP address range, excluding local
    /// 			routes for VPCs in the 10.0.0.0/16 and 10.1.0.0/16 IP address
    /// 			ranges.
    @Sendable
    @inlinable
    public func enableVpcClassicLink(_ input: EnableVpcClassicLinkRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableVpcClassicLinkResult {
        try await self.client.execute(
            operation: "EnableVpcClassicLink", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your
    /// 			ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot
    /// 			enable your VPC for ClassicLink if any of your VPC route tables have existing routes for
    /// 			address ranges within the 10.0.0.0/8 IP address range, excluding local
    /// 			routes for VPCs in the 10.0.0.0/16 and 10.1.0.0/16 IP address
    /// 			ranges.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableVpcClassicLink(
        dryRun: Bool? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableVpcClassicLinkResult {
        let input = EnableVpcClassicLinkRequest(
            dryRun: dryRun, 
            vpcId: vpcId
        )
        return try await self.enableVpcClassicLink(input, logger: logger)
    }

    ///  This action is deprecated.  Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS
    /// 			hostname of a linked EC2-Classic instance resolves to its private IP address when
    /// 			addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname
    /// 			of an instance in a VPC resolves to its private IP address when addressed from a linked
    /// 			EC2-Classic instance. You must specify a VPC ID in the request.
    @Sendable
    @inlinable
    public func enableVpcClassicLinkDnsSupport(_ input: EnableVpcClassicLinkDnsSupportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> EnableVpcClassicLinkDnsSupportResult {
        try await self.client.execute(
            operation: "EnableVpcClassicLinkDnsSupport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS
    /// 			hostname of a linked EC2-Classic instance resolves to its private IP address when
    /// 			addressed from an instance in the VPC to which it's linked. Similarly, the DNS hostname
    /// 			of an instance in a VPC resolves to its private IP address when addressed from a linked
    /// 			EC2-Classic instance. You must specify a VPC ID in the request.
    ///
    /// Parameters:
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func enableVpcClassicLinkDnsSupport(
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> EnableVpcClassicLinkDnsSupportResult {
        let input = EnableVpcClassicLinkDnsSupportRequest(
            vpcId: vpcId
        )
        return try await self.enableVpcClassicLinkDnsSupport(input, logger: logger)
    }

    /// Downloads the client certificate revocation list for the specified Client VPN endpoint.
    @Sendable
    @inlinable
    public func exportClientVpnClientCertificateRevocationList(_ input: ExportClientVpnClientCertificateRevocationListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportClientVpnClientCertificateRevocationListResult {
        try await self.client.execute(
            operation: "ExportClientVpnClientCertificateRevocationList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Downloads the client certificate revocation list for the specified Client VPN endpoint.
    ///
    /// Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportClientVpnClientCertificateRevocationList(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportClientVpnClientCertificateRevocationListResult {
        let input = ExportClientVpnClientCertificateRevocationListRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun
        )
        return try await self.exportClientVpnClientCertificateRevocationList(input, logger: logger)
    }

    /// Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration
    /// 			file includes the Client VPN endpoint and certificate information clients need to establish a connection
    /// 			with the Client VPN endpoint.
    @Sendable
    @inlinable
    public func exportClientVpnClientConfiguration(_ input: ExportClientVpnClientConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportClientVpnClientConfigurationResult {
        try await self.client.execute(
            operation: "ExportClientVpnClientConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration
    /// 			file includes the Client VPN endpoint and certificate information clients need to establish a connection
    /// 			with the Client VPN endpoint.
    ///
    /// Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportClientVpnClientConfiguration(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportClientVpnClientConfigurationResult {
        let input = ExportClientVpnClientConfigurationRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun
        )
        return try await self.exportClientVpnClientConfiguration(input, logger: logger)
    }

    /// Exports an Amazon Machine Image (AMI) to a VM file. For more information, see Exporting a VM directly from an Amazon Machine Image (AMI) in the VM Import/Export User Guide.
    @Sendable
    @inlinable
    public func exportImage(_ input: ExportImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportImageResult {
        try await self.client.execute(
            operation: "ExportImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Exports an Amazon Machine Image (AMI) to a VM file. For more information, see Exporting a VM directly from an Amazon Machine Image (AMI) in the VM Import/Export User Guide.
    ///
    /// Parameters:
    ///   - clientToken: Token to enable idempotency for export image requests.
    ///   - description: A description of the image being exported. The maximum length is 255 characters.
    ///   - diskImageFormat: The disk image format.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - imageId: The ID of the image.
    ///   - roleName: The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket. If this parameter is not specified, the default role is named 'vmimport'.
    ///   - s3ExportLocation: The Amazon S3 bucket for the destination image. The destination bucket must exist.
    ///   - tagSpecifications: The tags to apply to the export image task during creation.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportImage(
        clientToken: String? = ExportImageRequest.idempotencyToken(),
        description: String? = nil,
        diskImageFormat: DiskImageFormat? = nil,
        dryRun: Bool? = nil,
        imageId: String? = nil,
        roleName: String? = nil,
        s3ExportLocation: ExportTaskS3LocationRequest? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportImageResult {
        let input = ExportImageRequest(
            clientToken: clientToken, 
            description: description, 
            diskImageFormat: diskImageFormat, 
            dryRun: dryRun, 
            imageId: imageId, 
            roleName: roleName, 
            s3ExportLocation: s3ExportLocation, 
            tagSpecifications: tagSpecifications
        )
        return try await self.exportImage(input, logger: logger)
    }

    /// Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range. The routes are saved to the specified bucket in a JSON file. For more information, see Export route tables to Amazon S3 in the Amazon Web Services Transit Gateways Guide.
    @Sendable
    @inlinable
    public func exportTransitGatewayRoutes(_ input: ExportTransitGatewayRoutesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportTransitGatewayRoutesResult {
        try await self.client.execute(
            operation: "ExportTransitGatewayRoutes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range. The routes are saved to the specified bucket in a JSON file. For more information, see Export route tables to Amazon S3 in the Amazon Web Services Transit Gateways Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    attachment.transit-gateway-attachment-id - The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route (active | blackhole).    transit-gateway-route-destination-cidr-block - The CIDR range.    type - The type of route (propagated | static).
    ///   - s3Bucket: The name of the S3 bucket.
    ///   - transitGatewayRouteTableId: The ID of the route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportTransitGatewayRoutes(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        s3Bucket: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportTransitGatewayRoutesResult {
        let input = ExportTransitGatewayRoutesRequest(
            dryRun: dryRun, 
            filters: filters, 
            s3Bucket: s3Bucket, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.exportTransitGatewayRoutes(input, logger: logger)
    }

    /// Exports the client configuration for a Verified Access instance.
    @Sendable
    @inlinable
    public func exportVerifiedAccessInstanceClientConfiguration(_ input: ExportVerifiedAccessInstanceClientConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ExportVerifiedAccessInstanceClientConfigurationResult {
        try await self.client.execute(
            operation: "ExportVerifiedAccessInstanceClientConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Exports the client configuration for a Verified Access instance.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func exportVerifiedAccessInstanceClientConfiguration(
        dryRun: Bool? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ExportVerifiedAccessInstanceClientConfigurationResult {
        let input = ExportVerifiedAccessInstanceClientConfigurationRequest(
            dryRun: dryRun, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return try await self.exportVerifiedAccessInstanceClientConfiguration(input, logger: logger)
    }

    /// Gets the current state of the Allowed AMIs setting and the list of Allowed AMIs criteria at the account level in the specified Region.  The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.  For more information, see Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs in Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func getAllowedImagesSettings(_ input: GetAllowedImagesSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAllowedImagesSettingsResult {
        try await self.client.execute(
            operation: "GetAllowedImagesSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the current state of the Allowed AMIs setting and the list of Allowed AMIs criteria at the account level in the specified Region.  The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.  For more information, see Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs in Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - logger: Logger use during operation
    @inlinable
    public func getAllowedImagesSettings(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAllowedImagesSettingsResult {
        let input = GetAllowedImagesSettingsRequest(
            dryRun: dryRun
        )
        return try await self.getAllowedImagesSettings(input, logger: logger)
    }

    /// Returns the IAM roles that are associated with the specified ACM (ACM) certificate.
    /// 			It also returns the name of the Amazon S3 bucket and the Amazon S3 object key where the certificate,
    /// 			certificate chain, and encrypted private key bundle are stored, and the ARN of the KMS key
    /// 			that's used to encrypt the private key.
    @Sendable
    @inlinable
    public func getAssociatedEnclaveCertificateIamRoles(_ input: GetAssociatedEnclaveCertificateIamRolesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAssociatedEnclaveCertificateIamRolesResult {
        try await self.client.execute(
            operation: "GetAssociatedEnclaveCertificateIamRoles", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the IAM roles that are associated with the specified ACM (ACM) certificate.
    /// 			It also returns the name of the Amazon S3 bucket and the Amazon S3 object key where the certificate,
    /// 			certificate chain, and encrypted private key bundle are stored, and the ARN of the KMS key
    /// 			that's used to encrypt the private key.
    ///
    /// Parameters:
    ///   - certificateArn: The ARN of the ACM certificate for which to view the associated IAM roles, encryption keys, and Amazon
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAssociatedEnclaveCertificateIamRoles(
        certificateArn: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAssociatedEnclaveCertificateIamRolesResult {
        let input = GetAssociatedEnclaveCertificateIamRolesRequest(
            certificateArn: certificateArn, 
            dryRun: dryRun
        )
        return try await self.getAssociatedEnclaveCertificateIamRoles(input, logger: logger)
    }

    /// Gets information about the IPv6 CIDR block associations for a specified IPv6 address pool.
    @Sendable
    @inlinable
    public func getAssociatedIpv6PoolCidrs(_ input: GetAssociatedIpv6PoolCidrsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAssociatedIpv6PoolCidrsResult {
        try await self.client.execute(
            operation: "GetAssociatedIpv6PoolCidrs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the IPv6 CIDR block associations for a specified IPv6 address pool.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - poolId: The ID of the IPv6 address pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAssociatedIpv6PoolCidrs(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        poolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAssociatedIpv6PoolCidrsResult {
        let input = GetAssociatedIpv6PoolCidrsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            poolId: poolId
        )
        return try await self.getAssociatedIpv6PoolCidrs(input, logger: logger)
    }

    /// Gets network performance data.
    @Sendable
    @inlinable
    public func getAwsNetworkPerformanceData(_ input: GetAwsNetworkPerformanceDataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetAwsNetworkPerformanceDataResult {
        try await self.client.execute(
            operation: "GetAwsNetworkPerformanceData", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets network performance data.
    ///
    /// Parameters:
    ///   - dataQueries: A list of network performance data queries.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - endTime: The ending time for the performance data request. The end time must be formatted as yyyy-mm-ddThh:mm:ss. For example, 2022-06-12T12:00:00.000Z.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - nextToken: The token for the next page of results.
    ///   - startTime: The starting time for the performance data request. The starting time must be formatted as yyyy-mm-ddThh:mm:ss.  For example, 2022-06-10T12:00:00.000Z.
    ///   - logger: Logger use during operation
    @inlinable
    public func getAwsNetworkPerformanceData(
        dataQueries: [DataQuery]? = nil,
        dryRun: Bool? = nil,
        endTime: Date? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetAwsNetworkPerformanceDataResult {
        let input = GetAwsNetworkPerformanceDataRequest(
            dataQueries: dataQueries, 
            dryRun: dryRun, 
            endTime: endTime, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            startTime: startTime
        )
        return try await self.getAwsNetworkPerformanceData(input, logger: logger)
    }

    /// Gets usage information about a Capacity Reservation. If the Capacity Reservation is
    /// 			shared, it shows usage information for the Capacity Reservation owner and each Amazon Web Services account that is currently using the shared capacity. If the Capacity
    /// 			Reservation is not shared, it shows only the Capacity Reservation owner's usage.
    @Sendable
    @inlinable
    public func getCapacityReservationUsage(_ input: GetCapacityReservationUsageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCapacityReservationUsageResult {
        try await self.client.execute(
            operation: "GetCapacityReservationUsage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets usage information about a Capacity Reservation. If the Capacity Reservation is
    /// 			shared, it shows usage information for the Capacity Reservation owner and each Amazon Web Services account that is currently using the shared capacity. If the Capacity
    /// 			Reservation is not shared, it shows only the Capacity Reservation owner's usage.
    ///
    /// Parameters:
    ///   - capacityReservationId: The ID of the Capacity Reservation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCapacityReservationUsage(
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCapacityReservationUsageResult {
        let input = GetCapacityReservationUsageRequest(
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getCapacityReservationUsage(input, logger: logger)
    }

    /// Describes the allocations from the specified customer-owned address pool.
    @Sendable
    @inlinable
    public func getCoipPoolUsage(_ input: GetCoipPoolUsageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetCoipPoolUsageResult {
        try await self.client.execute(
            operation: "GetCoipPoolUsage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the allocations from the specified customer-owned address pool.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    coip-address-usage.allocation-id - The allocation ID of the address.    coip-address-usage.aws-account-id - The ID of the Amazon Web Services account that is using the customer-owned IP address.    coip-address-usage.aws-service - The Amazon Web Services service that is using the customer-owned IP address.    coip-address-usage.co-ip - The customer-owned IP address.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - poolId: The ID of the address pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func getCoipPoolUsage(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        poolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetCoipPoolUsageResult {
        let input = GetCoipPoolUsageRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            poolId: poolId
        )
        return try await self.getCoipPoolUsage(input, logger: logger)
    }

    /// Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors. For more information, see Instance console output in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func getConsoleOutput(_ input: GetConsoleOutputRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConsoleOutputResult {
        try await self.client.execute(
            operation: "GetConsoleOutput", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors. For more information, see Instance console output in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance.
    ///   - latest: When enabled, retrieves the latest console output for the instance. Default: disabled (false)
    ///   - logger: Logger use during operation
    @inlinable
    public func getConsoleOutput(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        latest: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetConsoleOutputResult {
        let input = GetConsoleOutputRequest(
            dryRun: dryRun, 
            instanceId: instanceId, 
            latest: latest
        )
        return try await self.getConsoleOutput(input, logger: logger)
    }

    /// Retrieve a JPG-format screenshot of a running instance to help with troubleshooting. The returned content is Base64-encoded. For more information, see Instance console output in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func getConsoleScreenshot(_ input: GetConsoleScreenshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetConsoleScreenshotResult {
        try await self.client.execute(
            operation: "GetConsoleScreenshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieve a JPG-format screenshot of a running instance to help with troubleshooting. The returned content is Base64-encoded. For more information, see Instance console output in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance.
    ///   - wakeUp: When set to true, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.
    ///   - logger: Logger use during operation
    @inlinable
    public func getConsoleScreenshot(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        wakeUp: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetConsoleScreenshotResult {
        let input = GetConsoleScreenshotRequest(
            dryRun: dryRun, 
            instanceId: instanceId, 
            wakeUp: wakeUp
        )
        return try await self.getConsoleScreenshot(input, logger: logger)
    }

    /// Retrieves a summary of the account status report. To view the full report, download it from the Amazon S3 bucket where it was saved. Reports are accessible only when they have the complete status. Reports with other statuses (running, cancelled, or error) are not available in the S3 bucket. For more information about downloading objects from an S3 bucket, see Downloading objects in the Amazon Simple Storage Service User Guide. For more information, see Generating the account status report for declarative policies in the Amazon Web Services Organizations User Guide.
    @Sendable
    @inlinable
    public func getDeclarativePoliciesReportSummary(_ input: GetDeclarativePoliciesReportSummaryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDeclarativePoliciesReportSummaryResult {
        try await self.client.execute(
            operation: "GetDeclarativePoliciesReportSummary", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves a summary of the account status report. To view the full report, download it from the Amazon S3 bucket where it was saved. Reports are accessible only when they have the complete status. Reports with other statuses (running, cancelled, or error) are not available in the S3 bucket. For more information about downloading objects from an S3 bucket, see Downloading objects in the Amazon Simple Storage Service User Guide. For more information, see Generating the account status report for declarative policies in the Amazon Web Services Organizations User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - reportId: The ID of the report.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDeclarativePoliciesReportSummary(
        dryRun: Bool? = nil,
        reportId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDeclarativePoliciesReportSummaryResult {
        let input = GetDeclarativePoliciesReportSummaryRequest(
            dryRun: dryRun, 
            reportId: reportId
        )
        return try await self.getDeclarativePoliciesReportSummary(input, logger: logger)
    }

    /// Describes the default credit option for CPU usage of a burstable performance instance family. For more information, see Burstable performance instances in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func getDefaultCreditSpecification(_ input: GetDefaultCreditSpecificationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetDefaultCreditSpecificationResult {
        try await self.client.execute(
            operation: "GetDefaultCreditSpecification", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the default credit option for CPU usage of a burstable performance instance family. For more information, see Burstable performance instances in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceFamily: The instance family.
    ///   - logger: Logger use during operation
    @inlinable
    public func getDefaultCreditSpecification(
        dryRun: Bool? = nil,
        instanceFamily: UnlimitedSupportedInstanceFamily? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetDefaultCreditSpecificationResult {
        let input = GetDefaultCreditSpecificationRequest(
            dryRun: dryRun, 
            instanceFamily: instanceFamily
        )
        return try await self.getDefaultCreditSpecification(input, logger: logger)
    }

    /// Describes the default KMS key for EBS encryption by default for your account in this Region.  		You can change the default KMS key for encryption by default using ModifyEbsDefaultKmsKeyId or ResetEbsDefaultKmsKeyId. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func getEbsDefaultKmsKeyId(_ input: GetEbsDefaultKmsKeyIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEbsDefaultKmsKeyIdResult {
        try await self.client.execute(
            operation: "GetEbsDefaultKmsKeyId", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes the default KMS key for EBS encryption by default for your account in this Region.  		You can change the default KMS key for encryption by default using ModifyEbsDefaultKmsKeyId or ResetEbsDefaultKmsKeyId. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEbsDefaultKmsKeyId(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEbsDefaultKmsKeyIdResult {
        let input = GetEbsDefaultKmsKeyIdRequest(
            dryRun: dryRun
        )
        return try await self.getEbsDefaultKmsKeyId(input, logger: logger)
    }

    /// Describes whether EBS encryption by default is enabled for your account in the current Region. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func getEbsEncryptionByDefault(_ input: GetEbsEncryptionByDefaultRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetEbsEncryptionByDefaultResult {
        try await self.client.execute(
            operation: "GetEbsEncryptionByDefault", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Describes whether EBS encryption by default is enabled for your account in the current Region. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getEbsEncryptionByDefault(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetEbsEncryptionByDefaultResult {
        let input = GetEbsEncryptionByDefaultRequest(
            dryRun: dryRun
        )
        return try await self.getEbsEncryptionByDefault(input, logger: logger)
    }

    /// Generates a CloudFormation template that streamlines and automates the integration of VPC flow logs  with Amazon Athena. This make it easier for you to query and gain insights from VPC flow logs data.  Based on the information that you provide, we configure resources in the template to do the following:   Create a table in Athena that maps fields to a custom log format   Create a Lambda function that updates the table with new partitions on a daily, weekly, or monthly basis   Create a table partitioned between two timestamps in the past   Create a set of named queries in Athena that you can use to get started quickly     GetFlowLogsIntegrationTemplate does not support integration between Amazon Web Services Transit Gateway Flow Logs and Amazon Athena.
    @Sendable
    @inlinable
    public func getFlowLogsIntegrationTemplate(_ input: GetFlowLogsIntegrationTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetFlowLogsIntegrationTemplateResult {
        try await self.client.execute(
            operation: "GetFlowLogsIntegrationTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Generates a CloudFormation template that streamlines and automates the integration of VPC flow logs  with Amazon Athena. This make it easier for you to query and gain insights from VPC flow logs data.  Based on the information that you provide, we configure resources in the template to do the following:   Create a table in Athena that maps fields to a custom log format   Create a Lambda function that updates the table with new partitions on a daily, weekly, or monthly basis   Create a table partitioned between two timestamps in the past   Create a set of named queries in Athena that you can use to get started quickly     GetFlowLogsIntegrationTemplate does not support integration between Amazon Web Services Transit Gateway Flow Logs and Amazon Athena.
    ///
    /// Parameters:
    ///   - configDeliveryS3DestinationArn: To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - flowLogId: The ID of the flow log.
    ///   - integrateServices: Information about the service integration.
    ///   - logger: Logger use during operation
    @inlinable
    public func getFlowLogsIntegrationTemplate(
        configDeliveryS3DestinationArn: String? = nil,
        dryRun: Bool? = nil,
        flowLogId: String? = nil,
        integrateServices: IntegrateServices? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetFlowLogsIntegrationTemplateResult {
        let input = GetFlowLogsIntegrationTemplateRequest(
            configDeliveryS3DestinationArn: configDeliveryS3DestinationArn, 
            dryRun: dryRun, 
            flowLogId: flowLogId, 
            integrateServices: integrateServices
        )
        return try await self.getFlowLogsIntegrationTemplate(input, logger: logger)
    }

    /// Lists the resource groups to which a Capacity Reservation has been added.
    @Sendable
    @inlinable
    public func getGroupsForCapacityReservation(_ input: GetGroupsForCapacityReservationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetGroupsForCapacityReservationResult {
        try await self.client.execute(
            operation: "GetGroupsForCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the resource groups to which a Capacity Reservation has been added.
    ///
    /// Parameters:
    ///   - capacityReservationId: The ID of the Capacity Reservation. If you specify a Capacity Reservation that is
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - nextToken: The token to use to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func getGroupsForCapacityReservation(
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetGroupsForCapacityReservationResult {
        let input = GetGroupsForCapacityReservationRequest(
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getGroupsForCapacityReservation(input, logger: logger)
    }

    /// Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This is a preview of the PurchaseHostReservation action and does not result in the offering being purchased.
    @Sendable
    @inlinable
    public func getHostReservationPurchasePreview(_ input: GetHostReservationPurchasePreviewRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetHostReservationPurchasePreviewResult {
        try await self.client.execute(
            operation: "GetHostReservationPurchasePreview", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This is a preview of the PurchaseHostReservation action and does not result in the offering being purchased.
    ///
    /// Parameters:
    ///   - hostIdSet: The IDs of the Dedicated Hosts with which the reservation is associated.
    ///   - offeringId: The offering ID of the reservation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getHostReservationPurchasePreview(
        hostIdSet: [String]? = nil,
        offeringId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetHostReservationPurchasePreviewResult {
        let input = GetHostReservationPurchasePreviewRequest(
            hostIdSet: hostIdSet, 
            offeringId: offeringId
        )
        return try await self.getHostReservationPurchasePreview(input, logger: logger)
    }

    /// Gets the current state of block public access for AMIs at the account level in the specified Amazon Web Services Region. For more information, see Block public access to your AMIs in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func getImageBlockPublicAccessState(_ input: GetImageBlockPublicAccessStateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetImageBlockPublicAccessStateResult {
        try await self.client.execute(
            operation: "GetImageBlockPublicAccessState", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the current state of block public access for AMIs at the account level in the specified Amazon Web Services Region. For more information, see Block public access to your AMIs in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - logger: Logger use during operation
    @inlinable
    public func getImageBlockPublicAccessState(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetImageBlockPublicAccessStateResult {
        let input = GetImageBlockPublicAccessStateRequest(
            dryRun: dryRun
        )
        return try await self.getImageBlockPublicAccessState(input, logger: logger)
    }

    /// Gets the default instance metadata service (IMDS) settings that are set at the account level in the specified Amazon Web Services  Region. For more information, see Order of precedence for instance metadata options in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func getInstanceMetadataDefaults(_ input: GetInstanceMetadataDefaultsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetInstanceMetadataDefaultsResult {
        try await self.client.execute(
            operation: "GetInstanceMetadataDefaults", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the default instance metadata service (IMDS) settings that are set at the account level in the specified Amazon Web Services  Region. For more information, see Order of precedence for instance metadata options in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getInstanceMetadataDefaults(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetInstanceMetadataDefaultsResult {
        let input = GetInstanceMetadataDefaultsRequest(
            dryRun: dryRun
        )
        return try await self.getInstanceMetadataDefaults(input, logger: logger)
    }

    /// Gets the public endorsement key associated with the Nitro Trusted  Platform Module (NitroTPM) for the specified instance.
    @Sendable
    @inlinable
    public func getInstanceTpmEkPub(_ input: GetInstanceTpmEkPubRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetInstanceTpmEkPubResult {
        try await self.client.execute(
            operation: "GetInstanceTpmEkPub", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the public endorsement key associated with the Nitro Trusted  Platform Module (NitroTPM) for the specified instance.
    ///
    /// Parameters:
    ///   - dryRun: Specify this parameter to verify whether the request will succeed, without actually making the  request. If the request will succeed, the response is DryRunOperation. Otherwise,  the response is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance for which to get the public endorsement key.
    ///   - keyFormat: The required public endorsement key format. Specify der for a DER-encoded public  key that is compatible with OpenSSL. Specify tpmt for a TPM 2.0 format that is  compatible with tpm2-tools. The returned key is base64 encoded.
    ///   - keyType: The required public endorsement key type.
    ///   - logger: Logger use during operation
    @inlinable
    public func getInstanceTpmEkPub(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        keyFormat: EkPubKeyFormat? = nil,
        keyType: EkPubKeyType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetInstanceTpmEkPubResult {
        let input = GetInstanceTpmEkPubRequest(
            dryRun: dryRun, 
            instanceId: instanceId, 
            keyFormat: keyFormat, 
            keyType: keyType
        )
        return try await self.getInstanceTpmEkPub(input, logger: logger)
    }

    /// Returns a list of instance types with the specified instance attributes. You can use the response to preview the instance types without launching instances. Note that the response does not consider capacity. When you specify multiple parameters, you get instance types that satisfy all of the specified parameters. If you specify multiple values for a parameter, you get instance types that satisfy any of the specified values. For more information, see Preview instance types with specified attributes, Specify attributes for instance type selection for EC2 Fleet or Spot Fleet, and Spot placement score in the Amazon EC2 User Guide, and Creating mixed instance groups using attribute-based instance type selection in the Amazon EC2 Auto Scaling User Guide.
    @Sendable
    @inlinable
    public func getInstanceTypesFromInstanceRequirements(_ input: GetInstanceTypesFromInstanceRequirementsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetInstanceTypesFromInstanceRequirementsResult {
        try await self.client.execute(
            operation: "GetInstanceTypesFromInstanceRequirements", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of instance types with the specified instance attributes. You can use the response to preview the instance types without launching instances. Note that the response does not consider capacity. When you specify multiple parameters, you get instance types that satisfy all of the specified parameters. If you specify multiple values for a parameter, you get instance types that satisfy any of the specified values. For more information, see Preview instance types with specified attributes, Specify attributes for instance type selection for EC2 Fleet or Spot Fleet, and Spot placement score in the Amazon EC2 User Guide, and Creating mixed instance groups using attribute-based instance type selection in the Amazon EC2 Auto Scaling User Guide.
    ///
    /// Parameters:
    ///   - architectureTypes: The processor architecture type.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceRequirements: The attributes required for the instance types.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - virtualizationTypes: The virtualization type.
    ///   - logger: Logger use during operation
    @inlinable
    public func getInstanceTypesFromInstanceRequirements(
        architectureTypes: [ArchitectureType]? = nil,
        dryRun: Bool? = nil,
        instanceRequirements: InstanceRequirementsRequest? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        virtualizationTypes: [VirtualizationType]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetInstanceTypesFromInstanceRequirementsResult {
        let input = GetInstanceTypesFromInstanceRequirementsRequest(
            architectureTypes: architectureTypes, 
            dryRun: dryRun, 
            instanceRequirements: instanceRequirements, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            virtualizationTypes: virtualizationTypes
        )
        return try await self.getInstanceTypesFromInstanceRequirements(input, logger: logger)
    }

    /// A binary representation of the UEFI variable store. Only non-volatile variables are stored. This is a base64 encoded and zlib compressed binary value that must be properly encoded. When you use register-image to create an AMI, you can create an exact copy of your variable store by passing the UEFI data in the UefiData parameter. You can modify the UEFI data by using the python-uefivars tool on GitHub. You can use the tool to convert the UEFI data into a human-readable format (JSON), which you can inspect and modify, and then convert back into the binary format to use with register-image. For more information, see UEFI Secure Boot in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func getInstanceUefiData(_ input: GetInstanceUefiDataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetInstanceUefiDataResult {
        try await self.client.execute(
            operation: "GetInstanceUefiData", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// A binary representation of the UEFI variable store. Only non-volatile variables are stored. This is a base64 encoded and zlib compressed binary value that must be properly encoded. When you use register-image to create an AMI, you can create an exact copy of your variable store by passing the UEFI data in the UefiData parameter. You can modify the UEFI data by using the python-uefivars tool on GitHub. You can use the tool to convert the UEFI data into a human-readable format (JSON), which you can inspect and modify, and then convert back into the binary format to use with register-image. For more information, see UEFI Secure Boot in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance from which to retrieve the UEFI data.
    ///   - logger: Logger use during operation
    @inlinable
    public func getInstanceUefiData(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetInstanceUefiDataResult {
        let input = GetInstanceUefiDataRequest(
            dryRun: dryRun, 
            instanceId: instanceId
        )
        return try await self.getInstanceUefiData(input, logger: logger)
    }

    /// Retrieve historical information about a CIDR within an IPAM scope. For more information, see View the history of IP addresses in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func getIpamAddressHistory(_ input: GetIpamAddressHistoryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIpamAddressHistoryResult {
        try await self.client.execute(
            operation: "GetIpamAddressHistory", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieve historical information about a CIDR within an IPAM scope. For more information, see View the history of IP addresses in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - cidr: The CIDR you want the history of. The CIDR can be an IPv4 or IPv6 IP address range.  If you enter a /16 IPv4 CIDR, you will get records that match it exactly. You will not get records for any subnets within the /16 CIDR.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - endTime: The end of the time period for which you are looking for history. If you omit this option, it will default to the current time.
    ///   - ipamScopeId: The ID of the IPAM scope that the CIDR is in.
    ///   - maxResults: The maximum number of historical results you would like returned per page. Defaults to 100.
    ///   - nextToken: The token for the next page of results.
    ///   - startTime: The start of the time period for which you are looking for history. If you omit this option, it will default to the value of EndTime.
    ///   - vpcId: The ID of the VPC you want your history records filtered by.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIpamAddressHistory(
        cidr: String? = nil,
        dryRun: Bool? = nil,
        endTime: Date? = nil,
        ipamScopeId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        startTime: Date? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIpamAddressHistoryResult {
        let input = GetIpamAddressHistoryRequest(
            cidr: cidr, 
            dryRun: dryRun, 
            endTime: endTime, 
            ipamScopeId: ipamScopeId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            startTime: startTime, 
            vpcId: vpcId
        )
        return try await self.getIpamAddressHistory(input, logger: logger)
    }

    /// Gets IPAM discovered accounts. A discovered account is an Amazon Web Services account that is monitored under a resource discovery. If you have integrated IPAM with Amazon Web Services Organizations, all accounts in the organization are discovered accounts. Only the IPAM account can get all discovered accounts in the organization.
    @Sendable
    @inlinable
    public func getIpamDiscoveredAccounts(_ input: GetIpamDiscoveredAccountsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIpamDiscoveredAccountsResult {
        try await self.client.execute(
            operation: "GetIpamDiscoveredAccounts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets IPAM discovered accounts. A discovered account is an Amazon Web Services account that is monitored under a resource discovery. If you have integrated IPAM with Amazon Web Services Organizations, all accounts in the organization are discovered accounts. Only the IPAM account can get all discovered accounts in the organization.
    ///
    /// Parameters:
    ///   - discoveryRegion: The Amazon Web Services Region that the account information is returned from.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Discovered account filters.
    ///   - ipamResourceDiscoveryId: A resource discovery ID.
    ///   - maxResults: The maximum number of discovered accounts to return in one page of results.
    ///   - nextToken: Specify the pagination token from a previous request to retrieve the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIpamDiscoveredAccounts(
        discoveryRegion: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamResourceDiscoveryId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIpamDiscoveredAccountsResult {
        let input = GetIpamDiscoveredAccountsRequest(
            discoveryRegion: discoveryRegion, 
            dryRun: dryRun, 
            filters: filters, 
            ipamResourceDiscoveryId: ipamResourceDiscoveryId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getIpamDiscoveredAccounts(input, logger: logger)
    }

    /// Gets the public IP addresses that have been discovered by IPAM.
    @Sendable
    @inlinable
    public func getIpamDiscoveredPublicAddresses(_ input: GetIpamDiscoveredPublicAddressesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIpamDiscoveredPublicAddressesResult {
        try await self.client.execute(
            operation: "GetIpamDiscoveredPublicAddresses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the public IP addresses that have been discovered by IPAM.
    ///
    /// Parameters:
    ///   - addressRegion: The Amazon Web Services Region for the IP address.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Filters.
    ///   - ipamResourceDiscoveryId: An IPAM resource discovery ID.
    ///   - maxResults: The maximum number of IPAM discovered public addresses to return in one page of results.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIpamDiscoveredPublicAddresses(
        addressRegion: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamResourceDiscoveryId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIpamDiscoveredPublicAddressesResult {
        let input = GetIpamDiscoveredPublicAddressesRequest(
            addressRegion: addressRegion, 
            dryRun: dryRun, 
            filters: filters, 
            ipamResourceDiscoveryId: ipamResourceDiscoveryId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getIpamDiscoveredPublicAddresses(input, logger: logger)
    }

    /// Returns the resource CIDRs that are monitored as part of a resource discovery. A discovered resource is a resource CIDR monitored under a resource discovery. The following resources can be discovered: VPCs, Public IPv4 pools, VPC subnets, and Elastic IP addresses.
    @Sendable
    @inlinable
    public func getIpamDiscoveredResourceCidrs(_ input: GetIpamDiscoveredResourceCidrsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIpamDiscoveredResourceCidrsResult {
        try await self.client.execute(
            operation: "GetIpamDiscoveredResourceCidrs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns the resource CIDRs that are monitored as part of a resource discovery. A discovered resource is a resource CIDR monitored under a resource discovery. The following resources can be discovered: VPCs, Public IPv4 pools, VPC subnets, and Elastic IP addresses.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Filters.
    ///   - ipamResourceDiscoveryId: A resource discovery ID.
    ///   - maxResults: The maximum number of discovered resource CIDRs to return in one page of results.
    ///   - nextToken: Specify the pagination token from a previous request to retrieve the next page of results.
    ///   - resourceRegion: A resource Region.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIpamDiscoveredResourceCidrs(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamResourceDiscoveryId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceRegion: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIpamDiscoveredResourceCidrsResult {
        let input = GetIpamDiscoveredResourceCidrsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamResourceDiscoveryId: ipamResourceDiscoveryId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceRegion: resourceRegion
        )
        return try await self.getIpamDiscoveredResourceCidrs(input, logger: logger)
    }

    /// Get a list of all the CIDR allocations in an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations.  If you use this action after AllocateIpamPoolCidr or ReleaseIpamPoolAllocation, note that all EC2 API actions follow an eventual consistency model.
    @Sendable
    @inlinable
    public func getIpamPoolAllocations(_ input: GetIpamPoolAllocationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIpamPoolAllocationsResult {
        try await self.client.execute(
            operation: "GetIpamPoolAllocations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get a list of all the CIDR allocations in an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations.  If you use this action after AllocateIpamPoolCidr or ReleaseIpamPoolAllocation, note that all EC2 API actions follow an eventual consistency model.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamPoolAllocationId: The ID of the allocation.
    ///   - ipamPoolId: The ID of the IPAM pool you want to see the allocations for.
    ///   - maxResults: The maximum number of results you would like returned per page.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIpamPoolAllocations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamPoolAllocationId: String? = nil,
        ipamPoolId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIpamPoolAllocationsResult {
        let input = GetIpamPoolAllocationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamPoolAllocationId: ipamPoolAllocationId, 
            ipamPoolId: ipamPoolId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getIpamPoolAllocations(input, logger: logger)
    }

    /// Get the CIDRs provisioned to an IPAM pool.
    @Sendable
    @inlinable
    public func getIpamPoolCidrs(_ input: GetIpamPoolCidrsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIpamPoolCidrsResult {
        try await self.client.execute(
            operation: "GetIpamPoolCidrs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the CIDRs provisioned to an IPAM pool.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamPoolId: The ID of the IPAM pool you want the CIDR for.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIpamPoolCidrs(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamPoolId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIpamPoolCidrsResult {
        let input = GetIpamPoolCidrsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamPoolId: ipamPoolId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getIpamPoolCidrs(input, logger: logger)
    }

    /// Returns resource CIDRs managed by IPAM in a given scope. If an IPAM is associated with more than one resource discovery, the resource CIDRs across all of the resource discoveries is returned. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    @Sendable
    @inlinable
    public func getIpamResourceCidrs(_ input: GetIpamResourceCidrsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetIpamResourceCidrsResult {
        try await self.client.execute(
            operation: "GetIpamResourceCidrs", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns resource CIDRs managed by IPAM in a given scope. If an IPAM is associated with more than one resource discovery, the resource CIDRs across all of the resource discoveries is returned. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamPoolId: The ID of the IPAM pool that the resource is in.
    ///   - ipamScopeId: The ID of the scope that the resource is in.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - nextToken: The token for the next page of results.
    ///   - resourceId: The ID of the resource.
    ///   - resourceOwner: The ID of the Amazon Web Services account that owns the resource.
    ///   - resourceTag: The resource tag.
    ///   - resourceType: The resource type.
    ///   - logger: Logger use during operation
    @inlinable
    public func getIpamResourceCidrs(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamPoolId: String? = nil,
        ipamScopeId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        resourceId: String? = nil,
        resourceOwner: String? = nil,
        resourceTag: RequestIpamResourceTag? = nil,
        resourceType: IpamResourceType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetIpamResourceCidrsResult {
        let input = GetIpamResourceCidrsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamPoolId: ipamPoolId, 
            ipamScopeId: ipamScopeId, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            resourceId: resourceId, 
            resourceOwner: resourceOwner, 
            resourceTag: resourceTag, 
            resourceType: resourceType
        )
        return try await self.getIpamResourceCidrs(input, logger: logger)
    }

    /// Retrieves the configuration data of the specified instance. You can use this data to create a launch template.  This action calls on other describe actions to get instance information. Depending on your instance configuration, you may need to allow the following actions in your IAM policy: DescribeSpotInstanceRequests, DescribeInstanceCreditSpecifications,  DescribeVolumes, and DescribeInstanceAttribute. Or, you can allow describe* depending on your instance requirements.
    @Sendable
    @inlinable
    public func getLaunchTemplateData(_ input: GetLaunchTemplateDataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetLaunchTemplateDataResult {
        try await self.client.execute(
            operation: "GetLaunchTemplateData", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the configuration data of the specified instance. You can use this data to create a launch template.  This action calls on other describe actions to get instance information. Depending on your instance configuration, you may need to allow the following actions in your IAM policy: DescribeSpotInstanceRequests, DescribeInstanceCreditSpecifications,  DescribeVolumes, and DescribeInstanceAttribute. Or, you can allow describe* depending on your instance requirements.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func getLaunchTemplateData(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetLaunchTemplateDataResult {
        let input = GetLaunchTemplateDataRequest(
            dryRun: dryRun, 
            instanceId: instanceId
        )
        return try await self.getLaunchTemplateData(input, logger: logger)
    }

    /// Gets information about the resources that are associated with the specified managed prefix list.
    @Sendable
    @inlinable
    public func getManagedPrefixListAssociations(_ input: GetManagedPrefixListAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetManagedPrefixListAssociationsResult {
        try await self.client.execute(
            operation: "GetManagedPrefixListAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the resources that are associated with the specified managed prefix list.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - prefixListId: The ID of the prefix list.
    ///   - logger: Logger use during operation
    @inlinable
    public func getManagedPrefixListAssociations(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        prefixListId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetManagedPrefixListAssociationsResult {
        let input = GetManagedPrefixListAssociationsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            prefixListId: prefixListId
        )
        return try await self.getManagedPrefixListAssociations(input, logger: logger)
    }

    /// Gets information about the entries for a specified managed prefix list.
    @Sendable
    @inlinable
    public func getManagedPrefixListEntries(_ input: GetManagedPrefixListEntriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetManagedPrefixListEntriesResult {
        try await self.client.execute(
            operation: "GetManagedPrefixListEntries", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the entries for a specified managed prefix list.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - prefixListId: The ID of the prefix list.
    ///   - targetVersion: The version of the prefix list for which to return the entries. The default is the current version.
    ///   - logger: Logger use during operation
    @inlinable
    public func getManagedPrefixListEntries(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        prefixListId: String? = nil,
        targetVersion: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetManagedPrefixListEntriesResult {
        let input = GetManagedPrefixListEntriesRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            prefixListId: prefixListId, 
            targetVersion: targetVersion
        )
        return try await self.getManagedPrefixListEntries(input, logger: logger)
    }

    /// Gets the findings for the specified Network Access Scope analysis.
    @Sendable
    @inlinable
    public func getNetworkInsightsAccessScopeAnalysisFindings(_ input: GetNetworkInsightsAccessScopeAnalysisFindingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNetworkInsightsAccessScopeAnalysisFindingsResult {
        try await self.client.execute(
            operation: "GetNetworkInsightsAccessScopeAnalysisFindings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the findings for the specified Network Access Scope analysis.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsAccessScopeAnalysisId: The ID of the Network Access Scope analysis.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func getNetworkInsightsAccessScopeAnalysisFindings(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        networkInsightsAccessScopeAnalysisId: String? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetNetworkInsightsAccessScopeAnalysisFindingsResult {
        let input = GetNetworkInsightsAccessScopeAnalysisFindingsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            networkInsightsAccessScopeAnalysisId: networkInsightsAccessScopeAnalysisId, 
            nextToken: nextToken
        )
        return try await self.getNetworkInsightsAccessScopeAnalysisFindings(input, logger: logger)
    }

    /// Gets the content for the specified Network Access Scope.
    @Sendable
    @inlinable
    public func getNetworkInsightsAccessScopeContent(_ input: GetNetworkInsightsAccessScopeContentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetNetworkInsightsAccessScopeContentResult {
        try await self.client.execute(
            operation: "GetNetworkInsightsAccessScopeContent", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the content for the specified Network Access Scope.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInsightsAccessScopeId: The ID of the Network Access Scope.
    ///   - logger: Logger use during operation
    @inlinable
    public func getNetworkInsightsAccessScopeContent(
        dryRun: Bool? = nil,
        networkInsightsAccessScopeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetNetworkInsightsAccessScopeContentResult {
        let input = GetNetworkInsightsAccessScopeContentRequest(
            dryRun: dryRun, 
            networkInsightsAccessScopeId: networkInsightsAccessScopeId
        )
        return try await self.getNetworkInsightsAccessScopeContent(input, logger: logger)
    }

    /// Retrieves the encrypted administrator password for a running Windows instance. The Windows password is generated at boot by the EC2Config service or EC2Launch scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see EC2Config and EC2Launch in the Amazon EC2 User Guide. For the EC2Config service, the password is not generated for rebundled AMIs unless Ec2SetPassword is enabled before bundling. The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file. When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it's available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.
    @Sendable
    @inlinable
    public func getPasswordData(_ input: GetPasswordDataRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetPasswordDataResult {
        try await self.client.execute(
            operation: "GetPasswordData", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the encrypted administrator password for a running Windows instance. The Windows password is generated at boot by the EC2Config service or EC2Launch scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see EC2Config and EC2Launch in the Amazon EC2 User Guide. For the EC2Config service, the password is not generated for rebundled AMIs unless Ec2SetPassword is enabled before bundling. The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file. When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it's available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the Windows instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func getPasswordData(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetPasswordDataResult {
        let input = GetPasswordDataRequest(
            dryRun: dryRun, 
            instanceId: instanceId
        )
        return try await self.getPasswordData(input, logger: logger)
    }

    /// Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use AcceptReservedInstancesExchangeQuote to perform the exchange.
    @Sendable
    @inlinable
    public func getReservedInstancesExchangeQuote(_ input: GetReservedInstancesExchangeQuoteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetReservedInstancesExchangeQuoteResult {
        try await self.client.execute(
            operation: "GetReservedInstancesExchangeQuote", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use AcceptReservedInstancesExchangeQuote to perform the exchange.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - reservedInstanceIds: The IDs of the Convertible Reserved Instances to exchange.
    ///   - targetConfigurations: The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func getReservedInstancesExchangeQuote(
        dryRun: Bool? = nil,
        reservedInstanceIds: [String]? = nil,
        targetConfigurations: [TargetConfigurationRequest]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetReservedInstancesExchangeQuoteResult {
        let input = GetReservedInstancesExchangeQuoteRequest(
            dryRun: dryRun, 
            reservedInstanceIds: reservedInstanceIds, 
            targetConfigurations: targetConfigurations
        )
        return try await self.getReservedInstancesExchangeQuote(input, logger: logger)
    }

    /// Gets security groups that can be associated by the Amazon Web Services account making the request with network interfaces in the specified VPC.
    @Sendable
    @inlinable
    public func getSecurityGroupsForVpc(_ input: GetSecurityGroupsForVpcRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSecurityGroupsForVpcResult {
        try await self.client.execute(
            operation: "GetSecurityGroupsForVpc", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets security groups that can be associated by the Amazon Web Services account making the request with network interfaces in the specified VPC.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. If using multiple filters, the results include security groups which match all filters.    group-id: The security group ID.    description: The security group's description.    group-name: The security group name.    owner-id: The security group owner ID.    primary-vpc-id: The VPC ID in which the security group was created.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - vpcId: The VPC ID where the security group can be used.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSecurityGroupsForVpc(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSecurityGroupsForVpcResult {
        let input = GetSecurityGroupsForVpcRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcId: vpcId
        )
        return try await self.getSecurityGroupsForVpc(input, logger: logger)
    }

    /// Retrieves the access status of your account to the EC2 serial console of all instances. By
    /// 			default, access to the EC2 serial console is disabled for your account. For more
    /// 			information, see Manage account access to the EC2 serial console in the Amazon EC2
    /// 				User Guide.
    @Sendable
    @inlinable
    public func getSerialConsoleAccessStatus(_ input: GetSerialConsoleAccessStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSerialConsoleAccessStatusResult {
        try await self.client.execute(
            operation: "GetSerialConsoleAccessStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Retrieves the access status of your account to the EC2 serial console of all instances. By
    /// 			default, access to the EC2 serial console is disabled for your account. For more
    /// 			information, see Manage account access to the EC2 serial console in the Amazon EC2
    /// 				User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSerialConsoleAccessStatus(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSerialConsoleAccessStatusResult {
        let input = GetSerialConsoleAccessStatusRequest(
            dryRun: dryRun
        )
        return try await self.getSerialConsoleAccessStatus(input, logger: logger)
    }

    /// Gets the current state of block public access for snapshots setting  for the account and Region. For more information, see  Block public access for snapshots in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func getSnapshotBlockPublicAccessState(_ input: GetSnapshotBlockPublicAccessStateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSnapshotBlockPublicAccessStateResult {
        try await self.client.execute(
            operation: "GetSnapshotBlockPublicAccessState", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the current state of block public access for snapshots setting  for the account and Region. For more information, see  Block public access for snapshots in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSnapshotBlockPublicAccessState(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSnapshotBlockPublicAccessStateResult {
        let input = GetSnapshotBlockPublicAccessStateRequest(
            dryRun: dryRun
        )
        return try await self.getSnapshotBlockPublicAccessState(input, logger: logger)
    }

    /// Calculates the Spot placement score for a Region or Availability Zone based on the specified target capacity and compute requirements. You can specify your compute requirements either by using InstanceRequirementsWithMetadata and letting Amazon EC2 choose the optimal instance types to fulfill your Spot request, or you can specify the instance types by using InstanceTypes. For more information, see Spot placement score in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func getSpotPlacementScores(_ input: GetSpotPlacementScoresRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSpotPlacementScoresResult {
        try await self.client.execute(
            operation: "GetSpotPlacementScores", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Calculates the Spot placement score for a Region or Availability Zone based on the specified target capacity and compute requirements. You can specify your compute requirements either by using InstanceRequirementsWithMetadata and letting Amazon EC2 choose the optimal instance types to fulfill your Spot request, or you can specify the instance types by using InstanceTypes. For more information, see Spot placement score in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceRequirementsWithMetadata: The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes. If you specify InstanceRequirementsWithMetadata, you can't specify InstanceTypes.
    ///   - instanceTypes: The instance types. We recommend that you specify at least three instance types. If you specify one or two instance types, or specify variations of a single instance type (for example, an m3.xlarge with and without instance storage), the returned placement score will always be low.  If you specify InstanceTypes, you can't specify InstanceRequirementsWithMetadata.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - regionNames: The Regions used to narrow down the list of Regions to be scored. Enter the Region code, for example, us-east-1.
    ///   - singleAvailabilityZone: Specify true so that the response returns a list of scored Availability Zones. Otherwise, the response returns a list of scored Regions. A list of scored Availability Zones is useful if you want to launch all of your Spot capacity into a single Availability Zone.
    ///   - targetCapacity: The target capacity.
    ///   - targetCapacityUnitType: The unit for the target capacity.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSpotPlacementScores(
        dryRun: Bool? = nil,
        instanceRequirementsWithMetadata: InstanceRequirementsWithMetadataRequest? = nil,
        instanceTypes: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        regionNames: [String]? = nil,
        singleAvailabilityZone: Bool? = nil,
        targetCapacity: Int? = nil,
        targetCapacityUnitType: TargetCapacityUnitType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSpotPlacementScoresResult {
        let input = GetSpotPlacementScoresRequest(
            dryRun: dryRun, 
            instanceRequirementsWithMetadata: instanceRequirementsWithMetadata, 
            instanceTypes: instanceTypes, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            regionNames: regionNames, 
            singleAvailabilityZone: singleAvailabilityZone, 
            targetCapacity: targetCapacity, 
            targetCapacityUnitType: targetCapacityUnitType
        )
        return try await self.getSpotPlacementScores(input, logger: logger)
    }

    /// Gets information about the subnet CIDR reservations.
    @Sendable
    @inlinable
    public func getSubnetCidrReservations(_ input: GetSubnetCidrReservationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetSubnetCidrReservationsResult {
        try await self.client.execute(
            operation: "GetSubnetCidrReservations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the subnet CIDR reservations.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    reservationType - The type of reservation (prefix | explicit).    subnet-id - The ID of the subnet.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - subnetId: The ID of the subnet.
    ///   - logger: Logger use during operation
    @inlinable
    public func getSubnetCidrReservations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        subnetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetSubnetCidrReservationsResult {
        let input = GetSubnetCidrReservationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            subnetId: subnetId
        )
        return try await self.getSubnetCidrReservations(input, logger: logger)
    }

    /// Lists the route tables to which the specified resource attachment propagates routes.
    @Sendable
    @inlinable
    public func getTransitGatewayAttachmentPropagations(_ input: GetTransitGatewayAttachmentPropagationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayAttachmentPropagationsResult {
        try await self.client.execute(
            operation: "GetTransitGatewayAttachmentPropagations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists the route tables to which the specified resource attachment propagates routes.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    transit-gateway-route-table-id - The ID of the transit gateway route table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTransitGatewayAttachmentPropagations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTransitGatewayAttachmentPropagationsResult {
        let input = GetTransitGatewayAttachmentPropagationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.getTransitGatewayAttachmentPropagations(input, logger: logger)
    }

    /// Gets information about the associations for the transit gateway multicast domain.
    @Sendable
    @inlinable
    public func getTransitGatewayMulticastDomainAssociations(_ input: GetTransitGatewayMulticastDomainAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayMulticastDomainAssociationsResult {
        try await self.client.execute(
            operation: "GetTransitGatewayMulticastDomainAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the associations for the transit gateway multicast domain.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The type of resource. The valid value is: vpc.    state - The state of the subnet association. Valid values are associated | associating | disassociated | disassociating.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTransitGatewayMulticastDomainAssociations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTransitGatewayMulticastDomainAssociationsResult {
        let input = GetTransitGatewayMulticastDomainAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.getTransitGatewayMulticastDomainAssociations(input, logger: logger)
    }

    /// Gets a list of the transit gateway policy table associations.
    @Sendable
    @inlinable
    public func getTransitGatewayPolicyTableAssociations(_ input: GetTransitGatewayPolicyTableAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayPolicyTableAssociationsResult {
        try await self.client.execute(
            operation: "GetTransitGatewayPolicyTableAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets a list of the transit gateway policy table associations.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters associated with the transit gateway policy table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayPolicyTableId: The ID of the transit gateway policy table.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTransitGatewayPolicyTableAssociations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayPolicyTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTransitGatewayPolicyTableAssociationsResult {
        let input = GetTransitGatewayPolicyTableAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayPolicyTableId: transitGatewayPolicyTableId
        )
        return try await self.getTransitGatewayPolicyTableAssociations(input, logger: logger)
    }

    /// Returns a list of transit gateway policy table entries.
    @Sendable
    @inlinable
    public func getTransitGatewayPolicyTableEntries(_ input: GetTransitGatewayPolicyTableEntriesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayPolicyTableEntriesResult {
        try await self.client.execute(
            operation: "GetTransitGatewayPolicyTableEntries", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Returns a list of transit gateway policy table entries.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters associated with the transit gateway policy table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayPolicyTableId: The ID of the transit gateway policy table.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTransitGatewayPolicyTableEntries(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayPolicyTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTransitGatewayPolicyTableEntriesResult {
        let input = GetTransitGatewayPolicyTableEntriesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayPolicyTableId: transitGatewayPolicyTableId
        )
        return try await self.getTransitGatewayPolicyTableEntries(input, logger: logger)
    }

    /// Gets information about the prefix list references in a specified transit gateway route table.
    @Sendable
    @inlinable
    public func getTransitGatewayPrefixListReferences(_ input: GetTransitGatewayPrefixListReferencesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayPrefixListReferencesResult {
        try await self.client.execute(
            operation: "GetTransitGatewayPrefixListReferences", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the prefix list references in a specified transit gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    attachment.resource-id - The ID of the resource for the attachment.    attachment.resource-type - The type of resource for the attachment. Valid values are vpc | vpn | direct-connect-gateway | peering.    attachment.transit-gateway-attachment-id - The ID of the attachment.    is-blackhole - Whether traffic matching the route is blocked (true | false).    prefix-list-id - The ID of the prefix list.    prefix-list-owner-id - The ID of the owner of the prefix list.    state - The state of the prefix list reference (pending | available | modifying | deleting).
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTransitGatewayPrefixListReferences(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTransitGatewayPrefixListReferencesResult {
        let input = GetTransitGatewayPrefixListReferencesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.getTransitGatewayPrefixListReferences(input, logger: logger)
    }

    /// Gets information about the associations for the specified transit gateway route table.
    @Sendable
    @inlinable
    public func getTransitGatewayRouteTableAssociations(_ input: GetTransitGatewayRouteTableAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayRouteTableAssociationsResult {
        try await self.client.execute(
            operation: "GetTransitGatewayRouteTableAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the associations for the specified transit gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    transit-gateway-attachment-id - The ID of the attachment.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTransitGatewayRouteTableAssociations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTransitGatewayRouteTableAssociationsResult {
        let input = GetTransitGatewayRouteTableAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.getTransitGatewayRouteTableAssociations(input, logger: logger)
    }

    /// Gets information about the route table propagations for the specified transit gateway route table.
    @Sendable
    @inlinable
    public func getTransitGatewayRouteTablePropagations(_ input: GetTransitGatewayRouteTablePropagationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetTransitGatewayRouteTablePropagationsResult {
        try await self.client.execute(
            operation: "GetTransitGatewayRouteTablePropagations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets information about the route table propagations for the specified transit gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    transit-gateway-attachment-id - The ID of the attachment.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func getTransitGatewayRouteTablePropagations(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetTransitGatewayRouteTablePropagationsResult {
        let input = GetTransitGatewayRouteTablePropagationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.getTransitGatewayRouteTablePropagations(input, logger: logger)
    }

    /// Get the Verified Access policy associated with the endpoint.
    @Sendable
    @inlinable
    public func getVerifiedAccessEndpointPolicy(_ input: GetVerifiedAccessEndpointPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVerifiedAccessEndpointPolicyResult {
        try await self.client.execute(
            operation: "GetVerifiedAccessEndpointPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get the Verified Access policy associated with the endpoint.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessEndpointId: The ID of the Verified Access endpoint.
    ///   - logger: Logger use during operation
    @inlinable
    public func getVerifiedAccessEndpointPolicy(
        dryRun: Bool? = nil,
        verifiedAccessEndpointId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVerifiedAccessEndpointPolicyResult {
        let input = GetVerifiedAccessEndpointPolicyRequest(
            dryRun: dryRun, 
            verifiedAccessEndpointId: verifiedAccessEndpointId
        )
        return try await self.getVerifiedAccessEndpointPolicy(input, logger: logger)
    }

    /// Gets the targets for the specified network CIDR endpoint for Verified Access.
    @Sendable
    @inlinable
    public func getVerifiedAccessEndpointTargets(_ input: GetVerifiedAccessEndpointTargetsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVerifiedAccessEndpointTargetsResult {
        try await self.client.execute(
            operation: "GetVerifiedAccessEndpointTargets", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Gets the targets for the specified network CIDR endpoint for Verified Access.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - verifiedAccessEndpointId: The ID of the network CIDR endpoint.
    ///   - logger: Logger use during operation
    @inlinable
    public func getVerifiedAccessEndpointTargets(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        verifiedAccessEndpointId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVerifiedAccessEndpointTargetsResult {
        let input = GetVerifiedAccessEndpointTargetsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            verifiedAccessEndpointId: verifiedAccessEndpointId
        )
        return try await self.getVerifiedAccessEndpointTargets(input, logger: logger)
    }

    /// Shows the contents of the Verified Access policy associated with the group.
    @Sendable
    @inlinable
    public func getVerifiedAccessGroupPolicy(_ input: GetVerifiedAccessGroupPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVerifiedAccessGroupPolicyResult {
        try await self.client.execute(
            operation: "GetVerifiedAccessGroupPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Shows the contents of the Verified Access policy associated with the group.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessGroupId: The ID of the Verified Access group.
    ///   - logger: Logger use during operation
    @inlinable
    public func getVerifiedAccessGroupPolicy(
        dryRun: Bool? = nil,
        verifiedAccessGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVerifiedAccessGroupPolicyResult {
        let input = GetVerifiedAccessGroupPolicyRequest(
            dryRun: dryRun, 
            verifiedAccessGroupId: verifiedAccessGroupId
        )
        return try await self.getVerifiedAccessGroupPolicy(input, logger: logger)
    }

    /// Download an Amazon Web Services-provided sample configuration file to be used with the customer gateway device specified for your Site-to-Site VPN connection.
    @Sendable
    @inlinable
    public func getVpnConnectionDeviceSampleConfiguration(_ input: GetVpnConnectionDeviceSampleConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVpnConnectionDeviceSampleConfigurationResult {
        try await self.client.execute(
            operation: "GetVpnConnectionDeviceSampleConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Download an Amazon Web Services-provided sample configuration file to be used with the customer gateway device specified for your Site-to-Site VPN connection.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - internetKeyExchangeVersion: The IKE version to be used in the sample configuration file for your customer gateway device. You can specify one of the following versions: ikev1 or ikev2.
    ///   - vpnConnectionDeviceTypeId: Device identifier provided by the GetVpnConnectionDeviceTypes API.
    ///   - vpnConnectionId: The VpnConnectionId specifies the Site-to-Site VPN connection used for the sample configuration.
    ///   - logger: Logger use during operation
    @inlinable
    public func getVpnConnectionDeviceSampleConfiguration(
        dryRun: Bool? = nil,
        internetKeyExchangeVersion: String? = nil,
        vpnConnectionDeviceTypeId: String? = nil,
        vpnConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVpnConnectionDeviceSampleConfigurationResult {
        let input = GetVpnConnectionDeviceSampleConfigurationRequest(
            dryRun: dryRun, 
            internetKeyExchangeVersion: internetKeyExchangeVersion, 
            vpnConnectionDeviceTypeId: vpnConnectionDeviceTypeId, 
            vpnConnectionId: vpnConnectionId
        )
        return try await self.getVpnConnectionDeviceSampleConfiguration(input, logger: logger)
    }

    /// Obtain a list of customer gateway devices for which sample configuration files can be provided. The request has no additional parameters. You can also see the list of device types with sample configuration files available under Your customer gateway device in the Amazon Web Services Site-to-Site VPN User Guide.
    @Sendable
    @inlinable
    public func getVpnConnectionDeviceTypes(_ input: GetVpnConnectionDeviceTypesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVpnConnectionDeviceTypesResult {
        try await self.client.execute(
            operation: "GetVpnConnectionDeviceTypes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Obtain a list of customer gateway devices for which sample configuration files can be provided. The request has no additional parameters. You can also see the list of device types with sample configuration files available under Your customer gateway device in the Amazon Web Services Site-to-Site VPN User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results returned by GetVpnConnectionDeviceTypes in paginated output. When this parameter is used, GetVpnConnectionDeviceTypes only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another GetVpnConnectionDeviceTypes request with the returned NextToken value. This value can be between 200 and 1000. If this parameter is not used, then GetVpnConnectionDeviceTypes returns all results.
    ///   - nextToken: The NextToken value returned from a previous paginated GetVpnConnectionDeviceTypes request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
    ///   - logger: Logger use during operation
    @inlinable
    public func getVpnConnectionDeviceTypes(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVpnConnectionDeviceTypesResult {
        let input = GetVpnConnectionDeviceTypesRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.getVpnConnectionDeviceTypes(input, logger: logger)
    }

    /// Get details of available tunnel endpoint maintenance.
    @Sendable
    @inlinable
    public func getVpnTunnelReplacementStatus(_ input: GetVpnTunnelReplacementStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> GetVpnTunnelReplacementStatusResult {
        try await self.client.execute(
            operation: "GetVpnTunnelReplacementStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Get details of available tunnel endpoint maintenance.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - vpnConnectionId: The ID of the Site-to-Site VPN connection.
    ///   - vpnTunnelOutsideIpAddress: The external IP address of the VPN tunnel.
    ///   - logger: Logger use during operation
    @inlinable
    public func getVpnTunnelReplacementStatus(
        dryRun: Bool? = nil,
        vpnConnectionId: String? = nil,
        vpnTunnelOutsideIpAddress: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> GetVpnTunnelReplacementStatusResult {
        let input = GetVpnTunnelReplacementStatusRequest(
            dryRun: dryRun, 
            vpnConnectionId: vpnConnectionId, 
            vpnTunnelOutsideIpAddress: vpnTunnelOutsideIpAddress
        )
        return try await self.getVpnTunnelReplacementStatus(input, logger: logger)
    }

    /// Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list. Uploading a client certificate revocation list resets existing client connections.
    @Sendable
    @inlinable
    public func importClientVpnClientCertificateRevocationList(_ input: ImportClientVpnClientCertificateRevocationListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportClientVpnClientCertificateRevocationListResult {
        try await self.client.execute(
            operation: "ImportClientVpnClientCertificateRevocationList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list. Uploading a client certificate revocation list resets existing client connections.
    ///
    /// Parameters:
    ///   - certificateRevocationList: The client certificate revocation list file. For more information, see Generate a Client Certificate Revocation List in the
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint to which the client certificate revocation list applies.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func importClientVpnClientCertificateRevocationList(
        certificateRevocationList: String? = nil,
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportClientVpnClientCertificateRevocationListResult {
        let input = ImportClientVpnClientCertificateRevocationListRequest(
            certificateRevocationList: certificateRevocationList, 
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun
        )
        return try await self.importClientVpnClientCertificateRevocationList(input, logger: logger)
    }

    ///  To import your virtual machines (VMs) with a console-based experience, you can use the Import virtual machine images to Amazon Web Services template in the Migration Hub Orchestrator console. For more information, see the  Migration Hub Orchestrator User Guide .  Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI).  Amazon Web Services VM Import/Export strongly recommends specifying a value for either the --license-type or --usage-operation parameter when you create a new VM Import task. This ensures your operating system is licensed appropriately and your billing is optimized.  For more information, see Importing a  VM as an image using VM Import/Export in the VM Import/Export User Guide.
    @Sendable
    @inlinable
    public func importImage(_ input: ImportImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportImageResult {
        try await self.client.execute(
            operation: "ImportImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  To import your virtual machines (VMs) with a console-based experience, you can use the Import virtual machine images to Amazon Web Services template in the Migration Hub Orchestrator console. For more information, see the  Migration Hub Orchestrator User Guide .  Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI).  Amazon Web Services VM Import/Export strongly recommends specifying a value for either the --license-type or --usage-operation parameter when you create a new VM Import task. This ensures your operating system is licensed appropriately and your billing is optimized.  For more information, see Importing a  VM as an image using VM Import/Export in the VM Import/Export User Guide.
    ///
    /// Parameters:
    ///   - architecture: The architecture of the virtual machine. Valid values: i386 | x86_64
    ///   - bootMode: The boot mode of the virtual machine.  The uefi-preferred boot mode isn't supported for importing images. For more information, see Boot modes in the VM Import/Export User Guide.
    ///   - clientData: The client-specific data.
    ///   - clientToken: The token to enable idempotency for VM import requests.
    ///   - description: A description string for the import image task.
    ///   - diskContainers: Information about the disk containers.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - encrypted: Specifies whether the destination AMI of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
    ///   - hypervisor: The target hypervisor platform. Valid values: xen
    ///   - kmsKeyId: An identifier for the symmetric KMS key to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The KMS key identifier may be provided in any of the following formats:    Key ID   Key alias   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the key namespace, and then the key ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the alias namespace, and then the key alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    Amazon Web Services parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified KMS key must exist in the Region that the AMI is being copied to. Amazon EBS does not support asymmetric KMS keys.
    ///   - licenseSpecifications: The ARNs of the license configurations.
    ///   - licenseType: The license type to be used for the Amazon Machine Image (AMI) after importing. Specify AWS to replace the source-system license with an Amazon Web Services license or BYOL to retain the source-system license. Leaving this parameter undefined is the same as choosing AWS when importing a Windows Server operating system, and the same as choosing BYOL when importing a Windows client operating system (such as Windows 10) or a Linux operating system. To use BYOL, you must have existing licenses with rights to use these licenses in a third party cloud, such as Amazon Web Services. For more information, see Prerequisites in the VM Import/Export User Guide.
    ///   - platform: The operating system of the virtual machine. If you import a VM that is compatible with Unified Extensible Firmware Interface (UEFI) using an EBS snapshot, you must specify a value for the platform. Valid values: Windows | Linux
    ///   - roleName: The name of the role to use when not using the default role, 'vmimport'.
    ///   - tagSpecifications: The tags to apply to the import image task during creation.
    ///   - usageOperation: The usage operation value. For more information, see Licensing options in the VM Import/Export User Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func importImage(
        architecture: String? = nil,
        bootMode: BootModeValues? = nil,
        clientData: ClientData? = nil,
        clientToken: String? = nil,
        description: String? = nil,
        diskContainers: [ImageDiskContainer]? = nil,
        dryRun: Bool? = nil,
        encrypted: Bool? = nil,
        hypervisor: String? = nil,
        kmsKeyId: String? = nil,
        licenseSpecifications: [ImportImageLicenseConfigurationRequest]? = nil,
        licenseType: String? = nil,
        platform: String? = nil,
        roleName: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        usageOperation: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportImageResult {
        let input = ImportImageRequest(
            architecture: architecture, 
            bootMode: bootMode, 
            clientData: clientData, 
            clientToken: clientToken, 
            description: description, 
            diskContainers: diskContainers, 
            dryRun: dryRun, 
            encrypted: encrypted, 
            hypervisor: hypervisor, 
            kmsKeyId: kmsKeyId, 
            licenseSpecifications: licenseSpecifications, 
            licenseType: licenseType, 
            platform: platform, 
            roleName: roleName, 
            tagSpecifications: tagSpecifications, 
            usageOperation: usageOperation
        )
        return try await self.importImage(input, logger: logger)
    }

    ///  We recommend that you use the  ImportImage  API instead. For more information, see Importing a VM as an image using VM Import/Export in the VM Import/Export User Guide.  Creates an import instance task using metadata from the specified disk image. This API action supports only single-volume VMs. To import multi-volume VMs, use ImportImage instead. For information about the import manifest referenced by this API action, see VM Import Manifest. This API action is not supported by the Command Line Interface (CLI).
    @Sendable
    @inlinable
    public func importInstance(_ input: ImportInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportInstanceResult {
        try await self.client.execute(
            operation: "ImportInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  We recommend that you use the  ImportImage  API instead. For more information, see Importing a VM as an image using VM Import/Export in the VM Import/Export User Guide.  Creates an import instance task using metadata from the specified disk image. This API action supports only single-volume VMs. To import multi-volume VMs, use ImportImage instead. For information about the import manifest referenced by this API action, see VM Import Manifest. This API action is not supported by the Command Line Interface (CLI).
    ///
    /// Parameters:
    ///   - description: A description for the instance being imported.
    ///   - diskImages: The disk image.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - launchSpecification: The launch specification.
    ///   - platform: The instance operating system.
    ///   - logger: Logger use during operation
    @inlinable
    public func importInstance(
        description: String? = nil,
        diskImages: [DiskImage]? = nil,
        dryRun: Bool? = nil,
        launchSpecification: ImportInstanceLaunchSpecification? = nil,
        platform: PlatformValues? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportInstanceResult {
        let input = ImportInstanceRequest(
            description: description, 
            diskImages: diskImages, 
            dryRun: dryRun, 
            launchSpecification: launchSpecification, 
            platform: platform
        )
        return try await self.importInstance(input, logger: logger)
    }

    /// Imports the public key from an RSA or ED25519 key pair that you created using a third-party tool.  You give Amazon Web Services only the public key. The private key is never transferred between you and Amazon Web Services. For more information about the requirements for importing a key pair, see Create a key pair and import the public key to Amazon EC2 in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func importKeyPair(_ input: ImportKeyPairRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportKeyPairResult {
        try await self.client.execute(
            operation: "ImportKeyPair", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Imports the public key from an RSA or ED25519 key pair that you created using a third-party tool.  You give Amazon Web Services only the public key. The private key is never transferred between you and Amazon Web Services. For more information about the requirements for importing a key pair, see Create a key pair and import the public key to Amazon EC2 in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - keyName: A unique name for the key pair.
    ///   - publicKeyMaterial: The public key.
    ///   - tagSpecifications: The tags to apply to the imported key pair.
    ///   - logger: Logger use during operation
    @inlinable
    public func importKeyPair(
        dryRun: Bool? = nil,
        keyName: String? = nil,
        publicKeyMaterial: AWSBase64Data? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportKeyPairResult {
        let input = ImportKeyPairRequest(
            dryRun: dryRun, 
            keyName: keyName, 
            publicKeyMaterial: publicKeyMaterial, 
            tagSpecifications: tagSpecifications
        )
        return try await self.importKeyPair(input, logger: logger)
    }

    /// Imports a disk into an EBS snapshot. For more information, see Importing a disk as a snapshot using VM Import/Export in the  VM Import/Export User Guide.
    @Sendable
    @inlinable
    public func importSnapshot(_ input: ImportSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportSnapshotResult {
        try await self.client.execute(
            operation: "ImportSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Imports a disk into an EBS snapshot. For more information, see Importing a disk as a snapshot using VM Import/Export in the  VM Import/Export User Guide.
    ///
    /// Parameters:
    ///   - clientData: The client-specific data.
    ///   - clientToken: Token to enable idempotency for VM import requests.
    ///   - description: The description string for the import snapshot task.
    ///   - diskContainer: Information about the disk container.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - encrypted: Specifies whether the destination snapshot of the imported image should be encrypted. The default KMS key for EBS is used unless you specify a non-default KMS key using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
    ///   - kmsKeyId: An identifier for the symmetric KMS key to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default KMS key; if this parameter is not specified, the default KMS key for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The KMS key identifier may be provided in any of the following formats:    Key ID   Key alias   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the key namespace, and then the key ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the key, the Amazon Web Services account ID of the key owner, the alias namespace, and then the key alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    Amazon Web Services parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified KMS key must exist in the Region that the snapshot is being copied to. Amazon EBS does not support asymmetric KMS keys.
    ///   - roleName: The name of the role to use when not using the default role, 'vmimport'.
    ///   - tagSpecifications: The tags to apply to the import snapshot task during creation.
    ///   - logger: Logger use during operation
    @inlinable
    public func importSnapshot(
        clientData: ClientData? = nil,
        clientToken: String? = nil,
        description: String? = nil,
        diskContainer: SnapshotDiskContainer? = nil,
        dryRun: Bool? = nil,
        encrypted: Bool? = nil,
        kmsKeyId: String? = nil,
        roleName: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportSnapshotResult {
        let input = ImportSnapshotRequest(
            clientData: clientData, 
            clientToken: clientToken, 
            description: description, 
            diskContainer: diskContainer, 
            dryRun: dryRun, 
            encrypted: encrypted, 
            kmsKeyId: kmsKeyId, 
            roleName: roleName, 
            tagSpecifications: tagSpecifications
        )
        return try await self.importSnapshot(input, logger: logger)
    }

    ///  This API action supports only single-volume VMs. To import multi-volume VMs, use  ImportImage instead. To import a disk to a snapshot, use ImportSnapshot instead.  Creates an import volume task using metadata from the specified disk image. For information about the import manifest referenced by this API action, see VM Import Manifest. This API action is not supported by the Command Line Interface (CLI).
    @Sendable
    @inlinable
    public func importVolume(_ input: ImportVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ImportVolumeResult {
        try await self.client.execute(
            operation: "ImportVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This API action supports only single-volume VMs. To import multi-volume VMs, use  ImportImage instead. To import a disk to a snapshot, use ImportSnapshot instead.  Creates an import volume task using metadata from the specified disk image. For information about the import manifest referenced by this API action, see VM Import Manifest. This API action is not supported by the Command Line Interface (CLI).
    ///
    /// Parameters:
    ///   - availabilityZone: The Availability Zone for the resulting EBS volume.
    ///   - description: A description of the volume.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - image: The disk image.
    ///   - volume: The volume size.
    ///   - logger: Logger use during operation
    @inlinable
    public func importVolume(
        availabilityZone: String? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        image: DiskImageDetail? = nil,
        volume: VolumeDetail? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ImportVolumeResult {
        let input = ImportVolumeRequest(
            availabilityZone: availabilityZone, 
            description: description, 
            dryRun: dryRun, 
            image: image, 
            volume: volume
        )
        return try await self.importVolume(input, logger: logger)
    }

    /// Lists one or more AMIs that are currently in the Recycle Bin. For more information, see Recycle Bin in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func listImagesInRecycleBin(_ input: ListImagesInRecycleBinRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListImagesInRecycleBinResult {
        try await self.client.execute(
            operation: "ListImagesInRecycleBin", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists one or more AMIs that are currently in the Recycle Bin. For more information, see Recycle Bin in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageIds: The IDs of the AMIs to list. Omit this parameter to list all of the AMIs that are in the Recycle Bin. You can specify up to 20 IDs in a single request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger use during operation
    @inlinable
    public func listImagesInRecycleBin(
        dryRun: Bool? = nil,
        imageIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListImagesInRecycleBinResult {
        let input = ListImagesInRecycleBinRequest(
            dryRun: dryRun, 
            imageIds: imageIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.listImagesInRecycleBin(input, logger: logger)
    }

    /// Lists one or more snapshots that are currently in the Recycle Bin.
    @Sendable
    @inlinable
    public func listSnapshotsInRecycleBin(_ input: ListSnapshotsInRecycleBinRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ListSnapshotsInRecycleBinResult {
        try await self.client.execute(
            operation: "ListSnapshotsInRecycleBin", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Lists one or more snapshots that are currently in the Recycle Bin.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - snapshotIds: The IDs of the snapshots to list. Omit this parameter to list all of the  snapshots that are in the Recycle Bin.
    ///   - logger: Logger use during operation
    @inlinable
    public func listSnapshotsInRecycleBin(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        snapshotIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ListSnapshotsInRecycleBinResult {
        let input = ListSnapshotsInRecycleBinRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            snapshotIds: snapshotIds
        )
        return try await self.listSnapshotsInRecycleBin(input, logger: logger)
    }

    /// Locks an Amazon EBS snapshot in either governance or compliance  mode to protect it against accidental or malicious deletions for a specific duration. A locked snapshot  can't be deleted. You can also use this action to modify the lock settings for a snapshot that is already locked. The  allowed modifications depend on the lock mode and lock state:   If the snapshot is locked in governance mode, you can modify the lock mode and the lock duration  or lock expiration date.   If the snapshot is locked in compliance mode and it is in the cooling-off period, you can modify  the lock mode and the lock duration or lock expiration date.   If the snapshot is locked in compliance mode and the cooling-off period has lapsed, you can  only increase the lock duration or extend the lock expiration date.
    @Sendable
    @inlinable
    public func lockSnapshot(_ input: LockSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> LockSnapshotResult {
        try await self.client.execute(
            operation: "LockSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Locks an Amazon EBS snapshot in either governance or compliance  mode to protect it against accidental or malicious deletions for a specific duration. A locked snapshot  can't be deleted. You can also use this action to modify the lock settings for a snapshot that is already locked. The  allowed modifications depend on the lock mode and lock state:   If the snapshot is locked in governance mode, you can modify the lock mode and the lock duration  or lock expiration date.   If the snapshot is locked in compliance mode and it is in the cooling-off period, you can modify  the lock mode and the lock duration or lock expiration date.   If the snapshot is locked in compliance mode and the cooling-off period has lapsed, you can  only increase the lock duration or extend the lock expiration date.
    ///
    /// Parameters:
    ///   - coolOffPeriod: The cooling-off period during which you can unlock the snapshot or modify the lock settings after  locking the snapshot in compliance mode, in hours. After the cooling-off period expires, you can't  unlock or delete the snapshot, decrease the lock duration, or change the lock mode. You can increase  the lock duration after the cooling-off period expires. The cooling-off period is optional when locking a snapshot in compliance mode. If you are locking  the snapshot in governance mode, omit this parameter. To lock the snapshot in compliance mode immediately without a cooling-off period, omit this  parameter. If you are extending the lock duration for a snapshot that is locked in compliance mode after  the cooling-off period has expired, omit this parameter. If you specify a cooling-period in a such  a request, the request fails. Allowed values: Min 1, max 72.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - expirationDate: The date and time at which the snapshot lock is to automatically expire, in the UTC time zone  (YYYY-MM-DDThh:mm:ss.sssZ). You must specify either this parameter or LockDuration, but  not both.
    ///   - lockDuration: The period of time for which to lock the snapshot, in days. The snapshot lock will automatically  expire after this period lapses. You must specify either this parameter or ExpirationDate, but  not both. Allowed values: Min: 1, max 36500
    ///   - lockMode: The mode in which to lock the snapshot. Specify one of the following:    governance - Locks the snapshot in governance mode. Snapshots locked in governance  mode can't be deleted until one of the following conditions are met:   The lock duration expires.   The snapshot is unlocked by a user with the appropriate permissions.   Users with the appropriate IAM permissions can unlock the snapshot, increase or decrease the lock  duration, and change the lock mode to compliance at any time. If you lock a snapshot in governance mode, omit  CoolOffPeriod.    compliance - Locks the snapshot in compliance mode. Snapshots locked in compliance  mode can't be unlocked by any user. They can be deleted only after the lock duration expires. Users  can't decrease the lock duration or change the lock mode to governance. However, users  with appropriate IAM permissions can increase the lock duration at any time. If you lock a snapshot in compliance mode, you can optionally specify  CoolOffPeriod.
    ///   - snapshotId: The ID of the snapshot to lock.
    ///   - logger: Logger use during operation
    @inlinable
    public func lockSnapshot(
        coolOffPeriod: Int? = nil,
        dryRun: Bool? = nil,
        expirationDate: Date? = nil,
        lockDuration: Int? = nil,
        lockMode: LockMode? = nil,
        snapshotId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> LockSnapshotResult {
        let input = LockSnapshotRequest(
            coolOffPeriod: coolOffPeriod, 
            dryRun: dryRun, 
            expirationDate: expirationDate, 
            lockDuration: lockDuration, 
            lockMode: lockMode, 
            snapshotId: snapshotId
        )
        return try await self.lockSnapshot(input, logger: logger)
    }

    /// Modifies an attribute of the specified Elastic IP address. For requirements, see Using reverse DNS for email applications.
    @Sendable
    @inlinable
    public func modifyAddressAttribute(_ input: ModifyAddressAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyAddressAttributeResult {
        try await self.client.execute(
            operation: "ModifyAddressAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies an attribute of the specified Elastic IP address. For requirements, see Using reverse DNS for email applications.
    ///
    /// Parameters:
    ///   - allocationId: [EC2-VPC] The allocation ID.
    ///   - domainName: The domain name to modify for the IP address.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyAddressAttribute(
        allocationId: String? = nil,
        domainName: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyAddressAttributeResult {
        let input = ModifyAddressAttributeRequest(
            allocationId: allocationId, 
            domainName: domainName, 
            dryRun: dryRun
        )
        return try await self.modifyAddressAttribute(input, logger: logger)
    }

    /// Changes the opt-in status of the specified zone group for your account.
    @Sendable
    @inlinable
    public func modifyAvailabilityZoneGroup(_ input: ModifyAvailabilityZoneGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyAvailabilityZoneGroupResult {
        try await self.client.execute(
            operation: "ModifyAvailabilityZoneGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Changes the opt-in status of the specified zone group for your account.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupName: The name of the Availability Zone group, Local Zone group, or Wavelength Zone group.
    ///   - optInStatus: Indicates whether to opt in to the zone group. The only valid value is opted-in.  You must contact Amazon Web Services Support to opt out of a Local Zone or Wavelength Zone group.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyAvailabilityZoneGroup(
        dryRun: Bool? = nil,
        groupName: String? = nil,
        optInStatus: ModifyAvailabilityZoneOptInStatus? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyAvailabilityZoneGroupResult {
        let input = ModifyAvailabilityZoneGroupRequest(
            dryRun: dryRun, 
            groupName: groupName, 
            optInStatus: optInStatus
        )
        return try await self.modifyAvailabilityZoneGroup(input, logger: logger)
    }

    /// Modifies a Capacity Reservation's capacity, instance eligibility, and the conditions under
    /// 			which it is to be released. You can't modify a Capacity Reservation's instance type, EBS
    /// 			optimization, platform, instance store settings, Availability Zone, or tenancy. If you need
    /// 			to modify any of these attributes, we recommend that you cancel the Capacity Reservation,
    /// 			and then create a new one with the required attributes. For more information, see
    ///
    /// 				Modify an active Capacity Reservation. The allowed modifications depend on the state of the Capacity Reservation:    assessing or scheduled state - You can modify the tags only.    pending state - You can't modify the Capacity Reservation in any way.    active state but still within the commitment duration - You can't decrease the instance
    /// 					count or set an end date that is within the commitment duration. All other modifications are allowed.    active state with no commitment duration or elapsed commitment duration - All modifications
    /// 					are allowed.    expired, cancelled, unsupported, or failed state -
    /// 					You can't modify the Capacity Reservation in any way.
    @Sendable
    @inlinable
    public func modifyCapacityReservation(_ input: ModifyCapacityReservationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyCapacityReservationResult {
        try await self.client.execute(
            operation: "ModifyCapacityReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a Capacity Reservation's capacity, instance eligibility, and the conditions under
    /// 			which it is to be released. You can't modify a Capacity Reservation's instance type, EBS
    /// 			optimization, platform, instance store settings, Availability Zone, or tenancy. If you need
    /// 			to modify any of these attributes, we recommend that you cancel the Capacity Reservation,
    /// 			and then create a new one with the required attributes. For more information, see
    ///
    /// 				Modify an active Capacity Reservation. The allowed modifications depend on the state of the Capacity Reservation:    assessing or scheduled state - You can modify the tags only.    pending state - You can't modify the Capacity Reservation in any way.    active state but still within the commitment duration - You can't decrease the instance
    /// 					count or set an end date that is within the commitment duration. All other modifications are allowed.    active state with no commitment duration or elapsed commitment duration - All modifications
    /// 					are allowed.    expired, cancelled, unsupported, or failed state -
    /// 					You can't modify the Capacity Reservation in any way.
    ///
    /// Parameters:
    ///   - accept: Reserved. Capacity Reservations you have created are accepted by default.
    ///   - additionalInfo: Reserved for future use.
    ///   - capacityReservationId: The ID of the Capacity Reservation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - endDate: The date and time at which the Capacity Reservation expires. When a Capacity
    ///   - endDateType: Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can
    ///   - instanceCount: The number of instances for which to reserve capacity. The number of instances can't
    ///   - instanceMatchCriteria:  The matching criteria (instance eligibility) that you want to use in the modified
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyCapacityReservation(
        accept: Bool? = nil,
        additionalInfo: String? = nil,
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        endDate: Date? = nil,
        endDateType: EndDateType? = nil,
        instanceCount: Int? = nil,
        instanceMatchCriteria: InstanceMatchCriteria? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyCapacityReservationResult {
        let input = ModifyCapacityReservationRequest(
            accept: accept, 
            additionalInfo: additionalInfo, 
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun, 
            endDate: endDate, 
            endDateType: endDateType, 
            instanceCount: instanceCount, 
            instanceMatchCriteria: instanceMatchCriteria
        )
        return try await self.modifyCapacityReservation(input, logger: logger)
    }

    /// Modifies a Capacity Reservation Fleet. When you modify the total target capacity of a Capacity Reservation Fleet, the Fleet
    /// 			automatically creates new Capacity Reservations, or modifies or cancels existing
    /// 			Capacity Reservations in the Fleet to meet the new total target capacity. When you
    /// 			modify the end date for the Fleet, the end dates for all of the individual Capacity
    /// 			Reservations in the Fleet are updated accordingly.
    @Sendable
    @inlinable
    public func modifyCapacityReservationFleet(_ input: ModifyCapacityReservationFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyCapacityReservationFleetResult {
        try await self.client.execute(
            operation: "ModifyCapacityReservationFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a Capacity Reservation Fleet. When you modify the total target capacity of a Capacity Reservation Fleet, the Fleet
    /// 			automatically creates new Capacity Reservations, or modifies or cancels existing
    /// 			Capacity Reservations in the Fleet to meet the new total target capacity. When you
    /// 			modify the end date for the Fleet, the end dates for all of the individual Capacity
    /// 			Reservations in the Fleet are updated accordingly.
    ///
    /// Parameters:
    ///   - capacityReservationFleetId: The ID of the Capacity Reservation Fleet to modify.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - endDate: The date and time at which the Capacity Reservation Fleet expires. When the Capacity
    ///   - removeEndDate: Indicates whether to remove the end date from the Capacity Reservation Fleet. If you
    ///   - totalTargetCapacity: The total number of capacity units to be reserved by the Capacity Reservation Fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyCapacityReservationFleet(
        capacityReservationFleetId: String? = nil,
        dryRun: Bool? = nil,
        endDate: Date? = nil,
        removeEndDate: Bool? = nil,
        totalTargetCapacity: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyCapacityReservationFleetResult {
        let input = ModifyCapacityReservationFleetRequest(
            capacityReservationFleetId: capacityReservationFleetId, 
            dryRun: dryRun, 
            endDate: endDate, 
            removeEndDate: removeEndDate, 
            totalTargetCapacity: totalTargetCapacity
        )
        return try await self.modifyCapacityReservationFleet(input, logger: logger)
    }

    /// Modifies the specified Client VPN endpoint. Modifying the DNS server resets existing client connections.
    @Sendable
    @inlinable
    public func modifyClientVpnEndpoint(_ input: ModifyClientVpnEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyClientVpnEndpointResult {
        try await self.client.execute(
            operation: "ModifyClientVpnEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified Client VPN endpoint. Modifying the DNS server resets existing client connections.
    ///
    /// Parameters:
    ///   - clientConnectOptions: The options for managing connection authorization for new client connections.
    ///   - clientLoginBannerOptions: Options for enabling a customizable text banner that will be displayed on
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint to modify.
    ///   - connectionLogOptions: Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a
    ///   - description: A brief description of the Client VPN endpoint.
    ///   - dnsServers: Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - securityGroupIds: The IDs of one or more security groups to apply to the target network.
    ///   - selfServicePortal: Specify whether to enable the self-service portal for the Client VPN endpoint.
    ///   - serverCertificateArn: The ARN of the server certificate to be used. The server certificate must be provisioned in
    ///   - sessionTimeoutHours: The maximum VPN session duration time in hours. Valid values: 8 | 10 | 12 | 24  Default value: 24
    ///   - splitTunnel: Indicates whether the VPN is split-tunnel. For information about split-tunnel VPN endpoints, see Split-tunnel Client VPN endpoint in the  	Client VPN Administrator Guide.
    ///   - vpcId: The ID of the VPC to associate with the Client VPN endpoint.
    ///   - vpnPort: The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194  Default Value: 443
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyClientVpnEndpoint(
        clientConnectOptions: ClientConnectOptions? = nil,
        clientLoginBannerOptions: ClientLoginBannerOptions? = nil,
        clientVpnEndpointId: String? = nil,
        connectionLogOptions: ConnectionLogOptions? = nil,
        description: String? = nil,
        dnsServers: DnsServersOptionsModifyStructure? = nil,
        dryRun: Bool? = nil,
        securityGroupIds: [String]? = nil,
        selfServicePortal: SelfServicePortal? = nil,
        serverCertificateArn: String? = nil,
        sessionTimeoutHours: Int? = nil,
        splitTunnel: Bool? = nil,
        vpcId: String? = nil,
        vpnPort: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyClientVpnEndpointResult {
        let input = ModifyClientVpnEndpointRequest(
            clientConnectOptions: clientConnectOptions, 
            clientLoginBannerOptions: clientLoginBannerOptions, 
            clientVpnEndpointId: clientVpnEndpointId, 
            connectionLogOptions: connectionLogOptions, 
            description: description, 
            dnsServers: dnsServers, 
            dryRun: dryRun, 
            securityGroupIds: securityGroupIds, 
            selfServicePortal: selfServicePortal, 
            serverCertificateArn: serverCertificateArn, 
            sessionTimeoutHours: sessionTimeoutHours, 
            splitTunnel: splitTunnel, 
            vpcId: vpcId, 
            vpnPort: vpnPort
        )
        return try await self.modifyClientVpnEndpoint(input, logger: logger)
    }

    /// Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per Amazon Web Services Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.  ModifyDefaultCreditSpecification is an asynchronous operation, which works at an Amazon Web Services Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call GetDefaultCreditSpecification and check DefaultCreditSpecification for updates. For more information, see Burstable performance instances in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func modifyDefaultCreditSpecification(_ input: ModifyDefaultCreditSpecificationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyDefaultCreditSpecificationResult {
        try await self.client.execute(
            operation: "ModifyDefaultCreditSpecification", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per Amazon Web Services Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.  ModifyDefaultCreditSpecification is an asynchronous operation, which works at an Amazon Web Services Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call GetDefaultCreditSpecification and check DefaultCreditSpecification for updates. For more information, see Burstable performance instances in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - cpuCredits: The credit option for CPU usage of the instance family. Valid Values: standard | unlimited
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceFamily: The instance family.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyDefaultCreditSpecification(
        cpuCredits: String? = nil,
        dryRun: Bool? = nil,
        instanceFamily: UnlimitedSupportedInstanceFamily? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyDefaultCreditSpecificationResult {
        let input = ModifyDefaultCreditSpecificationRequest(
            cpuCredits: cpuCredits, 
            dryRun: dryRun, 
            instanceFamily: instanceFamily
        )
        return try await self.modifyDefaultCreditSpecification(input, logger: logger)
    }

    /// Changes the default KMS key for EBS encryption by default for your account in this Region. Amazon Web Services creates a unique Amazon Web Services managed KMS key in each Region for use with encryption by default. If you change the default KMS key to a symmetric customer managed KMS key, it is used instead of the Amazon Web Services managed KMS key. To reset the default KMS key to the Amazon Web Services managed KMS key for EBS, use ResetEbsDefaultKmsKeyId. Amazon EBS does not support asymmetric KMS keys. If you delete or disable the customer managed KMS key that you specified for use with encryption by default, your instances will fail to launch. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func modifyEbsDefaultKmsKeyId(_ input: ModifyEbsDefaultKmsKeyIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyEbsDefaultKmsKeyIdResult {
        try await self.client.execute(
            operation: "ModifyEbsDefaultKmsKeyId", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Changes the default KMS key for EBS encryption by default for your account in this Region. Amazon Web Services creates a unique Amazon Web Services managed KMS key in each Region for use with encryption by default. If you change the default KMS key to a symmetric customer managed KMS key, it is used instead of the Amazon Web Services managed KMS key. To reset the default KMS key to the Amazon Web Services managed KMS key for EBS, use ResetEbsDefaultKmsKeyId. Amazon EBS does not support asymmetric KMS keys. If you delete or disable the customer managed KMS key that you specified for use with encryption by default, your instances will fail to launch. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - kmsKeyId: The identifier of the KMS key to use for Amazon EBS encryption. If this parameter is not specified, your KMS key for Amazon EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the KMS key using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   Amazon Web Services authenticates the KMS key asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid,  the action can appear to complete, but eventually fails. Amazon EBS does not support asymmetric KMS keys.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyEbsDefaultKmsKeyId(
        dryRun: Bool? = nil,
        kmsKeyId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyEbsDefaultKmsKeyIdResult {
        let input = ModifyEbsDefaultKmsKeyIdRequest(
            dryRun: dryRun, 
            kmsKeyId: kmsKeyId
        )
        return try await self.modifyEbsDefaultKmsKeyId(input, logger: logger)
    }

    /// Modifies the specified EC2 Fleet. You can only modify an EC2 Fleet request of type maintain. While the EC2 Fleet is being modified, it is in the modifying state. To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation strategy is lowest-price, the EC2 Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is diversified, the EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is capacity-optimized, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is lowest-price, the EC2 Fleet terminates the instances with the highest price per unit. If the allocation strategy is capacity-optimized, the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is diversified, the EC2 Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually. If you are finished with your EC2 Fleet for now, but will use it again later, you can set the target capacity to 0.
    @Sendable
    @inlinable
    public func modifyFleet(_ input: ModifyFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyFleetResult {
        try await self.client.execute(
            operation: "ModifyFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified EC2 Fleet. You can only modify an EC2 Fleet request of type maintain. While the EC2 Fleet is being modified, it is in the modifying state. To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation strategy is lowest-price, the EC2 Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is diversified, the EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is capacity-optimized, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is lowest-price, the EC2 Fleet terminates the instances with the highest price per unit. If the allocation strategy is capacity-optimized, the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is diversified, the EC2 Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually. If you are finished with your EC2 Fleet for now, but will use it again later, you can set the target capacity to 0.
    ///
    /// Parameters:
    ///   - context: Reserved.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - excessCapacityTerminationPolicy: Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet. Supported only for fleets of type maintain.
    ///   - fleetId: The ID of the EC2 Fleet.
    ///   - launchTemplateConfigs: The launch template and overrides.
    ///   - targetCapacitySpecification: The size of the EC2 Fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyFleet(
        context: String? = nil,
        dryRun: Bool? = nil,
        excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil,
        fleetId: String? = nil,
        launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]? = nil,
        targetCapacitySpecification: TargetCapacitySpecificationRequest? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyFleetResult {
        let input = ModifyFleetRequest(
            context: context, 
            dryRun: dryRun, 
            excessCapacityTerminationPolicy: excessCapacityTerminationPolicy, 
            fleetId: fleetId, 
            launchTemplateConfigs: launchTemplateConfigs, 
            targetCapacitySpecification: targetCapacitySpecification
        )
        return try await self.modifyFleet(input, logger: logger)
    }

    /// Modifies the specified attribute of the specified Amazon FPGA Image (AFI).
    @Sendable
    @inlinable
    public func modifyFpgaImageAttribute(_ input: ModifyFpgaImageAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyFpgaImageAttributeResult {
        try await self.client.execute(
            operation: "ModifyFpgaImageAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified attribute of the specified Amazon FPGA Image (AFI).
    ///
    /// Parameters:
    ///   - attribute: The name of the attribute.
    ///   - description: A description for the AFI.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fpgaImageId: The ID of the AFI.
    ///   - loadPermission: The load permission for the AFI.
    ///   - name: A name for the AFI.
    ///   - operationType: The operation type.
    ///   - productCodes: The product codes. After you add a product code to an AFI, it can't be removed.
    ///   - userGroups: The user groups. This parameter is valid only when modifying the loadPermission attribute.
    ///   - userIds: The Amazon Web Services account IDs. This parameter is valid only when modifying the loadPermission attribute.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyFpgaImageAttribute(
        attribute: FpgaImageAttributeName? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        fpgaImageId: String? = nil,
        loadPermission: LoadPermissionModifications? = nil,
        name: String? = nil,
        operationType: OperationType? = nil,
        productCodes: [String]? = nil,
        userGroups: [String]? = nil,
        userIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyFpgaImageAttributeResult {
        let input = ModifyFpgaImageAttributeRequest(
            attribute: attribute, 
            description: description, 
            dryRun: dryRun, 
            fpgaImageId: fpgaImageId, 
            loadPermission: loadPermission, 
            name: name, 
            operationType: operationType, 
            productCodes: productCodes, 
            userGroups: userGroups, 
            userIds: userIds
        )
        return try await self.modifyFpgaImageAttribute(input, logger: logger)
    }

    /// Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of host but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled. You can also use this API action to modify a Dedicated Host to support either multiple instance types in an instance family, or to support a specific instance type only.
    @Sendable
    @inlinable
    public func modifyHosts(_ input: ModifyHostsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyHostsResult {
        try await self.client.execute(
            operation: "ModifyHosts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of host but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled. You can also use this API action to modify a Dedicated Host to support either multiple instance types in an instance family, or to support a specific instance type only.
    ///
    /// Parameters:
    ///   - autoPlacement: Specify whether to enable or disable auto-placement.
    ///   - hostIds: The IDs of the Dedicated Hosts to modify.
    ///   - hostMaintenance: Indicates whether to enable or disable host maintenance for the Dedicated Host. For more information, see Host maintenance in the Amazon EC2 User Guide.
    ///   - hostRecovery: Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, see Host recovery in the Amazon EC2 User Guide.
    ///   - instanceFamily: Specifies the instance family to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support multiple instance types within its current instance family. If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request.
    ///   - instanceType: Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support only a specific instance type. If you want to modify a Dedicated Host to support multiple instance types in its current instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyHosts(
        autoPlacement: AutoPlacement? = nil,
        hostIds: [String]? = nil,
        hostMaintenance: HostMaintenance? = nil,
        hostRecovery: HostRecovery? = nil,
        instanceFamily: String? = nil,
        instanceType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyHostsResult {
        let input = ModifyHostsRequest(
            autoPlacement: autoPlacement, 
            hostIds: hostIds, 
            hostMaintenance: hostMaintenance, 
            hostRecovery: hostRecovery, 
            instanceFamily: instanceFamily, 
            instanceType: instanceType
        )
        return try await self.modifyHosts(input, logger: logger)
    }

    /// Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created. This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. This setting applies to the IAM user who makes the request; it does not apply to the entire Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see Resource IDs  in the Amazon Elastic Compute Cloud User Guide. Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
    @Sendable
    @inlinable
    public func modifyIdFormat(_ input: ModifyIdFormatRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifyIdFormat", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created. This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. This setting applies to the IAM user who makes the request; it does not apply to the entire Amazon Web Services account. By default, an IAM user defaults to the same settings as the root user. If you're using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see Resource IDs  in the Amazon Elastic Compute Cloud User Guide. Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
    ///
    /// Parameters:
    ///   - resource: The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
    ///   - useLongIds: Indicate whether the resource should use longer IDs (17-character IDs).
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyIdFormat(
        resource: String? = nil,
        useLongIds: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifyIdFormatRequest(
            resource: resource, 
            useLongIds: useLongIds
        )
        return try await self.modifyIdFormat(input, logger: logger)
    }

    /// Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created.  This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide.  This setting applies to the principal specified in the request; it does not apply to the principal that makes the request.  Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
    @Sendable
    @inlinable
    public func modifyIdentityIdFormat(_ input: ModifyIdentityIdFormatRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifyIdentityIdFormat", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account; or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created.  This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway.  For more information, see Resource IDs in the Amazon Elastic Compute Cloud User Guide.  This setting applies to the principal specified in the request; it does not apply to the principal that makes the request.  Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant Describe command for the resource type.
    ///
    /// Parameters:
    ///   - principalArn: The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify all to modify the ID format for all IAM users, IAM roles, and the root user of the account.
    ///   - resource: The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
    ///   - useLongIds: Indicates whether the resource should use longer IDs (17-character IDs)
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyIdentityIdFormat(
        principalArn: String? = nil,
        resource: String? = nil,
        useLongIds: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifyIdentityIdFormatRequest(
            principalArn: principalArn, 
            resource: resource, 
            useLongIds: useLongIds
        )
        return try await self.modifyIdentityIdFormat(input, logger: logger)
    }

    /// Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. To specify the attribute, you can use the Attribute parameter, or one of the following parameters: Description, ImdsSupport, or LaunchPermission. Images with an Amazon Web Services Marketplace product code cannot be made public. To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.
    @Sendable
    @inlinable
    public func modifyImageAttribute(_ input: ModifyImageAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifyImageAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. To specify the attribute, you can use the Attribute parameter, or one of the following parameters: Description, ImdsSupport, or LaunchPermission. Images with an Amazon Web Services Marketplace product code cannot be made public. To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.
    ///
    /// Parameters:
    ///   - attribute: The name of the attribute to modify. Valid values: description | imdsSupport | launchPermission
    ///   - description: A new description for the AMI.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - imdsSupport: Set to v2.0 to indicate that IMDSv2 is specified in the AMI. Instances launched from this AMI will have HttpTokens automatically set to required so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, HttpPutResponseHopLimit is set to 2. For more information, see Configure the AMI in the Amazon EC2 User Guide.  Do not use this parameter unless your AMI software supports IMDSv2. After you set the value to v2.0, you can't undo it. The only way to “reset” your AMI is to create a new AMI from the underlying snapshot.
    ///   - launchPermission: A new launch permission for the AMI.
    ///   - operationType: The operation type. This parameter can be used only when the Attribute parameter is launchPermission.
    ///   - organizationalUnitArns: The Amazon Resource Name (ARN) of an organizational unit (OU). This parameter can be used only when the Attribute parameter is launchPermission.
    ///   - organizationArns: The Amazon Resource Name (ARN) of an organization. This parameter can be used only when the Attribute parameter is launchPermission.
    ///   - productCodes: Not supported.
    ///   - userGroups: The user groups. This parameter can be used only when the Attribute parameter is launchPermission.
    ///   - userIds: The Amazon Web Services account IDs. This parameter can be used only when the Attribute parameter is launchPermission.
    ///   - value: The value of the attribute being modified. This parameter can be used only when the Attribute parameter is description or imdsSupport.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyImageAttribute(
        attribute: String? = nil,
        description: AttributeValue? = nil,
        dryRun: Bool? = nil,
        imageId: String? = nil,
        imdsSupport: AttributeValue? = nil,
        launchPermission: LaunchPermissionModifications? = nil,
        operationType: OperationType? = nil,
        organizationalUnitArns: [String]? = nil,
        organizationArns: [String]? = nil,
        productCodes: [String]? = nil,
        userGroups: [String]? = nil,
        userIds: [String]? = nil,
        value: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifyImageAttributeRequest(
            attribute: attribute, 
            description: description, 
            dryRun: dryRun, 
            imageId: imageId, 
            imdsSupport: imdsSupport, 
            launchPermission: launchPermission, 
            operationType: operationType, 
            organizationalUnitArns: organizationalUnitArns, 
            organizationArns: organizationArns, 
            productCodes: productCodes, 
            userGroups: userGroups, 
            userIds: userIds, 
            value: value
        )
        return try await self.modifyImageAttribute(input, logger: logger)
    }

    /// Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.  Note: Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the ModifyNetworkInterfaceAttribute action. To modify some attributes, the instance must be stopped. For more information, see Modify a stopped instance in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func modifyInstanceAttribute(_ input: ModifyInstanceAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifyInstanceAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.  Note: Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the ModifyNetworkInterfaceAttribute action. To modify some attributes, the instance must be stopped. For more information, see Modify a stopped instance in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - attribute: The name of the attribute to modify.  You can modify the following attributes only: disableApiTermination | instanceType | kernel | ramdisk | instanceInitiatedShutdownBehavior | blockDeviceMapping | userData | sourceDestCheck | groupSet | ebsOptimized | sriovNetSupport | enaSupport | nvmeSupport | disableApiStop | enclaveOptions
    ///   - blockDeviceMappings: Modifies the DeleteOnTermination attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for DeleteOnTermination, the default is true and the volume is deleted when the instance is terminated. You can't modify the DeleteOnTermination  attribute for volumes that are attached to Fargate tasks. To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see Update the block device mapping when launching an instance in the Amazon EC2 User Guide.
    ///   - disableApiStop: Indicates whether an instance is enabled for stop protection. For more information, see Enable stop protection for your instance.
    ///   - disableApiTermination: If the value is true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot Instances.
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - ebsOptimized: Specifies whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
    ///   - enaSupport: Set to true to enable enhanced networking with ENA for the instance. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
    ///   - groups: Replaces the security groups of the instance with the specified security groups. You must specify the ID of at least one security group, even if it's just the default security group for the VPC.
    ///   - instanceId: The ID of the instance.
    ///   - instanceInitiatedShutdownBehavior: Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
    ///   - instanceType: Changes the instance type to the specified value. For more information, see Instance types in the Amazon EC2 User Guide. If the instance type is not valid, the error returned is InvalidInstanceAttributeValue.
    ///   - kernel: Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
    ///   - ramdisk: Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
    ///   - sourceDestCheck: Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is true, source/destination checks are enabled; otherwise, they are disabled. The default value is true. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.
    ///   - sriovNetSupport: Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance. There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
    ///   - userData: Changes the instance's user data to the specified value. User data must be base64-encoded. Depending on the tool or SDK that you're using, the base64-encoding might be performed for you. For more information, see Work with instance user data.
    ///   - value: A new value for the attribute. Use only with the kernel, ramdisk, userData, disableApiTermination, or instanceInitiatedShutdownBehavior attribute.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceAttribute(
        attribute: InstanceAttributeName? = nil,
        blockDeviceMappings: [InstanceBlockDeviceMappingSpecification]? = nil,
        disableApiStop: AttributeBooleanValue? = nil,
        disableApiTermination: AttributeBooleanValue? = nil,
        dryRun: Bool? = nil,
        ebsOptimized: AttributeBooleanValue? = nil,
        enaSupport: AttributeBooleanValue? = nil,
        groups: [String]? = nil,
        instanceId: String? = nil,
        instanceInitiatedShutdownBehavior: AttributeValue? = nil,
        instanceType: AttributeValue? = nil,
        kernel: AttributeValue? = nil,
        ramdisk: AttributeValue? = nil,
        sourceDestCheck: AttributeBooleanValue? = nil,
        sriovNetSupport: AttributeValue? = nil,
        userData: BlobAttributeValue? = nil,
        value: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifyInstanceAttributeRequest(
            attribute: attribute, 
            blockDeviceMappings: blockDeviceMappings, 
            disableApiStop: disableApiStop, 
            disableApiTermination: disableApiTermination, 
            dryRun: dryRun, 
            ebsOptimized: ebsOptimized, 
            enaSupport: enaSupport, 
            groups: groups, 
            instanceId: instanceId, 
            instanceInitiatedShutdownBehavior: instanceInitiatedShutdownBehavior, 
            instanceType: instanceType, 
            kernel: kernel, 
            ramdisk: ramdisk, 
            sourceDestCheck: sourceDestCheck, 
            sriovNetSupport: sriovNetSupport, 
            userData: userData, 
            value: value
        )
        return try await self.modifyInstanceAttribute(input, logger: logger)
    }

    /// Modifies the Capacity Reservation settings for a stopped instance. Use this action to
    /// 			configure an instance to target a specific Capacity Reservation, run in any
    /// 			open Capacity Reservation with matching attributes, run in On-Demand
    /// 			Instance capacity, or only run in a Capacity Reservation.
    @Sendable
    @inlinable
    public func modifyInstanceCapacityReservationAttributes(_ input: ModifyInstanceCapacityReservationAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyInstanceCapacityReservationAttributesResult {
        try await self.client.execute(
            operation: "ModifyInstanceCapacityReservationAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the Capacity Reservation settings for a stopped instance. Use this action to
    /// 			configure an instance to target a specific Capacity Reservation, run in any
    /// 			open Capacity Reservation with matching attributes, run in On-Demand
    /// 			Instance capacity, or only run in a Capacity Reservation.
    ///
    /// Parameters:
    ///   - capacityReservationSpecification: Information about the Capacity Reservation targeting option.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance to be modified.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceCapacityReservationAttributes(
        capacityReservationSpecification: CapacityReservationSpecification? = nil,
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyInstanceCapacityReservationAttributesResult {
        let input = ModifyInstanceCapacityReservationAttributesRequest(
            capacityReservationSpecification: capacityReservationSpecification, 
            dryRun: dryRun, 
            instanceId: instanceId
        )
        return try await self.modifyInstanceCapacityReservationAttributes(input, logger: logger)
    }

    /// By default, all vCPUs for the instance type are active when you launch an instance. When you
    /// 			configure the number of active vCPUs for the instance, it can help you save on licensing costs and
    /// 			optimize performance. The base cost of the instance remains unchanged. The number of active vCPUs equals the number of threads per CPU core multiplied by the number
    /// 			of cores. The instance must be in a Stopped state before you make changes.  Some instance type options do not support this capability. For more information, see
    /// 				Supported CPU
    /// 					options in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func modifyInstanceCpuOptions(_ input: ModifyInstanceCpuOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyInstanceCpuOptionsResult {
        try await self.client.execute(
            operation: "ModifyInstanceCpuOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// By default, all vCPUs for the instance type are active when you launch an instance. When you
    /// 			configure the number of active vCPUs for the instance, it can help you save on licensing costs and
    /// 			optimize performance. The base cost of the instance remains unchanged. The number of active vCPUs equals the number of threads per CPU core multiplied by the number
    /// 			of cores. The instance must be in a Stopped state before you make changes.  Some instance type options do not support this capability. For more information, see
    /// 				Supported CPU
    /// 					options in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - coreCount: The number of CPU cores to activate for the specified instance.
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance to update.
    ///   - threadsPerCore: The number of threads to run for each CPU core.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceCpuOptions(
        coreCount: Int? = nil,
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        threadsPerCore: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyInstanceCpuOptionsResult {
        let input = ModifyInstanceCpuOptionsRequest(
            coreCount: coreCount, 
            dryRun: dryRun, 
            instanceId: instanceId, 
            threadsPerCore: threadsPerCore
        )
        return try await self.modifyInstanceCpuOptions(input, logger: logger)
    }

    /// Modifies the credit option for CPU usage on a running or stopped burstable performance instance. The credit options are standard and unlimited. For more information, see Burstable performance instances in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func modifyInstanceCreditSpecification(_ input: ModifyInstanceCreditSpecificationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyInstanceCreditSpecificationResult {
        try await self.client.execute(
            operation: "ModifyInstanceCreditSpecification", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the credit option for CPU usage on a running or stopped burstable performance instance. The credit options are standard and unlimited. For more information, see Burstable performance instances in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceCreditSpecifications: Information about the credit option for CPU usage.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceCreditSpecification(
        clientToken: String? = nil,
        dryRun: Bool? = nil,
        instanceCreditSpecifications: [InstanceCreditSpecificationRequest]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyInstanceCreditSpecificationResult {
        let input = ModifyInstanceCreditSpecificationRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            instanceCreditSpecifications: instanceCreditSpecifications
        )
        return try await self.modifyInstanceCreditSpecification(input, logger: logger)
    }

    /// Modifies the start time for a scheduled Amazon EC2 instance event.
    @Sendable
    @inlinable
    public func modifyInstanceEventStartTime(_ input: ModifyInstanceEventStartTimeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyInstanceEventStartTimeResult {
        try await self.client.execute(
            operation: "ModifyInstanceEventStartTime", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the start time for a scheduled Amazon EC2 instance event.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceEventId: The ID of the event whose date and time you are modifying.
    ///   - instanceId: The ID of the instance with the scheduled event.
    ///   - notBefore: The new date and time when the event will take place.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceEventStartTime(
        dryRun: Bool? = nil,
        instanceEventId: String? = nil,
        instanceId: String? = nil,
        notBefore: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyInstanceEventStartTimeResult {
        let input = ModifyInstanceEventStartTimeRequest(
            dryRun: dryRun, 
            instanceEventId: instanceEventId, 
            instanceId: instanceId, 
            notBefore: notBefore
        )
        return try await self.modifyInstanceEventStartTime(input, logger: logger)
    }

    /// Modifies the specified event window. You can define either a set of time ranges or a cron expression when modifying the event window, but not both. To modify the targets associated with the event window, use the AssociateInstanceEventWindow and DisassociateInstanceEventWindow API. If Amazon Web Services has already scheduled an event, modifying an event window won't change the time of the scheduled event. For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func modifyInstanceEventWindow(_ input: ModifyInstanceEventWindowRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyInstanceEventWindowResult {
        try await self.client.execute(
            operation: "ModifyInstanceEventWindow", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified event window. You can define either a set of time ranges or a cron expression when modifying the event window, but not both. To modify the targets associated with the event window, use the AssociateInstanceEventWindow and DisassociateInstanceEventWindow API. If Amazon Web Services has already scheduled an event, modifying an event window won't change the time of the scheduled event. For more information, see Define event windows for scheduled events in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - cronExpression: The cron expression of the event window, for example, * 0-4,20-23 * * 1,5. Constraints:   Only hour and day of the week values are supported.   For day of the week values, you can specify either integers 0 through 6, or alternative single values SUN through SAT.   The minute, month, and year must be specified by *.   The hour value must be one or a multiple range, for example, 0-4 or 0-4,20-23.   Each hour range must be >= 2 hours, for example, 0-2 or 20-23.   The event window must be >= 4 hours. The combined total time ranges in the event window must be >= 4 hours.   For more information about cron expressions, see cron on the Wikipedia website.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceEventWindowId: The ID of the event window.
    ///   - name: The name of the event window.
    ///   - timeRanges: The time ranges of the event window.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceEventWindow(
        cronExpression: String? = nil,
        dryRun: Bool? = nil,
        instanceEventWindowId: String? = nil,
        name: String? = nil,
        timeRanges: [InstanceEventWindowTimeRangeRequest]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyInstanceEventWindowResult {
        let input = ModifyInstanceEventWindowRequest(
            cronExpression: cronExpression, 
            dryRun: dryRun, 
            instanceEventWindowId: instanceEventWindowId, 
            name: name, 
            timeRanges: timeRanges
        )
        return try await self.modifyInstanceEventWindow(input, logger: logger)
    }

    /// Modifies the recovery behavior of your instance to disable simplified automatic recovery or set the recovery behavior to default. The default configuration will not enable simplified automatic recovery for an unsupported instance type. For more information, see Simplified automatic recovery.
    @Sendable
    @inlinable
    public func modifyInstanceMaintenanceOptions(_ input: ModifyInstanceMaintenanceOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyInstanceMaintenanceOptionsResult {
        try await self.client.execute(
            operation: "ModifyInstanceMaintenanceOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the recovery behavior of your instance to disable simplified automatic recovery or set the recovery behavior to default. The default configuration will not enable simplified automatic recovery for an unsupported instance type. For more information, see Simplified automatic recovery.
    ///
    /// Parameters:
    ///   - autoRecovery: Disables the automatic recovery behavior of your instance or sets it to default.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceMaintenanceOptions(
        autoRecovery: InstanceAutoRecoveryState? = nil,
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyInstanceMaintenanceOptionsResult {
        let input = ModifyInstanceMaintenanceOptionsRequest(
            autoRecovery: autoRecovery, 
            dryRun: dryRun, 
            instanceId: instanceId
        )
        return try await self.modifyInstanceMaintenanceOptions(input, logger: logger)
    }

    /// Modifies the default instance metadata service (IMDS) settings at the account level in the specified Amazon Web Services  Region.  To remove a parameter's account-level default setting, specify no-preference. If an account-level setting is cleared with no-preference, then the instance launch considers the other instance metadata settings. For more information, see Order of precedence for instance metadata options in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func modifyInstanceMetadataDefaults(_ input: ModifyInstanceMetadataDefaultsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyInstanceMetadataDefaultsResult {
        try await self.client.execute(
            operation: "ModifyInstanceMetadataDefaults", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the default instance metadata service (IMDS) settings at the account level in the specified Amazon Web Services  Region.  To remove a parameter's account-level default setting, specify no-preference. If an account-level setting is cleared with no-preference, then the instance launch considers the other instance metadata settings. For more information, see Order of precedence for instance metadata options in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - httpEndpoint: Enables or disables the IMDS endpoint on an instance. When disabled, the instance metadata can't be accessed.
    ///   - httpPutResponseHopLimit: The maximum number of hops that the metadata token can travel. To indicate no preference, specify -1. Possible values: Integers from 1 to 64, and -1 to indicate no preference
    ///   - httpTokens: Indicates whether IMDSv2 is required.    optional – IMDSv2 is optional, which means that you can use either IMDSv2 or IMDSv1.    required – IMDSv2 is required, which means that IMDSv1 is disabled, and you must use IMDSv2.
    ///   - instanceMetadataTags: Enables or disables access to an instance's tags from the instance metadata. For more information, see Work with instance tags using the instance metadata in the Amazon EC2 User Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceMetadataDefaults(
        dryRun: Bool? = nil,
        httpEndpoint: DefaultInstanceMetadataEndpointState? = nil,
        httpPutResponseHopLimit: Int? = nil,
        httpTokens: MetadataDefaultHttpTokensState? = nil,
        instanceMetadataTags: DefaultInstanceMetadataTagsState? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyInstanceMetadataDefaultsResult {
        let input = ModifyInstanceMetadataDefaultsRequest(
            dryRun: dryRun, 
            httpEndpoint: httpEndpoint, 
            httpPutResponseHopLimit: httpPutResponseHopLimit, 
            httpTokens: httpTokens, 
            instanceMetadataTags: instanceMetadataTags
        )
        return try await self.modifyInstanceMetadataDefaults(input, logger: logger)
    }

    /// Modify the instance metadata parameters on a running or stopped instance. When you modify the parameters on a stopped instance, they are applied when the instance is started. When you modify the parameters on a running instance, the API responds with a state of “pending”. After the parameter modifications are successfully applied to the instance, the state of the modifications changes from “pending” to “applied” in subsequent describe-instances API calls. For more information, see Instance metadata and user data in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func modifyInstanceMetadataOptions(_ input: ModifyInstanceMetadataOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyInstanceMetadataOptionsResult {
        try await self.client.execute(
            operation: "ModifyInstanceMetadataOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify the instance metadata parameters on a running or stopped instance. When you modify the parameters on a stopped instance, they are applied when the instance is started. When you modify the parameters on a running instance, the API responds with a state of “pending”. After the parameter modifications are successfully applied to the instance, the state of the modifications changes from “pending” to “applied” in subsequent describe-instances API calls. For more information, see Instance metadata and user data in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - httpEndpoint: Enables or disables the HTTP metadata endpoint on your instances. If this parameter is not specified, the existing state is maintained. If you specify a value of disabled, you cannot access your instance metadata.
    ///   - httpProtocolIpv6: Enables or disables the IPv6 endpoint for the instance metadata service.  Applies only if you enabled the HTTP metadata endpoint.
    ///   - httpPutResponseHopLimit: The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained. Possible values: Integers from 1 to 64
    ///   - httpTokens: Indicates whether IMDSv2 is required.    optional - IMDSv2 is optional. You can choose whether to send a  session token in your instance metadata retrieval requests. If you retrieve  IAM role credentials without a session token, you receive the IMDSv1 role  credentials. If you retrieve IAM role credentials using a valid session token,  you receive the IMDSv2 role credentials.    required - IMDSv2 is required. You must send a session token  in your instance metadata retrieval requests. With this option, retrieving the  IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are  not available.   Default:   If the value of ImdsSupport for the Amazon Machine Image (AMI) for your instance is v2.0 and the account level default is set to no-preference, the default is required.   If the value of ImdsSupport for the Amazon Machine Image (AMI) for your instance is v2.0, but the account level default is set to V1 or V2, the default is optional.   The default value can also be affected by other combinations of parameters. For more information, see Order of precedence for instance metadata options in the Amazon EC2 User Guide.
    ///   - instanceId: The ID of the instance.
    ///   - instanceMetadataTags: Set to enabled to allow access to instance tags from the instance metadata. Set to disabled to turn off access to instance tags from the instance metadata. For more information, see Work with instance tags using the instance metadata.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstanceMetadataOptions(
        dryRun: Bool? = nil,
        httpEndpoint: InstanceMetadataEndpointState? = nil,
        httpProtocolIpv6: InstanceMetadataProtocolState? = nil,
        httpPutResponseHopLimit: Int? = nil,
        httpTokens: HttpTokensState? = nil,
        instanceId: String? = nil,
        instanceMetadataTags: InstanceMetadataTagsState? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyInstanceMetadataOptionsResult {
        let input = ModifyInstanceMetadataOptionsRequest(
            dryRun: dryRun, 
            httpEndpoint: httpEndpoint, 
            httpProtocolIpv6: httpProtocolIpv6, 
            httpPutResponseHopLimit: httpPutResponseHopLimit, 
            httpTokens: httpTokens, 
            instanceId: instanceId, 
            instanceMetadataTags: instanceMetadataTags
        )
        return try await self.modifyInstanceMetadataOptions(input, logger: logger)
    }

    /// Modifies the placement attributes for a specified instance. You can do the following:   Modify the affinity between an instance and a Dedicated Host. When affinity is set to host and the instance is not associated with a specific Dedicated Host, the next time the instance is started, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.   Change the Dedicated Host with which an instance is associated.   Change the instance tenancy of an instance.   Move an instance to or from a placement group.   At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request. To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the stopped state.
    @Sendable
    @inlinable
    public func modifyInstancePlacement(_ input: ModifyInstancePlacementRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyInstancePlacementResult {
        try await self.client.execute(
            operation: "ModifyInstancePlacement", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the placement attributes for a specified instance. You can do the following:   Modify the affinity between an instance and a Dedicated Host. When affinity is set to host and the instance is not associated with a specific Dedicated Host, the next time the instance is started, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.   Change the Dedicated Host with which an instance is associated.   Change the instance tenancy of an instance.   Move an instance to or from a placement group.   At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request. To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the stopped state.
    ///
    /// Parameters:
    ///   - affinity: The affinity setting for the instance. For more information, see Host affinity in the Amazon EC2 User Guide.
    ///   - groupId: The Group Id of a placement group. You must specify the Placement Group Group Id to launch an instance in a shared placement group.
    ///   - groupName: The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of default. For cluster and partition placement groups, the instance must have a tenancy of default or dedicated. To remove an instance from a placement group, specify an empty string ("").
    ///   - hostId: The ID of the Dedicated Host with which to associate the instance.
    ///   - hostResourceGroupArn: The ARN of the host resource group in which to place the instance. The instance must have a tenancy of host to specify this parameter.
    ///   - instanceId: The ID of the instance that you are modifying.
    ///   - partitionNumber: The number of the partition in which to place the instance. Valid only if the placement group strategy is set to partition.
    ///   - tenancy: The tenancy for the instance.  For T3 instances, you must launch the instance on a Dedicated Host to use a tenancy of host. You can't change the tenancy from host to dedicated or default. Attempting to make one of these unsupported tenancy changes results in an InvalidRequest error code.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyInstancePlacement(
        affinity: Affinity? = nil,
        groupId: String? = nil,
        groupName: String? = nil,
        hostId: String? = nil,
        hostResourceGroupArn: String? = nil,
        instanceId: String? = nil,
        partitionNumber: Int? = nil,
        tenancy: HostTenancy? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyInstancePlacementResult {
        let input = ModifyInstancePlacementRequest(
            affinity: affinity, 
            groupId: groupId, 
            groupName: groupName, 
            hostId: hostId, 
            hostResourceGroupArn: hostResourceGroupArn, 
            instanceId: instanceId, 
            partitionNumber: partitionNumber, 
            tenancy: tenancy
        )
        return try await self.modifyInstancePlacement(input, logger: logger)
    }

    /// Modify the configurations of an IPAM.
    @Sendable
    @inlinable
    public func modifyIpam(_ input: ModifyIpamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyIpamResult {
        try await self.client.execute(
            operation: "ModifyIpam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify the configurations of an IPAM.
    ///
    /// Parameters:
    ///   - addOperatingRegions: Choose the operating Regions for the IPAM. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions. For more information about operating Regions, see Create an IPAM in the Amazon VPC IPAM User Guide.
    ///   - description: The description of the IPAM you want to modify.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - enablePrivateGua: Enable this option to use your own GUA ranges as private IPv6 addresses. This option is disabled by default.
    ///   - ipamId: The ID of the IPAM you want to modify.
    ///   - removeOperatingRegions: The operating Regions to remove.
    ///   - tier: IPAM is offered in a Free Tier and an Advanced Tier. For more information about the features available in each tier and the costs associated with the tiers, see Amazon VPC pricing > IPAM tab.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyIpam(
        addOperatingRegions: [AddIpamOperatingRegion]? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        enablePrivateGua: Bool? = nil,
        ipamId: String? = nil,
        removeOperatingRegions: [RemoveIpamOperatingRegion]? = nil,
        tier: IpamTier? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyIpamResult {
        let input = ModifyIpamRequest(
            addOperatingRegions: addOperatingRegions, 
            description: description, 
            dryRun: dryRun, 
            enablePrivateGua: enablePrivateGua, 
            ipamId: ipamId, 
            removeOperatingRegions: removeOperatingRegions, 
            tier: tier
        )
        return try await self.modifyIpam(input, logger: logger)
    }

    /// Modify the configurations of an IPAM pool. For more information, see Modify a pool in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func modifyIpamPool(_ input: ModifyIpamPoolRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyIpamPoolResult {
        try await self.client.execute(
            operation: "ModifyIpamPool", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify the configurations of an IPAM pool. For more information, see Modify a pool in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - addAllocationResourceTags: Add tag allocation rules to a pool. For more information about allocation rules, see Create a top-level pool in the Amazon VPC IPAM User Guide.
    ///   - allocationDefaultNetmaskLength: The default netmask length for allocations added to this pool. If, for example, the CIDR assigned to this pool is 10.0.0.0/8 and you enter 16 here, new allocations will default to 10.0.0.0/16.
    ///   - allocationMaxNetmaskLength: The maximum netmask length possible for CIDR allocations in this IPAM pool to be compliant. Possible  netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128.The maximum netmask  length must be greater than the minimum netmask length.
    ///   - allocationMinNetmaskLength: The minimum netmask length required for CIDR allocations in this IPAM pool to be compliant. Possible  netmask lengths for IPv4 addresses are 0 - 32. Possible netmask lengths for IPv6 addresses are  0 - 128. The minimum netmask  length must be less than the maximum netmask length.
    ///   - autoImport: If true, IPAM will continuously look for resources within the CIDR range of this pool  and automatically import them as allocations into your IPAM. The CIDRs that will be allocated for these resources must not already be allocated to other resources in order for the import to succeed. IPAM will import  a CIDR regardless of its compliance with the pool's allocation rules, so a resource might be imported and subsequently  marked as noncompliant. If IPAM discovers multiple CIDRs that overlap, IPAM will import the largest CIDR only. If IPAM  discovers multiple CIDRs with matching CIDRs, IPAM will randomly import one of them only.  A locale must be set on the pool for this feature to work.
    ///   - clearAllocationDefaultNetmaskLength: Clear the default netmask length allocation rule for this pool.
    ///   - description: The description of the IPAM pool you want to modify.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamPoolId: The ID of the IPAM pool you want to modify.
    ///   - removeAllocationResourceTags: Remove tag allocation rules from a pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyIpamPool(
        addAllocationResourceTags: [RequestIpamResourceTag]? = nil,
        allocationDefaultNetmaskLength: Int? = nil,
        allocationMaxNetmaskLength: Int? = nil,
        allocationMinNetmaskLength: Int? = nil,
        autoImport: Bool? = nil,
        clearAllocationDefaultNetmaskLength: Bool? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        ipamPoolId: String? = nil,
        removeAllocationResourceTags: [RequestIpamResourceTag]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyIpamPoolResult {
        let input = ModifyIpamPoolRequest(
            addAllocationResourceTags: addAllocationResourceTags, 
            allocationDefaultNetmaskLength: allocationDefaultNetmaskLength, 
            allocationMaxNetmaskLength: allocationMaxNetmaskLength, 
            allocationMinNetmaskLength: allocationMinNetmaskLength, 
            autoImport: autoImport, 
            clearAllocationDefaultNetmaskLength: clearAllocationDefaultNetmaskLength, 
            description: description, 
            dryRun: dryRun, 
            ipamPoolId: ipamPoolId, 
            removeAllocationResourceTags: removeAllocationResourceTags
        )
        return try await self.modifyIpamPool(input, logger: logger)
    }

    /// Modify a resource CIDR. You can use this action to transfer resource CIDRs between scopes and ignore resource CIDRs that you do not want to manage. If set to false, the resource will not be tracked for overlap, it cannot be auto-imported into a pool, and it will be removed from any pool it has an allocation in. For more information, see Move resource CIDRs between scopes and Change the monitoring state of resource CIDRs in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func modifyIpamResourceCidr(_ input: ModifyIpamResourceCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyIpamResourceCidrResult {
        try await self.client.execute(
            operation: "ModifyIpamResourceCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify a resource CIDR. You can use this action to transfer resource CIDRs between scopes and ignore resource CIDRs that you do not want to manage. If set to false, the resource will not be tracked for overlap, it cannot be auto-imported into a pool, and it will be removed from any pool it has an allocation in. For more information, see Move resource CIDRs between scopes and Change the monitoring state of resource CIDRs in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - currentIpamScopeId: The ID of the current scope that the resource CIDR is in.
    ///   - destinationIpamScopeId: The ID of the scope you want to transfer the resource CIDR to.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - monitored: Determines if the resource is monitored by IPAM. If a resource is monitored, the resource is discovered by IPAM and you can view details about the resource’s CIDR.
    ///   - resourceCidr: The CIDR of the resource you want to modify.
    ///   - resourceId: The ID of the resource you want to modify.
    ///   - resourceRegion: The Amazon Web Services Region of the resource you want to modify.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyIpamResourceCidr(
        currentIpamScopeId: String? = nil,
        destinationIpamScopeId: String? = nil,
        dryRun: Bool? = nil,
        monitored: Bool? = nil,
        resourceCidr: String? = nil,
        resourceId: String? = nil,
        resourceRegion: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyIpamResourceCidrResult {
        let input = ModifyIpamResourceCidrRequest(
            currentIpamScopeId: currentIpamScopeId, 
            destinationIpamScopeId: destinationIpamScopeId, 
            dryRun: dryRun, 
            monitored: monitored, 
            resourceCidr: resourceCidr, 
            resourceId: resourceId, 
            resourceRegion: resourceRegion
        )
        return try await self.modifyIpamResourceCidr(input, logger: logger)
    }

    /// Modifies a resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    @Sendable
    @inlinable
    public func modifyIpamResourceDiscovery(_ input: ModifyIpamResourceDiscoveryRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyIpamResourceDiscoveryResult {
        try await self.client.execute(
            operation: "ModifyIpamResourceDiscovery", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a resource discovery. A resource discovery is an IPAM component that enables IPAM to manage and monitor resources that belong to the owning account.
    ///
    /// Parameters:
    ///   - addOperatingRegions: Add operating Regions to the resource discovery. Operating Regions are Amazon Web Services Regions where the IPAM is allowed to manage IP address CIDRs. IPAM only discovers and monitors resources in the Amazon Web Services Regions you select as operating Regions.
    ///   - addOrganizationalUnitExclusions: Add an Organizational Unit (OU) exclusion to your IPAM. If your IPAM is integrated with Amazon Web Services Organizations and you add an organizational unit (OU) exclusion, IPAM will not manage the IP addresses in accounts in that OU exclusion. There is a limit on the number of exclusions you can create. For more information, see Quotas for your IPAM in the Amazon VPC IPAM User Guide.
    ///   - description: A resource discovery description.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamResourceDiscoveryId: A resource discovery ID.
    ///   - removeOperatingRegions: Remove operating Regions.
    ///   - removeOrganizationalUnitExclusions: Remove an Organizational Unit (OU) exclusion to your IPAM. If your IPAM is integrated with Amazon Web Services Organizations and you add an organizational unit (OU) exclusion, IPAM will not manage the IP addresses in accounts in that OU exclusion. There is a limit on the number of exclusions you can create. For more information, see Quotas for your IPAM in the Amazon VPC IPAM User Guide.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyIpamResourceDiscovery(
        addOperatingRegions: [AddIpamOperatingRegion]? = nil,
        addOrganizationalUnitExclusions: [AddIpamOrganizationalUnitExclusion]? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        ipamResourceDiscoveryId: String? = nil,
        removeOperatingRegions: [RemoveIpamOperatingRegion]? = nil,
        removeOrganizationalUnitExclusions: [RemoveIpamOrganizationalUnitExclusion]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyIpamResourceDiscoveryResult {
        let input = ModifyIpamResourceDiscoveryRequest(
            addOperatingRegions: addOperatingRegions, 
            addOrganizationalUnitExclusions: addOrganizationalUnitExclusions, 
            description: description, 
            dryRun: dryRun, 
            ipamResourceDiscoveryId: ipamResourceDiscoveryId, 
            removeOperatingRegions: removeOperatingRegions, 
            removeOrganizationalUnitExclusions: removeOrganizationalUnitExclusions
        )
        return try await self.modifyIpamResourceDiscovery(input, logger: logger)
    }

    /// Modify an IPAM scope.
    @Sendable
    @inlinable
    public func modifyIpamScope(_ input: ModifyIpamScopeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyIpamScopeResult {
        try await self.client.execute(
            operation: "ModifyIpamScope", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify an IPAM scope.
    ///
    /// Parameters:
    ///   - description: The description of the scope you want to modify.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamScopeId: The ID of the scope you want to modify.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyIpamScope(
        description: String? = nil,
        dryRun: Bool? = nil,
        ipamScopeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyIpamScopeResult {
        let input = ModifyIpamScopeRequest(
            description: description, 
            dryRun: dryRun, 
            ipamScopeId: ipamScopeId
        )
        return try await self.modifyIpamScope(input, logger: logger)
    }

    /// Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.
    @Sendable
    @inlinable
    public func modifyLaunchTemplate(_ input: ModifyLaunchTemplateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyLaunchTemplateResult {
        try await self.client.execute(
            operation: "ModifyLaunchTemplate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency. Constraint: Maximum 128 ASCII characters.
    ///   - defaultVersion: The version number of the launch template to set as the default version.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - launchTemplateId: The ID of the launch template. You must specify either the launch template ID or the launch template name, but not both.
    ///   - launchTemplateName: The name of the launch template. You must specify either the launch template ID or the launch template name, but not both.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyLaunchTemplate(
        clientToken: String? = nil,
        defaultVersion: String? = nil,
        dryRun: Bool? = nil,
        launchTemplateId: String? = nil,
        launchTemplateName: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyLaunchTemplateResult {
        let input = ModifyLaunchTemplateRequest(
            clientToken: clientToken, 
            defaultVersion: defaultVersion, 
            dryRun: dryRun, 
            launchTemplateId: launchTemplateId, 
            launchTemplateName: launchTemplateName
        )
        return try await self.modifyLaunchTemplate(input, logger: logger)
    }

    /// Modifies the specified local gateway route.
    @Sendable
    @inlinable
    public func modifyLocalGatewayRoute(_ input: ModifyLocalGatewayRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyLocalGatewayRouteResult {
        try await self.client.execute(
            operation: "ModifyLocalGatewayRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified local gateway route.
    ///
    /// Parameters:
    ///   - destinationCidrBlock: The CIDR block used for destination matches. The value that you provide must match the CIDR of an existing route in the table.
    ///   - destinationPrefixListId:  The ID of the prefix list. Use a prefix list in place of DestinationCidrBlock. You  cannot use DestinationPrefixListId and DestinationCidrBlock in the same request.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - localGatewayRouteTableId: The ID of the local gateway route table.
    ///   - localGatewayVirtualInterfaceGroupId:  The ID of the virtual interface group.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyLocalGatewayRoute(
        destinationCidrBlock: String? = nil,
        destinationPrefixListId: String? = nil,
        dryRun: Bool? = nil,
        localGatewayRouteTableId: String? = nil,
        localGatewayVirtualInterfaceGroupId: String? = nil,
        networkInterfaceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyLocalGatewayRouteResult {
        let input = ModifyLocalGatewayRouteRequest(
            destinationCidrBlock: destinationCidrBlock, 
            destinationPrefixListId: destinationPrefixListId, 
            dryRun: dryRun, 
            localGatewayRouteTableId: localGatewayRouteTableId, 
            localGatewayVirtualInterfaceGroupId: localGatewayVirtualInterfaceGroupId, 
            networkInterfaceId: networkInterfaceId
        )
        return try await self.modifyLocalGatewayRoute(input, logger: logger)
    }

    /// Modifies the specified managed prefix list. Adding or removing entries in a prefix list creates a new version of the prefix list. Changing the name of the prefix list does not affect the version. If you specify a current version number that does not match the true current version number, the request fails.
    @Sendable
    @inlinable
    public func modifyManagedPrefixList(_ input: ModifyManagedPrefixListRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyManagedPrefixListResult {
        try await self.client.execute(
            operation: "ModifyManagedPrefixList", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified managed prefix list. Adding or removing entries in a prefix list creates a new version of the prefix list. Changing the name of the prefix list does not affect the version. If you specify a current version number that does not match the true current version number, the request fails.
    ///
    /// Parameters:
    ///   - addEntries: One or more entries to add to the prefix list.
    ///   - currentVersion: The current version of the prefix list.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxEntries: The maximum number of entries for the prefix list. You cannot modify the entries   of a prefix list and modify the size of a prefix list at the same time. If any of the resources that reference the prefix list cannot support the new maximum size, the modify operation fails. Check the state message for the IDs of  the first ten resources that do not support the new maximum size.
    ///   - prefixListId: The ID of the prefix list.
    ///   - prefixListName: A name for the prefix list.
    ///   - removeEntries: One or more entries to remove from the prefix list.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyManagedPrefixList(
        addEntries: [AddPrefixListEntry]? = nil,
        currentVersion: Int64? = nil,
        dryRun: Bool? = nil,
        maxEntries: Int? = nil,
        prefixListId: String? = nil,
        prefixListName: String? = nil,
        removeEntries: [RemovePrefixListEntry]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyManagedPrefixListResult {
        let input = ModifyManagedPrefixListRequest(
            addEntries: addEntries, 
            currentVersion: currentVersion, 
            dryRun: dryRun, 
            maxEntries: maxEntries, 
            prefixListId: prefixListId, 
            prefixListName: prefixListName, 
            removeEntries: removeEntries
        )
        return try await self.modifyManagedPrefixList(input, logger: logger)
    }

    /// Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.
    @Sendable
    @inlinable
    public func modifyNetworkInterfaceAttribute(_ input: ModifyNetworkInterfaceAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifyNetworkInterfaceAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.
    ///
    /// Parameters:
    ///   - associatePublicIpAddress: Indicates whether to assign a public IPv4 address to a network interface.  This option can be enabled for any network interface but will only apply to the primary network interface (eth0).
    ///   - attachment: Information about the interface attachment. If modifying the delete on
    ///   - connectionTrackingSpecification: A connection tracking specification.
    ///   - description: A description for the network interface.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - enablePrimaryIpv6: If you’re modifying a network interface in a dual-stack or IPv6-only subnet, you have the option to assign a primary IPv6 IP address. A primary IPv6 address is an IPv6 GUA address associated with an ENI that you have enabled to use a primary IPv6 address. Use this option if the instance that this ENI will be attached to relies on its IPv6 address not changing. Amazon Web Services will automatically assign an IPv6 address associated with the ENI attached to your instance to be the primary IPv6 address. Once you enable an IPv6 GUA address to be a primary IPv6, you cannot disable it. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. If you have multiple IPv6 addresses associated with an ENI attached to your instance and you enable a primary IPv6 address, the first IPv6 GUA address associated with the ENI becomes the primary IPv6 address.
    ///   - enaSrdSpecification: Updates the ENA Express configuration for the network interface that’s attached to the
    ///   - groups: Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - sourceDestCheck: Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is true, source/destination checks are enabled; otherwise, they are disabled. The default value is true.  You must disable source/destination checks if the instance runs services  such as network address translation, routing, or firewalls.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyNetworkInterfaceAttribute(
        associatePublicIpAddress: Bool? = nil,
        attachment: NetworkInterfaceAttachmentChanges? = nil,
        connectionTrackingSpecification: ConnectionTrackingSpecificationRequest? = nil,
        description: AttributeValue? = nil,
        dryRun: Bool? = nil,
        enablePrimaryIpv6: Bool? = nil,
        enaSrdSpecification: EnaSrdSpecification? = nil,
        groups: [String]? = nil,
        networkInterfaceId: String? = nil,
        sourceDestCheck: AttributeBooleanValue? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifyNetworkInterfaceAttributeRequest(
            associatePublicIpAddress: associatePublicIpAddress, 
            attachment: attachment, 
            connectionTrackingSpecification: connectionTrackingSpecification, 
            description: description, 
            dryRun: dryRun, 
            enablePrimaryIpv6: enablePrimaryIpv6, 
            enaSrdSpecification: enaSrdSpecification, 
            groups: groups, 
            networkInterfaceId: networkInterfaceId, 
            sourceDestCheck: sourceDestCheck
        )
        return try await self.modifyNetworkInterfaceAttribute(input, logger: logger)
    }

    /// Modifies the options for instance hostnames for the specified instance.
    @Sendable
    @inlinable
    public func modifyPrivateDnsNameOptions(_ input: ModifyPrivateDnsNameOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyPrivateDnsNameOptionsResult {
        try await self.client.execute(
            operation: "ModifyPrivateDnsNameOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the options for instance hostnames for the specified instance.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - enableResourceNameDnsAAAARecord: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
    ///   - enableResourceNameDnsARecord: Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
    ///   - instanceId: The ID of the instance.
    ///   - privateDnsHostnameType: The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyPrivateDnsNameOptions(
        dryRun: Bool? = nil,
        enableResourceNameDnsAAAARecord: Bool? = nil,
        enableResourceNameDnsARecord: Bool? = nil,
        instanceId: String? = nil,
        privateDnsHostnameType: HostnameType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyPrivateDnsNameOptionsResult {
        let input = ModifyPrivateDnsNameOptionsRequest(
            dryRun: dryRun, 
            enableResourceNameDnsAAAARecord: enableResourceNameDnsAAAARecord, 
            enableResourceNameDnsARecord: enableResourceNameDnsARecord, 
            instanceId: instanceId, 
            privateDnsHostnameType: privateDnsHostnameType
        )
        return try await self.modifyPrivateDnsNameOptions(input, logger: logger)
    }

    /// Modifies the configuration of your Reserved Instances, such as the Availability Zone,  instance count, or instance type. The Reserved Instances to be modified must be identical,  except for Availability Zone, network platform, and instance type. For more information, see Modify Reserved Instances in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func modifyReservedInstances(_ input: ModifyReservedInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyReservedInstancesResult {
        try await self.client.execute(
            operation: "ModifyReservedInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the configuration of your Reserved Instances, such as the Availability Zone,  instance count, or instance type. The Reserved Instances to be modified must be identical,  except for Availability Zone, network platform, and instance type. For more information, see Modify Reserved Instances in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see  		Ensuring Idempotency.
    ///   - reservedInstancesIds: The IDs of the Reserved Instances to modify.
    ///   - targetConfigurations: The configuration settings for the Reserved Instances to modify.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyReservedInstances(
        clientToken: String? = nil,
        reservedInstancesIds: [String]? = nil,
        targetConfigurations: [ReservedInstancesConfiguration]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyReservedInstancesResult {
        let input = ModifyReservedInstancesRequest(
            clientToken: clientToken, 
            reservedInstancesIds: reservedInstancesIds, 
            targetConfigurations: targetConfigurations
        )
        return try await self.modifyReservedInstances(input, logger: logger)
    }

    /// Modifies the rules of a security group.
    @Sendable
    @inlinable
    public func modifySecurityGroupRules(_ input: ModifySecurityGroupRulesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifySecurityGroupRulesResult {
        try await self.client.execute(
            operation: "ModifySecurityGroupRules", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the rules of a security group.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupId: The ID of the security group.
    ///   - securityGroupRules: Information about the security group properties to update.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifySecurityGroupRules(
        dryRun: Bool? = nil,
        groupId: String? = nil,
        securityGroupRules: [SecurityGroupRuleUpdate]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifySecurityGroupRulesResult {
        let input = ModifySecurityGroupRulesRequest(
            dryRun: dryRun, 
            groupId: groupId, 
            securityGroupRules: securityGroupRules
        )
        return try await self.modifySecurityGroupRules(input, logger: logger)
    }

    /// Adds or removes permission settings for the specified snapshot. You may add or remove specified Amazon Web Services account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single operation. If you need to both add and remove account IDs for a snapshot, you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation. Encrypted snapshots and snapshots with Amazon Web Services Marketplace product codes cannot be made public. Snapshots encrypted with your default KMS key cannot be shared with other accounts. For more information about modifying snapshot permissions, see Share a snapshot in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func modifySnapshotAttribute(_ input: ModifySnapshotAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifySnapshotAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Adds or removes permission settings for the specified snapshot. You may add or remove specified Amazon Web Services account IDs from a snapshot's list of create volume permissions, but you cannot do both in a single operation. If you need to both add and remove account IDs for a snapshot, you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation. Encrypted snapshots and snapshots with Amazon Web Services Marketplace product codes cannot be made public. Snapshots encrypted with your default KMS key cannot be shared with other accounts. For more information about modifying snapshot permissions, see Share a snapshot in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - attribute: The snapshot attribute to modify. Only volume creation permissions can be modified.
    ///   - createVolumePermission: A JSON representation of the snapshot attribute modification.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupNames: The group to modify for the snapshot.
    ///   - operationType: The type of operation to perform to the attribute.
    ///   - snapshotId: The ID of the snapshot.
    ///   - userIds: The account ID to modify for the snapshot.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifySnapshotAttribute(
        attribute: SnapshotAttributeName? = nil,
        createVolumePermission: CreateVolumePermissionModifications? = nil,
        dryRun: Bool? = nil,
        groupNames: [String]? = nil,
        operationType: OperationType? = nil,
        snapshotId: String? = nil,
        userIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifySnapshotAttributeRequest(
            attribute: attribute, 
            createVolumePermission: createVolumePermission, 
            dryRun: dryRun, 
            groupNames: groupNames, 
            operationType: operationType, 
            snapshotId: snapshotId, 
            userIds: userIds
        )
        return try await self.modifySnapshotAttribute(input, logger: logger)
    }

    /// Archives an Amazon EBS snapshot. When you archive a snapshot, it is converted to a full  snapshot that includes all of the blocks of data that were written to the volume at the  time the snapshot was created, and moved from the standard tier to the archive  tier. For more information, see Archive Amazon EBS snapshots  in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func modifySnapshotTier(_ input: ModifySnapshotTierRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifySnapshotTierResult {
        try await self.client.execute(
            operation: "ModifySnapshotTier", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Archives an Amazon EBS snapshot. When you archive a snapshot, it is converted to a full  snapshot that includes all of the blocks of data that were written to the volume at the  time the snapshot was created, and moved from the standard tier to the archive  tier. For more information, see Archive Amazon EBS snapshots  in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - snapshotId: The ID of the snapshot.
    ///   - storageTier: The name of the storage tier. You must specify archive.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifySnapshotTier(
        dryRun: Bool? = nil,
        snapshotId: String? = nil,
        storageTier: TargetStorageTier? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifySnapshotTierResult {
        let input = ModifySnapshotTierRequest(
            dryRun: dryRun, 
            snapshotId: snapshotId, 
            storageTier: storageTier
        )
        return try await self.modifySnapshotTier(input, logger: logger)
    }

    /// Modifies the specified Spot Fleet request. You can only modify a Spot Fleet request of type maintain. While the Spot Fleet request is being modified, it is in the modifying state. To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is lowestPrice, the Spot Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is diversified, the Spot Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is capacityOptimized, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is lowestPrice, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is capacityOptimized, the Spot Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is diversified, the Spot Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually. If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.
    @Sendable
    @inlinable
    public func modifySpotFleetRequest(_ input: ModifySpotFleetRequestRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifySpotFleetRequestResponse {
        try await self.client.execute(
            operation: "ModifySpotFleetRequest", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified Spot Fleet request. You can only modify a Spot Fleet request of type maintain. While the Spot Fleet request is being modified, it is in the modifying state. To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is lowestPrice, the Spot Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is diversified, the Spot Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is capacityOptimized, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is lowestPrice, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is capacityOptimized, the Spot Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is diversified, the Spot Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually. If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.
    ///
    /// Parameters:
    ///   - context: Reserved.
    ///   - excessCapacityTerminationPolicy: Indicates whether running instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet. Supported only for fleets of type maintain.
    ///   - launchTemplateConfigs: The launch template and overrides. You can only use this parameter if you specified a launch template (LaunchTemplateConfigs) in your Spot Fleet request. If you specified LaunchSpecifications in your Spot Fleet request, then omit this parameter.
    ///   - onDemandTargetCapacity: The number of On-Demand Instances in the fleet.
    ///   - spotFleetRequestId: The ID of the Spot Fleet request.
    ///   - targetCapacity: The size of the fleet.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifySpotFleetRequest(
        context: String? = nil,
        excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil,
        launchTemplateConfigs: [LaunchTemplateConfig]? = nil,
        onDemandTargetCapacity: Int? = nil,
        spotFleetRequestId: String? = nil,
        targetCapacity: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifySpotFleetRequestResponse {
        let input = ModifySpotFleetRequestRequest(
            context: context, 
            excessCapacityTerminationPolicy: excessCapacityTerminationPolicy, 
            launchTemplateConfigs: launchTemplateConfigs, 
            onDemandTargetCapacity: onDemandTargetCapacity, 
            spotFleetRequestId: spotFleetRequestId, 
            targetCapacity: targetCapacity
        )
        return try await self.modifySpotFleetRequest(input, logger: logger)
    }

    /// Modifies a subnet attribute. You can only modify one attribute at a time. Use this action to modify subnets on Amazon Web Services Outposts.   To modify a subnet on an Outpost rack, set both MapCustomerOwnedIpOnLaunch and CustomerOwnedIpv4Pool. These two parameters act as a single attribute.   To modify a subnet on an Outpost server, set either EnableLniAtDeviceIndex or DisableLniAtDeviceIndex.   For more information about Amazon Web Services Outposts, see the following:    Outpost servers     Outpost racks
    @Sendable
    @inlinable
    public func modifySubnetAttribute(_ input: ModifySubnetAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifySubnetAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a subnet attribute. You can only modify one attribute at a time. Use this action to modify subnets on Amazon Web Services Outposts.   To modify a subnet on an Outpost rack, set both MapCustomerOwnedIpOnLaunch and CustomerOwnedIpv4Pool. These two parameters act as a single attribute.   To modify a subnet on an Outpost server, set either EnableLniAtDeviceIndex or DisableLniAtDeviceIndex.   For more information about Amazon Web Services Outposts, see the following:    Outpost servers     Outpost racks
    ///
    /// Parameters:
    ///   - assignIpv6AddressOnCreation: Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address).  If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version 2016-11-15 or later of the Amazon EC2 API.
    ///   - customerOwnedIpv4Pool: The customer-owned IPv4 address pool associated with the subnet. You must set this value when you specify true for MapCustomerOwnedIpOnLaunch.
    ///   - disableLniAtDeviceIndex:  Specify true to indicate that local network interfaces at the current  position should be disabled.
    ///   - enableDns64: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet  should return synthetic IPv6 addresses for IPv4-only destinations. You must first configure a NAT gateway in a public subnet (separate from the subnet  containing the IPv6-only workloads). For example, the subnet containing the NAT gateway  should have a 0.0.0.0/0 route pointing to the internet gateway. For more  information, see Configure DNS64 and NAT64 in the Amazon VPC User Guide.
    ///   - enableLniAtDeviceIndex:  Indicates the device position for local network interfaces in this subnet. For example,  1 indicates local network interfaces in this subnet are the secondary  network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    ///   - enableResourceNameDnsAAAARecordOnLaunch: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
    ///   - enableResourceNameDnsARecordOnLaunch: Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
    ///   - mapCustomerOwnedIpOnLaunch: Specify true to indicate that network interfaces  attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address. When this value is true, you must specify the customer-owned IP pool using CustomerOwnedIpv4Pool.
    ///   - mapPublicIpOnLaunch: Specify true to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address. Amazon Web Services charges for all public IPv4 addresses, including public IPv4 addresses
    ///   - privateDnsHostnameTypeOnLaunch: The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).
    ///   - subnetId: The ID of the subnet.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifySubnetAttribute(
        assignIpv6AddressOnCreation: AttributeBooleanValue? = nil,
        customerOwnedIpv4Pool: String? = nil,
        disableLniAtDeviceIndex: AttributeBooleanValue? = nil,
        enableDns64: AttributeBooleanValue? = nil,
        enableLniAtDeviceIndex: Int? = nil,
        enableResourceNameDnsAAAARecordOnLaunch: AttributeBooleanValue? = nil,
        enableResourceNameDnsARecordOnLaunch: AttributeBooleanValue? = nil,
        mapCustomerOwnedIpOnLaunch: AttributeBooleanValue? = nil,
        mapPublicIpOnLaunch: AttributeBooleanValue? = nil,
        privateDnsHostnameTypeOnLaunch: HostnameType? = nil,
        subnetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifySubnetAttributeRequest(
            assignIpv6AddressOnCreation: assignIpv6AddressOnCreation, 
            customerOwnedIpv4Pool: customerOwnedIpv4Pool, 
            disableLniAtDeviceIndex: disableLniAtDeviceIndex, 
            enableDns64: enableDns64, 
            enableLniAtDeviceIndex: enableLniAtDeviceIndex, 
            enableResourceNameDnsAAAARecordOnLaunch: enableResourceNameDnsAAAARecordOnLaunch, 
            enableResourceNameDnsARecordOnLaunch: enableResourceNameDnsARecordOnLaunch, 
            mapCustomerOwnedIpOnLaunch: mapCustomerOwnedIpOnLaunch, 
            mapPublicIpOnLaunch: mapPublicIpOnLaunch, 
            privateDnsHostnameTypeOnLaunch: privateDnsHostnameTypeOnLaunch, 
            subnetId: subnetId
        )
        return try await self.modifySubnetAttribute(input, logger: logger)
    }

    /// Allows or restricts mirroring network services. By default, Amazon DNS network services are not eligible for Traffic Mirror. Use AddNetworkServices to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored. When you no longer want to mirror network services, use RemoveNetworkServices to remove the network services from the Traffic Mirror filter.
    @Sendable
    @inlinable
    public func modifyTrafficMirrorFilterNetworkServices(_ input: ModifyTrafficMirrorFilterNetworkServicesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyTrafficMirrorFilterNetworkServicesResult {
        try await self.client.execute(
            operation: "ModifyTrafficMirrorFilterNetworkServices", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Allows or restricts mirroring network services. By default, Amazon DNS network services are not eligible for Traffic Mirror. Use AddNetworkServices to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored. When you no longer want to mirror network services, use RemoveNetworkServices to remove the network services from the Traffic Mirror filter.
    ///
    /// Parameters:
    ///   - addNetworkServices: The network service, for example Amazon DNS, that you want to mirror.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - removeNetworkServices: The network service, for example Amazon DNS, that you no longer want to mirror.
    ///   - trafficMirrorFilterId: The ID of the Traffic Mirror filter.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyTrafficMirrorFilterNetworkServices(
        addNetworkServices: [TrafficMirrorNetworkService]? = nil,
        dryRun: Bool? = nil,
        removeNetworkServices: [TrafficMirrorNetworkService]? = nil,
        trafficMirrorFilterId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyTrafficMirrorFilterNetworkServicesResult {
        let input = ModifyTrafficMirrorFilterNetworkServicesRequest(
            addNetworkServices: addNetworkServices, 
            dryRun: dryRun, 
            removeNetworkServices: removeNetworkServices, 
            trafficMirrorFilterId: trafficMirrorFilterId
        )
        return try await self.modifyTrafficMirrorFilterNetworkServices(input, logger: logger)
    }

    /// Modifies the specified Traffic Mirror rule.  DestinationCidrBlock and SourceCidrBlock must both be an IPv4 range or an IPv6 range.
    @Sendable
    @inlinable
    public func modifyTrafficMirrorFilterRule(_ input: ModifyTrafficMirrorFilterRuleRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyTrafficMirrorFilterRuleResult {
        try await self.client.execute(
            operation: "ModifyTrafficMirrorFilterRule", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified Traffic Mirror rule.  DestinationCidrBlock and SourceCidrBlock must both be an IPv4 range or an IPv6 range.
    ///
    /// Parameters:
    ///   - description: The description to assign to the Traffic Mirror rule.
    ///   - destinationCidrBlock: The destination CIDR block to assign to the Traffic Mirror rule.
    ///   - destinationPortRange: The destination ports that are associated with the Traffic Mirror rule.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - protocol: The protocol, for example TCP, to assign to the Traffic Mirror rule.
    ///   - removeFields: The properties that you want to remove from the Traffic Mirror filter rule. When you remove a property from a Traffic Mirror filter rule, the property is set to the default.
    ///   - ruleAction: The action to assign to the rule.
    ///   - ruleNumber: The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
    ///   - sourceCidrBlock: The source CIDR block to assign to the Traffic Mirror rule.
    ///   - sourcePortRange: The port range to assign to the Traffic Mirror rule.
    ///   - trafficDirection: The type of traffic to assign to the rule.
    ///   - trafficMirrorFilterRuleId: The ID of the Traffic Mirror rule.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyTrafficMirrorFilterRule(
        description: String? = nil,
        destinationCidrBlock: String? = nil,
        destinationPortRange: TrafficMirrorPortRangeRequest? = nil,
        dryRun: Bool? = nil,
        protocol: Int? = nil,
        removeFields: [TrafficMirrorFilterRuleField]? = nil,
        ruleAction: TrafficMirrorRuleAction? = nil,
        ruleNumber: Int? = nil,
        sourceCidrBlock: String? = nil,
        sourcePortRange: TrafficMirrorPortRangeRequest? = nil,
        trafficDirection: TrafficDirection? = nil,
        trafficMirrorFilterRuleId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyTrafficMirrorFilterRuleResult {
        let input = ModifyTrafficMirrorFilterRuleRequest(
            description: description, 
            destinationCidrBlock: destinationCidrBlock, 
            destinationPortRange: destinationPortRange, 
            dryRun: dryRun, 
            protocol: `protocol`, 
            removeFields: removeFields, 
            ruleAction: ruleAction, 
            ruleNumber: ruleNumber, 
            sourceCidrBlock: sourceCidrBlock, 
            sourcePortRange: sourcePortRange, 
            trafficDirection: trafficDirection, 
            trafficMirrorFilterRuleId: trafficMirrorFilterRuleId
        )
        return try await self.modifyTrafficMirrorFilterRule(input, logger: logger)
    }

    /// Modifies a Traffic Mirror session.
    @Sendable
    @inlinable
    public func modifyTrafficMirrorSession(_ input: ModifyTrafficMirrorSessionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyTrafficMirrorSessionResult {
        try await self.client.execute(
            operation: "ModifyTrafficMirrorSession", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a Traffic Mirror session.
    ///
    /// Parameters:
    ///   - description: The description to assign to the Traffic Mirror session.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - packetLength: The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet. For sessions with Network Load Balancer (NLB) traffic mirror targets, the default PacketLength will be set to 8500. Valid values are 1-8500. Setting a PacketLength greater than 8500 will result in an error response.
    ///   - removeFields: The properties that you want to remove from the Traffic Mirror session. When you remove a property from a Traffic Mirror session, the property is set to the default.
    ///   - sessionNumber: The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
    ///   - trafficMirrorFilterId: The ID of the Traffic Mirror filter.
    ///   - trafficMirrorSessionId: The ID of the Traffic Mirror session.
    ///   - trafficMirrorTargetId: The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.
    ///   - virtualNetworkId: The virtual network ID of the Traffic Mirror session.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyTrafficMirrorSession(
        description: String? = nil,
        dryRun: Bool? = nil,
        packetLength: Int? = nil,
        removeFields: [TrafficMirrorSessionField]? = nil,
        sessionNumber: Int? = nil,
        trafficMirrorFilterId: String? = nil,
        trafficMirrorSessionId: String? = nil,
        trafficMirrorTargetId: String? = nil,
        virtualNetworkId: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyTrafficMirrorSessionResult {
        let input = ModifyTrafficMirrorSessionRequest(
            description: description, 
            dryRun: dryRun, 
            packetLength: packetLength, 
            removeFields: removeFields, 
            sessionNumber: sessionNumber, 
            trafficMirrorFilterId: trafficMirrorFilterId, 
            trafficMirrorSessionId: trafficMirrorSessionId, 
            trafficMirrorTargetId: trafficMirrorTargetId, 
            virtualNetworkId: virtualNetworkId
        )
        return try await self.modifyTrafficMirrorSession(input, logger: logger)
    }

    /// Modifies the specified transit gateway. When you modify a transit gateway, the modified options are applied to new transit gateway attachments only. Your existing transit gateway attachments are not modified.
    @Sendable
    @inlinable
    public func modifyTransitGateway(_ input: ModifyTransitGatewayRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyTransitGatewayResult {
        try await self.client.execute(
            operation: "ModifyTransitGateway", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified transit gateway. When you modify a transit gateway, the modified options are applied to new transit gateway attachments only. Your existing transit gateway attachments are not modified.
    ///
    /// Parameters:
    ///   - description: The description for the transit gateway.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - options: The options to modify.
    ///   - transitGatewayId: The ID of the transit gateway.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyTransitGateway(
        description: String? = nil,
        dryRun: Bool? = nil,
        options: ModifyTransitGatewayOptions? = nil,
        transitGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyTransitGatewayResult {
        let input = ModifyTransitGatewayRequest(
            description: description, 
            dryRun: dryRun, 
            options: options, 
            transitGatewayId: transitGatewayId
        )
        return try await self.modifyTransitGateway(input, logger: logger)
    }

    /// Modifies a reference (route) to a prefix list in a specified transit gateway route table.
    @Sendable
    @inlinable
    public func modifyTransitGatewayPrefixListReference(_ input: ModifyTransitGatewayPrefixListReferenceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyTransitGatewayPrefixListReferenceResult {
        try await self.client.execute(
            operation: "ModifyTransitGatewayPrefixListReference", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a reference (route) to a prefix list in a specified transit gateway route table.
    ///
    /// Parameters:
    ///   - blackhole: Indicates whether to drop traffic that matches this route.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - prefixListId: The ID of the prefix list.
    ///   - transitGatewayAttachmentId: The ID of the attachment to which traffic is routed.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyTransitGatewayPrefixListReference(
        blackhole: Bool? = nil,
        dryRun: Bool? = nil,
        prefixListId: String? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyTransitGatewayPrefixListReferenceResult {
        let input = ModifyTransitGatewayPrefixListReferenceRequest(
            blackhole: blackhole, 
            dryRun: dryRun, 
            prefixListId: prefixListId, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.modifyTransitGatewayPrefixListReference(input, logger: logger)
    }

    /// Modifies the specified VPC attachment.
    @Sendable
    @inlinable
    public func modifyTransitGatewayVpcAttachment(_ input: ModifyTransitGatewayVpcAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyTransitGatewayVpcAttachmentResult {
        try await self.client.execute(
            operation: "ModifyTransitGatewayVpcAttachment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified VPC attachment.
    ///
    /// Parameters:
    ///   - addSubnetIds: The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - options: The new VPC attachment options.
    ///   - removeSubnetIds: The IDs of one or more subnets to remove.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyTransitGatewayVpcAttachment(
        addSubnetIds: [String]? = nil,
        dryRun: Bool? = nil,
        options: ModifyTransitGatewayVpcAttachmentRequestOptions? = nil,
        removeSubnetIds: [String]? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyTransitGatewayVpcAttachmentResult {
        let input = ModifyTransitGatewayVpcAttachmentRequest(
            addSubnetIds: addSubnetIds, 
            dryRun: dryRun, 
            options: options, 
            removeSubnetIds: removeSubnetIds, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.modifyTransitGatewayVpcAttachment(input, logger: logger)
    }

    /// Modifies the configuration of the specified Amazon Web Services Verified Access endpoint.
    @Sendable
    @inlinable
    public func modifyVerifiedAccessEndpoint(_ input: ModifyVerifiedAccessEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVerifiedAccessEndpointResult {
        try await self.client.execute(
            operation: "ModifyVerifiedAccessEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the configuration of the specified Amazon Web Services Verified Access endpoint.
    ///
    /// Parameters:
    ///   - cidrOptions: The CIDR options.
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - description: A description for the Verified Access endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - loadBalancerOptions: The load balancer details if creating the Verified Access endpoint as load-balancertype.
    ///   - networkInterfaceOptions: The network interface options.
    ///   - rdsOptions: The RDS options.
    ///   - verifiedAccessEndpointId: The ID of the Verified Access endpoint.
    ///   - verifiedAccessGroupId: The ID of the Verified Access group.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVerifiedAccessEndpoint(
        cidrOptions: ModifyVerifiedAccessEndpointCidrOptions? = nil,
        clientToken: String? = ModifyVerifiedAccessEndpointRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        loadBalancerOptions: ModifyVerifiedAccessEndpointLoadBalancerOptions? = nil,
        networkInterfaceOptions: ModifyVerifiedAccessEndpointEniOptions? = nil,
        rdsOptions: ModifyVerifiedAccessEndpointRdsOptions? = nil,
        verifiedAccessEndpointId: String? = nil,
        verifiedAccessGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVerifiedAccessEndpointResult {
        let input = ModifyVerifiedAccessEndpointRequest(
            cidrOptions: cidrOptions, 
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            loadBalancerOptions: loadBalancerOptions, 
            networkInterfaceOptions: networkInterfaceOptions, 
            rdsOptions: rdsOptions, 
            verifiedAccessEndpointId: verifiedAccessEndpointId, 
            verifiedAccessGroupId: verifiedAccessGroupId
        )
        return try await self.modifyVerifiedAccessEndpoint(input, logger: logger)
    }

    /// Modifies the specified Amazon Web Services Verified Access endpoint policy.
    @Sendable
    @inlinable
    public func modifyVerifiedAccessEndpointPolicy(_ input: ModifyVerifiedAccessEndpointPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVerifiedAccessEndpointPolicyResult {
        try await self.client.execute(
            operation: "ModifyVerifiedAccessEndpointPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified Amazon Web Services Verified Access endpoint policy.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - policyDocument: The Verified Access policy document.
    ///   - policyEnabled: The status of the Verified Access policy.
    ///   - sseSpecification: The options for server side encryption.
    ///   - verifiedAccessEndpointId: The ID of the Verified Access endpoint.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVerifiedAccessEndpointPolicy(
        clientToken: String? = ModifyVerifiedAccessEndpointPolicyRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        policyDocument: String? = nil,
        policyEnabled: Bool? = nil,
        sseSpecification: VerifiedAccessSseSpecificationRequest? = nil,
        verifiedAccessEndpointId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVerifiedAccessEndpointPolicyResult {
        let input = ModifyVerifiedAccessEndpointPolicyRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            policyDocument: policyDocument, 
            policyEnabled: policyEnabled, 
            sseSpecification: sseSpecification, 
            verifiedAccessEndpointId: verifiedAccessEndpointId
        )
        return try await self.modifyVerifiedAccessEndpointPolicy(input, logger: logger)
    }

    /// Modifies the specified Amazon Web Services Verified Access group configuration.
    @Sendable
    @inlinable
    public func modifyVerifiedAccessGroup(_ input: ModifyVerifiedAccessGroupRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVerifiedAccessGroupResult {
        try await self.client.execute(
            operation: "ModifyVerifiedAccessGroup", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified Amazon Web Services Verified Access group configuration.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - description: A description for the Verified Access group.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessGroupId: The ID of the Verified Access group.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVerifiedAccessGroup(
        clientToken: String? = ModifyVerifiedAccessGroupRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        verifiedAccessGroupId: String? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVerifiedAccessGroupResult {
        let input = ModifyVerifiedAccessGroupRequest(
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            verifiedAccessGroupId: verifiedAccessGroupId, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return try await self.modifyVerifiedAccessGroup(input, logger: logger)
    }

    /// Modifies the specified Amazon Web Services Verified Access group policy.
    @Sendable
    @inlinable
    public func modifyVerifiedAccessGroupPolicy(_ input: ModifyVerifiedAccessGroupPolicyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVerifiedAccessGroupPolicyResult {
        try await self.client.execute(
            operation: "ModifyVerifiedAccessGroupPolicy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified Amazon Web Services Verified Access group policy.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - policyDocument: The Verified Access policy document.
    ///   - policyEnabled: The status of the Verified Access policy.
    ///   - sseSpecification: The options for server side encryption.
    ///   - verifiedAccessGroupId: The ID of the Verified Access group.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVerifiedAccessGroupPolicy(
        clientToken: String? = ModifyVerifiedAccessGroupPolicyRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        policyDocument: String? = nil,
        policyEnabled: Bool? = nil,
        sseSpecification: VerifiedAccessSseSpecificationRequest? = nil,
        verifiedAccessGroupId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVerifiedAccessGroupPolicyResult {
        let input = ModifyVerifiedAccessGroupPolicyRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            policyDocument: policyDocument, 
            policyEnabled: policyEnabled, 
            sseSpecification: sseSpecification, 
            verifiedAccessGroupId: verifiedAccessGroupId
        )
        return try await self.modifyVerifiedAccessGroupPolicy(input, logger: logger)
    }

    /// Modifies the configuration of the specified Amazon Web Services Verified Access instance.
    @Sendable
    @inlinable
    public func modifyVerifiedAccessInstance(_ input: ModifyVerifiedAccessInstanceRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVerifiedAccessInstanceResult {
        try await self.client.execute(
            operation: "ModifyVerifiedAccessInstance", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the configuration of the specified Amazon Web Services Verified Access instance.
    ///
    /// Parameters:
    ///   - cidrEndpointsCustomSubDomain: The custom subdomain.
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - description: A description for the Verified Access instance.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVerifiedAccessInstance(
        cidrEndpointsCustomSubDomain: String? = nil,
        clientToken: String? = ModifyVerifiedAccessInstanceRequest.idempotencyToken(),
        description: String? = nil,
        dryRun: Bool? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVerifiedAccessInstanceResult {
        let input = ModifyVerifiedAccessInstanceRequest(
            cidrEndpointsCustomSubDomain: cidrEndpointsCustomSubDomain, 
            clientToken: clientToken, 
            description: description, 
            dryRun: dryRun, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return try await self.modifyVerifiedAccessInstance(input, logger: logger)
    }

    /// Modifies the logging configuration for the specified Amazon Web Services Verified Access instance.
    @Sendable
    @inlinable
    public func modifyVerifiedAccessInstanceLoggingConfiguration(_ input: ModifyVerifiedAccessInstanceLoggingConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVerifiedAccessInstanceLoggingConfigurationResult {
        try await self.client.execute(
            operation: "ModifyVerifiedAccessInstanceLoggingConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the logging configuration for the specified Amazon Web Services Verified Access instance.
    ///
    /// Parameters:
    ///   - accessLogs: The configuration options for Verified Access instances.
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVerifiedAccessInstanceLoggingConfiguration(
        accessLogs: VerifiedAccessLogOptions? = nil,
        clientToken: String? = ModifyVerifiedAccessInstanceLoggingConfigurationRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVerifiedAccessInstanceLoggingConfigurationResult {
        let input = ModifyVerifiedAccessInstanceLoggingConfigurationRequest(
            accessLogs: accessLogs, 
            clientToken: clientToken, 
            dryRun: dryRun, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return try await self.modifyVerifiedAccessInstanceLoggingConfiguration(input, logger: logger)
    }

    /// Modifies the configuration of the specified Amazon Web Services Verified Access trust provider.
    @Sendable
    @inlinable
    public func modifyVerifiedAccessTrustProvider(_ input: ModifyVerifiedAccessTrustProviderRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVerifiedAccessTrustProviderResult {
        try await self.client.execute(
            operation: "ModifyVerifiedAccessTrustProvider", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the configuration of the specified Amazon Web Services Verified Access trust provider.
    ///
    /// Parameters:
    ///   - clientToken: A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring idempotency.
    ///   - description: A description for the Verified Access trust provider.
    ///   - deviceOptions: The options for a device-based trust provider. This parameter is required when the provider type is device.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - nativeApplicationOidcOptions: The OpenID Connect (OIDC) options.
    ///   - oidcOptions: The options for an OpenID Connect-compatible user-identity trust provider.
    ///   - sseSpecification: The options for server side encryption.
    ///   - verifiedAccessTrustProviderId: The ID of the Verified Access trust provider.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVerifiedAccessTrustProvider(
        clientToken: String? = ModifyVerifiedAccessTrustProviderRequest.idempotencyToken(),
        description: String? = nil,
        deviceOptions: ModifyVerifiedAccessTrustProviderDeviceOptions? = nil,
        dryRun: Bool? = nil,
        nativeApplicationOidcOptions: ModifyVerifiedAccessNativeApplicationOidcOptions? = nil,
        oidcOptions: ModifyVerifiedAccessTrustProviderOidcOptions? = nil,
        sseSpecification: VerifiedAccessSseSpecificationRequest? = nil,
        verifiedAccessTrustProviderId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVerifiedAccessTrustProviderResult {
        let input = ModifyVerifiedAccessTrustProviderRequest(
            clientToken: clientToken, 
            description: description, 
            deviceOptions: deviceOptions, 
            dryRun: dryRun, 
            nativeApplicationOidcOptions: nativeApplicationOidcOptions, 
            oidcOptions: oidcOptions, 
            sseSpecification: sseSpecification, 
            verifiedAccessTrustProviderId: verifiedAccessTrustProviderId
        )
        return try await self.modifyVerifiedAccessTrustProvider(input, logger: logger)
    }

    /// You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you might be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying EBS volumes, see Amazon EBS Elastic Volumes  in the Amazon EBS User Guide. When you complete a resize operation on your volume, you need to extend the volume's file-system size to take advantage of the new storage capacity. For more information, see Extend the file system. For more information, see Monitor the progress of volume modifications in the Amazon EBS User Guide. With previous-generation instance types, resizing an EBS volume might require detaching and reattaching the volume or stopping and restarting the instance. After modifying a volume, you must wait at least six hours and ensure that the volume  is in the in-use or available state before you can modify the same  volume. This is sometimes referred to as a cooldown period.
    @Sendable
    @inlinable
    public func modifyVolume(_ input: ModifyVolumeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVolumeResult {
        try await self.client.execute(
            operation: "ModifyVolume", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you might be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying EBS volumes, see Amazon EBS Elastic Volumes  in the Amazon EBS User Guide. When you complete a resize operation on your volume, you need to extend the volume's file-system size to take advantage of the new storage capacity. For more information, see Extend the file system. For more information, see Monitor the progress of volume modifications in the Amazon EBS User Guide. With previous-generation instance types, resizing an EBS volume might require detaching and reattaching the volume or stopping and restarting the instance. After modifying a volume, you must wait at least six hours and ensure that the volume  is in the in-use or available state before you can modify the same  volume. This is sometimes referred to as a cooldown period.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - iops: The target IOPS rate of the volume. This parameter is valid only for gp3, io1, and io2 volumes. The following are the supported values for each volume type:    gp3: 3,000 - 16,000 IOPS    io1: 100 - 64,000 IOPS    io2: 100 - 256,000 IOPS   For io2 volumes, you can achieve up to 256,000 IOPS on
    ///   - multiAttachEnabled: Specifies whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the
    ///   - size: The target size of the volume, in GiB. The target volume size must be greater than or equal to the existing size of the volume. The following are the supported volumes sizes for each volume type:    gp2 and gp3: 1 - 16,384 GiB    io1: 4 - 16,384 GiB    io2: 4 - 65,536 GiB    st1 and sc1: 125 - 16,384 GiB    standard: 1 - 1024 GiB   Default: The existing size is retained.
    ///   - throughput: The target throughput of the volume, in MiB/s. This parameter is valid only for gp3 volumes.  The maximum value is 1,000. Default: The existing value is retained if the source and target volume type is gp3. Otherwise, the default value is 125. Valid Range: Minimum value of 125. Maximum value of 1000.
    ///   - volumeId: The ID of the volume.
    ///   - volumeType: The target EBS volume type of the volume. For more information, see Amazon EBS volume types in the Amazon EBS User Guide. Default: The existing type is retained.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVolume(
        dryRun: Bool? = nil,
        iops: Int? = nil,
        multiAttachEnabled: Bool? = nil,
        size: Int? = nil,
        throughput: Int? = nil,
        volumeId: String? = nil,
        volumeType: VolumeType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVolumeResult {
        let input = ModifyVolumeRequest(
            dryRun: dryRun, 
            iops: iops, 
            multiAttachEnabled: multiAttachEnabled, 
            size: size, 
            throughput: throughput, 
            volumeId: volumeId, 
            volumeType: volumeType
        )
        return try await self.modifyVolume(input, logger: logger)
    }

    /// Modifies a volume attribute. By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume. You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.
    @Sendable
    @inlinable
    public func modifyVolumeAttribute(_ input: ModifyVolumeAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifyVolumeAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a volume attribute. By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume. You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.
    ///
    /// Parameters:
    ///   - autoEnableIO: Indicates whether the volume should be auto-enabled for I/O operations.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - volumeId: The ID of the volume.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVolumeAttribute(
        autoEnableIO: AttributeBooleanValue? = nil,
        dryRun: Bool? = nil,
        volumeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifyVolumeAttributeRequest(
            autoEnableIO: autoEnableIO, 
            dryRun: dryRun, 
            volumeId: volumeId
        )
        return try await self.modifyVolumeAttribute(input, logger: logger)
    }

    /// Modifies the specified attribute of the specified VPC.
    @Sendable
    @inlinable
    public func modifyVpcAttribute(_ input: ModifyVpcAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ModifyVpcAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the specified attribute of the specified VPC.
    ///
    /// Parameters:
    ///   - enableDnsHostnames: Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.
    ///   - enableDnsSupport: Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to
    ///   - enableNetworkAddressUsageMetrics: Indicates whether Network Address Usage metrics are enabled for your VPC.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcAttribute(
        enableDnsHostnames: AttributeBooleanValue? = nil,
        enableDnsSupport: AttributeBooleanValue? = nil,
        enableNetworkAddressUsageMetrics: AttributeBooleanValue? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ModifyVpcAttributeRequest(
            enableDnsHostnames: enableDnsHostnames, 
            enableDnsSupport: enableDnsSupport, 
            enableNetworkAddressUsageMetrics: enableNetworkAddressUsageMetrics, 
            vpcId: vpcId
        )
        return try await self.modifyVpcAttribute(input, logger: logger)
    }

    /// Modify VPC Block Public Access (BPA) exclusions. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on.
    @Sendable
    @inlinable
    public func modifyVpcBlockPublicAccessExclusion(_ input: ModifyVpcBlockPublicAccessExclusionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpcBlockPublicAccessExclusionResult {
        try await self.client.execute(
            operation: "ModifyVpcBlockPublicAccessExclusion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify VPC Block Public Access (BPA) exclusions. A VPC BPA exclusion is a mode that can be applied to a single VPC or subnet that exempts it from the account’s BPA mode and will allow bidirectional or egress-only access. You can create BPA exclusions for VPCs and subnets even when BPA is not enabled on the account to ensure that there is no traffic disruption to the exclusions when VPC BPA is turned on.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - exclusionId: The ID of an exclusion.
    ///   - internetGatewayExclusionMode: The exclusion mode for internet gateway traffic.    allow-bidirectional: Allow all internet traffic to and from the excluded VPCs and subnets.    allow-egress: Allow outbound internet traffic from the excluded VPCs and subnets. Block inbound internet traffic to the excluded VPCs and subnets. Only applies when VPC Block Public Access is set to Bidirectional.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcBlockPublicAccessExclusion(
        dryRun: Bool? = nil,
        exclusionId: String? = nil,
        internetGatewayExclusionMode: InternetGatewayExclusionMode? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpcBlockPublicAccessExclusionResult {
        let input = ModifyVpcBlockPublicAccessExclusionRequest(
            dryRun: dryRun, 
            exclusionId: exclusionId, 
            internetGatewayExclusionMode: internetGatewayExclusionMode
        )
        return try await self.modifyVpcBlockPublicAccessExclusion(input, logger: logger)
    }

    /// Modify VPC Block Public Access (BPA) options. VPC Block Public Access (BPA) enables you to block resources in VPCs and subnets that you own in a Region from reaching or being reached from the internet through internet gateways and egress-only internet gateways. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func modifyVpcBlockPublicAccessOptions(_ input: ModifyVpcBlockPublicAccessOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpcBlockPublicAccessOptionsResult {
        try await self.client.execute(
            operation: "ModifyVpcBlockPublicAccessOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modify VPC Block Public Access (BPA) options. VPC Block Public Access (BPA) enables you to block resources in VPCs and subnets that you own in a Region from reaching or being reached from the internet through internet gateways and egress-only internet gateways. To learn more about VPC BPA, see Block public access to VPCs and subnets in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - internetGatewayBlockMode: The mode of VPC BPA.    off: VPC BPA is not enabled and traffic is allowed to and from internet gateways and egress-only internet gateways in this Region.    block-bidirectional: Block all traffic to and from internet gateways and egress-only internet gateways in this Region (except for excluded VPCs and subnets).    block-ingress: Block all internet traffic to the VPCs in this Region (except for VPCs or subnets which are excluded). Only traffic to and from NAT gateways and egress-only internet gateways is allowed because these gateways only allow outbound connections to be established.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcBlockPublicAccessOptions(
        dryRun: Bool? = nil,
        internetGatewayBlockMode: InternetGatewayBlockMode? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpcBlockPublicAccessOptionsResult {
        let input = ModifyVpcBlockPublicAccessOptionsRequest(
            dryRun: dryRun, 
            internetGatewayBlockMode: internetGatewayBlockMode
        )
        return try await self.modifyVpcBlockPublicAccessOptions(input, logger: logger)
    }

    /// Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface, gateway, or Gateway Load Balancer). For more information,  see the Amazon Web Services PrivateLink  Guide.
    @Sendable
    @inlinable
    public func modifyVpcEndpoint(_ input: ModifyVpcEndpointRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpcEndpointResult {
        try await self.client.execute(
            operation: "ModifyVpcEndpoint", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface, gateway, or Gateway Load Balancer). For more information,  see the Amazon Web Services PrivateLink  Guide.
    ///
    /// Parameters:
    ///   - addRouteTableIds: (Gateway endpoint) The IDs of the route tables to associate with the endpoint.
    ///   - addSecurityGroupIds: (Interface endpoint) The IDs of the security groups to associate with the endpoint network interfaces.
    ///   - addSubnetIds: (Interface and Gateway Load Balancer endpoints) The IDs of the subnets in which to serve the endpoint.  For a Gateway Load Balancer endpoint, you can specify only one subnet.
    ///   - dnsOptions: The DNS options for the endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipAddressType: The IP address type for the endpoint.
    ///   - policyDocument: (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format.
    ///   - privateDnsEnabled: (Interface endpoint) Indicates whether a private hosted zone is associated with the VPC.
    ///   - removeRouteTableIds: (Gateway endpoint) The IDs of the route tables to disassociate from the endpoint.
    ///   - removeSecurityGroupIds: (Interface endpoint) The IDs of the security groups to disassociate from the endpoint network interfaces.
    ///   - removeSubnetIds: (Interface endpoint) The IDs of the subnets from which to remove the endpoint.
    ///   - resetPolicy: (Gateway endpoint) Specify true to reset the policy document to the default policy. The default policy allows full access to the service.
    ///   - subnetConfigurations: The subnet configurations for the endpoint.
    ///   - vpcEndpointId: The ID of the endpoint.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcEndpoint(
        addRouteTableIds: [String]? = nil,
        addSecurityGroupIds: [String]? = nil,
        addSubnetIds: [String]? = nil,
        dnsOptions: DnsOptionsSpecification? = nil,
        dryRun: Bool? = nil,
        ipAddressType: IpAddressType? = nil,
        policyDocument: String? = nil,
        privateDnsEnabled: Bool? = nil,
        removeRouteTableIds: [String]? = nil,
        removeSecurityGroupIds: [String]? = nil,
        removeSubnetIds: [String]? = nil,
        resetPolicy: Bool? = nil,
        subnetConfigurations: [SubnetConfiguration]? = nil,
        vpcEndpointId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpcEndpointResult {
        let input = ModifyVpcEndpointRequest(
            addRouteTableIds: addRouteTableIds, 
            addSecurityGroupIds: addSecurityGroupIds, 
            addSubnetIds: addSubnetIds, 
            dnsOptions: dnsOptions, 
            dryRun: dryRun, 
            ipAddressType: ipAddressType, 
            policyDocument: policyDocument, 
            privateDnsEnabled: privateDnsEnabled, 
            removeRouteTableIds: removeRouteTableIds, 
            removeSecurityGroupIds: removeSecurityGroupIds, 
            removeSubnetIds: removeSubnetIds, 
            resetPolicy: resetPolicy, 
            subnetConfigurations: subnetConfigurations, 
            vpcEndpointId: vpcEndpointId
        )
        return try await self.modifyVpcEndpoint(input, logger: logger)
    }

    /// Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified.
    @Sendable
    @inlinable
    public func modifyVpcEndpointConnectionNotification(_ input: ModifyVpcEndpointConnectionNotificationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpcEndpointConnectionNotificationResult {
        try await self.client.execute(
            operation: "ModifyVpcEndpointConnectionNotification", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified.
    ///
    /// Parameters:
    ///   - connectionEvents: The events for the endpoint. Valid values are Accept, Connect, Delete, and Reject.
    ///   - connectionNotificationArn: The ARN for the SNS topic for the notification.
    ///   - connectionNotificationId: The ID of the notification.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcEndpointConnectionNotification(
        connectionEvents: [String]? = nil,
        connectionNotificationArn: String? = nil,
        connectionNotificationId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpcEndpointConnectionNotificationResult {
        let input = ModifyVpcEndpointConnectionNotificationRequest(
            connectionEvents: connectionEvents, 
            connectionNotificationArn: connectionNotificationArn, 
            connectionNotificationId: connectionNotificationId, 
            dryRun: dryRun
        )
        return try await self.modifyVpcEndpointConnectionNotification(input, logger: logger)
    }

    /// Modifies the attributes of the specified VPC endpoint service configuration. If you set or modify the private DNS name, you must prove that you own the private DNS domain name.
    @Sendable
    @inlinable
    public func modifyVpcEndpointServiceConfiguration(_ input: ModifyVpcEndpointServiceConfigurationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpcEndpointServiceConfigurationResult {
        try await self.client.execute(
            operation: "ModifyVpcEndpointServiceConfiguration", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the attributes of the specified VPC endpoint service configuration. If you set or modify the private DNS name, you must prove that you own the private DNS domain name.
    ///
    /// Parameters:
    ///   - acceptanceRequired: Indicates whether requests to create an endpoint to the service must be accepted.
    ///   - addGatewayLoadBalancerArns: The Amazon Resource Names (ARNs) of Gateway Load Balancers to add to the service configuration.
    ///   - addNetworkLoadBalancerArns: The Amazon Resource Names (ARNs) of Network Load Balancers to add to the service configuration.
    ///   - addSupportedIpAddressTypes: The IP address types to add to the service configuration.
    ///   - addSupportedRegions: The supported Regions to add to the service configuration.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - privateDnsName: (Interface endpoint configuration) The private DNS name to assign to the endpoint service.
    ///   - removeGatewayLoadBalancerArns: The Amazon Resource Names (ARNs) of Gateway Load Balancers to remove from the service configuration.
    ///   - removeNetworkLoadBalancerArns: The Amazon Resource Names (ARNs) of Network Load Balancers to remove from the service configuration.
    ///   - removePrivateDnsName: (Interface endpoint configuration) Removes the private DNS name of the endpoint service.
    ///   - removeSupportedIpAddressTypes: The IP address types to remove from the service configuration.
    ///   - removeSupportedRegions: The supported Regions to remove from the service configuration.
    ///   - serviceId: The ID of the service.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcEndpointServiceConfiguration(
        acceptanceRequired: Bool? = nil,
        addGatewayLoadBalancerArns: [String]? = nil,
        addNetworkLoadBalancerArns: [String]? = nil,
        addSupportedIpAddressTypes: [String]? = nil,
        addSupportedRegions: [String]? = nil,
        dryRun: Bool? = nil,
        privateDnsName: String? = nil,
        removeGatewayLoadBalancerArns: [String]? = nil,
        removeNetworkLoadBalancerArns: [String]? = nil,
        removePrivateDnsName: Bool? = nil,
        removeSupportedIpAddressTypes: [String]? = nil,
        removeSupportedRegions: [String]? = nil,
        serviceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpcEndpointServiceConfigurationResult {
        let input = ModifyVpcEndpointServiceConfigurationRequest(
            acceptanceRequired: acceptanceRequired, 
            addGatewayLoadBalancerArns: addGatewayLoadBalancerArns, 
            addNetworkLoadBalancerArns: addNetworkLoadBalancerArns, 
            addSupportedIpAddressTypes: addSupportedIpAddressTypes, 
            addSupportedRegions: addSupportedRegions, 
            dryRun: dryRun, 
            privateDnsName: privateDnsName, 
            removeGatewayLoadBalancerArns: removeGatewayLoadBalancerArns, 
            removeNetworkLoadBalancerArns: removeNetworkLoadBalancerArns, 
            removePrivateDnsName: removePrivateDnsName, 
            removeSupportedIpAddressTypes: removeSupportedIpAddressTypes, 
            removeSupportedRegions: removeSupportedRegions, 
            serviceId: serviceId
        )
        return try await self.modifyVpcEndpointServiceConfiguration(input, logger: logger)
    }

    /// Modifies the payer responsibility for your VPC endpoint service.
    @Sendable
    @inlinable
    public func modifyVpcEndpointServicePayerResponsibility(_ input: ModifyVpcEndpointServicePayerResponsibilityRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpcEndpointServicePayerResponsibilityResult {
        try await self.client.execute(
            operation: "ModifyVpcEndpointServicePayerResponsibility", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the payer responsibility for your VPC endpoint service.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - payerResponsibility: The entity that is responsible for the endpoint costs. The default is the endpoint owner. If you set the payer responsibility to the service owner, you cannot set it back to the endpoint owner.
    ///   - serviceId: The ID of the service.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcEndpointServicePayerResponsibility(
        dryRun: Bool? = nil,
        payerResponsibility: PayerResponsibility? = nil,
        serviceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpcEndpointServicePayerResponsibilityResult {
        let input = ModifyVpcEndpointServicePayerResponsibilityRequest(
            dryRun: dryRun, 
            payerResponsibility: payerResponsibility, 
            serviceId: serviceId
        )
        return try await self.modifyVpcEndpointServicePayerResponsibility(input, logger: logger)
    }

    /// Modifies the permissions for your VPC endpoint service. You can add or remove permissions for service consumers (Amazon Web Services accounts, users, and IAM roles) to connect to your endpoint service. If you grant permissions to all principals, the service is public. Any users who know the name of a
    /// 	        public service can send a request to attach an endpoint. If the service does not require manual approval,
    /// 	        attachments are automatically approved.
    @Sendable
    @inlinable
    public func modifyVpcEndpointServicePermissions(_ input: ModifyVpcEndpointServicePermissionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpcEndpointServicePermissionsResult {
        try await self.client.execute(
            operation: "ModifyVpcEndpointServicePermissions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the permissions for your VPC endpoint service. You can add or remove permissions for service consumers (Amazon Web Services accounts, users, and IAM roles) to connect to your endpoint service. If you grant permissions to all principals, the service is public. Any users who know the name of a
    /// 	        public service can send a request to attach an endpoint. If the service does not require manual approval,
    /// 	        attachments are automatically approved.
    ///
    /// Parameters:
    ///   - addAllowedPrincipals: The Amazon Resource Names (ARN) of the principals.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - removeAllowedPrincipals: The Amazon Resource Names (ARN) of the principals.
    ///   - serviceId: The ID of the service.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcEndpointServicePermissions(
        addAllowedPrincipals: [String]? = nil,
        dryRun: Bool? = nil,
        removeAllowedPrincipals: [String]? = nil,
        serviceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpcEndpointServicePermissionsResult {
        let input = ModifyVpcEndpointServicePermissionsRequest(
            addAllowedPrincipals: addAllowedPrincipals, 
            dryRun: dryRun, 
            removeAllowedPrincipals: removeAllowedPrincipals, 
            serviceId: serviceId
        )
        return try await self.modifyVpcEndpointServicePermissions(input, logger: logger)
    }

    /// Modifies the VPC peering connection options on one side of a VPC peering connection. If the peered VPCs are in the same Amazon Web Services account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different Amazon Web Services accounts or different Regions. For peered VPCs in different Amazon Web Services accounts, each Amazon Web Services account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the DescribeVpcPeeringConnections command.
    @Sendable
    @inlinable
    public func modifyVpcPeeringConnectionOptions(_ input: ModifyVpcPeeringConnectionOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpcPeeringConnectionOptionsResult {
        try await self.client.execute(
            operation: "ModifyVpcPeeringConnectionOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the VPC peering connection options on one side of a VPC peering connection. If the peered VPCs are in the same Amazon Web Services account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different Amazon Web Services accounts or different Regions. For peered VPCs in different Amazon Web Services accounts, each Amazon Web Services account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the DescribeVpcPeeringConnections command.
    ///
    /// Parameters:
    ///   - accepterPeeringConnectionOptions: The VPC peering connection options for the accepter VPC.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - requesterPeeringConnectionOptions: The VPC peering connection options for the requester VPC.
    ///   - vpcPeeringConnectionId: The ID of the VPC peering connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcPeeringConnectionOptions(
        accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil,
        dryRun: Bool? = nil,
        requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil,
        vpcPeeringConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpcPeeringConnectionOptionsResult {
        let input = ModifyVpcPeeringConnectionOptionsRequest(
            accepterPeeringConnectionOptions: accepterPeeringConnectionOptions, 
            dryRun: dryRun, 
            requesterPeeringConnectionOptions: requesterPeeringConnectionOptions, 
            vpcPeeringConnectionId: vpcPeeringConnectionId
        )
        return try await self.modifyVpcPeeringConnectionOptions(input, logger: logger)
    }

    /// Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to default only. You cannot change the instance tenancy attribute to dedicated. After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of default, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected. For more information, see Dedicated Instances in the
    /// 				Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func modifyVpcTenancy(_ input: ModifyVpcTenancyRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpcTenancyResult {
        try await self.client.execute(
            operation: "ModifyVpcTenancy", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to default only. You cannot change the instance tenancy attribute to dedicated. After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of default, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected. For more information, see Dedicated Instances in the
    /// 				Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceTenancy: The instance tenancy attribute for the VPC.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpcTenancy(
        dryRun: Bool? = nil,
        instanceTenancy: VpcTenancy? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpcTenancyResult {
        let input = ModifyVpcTenancyRequest(
            dryRun: dryRun, 
            instanceTenancy: instanceTenancy, 
            vpcId: vpcId
        )
        return try await self.modifyVpcTenancy(input, logger: logger)
    }

    /// Modifies the customer gateway or the target gateway of an Amazon Web Services Site-to-Site VPN connection. To modify the target gateway, the following migration options are available:   An existing virtual private gateway to a new virtual private gateway   An existing virtual private gateway to a transit gateway   An existing transit gateway to a new transit gateway   An existing transit gateway to a virtual private gateway   Before you perform the migration to the new gateway, you must configure the new gateway. Use CreateVpnGateway to create a virtual private gateway, or CreateTransitGateway to create a transit gateway. This step is required when you migrate from a virtual private gateway with static routes to a transit gateway.  You must delete the static routes before you migrate to the new gateway. Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete. After you migrate to the new gateway, you might need to modify your VPC route table. Use CreateRoute and DeleteRoute to make the changes described in Update VPC route tables in the Amazon Web Services Site-to-Site VPN User Guide. When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the Amazon Web Services Site-to-Site VPN connection. Use CreateTransitGatewayRoute to add the routes. If you deleted VPN static routes, you must add the static routes to the transit gateway route table. After you perform this operation, the VPN endpoint's IP addresses on the Amazon Web Services side and the tunnel options remain intact. Your Amazon Web Services Site-to-Site VPN connection will be temporarily unavailable for a brief period while we provision the new endpoints.
    @Sendable
    @inlinable
    public func modifyVpnConnection(_ input: ModifyVpnConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpnConnectionResult {
        try await self.client.execute(
            operation: "ModifyVpnConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the customer gateway or the target gateway of an Amazon Web Services Site-to-Site VPN connection. To modify the target gateway, the following migration options are available:   An existing virtual private gateway to a new virtual private gateway   An existing virtual private gateway to a transit gateway   An existing transit gateway to a new transit gateway   An existing transit gateway to a virtual private gateway   Before you perform the migration to the new gateway, you must configure the new gateway. Use CreateVpnGateway to create a virtual private gateway, or CreateTransitGateway to create a transit gateway. This step is required when you migrate from a virtual private gateway with static routes to a transit gateway.  You must delete the static routes before you migrate to the new gateway. Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete. After you migrate to the new gateway, you might need to modify your VPC route table. Use CreateRoute and DeleteRoute to make the changes described in Update VPC route tables in the Amazon Web Services Site-to-Site VPN User Guide. When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the Amazon Web Services Site-to-Site VPN connection. Use CreateTransitGatewayRoute to add the routes. If you deleted VPN static routes, you must add the static routes to the transit gateway route table. After you perform this operation, the VPN endpoint's IP addresses on the Amazon Web Services side and the tunnel options remain intact. Your Amazon Web Services Site-to-Site VPN connection will be temporarily unavailable for a brief period while we provision the new endpoints.
    ///
    /// Parameters:
    ///   - customerGatewayId: The ID of the customer gateway at your end of the VPN connection.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayId: The ID of the transit gateway.
    ///   - vpnConnectionId: The ID of the VPN connection.
    ///   - vpnGatewayId: The ID of the virtual private gateway at the Amazon Web Services side of the VPN connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpnConnection(
        customerGatewayId: String? = nil,
        dryRun: Bool? = nil,
        transitGatewayId: String? = nil,
        vpnConnectionId: String? = nil,
        vpnGatewayId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpnConnectionResult {
        let input = ModifyVpnConnectionRequest(
            customerGatewayId: customerGatewayId, 
            dryRun: dryRun, 
            transitGatewayId: transitGatewayId, 
            vpnConnectionId: vpnConnectionId, 
            vpnGatewayId: vpnGatewayId
        )
        return try await self.modifyVpnConnection(input, logger: logger)
    }

    /// Modifies the connection options for your Site-to-Site VPN connection. When you modify the VPN connection options, the VPN endpoint IP addresses on the Amazon Web Services side do not change, and the tunnel options do not change. Your VPN connection will be temporarily unavailable for a brief period while the VPN connection is updated.
    @Sendable
    @inlinable
    public func modifyVpnConnectionOptions(_ input: ModifyVpnConnectionOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpnConnectionOptionsResult {
        try await self.client.execute(
            operation: "ModifyVpnConnectionOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the connection options for your Site-to-Site VPN connection. When you modify the VPN connection options, the VPN endpoint IP addresses on the Amazon Web Services side do not change, and the tunnel options do not change. Your VPN connection will be temporarily unavailable for a brief period while the VPN connection is updated.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - localIpv4NetworkCidr: The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0
    ///   - localIpv6NetworkCidr: The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0
    ///   - remoteIpv4NetworkCidr: The IPv4 CIDR on the Amazon Web Services side of the VPN connection. Default: 0.0.0.0/0
    ///   - remoteIpv6NetworkCidr: The IPv6 CIDR on the Amazon Web Services side of the VPN connection. Default: ::/0
    ///   - vpnConnectionId: The ID of the Site-to-Site VPN connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpnConnectionOptions(
        dryRun: Bool? = nil,
        localIpv4NetworkCidr: String? = nil,
        localIpv6NetworkCidr: String? = nil,
        remoteIpv4NetworkCidr: String? = nil,
        remoteIpv6NetworkCidr: String? = nil,
        vpnConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpnConnectionOptionsResult {
        let input = ModifyVpnConnectionOptionsRequest(
            dryRun: dryRun, 
            localIpv4NetworkCidr: localIpv4NetworkCidr, 
            localIpv6NetworkCidr: localIpv6NetworkCidr, 
            remoteIpv4NetworkCidr: remoteIpv4NetworkCidr, 
            remoteIpv6NetworkCidr: remoteIpv6NetworkCidr, 
            vpnConnectionId: vpnConnectionId
        )
        return try await self.modifyVpnConnectionOptions(input, logger: logger)
    }

    /// Modifies the VPN tunnel endpoint certificate.
    @Sendable
    @inlinable
    public func modifyVpnTunnelCertificate(_ input: ModifyVpnTunnelCertificateRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpnTunnelCertificateResult {
        try await self.client.execute(
            operation: "ModifyVpnTunnelCertificate", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the VPN tunnel endpoint certificate.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - vpnConnectionId: The ID of the Amazon Web Services Site-to-Site VPN connection.
    ///   - vpnTunnelOutsideIpAddress: The external IP address of the VPN tunnel.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpnTunnelCertificate(
        dryRun: Bool? = nil,
        vpnConnectionId: String? = nil,
        vpnTunnelOutsideIpAddress: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpnTunnelCertificateResult {
        let input = ModifyVpnTunnelCertificateRequest(
            dryRun: dryRun, 
            vpnConnectionId: vpnConnectionId, 
            vpnTunnelOutsideIpAddress: vpnTunnelOutsideIpAddress
        )
        return try await self.modifyVpnTunnelCertificate(input, logger: logger)
    }

    /// Modifies the options for a VPN tunnel in an Amazon Web Services Site-to-Site VPN connection. You can modify multiple options for a tunnel in a single request, but you can only modify one tunnel at a time. For more information, see Site-to-Site VPN tunnel options for your Site-to-Site VPN connection in the Amazon Web Services Site-to-Site VPN User Guide.
    @Sendable
    @inlinable
    public func modifyVpnTunnelOptions(_ input: ModifyVpnTunnelOptionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ModifyVpnTunnelOptionsResult {
        try await self.client.execute(
            operation: "ModifyVpnTunnelOptions", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Modifies the options for a VPN tunnel in an Amazon Web Services Site-to-Site VPN connection. You can modify multiple options for a tunnel in a single request, but you can only modify one tunnel at a time. For more information, see Site-to-Site VPN tunnel options for your Site-to-Site VPN connection in the Amazon Web Services Site-to-Site VPN User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - skipTunnelReplacement: Choose whether or not to trigger immediate tunnel replacement. This is only applicable when turning on or off EnableTunnelLifecycleControl. Valid values: True | False
    ///   - tunnelOptions: The tunnel options to modify.
    ///   - vpnConnectionId: The ID of the Amazon Web Services Site-to-Site VPN connection.
    ///   - vpnTunnelOutsideIpAddress: The external IP address of the VPN tunnel.
    ///   - logger: Logger use during operation
    @inlinable
    public func modifyVpnTunnelOptions(
        dryRun: Bool? = nil,
        skipTunnelReplacement: Bool? = nil,
        tunnelOptions: ModifyVpnTunnelOptionsSpecification? = nil,
        vpnConnectionId: String? = nil,
        vpnTunnelOutsideIpAddress: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ModifyVpnTunnelOptionsResult {
        let input = ModifyVpnTunnelOptionsRequest(
            dryRun: dryRun, 
            skipTunnelReplacement: skipTunnelReplacement, 
            tunnelOptions: tunnelOptions, 
            vpnConnectionId: vpnConnectionId, 
            vpnTunnelOutsideIpAddress: vpnTunnelOutsideIpAddress
        )
        return try await self.modifyVpnTunnelOptions(input, logger: logger)
    }

    /// Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see Monitor your instances using CloudWatch in the Amazon EC2 User Guide. To disable detailed monitoring, see UnmonitorInstances.
    @Sendable
    @inlinable
    public func monitorInstances(_ input: MonitorInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> MonitorInstancesResult {
        try await self.client.execute(
            operation: "MonitorInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see Monitor your instances using CloudWatch in the Amazon EC2 User Guide. To disable detailed monitoring, see UnmonitorInstances.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceIds: The IDs of the instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func monitorInstances(
        dryRun: Bool? = nil,
        instanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> MonitorInstancesResult {
        let input = MonitorInstancesRequest(
            dryRun: dryRun, 
            instanceIds: instanceIds
        )
        return try await self.monitorInstances(input, logger: logger)
    }

    ///  This action is deprecated.  Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the RestoreAddressToClassic request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.
    @Sendable
    @inlinable
    public func moveAddressToVpc(_ input: MoveAddressToVpcRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> MoveAddressToVpcResult {
        try await self.client.execute(
            operation: "MoveAddressToVpc", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the RestoreAddressToClassic request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - publicIp: The Elastic IP address.
    ///   - logger: Logger use during operation
    @inlinable
    public func moveAddressToVpc(
        dryRun: Bool? = nil,
        publicIp: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> MoveAddressToVpcResult {
        let input = MoveAddressToVpcRequest(
            dryRun: dryRun, 
            publicIp: publicIp
        )
        return try await self.moveAddressToVpc(input, logger: logger)
    }

    /// Move a BYOIPv4 CIDR to IPAM from a public IPv4 pool. If you already have a BYOIPv4 CIDR with Amazon Web Services, you can move the CIDR to IPAM from a public IPv4 pool. You cannot move an IPv6 CIDR to IPAM. If you are bringing a new IP address to Amazon Web Services for the first time, complete the steps in Tutorial: BYOIP address CIDRs to IPAM.
    @Sendable
    @inlinable
    public func moveByoipCidrToIpam(_ input: MoveByoipCidrToIpamRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> MoveByoipCidrToIpamResult {
        try await self.client.execute(
            operation: "MoveByoipCidrToIpam", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Move a BYOIPv4 CIDR to IPAM from a public IPv4 pool. If you already have a BYOIPv4 CIDR with Amazon Web Services, you can move the CIDR to IPAM from a public IPv4 pool. You cannot move an IPv6 CIDR to IPAM. If you are bringing a new IP address to Amazon Web Services for the first time, complete the steps in Tutorial: BYOIP address CIDRs to IPAM.
    ///
    /// Parameters:
    ///   - cidr: The BYOIP CIDR.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamPoolId: The IPAM pool ID.
    ///   - ipamPoolOwner: The Amazon Web Services account ID of the owner of the IPAM pool.
    ///   - logger: Logger use during operation
    @inlinable
    public func moveByoipCidrToIpam(
        cidr: String? = nil,
        dryRun: Bool? = nil,
        ipamPoolId: String? = nil,
        ipamPoolOwner: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> MoveByoipCidrToIpamResult {
        let input = MoveByoipCidrToIpamRequest(
            cidr: cidr, 
            dryRun: dryRun, 
            ipamPoolId: ipamPoolId, 
            ipamPoolOwner: ipamPoolOwner
        )
        return try await self.moveByoipCidrToIpam(input, logger: logger)
    }

    /// Move available capacity from a source Capacity Reservation to a destination Capacity
    /// 			Reservation. The source Capacity Reservation and the destination Capacity Reservation
    /// 			must be active, owned by your Amazon Web Services account, and share the following:    Instance type   Platform   Availability Zone   Tenancy   Placement group   Capacity Reservation end time - At specific time or
    /// 						Manually.
    @Sendable
    @inlinable
    public func moveCapacityReservationInstances(_ input: MoveCapacityReservationInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> MoveCapacityReservationInstancesResult {
        try await self.client.execute(
            operation: "MoveCapacityReservationInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Move available capacity from a source Capacity Reservation to a destination Capacity
    /// 			Reservation. The source Capacity Reservation and the destination Capacity Reservation
    /// 			must be active, owned by your Amazon Web Services account, and share the following:    Instance type   Platform   Availability Zone   Tenancy   Placement group   Capacity Reservation end time - At specific time or
    /// 						Manually.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensure Idempotency.
    ///   - destinationCapacityReservationId:  The ID of the Capacity Reservation that you want to move capacity into.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceCount: The number of instances that you want to move from the source Capacity Reservation.
    ///   - sourceCapacityReservationId:  The ID of the Capacity Reservation from which you want to move capacity.
    ///   - logger: Logger use during operation
    @inlinable
    public func moveCapacityReservationInstances(
        clientToken: String? = MoveCapacityReservationInstancesRequest.idempotencyToken(),
        destinationCapacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        instanceCount: Int? = nil,
        sourceCapacityReservationId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> MoveCapacityReservationInstancesResult {
        let input = MoveCapacityReservationInstancesRequest(
            clientToken: clientToken, 
            destinationCapacityReservationId: destinationCapacityReservationId, 
            dryRun: dryRun, 
            instanceCount: instanceCount, 
            sourceCapacityReservationId: sourceCapacityReservationId
        )
        return try await self.moveCapacityReservationInstances(input, logger: logger)
    }

    /// Provisions an IPv4 or IPv6 address range for use with your Amazon Web Services resources through bring your own IP  addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using AdvertiseByoipCidr. Amazon Web Services verifies that you own the address range and are authorized to advertise it.  You must ensure that the address range is registered to you and that you created an  RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range.  For more information, see Bring your own IP addresses (BYOIP) in the Amazon EC2 User Guide. Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from pending-provision to provisioned. To monitor the status of an address range, use DescribeByoipCidrs.  To allocate an Elastic IP address from your IPv4 address pool, use AllocateAddress  with either the specific address from the address pool or the ID of the address pool.
    @Sendable
    @inlinable
    public func provisionByoipCidr(_ input: ProvisionByoipCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ProvisionByoipCidrResult {
        try await self.client.execute(
            operation: "ProvisionByoipCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provisions an IPv4 or IPv6 address range for use with your Amazon Web Services resources through bring your own IP  addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using AdvertiseByoipCidr. Amazon Web Services verifies that you own the address range and are authorized to advertise it.  You must ensure that the address range is registered to you and that you created an  RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range.  For more information, see Bring your own IP addresses (BYOIP) in the Amazon EC2 User Guide. Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from pending-provision to provisioned. To monitor the status of an address range, use DescribeByoipCidrs.  To allocate an Elastic IP address from your IPv4 address pool, use AllocateAddress  with either the specific address from the address pool or the ID of the address pool.
    ///
    /// Parameters:
    ///   - cidr: The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can  specify is /24. The most specific IPv6 address range that you can bring is /48 for CIDRs that are publicly advertisable and /56 for CIDRs that are not publicly advertisable. The address range cannot overlap with another address range that you've  brought to this or another Region.
    ///   - cidrAuthorizationContext: A signed document that proves that you are authorized to bring the specified IP address  range to Amazon using BYOIP.
    ///   - description: A description for the address range and the address pool.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - multiRegion: Reserved.
    ///   - networkBorderGroup: If you have Local Zones enabled, you can choose a network border group for Local Zones when you provision and advertise a BYOIPv4 CIDR. Choose the network border group carefully as the EIP and the Amazon Web Services resource it is associated with must reside in the same network border group. You can provision BYOIP address ranges to and advertise them in the following Local Zone network border groups:   us-east-1-dfw-2   us-west-2-lax-1   us-west-2-phx-2    You cannot provision or advertise BYOIPv6 address ranges in Local Zones at this time.
    ///   - poolTagSpecifications: The tags to apply to the address pool.
    ///   - publiclyAdvertisable: (IPv6 only) Indicate whether the address range will be publicly advertised to the internet. Default: true
    ///   - logger: Logger use during operation
    @inlinable
    public func provisionByoipCidr(
        cidr: String? = nil,
        cidrAuthorizationContext: CidrAuthorizationContext? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        multiRegion: Bool? = nil,
        networkBorderGroup: String? = nil,
        poolTagSpecifications: [TagSpecification]? = nil,
        publiclyAdvertisable: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ProvisionByoipCidrResult {
        let input = ProvisionByoipCidrRequest(
            cidr: cidr, 
            cidrAuthorizationContext: cidrAuthorizationContext, 
            description: description, 
            dryRun: dryRun, 
            multiRegion: multiRegion, 
            networkBorderGroup: networkBorderGroup, 
            poolTagSpecifications: poolTagSpecifications, 
            publiclyAdvertisable: publiclyAdvertisable
        )
        return try await self.provisionByoipCidr(input, logger: logger)
    }

    /// Provisions your Autonomous System Number (ASN) for use in your Amazon Web Services account. This action requires authorization context for Amazon to bring the ASN to an Amazon Web Services account. For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide.
    @Sendable
    @inlinable
    public func provisionIpamByoasn(_ input: ProvisionIpamByoasnRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ProvisionIpamByoasnResult {
        try await self.client.execute(
            operation: "ProvisionIpamByoasn", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provisions your Autonomous System Number (ASN) for use in your Amazon Web Services account. This action requires authorization context for Amazon to bring the ASN to an Amazon Web Services account. For more information, see Tutorial: Bring your ASN to IPAM in the Amazon VPC IPAM guide.
    ///
    /// Parameters:
    ///   - asn: A public 2-byte or 4-byte ASN.
    ///   - asnAuthorizationContext: An ASN authorization context.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamId: An IPAM ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func provisionIpamByoasn(
        asn: String? = nil,
        asnAuthorizationContext: AsnAuthorizationContext? = nil,
        dryRun: Bool? = nil,
        ipamId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ProvisionIpamByoasnResult {
        let input = ProvisionIpamByoasnRequest(
            asn: asn, 
            asnAuthorizationContext: asnAuthorizationContext, 
            dryRun: dryRun, 
            ipamId: ipamId
        )
        return try await self.provisionIpamByoasn(input, logger: logger)
    }

    /// Provision a CIDR to an IPAM pool. You can use this action to provision new CIDRs to a top-level pool or to transfer a CIDR from a top-level pool to a pool within it. For more information, see Provision CIDRs to pools in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func provisionIpamPoolCidr(_ input: ProvisionIpamPoolCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ProvisionIpamPoolCidrResult {
        try await self.client.execute(
            operation: "ProvisionIpamPoolCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provision a CIDR to an IPAM pool. You can use this action to provision new CIDRs to a top-level pool or to transfer a CIDR from a top-level pool to a pool within it. For more information, see Provision CIDRs to pools in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - cidr: The CIDR you want to assign to the IPAM pool. Either "NetmaskLength" or "Cidr" is required. This value will be null if you specify "NetmaskLength" and will be filled in during the provisioning process.
    ///   - cidrAuthorizationContext: A signed document that proves that you are authorized to bring a specified IP address range to Amazon using BYOIP. This option only applies to IPv4 and IPv6 pools in the public scope.
    ///   - clientToken: A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamExternalResourceVerificationTokenId: Verification token ID. This option only applies to IPv4 and IPv6 pools in the public scope.
    ///   - ipamPoolId: The ID of the IPAM pool to which you want to assign a CIDR.
    ///   - netmaskLength: The netmask length of the CIDR you'd like to provision to a pool. Can be used for provisioning Amazon-provided IPv6 CIDRs to top-level pools and for provisioning CIDRs to pools with source pools. Cannot be used to provision BYOIP CIDRs to top-level pools. Either "NetmaskLength" or "Cidr" is required.
    ///   - verificationMethod: The method for verifying control of a public IP address range. Defaults to remarks-x509 if not specified. This option only applies to IPv4 and IPv6 pools in the public scope.
    ///   - logger: Logger use during operation
    @inlinable
    public func provisionIpamPoolCidr(
        cidr: String? = nil,
        cidrAuthorizationContext: IpamCidrAuthorizationContext? = nil,
        clientToken: String? = ProvisionIpamPoolCidrRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        ipamExternalResourceVerificationTokenId: String? = nil,
        ipamPoolId: String? = nil,
        netmaskLength: Int? = nil,
        verificationMethod: VerificationMethod? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ProvisionIpamPoolCidrResult {
        let input = ProvisionIpamPoolCidrRequest(
            cidr: cidr, 
            cidrAuthorizationContext: cidrAuthorizationContext, 
            clientToken: clientToken, 
            dryRun: dryRun, 
            ipamExternalResourceVerificationTokenId: ipamExternalResourceVerificationTokenId, 
            ipamPoolId: ipamPoolId, 
            netmaskLength: netmaskLength, 
            verificationMethod: verificationMethod
        )
        return try await self.provisionIpamPoolCidr(input, logger: logger)
    }

    /// Provision a CIDR to a public IPv4 pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
    @Sendable
    @inlinable
    public func provisionPublicIpv4PoolCidr(_ input: ProvisionPublicIpv4PoolCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ProvisionPublicIpv4PoolCidrResult {
        try await self.client.execute(
            operation: "ProvisionPublicIpv4PoolCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Provision a CIDR to a public IPv4 pool. For more information about IPAM, see What is IPAM? in the Amazon VPC IPAM User Guide.
    ///
    /// Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamPoolId: The ID of the IPAM pool you would like to use to allocate this CIDR.
    ///   - netmaskLength: The netmask length of the CIDR you would like to allocate to the public IPv4 pool. The least specific netmask length you can define is 24.
    ///   - networkBorderGroup: The Availability Zone (AZ) or Local Zone (LZ) network border group that the resource that the IP address is assigned to is in. Defaults to an AZ network border group. For more information on available Local Zones, see Local Zone availability in the Amazon EC2 User Guide.
    ///   - poolId: The ID of the public IPv4 pool you would like to use for this CIDR.
    ///   - logger: Logger use during operation
    @inlinable
    public func provisionPublicIpv4PoolCidr(
        dryRun: Bool? = nil,
        ipamPoolId: String? = nil,
        netmaskLength: Int? = nil,
        networkBorderGroup: String? = nil,
        poolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ProvisionPublicIpv4PoolCidrResult {
        let input = ProvisionPublicIpv4PoolCidrRequest(
            dryRun: dryRun, 
            ipamPoolId: ipamPoolId, 
            netmaskLength: netmaskLength, 
            networkBorderGroup: networkBorderGroup, 
            poolId: poolId
        )
        return try await self.provisionPublicIpv4PoolCidr(input, logger: logger)
    }

    /// Purchase the Capacity Block for use with your account. With Capacity Blocks you ensure
    /// 			GPU capacity is available for machine learning (ML) workloads. You must specify the ID
    /// 			of the Capacity Block offering you are purchasing.
    @Sendable
    @inlinable
    public func purchaseCapacityBlock(_ input: PurchaseCapacityBlockRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PurchaseCapacityBlockResult {
        try await self.client.execute(
            operation: "PurchaseCapacityBlock", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Purchase the Capacity Block for use with your account. With Capacity Blocks you ensure
    /// 			GPU capacity is available for machine learning (ML) workloads. You must specify the ID
    /// 			of the Capacity Block offering you are purchasing.
    ///
    /// Parameters:
    ///   - capacityBlockOfferingId: The ID of the Capacity Block offering.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instancePlatform: The type of operating system for which to reserve capacity.
    ///   - tagSpecifications: The tags to apply to the Capacity Block during launch.
    ///   - logger: Logger use during operation
    @inlinable
    public func purchaseCapacityBlock(
        capacityBlockOfferingId: String? = nil,
        dryRun: Bool? = nil,
        instancePlatform: CapacityReservationInstancePlatform? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PurchaseCapacityBlockResult {
        let input = PurchaseCapacityBlockRequest(
            capacityBlockOfferingId: capacityBlockOfferingId, 
            dryRun: dryRun, 
            instancePlatform: instancePlatform, 
            tagSpecifications: tagSpecifications
        )
        return try await self.purchaseCapacityBlock(input, logger: logger)
    }

    /// Purchase the Capacity Block extension for use with your account. You must specify the
    /// 			ID of the Capacity Block extension offering you are purchasing.
    @Sendable
    @inlinable
    public func purchaseCapacityBlockExtension(_ input: PurchaseCapacityBlockExtensionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PurchaseCapacityBlockExtensionResult {
        try await self.client.execute(
            operation: "PurchaseCapacityBlockExtension", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Purchase the Capacity Block extension for use with your account. You must specify the
    /// 			ID of the Capacity Block extension offering you are purchasing.
    ///
    /// Parameters:
    ///   - capacityBlockExtensionOfferingId: The ID of the Capacity Block extension offering to purchase.
    ///   - capacityReservationId: The ID of the Capacity reservation to be extended.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func purchaseCapacityBlockExtension(
        capacityBlockExtensionOfferingId: String? = nil,
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PurchaseCapacityBlockExtensionResult {
        let input = PurchaseCapacityBlockExtensionRequest(
            capacityBlockExtensionOfferingId: capacityBlockExtensionOfferingId, 
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun
        )
        return try await self.purchaseCapacityBlockExtension(input, logger: logger)
    }

    /// Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.
    @Sendable
    @inlinable
    public func purchaseHostReservation(_ input: PurchaseHostReservationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PurchaseHostReservationResult {
        try await self.client.execute(
            operation: "PurchaseHostReservation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
    ///   - currencyCode: The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
    ///   - hostIdSet: The IDs of the Dedicated Hosts with which the reservation will be associated.
    ///   - limitPrice: The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is USD. For example, to indicate a limit price of USD 100, specify 100.00.
    ///   - offeringId: The ID of the offering.
    ///   - tagSpecifications: The tags to apply to the Dedicated Host Reservation during purchase.
    ///   - logger: Logger use during operation
    @inlinable
    public func purchaseHostReservation(
        clientToken: String? = nil,
        currencyCode: CurrencyCodeValues? = nil,
        hostIdSet: [String]? = nil,
        limitPrice: String? = nil,
        offeringId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PurchaseHostReservationResult {
        let input = PurchaseHostReservationRequest(
            clientToken: clientToken, 
            currencyCode: currencyCode, 
            hostIdSet: hostIdSet, 
            limitPrice: limitPrice, 
            offeringId: offeringId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.purchaseHostReservation(input, logger: logger)
    }

    /// Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower  hourly rate compared to On-Demand instance pricing. Use DescribeReservedInstancesOfferings to get a list of Reserved Instance offerings
    /// 			that match your specifications. After you've purchased a Reserved Instance, you can check for your
    /// 			new Reserved Instance with DescribeReservedInstances. To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time. For more information, see Reserved Instances and Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func purchaseReservedInstancesOffering(_ input: PurchaseReservedInstancesOfferingRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PurchaseReservedInstancesOfferingResult {
        try await self.client.execute(
            operation: "PurchaseReservedInstancesOffering", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower  hourly rate compared to On-Demand instance pricing. Use DescribeReservedInstancesOfferings to get a list of Reserved Instance offerings
    /// 			that match your specifications. After you've purchased a Reserved Instance, you can check for your
    /// 			new Reserved Instance with DescribeReservedInstances. To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time. For more information, see Reserved Instances and Sell in the Reserved Instance Marketplace in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceCount: The number of Reserved Instances to purchase.
    ///   - limitPrice: Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.
    ///   - purchaseTime: The time at which to purchase the Reserved Instance, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
    ///   - reservedInstancesOfferingId: The ID of the Reserved Instance offering to purchase.
    ///   - logger: Logger use during operation
    @inlinable
    public func purchaseReservedInstancesOffering(
        dryRun: Bool? = nil,
        instanceCount: Int? = nil,
        limitPrice: ReservedInstanceLimitPrice? = nil,
        purchaseTime: Date? = nil,
        reservedInstancesOfferingId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PurchaseReservedInstancesOfferingResult {
        let input = PurchaseReservedInstancesOfferingRequest(
            dryRun: dryRun, 
            instanceCount: instanceCount, 
            limitPrice: limitPrice, 
            purchaseTime: purchaseTime, 
            reservedInstancesOfferingId: reservedInstancesOfferingId
        )
        return try await self.purchaseReservedInstancesOffering(input, logger: logger)
    }

    ///  You can no longer purchase Scheduled Instances.  Purchases the Scheduled Instances with the specified schedule. Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call DescribeScheduledInstanceAvailability to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call RunScheduledInstances during each scheduled time period. After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.
    @Sendable
    @inlinable
    public func purchaseScheduledInstances(_ input: PurchaseScheduledInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> PurchaseScheduledInstancesResult {
        try await self.client.execute(
            operation: "PurchaseScheduledInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  You can no longer purchase Scheduled Instances.  Purchases the Scheduled Instances with the specified schedule. Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call DescribeScheduledInstanceAvailability to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call RunScheduledInstances during each scheduled time period. After you purchase a Scheduled Instance, you can't cancel, modify, or resell your purchase.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that ensures the idempotency of the request.  For more information, see Ensuring Idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - purchaseRequests: The purchase requests.
    ///   - logger: Logger use during operation
    @inlinable
    public func purchaseScheduledInstances(
        clientToken: String? = PurchaseScheduledInstancesRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        purchaseRequests: [PurchaseRequest]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> PurchaseScheduledInstancesResult {
        let input = PurchaseScheduledInstancesRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            purchaseRequests: purchaseRequests
        )
        return try await self.purchaseScheduledInstances(input, logger: logger)
    }

    /// Requests a reboot of the specified instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored. If an instance does not cleanly shut down within a few minutes, Amazon EC2 performs a hard reboot. For more information about troubleshooting, see Troubleshoot an unreachable instance in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func rebootInstances(_ input: RebootInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "RebootInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Requests a reboot of the specified instances. This operation is asynchronous; it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored. If an instance does not cleanly shut down within a few minutes, Amazon EC2 performs a hard reboot. For more information about troubleshooting, see Troubleshoot an unreachable instance in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceIds: The instance IDs.
    ///   - logger: Logger use during operation
    @inlinable
    public func rebootInstances(
        dryRun: Bool? = nil,
        instanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = RebootInstancesRequest(
            dryRun: dryRun, 
            instanceIds: instanceIds
        )
        return try await self.rebootInstances(input, logger: logger)
    }

    /// Registers an AMI. When you're creating an instance-store backed AMI, registering the AMI is the final step in the creation process. For more information about creating AMIs, see Create an AMI from a snapshot and Create an instance-store backed AMI in the Amazon EC2 User Guide.  For Amazon EBS-backed instances, CreateImage creates and registers the AMI in a single request, so you don't have to register the AMI yourself. We recommend that you always use CreateImage unless you have a specific reason to use RegisterImage.  If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.  Register a snapshot of a root device volume  You can use RegisterImage to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using a block device mapping. You can't set the encryption state of the volume using the block device mapping. If the snapshot is encrypted, or encryption by default is enabled, the root volume of an instance launched from the AMI is encrypted. For more information, see Create an AMI from a snapshot and Use encryption with Amazon EBS-backed AMIs in the Amazon EC2 User Guide.  Amazon Web Services Marketplace product codes  If any snapshots have Amazon Web Services Marketplace product codes, they are copied to the new AMI. In most cases, AMIs for Windows, RedHat, SUSE, and SQL Server require correct licensing information to be present on the AMI. For more information, see Understand AMI billing information in the Amazon EC2 User Guide. When creating an AMI from a snapshot, the RegisterImage operation derives the correct billing information from the snapshot's metadata, but this requires the appropriate metadata to be present. To verify if the correct billing information was applied, check the PlatformDetails field on the new AMI. If the field is empty or doesn't match the expected operating system code (for example, Windows, RedHat, SUSE, or SQL), the AMI creation was unsuccessful, and you should discard the AMI and instead create the AMI from an instance using CreateImage. For more information, see Create an AMI from an instance  in the Amazon EC2 User Guide. If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched from an AMI with a billing product code, make sure that the Reserved Instance has the matching billing product code. If you purchase a Reserved Instance without the matching billing product code, the Reserved Instance will not be applied to the On-Demand Instance. For information about how to obtain the platform details and billing information of an AMI, see Understand AMI billing information in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func registerImage(_ input: RegisterImageRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterImageResult {
        try await self.client.execute(
            operation: "RegisterImage", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers an AMI. When you're creating an instance-store backed AMI, registering the AMI is the final step in the creation process. For more information about creating AMIs, see Create an AMI from a snapshot and Create an instance-store backed AMI in the Amazon EC2 User Guide.  For Amazon EBS-backed instances, CreateImage creates and registers the AMI in a single request, so you don't have to register the AMI yourself. We recommend that you always use CreateImage unless you have a specific reason to use RegisterImage.  If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.  Register a snapshot of a root device volume  You can use RegisterImage to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using a block device mapping. You can't set the encryption state of the volume using the block device mapping. If the snapshot is encrypted, or encryption by default is enabled, the root volume of an instance launched from the AMI is encrypted. For more information, see Create an AMI from a snapshot and Use encryption with Amazon EBS-backed AMIs in the Amazon EC2 User Guide.  Amazon Web Services Marketplace product codes  If any snapshots have Amazon Web Services Marketplace product codes, they are copied to the new AMI. In most cases, AMIs for Windows, RedHat, SUSE, and SQL Server require correct licensing information to be present on the AMI. For more information, see Understand AMI billing information in the Amazon EC2 User Guide. When creating an AMI from a snapshot, the RegisterImage operation derives the correct billing information from the snapshot's metadata, but this requires the appropriate metadata to be present. To verify if the correct billing information was applied, check the PlatformDetails field on the new AMI. If the field is empty or doesn't match the expected operating system code (for example, Windows, RedHat, SUSE, or SQL), the AMI creation was unsuccessful, and you should discard the AMI and instead create the AMI from an instance using CreateImage. For more information, see Create an AMI from an instance  in the Amazon EC2 User Guide. If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched from an AMI with a billing product code, make sure that the Reserved Instance has the matching billing product code. If you purchase a Reserved Instance without the matching billing product code, the Reserved Instance will not be applied to the On-Demand Instance. For information about how to obtain the platform details and billing information of an AMI, see Understand AMI billing information in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - architecture: The architecture of the AMI. Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs, the architecture specified in the manifest file.
    ///   - billingProducts: The billing product codes. Your account must be authorized to specify billing product codes. If your account is not authorized to specify billing product codes, you can publish AMIs that include billable software and list them on the Amazon Web Services Marketplace. You must first register as a seller on the Amazon Web Services Marketplace. For more information, see Getting started as a seller and AMI-based products in the Amazon Web Services Marketplace Seller Guide.
    ///   - blockDeviceMappings: The block device mapping entries. If you specify an Amazon EBS volume using the ID of an Amazon EBS snapshot, you can't specify the encryption state of the volume. If you create an AMI on an Outpost, then all backing snapshots must be on the same Outpost or in the Region of that Outpost. AMIs on an Outpost that include local snapshots can be used to launch instances on the same Outpost only. For more information, Amazon EBS local snapshots on Outposts in the Amazon EBS User Guide.
    ///   - bootMode: The boot mode of the AMI. A value of uefi-preferred indicates that the AMI supports both UEFI and Legacy BIOS.  The operating system contained in the AMI must be configured to support the specified boot mode.  For more information, see Boot modes in the Amazon EC2 User Guide.
    ///   - description: A description for your AMI.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - enaSupport: Set to true to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
    ///   - imageLocation: The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the aws-exec-read canned access control list (ACL) to ensure that it can be accessed by Amazon EC2. For more information, see Canned ACLs in the Amazon S3 Service Developer Guide.
    ///   - imdsSupport: Set to v2.0 to indicate that IMDSv2 is specified in the AMI. Instances launched from this AMI will have HttpTokens automatically set to required so that, by default, the instance requires that IMDSv2 is used when requesting instance metadata. In addition, HttpPutResponseHopLimit is set to 2. For more information, see Configure the AMI in the Amazon EC2 User Guide.  If you set the value to v2.0, make sure that your AMI software can support IMDSv2.
    ///   - kernelId: The ID of the kernel.
    ///   - name: A name for your AMI. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
    ///   - ramdiskId: The ID of the RAM disk.
    ///   - rootDeviceName: The device name of the root device volume (for example, /dev/sda1).
    ///   - sriovNetSupport: Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI. There is no way to disable sriovNetSupport at this time. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
    ///   - tagSpecifications: The tags to apply to the AMI. To tag the AMI, the value for ResourceType must be image. If you specify another value for ResourceType, the request fails. To tag an AMI after it has been registered, see CreateTags.
    ///   - tpmSupport: Set to v2.0 to enable Trusted Platform Module (TPM) support. For more information, see NitroTPM in the Amazon EC2 User Guide.
    ///   - uefiData: Base64 representation of the non-volatile UEFI variable store. To retrieve the UEFI data, use the GetInstanceUefiData command. You can inspect and modify the UEFI data by using the python-uefivars tool on GitHub. For more information, see UEFI Secure Boot in the Amazon EC2 User Guide.
    ///   - virtualizationType: The type of virtualization (hvm | paravirtual). Default: paravirtual
    ///   - logger: Logger use during operation
    @inlinable
    public func registerImage(
        architecture: ArchitectureValues? = nil,
        billingProducts: [String]? = nil,
        blockDeviceMappings: [BlockDeviceMapping]? = nil,
        bootMode: BootModeValues? = nil,
        description: String? = nil,
        dryRun: Bool? = nil,
        enaSupport: Bool? = nil,
        imageLocation: String? = nil,
        imdsSupport: ImdsSupportValues? = nil,
        kernelId: String? = nil,
        name: String? = nil,
        ramdiskId: String? = nil,
        rootDeviceName: String? = nil,
        sriovNetSupport: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        tpmSupport: TpmSupportValues? = nil,
        uefiData: String? = nil,
        virtualizationType: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterImageResult {
        let input = RegisterImageRequest(
            architecture: architecture, 
            billingProducts: billingProducts, 
            blockDeviceMappings: blockDeviceMappings, 
            bootMode: bootMode, 
            description: description, 
            dryRun: dryRun, 
            enaSupport: enaSupport, 
            imageLocation: imageLocation, 
            imdsSupport: imdsSupport, 
            kernelId: kernelId, 
            name: name, 
            ramdiskId: ramdiskId, 
            rootDeviceName: rootDeviceName, 
            sriovNetSupport: sriovNetSupport, 
            tagSpecifications: tagSpecifications, 
            tpmSupport: tpmSupport, 
            uefiData: uefiData, 
            virtualizationType: virtualizationType
        )
        return try await self.registerImage(input, logger: logger)
    }

    /// Registers a set of tag keys to include in scheduled event notifications for your resources.  		 To remove tags, use DeregisterInstanceEventNotificationAttributes.
    @Sendable
    @inlinable
    public func registerInstanceEventNotificationAttributes(_ input: RegisterInstanceEventNotificationAttributesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterInstanceEventNotificationAttributesResult {
        try await self.client.execute(
            operation: "RegisterInstanceEventNotificationAttributes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers a set of tag keys to include in scheduled event notifications for your resources.  		 To remove tags, use DeregisterInstanceEventNotificationAttributes.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceTagAttribute: Information about the tag keys to register.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerInstanceEventNotificationAttributes(
        dryRun: Bool? = nil,
        instanceTagAttribute: RegisterInstanceTagAttributeRequest? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterInstanceEventNotificationAttributesResult {
        let input = RegisterInstanceEventNotificationAttributesRequest(
            dryRun: dryRun, 
            instanceTagAttribute: instanceTagAttribute
        )
        return try await self.registerInstanceEventNotificationAttributes(input, logger: logger)
    }

    /// Registers members (network interfaces) with the  transit gateway multicast group. A member is a network interface associated with a supported EC2 instance that receives multicast traffic. For more information, see Multicast on transit gateways in the Amazon Web Services Transit Gateways Guide. After you add the members, use SearchTransitGatewayMulticastGroups to verify that the members were added to the  transit gateway multicast group.
    @Sendable
    @inlinable
    public func registerTransitGatewayMulticastGroupMembers(_ input: RegisterTransitGatewayMulticastGroupMembersRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterTransitGatewayMulticastGroupMembersResult {
        try await self.client.execute(
            operation: "RegisterTransitGatewayMulticastGroupMembers", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers members (network interfaces) with the  transit gateway multicast group. A member is a network interface associated with a supported EC2 instance that receives multicast traffic. For more information, see Multicast on transit gateways in the Amazon Web Services Transit Gateways Guide. After you add the members, use SearchTransitGatewayMulticastGroups to verify that the members were added to the  transit gateway multicast group.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupIpAddress: The IP address assigned to the  transit gateway multicast group.
    ///   - networkInterfaceIds: The group members' network interface IDs to register with the  transit gateway multicast group.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerTransitGatewayMulticastGroupMembers(
        dryRun: Bool? = nil,
        groupIpAddress: String? = nil,
        networkInterfaceIds: [String]? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterTransitGatewayMulticastGroupMembersResult {
        let input = RegisterTransitGatewayMulticastGroupMembersRequest(
            dryRun: dryRun, 
            groupIpAddress: groupIpAddress, 
            networkInterfaceIds: networkInterfaceIds, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.registerTransitGatewayMulticastGroupMembers(input, logger: logger)
    }

    /// Registers sources (network interfaces) with the specified  transit gateway multicast group. A multicast source is a network interface attached to a supported instance that sends multicast traffic. For more information about supported instances, see Multicast on transit gateways in the Amazon Web Services Transit Gateways Guide. After you add the source, use SearchTransitGatewayMulticastGroups to verify that the source was added to the multicast group.
    @Sendable
    @inlinable
    public func registerTransitGatewayMulticastGroupSources(_ input: RegisterTransitGatewayMulticastGroupSourcesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RegisterTransitGatewayMulticastGroupSourcesResult {
        try await self.client.execute(
            operation: "RegisterTransitGatewayMulticastGroupSources", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Registers sources (network interfaces) with the specified  transit gateway multicast group. A multicast source is a network interface attached to a supported instance that sends multicast traffic. For more information about supported instances, see Multicast on transit gateways in the Amazon Web Services Transit Gateways Guide. After you add the source, use SearchTransitGatewayMulticastGroups to verify that the source was added to the multicast group.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupIpAddress: The IP address assigned to the  transit gateway multicast group.
    ///   - networkInterfaceIds: The group sources' network interface IDs to register with the  transit gateway multicast group.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func registerTransitGatewayMulticastGroupSources(
        dryRun: Bool? = nil,
        groupIpAddress: String? = nil,
        networkInterfaceIds: [String]? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RegisterTransitGatewayMulticastGroupSourcesResult {
        let input = RegisterTransitGatewayMulticastGroupSourcesRequest(
            dryRun: dryRun, 
            groupIpAddress: groupIpAddress, 
            networkInterfaceIds: networkInterfaceIds, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.registerTransitGatewayMulticastGroupSources(input, logger: logger)
    }

    /// Rejects a request to assign billing of the available capacity of a shared Capacity
    /// 			Reservation to your account. For more information, see  Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    @Sendable
    @inlinable
    public func rejectCapacityReservationBillingOwnership(_ input: RejectCapacityReservationBillingOwnershipRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectCapacityReservationBillingOwnershipResult {
        try await self.client.execute(
            operation: "RejectCapacityReservationBillingOwnership", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects a request to assign billing of the available capacity of a shared Capacity
    /// 			Reservation to your account. For more information, see  Billing assignment for shared
    /// 					Amazon EC2 Capacity Reservations.
    ///
    /// Parameters:
    ///   - capacityReservationId: The ID of the Capacity Reservation for which to reject the request.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectCapacityReservationBillingOwnership(
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectCapacityReservationBillingOwnershipResult {
        let input = RejectCapacityReservationBillingOwnershipRequest(
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun
        )
        return try await self.rejectCapacityReservationBillingOwnership(input, logger: logger)
    }

    /// Rejects a request to associate cross-account subnets with a transit gateway multicast domain.
    @Sendable
    @inlinable
    public func rejectTransitGatewayMulticastDomainAssociations(_ input: RejectTransitGatewayMulticastDomainAssociationsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectTransitGatewayMulticastDomainAssociationsResult {
        try await self.client.execute(
            operation: "RejectTransitGatewayMulticastDomainAssociations", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects a request to associate cross-account subnets with a transit gateway multicast domain.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - subnetIds: The IDs of the subnets to associate with the transit gateway multicast domain.
    ///   - transitGatewayAttachmentId: The ID of the transit gateway attachment.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectTransitGatewayMulticastDomainAssociations(
        dryRun: Bool? = nil,
        subnetIds: [String]? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectTransitGatewayMulticastDomainAssociationsResult {
        let input = RejectTransitGatewayMulticastDomainAssociationsRequest(
            dryRun: dryRun, 
            subnetIds: subnetIds, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.rejectTransitGatewayMulticastDomainAssociations(input, logger: logger)
    }

    /// Rejects a transit gateway peering attachment request.
    @Sendable
    @inlinable
    public func rejectTransitGatewayPeeringAttachment(_ input: RejectTransitGatewayPeeringAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectTransitGatewayPeeringAttachmentResult {
        try await self.client.execute(
            operation: "RejectTransitGatewayPeeringAttachment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects a transit gateway peering attachment request.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the transit gateway peering attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectTransitGatewayPeeringAttachment(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectTransitGatewayPeeringAttachmentResult {
        let input = RejectTransitGatewayPeeringAttachmentRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.rejectTransitGatewayPeeringAttachment(input, logger: logger)
    }

    /// Rejects a request to attach a VPC to a transit gateway. The VPC attachment must be in the pendingAcceptance state. Use DescribeTransitGatewayVpcAttachments to view your pending VPC attachment requests. Use AcceptTransitGatewayVpcAttachment to accept a VPC attachment request.
    @Sendable
    @inlinable
    public func rejectTransitGatewayVpcAttachment(_ input: RejectTransitGatewayVpcAttachmentRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectTransitGatewayVpcAttachmentResult {
        try await self.client.execute(
            operation: "RejectTransitGatewayVpcAttachment", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects a request to attach a VPC to a transit gateway. The VPC attachment must be in the pendingAcceptance state. Use DescribeTransitGatewayVpcAttachments to view your pending VPC attachment requests. Use AcceptTransitGatewayVpcAttachment to accept a VPC attachment request.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectTransitGatewayVpcAttachment(
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectTransitGatewayVpcAttachmentResult {
        let input = RejectTransitGatewayVpcAttachmentRequest(
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return try await self.rejectTransitGatewayVpcAttachment(input, logger: logger)
    }

    /// Rejects VPC endpoint connection requests to your VPC endpoint service.
    @Sendable
    @inlinable
    public func rejectVpcEndpointConnections(_ input: RejectVpcEndpointConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectVpcEndpointConnectionsResult {
        try await self.client.execute(
            operation: "RejectVpcEndpointConnections", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects VPC endpoint connection requests to your VPC endpoint service.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - serviceId: The ID of the service.
    ///   - vpcEndpointIds: The IDs of the VPC endpoints.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectVpcEndpointConnections(
        dryRun: Bool? = nil,
        serviceId: String? = nil,
        vpcEndpointIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectVpcEndpointConnectionsResult {
        let input = RejectVpcEndpointConnectionsRequest(
            dryRun: dryRun, 
            serviceId: serviceId, 
            vpcEndpointIds: vpcEndpointIds
        )
        return try await self.rejectVpcEndpointConnections(input, logger: logger)
    }

    /// Rejects a VPC peering connection request. The VPC peering connection must be in the
    /// 				pending-acceptance state. Use the DescribeVpcPeeringConnections request
    /// 			to view your outstanding VPC peering connection requests. To delete an active VPC peering
    /// 			connection, or to delete a VPC peering connection request that you initiated, use	DeleteVpcPeeringConnection.
    @Sendable
    @inlinable
    public func rejectVpcPeeringConnection(_ input: RejectVpcPeeringConnectionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RejectVpcPeeringConnectionResult {
        try await self.client.execute(
            operation: "RejectVpcPeeringConnection", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Rejects a VPC peering connection request. The VPC peering connection must be in the
    /// 				pending-acceptance state. Use the DescribeVpcPeeringConnections request
    /// 			to view your outstanding VPC peering connection requests. To delete an active VPC peering
    /// 			connection, or to delete a VPC peering connection request that you initiated, use	DeleteVpcPeeringConnection.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - vpcPeeringConnectionId: The ID of the VPC peering connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func rejectVpcPeeringConnection(
        dryRun: Bool? = nil,
        vpcPeeringConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RejectVpcPeeringConnectionResult {
        let input = RejectVpcPeeringConnectionRequest(
            dryRun: dryRun, 
            vpcPeeringConnectionId: vpcPeeringConnectionId
        )
        return try await self.rejectVpcPeeringConnection(input, logger: logger)
    }

    /// Releases the specified Elastic IP address. [Default VPC] Releasing an Elastic IP address automatically disassociates it
    /// 				from any instance that it's associated with. To disassociate an Elastic IP address without
    /// 				releasing it, use DisassociateAddress. [Nondefault VPC] You must use DisassociateAddress to disassociate the Elastic IP address
    /// 			  before you can release it. Otherwise, Amazon EC2 returns an error (InvalidIPAddress.InUse). After releasing an Elastic IP address, it is released to the IP address pool.  Be sure to update your DNS records and any servers or devices that communicate with the address.  If you attempt to release an Elastic IP address that you already released, you'll get an AuthFailure error if the address is already allocated to another Amazon Web Services account. After you release an Elastic IP address, you might be able to recover it. For more information, see AllocateAddress.
    @Sendable
    @inlinable
    public func releaseAddress(_ input: ReleaseAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ReleaseAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Releases the specified Elastic IP address. [Default VPC] Releasing an Elastic IP address automatically disassociates it
    /// 				from any instance that it's associated with. To disassociate an Elastic IP address without
    /// 				releasing it, use DisassociateAddress. [Nondefault VPC] You must use DisassociateAddress to disassociate the Elastic IP address
    /// 			  before you can release it. Otherwise, Amazon EC2 returns an error (InvalidIPAddress.InUse). After releasing an Elastic IP address, it is released to the IP address pool.  Be sure to update your DNS records and any servers or devices that communicate with the address.  If you attempt to release an Elastic IP address that you already released, you'll get an AuthFailure error if the address is already allocated to another Amazon Web Services account. After you release an Elastic IP address, you might be able to recover it. For more information, see AllocateAddress.
    ///
    /// Parameters:
    ///   - allocationId: The allocation ID. This parameter is required.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkBorderGroup: The set of Availability Zones, Local Zones, or Wavelength Zones from which Amazon Web Services advertises IP addresses. If you provide an incorrect network border group, you receive an InvalidAddress.NotFound error.
    ///   - publicIp: Deprecated.
    ///   - logger: Logger use during operation
    @inlinable
    public func releaseAddress(
        allocationId: String? = nil,
        dryRun: Bool? = nil,
        networkBorderGroup: String? = nil,
        publicIp: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ReleaseAddressRequest(
            allocationId: allocationId, 
            dryRun: dryRun, 
            networkBorderGroup: networkBorderGroup, 
            publicIp: publicIp
        )
        return try await self.releaseAddress(input, logger: logger)
    }

    /// When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into released state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released. When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again. Released hosts still appear in a DescribeHosts response.
    @Sendable
    @inlinable
    public func releaseHosts(_ input: ReleaseHostsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReleaseHostsResult {
        try await self.client.execute(
            operation: "ReleaseHosts", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into released state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released. When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again. Released hosts still appear in a DescribeHosts response.
    ///
    /// Parameters:
    ///   - hostIds: The IDs of the Dedicated Hosts to release.
    ///   - logger: Logger use during operation
    @inlinable
    public func releaseHosts(
        hostIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReleaseHostsResult {
        let input = ReleaseHostsRequest(
            hostIds: hostIds
        )
        return try await self.releaseHosts(input, logger: logger)
    }

    /// Release an allocation within an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations. You can only use this action to release manual allocations. To remove an allocation for a resource without deleting the resource, set its monitored state to false using ModifyIpamResourceCidr. For more information, see Release an allocation in the Amazon VPC IPAM User Guide.   All EC2 API actions follow an eventual consistency model.
    @Sendable
    @inlinable
    public func releaseIpamPoolAllocation(_ input: ReleaseIpamPoolAllocationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReleaseIpamPoolAllocationResult {
        try await self.client.execute(
            operation: "ReleaseIpamPoolAllocation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Release an allocation within an IPAM pool. The Region you use should be the IPAM pool locale. The locale is the Amazon Web Services Region where this IPAM pool is available for allocations. You can only use this action to release manual allocations. To remove an allocation for a resource without deleting the resource, set its monitored state to false using ModifyIpamResourceCidr. For more information, see Release an allocation in the Amazon VPC IPAM User Guide.   All EC2 API actions follow an eventual consistency model.
    ///
    /// Parameters:
    ///   - cidr: The CIDR of the allocation you want to release.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - ipamPoolAllocationId: The ID of the allocation.
    ///   - ipamPoolId: The ID of the IPAM pool which contains the allocation you want to release.
    ///   - logger: Logger use during operation
    @inlinable
    public func releaseIpamPoolAllocation(
        cidr: String? = nil,
        dryRun: Bool? = nil,
        ipamPoolAllocationId: String? = nil,
        ipamPoolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReleaseIpamPoolAllocationResult {
        let input = ReleaseIpamPoolAllocationRequest(
            cidr: cidr, 
            dryRun: dryRun, 
            ipamPoolAllocationId: ipamPoolAllocationId, 
            ipamPoolId: ipamPoolId
        )
        return try await self.releaseIpamPoolAllocation(input, logger: logger)
    }

    /// Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first. Use DescribeIamInstanceProfileAssociations to get the association ID.
    @Sendable
    @inlinable
    public func replaceIamInstanceProfileAssociation(_ input: ReplaceIamInstanceProfileAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReplaceIamInstanceProfileAssociationResult {
        try await self.client.execute(
            operation: "ReplaceIamInstanceProfileAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that's associated with an instance without having to disassociate the existing IAM instance profile first. Use DescribeIamInstanceProfileAssociations to get the association ID.
    ///
    /// Parameters:
    ///   - associationId: The ID of the existing IAM instance profile association.
    ///   - iamInstanceProfile: The IAM instance profile.
    ///   - logger: Logger use during operation
    @inlinable
    public func replaceIamInstanceProfileAssociation(
        associationId: String? = nil,
        iamInstanceProfile: IamInstanceProfileSpecification? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReplaceIamInstanceProfileAssociationResult {
        let input = ReplaceIamInstanceProfileAssociationRequest(
            associationId: associationId, 
            iamInstanceProfile: iamInstanceProfile
        )
        return try await self.replaceIamInstanceProfileAssociation(input, logger: logger)
    }

    /// Sets or replaces the criteria for Allowed AMIs.  The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.  For more information, see Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs in Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func replaceImageCriteriaInAllowedImagesSettings(_ input: ReplaceImageCriteriaInAllowedImagesSettingsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReplaceImageCriteriaInAllowedImagesSettingsResult {
        try await self.client.execute(
            operation: "ReplaceImageCriteriaInAllowedImagesSettings", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sets or replaces the criteria for Allowed AMIs.  The Allowed AMIs feature does not restrict the AMIs owned by your account. Regardless of the criteria you set, the AMIs created by your account will always be discoverable and usable by users in your account.  For more information, see Control the discovery and use of AMIs in Amazon EC2 with Allowed AMIs in Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageCriteria: The list of criteria that are evaluated to determine whether AMIs are discoverable and usable in the account in the specified Amazon Web Services Region.
    ///   - logger: Logger use during operation
    @inlinable
    public func replaceImageCriteriaInAllowedImagesSettings(
        dryRun: Bool? = nil,
        imageCriteria: [ImageCriterionRequest]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReplaceImageCriteriaInAllowedImagesSettingsResult {
        let input = ReplaceImageCriteriaInAllowedImagesSettingsRequest(
            dryRun: dryRun, 
            imageCriteria: imageCriteria
        )
        return try await self.replaceImageCriteriaInAllowedImagesSettings(input, logger: logger)
    }

    /// Changes which network ACL a subnet is associated with. By default when you create a
    /// 			subnet, it's automatically associated with the default network ACL. For more
    /// 			information, see Network ACLs in the Amazon VPC User Guide. This is an idempotent operation.
    @Sendable
    @inlinable
    public func replaceNetworkAclAssociation(_ input: ReplaceNetworkAclAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReplaceNetworkAclAssociationResult {
        try await self.client.execute(
            operation: "ReplaceNetworkAclAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Changes which network ACL a subnet is associated with. By default when you create a
    /// 			subnet, it's automatically associated with the default network ACL. For more
    /// 			information, see Network ACLs in the Amazon VPC User Guide. This is an idempotent operation.
    ///
    /// Parameters:
    ///   - associationId: The ID of the current association between the original network ACL and the subnet.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkAclId: The ID of the new network ACL to associate with the subnet.
    ///   - logger: Logger use during operation
    @inlinable
    public func replaceNetworkAclAssociation(
        associationId: String? = nil,
        dryRun: Bool? = nil,
        networkAclId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReplaceNetworkAclAssociationResult {
        let input = ReplaceNetworkAclAssociationRequest(
            associationId: associationId, 
            dryRun: dryRun, 
            networkAclId: networkAclId
        )
        return try await self.replaceNetworkAclAssociation(input, logger: logger)
    }

    /// Replaces an entry (rule) in a network ACL. For more information, see Network ACLs in the
    /// 				Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func replaceNetworkAclEntry(_ input: ReplaceNetworkAclEntryRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ReplaceNetworkAclEntry", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Replaces an entry (rule) in a network ACL. For more information, see Network ACLs in the
    /// 				Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - cidrBlock: The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - egress: Indicates whether to replace the egress rule. Default: If no value is specified, we replace the ingress rule.
    ///   - icmpTypeCode: ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol
    ///   - ipv6CidrBlock: The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64).
    ///   - networkAclId: The ID of the ACL.
    ///   - portRange: TCP or UDP protocols: The range of ports the rule applies to.
    ///   - protocol: The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is  allowed, regardless of any ports or ICMP types or codes that you specify. If you specify  protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and  codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6)  and specify an IPv6 CIDR block, you must specify an ICMP type and code.
    ///   - ruleAction: Indicates whether to allow or deny the traffic that matches the rule.
    ///   - ruleNumber: The rule number of the entry to replace.
    ///   - logger: Logger use during operation
    @inlinable
    public func replaceNetworkAclEntry(
        cidrBlock: String? = nil,
        dryRun: Bool? = nil,
        egress: Bool? = nil,
        icmpTypeCode: IcmpTypeCode? = nil,
        ipv6CidrBlock: String? = nil,
        networkAclId: String? = nil,
        portRange: PortRange? = nil,
        protocol: String? = nil,
        ruleAction: RuleAction? = nil,
        ruleNumber: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ReplaceNetworkAclEntryRequest(
            cidrBlock: cidrBlock, 
            dryRun: dryRun, 
            egress: egress, 
            icmpTypeCode: icmpTypeCode, 
            ipv6CidrBlock: ipv6CidrBlock, 
            networkAclId: networkAclId, 
            portRange: portRange, 
            protocol: `protocol`, 
            ruleAction: ruleAction, 
            ruleNumber: ruleNumber
        )
        return try await self.replaceNetworkAclEntry(input, logger: logger)
    }

    /// Replaces an existing route within a route table in a VPC. You must specify either a destination CIDR block or a prefix list ID. You must also specify   exactly one of the resources from the parameter list, or reset the local route to its default  target. For more information, see Route tables in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func replaceRoute(_ input: ReplaceRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ReplaceRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Replaces an existing route within a route table in a VPC. You must specify either a destination CIDR block or a prefix list ID. You must also specify   exactly one of the resources from the parameter list, or reset the local route to its default  target. For more information, see Route tables in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - carrierGatewayId: [IPv4 traffic only] The ID of a carrier gateway.
    ///   - coreNetworkArn: The Amazon Resource Name (ARN) of the core network.
    ///   - destinationCidrBlock: The IPv4 CIDR address block used for the destination match. The value that you
    ///   - destinationIpv6CidrBlock: The IPv6 CIDR address block used for the destination match. The value that you
    ///   - destinationPrefixListId: The ID of the prefix list for the route.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - egressOnlyInternetGatewayId: [IPv6 traffic only] The ID of an egress-only internet gateway.
    ///   - gatewayId: The ID of an internet gateway or virtual private gateway.
    ///   - instanceId: The ID of a NAT instance in your VPC.
    ///   - localGatewayId: The ID of the local gateway.
    ///   - localTarget: Specifies whether to reset the local route to its default target (local).
    ///   - natGatewayId: [IPv4 traffic only] The ID of a NAT gateway.
    ///   - networkInterfaceId: The ID of a network interface.
    ///   - routeTableId: The ID of the route table.
    ///   - transitGatewayId: The ID of a transit gateway.
    ///   - vpcEndpointId: The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
    ///   - vpcPeeringConnectionId: The ID of a VPC peering connection.
    ///   - logger: Logger use during operation
    @inlinable
    public func replaceRoute(
        carrierGatewayId: String? = nil,
        coreNetworkArn: String? = nil,
        destinationCidrBlock: String? = nil,
        destinationIpv6CidrBlock: String? = nil,
        destinationPrefixListId: String? = nil,
        dryRun: Bool? = nil,
        egressOnlyInternetGatewayId: String? = nil,
        gatewayId: String? = nil,
        instanceId: String? = nil,
        localGatewayId: String? = nil,
        localTarget: Bool? = nil,
        natGatewayId: String? = nil,
        networkInterfaceId: String? = nil,
        routeTableId: String? = nil,
        transitGatewayId: String? = nil,
        vpcEndpointId: String? = nil,
        vpcPeeringConnectionId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ReplaceRouteRequest(
            carrierGatewayId: carrierGatewayId, 
            coreNetworkArn: coreNetworkArn, 
            destinationCidrBlock: destinationCidrBlock, 
            destinationIpv6CidrBlock: destinationIpv6CidrBlock, 
            destinationPrefixListId: destinationPrefixListId, 
            dryRun: dryRun, 
            egressOnlyInternetGatewayId: egressOnlyInternetGatewayId, 
            gatewayId: gatewayId, 
            instanceId: instanceId, 
            localGatewayId: localGatewayId, 
            localTarget: localTarget, 
            natGatewayId: natGatewayId, 
            networkInterfaceId: networkInterfaceId, 
            routeTableId: routeTableId, 
            transitGatewayId: transitGatewayId, 
            vpcEndpointId: vpcEndpointId, 
            vpcPeeringConnectionId: vpcPeeringConnectionId
        )
        return try await self.replaceRoute(input, logger: logger)
    }

    /// Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation completes, the subnet or gateway uses the routes in the new route table. For more information about route tables, see Route tables in the Amazon VPC User Guide. You can also use this operation to change which table is the main route table in the VPC. Specify the main route table's association ID and the route table ID of the new main route table.
    @Sendable
    @inlinable
    public func replaceRouteTableAssociation(_ input: ReplaceRouteTableAssociationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReplaceRouteTableAssociationResult {
        try await self.client.execute(
            operation: "ReplaceRouteTableAssociation", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation completes, the subnet or gateway uses the routes in the new route table. For more information about route tables, see Route tables in the Amazon VPC User Guide. You can also use this operation to change which table is the main route table in the VPC. Specify the main route table's association ID and the route table ID of the new main route table.
    ///
    /// Parameters:
    ///   - associationId: The association ID.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - routeTableId: The ID of the new route table to associate with the subnet.
    ///   - logger: Logger use during operation
    @inlinable
    public func replaceRouteTableAssociation(
        associationId: String? = nil,
        dryRun: Bool? = nil,
        routeTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReplaceRouteTableAssociationResult {
        let input = ReplaceRouteTableAssociationRequest(
            associationId: associationId, 
            dryRun: dryRun, 
            routeTableId: routeTableId
        )
        return try await self.replaceRouteTableAssociation(input, logger: logger)
    }

    /// Replaces the specified route in the specified transit gateway route table.
    @Sendable
    @inlinable
    public func replaceTransitGatewayRoute(_ input: ReplaceTransitGatewayRouteRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReplaceTransitGatewayRouteResult {
        try await self.client.execute(
            operation: "ReplaceTransitGatewayRoute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Replaces the specified route in the specified transit gateway route table.
    ///
    /// Parameters:
    ///   - blackhole: Indicates whether traffic matching this route is to be dropped.
    ///   - destinationCidrBlock: The CIDR range used for the destination match. Routing decisions are based on the most specific match.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - transitGatewayRouteTableId: The ID of the route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func replaceTransitGatewayRoute(
        blackhole: Bool? = nil,
        destinationCidrBlock: String? = nil,
        dryRun: Bool? = nil,
        transitGatewayAttachmentId: String? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReplaceTransitGatewayRouteResult {
        let input = ReplaceTransitGatewayRouteRequest(
            blackhole: blackhole, 
            destinationCidrBlock: destinationCidrBlock, 
            dryRun: dryRun, 
            transitGatewayAttachmentId: transitGatewayAttachmentId, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.replaceTransitGatewayRoute(input, logger: logger)
    }

    /// Trigger replacement of specified VPN tunnel.
    @Sendable
    @inlinable
    public func replaceVpnTunnel(_ input: ReplaceVpnTunnelRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ReplaceVpnTunnelResult {
        try await self.client.execute(
            operation: "ReplaceVpnTunnel", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Trigger replacement of specified VPN tunnel.
    ///
    /// Parameters:
    ///   - applyPendingMaintenance: Trigger pending tunnel endpoint maintenance.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - vpnConnectionId: The ID of the Site-to-Site VPN connection.
    ///   - vpnTunnelOutsideIpAddress: The external IP address of the VPN tunnel.
    ///   - logger: Logger use during operation
    @inlinable
    public func replaceVpnTunnel(
        applyPendingMaintenance: Bool? = nil,
        dryRun: Bool? = nil,
        vpnConnectionId: String? = nil,
        vpnTunnelOutsideIpAddress: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ReplaceVpnTunnelResult {
        let input = ReplaceVpnTunnelRequest(
            applyPendingMaintenance: applyPendingMaintenance, 
            dryRun: dryRun, 
            vpnConnectionId: vpnConnectionId, 
            vpnTunnelOutsideIpAddress: vpnTunnelOutsideIpAddress
        )
        return try await self.replaceVpnTunnel(input, logger: logger)
    }

    /// Submits feedback about the status of an instance. The instance must be in the running state. If your experience with the instance differs from the instance status returned by DescribeInstanceStatus, use ReportInstanceStatus to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks. Use of this action does not change the value returned by DescribeInstanceStatus.
    @Sendable
    @inlinable
    public func reportInstanceStatus(_ input: ReportInstanceStatusRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ReportInstanceStatus", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Submits feedback about the status of an instance. The instance must be in the running state. If your experience with the instance differs from the instance status returned by DescribeInstanceStatus, use ReportInstanceStatus to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks. Use of this action does not change the value returned by DescribeInstanceStatus.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - endTime: The time at which the reported instance health state ended.
    ///   - instances: The instances.
    ///   - reasonCodes: The reason codes that describe the health state of your instance.    instance-stuck-in-state: My instance is stuck in a state.    unresponsive: My instance is unresponsive.    not-accepting-credentials: My instance is not accepting my credentials.    password-not-available: A password is not available for my instance.    performance-network: My instance is experiencing performance problems that I believe are network related.    performance-instance-store: My instance is experiencing performance problems that I believe are related to the instance stores.    performance-ebs-volume: My instance is experiencing performance problems that I believe are related to an EBS volume.    performance-other: My instance is experiencing performance problems.    other: [explain using the description parameter]
    ///   - startTime: The time at which the reported instance health state began.
    ///   - status: The status of all instances listed.
    ///   - logger: Logger use during operation
    @inlinable
    public func reportInstanceStatus(
        dryRun: Bool? = nil,
        endTime: Date? = nil,
        instances: [String]? = nil,
        reasonCodes: [ReportInstanceReasonCodes]? = nil,
        startTime: Date? = nil,
        status: ReportStatusType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ReportInstanceStatusRequest(
            dryRun: dryRun, 
            endTime: endTime, 
            instances: instances, 
            reasonCodes: reasonCodes, 
            startTime: startTime, 
            status: status
        )
        return try await self.reportInstanceStatus(input, logger: logger)
    }

    /// Creates a Spot Fleet request. The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity. You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet. By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload. Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet. You can specify tags for the Spot Fleet request and instances launched by the fleet. You cannot tag other resource types in a Spot Fleet request because only the spot-fleet-request and instance resource types are supported. For more information, see Spot Fleet requests in the Amazon EC2 User Guide.  We strongly discourage using the RequestSpotFleet API because it is a legacy API with no planned investment. For options for requesting Spot Instances, see Which is the best Spot request method to use? in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func requestSpotFleet(_ input: RequestSpotFleetRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RequestSpotFleetResponse {
        try await self.client.execute(
            operation: "RequestSpotFleet", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Spot Fleet request. The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity. You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet. By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload. Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet. You can specify tags for the Spot Fleet request and instances launched by the fleet. You cannot tag other resource types in a Spot Fleet request because only the spot-fleet-request and instance resource types are supported. For more information, see Spot Fleet requests in the Amazon EC2 User Guide.  We strongly discourage using the RequestSpotFleet API because it is a legacy API with no planned investment. For options for requesting Spot Instances, see Which is the best Spot request method to use? in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - spotFleetRequestConfig: The configuration for the Spot Fleet request.
    ///   - logger: Logger use during operation
    @inlinable
    public func requestSpotFleet(
        dryRun: Bool? = nil,
        spotFleetRequestConfig: SpotFleetRequestConfigData? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RequestSpotFleetResponse {
        let input = RequestSpotFleetRequest(
            dryRun: dryRun, 
            spotFleetRequestConfig: spotFleetRequestConfig
        )
        return try await self.requestSpotFleet(input, logger: logger)
    }

    /// Creates a Spot Instance request. For more information, see Work with Spot Instance in the Amazon EC2 User Guide.  We strongly discourage using the RequestSpotInstances API because it is a legacy API with no planned investment. For options for requesting Spot Instances, see Which is the best Spot request method to use? in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func requestSpotInstances(_ input: RequestSpotInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RequestSpotInstancesResult {
        try await self.client.execute(
            operation: "RequestSpotInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Creates a Spot Instance request. For more information, see Work with Spot Instance in the Amazon EC2 User Guide.  We strongly discourage using the RequestSpotInstances API because it is a legacy API with no planned investment. For options for requesting Spot Instances, see Which is the best Spot request method to use? in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - availabilityZoneGroup: The user-specified name for a logical grouping of requests. When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active. If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group. Default: Instances are launched in any available Availability Zone.
    ///   - blockDurationMinutes: Deprecated.
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring idempotency in Amazon EC2 API requests in the Amazon EC2 User Guide.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceCount: The maximum number of Spot Instances to launch. Default: 1
    ///   - instanceInterruptionBehavior: The behavior when a Spot Instance is interrupted. The default is terminate.
    ///   - launchGroup: The instance launch group. Launch groups are Spot Instances that launch together and terminate together. Default: Instances are launched and terminated individually
    ///   - launchSpecification: The launch specification.
    ///   - spotPrice: The maximum price per unit hour that you are willing to pay for a Spot Instance. We do not recommend  using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.  If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify this parameter.
    ///   - tagSpecifications: The key-value pair for tagging the Spot Instance request on creation. The value for ResourceType must be spot-instances-request, otherwise the Spot Instance request fails. To tag the Spot Instance request after it has been created, see CreateTags.
    ///   - type: The Spot Instance request type. Default: one-time
    ///   - validFrom: The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled. The specified start date and time cannot be equal to the current date and time. You must specify a start date and time that occurs after the current date and time.
    ///   - validUntil: The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ).   For a persistent request, the request remains active until the ValidUntil date and time is reached. Otherwise, the request remains active until you cancel it.    For a one-time request, the request remains active until all instances launch, the request is canceled, or the ValidUntil date and time is reached. By default, the request is valid for 7 days from the date the request was created.
    ///   - logger: Logger use during operation
    @inlinable
    public func requestSpotInstances(
        availabilityZoneGroup: String? = nil,
        blockDurationMinutes: Int? = nil,
        clientToken: String? = nil,
        dryRun: Bool? = nil,
        instanceCount: Int? = nil,
        instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil,
        launchGroup: String? = nil,
        launchSpecification: RequestSpotLaunchSpecification? = nil,
        spotPrice: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        type: SpotInstanceType? = nil,
        validFrom: Date? = nil,
        validUntil: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RequestSpotInstancesResult {
        let input = RequestSpotInstancesRequest(
            availabilityZoneGroup: availabilityZoneGroup, 
            blockDurationMinutes: blockDurationMinutes, 
            clientToken: clientToken, 
            dryRun: dryRun, 
            instanceCount: instanceCount, 
            instanceInterruptionBehavior: instanceInterruptionBehavior, 
            launchGroup: launchGroup, 
            launchSpecification: launchSpecification, 
            spotPrice: spotPrice, 
            tagSpecifications: tagSpecifications, 
            type: type, 
            validFrom: validFrom, 
            validUntil: validUntil
        )
        return try await self.requestSpotInstances(input, logger: logger)
    }

    /// Resets the attribute of the specified IP address. For requirements, see Using reverse DNS for email applications.
    @Sendable
    @inlinable
    public func resetAddressAttribute(_ input: ResetAddressAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ResetAddressAttributeResult {
        try await self.client.execute(
            operation: "ResetAddressAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets the attribute of the specified IP address. For requirements, see Using reverse DNS for email applications.
    ///
    /// Parameters:
    ///   - allocationId: [EC2-VPC] The allocation ID.
    ///   - attribute: The attribute of the IP address.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetAddressAttribute(
        allocationId: String? = nil,
        attribute: AddressAttributeName? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ResetAddressAttributeResult {
        let input = ResetAddressAttributeRequest(
            allocationId: allocationId, 
            attribute: attribute, 
            dryRun: dryRun
        )
        return try await self.resetAddressAttribute(input, logger: logger)
    }

    /// Resets the default KMS key for EBS encryption for your account in this Region  to the Amazon Web Services managed KMS key for EBS. After resetting the default KMS key to the Amazon Web Services managed KMS key, you can continue to encrypt by a  customer managed KMS key by specifying it when you create the volume. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func resetEbsDefaultKmsKeyId(_ input: ResetEbsDefaultKmsKeyIdRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ResetEbsDefaultKmsKeyIdResult {
        try await self.client.execute(
            operation: "ResetEbsDefaultKmsKeyId", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets the default KMS key for EBS encryption for your account in this Region  to the Amazon Web Services managed KMS key for EBS. After resetting the default KMS key to the Amazon Web Services managed KMS key, you can continue to encrypt by a  customer managed KMS key by specifying it when you create the volume. For more information, see Amazon EBS encryption in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetEbsDefaultKmsKeyId(
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ResetEbsDefaultKmsKeyIdResult {
        let input = ResetEbsDefaultKmsKeyIdRequest(
            dryRun: dryRun
        )
        return try await self.resetEbsDefaultKmsKeyId(input, logger: logger)
    }

    /// Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value.
    /// 		    You can only reset the load permission attribute.
    @Sendable
    @inlinable
    public func resetFpgaImageAttribute(_ input: ResetFpgaImageAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> ResetFpgaImageAttributeResult {
        try await self.client.execute(
            operation: "ResetFpgaImageAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value.
    /// 		    You can only reset the load permission attribute.
    ///
    /// Parameters:
    ///   - attribute: The attribute.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fpgaImageId: The ID of the AFI.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetFpgaImageAttribute(
        attribute: ResetFpgaImageAttributeName? = nil,
        dryRun: Bool? = nil,
        fpgaImageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> ResetFpgaImageAttributeResult {
        let input = ResetFpgaImageAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            fpgaImageId: fpgaImageId
        )
        return try await self.resetFpgaImageAttribute(input, logger: logger)
    }

    /// Resets an attribute of an AMI to its default value.
    @Sendable
    @inlinable
    public func resetImageAttribute(_ input: ResetImageAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ResetImageAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets an attribute of an AMI to its default value.
    ///
    /// Parameters:
    ///   - attribute: The attribute to reset (currently you can only reset the launch permission attribute).
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetImageAttribute(
        attribute: ResetImageAttributeName? = nil,
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ResetImageAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.resetImageAttribute(input, logger: logger)
    }

    /// Resets an attribute of an instance to its default value. To reset the kernel or ramdisk, the instance must be in a stopped state. To reset the sourceDestCheck, the instance can be either running or stopped. The sourceDestCheck attribute controls whether source/destination checking is enabled. The default value is true, which means checking is enabled. This value must be false for a NAT instance to perform NAT. For more information, see NAT instances in the Amazon VPC User Guide.
    @Sendable
    @inlinable
    public func resetInstanceAttribute(_ input: ResetInstanceAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ResetInstanceAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets an attribute of an instance to its default value. To reset the kernel or ramdisk, the instance must be in a stopped state. To reset the sourceDestCheck, the instance can be either running or stopped. The sourceDestCheck attribute controls whether source/destination checking is enabled. The default value is true, which means checking is enabled. This value must be false for a NAT instance to perform NAT. For more information, see NAT instances in the Amazon VPC User Guide.
    ///
    /// Parameters:
    ///   - attribute: The attribute to reset.  You can only reset the following attributes: kernel | ramdisk | sourceDestCheck.
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetInstanceAttribute(
        attribute: InstanceAttributeName? = nil,
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ResetInstanceAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            instanceId: instanceId
        )
        return try await self.resetInstanceAttribute(input, logger: logger)
    }

    /// Resets a network interface attribute. You can specify only one attribute at a time.
    @Sendable
    @inlinable
    public func resetNetworkInterfaceAttribute(_ input: ResetNetworkInterfaceAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ResetNetworkInterfaceAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets a network interface attribute. You can specify only one attribute at a time.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - sourceDestCheck: The source/destination checking attribute. Resets the value to true.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetNetworkInterfaceAttribute(
        dryRun: Bool? = nil,
        networkInterfaceId: String? = nil,
        sourceDestCheck: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ResetNetworkInterfaceAttributeRequest(
            dryRun: dryRun, 
            networkInterfaceId: networkInterfaceId, 
            sourceDestCheck: sourceDestCheck
        )
        return try await self.resetNetworkInterfaceAttribute(input, logger: logger)
    }

    /// Resets permission settings for the specified snapshot. For more information about modifying snapshot permissions, see Share a snapshot in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func resetSnapshotAttribute(_ input: ResetSnapshotAttributeRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "ResetSnapshotAttribute", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Resets permission settings for the specified snapshot. For more information about modifying snapshot permissions, see Share a snapshot in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - attribute: The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - snapshotId: The ID of the snapshot.
    ///   - logger: Logger use during operation
    @inlinable
    public func resetSnapshotAttribute(
        attribute: SnapshotAttributeName? = nil,
        dryRun: Bool? = nil,
        snapshotId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = ResetSnapshotAttributeRequest(
            attribute: attribute, 
            dryRun: dryRun, 
            snapshotId: snapshotId
        )
        return try await self.resetSnapshotAttribute(input, logger: logger)
    }

    ///  This action is deprecated.  Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.
    @Sendable
    @inlinable
    public func restoreAddressToClassic(_ input: RestoreAddressToClassicRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreAddressToClassicResult {
        try await self.client.execute(
            operation: "RestoreAddressToClassic", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    ///  This action is deprecated.  Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - publicIp: The Elastic IP address.
    ///   - logger: Logger use during operation
    @inlinable
    public func restoreAddressToClassic(
        dryRun: Bool? = nil,
        publicIp: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestoreAddressToClassicResult {
        let input = RestoreAddressToClassicRequest(
            dryRun: dryRun, 
            publicIp: publicIp
        )
        return try await self.restoreAddressToClassic(input, logger: logger)
    }

    /// Restores an AMI from the Recycle Bin. For more information, see Recycle Bin in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func restoreImageFromRecycleBin(_ input: RestoreImageFromRecycleBinRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreImageFromRecycleBinResult {
        try await self.client.execute(
            operation: "RestoreImageFromRecycleBin", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Restores an AMI from the Recycle Bin. For more information, see Recycle Bin in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageId: The ID of the AMI to restore.
    ///   - logger: Logger use during operation
    @inlinable
    public func restoreImageFromRecycleBin(
        dryRun: Bool? = nil,
        imageId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestoreImageFromRecycleBinResult {
        let input = RestoreImageFromRecycleBinRequest(
            dryRun: dryRun, 
            imageId: imageId
        )
        return try await self.restoreImageFromRecycleBin(input, logger: logger)
    }

    /// Restores the entries from a previous version of a managed prefix list to a new version of the prefix list.
    @Sendable
    @inlinable
    public func restoreManagedPrefixListVersion(_ input: RestoreManagedPrefixListVersionRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreManagedPrefixListVersionResult {
        try await self.client.execute(
            operation: "RestoreManagedPrefixListVersion", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Restores the entries from a previous version of a managed prefix list to a new version of the prefix list.
    ///
    /// Parameters:
    ///   - currentVersion: The current version number for the prefix list.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - prefixListId: The ID of the prefix list.
    ///   - previousVersion: The version to restore.
    ///   - logger: Logger use during operation
    @inlinable
    public func restoreManagedPrefixListVersion(
        currentVersion: Int64? = nil,
        dryRun: Bool? = nil,
        prefixListId: String? = nil,
        previousVersion: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestoreManagedPrefixListVersionResult {
        let input = RestoreManagedPrefixListVersionRequest(
            currentVersion: currentVersion, 
            dryRun: dryRun, 
            prefixListId: prefixListId, 
            previousVersion: previousVersion
        )
        return try await self.restoreManagedPrefixListVersion(input, logger: logger)
    }

    /// Restores a snapshot from the Recycle Bin. For more information, see Restore  snapshots from the Recycle Bin in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func restoreSnapshotFromRecycleBin(_ input: RestoreSnapshotFromRecycleBinRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreSnapshotFromRecycleBinResult {
        try await self.client.execute(
            operation: "RestoreSnapshotFromRecycleBin", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Restores a snapshot from the Recycle Bin. For more information, see Restore  snapshots from the Recycle Bin in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - snapshotId: The ID of the snapshot to restore.
    ///   - logger: Logger use during operation
    @inlinable
    public func restoreSnapshotFromRecycleBin(
        dryRun: Bool? = nil,
        snapshotId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestoreSnapshotFromRecycleBinResult {
        let input = RestoreSnapshotFromRecycleBinRequest(
            dryRun: dryRun, 
            snapshotId: snapshotId
        )
        return try await self.restoreSnapshotFromRecycleBin(input, logger: logger)
    }

    /// Restores an archived Amazon EBS snapshot for use temporarily or permanently, or modifies the restore  period or restore type for a snapshot that was previously temporarily restored. For more information see  Restore an archived snapshot and  modify the restore period or restore type for a temporarily restored snapshot in the Amazon EBS User Guide.
    @Sendable
    @inlinable
    public func restoreSnapshotTier(_ input: RestoreSnapshotTierRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RestoreSnapshotTierResult {
        try await self.client.execute(
            operation: "RestoreSnapshotTier", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Restores an archived Amazon EBS snapshot for use temporarily or permanently, or modifies the restore  period or restore type for a snapshot that was previously temporarily restored. For more information see  Restore an archived snapshot and  modify the restore period or restore type for a temporarily restored snapshot in the Amazon EBS User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - permanentRestore: Indicates whether to permanently restore an archived snapshot. To permanently restore  an archived snapshot, specify true and omit the  RestoreSnapshotTierRequest$TemporaryRestoreDays parameter.
    ///   - snapshotId: The ID of the snapshot to restore.
    ///   - temporaryRestoreDays: Specifies the number of days for which to temporarily restore an archived snapshot.  Required for temporary restores only. The snapshot will be automatically re-archived  after this period. To temporarily restore an archived snapshot, specify the number of days and omit  the PermanentRestore parameter or set it to  false.
    ///   - logger: Logger use during operation
    @inlinable
    public func restoreSnapshotTier(
        dryRun: Bool? = nil,
        permanentRestore: Bool? = nil,
        snapshotId: String? = nil,
        temporaryRestoreDays: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RestoreSnapshotTierResult {
        let input = RestoreSnapshotTierRequest(
            dryRun: dryRun, 
            permanentRestore: permanentRestore, 
            snapshotId: snapshotId, 
            temporaryRestoreDays: temporaryRestoreDays
        )
        return try await self.restoreSnapshotTier(input, logger: logger)
    }

    /// Removes an ingress authorization rule from a Client VPN endpoint.
    @Sendable
    @inlinable
    public func revokeClientVpnIngress(_ input: RevokeClientVpnIngressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeClientVpnIngressResult {
        try await self.client.execute(
            operation: "RevokeClientVpnIngress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes an ingress authorization rule from a Client VPN endpoint.
    ///
    /// Parameters:
    ///   - accessGroupId: The ID of the Active Directory group for which to revoke access.
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint with which the authorization rule is associated.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - revokeAllGroups: Indicates whether access should be revoked for all groups for a single TargetNetworkCidr that earlier authorized ingress for all groups using AuthorizeAllGroups.
    ///   - targetNetworkCidr: The IPv4 address range, in CIDR notation, of the network for which access is being removed.
    ///   - logger: Logger use during operation
    @inlinable
    public func revokeClientVpnIngress(
        accessGroupId: String? = nil,
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        revokeAllGroups: Bool? = nil,
        targetNetworkCidr: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RevokeClientVpnIngressResult {
        let input = RevokeClientVpnIngressRequest(
            accessGroupId: accessGroupId, 
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            revokeAllGroups: revokeAllGroups, 
            targetNetworkCidr: targetNetworkCidr
        )
        return try await self.revokeClientVpnIngress(input, logger: logger)
    }

    /// Removes the specified outbound (egress) rules from the specified security group. You can specify rules using either rule IDs or security group rule properties. If you use rule properties, the values that you specify (for example, ports) must match the existing rule's  values exactly. Each rule has a protocol, from and to ports, and destination (CIDR range,  security group, or prefix list). For the TCP and UDP protocols, you must also specify the  destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type  and code. If the security group rule has a description, you do not need to specify the description  to revoke the rule. For a default VPC, if the values you specify do not match the existing rule's values, no error is returned, and the output describes the security group rules that were not revoked. Amazon Web Services recommends that you describe the security group to verify that the rules were removed. Rule changes are propagated to instances within the security group as quickly as possible. However,  a small delay might occur.
    @Sendable
    @inlinable
    public func revokeSecurityGroupEgress(_ input: RevokeSecurityGroupEgressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeSecurityGroupEgressResult {
        try await self.client.execute(
            operation: "RevokeSecurityGroupEgress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the specified outbound (egress) rules from the specified security group. You can specify rules using either rule IDs or security group rule properties. If you use rule properties, the values that you specify (for example, ports) must match the existing rule's  values exactly. Each rule has a protocol, from and to ports, and destination (CIDR range,  security group, or prefix list). For the TCP and UDP protocols, you must also specify the  destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type  and code. If the security group rule has a description, you do not need to specify the description  to revoke the rule. For a default VPC, if the values you specify do not match the existing rule's values, no error is returned, and the output describes the security group rules that were not revoked. Amazon Web Services recommends that you describe the security group to verify that the rules were removed. Rule changes are propagated to instances within the security group as quickly as possible. However,  a small delay might occur.
    ///
    /// Parameters:
    ///   - cidrIp: Not supported. Use a set of IP permissions to specify the CIDR.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fromPort: Not supported. Use a set of IP permissions to specify the port.
    ///   - groupId: The ID of the security group.
    ///   - ipPermissions: The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
    ///   - ipProtocol: Not supported. Use a set of IP permissions to specify the protocol name or number.
    ///   - securityGroupRuleIds: The IDs of the security group rules.
    ///   - sourceSecurityGroupName: Not supported. Use a set of IP permissions to specify a destination security group.
    ///   - sourceSecurityGroupOwnerId: Not supported. Use a set of IP permissions to specify a destination security group.
    ///   - toPort: Not supported. Use a set of IP permissions to specify the port.
    ///   - logger: Logger use during operation
    @inlinable
    public func revokeSecurityGroupEgress(
        cidrIp: String? = nil,
        dryRun: Bool? = nil,
        fromPort: Int? = nil,
        groupId: String? = nil,
        ipPermissions: [IpPermission]? = nil,
        ipProtocol: String? = nil,
        securityGroupRuleIds: [String]? = nil,
        sourceSecurityGroupName: String? = nil,
        sourceSecurityGroupOwnerId: String? = nil,
        toPort: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RevokeSecurityGroupEgressResult {
        let input = RevokeSecurityGroupEgressRequest(
            cidrIp: cidrIp, 
            dryRun: dryRun, 
            fromPort: fromPort, 
            groupId: groupId, 
            ipPermissions: ipPermissions, 
            ipProtocol: ipProtocol, 
            securityGroupRuleIds: securityGroupRuleIds, 
            sourceSecurityGroupName: sourceSecurityGroupName, 
            sourceSecurityGroupOwnerId: sourceSecurityGroupOwnerId, 
            toPort: toPort
        )
        return try await self.revokeSecurityGroupEgress(input, logger: logger)
    }

    /// Removes the specified inbound (ingress) rules from a security group. You can specify rules using either rule IDs or security group rule properties. If you use rule properties, the values that you specify (for example, ports) must match the existing rule's  values exactly. Each rule has a protocol, from and to ports, and source (CIDR range,  security group, or prefix list). For the TCP and UDP protocols, you must also specify the  destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type  and code. If the security group rule has a description, you do not need to specify the description  to revoke the rule. For a default VPC, if the values you specify do not match the existing rule's values, no error is returned, and the output describes the security group rules that were not revoked. For a non-default VPC, if the values you specify do not match the existing rule's values, an InvalidPermission.NotFound client error is returned, and no rules are revoked. Amazon Web Services recommends that you describe the security group to verify that the rules were removed. Rule changes are propagated to instances within the security group as quickly as possible.  However, a small delay might occur.
    @Sendable
    @inlinable
    public func revokeSecurityGroupIngress(_ input: RevokeSecurityGroupIngressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RevokeSecurityGroupIngressResult {
        try await self.client.execute(
            operation: "RevokeSecurityGroupIngress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Removes the specified inbound (ingress) rules from a security group. You can specify rules using either rule IDs or security group rule properties. If you use rule properties, the values that you specify (for example, ports) must match the existing rule's  values exactly. Each rule has a protocol, from and to ports, and source (CIDR range,  security group, or prefix list). For the TCP and UDP protocols, you must also specify the  destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type  and code. If the security group rule has a description, you do not need to specify the description  to revoke the rule. For a default VPC, if the values you specify do not match the existing rule's values, no error is returned, and the output describes the security group rules that were not revoked. For a non-default VPC, if the values you specify do not match the existing rule's values, an InvalidPermission.NotFound client error is returned, and no rules are revoked. Amazon Web Services recommends that you describe the security group to verify that the rules were removed. Rule changes are propagated to instances within the security group as quickly as possible.  However, a small delay might occur.
    ///
    /// Parameters:
    ///   - cidrIp: The CIDR IP address range. You can't specify this parameter when specifying a source security group.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - fromPort: If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP, this is the ICMP type or -1 (all ICMP types).
    ///   - groupId: The ID of the security group.
    ///   - groupName: [Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
    ///   - ipPermissions: The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.
    ///   - ipProtocol: The IP protocol name (tcp, udp, icmp) or number  (see Protocol Numbers).  Use -1 to specify all.
    ///   - securityGroupRuleIds: The IDs of the security group rules.
    ///   - sourceSecurityGroupName: [Default VPC] The name of the source security group. You can't specify this parameter  in combination with the following parameters: the CIDR IP address range, the start of the port range,  the IP protocol, and the end of the port range. The source security group must be in the same VPC.  To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
    ///   - sourceSecurityGroupOwnerId: Not supported.
    ///   - toPort: If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP, this is the ICMP code or -1 (all ICMP codes).
    ///   - logger: Logger use during operation
    @inlinable
    public func revokeSecurityGroupIngress(
        cidrIp: String? = nil,
        dryRun: Bool? = nil,
        fromPort: Int? = nil,
        groupId: String? = nil,
        groupName: String? = nil,
        ipPermissions: [IpPermission]? = nil,
        ipProtocol: String? = nil,
        securityGroupRuleIds: [String]? = nil,
        sourceSecurityGroupName: String? = nil,
        sourceSecurityGroupOwnerId: String? = nil,
        toPort: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RevokeSecurityGroupIngressResult {
        let input = RevokeSecurityGroupIngressRequest(
            cidrIp: cidrIp, 
            dryRun: dryRun, 
            fromPort: fromPort, 
            groupId: groupId, 
            groupName: groupName, 
            ipPermissions: ipPermissions, 
            ipProtocol: ipProtocol, 
            securityGroupRuleIds: securityGroupRuleIds, 
            sourceSecurityGroupName: sourceSecurityGroupName, 
            sourceSecurityGroupOwnerId: sourceSecurityGroupOwnerId, 
            toPort: toPort
        )
        return try await self.revokeSecurityGroupIngress(input, logger: logger)
    }

    /// Launches the specified number of instances using an AMI for which you have permissions. You can specify a number of options, or leave the default options. The following rules apply:   If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.   All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.   Not all instance types support IPv6 addresses. For more information, see Instance types.   If you don't specify a security group ID, we use the default security group for the VPC. For more information, see Security groups.   If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.   You can create a launch template, which is a resource that contains the parameters to launch an instance. When you launch an instance using RunInstances, you can specify the launch template instead of specifying the launch parameters. To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.  RunInstances is subject to both request rate limiting and resource rate limiting. For more information, see Request throttling. An instance is ready for you to use when it's in the running state. You can check the state of your instance using DescribeInstances. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see CreateTags and Tagging your Amazon EC2 resources. Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see Key pairs. For troubleshooting, see What to do if an instance immediately terminates, and Troubleshooting connecting to your instance.
    @Sendable
    @inlinable
    public func runInstances(_ input: RunInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> Reservation {
        try await self.client.execute(
            operation: "RunInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Launches the specified number of instances using an AMI for which you have permissions. You can specify a number of options, or leave the default options. The following rules apply:   If you don't specify a subnet ID, we choose a default subnet from your default VPC for you. If you don't have a default VPC, you must specify a subnet ID in the request.   All instances have a network interface with a primary private IPv4 address. If you don't specify this address, we choose one from the IPv4 range of your subnet.   Not all instance types support IPv6 addresses. For more information, see Instance types.   If you don't specify a security group ID, we use the default security group for the VPC. For more information, see Security groups.   If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.   You can create a launch template, which is a resource that contains the parameters to launch an instance. When you launch an instance using RunInstances, you can specify the launch template instead of specifying the launch parameters. To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.  RunInstances is subject to both request rate limiting and resource rate limiting. For more information, see Request throttling. An instance is ready for you to use when it's in the running state. You can check the state of your instance using DescribeInstances. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see CreateTags and Tagging your Amazon EC2 resources. Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see Key pairs. For troubleshooting, see What to do if an instance immediately terminates, and Troubleshooting connecting to your instance.
    ///
    /// Parameters:
    ///   - additionalInfo: Reserved.
    ///   - blockDeviceMappings: The block device mapping, which defines the EBS volumes and instance store volumes to attach to the instance at launch. For more information, see Block device mappings in the Amazon EC2 User Guide.
    ///   - capacityReservationSpecification: Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone, and tenancy).
    ///   - clientToken: Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
    ///   - cpuOptions: The CPU options for the instance. For more information, see Optimize CPU options in the Amazon EC2 User Guide.
    ///   - creditSpecification: The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited. To change this attribute after launch, use  ModifyInstanceCreditSpecification. For more information, see Burstable performance instances in the Amazon EC2 User Guide. Default: standard (T2 instances) or unlimited (T3/T3a/T4g instances) For T3 instances with host tenancy, only standard is supported.
    ///   - disableApiStop: Indicates whether an instance is enabled for stop protection. For more information, see Stop protection.
    ///   - disableApiTermination: If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance. Default: false
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - ebsOptimized: Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false
    ///   - elasticGpuSpecification: An elastic GPU to associate with the instance.  Amazon Elastic Graphics reached end of life on January 8, 2024.
    ///   - elasticInferenceAccelerators: An elastic inference accelerator to associate with the instance.  Amazon Elastic Inference is no longer available.
    ///   - enablePrimaryIpv6: If you’re launching an instance into a dual-stack or IPv6-only subnet, you can enable assigning a primary IPv6 address. A primary IPv6 address is an IPv6 GUA address associated with an ENI that you have enabled to use a primary IPv6 address. Use this option if an instance relies on its IPv6 address not changing. When you launch the instance, Amazon Web Services will automatically assign an IPv6 address associated with the ENI attached to your instance to be the primary IPv6 address. Once you enable an IPv6 GUA address to be a primary IPv6, you cannot disable it. When you enable an IPv6 GUA address to be a primary IPv6, the first IPv6 GUA will be made the primary IPv6 address until the instance is terminated or the network interface is detached. If you have multiple IPv6 addresses associated with an ENI attached to your instance and you enable a primary IPv6 address, the first IPv6 GUA address associated with the ENI becomes the primary IPv6 address.
    ///   - enclaveOptions: Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see What is Amazon Web Services Nitro Enclaves? in the Amazon Web Services Nitro Enclaves User Guide. You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.
    ///   - hibernationOptions: Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the hibernation prerequisites. For more information, see Hibernate your Amazon EC2 instance in the Amazon EC2 User Guide. You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.
    ///   - iamInstanceProfile: The name or Amazon Resource Name (ARN) of an IAM instance profile.
    ///   - imageId: The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
    ///   - instanceInitiatedShutdownBehavior: Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop
    ///   - instanceMarketOptions: The market (purchasing) option for the instances. For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
    ///   - instanceType: The instance type. For more information, see Amazon EC2 instance types in the Amazon EC2 User Guide.
    ///   - ipv6AddressCount: The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
    ///   - ipv6Addresses: The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
    ///   - kernelId: The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB in the Amazon EC2 User Guide.
    ///   - keyName: The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
    ///   - launchTemplate: The launch template. Any additional parameters that you specify for the new instance  overwrite the corresponding parameters included in the launch template.
    ///   - licenseSpecifications: The license configurations.
    ///   - maintenanceOptions: The maintenance and recovery options for the instance.
    ///   - maxCount: The maximum number of instances to launch. If you specify a value that is more capacity than Amazon EC2 can launch in the target Availability Zone, Amazon EC2  launches the largest possible number of instances above the specified minimum count. Constraints: Between 1 and the quota for the specified instance type for your account for this Region.  For more information, see Amazon EC2 instance type quotas.
    ///   - metadataOptions: The metadata options for the instance. For more information, see Instance metadata and user data.
    ///   - minCount: The minimum number of instances to launch. If you specify a value that is more capacity than Amazon EC2 can provide in the target Availability Zone, Amazon EC2 does not launch any instances. Constraints: Between 1 and the quota for the specified instance type for your account for this Region. For more information, see Amazon EC2 instance type quotas.
    ///   - monitoring: Specifies whether detailed monitoring is enabled for the instance.
    ///   - networkInterfaces: The network interfaces to associate with the instance.
    ///   - operator: Reserved for internal use.
    ///   - placement: The placement for the instance.
    ///   - privateDnsNameOptions: The options for the instance hostname.  The default values are inherited from the subnet. Applies only if creating a network interface, not attaching an existing one.
    ///   - privateIpAddress: The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet. Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request. You cannot specify this option and the network interfaces option in the same request.
    ///   - ramdiskId: The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB in the Amazon EC2 User Guide.
    ///   - securityGroupIds: The IDs of the security groups. You can create a security group using CreateSecurityGroup. If you specify a network interface, you must specify any security groups as part of the network interface instead of using this parameter.
    ///   - securityGroups: [Default VPC] The names of the security groups. If you specify a network interface, you must specify any security groups as part of the network interface instead of using this parameter. Default: Amazon EC2 uses the default security group.
    ///   - subnetId: The ID of the subnet to launch the instance into. If you specify a network interface, you must specify any subnets as part of the network interface instead of using this parameter.
    ///   - tagSpecifications: The tags to apply to the resources that are created during instance launch. You can specify tags for the following resources only:   Instances   Volumes   Spot Instance requests   Network interfaces   To tag a resource after it has been created, see CreateTags.
    ///   - userData: The user data to make available to the instance. User data must be base64-encoded. Depending on the tool or SDK that you're using, the base64-encoding might be performed for you. For more information, see Work with instance user data.
    ///   - logger: Logger use during operation
    @inlinable
    public func runInstances(
        additionalInfo: String? = nil,
        blockDeviceMappings: [BlockDeviceMapping]? = nil,
        capacityReservationSpecification: CapacityReservationSpecification? = nil,
        clientToken: String? = RunInstancesRequest.idempotencyToken(),
        cpuOptions: CpuOptionsRequest? = nil,
        creditSpecification: CreditSpecificationRequest? = nil,
        disableApiStop: Bool? = nil,
        disableApiTermination: Bool? = nil,
        dryRun: Bool? = nil,
        ebsOptimized: Bool? = nil,
        elasticGpuSpecification: [ElasticGpuSpecification]? = nil,
        elasticInferenceAccelerators: [ElasticInferenceAccelerator]? = nil,
        enablePrimaryIpv6: Bool? = nil,
        enclaveOptions: EnclaveOptionsRequest? = nil,
        hibernationOptions: HibernationOptionsRequest? = nil,
        iamInstanceProfile: IamInstanceProfileSpecification? = nil,
        imageId: String? = nil,
        instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil,
        instanceMarketOptions: InstanceMarketOptionsRequest? = nil,
        instanceType: InstanceType? = nil,
        ipv6AddressCount: Int? = nil,
        ipv6Addresses: [InstanceIpv6Address]? = nil,
        kernelId: String? = nil,
        keyName: String? = nil,
        launchTemplate: LaunchTemplateSpecification? = nil,
        licenseSpecifications: [LicenseConfigurationRequest]? = nil,
        maintenanceOptions: InstanceMaintenanceOptionsRequest? = nil,
        maxCount: Int? = nil,
        metadataOptions: InstanceMetadataOptionsRequest? = nil,
        minCount: Int? = nil,
        monitoring: RunInstancesMonitoringEnabled? = nil,
        networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil,
        operator: OperatorRequest? = nil,
        placement: Placement? = nil,
        privateDnsNameOptions: PrivateDnsNameOptionsRequest? = nil,
        privateIpAddress: String? = nil,
        ramdiskId: String? = nil,
        securityGroupIds: [String]? = nil,
        securityGroups: [String]? = nil,
        subnetId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        userData: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> Reservation {
        let input = RunInstancesRequest(
            additionalInfo: additionalInfo, 
            blockDeviceMappings: blockDeviceMappings, 
            capacityReservationSpecification: capacityReservationSpecification, 
            clientToken: clientToken, 
            cpuOptions: cpuOptions, 
            creditSpecification: creditSpecification, 
            disableApiStop: disableApiStop, 
            disableApiTermination: disableApiTermination, 
            dryRun: dryRun, 
            ebsOptimized: ebsOptimized, 
            elasticGpuSpecification: elasticGpuSpecification, 
            elasticInferenceAccelerators: elasticInferenceAccelerators, 
            enablePrimaryIpv6: enablePrimaryIpv6, 
            enclaveOptions: enclaveOptions, 
            hibernationOptions: hibernationOptions, 
            iamInstanceProfile: iamInstanceProfile, 
            imageId: imageId, 
            instanceInitiatedShutdownBehavior: instanceInitiatedShutdownBehavior, 
            instanceMarketOptions: instanceMarketOptions, 
            instanceType: instanceType, 
            ipv6AddressCount: ipv6AddressCount, 
            ipv6Addresses: ipv6Addresses, 
            kernelId: kernelId, 
            keyName: keyName, 
            launchTemplate: launchTemplate, 
            licenseSpecifications: licenseSpecifications, 
            maintenanceOptions: maintenanceOptions, 
            maxCount: maxCount, 
            metadataOptions: metadataOptions, 
            minCount: minCount, 
            monitoring: monitoring, 
            networkInterfaces: networkInterfaces, 
            operator: `operator`, 
            placement: placement, 
            privateDnsNameOptions: privateDnsNameOptions, 
            privateIpAddress: privateIpAddress, 
            ramdiskId: ramdiskId, 
            securityGroupIds: securityGroupIds, 
            securityGroups: securityGroups, 
            subnetId: subnetId, 
            tagSpecifications: tagSpecifications, 
            userData: userData
        )
        return try await self.runInstances(input, logger: logger)
    }

    /// Launches the specified Scheduled Instances. Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using PurchaseScheduledInstances. You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes.
    @Sendable
    @inlinable
    public func runScheduledInstances(_ input: RunScheduledInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> RunScheduledInstancesResult {
        try await self.client.execute(
            operation: "RunScheduledInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Launches the specified Scheduled Instances. Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using PurchaseScheduledInstances. You must launch a Scheduled Instance during its scheduled time period. You can't stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that ensures the idempotency of the request.  For more information, see Ensuring Idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceCount: The number of instances. Default: 1
    ///   - launchSpecification: The launch specification. You must match the instance type, Availability Zone,  network, and platform of the schedule that you purchased.
    ///   - scheduledInstanceId: The Scheduled Instance ID.
    ///   - logger: Logger use during operation
    @inlinable
    public func runScheduledInstances(
        clientToken: String? = RunScheduledInstancesRequest.idempotencyToken(),
        dryRun: Bool? = nil,
        instanceCount: Int? = nil,
        launchSpecification: ScheduledInstancesLaunchSpecification? = nil,
        scheduledInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> RunScheduledInstancesResult {
        let input = RunScheduledInstancesRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            instanceCount: instanceCount, 
            launchSpecification: launchSpecification, 
            scheduledInstanceId: scheduledInstanceId
        )
        return try await self.runScheduledInstances(input, logger: logger)
    }

    /// Searches for routes in the specified local gateway route table.
    @Sendable
    @inlinable
    public func searchLocalGatewayRoutes(_ input: SearchLocalGatewayRoutesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchLocalGatewayRoutesResult {
        try await self.client.execute(
            operation: "SearchLocalGatewayRoutes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches for routes in the specified local gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    prefix-list-id - The ID of the prefix list.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter.  For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match  as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route.    type - The route type.
    ///   - localGatewayRouteTableId: The ID of the local gateway route table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchLocalGatewayRoutes(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayRouteTableId: String? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchLocalGatewayRoutesResult {
        let input = SearchLocalGatewayRoutesRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayRouteTableId: localGatewayRouteTableId, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        return try await self.searchLocalGatewayRoutes(input, logger: logger)
    }

    /// Searches one or more  transit gateway multicast groups and returns the group membership information.
    @Sendable
    @inlinable
    public func searchTransitGatewayMulticastGroups(_ input: SearchTransitGatewayMulticastGroupsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchTransitGatewayMulticastGroupsResult {
        try await self.client.execute(
            operation: "SearchTransitGatewayMulticastGroups", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches one or more  transit gateway multicast groups and returns the group membership information.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    group-ip-address - The IP address of the  transit gateway multicast group.    is-group-member - The resource is a group member. Valid values are true | false.    is-group-source - The resource is a group source. Valid values are true | false.    member-type - The member type. Valid values are igmp | static.    resource-id - The ID of the resource.    resource-type - The type of resource. Valid values are vpc | vpn | direct-connect-gateway | tgw-peering.    source-type - The source type. Valid values are igmp | static.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - nextToken: The token for the next page of results.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchTransitGatewayMulticastGroups(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchTransitGatewayMulticastGroupsResult {
        let input = SearchTransitGatewayMulticastGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return try await self.searchTransitGatewayMulticastGroups(input, logger: logger)
    }

    /// Searches for routes in the specified transit gateway route table.
    @Sendable
    @inlinable
    public func searchTransitGatewayRoutes(_ input: SearchTransitGatewayRoutesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> SearchTransitGatewayRoutesResult {
        try await self.client.execute(
            operation: "SearchTransitGatewayRoutes", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Searches for routes in the specified transit gateway route table.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    attachment.transit-gateway-attachment-id- The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    attachment.resource-type - The attachment resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    prefix-list-id - The ID of the prefix list.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route (active | blackhole).    type - The type of route (propagated | static).
    ///   - maxResults: The maximum number of routes to return. If a value is not provided, the default is 1000.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger use during operation
    @inlinable
    public func searchTransitGatewayRoutes(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> SearchTransitGatewayRoutesResult {
        let input = SearchTransitGatewayRoutesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return try await self.searchTransitGatewayRoutes(input, logger: logger)
    }

    /// Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a kernel panic (on Linux instances), or a blue screen/stop error (on Windows instances). For instances based on Intel and AMD processors, the interrupt is received as a non-maskable interrupt (NMI). In general, the operating system crashes and reboots when a kernel panic or stop error is triggered. The operating system can also be configured to perform diagnostic tasks, such as generating a memory dump file, loading a secondary kernel, or obtaining a call trace. Before sending a diagnostic interrupt to your instance, ensure that its operating system is configured to perform the required diagnostic tasks. For more information about configuring your operating system to generate a crash dump when a kernel panic or stop error occurs, see Send a diagnostic interrupt (for advanced users) in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func sendDiagnosticInterrupt(_ input: SendDiagnosticInterruptRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "SendDiagnosticInterrupt", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a kernel panic (on Linux instances), or a blue screen/stop error (on Windows instances). For instances based on Intel and AMD processors, the interrupt is received as a non-maskable interrupt (NMI). In general, the operating system crashes and reboots when a kernel panic or stop error is triggered. The operating system can also be configured to perform diagnostic tasks, such as generating a memory dump file, loading a secondary kernel, or obtaining a call trace. Before sending a diagnostic interrupt to your instance, ensure that its operating system is configured to perform the required diagnostic tasks. For more information about configuring your operating system to generate a crash dump when a kernel panic or stop error occurs, see Send a diagnostic interrupt (for advanced users) in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the instance.
    ///   - logger: Logger use during operation
    @inlinable
    public func sendDiagnosticInterrupt(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = SendDiagnosticInterruptRequest(
            dryRun: dryRun, 
            instanceId: instanceId
        )
        return try await self.sendDiagnosticInterrupt(input, logger: logger)
    }

    /// Generates an account status report. The report is generated asynchronously, and can take several hours to complete. The report provides the current status of all attributes supported by declarative policies for the accounts within the specified scope. The scope is determined by the specified TargetId, which can represent an individual account, or all the accounts that fall under the specified organizational unit (OU) or root (the entire Amazon Web Services Organization). The report is saved to your specified S3 bucket, using the following path structure (with the italicized placeholders representing your specific values):  s3://amzn-s3-demo-bucket/your-optional-s3-prefix/ec2_targetId_reportId_yyyyMMddThhmmZ.csv   Prerequisites for generating a report    The StartDeclarativePoliciesReport API can only be called by the management account or delegated administrators for the organization.   An S3 bucket must be available before generating the report (you can create a new one or use an existing one), and it must have an appropriate bucket policy. For a sample S3 policy, see Sample Amazon S3 policy under .   Trusted access must be enabled for the service for which the declarative policy will enforce a baseline configuration. If you use the Amazon Web Services Organizations console, this is done automatically when you enable declarative policies. The API uses the following service principal to identify the EC2 service: ec2.amazonaws.com. For more information on how to enable trusted access with the Amazon Web Services CLI and Amazon Web Services SDKs, see Using Organizations with other Amazon Web Services services in the Amazon Web Services Organizations User Guide.   Only one report per organization can be generated at a time. Attempting to generate a report while another is in progress will result in an error.   For more information, including the required IAM permissions to run this API, see Generating the account status report for declarative policies in the Amazon Web Services Organizations User Guide.
    @Sendable
    @inlinable
    public func startDeclarativePoliciesReport(_ input: StartDeclarativePoliciesReportRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartDeclarativePoliciesReportResult {
        try await self.client.execute(
            operation: "StartDeclarativePoliciesReport", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Generates an account status report. The report is generated asynchronously, and can take several hours to complete. The report provides the current status of all attributes supported by declarative policies for the accounts within the specified scope. The scope is determined by the specified TargetId, which can represent an individual account, or all the accounts that fall under the specified organizational unit (OU) or root (the entire Amazon Web Services Organization). The report is saved to your specified S3 bucket, using the following path structure (with the italicized placeholders representing your specific values):  s3://amzn-s3-demo-bucket/your-optional-s3-prefix/ec2_targetId_reportId_yyyyMMddThhmmZ.csv   Prerequisites for generating a report    The StartDeclarativePoliciesReport API can only be called by the management account or delegated administrators for the organization.   An S3 bucket must be available before generating the report (you can create a new one or use an existing one), and it must have an appropriate bucket policy. For a sample S3 policy, see Sample Amazon S3 policy under .   Trusted access must be enabled for the service for which the declarative policy will enforce a baseline configuration. If you use the Amazon Web Services Organizations console, this is done automatically when you enable declarative policies. The API uses the following service principal to identify the EC2 service: ec2.amazonaws.com. For more information on how to enable trusted access with the Amazon Web Services CLI and Amazon Web Services SDKs, see Using Organizations with other Amazon Web Services services in the Amazon Web Services Organizations User Guide.   Only one report per organization can be generated at a time. Attempting to generate a report while another is in progress will result in an error.   For more information, including the required IAM permissions to run this API, see Generating the account status report for declarative policies in the Amazon Web Services Organizations User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - s3Bucket: The name of the S3 bucket where the report will be saved.
    ///   - s3Prefix: The prefix for your S3 object.
    ///   - tagSpecifications: The tags to apply.
    ///   - targetId: The root ID, organizational unit ID, or account ID. Format:   For root: r-ab12    For OU: ou-ab12-cdef1234    For account: 123456789012
    ///   - logger: Logger use during operation
    @inlinable
    public func startDeclarativePoliciesReport(
        dryRun: Bool? = nil,
        s3Bucket: String? = nil,
        s3Prefix: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        targetId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartDeclarativePoliciesReportResult {
        let input = StartDeclarativePoliciesReportRequest(
            dryRun: dryRun, 
            s3Bucket: s3Bucket, 
            s3Prefix: s3Prefix, 
            tagSpecifications: tagSpecifications, 
            targetId: targetId
        )
        return try await self.startDeclarativePoliciesReport(input, logger: logger)
    }

    /// Starts an Amazon EBS-backed instance that you've previously stopped. Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage. Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM. Performing this operation on an instance that uses an instance store as its root device returns an error. If you attempt to start a T3 instance with host tenancy and the unlimited CPU credit option, the request fails. The unlimited CPU credit option is not supported on Dedicated Hosts. Before you start the instance, either change its CPU credit option to standard, or change its tenancy to default or dedicated. For more information, see Stop and start Amazon EC2 instances in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func startInstances(_ input: StartInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartInstancesResult {
        try await self.client.execute(
            operation: "StartInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts an Amazon EBS-backed instance that you've previously stopped. Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage. Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM. Performing this operation on an instance that uses an instance store as its root device returns an error. If you attempt to start a T3 instance with host tenancy and the unlimited CPU credit option, the request fails. The unlimited CPU credit option is not supported on Dedicated Hosts. Before you start the instance, either change its CPU credit option to standard, or change its tenancy to default or dedicated. For more information, see Stop and start Amazon EC2 instances in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - additionalInfo: Reserved.
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceIds: The IDs of the instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func startInstances(
        additionalInfo: String? = nil,
        dryRun: Bool? = nil,
        instanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartInstancesResult {
        let input = StartInstancesRequest(
            additionalInfo: additionalInfo, 
            dryRun: dryRun, 
            instanceIds: instanceIds
        )
        return try await self.startInstances(input, logger: logger)
    }

    /// Starts analyzing the specified Network Access Scope.
    @Sendable
    @inlinable
    public func startNetworkInsightsAccessScopeAnalysis(_ input: StartNetworkInsightsAccessScopeAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartNetworkInsightsAccessScopeAnalysisResult {
        try await self.client.execute(
            operation: "StartNetworkInsightsAccessScopeAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts analyzing the specified Network Access Scope.
    ///
    /// Parameters:
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,  see How to ensure idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - networkInsightsAccessScopeId: The ID of the Network Access Scope.
    ///   - tagSpecifications: The tags to apply.
    ///   - logger: Logger use during operation
    @inlinable
    public func startNetworkInsightsAccessScopeAnalysis(
        clientToken: String? = nil,
        dryRun: Bool? = nil,
        networkInsightsAccessScopeId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartNetworkInsightsAccessScopeAnalysisResult {
        let input = StartNetworkInsightsAccessScopeAnalysisRequest(
            clientToken: clientToken, 
            dryRun: dryRun, 
            networkInsightsAccessScopeId: networkInsightsAccessScopeId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.startNetworkInsightsAccessScopeAnalysis(input, logger: logger)
    }

    /// Starts analyzing the specified path. If the path is reachable, the operation returns the shortest feasible path.
    @Sendable
    @inlinable
    public func startNetworkInsightsAnalysis(_ input: StartNetworkInsightsAnalysisRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartNetworkInsightsAnalysisResult {
        try await self.client.execute(
            operation: "StartNetworkInsightsAnalysis", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Starts analyzing the specified path. If the path is reachable, the operation returns the shortest feasible path.
    ///
    /// Parameters:
    ///   - additionalAccounts: The member accounts that contain resources that the path can traverse.
    ///   - clientToken: Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information,  see How to ensure idempotency.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filterInArns: The Amazon Resource Names (ARN) of the resources that the path must traverse.
    ///   - networkInsightsPathId: The ID of the path.
    ///   - tagSpecifications: The tags to apply.
    ///   - logger: Logger use during operation
    @inlinable
    public func startNetworkInsightsAnalysis(
        additionalAccounts: [String]? = nil,
        clientToken: String? = nil,
        dryRun: Bool? = nil,
        filterInArns: [String]? = nil,
        networkInsightsPathId: String? = nil,
        tagSpecifications: [TagSpecification]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartNetworkInsightsAnalysisResult {
        let input = StartNetworkInsightsAnalysisRequest(
            additionalAccounts: additionalAccounts, 
            clientToken: clientToken, 
            dryRun: dryRun, 
            filterInArns: filterInArns, 
            networkInsightsPathId: networkInsightsPathId, 
            tagSpecifications: tagSpecifications
        )
        return try await self.startNetworkInsightsAnalysis(input, logger: logger)
    }

    /// Initiates the verification process to prove that the service provider owns the private DNS name domain for the endpoint service. The service provider must successfully perform the verification before the consumer can use the name to access the service. Before the service provider runs this command, they must add a record to the DNS server.
    @Sendable
    @inlinable
    public func startVpcEndpointServicePrivateDnsVerification(_ input: StartVpcEndpointServicePrivateDnsVerificationRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StartVpcEndpointServicePrivateDnsVerificationResult {
        try await self.client.execute(
            operation: "StartVpcEndpointServicePrivateDnsVerification", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Initiates the verification process to prove that the service provider owns the private DNS name domain for the endpoint service. The service provider must successfully perform the verification before the consumer can use the name to access the service. Before the service provider runs this command, they must add a record to the DNS server.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - serviceId: The ID of the endpoint service.
    ///   - logger: Logger use during operation
    @inlinable
    public func startVpcEndpointServicePrivateDnsVerification(
        dryRun: Bool? = nil,
        serviceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StartVpcEndpointServicePrivateDnsVerificationResult {
        let input = StartVpcEndpointServicePrivateDnsVerificationRequest(
            dryRun: dryRun, 
            serviceId: serviceId
        )
        return try await self.startVpcEndpointServicePrivateDnsVerification(input, logger: logger)
    }

    /// Stops an Amazon EBS-backed instance. For more information, see Stop and start Amazon EC2 instances in the Amazon EC2 User Guide. You can use the Stop action to hibernate an instance if the instance is enabled for hibernation and it meets the hibernation prerequisites. For more information, see Hibernate your Amazon EC2 instance in the Amazon EC2 User Guide. We don't charge usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage. You can't stop or hibernate instance store-backed instances. You can't use the Stop action to hibernate Spot Instances, but you can specify that Amazon EC2 should hibernate Spot Instances when they are interrupted. For more information, see Hibernating interrupted Spot Instances in the Amazon EC2 User Guide. When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs. Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see Instance lifecycle in the Amazon EC2 User Guide. When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see Troubleshoot stopping your instance in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func stopInstances(_ input: StopInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> StopInstancesResult {
        try await self.client.execute(
            operation: "StopInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops an Amazon EBS-backed instance. For more information, see Stop and start Amazon EC2 instances in the Amazon EC2 User Guide. You can use the Stop action to hibernate an instance if the instance is enabled for hibernation and it meets the hibernation prerequisites. For more information, see Hibernate your Amazon EC2 instance in the Amazon EC2 User Guide. We don't charge usage for a stopped instance, or data transfer fees; however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage. You can't stop or hibernate instance store-backed instances. You can't use the Stop action to hibernate Spot Instances, but you can specify that Amazon EC2 should hibernate Spot Instances when they are interrupted. For more information, see Hibernating interrupted Spot Instances in the Amazon EC2 User Guide. When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs. Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see Instance lifecycle in the Amazon EC2 User Guide. When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see Troubleshoot stopping your instance in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - force: Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances. Default: false
    ///   - hibernate: Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see Hibernate your instance in the Amazon EC2 User Guide. Default: false
    ///   - instanceIds: The IDs of the instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func stopInstances(
        dryRun: Bool? = nil,
        force: Bool? = nil,
        hibernate: Bool? = nil,
        instanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> StopInstancesResult {
        let input = StopInstancesRequest(
            dryRun: dryRun, 
            force: force, 
            hibernate: hibernate, 
            instanceIds: instanceIds
        )
        return try await self.stopInstances(input, logger: logger)
    }

    /// Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.
    @Sendable
    @inlinable
    public func terminateClientVpnConnections(_ input: TerminateClientVpnConnectionsRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TerminateClientVpnConnectionsResult {
        try await self.client.execute(
            operation: "TerminateClientVpnConnections", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.
    ///
    /// Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint to which the client is connected.
    ///   - connectionId: The ID of the client connection to be terminated.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - username: The name of the user who initiated the connection. Use this option to terminate all active connections for
    ///   - logger: Logger use during operation
    @inlinable
    public func terminateClientVpnConnections(
        clientVpnEndpointId: String? = nil,
        connectionId: String? = nil,
        dryRun: Bool? = nil,
        username: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TerminateClientVpnConnectionsResult {
        let input = TerminateClientVpnConnectionsRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            connectionId: connectionId, 
            dryRun: dryRun, 
            username: username
        )
        return try await self.terminateClientVpnConnections(input, logger: logger)
    }

    /// Shuts down the specified instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds.  If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated. If you terminate multiple instances across multiple Availability Zones, and one or more of the specified instances are enabled for termination protection, the request fails with the following results:   The specified instances that are in the same Availability Zone as the protected instance are not terminated.   The specified instances that are in different Availability Zones, where no other specified instances are protected, are successfully terminated.   For example, say you have the following instances:   Instance A: us-east-1a; Not protected   Instance B: us-east-1a; Not protected   Instance C: us-east-1b; Protected   Instance D: us-east-1b; not protected   If you attempt to terminate all of these instances in the same request, the request reports failure with the following results:   Instance A and Instance B are successfully terminated because none of the specified instances in us-east-1a are enabled for termination protection.   Instance C and Instance D fail to terminate because at least one of the specified instances in us-east-1b (Instance C) is enabled for termination protection.   Terminated instances remain visible after termination (for approximately one hour). By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running. You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the DeleteOnTermination block device mapping parameter set to true are automatically deleted. For more information about the differences between stopping and terminating instances, see Instance lifecycle in the Amazon EC2 User Guide. For more information about troubleshooting, see Troubleshooting terminating your instance in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func terminateInstances(_ input: TerminateInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> TerminateInstancesResult {
        try await self.client.execute(
            operation: "TerminateInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Shuts down the specified instances. This operation is idempotent; if you terminate an instance more than once, each call succeeds.  If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated. If you terminate multiple instances across multiple Availability Zones, and one or more of the specified instances are enabled for termination protection, the request fails with the following results:   The specified instances that are in the same Availability Zone as the protected instance are not terminated.   The specified instances that are in different Availability Zones, where no other specified instances are protected, are successfully terminated.   For example, say you have the following instances:   Instance A: us-east-1a; Not protected   Instance B: us-east-1a; Not protected   Instance C: us-east-1b; Protected   Instance D: us-east-1b; not protected   If you attempt to terminate all of these instances in the same request, the request reports failure with the following results:   Instance A and Instance B are successfully terminated because none of the specified instances in us-east-1a are enabled for termination protection.   Instance C and Instance D fail to terminate because at least one of the specified instances in us-east-1b (Instance C) is enabled for termination protection.   Terminated instances remain visible after termination (for approximately one hour). By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running. You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the DeleteOnTermination block device mapping parameter set to true are automatically deleted. For more information about the differences between stopping and terminating instances, see Instance lifecycle in the Amazon EC2 User Guide. For more information about troubleshooting, see Troubleshooting terminating your instance in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceIds: The IDs of the instances. Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.
    ///   - logger: Logger use during operation
    @inlinable
    public func terminateInstances(
        dryRun: Bool? = nil,
        instanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> TerminateInstancesResult {
        let input = TerminateInstancesRequest(
            dryRun: dryRun, 
            instanceIds: instanceIds
        )
        return try await self.terminateInstances(input, logger: logger)
    }

    /// Unassigns one or more IPv6 addresses IPv4 Prefix Delegation prefixes from a network interface.
    @Sendable
    @inlinable
    public func unassignIpv6Addresses(_ input: UnassignIpv6AddressesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UnassignIpv6AddressesResult {
        try await self.client.execute(
            operation: "UnassignIpv6Addresses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Unassigns one or more IPv6 addresses IPv4 Prefix Delegation prefixes from a network interface.
    ///
    /// Parameters:
    ///   - ipv6Addresses: The IPv6 addresses to unassign from the network interface.
    ///   - ipv6Prefixes: The IPv6 prefixes to unassign from the network interface.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - logger: Logger use during operation
    @inlinable
    public func unassignIpv6Addresses(
        ipv6Addresses: [String]? = nil,
        ipv6Prefixes: [String]? = nil,
        networkInterfaceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UnassignIpv6AddressesResult {
        let input = UnassignIpv6AddressesRequest(
            ipv6Addresses: ipv6Addresses, 
            ipv6Prefixes: ipv6Prefixes, 
            networkInterfaceId: networkInterfaceId
        )
        return try await self.unassignIpv6Addresses(input, logger: logger)
    }

    /// Unassigns one or more secondary private IP addresses, or IPv4 Prefix Delegation prefixes from a  	network interface.
    @Sendable
    @inlinable
    public func unassignPrivateIpAddresses(_ input: UnassignPrivateIpAddressesRequest, logger: Logger = AWSClient.loggingDisabled) async throws {
        try await self.client.execute(
            operation: "UnassignPrivateIpAddresses", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Unassigns one or more secondary private IP addresses, or IPv4 Prefix Delegation prefixes from a  	network interface.
    ///
    /// Parameters:
    ///   - ipv4Prefixes: The IPv4 prefixes to unassign from  the network interface.
    ///   - networkInterfaceId: The ID of the network interface.
    ///   - privateIpAddresses: The secondary private IP addresses to unassign from the network interface. You can specify this  	option multiple times to unassign more than one IP address.
    ///   - logger: Logger use during operation
    @inlinable
    public func unassignPrivateIpAddresses(
        ipv4Prefixes: [String]? = nil,
        networkInterfaceId: String? = nil,
        privateIpAddresses: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = UnassignPrivateIpAddressesRequest(
            ipv4Prefixes: ipv4Prefixes, 
            networkInterfaceId: networkInterfaceId, 
            privateIpAddresses: privateIpAddresses
        )
        return try await self.unassignPrivateIpAddresses(input, logger: logger)
    }

    /// Unassigns secondary private IPv4 addresses from a private NAT gateway. You cannot unassign your primary private IP. For more information,  see Edit secondary IP address associations  in the Amazon VPC User Guide. While unassigning is in progress, you cannot assign/unassign additional IP addresses while the connections are being drained. You are, however, allowed to delete the NAT gateway. A private IP address will only be released at the end of MaxDrainDurationSeconds. The private IP addresses stay associated and support the existing connections, but do not support any new connections (new connections are distributed across the remaining assigned private IP address). After the existing connections drain out, the private IP addresses are released.
    @Sendable
    @inlinable
    public func unassignPrivateNatGatewayAddress(_ input: UnassignPrivateNatGatewayAddressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UnassignPrivateNatGatewayAddressResult {
        try await self.client.execute(
            operation: "UnassignPrivateNatGatewayAddress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Unassigns secondary private IPv4 addresses from a private NAT gateway. You cannot unassign your primary private IP. For more information,  see Edit secondary IP address associations  in the Amazon VPC User Guide. While unassigning is in progress, you cannot assign/unassign additional IP addresses while the connections are being drained. You are, however, allowed to delete the NAT gateway. A private IP address will only be released at the end of MaxDrainDurationSeconds. The private IP addresses stay associated and support the existing connections, but do not support any new connections (new connections are distributed across the remaining assigned private IP address). After the existing connections drain out, the private IP addresses are released.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxDrainDurationSeconds: The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in progress. Default value is 350 seconds.
    ///   - natGatewayId: The ID of the NAT gateway.
    ///   - privateIpAddresses: The private IPv4 addresses you want to unassign.
    ///   - logger: Logger use during operation
    @inlinable
    public func unassignPrivateNatGatewayAddress(
        dryRun: Bool? = nil,
        maxDrainDurationSeconds: Int? = nil,
        natGatewayId: String? = nil,
        privateIpAddresses: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UnassignPrivateNatGatewayAddressResult {
        let input = UnassignPrivateNatGatewayAddressRequest(
            dryRun: dryRun, 
            maxDrainDurationSeconds: maxDrainDurationSeconds, 
            natGatewayId: natGatewayId, 
            privateIpAddresses: privateIpAddresses
        )
        return try await self.unassignPrivateNatGatewayAddress(input, logger: logger)
    }

    /// Unlocks a snapshot that is locked in governance mode or that is locked in compliance mode  but still in the cooling-off period. You can't unlock a snapshot that is locked in compliance  mode after the cooling-off period has expired.
    @Sendable
    @inlinable
    public func unlockSnapshot(_ input: UnlockSnapshotRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UnlockSnapshotResult {
        try await self.client.execute(
            operation: "UnlockSnapshot", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Unlocks a snapshot that is locked in governance mode or that is locked in compliance mode  but still in the cooling-off period. You can't unlock a snapshot that is locked in compliance  mode after the cooling-off period has expired.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - snapshotId: The ID of the snapshot to unlock.
    ///   - logger: Logger use during operation
    @inlinable
    public func unlockSnapshot(
        dryRun: Bool? = nil,
        snapshotId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UnlockSnapshotResult {
        let input = UnlockSnapshotRequest(
            dryRun: dryRun, 
            snapshotId: snapshotId
        )
        return try await self.unlockSnapshot(input, logger: logger)
    }

    /// Disables detailed monitoring for a running instance. For more information, see Monitoring your instances and volumes in the Amazon EC2 User Guide.
    @Sendable
    @inlinable
    public func unmonitorInstances(_ input: UnmonitorInstancesRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UnmonitorInstancesResult {
        try await self.client.execute(
            operation: "UnmonitorInstances", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Disables detailed monitoring for a running instance. For more information, see Monitoring your instances and volumes in the Amazon EC2 User Guide.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceIds: The IDs of the instances.
    ///   - logger: Logger use during operation
    @inlinable
    public func unmonitorInstances(
        dryRun: Bool? = nil,
        instanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UnmonitorInstancesResult {
        let input = UnmonitorInstancesRequest(
            dryRun: dryRun, 
            instanceIds: instanceIds
        )
        return try await self.unmonitorInstances(input, logger: logger)
    }

    /// Updates the description of an egress (outbound) security group rule. You
    /// 			can replace an existing description, or add a description to a rule that did not have one
    /// 			previously. You can remove a description for a security group rule by omitting the
    /// 			description parameter in the request.
    @Sendable
    @inlinable
    public func updateSecurityGroupRuleDescriptionsEgress(_ input: UpdateSecurityGroupRuleDescriptionsEgressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSecurityGroupRuleDescriptionsEgressResult {
        try await self.client.execute(
            operation: "UpdateSecurityGroupRuleDescriptionsEgress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the description of an egress (outbound) security group rule. You
    /// 			can replace an existing description, or add a description to a rule that did not have one
    /// 			previously. You can remove a description for a security group rule by omitting the
    /// 			description parameter in the request.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupId: The ID of the security group. You must specify either the security group ID or the
    ///   - groupName: [Default VPC] The name of the security group. You must specify either the security group
    ///   - ipPermissions: The IP permissions for the security group rule. You must specify either the IP permissions
    ///   - securityGroupRuleDescriptions: The description for the egress security group rules. You must specify either the description or the IP permissions.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateSecurityGroupRuleDescriptionsEgress(
        dryRun: Bool? = nil,
        groupId: String? = nil,
        groupName: String? = nil,
        ipPermissions: [IpPermission]? = nil,
        securityGroupRuleDescriptions: [SecurityGroupRuleDescription]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateSecurityGroupRuleDescriptionsEgressResult {
        let input = UpdateSecurityGroupRuleDescriptionsEgressRequest(
            dryRun: dryRun, 
            groupId: groupId, 
            groupName: groupName, 
            ipPermissions: ipPermissions, 
            securityGroupRuleDescriptions: securityGroupRuleDescriptions
        )
        return try await self.updateSecurityGroupRuleDescriptionsEgress(input, logger: logger)
    }

    /// Updates the description of an ingress (inbound) security group rule. You can replace an
    /// 			existing description, or add a description to a rule that did not have one previously.
    /// 		    You can remove a description for a security group rule by omitting the description
    /// 		    parameter in the request.
    @Sendable
    @inlinable
    public func updateSecurityGroupRuleDescriptionsIngress(_ input: UpdateSecurityGroupRuleDescriptionsIngressRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> UpdateSecurityGroupRuleDescriptionsIngressResult {
        try await self.client.execute(
            operation: "UpdateSecurityGroupRuleDescriptionsIngress", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Updates the description of an ingress (inbound) security group rule. You can replace an
    /// 			existing description, or add a description to a rule that did not have one previously.
    /// 		    You can remove a description for a security group rule by omitting the description
    /// 		    parameter in the request.
    ///
    /// Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - groupId: The ID of the security group. You must specify either the security group ID or the
    ///   - groupName: [Default VPC] The name of the security group. You must specify either the security group ID or the security group name. For security groups in a nondefault VPC, you must specify the security group ID.
    ///   - ipPermissions: The IP permissions for the security group rule. You must specify either IP permissions
    ///   - securityGroupRuleDescriptions: The description for the ingress security group rules. You must specify either a description or IP permissions.
    ///   - logger: Logger use during operation
    @inlinable
    public func updateSecurityGroupRuleDescriptionsIngress(
        dryRun: Bool? = nil,
        groupId: String? = nil,
        groupName: String? = nil,
        ipPermissions: [IpPermission]? = nil,
        securityGroupRuleDescriptions: [SecurityGroupRuleDescription]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> UpdateSecurityGroupRuleDescriptionsIngressResult {
        let input = UpdateSecurityGroupRuleDescriptionsIngressRequest(
            dryRun: dryRun, 
            groupId: groupId, 
            groupName: groupName, 
            ipPermissions: ipPermissions, 
            securityGroupRuleDescriptions: securityGroupRuleDescriptions
        )
        return try await self.updateSecurityGroupRuleDescriptionsIngress(input, logger: logger)
    }

    /// Stops advertising an address range that is provisioned as an address pool. You can perform this operation at most once every 10 seconds, even if you specify different  address ranges each time. It can take a few minutes before traffic to the specified addresses stops routing to Amazon Web Services because of BGP propagation delays.
    @Sendable
    @inlinable
    public func withdrawByoipCidr(_ input: WithdrawByoipCidrRequest, logger: Logger = AWSClient.loggingDisabled) async throws -> WithdrawByoipCidrResult {
        try await self.client.execute(
            operation: "WithdrawByoipCidr", 
            path: "/", 
            httpMethod: .POST, 
            serviceConfig: self.config, 
            input: input, 
            logger: logger
        )
    }
    /// Stops advertising an address range that is provisioned as an address pool. You can perform this operation at most once every 10 seconds, even if you specify different  address ranges each time. It can take a few minutes before traffic to the specified addresses stops routing to Amazon Web Services because of BGP propagation delays.
    ///
    /// Parameters:
    ///   - cidr: The address range, in CIDR notation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger use during operation
    @inlinable
    public func withdrawByoipCidr(
        cidr: String? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws -> WithdrawByoipCidrResult {
        let input = WithdrawByoipCidrRequest(
            cidr: cidr, 
            dryRun: dryRun
        )
        return try await self.withdrawByoipCidr(input, logger: logger)
    }
}

extension EC2 {
    /// Initializer required by `AWSService.with(middlewares:timeout:byteBufferAllocator:options)`. You are not able to use this initializer directly as there are not public
    /// initializers for `AWSServiceConfig.Patch`. Please use `AWSService.with(middlewares:timeout:byteBufferAllocator:options)` instead.
    public init(from: EC2, patch: AWSServiceConfig.Patch) {
        self.client = from.client
        self.config = from.config.with(patch: patch)
    }
}

// MARK: Paginators

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension EC2 {
    /// Return PaginatorSequence for operation ``describeAddressTransfers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAddressTransfersPaginator(
        _ input: DescribeAddressTransfersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAddressTransfersRequest, DescribeAddressTransfersResult> {
        return .init(
            input: input,
            command: self.describeAddressTransfers,
            inputKey: \DescribeAddressTransfersRequest.nextToken,
            outputKey: \DescribeAddressTransfersResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAddressTransfers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - allocationIds: The allocation IDs of Elastic IP addresses.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of address transfers to return in one page of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAddressTransfersPaginator(
        allocationIds: [String]? = nil,
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAddressTransfersRequest, DescribeAddressTransfersResult> {
        let input = DescribeAddressTransfersRequest(
            allocationIds: allocationIds, 
            dryRun: dryRun, 
            maxResults: maxResults
        )
        return self.describeAddressTransfersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeAddressesAttribute(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAddressesAttributePaginator(
        _ input: DescribeAddressesAttributeRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAddressesAttributeRequest, DescribeAddressesAttributeResult> {
        return .init(
            input: input,
            command: self.describeAddressesAttribute,
            inputKey: \DescribeAddressesAttributeRequest.nextToken,
            outputKey: \DescribeAddressesAttributeResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAddressesAttribute(_:logger:)``.
    ///
    /// - Parameters:
    ///   - allocationIds: [EC2-VPC] The allocation IDs.
    ///   - attribute: The attribute of the IP address.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAddressesAttributePaginator(
        allocationIds: [String]? = nil,
        attribute: AddressAttributeName? = nil,
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAddressesAttributeRequest, DescribeAddressesAttributeResult> {
        let input = DescribeAddressesAttributeRequest(
            allocationIds: allocationIds, 
            attribute: attribute, 
            dryRun: dryRun, 
            maxResults: maxResults
        )
        return self.describeAddressesAttributePaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeAwsNetworkPerformanceMetricSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAwsNetworkPerformanceMetricSubscriptionsPaginator(
        _ input: DescribeAwsNetworkPerformanceMetricSubscriptionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeAwsNetworkPerformanceMetricSubscriptionsRequest, DescribeAwsNetworkPerformanceMetricSubscriptionsResult> {
        return .init(
            input: input,
            command: self.describeAwsNetworkPerformanceMetricSubscriptions,
            inputKey: \DescribeAwsNetworkPerformanceMetricSubscriptionsRequest.nextToken,
            outputKey: \DescribeAwsNetworkPerformanceMetricSubscriptionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeAwsNetworkPerformanceMetricSubscriptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeAwsNetworkPerformanceMetricSubscriptionsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeAwsNetworkPerformanceMetricSubscriptionsRequest, DescribeAwsNetworkPerformanceMetricSubscriptionsResult> {
        let input = DescribeAwsNetworkPerformanceMetricSubscriptionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeAwsNetworkPerformanceMetricSubscriptionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeByoipCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeByoipCidrsPaginator(
        _ input: DescribeByoipCidrsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeByoipCidrsRequest, DescribeByoipCidrsResult> {
        return .init(
            input: input,
            command: self.describeByoipCidrs,
            inputKey: \DescribeByoipCidrsRequest.nextToken,
            outputKey: \DescribeByoipCidrsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeByoipCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeByoipCidrsPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeByoipCidrsRequest, DescribeByoipCidrsResult> {
        let input = DescribeByoipCidrsRequest(
            dryRun: dryRun, 
            maxResults: maxResults
        )
        return self.describeByoipCidrsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCapacityBlockExtensionHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityBlockExtensionHistoryPaginator(
        _ input: DescribeCapacityBlockExtensionHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCapacityBlockExtensionHistoryRequest, DescribeCapacityBlockExtensionHistoryResult> {
        return .init(
            input: input,
            command: self.describeCapacityBlockExtensionHistory,
            inputKey: \DescribeCapacityBlockExtensionHistoryRequest.nextToken,
            outputKey: \DescribeCapacityBlockExtensionHistoryResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCapacityBlockExtensionHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - capacityReservationIds: The IDs of Capacity Block reservations that you want to display the history
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters    availability-zone - The Availability Zone of the
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityBlockExtensionHistoryPaginator(
        capacityReservationIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCapacityBlockExtensionHistoryRequest, DescribeCapacityBlockExtensionHistoryResult> {
        let input = DescribeCapacityBlockExtensionHistoryRequest(
            capacityReservationIds: capacityReservationIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeCapacityBlockExtensionHistoryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCapacityBlockExtensionOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityBlockExtensionOfferingsPaginator(
        _ input: DescribeCapacityBlockExtensionOfferingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCapacityBlockExtensionOfferingsRequest, DescribeCapacityBlockExtensionOfferingsResult> {
        return .init(
            input: input,
            command: self.describeCapacityBlockExtensionOfferings,
            inputKey: \DescribeCapacityBlockExtensionOfferingsRequest.nextToken,
            outputKey: \DescribeCapacityBlockExtensionOfferingsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCapacityBlockExtensionOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - capacityBlockExtensionDurationHours: The duration of the Capacity Block extension offering in hours.
    ///   - capacityReservationId: The ID of the Capacity reservation to be extended.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityBlockExtensionOfferingsPaginator(
        capacityBlockExtensionDurationHours: Int? = nil,
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCapacityBlockExtensionOfferingsRequest, DescribeCapacityBlockExtensionOfferingsResult> {
        let input = DescribeCapacityBlockExtensionOfferingsRequest(
            capacityBlockExtensionDurationHours: capacityBlockExtensionDurationHours, 
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun, 
            maxResults: maxResults
        )
        return self.describeCapacityBlockExtensionOfferingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCapacityBlockOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityBlockOfferingsPaginator(
        _ input: DescribeCapacityBlockOfferingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCapacityBlockOfferingsRequest, DescribeCapacityBlockOfferingsResult> {
        return .init(
            input: input,
            command: self.describeCapacityBlockOfferings,
            inputKey: \DescribeCapacityBlockOfferingsRequest.nextToken,
            outputKey: \DescribeCapacityBlockOfferingsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCapacityBlockOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - capacityDurationHours: The number of hours for which to reserve Capacity Block.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - endDateRange: The latest end date for the Capacity Block offering.
    ///   - instanceCount: The number of instances for which to reserve capacity.
    ///   - instanceType: The type of instance for which the Capacity Block offering reserves capacity.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - startDateRange: The earliest start date for the Capacity Block offering.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityBlockOfferingsPaginator(
        capacityDurationHours: Int? = nil,
        dryRun: Bool? = nil,
        endDateRange: Date? = nil,
        instanceCount: Int? = nil,
        instanceType: String? = nil,
        maxResults: Int? = nil,
        startDateRange: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCapacityBlockOfferingsRequest, DescribeCapacityBlockOfferingsResult> {
        let input = DescribeCapacityBlockOfferingsRequest(
            capacityDurationHours: capacityDurationHours, 
            dryRun: dryRun, 
            endDateRange: endDateRange, 
            instanceCount: instanceCount, 
            instanceType: instanceType, 
            maxResults: maxResults, 
            startDateRange: startDateRange
        )
        return self.describeCapacityBlockOfferingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCapacityReservationBillingRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityReservationBillingRequestsPaginator(
        _ input: DescribeCapacityReservationBillingRequestsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCapacityReservationBillingRequestsRequest, DescribeCapacityReservationBillingRequestsResult> {
        return .init(
            input: input,
            command: self.describeCapacityReservationBillingRequests,
            inputKey: \DescribeCapacityReservationBillingRequestsRequest.nextToken,
            outputKey: \DescribeCapacityReservationBillingRequestsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCapacityReservationBillingRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - capacityReservationIds: The ID of the Capacity Reservation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    status - The state of the request (pending |
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - role: Specify one of the following:    odcr-owner - If you are the Capacity Reservation owner, specify
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityReservationBillingRequestsPaginator(
        capacityReservationIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        role: CallerRole? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCapacityReservationBillingRequestsRequest, DescribeCapacityReservationBillingRequestsResult> {
        let input = DescribeCapacityReservationBillingRequestsRequest(
            capacityReservationIds: capacityReservationIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            role: role
        )
        return self.describeCapacityReservationBillingRequestsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCapacityReservationFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityReservationFleetsPaginator(
        _ input: DescribeCapacityReservationFleetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCapacityReservationFleetsRequest, DescribeCapacityReservationFleetsResult> {
        return .init(
            input: input,
            command: self.describeCapacityReservationFleets,
            inputKey: \DescribeCapacityReservationFleetsRequest.nextToken,
            outputKey: \DescribeCapacityReservationFleetsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCapacityReservationFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - capacityReservationFleetIds: The IDs of the Capacity Reservation Fleets to describe.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    state - The state of the Fleet (submitted |
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityReservationFleetsPaginator(
        capacityReservationFleetIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCapacityReservationFleetsRequest, DescribeCapacityReservationFleetsResult> {
        let input = DescribeCapacityReservationFleetsRequest(
            capacityReservationFleetIds: capacityReservationFleetIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeCapacityReservationFleetsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCapacityReservations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityReservationsPaginator(
        _ input: DescribeCapacityReservationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCapacityReservationsRequest, DescribeCapacityReservationsResult> {
        return .init(
            input: input,
            command: self.describeCapacityReservations,
            inputKey: \DescribeCapacityReservationsRequest.nextToken,
            outputKey: \DescribeCapacityReservationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCapacityReservations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - capacityReservationIds: The ID of the Capacity Reservation.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    instance-type - The type of instance for which the Capacity
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCapacityReservationsPaginator(
        capacityReservationIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCapacityReservationsRequest, DescribeCapacityReservationsResult> {
        let input = DescribeCapacityReservationsRequest(
            capacityReservationIds: capacityReservationIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeCapacityReservationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCarrierGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCarrierGatewaysPaginator(
        _ input: DescribeCarrierGatewaysRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCarrierGatewaysRequest, DescribeCarrierGatewaysResult> {
        return .init(
            input: input,
            command: self.describeCarrierGateways,
            inputKey: \DescribeCarrierGatewaysRequest.nextToken,
            outputKey: \DescribeCarrierGatewaysResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCarrierGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - carrierGatewayIds: One or more carrier gateway IDs.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    carrier-gateway-id - The ID of the carrier gateway.    state - The state of the carrier gateway (pending | failed | available | deleting | deleted).    owner-id - The Amazon Web Services account ID of the owner of the carrier gateway.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC associated with the carrier gateway.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCarrierGatewaysPaginator(
        carrierGatewayIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCarrierGatewaysRequest, DescribeCarrierGatewaysResult> {
        let input = DescribeCarrierGatewaysRequest(
            carrierGatewayIds: carrierGatewayIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeCarrierGatewaysPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeClassicLinkInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClassicLinkInstancesPaginator(
        _ input: DescribeClassicLinkInstancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeClassicLinkInstancesRequest, DescribeClassicLinkInstancesResult> {
        return .init(
            input: input,
            command: self.describeClassicLinkInstances,
            inputKey: \DescribeClassicLinkInstancesRequest.nextToken,
            outputKey: \DescribeClassicLinkInstancesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeClassicLinkInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    group-id - The ID of a VPC security group that's associated with the instance.    instance-id - The ID of the instance.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC to which the instance is linked.
    ///   - instanceIds: The instance IDs. Must be instances linked to a VPC through ClassicLink.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClassicLinkInstancesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeClassicLinkInstancesRequest, DescribeClassicLinkInstancesResult> {
        let input = DescribeClassicLinkInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults
        )
        return self.describeClassicLinkInstancesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeClientVpnAuthorizationRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnAuthorizationRulesPaginator(
        _ input: DescribeClientVpnAuthorizationRulesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnAuthorizationRulesRequest, DescribeClientVpnAuthorizationRulesResult> {
        return .init(
            input: input,
            command: self.describeClientVpnAuthorizationRules,
            inputKey: \DescribeClientVpnAuthorizationRulesRequest.nextToken,
            outputKey: \DescribeClientVpnAuthorizationRulesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeClientVpnAuthorizationRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    description - The description of the authorization rule.    destination-cidr - The CIDR of the network to which the authorization rule applies.    group-id - The ID of the Active Directory group to which the authorization rule grants access.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnAuthorizationRulesPaginator(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnAuthorizationRulesRequest, DescribeClientVpnAuthorizationRulesResult> {
        let input = DescribeClientVpnAuthorizationRulesRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeClientVpnAuthorizationRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeClientVpnConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnConnectionsPaginator(
        _ input: DescribeClientVpnConnectionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnConnectionsRequest, DescribeClientVpnConnectionsResult> {
        return .init(
            input: input,
            command: self.describeClientVpnConnections,
            inputKey: \DescribeClientVpnConnectionsRequest.nextToken,
            outputKey: \DescribeClientVpnConnectionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeClientVpnConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    connection-id - The ID of the connection.    username - For Active Directory client authentication, the user name of the client who established the client connection.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnConnectionsPaginator(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnConnectionsRequest, DescribeClientVpnConnectionsResult> {
        let input = DescribeClientVpnConnectionsRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeClientVpnConnectionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeClientVpnEndpoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnEndpointsPaginator(
        _ input: DescribeClientVpnEndpointsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnEndpointsRequest, DescribeClientVpnEndpointsResult> {
        return .init(
            input: input,
            command: self.describeClientVpnEndpoints,
            inputKey: \DescribeClientVpnEndpointsRequest.nextToken,
            outputKey: \DescribeClientVpnEndpointsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeClientVpnEndpoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clientVpnEndpointIds: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    endpoint-id - The ID of the Client VPN endpoint.    transport-protocol - The transport protocol (tcp | udp).
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnEndpointsPaginator(
        clientVpnEndpointIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnEndpointsRequest, DescribeClientVpnEndpointsResult> {
        let input = DescribeClientVpnEndpointsRequest(
            clientVpnEndpointIds: clientVpnEndpointIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeClientVpnEndpointsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeClientVpnRoutes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnRoutesPaginator(
        _ input: DescribeClientVpnRoutesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnRoutesRequest, DescribeClientVpnRoutesResult> {
        return .init(
            input: input,
            command: self.describeClientVpnRoutes,
            inputKey: \DescribeClientVpnRoutesRequest.nextToken,
            outputKey: \DescribeClientVpnRoutesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeClientVpnRoutes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    destination-cidr - The CIDR of the route destination.    origin - How the route was associated with the Client VPN endpoint (associate | add-route).    target-subnet - The ID of the subnet through which traffic is routed.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnRoutesPaginator(
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnRoutesRequest, DescribeClientVpnRoutesResult> {
        let input = DescribeClientVpnRoutesRequest(
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeClientVpnRoutesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeClientVpnTargetNetworks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnTargetNetworksPaginator(
        _ input: DescribeClientVpnTargetNetworksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnTargetNetworksRequest, DescribeClientVpnTargetNetworksResult> {
        return .init(
            input: input,
            command: self.describeClientVpnTargetNetworks,
            inputKey: \DescribeClientVpnTargetNetworksRequest.nextToken,
            outputKey: \DescribeClientVpnTargetNetworksResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeClientVpnTargetNetworks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - associationIds: The IDs of the target network associations.
    ///   - clientVpnEndpointId: The ID of the Client VPN endpoint.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    association-id - The ID of the association.    target-network-id - The ID of the subnet specified as the target network.    vpc-id - The ID of the VPC in which the target network is located.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeClientVpnTargetNetworksPaginator(
        associationIds: [String]? = nil,
        clientVpnEndpointId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeClientVpnTargetNetworksRequest, DescribeClientVpnTargetNetworksResult> {
        let input = DescribeClientVpnTargetNetworksRequest(
            associationIds: associationIds, 
            clientVpnEndpointId: clientVpnEndpointId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeClientVpnTargetNetworksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeCoipPools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCoipPoolsPaginator(
        _ input: DescribeCoipPoolsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeCoipPoolsRequest, DescribeCoipPoolsResult> {
        return .init(
            input: input,
            command: self.describeCoipPools,
            inputKey: \DescribeCoipPoolsRequest.nextToken,
            outputKey: \DescribeCoipPoolsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeCoipPools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    coip-pool.local-gateway-route-table-id - The ID of the local gateway route table.    coip-pool.pool-id - The ID of the address pool.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - poolIds: The IDs of the address pools.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeCoipPoolsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        poolIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeCoipPoolsRequest, DescribeCoipPoolsResult> {
        let input = DescribeCoipPoolsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            poolIds: poolIds
        )
        return self.describeCoipPoolsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeDhcpOptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDhcpOptionsPaginator(
        _ input: DescribeDhcpOptionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeDhcpOptionsRequest, DescribeDhcpOptionsResult> {
        return .init(
            input: input,
            command: self.describeDhcpOptions,
            inputKey: \DescribeDhcpOptionsRequest.nextToken,
            outputKey: \DescribeDhcpOptionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeDhcpOptions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dhcpOptionsIds: The IDs of DHCP option sets.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    dhcp-options-id - The ID of a DHCP options set.    key - The key for one of the options (for example, domain-name).    value - The value for one of the options.    owner-id - The ID of the Amazon Web Services account that owns the DHCP options set.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeDhcpOptionsPaginator(
        dhcpOptionsIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeDhcpOptionsRequest, DescribeDhcpOptionsResult> {
        let input = DescribeDhcpOptionsRequest(
            dhcpOptionsIds: dhcpOptionsIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeDhcpOptionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeEgressOnlyInternetGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEgressOnlyInternetGatewaysPaginator(
        _ input: DescribeEgressOnlyInternetGatewaysRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeEgressOnlyInternetGatewaysRequest, DescribeEgressOnlyInternetGatewaysResult> {
        return .init(
            input: input,
            command: self.describeEgressOnlyInternetGateways,
            inputKey: \DescribeEgressOnlyInternetGatewaysRequest.nextToken,
            outputKey: \DescribeEgressOnlyInternetGatewaysResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeEgressOnlyInternetGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - egressOnlyInternetGatewayIds: The IDs of the egress-only internet gateways.
    ///   - filters: The filters.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeEgressOnlyInternetGatewaysPaginator(
        dryRun: Bool? = nil,
        egressOnlyInternetGatewayIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeEgressOnlyInternetGatewaysRequest, DescribeEgressOnlyInternetGatewaysResult> {
        let input = DescribeEgressOnlyInternetGatewaysRequest(
            dryRun: dryRun, 
            egressOnlyInternetGatewayIds: egressOnlyInternetGatewayIds, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeEgressOnlyInternetGatewaysPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeExportImageTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeExportImageTasksPaginator(
        _ input: DescribeExportImageTasksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeExportImageTasksRequest, DescribeExportImageTasksResult> {
        return .init(
            input: input,
            command: self.describeExportImageTasks,
            inputKey: \DescribeExportImageTasksRequest.nextToken,
            outputKey: \DescribeExportImageTasksResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeExportImageTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - exportImageTaskIds: The IDs of the export image tasks.
    ///   - filters: Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeExportImageTasksPaginator(
        dryRun: Bool? = nil,
        exportImageTaskIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeExportImageTasksRequest, DescribeExportImageTasksResult> {
        let input = DescribeExportImageTasksRequest(
            dryRun: dryRun, 
            exportImageTaskIds: exportImageTaskIds, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeExportImageTasksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeFastLaunchImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFastLaunchImagesPaginator(
        _ input: DescribeFastLaunchImagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeFastLaunchImagesRequest, DescribeFastLaunchImagesResult> {
        return .init(
            input: input,
            command: self.describeFastLaunchImages,
            inputKey: \DescribeFastLaunchImagesRequest.nextToken,
            outputKey: \DescribeFastLaunchImagesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeFastLaunchImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - filters: Use the following filters to streamline results.    resource-type - The resource type for pre-provisioning.    owner-id - The owner ID for the pre-provisioning resource.    state - The current state of fast launching for the Windows AMI.
    ///   - imageIds: Specify one or more Windows AMI image IDs for the request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFastLaunchImagesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeFastLaunchImagesRequest, DescribeFastLaunchImagesResult> {
        let input = DescribeFastLaunchImagesRequest(
            dryRun: dryRun, 
            filters: filters, 
            imageIds: imageIds, 
            maxResults: maxResults
        )
        return self.describeFastLaunchImagesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeFastSnapshotRestores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFastSnapshotRestoresPaginator(
        _ input: DescribeFastSnapshotRestoresRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeFastSnapshotRestoresRequest, DescribeFastSnapshotRestoresResult> {
        return .init(
            input: input,
            command: self.describeFastSnapshotRestores,
            inputKey: \DescribeFastSnapshotRestoresRequest.nextToken,
            outputKey: \DescribeFastSnapshotRestoresResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeFastSnapshotRestores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. The possible values are:    availability-zone: The Availability Zone of the snapshot.    owner-id: The ID of the Amazon Web Services account that enabled fast snapshot restore on the snapshot.    snapshot-id: The ID of the snapshot.    state: The state of fast snapshot restores for the snapshot  (enabling |  optimizing |  enabled |  disabling |  disabled).
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFastSnapshotRestoresPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeFastSnapshotRestoresRequest, DescribeFastSnapshotRestoresResult> {
        let input = DescribeFastSnapshotRestoresRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeFastSnapshotRestoresPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFleetsPaginator(
        _ input: DescribeFleetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeFleetsRequest, DescribeFleetsResult> {
        return .init(
            input: input,
            command: self.describeFleets,
            inputKey: \DescribeFleetsRequest.nextToken,
            outputKey: \DescribeFleetsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeFleets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    activity-status - The progress of the EC2 Fleet ( error | pending-fulfillment | pending-termination | fulfilled).    excess-capacity-termination-policy - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (true | false).    fleet-state - The state of the EC2 Fleet (submitted | active | deleted | failed | deleted-running | deleted-terminating | modifying).    replace-unhealthy-instances - Indicates whether EC2 Fleet should replace unhealthy instances (true | false).    type - The type of request (instant | request | maintain).
    ///   - fleetIds: The IDs of the EC2 Fleets.  If a fleet is of type instant, you must specify the fleet ID, otherwise it does not appear in the response.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFleetsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        fleetIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeFleetsRequest, DescribeFleetsResult> {
        let input = DescribeFleetsRequest(
            dryRun: dryRun, 
            filters: filters, 
            fleetIds: fleetIds, 
            maxResults: maxResults
        )
        return self.describeFleetsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeFlowLogs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFlowLogsPaginator(
        _ input: DescribeFlowLogsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeFlowLogsRequest, DescribeFlowLogsResult> {
        return .init(
            input: input,
            command: self.describeFlowLogs,
            inputKey: \DescribeFlowLogsRequest.nextToken,
            outputKey: \DescribeFlowLogsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeFlowLogs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filter: One or more filters.    deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).    log-destination-type - The type of destination for the flow log data (cloud-watch-logs | s3 | kinesis-data-firehose).    flow-log-id - The ID of the flow log.    log-group-name - The name of the log group.    resource-id - The ID of the VPC, subnet, or network interface.    traffic-type - The type of traffic (ACCEPT | REJECT | ALL).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - flowLogIds: One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFlowLogsPaginator(
        dryRun: Bool? = nil,
        filter: [Filter]? = nil,
        flowLogIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeFlowLogsRequest, DescribeFlowLogsResult> {
        let input = DescribeFlowLogsRequest(
            dryRun: dryRun, 
            filter: filter, 
            flowLogIds: flowLogIds, 
            maxResults: maxResults
        )
        return self.describeFlowLogsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeFpgaImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFpgaImagesPaginator(
        _ input: DescribeFpgaImagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeFpgaImagesRequest, DescribeFpgaImagesResult> {
        return .init(
            input: input,
            command: self.describeFpgaImages,
            inputKey: \DescribeFpgaImagesRequest.nextToken,
            outputKey: \DescribeFpgaImagesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeFpgaImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    create-time - The creation time of the AFI.    fpga-image-id - The FPGA image identifier (AFI ID).    fpga-image-global-id - The global FPGA image identifier (AGFI ID).    name - The name of the AFI.    owner-id - The Amazon Web Services account ID of the AFI owner.    product-code - The product code.    shell-version - The version of the Amazon Web Services Shell that was used to create the bitstream.    state - The state of the AFI (pending | failed | available | unavailable).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    update-time - The time of the most recent update.
    ///   - fpgaImageIds: The AFI IDs.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - owners: Filters the AFI by owner. Specify an Amazon Web Services account ID, self
    ///   - logger: Logger used for logging
    @inlinable
    public func describeFpgaImagesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        fpgaImageIds: [String]? = nil,
        maxResults: Int? = nil,
        owners: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeFpgaImagesRequest, DescribeFpgaImagesResult> {
        let input = DescribeFpgaImagesRequest(
            dryRun: dryRun, 
            filters: filters, 
            fpgaImageIds: fpgaImageIds, 
            maxResults: maxResults, 
            owners: owners
        )
        return self.describeFpgaImagesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeHostReservationOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeHostReservationOfferingsPaginator(
        _ input: DescribeHostReservationOfferingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeHostReservationOfferingsRequest, DescribeHostReservationOfferingsResult> {
        return .init(
            input: input,
            command: self.describeHostReservationOfferings,
            inputKey: \DescribeHostReservationOfferingsRequest.nextToken,
            outputKey: \DescribeHostReservationOfferingsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeHostReservationOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filter: The filters.    instance-family - The instance family of the offering (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).
    ///   - maxDuration: This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
    ///   - minDuration: This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
    ///   - offeringId: The ID of the reservation offering.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeHostReservationOfferingsPaginator(
        filter: [Filter]? = nil,
        maxDuration: Int? = nil,
        maxResults: Int? = nil,
        minDuration: Int? = nil,
        offeringId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeHostReservationOfferingsRequest, DescribeHostReservationOfferingsResult> {
        let input = DescribeHostReservationOfferingsRequest(
            filter: filter, 
            maxDuration: maxDuration, 
            maxResults: maxResults, 
            minDuration: minDuration, 
            offeringId: offeringId
        )
        return self.describeHostReservationOfferingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeHostReservations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeHostReservationsPaginator(
        _ input: DescribeHostReservationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeHostReservationsRequest, DescribeHostReservationsResult> {
        return .init(
            input: input,
            command: self.describeHostReservations,
            inputKey: \DescribeHostReservationsRequest.nextToken,
            outputKey: \DescribeHostReservationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeHostReservations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filter: The filters.    instance-family - The instance family (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).    state - The state of the reservation (payment-pending | payment-failed | active | retired).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - hostReservationIdSet: The host reservation IDs.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeHostReservationsPaginator(
        filter: [Filter]? = nil,
        hostReservationIdSet: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeHostReservationsRequest, DescribeHostReservationsResult> {
        let input = DescribeHostReservationsRequest(
            filter: filter, 
            hostReservationIdSet: hostReservationIdSet, 
            maxResults: maxResults
        )
        return self.describeHostReservationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeHosts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeHostsPaginator(
        _ input: DescribeHostsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeHostsRequest, DescribeHostsResult> {
        return .init(
            input: input,
            command: self.describeHosts,
            inputKey: \DescribeHostsRequest.nextToken,
            outputKey: \DescribeHostsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeHosts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filter: The filters.    auto-placement - Whether auto-placement is enabled or disabled (on | off).    availability-zone - The Availability Zone of the host.    client-token - The idempotency token that you provided when you allocated the host.    host-reservation-id - The ID of the reservation assigned to this host.    instance-type - The instance type size that the Dedicated Host is configured to support.    state - The allocation state of the Dedicated Host (available | under-assessment | permanent-failure | released | released-permanent-failure).    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - hostIds: The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. You cannot specify this parameter and the host IDs parameter in the same request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeHostsPaginator(
        filter: [Filter]? = nil,
        hostIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeHostsRequest, DescribeHostsResult> {
        let input = DescribeHostsRequest(
            filter: filter, 
            hostIds: hostIds, 
            maxResults: maxResults
        )
        return self.describeHostsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeIamInstanceProfileAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIamInstanceProfileAssociationsPaginator(
        _ input: DescribeIamInstanceProfileAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeIamInstanceProfileAssociationsRequest, DescribeIamInstanceProfileAssociationsResult> {
        return .init(
            input: input,
            command: self.describeIamInstanceProfileAssociations,
            inputKey: \DescribeIamInstanceProfileAssociationsRequest.nextToken,
            outputKey: \DescribeIamInstanceProfileAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeIamInstanceProfileAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - associationIds: The IAM instance profile associations.
    ///   - filters: The filters.    instance-id - The ID of the instance.    state - The state of the association (associating | associated | disassociating).
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIamInstanceProfileAssociationsPaginator(
        associationIds: [String]? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeIamInstanceProfileAssociationsRequest, DescribeIamInstanceProfileAssociationsResult> {
        let input = DescribeIamInstanceProfileAssociationsRequest(
            associationIds: associationIds, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeIamInstanceProfileAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImagesPaginator(
        _ input: DescribeImagesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeImagesRequest, DescribeImagesResult> {
        return .init(
            input: input,
            command: self.describeImages,
            inputKey: \DescribeImagesRequest.nextToken,
            outputKey: \DescribeImagesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - executableUsers: Scopes the images by users with explicit launch permissions. Specify an Amazon Web Services account ID, self (the sender of the request), or all (public AMIs).   If you specify an Amazon Web Services account ID that is not your own, only AMIs shared with that specific Amazon Web Services account ID are returned. However, AMIs that are shared with the account’s organization or organizational unit (OU) are not returned.   If you specify self or your own Amazon Web Services account ID, AMIs shared with your account are returned. In addition, AMIs that are shared with the organization or OU of which you are member are also returned.    If you specify all, all public AMIs are returned.
    ///   - filters: The filters.    architecture - The image architecture (i386 | x86_64 | arm64 | x86_64_mac | arm64_mac).    block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the Amazon EBS volume.    block-device-mapping.volume-size - The volume size of the Amazon EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the Amazon EBS volume (io1 | io2 | gp2 | gp3 | sc1 | st1 | standard).    block-device-mapping.encrypted - A Boolean that indicates whether the Amazon EBS volume is encrypted.    creation-date - The time when the image was created, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-allowed - A Boolean that indicates whether the image meets the criteria specified for Allowed AMIs.    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - The owner alias (amazon | aws-backup-vault | aws-marketplace). The valid aliases are defined in an Amazon-maintained list. This is not the Amazon Web Services account alias that can be set using the IAM console. We recommend that you use the Owner request parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that you use the Owner request parameter instead of this filter.    platform - The platform. The only supported value is windows.    product-code - The product code.    product-code.type - The type of the product code (marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-image-id - The ID of the source AMI from which the AMI was created.    source-image-region - The Region of the source AMI.    source-instance-id - The ID of the instance that the AMI was created from if the AMI was created using CreateImage. This filter is applicable only if the AMI was created using CreateImage.    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    sriov-net-support - A value of simple indicates that enhanced networking with the Intel 82599 VF interface is enabled.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    virtualization-type - The virtualization type (paravirtual | hvm).
    ///   - imageIds: The image IDs. Default: Describes all images available to you.
    ///   - includeDeprecated: Specifies whether to include deprecated AMIs. Default: No deprecated AMIs are included in the response.  If you are the AMI owner, all deprecated AMIs appear in the response regardless of what you specify for this parameter.
    ///   - includeDisabled: Specifies whether to include disabled AMIs. Default: No disabled AMIs are included in the response.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - owners: Scopes the results to images with the specified owners. You can specify a combination of Amazon Web Services account IDs, self, amazon, aws-backup-vault, and aws-marketplace. If you omit this parameter, the results include all images for which you have launch permissions, regardless of ownership.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImagesPaginator(
        dryRun: Bool? = nil,
        executableUsers: [String]? = nil,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        includeDeprecated: Bool? = nil,
        includeDisabled: Bool? = nil,
        maxResults: Int? = nil,
        owners: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeImagesRequest, DescribeImagesResult> {
        let input = DescribeImagesRequest(
            dryRun: dryRun, 
            executableUsers: executableUsers, 
            filters: filters, 
            imageIds: imageIds, 
            includeDeprecated: includeDeprecated, 
            includeDisabled: includeDisabled, 
            maxResults: maxResults, 
            owners: owners
        )
        return self.describeImagesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeImportImageTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImportImageTasksPaginator(
        _ input: DescribeImportImageTasksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeImportImageTasksRequest, DescribeImportImageTasksResult> {
        return .init(
            input: input,
            command: self.describeImportImageTasks,
            inputKey: \DescribeImportImageTasksRequest.nextToken,
            outputKey: \DescribeImportImageTasksResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeImportImageTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
    ///   - importTaskIds: The IDs of the import image tasks.
    ///   - maxResults: The maximum number of results to return in a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImportImageTasksPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        importTaskIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeImportImageTasksRequest, DescribeImportImageTasksResult> {
        let input = DescribeImportImageTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            importTaskIds: importTaskIds, 
            maxResults: maxResults
        )
        return self.describeImportImageTasksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeImportSnapshotTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImportSnapshotTasksPaginator(
        _ input: DescribeImportSnapshotTasksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeImportSnapshotTasksRequest, DescribeImportSnapshotTasksResult> {
        return .init(
            input: input,
            command: self.describeImportSnapshotTasks,
            inputKey: \DescribeImportSnapshotTasksRequest.nextToken,
            outputKey: \DescribeImportSnapshotTasksResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeImportSnapshotTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.
    ///   - importTaskIds: A list of import snapshot task IDs.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeImportSnapshotTasksPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        importTaskIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeImportSnapshotTasksRequest, DescribeImportSnapshotTasksResult> {
        let input = DescribeImportSnapshotTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            importTaskIds: importTaskIds, 
            maxResults: maxResults
        )
        return self.describeImportSnapshotTasksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInstanceConnectEndpoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceConnectEndpointsPaginator(
        _ input: DescribeInstanceConnectEndpointsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInstanceConnectEndpointsRequest, DescribeInstanceConnectEndpointsResult> {
        return .init(
            input: input,
            command: self.describeInstanceConnectEndpoints,
            inputKey: \DescribeInstanceConnectEndpointsRequest.nextToken,
            outputKey: \DescribeInstanceConnectEndpointsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInstanceConnectEndpoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    instance-connect-endpoint-id - The ID of the EC2 Instance Connect Endpoint.    state - The state of the EC2 Instance Connect Endpoint (create-in-progress | create-complete | create-failed |  delete-in-progress | delete-complete | delete-failed).    subnet-id - The ID of the subnet in which the EC2 Instance Connect Endpoint was created.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    tag-value - The value of a tag assigned to the resource. Use this filter to find all resources  that have a tag with a specific value, regardless of tag key.    vpc-id - The ID of the VPC in which the EC2 Instance Connect Endpoint was created.
    ///   - instanceConnectEndpointIds: One or more EC2 Instance Connect Endpoint IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceConnectEndpointsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceConnectEndpointIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInstanceConnectEndpointsRequest, DescribeInstanceConnectEndpointsResult> {
        let input = DescribeInstanceConnectEndpointsRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceConnectEndpointIds: instanceConnectEndpointIds, 
            maxResults: maxResults
        )
        return self.describeInstanceConnectEndpointsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInstanceCreditSpecifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceCreditSpecificationsPaginator(
        _ input: DescribeInstanceCreditSpecificationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInstanceCreditSpecificationsRequest, DescribeInstanceCreditSpecificationsResult> {
        return .init(
            input: input,
            command: self.describeInstanceCreditSpecifications,
            inputKey: \DescribeInstanceCreditSpecificationsRequest.nextToken,
            outputKey: \DescribeInstanceCreditSpecificationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInstanceCreditSpecifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    instance-id - The ID of the instance.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances. Constraints: Maximum 1000 explicitly specified instance IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceCreditSpecificationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInstanceCreditSpecificationsRequest, DescribeInstanceCreditSpecificationsResult> {
        let input = DescribeInstanceCreditSpecificationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults
        )
        return self.describeInstanceCreditSpecificationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInstanceEventWindows(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceEventWindowsPaginator(
        _ input: DescribeInstanceEventWindowsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInstanceEventWindowsRequest, DescribeInstanceEventWindowsResult> {
        return .init(
            input: input,
            command: self.describeInstanceEventWindows,
            inputKey: \DescribeInstanceEventWindowsRequest.nextToken,
            outputKey: \DescribeInstanceEventWindowsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInstanceEventWindows(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    dedicated-host-id - The event windows associated with the specified Dedicated Host ID.    event-window-name - The event windows associated with the specified names.     instance-id - The event windows associated with the specified instance ID.    instance-tag - The event windows associated with the specified tag and value.    instance-tag-key - The event windows associated with the specified tag key, regardless of the value.    instance-tag-value - The event windows associated with the specified tag value, regardless of the key.    tag: - The key/value combination of a tag assigned to the event window. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value CMX, specify tag:Owner for the filter name and CMX for the filter value.     tag-key - The key of a tag assigned to the event window. Use this filter to find all event windows that have a tag with a specific key, regardless of the tag value.     tag-value - The value of a tag assigned to the event window. Use this filter to find all event windows that have a tag with a specific value, regardless of the tag key.
    ///   - instanceEventWindowIds: The IDs of the event windows.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 20 and 500. You cannot specify this parameter and the event window IDs parameter in the same call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceEventWindowsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceEventWindowIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInstanceEventWindowsRequest, DescribeInstanceEventWindowsResult> {
        let input = DescribeInstanceEventWindowsRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceEventWindowIds: instanceEventWindowIds, 
            maxResults: maxResults
        )
        return self.describeInstanceEventWindowsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInstanceImageMetadata(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceImageMetadataPaginator(
        _ input: DescribeInstanceImageMetadataRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInstanceImageMetadataRequest, DescribeInstanceImageMetadataResult> {
        return .init(
            input: input,
            command: self.describeInstanceImageMetadata,
            inputKey: \DescribeInstanceImageMetadataRequest.nextToken,
            outputKey: \DescribeInstanceImageMetadataResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInstanceImageMetadata(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - filters: The filters.    availability-zone - The name of the Availability Zone (for example, us-west-2a) or Local Zone (for example, us-west-2-lax-1b) of the instance.    instance-id - The ID of the instance.    image-allowed - A Boolean that indicates whether the image meets the criteria specified for Allowed AMIs.    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t3.micro).    launch-time - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2023-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2023-09-29T*, which matches an entire day.    owner-alias - The owner alias (amazon | aws-marketplace | aws-backup-vault). The valid aliases are defined in an Amazon-maintained list. This is not the Amazon Web Services account alias that can be set using the IAM console. We recommend that you use the Owner request parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that you use the Owner request parameter instead of this filter.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    zone-id - The ID of the Availability Zone (for example, usw2-az2) or Local Zone (for example, usw2-lax1-az1) of the instance.
    ///   - instanceIds: The instance IDs. If you don't specify an instance ID or filters, the output includes information for all instances.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceImageMetadataPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInstanceImageMetadataRequest, DescribeInstanceImageMetadataResult> {
        let input = DescribeInstanceImageMetadataRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults
        )
        return self.describeInstanceImageMetadataPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInstanceStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceStatusPaginator(
        _ input: DescribeInstanceStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInstanceStatusRequest, DescribeInstanceStatusResult> {
        return .init(
            input: input,
            command: self.describeInstanceStatus,
            inputKey: \DescribeInstanceStatusRequest.nextToken,
            outputKey: \DescribeInstanceStatusResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInstanceStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.instance-event-id - The ID of the event whose date and time you are modifying.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before-deadline - The deadline for starting the event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    attached-ebs-status.status - The status of the attached EBS volume  for the instance (ok | impaired | initializing |  insufficient-data | not-applicable).
    ///   - includeAllInstances: When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false
    ///   - instanceIds: The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceStatusPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        includeAllInstances: Bool? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInstanceStatusRequest, DescribeInstanceStatusResult> {
        let input = DescribeInstanceStatusRequest(
            dryRun: dryRun, 
            filters: filters, 
            includeAllInstances: includeAllInstances, 
            instanceIds: instanceIds, 
            maxResults: maxResults
        )
        return self.describeInstanceStatusPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInstanceTopology(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceTopologyPaginator(
        _ input: DescribeInstanceTopologyRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInstanceTopologyRequest, DescribeInstanceTopologyResult> {
        return .init(
            input: input,
            command: self.describeInstanceTopology,
            inputKey: \DescribeInstanceTopologyRequest.nextToken,
            outputKey: \DescribeInstanceTopologyResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInstanceTopology(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The name of the Availability Zone (for example, us-west-2a) or Local Zone (for example, us-west-2-lax-1b) that the instance is in.    instance-type - The instance type (for example, p4d.24xlarge) or instance family (for example, p4d*). You can use the * wildcard to match zero or more characters, or the ? wildcard to match zero or one character.    zone-id - The ID of the Availability Zone (for example, usw2-az2) or Local Zone (for example, usw2-lax1-az1) that the instance is in.
    ///   - groupNames: The name of the placement group that each instance is in. Constraints: Maximum 100 explicitly specified placement group names.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceTopologyPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        groupNames: [String]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInstanceTopologyRequest, DescribeInstanceTopologyResult> {
        let input = DescribeInstanceTopologyRequest(
            dryRun: dryRun, 
            filters: filters, 
            groupNames: groupNames, 
            instanceIds: instanceIds, 
            maxResults: maxResults
        )
        return self.describeInstanceTopologyPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInstanceTypeOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceTypeOfferingsPaginator(
        _ input: DescribeInstanceTypeOfferingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInstanceTypeOfferingsRequest, DescribeInstanceTypeOfferingsResult> {
        return .init(
            input: input,
            command: self.describeInstanceTypeOfferings,
            inputKey: \DescribeInstanceTypeOfferingsRequest.nextToken,
            outputKey: \DescribeInstanceTypeOfferingsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInstanceTypeOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    instance-type - The instance type. For a list of possible values, see Instance.    location - The location. For a list of possible identifiers, see Regions and Zones.
    ///   - locationType: The location type.    availability-zone - The Availability Zone. When you specify a location filter, it must be an Availability Zone for the current Region.    availability-zone-id - The AZ ID. When you specify a location filter, it must be an AZ ID for the current Region.    outpost - The Outpost ARN. When you specify a location filter, it must be an Outpost ARN for the current Region.    region - The current Region. If you specify a location filter, it must match the current Region.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceTypeOfferingsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        locationType: LocationType? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInstanceTypeOfferingsRequest, DescribeInstanceTypeOfferingsResult> {
        let input = DescribeInstanceTypeOfferingsRequest(
            dryRun: dryRun, 
            filters: filters, 
            locationType: locationType, 
            maxResults: maxResults
        )
        return self.describeInstanceTypeOfferingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInstanceTypes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceTypesPaginator(
        _ input: DescribeInstanceTypesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInstanceTypesRequest, DescribeInstanceTypesResult> {
        return .init(
            input: input,
            command: self.describeInstanceTypes,
            inputKey: \DescribeInstanceTypesRequest.nextToken,
            outputKey: \DescribeInstanceTypesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInstanceTypes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.    auto-recovery-supported - Indicates whether Amazon CloudWatch action based recovery is supported  (true | false).    bare-metal - Indicates whether it is a bare metal instance type (true | false).    burstable-performance-supported - Indicates whether the instance type is a burstable performance T instance type  (true | false).    current-generation - Indicates whether this instance type is the latest generation instance type of an instance family  (true | false).    ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps - The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.baseline-iops - The baseline input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-info.baseline-throughput-in-mbps - The baseline throughput performance for an EBS-optimized instance type, in MB/s.    ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps - The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.maximum-iops - The maximum input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-info.maximum-throughput-in-mbps - The maximum throughput performance for an EBS-optimized instance type, in MB/s.    ebs-info.ebs-optimized-support - Indicates whether the instance type is EBS-optimized (supported | unsupported | default).    ebs-info.encryption-support - Indicates whether EBS encryption is supported (supported | unsupported).    ebs-info.nvme-support - Indicates whether non-volatile memory express (NVMe) is supported for EBS volumes (required | supported | unsupported).    free-tier-eligible - Indicates whether the instance type is eligible to use in the free tier  (true | false).    hibernation-supported - Indicates whether On-Demand hibernation is supported (true | false).    hypervisor - The hypervisor (nitro | xen).    instance-storage-info.disk.count - The number of local disks.    instance-storage-info.disk.size-in-gb - The storage size of each instance storage disk, in GB.    instance-storage-info.disk.type - The storage technology for the local instance storage disks (hdd | ssd).    instance-storage-info.encryption-support - Indicates whether data is encrypted at rest (required | supported | unsupported).    instance-storage-info.nvme-support - Indicates whether non-volatile memory express (NVMe) is supported for instance store (required | supported | unsupported).    instance-storage-info.total-size-in-gb - The total amount of storage available from all local instance storage, in GB.    instance-storage-supported - Indicates whether the instance type has local instance storage  (true | false).    instance-type - The instance type (for example c5.2xlarge or c5*).    memory-info.size-in-mib - The memory size.    network-info.efa-info.maximum-efa-interfaces - The maximum number of Elastic Fabric Adapters (EFAs) per instance.    network-info.efa-supported - Indicates whether the instance type supports Elastic Fabric Adapter (EFA)  (true | false).    network-info.ena-support - Indicates whether Elastic Network Adapter (ENA) is supported or required (required | supported | unsupported).    network-info.encryption-in-transit-supported - Indicates whether the instance type automatically encrypts in-transit traffic between instances  (true | false).    network-info.ipv4-addresses-per-interface - The maximum number of private IPv4 addresses per network interface.    network-info.ipv6-addresses-per-interface - The maximum number of private IPv6 addresses per network interface.    network-info.ipv6-supported - Indicates whether the instance type supports IPv6  (true | false).    network-info.maximum-network-cards - The maximum number of network cards per instance.    network-info.maximum-network-interfaces - The maximum number of network interfaces per instance.    network-info.network-performance - The network performance (for example, "25 Gigabit").    nitro-enclaves-support - Indicates whether Nitro Enclaves is supported (supported | unsupported).    nitro-tpm-support - Indicates whether NitroTPM is supported (supported | unsupported).    nitro-tpm-info.supported-versions - The supported NitroTPM version (2.0).    processor-info.supported-architecture - The CPU architecture (arm64 | i386 | x86_64).    processor-info.sustained-clock-speed-in-ghz - The CPU clock speed, in GHz.    processor-info.supported-features - The supported CPU features (amd-sev-snp).    supported-boot-mode - The boot mode (legacy-bios | uefi).    supported-root-device-type - The root device type (ebs | instance-store).    supported-usage-class - The usage class (on-demand | spot |  capacity-block).    supported-virtualization-type - The virtualization type (hvm | paravirtual).    vcpu-info.default-cores - The default number of cores for the instance type.    vcpu-info.default-threads-per-core - The default number of threads per core for the instance type.    vcpu-info.default-vcpus - The default number of vCPUs for the instance type.    vcpu-info.valid-cores - The number of cores that can be configured for the instance type.    vcpu-info.valid-threads-per-core - The number of threads per core that can be configured for the instance type. For example, "1" or "1,2".
    ///   - instanceTypes: The instance types.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstanceTypesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceTypes: [InstanceType]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInstanceTypesRequest, DescribeInstanceTypesResult> {
        let input = DescribeInstanceTypesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceTypes: instanceTypes, 
            maxResults: maxResults
        )
        return self.describeInstanceTypesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstancesPaginator(
        _ input: DescribeInstancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInstancesRequest, DescribeInstancesResult> {
        return .init(
            input: input,
            command: self.describeInstances,
            inputKey: \DescribeInstancesRequest.nextToken,
            outputKey: \DescribeInstancesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64 | arm64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2022-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    boot-mode - The boot mode that was specified by the AMI (legacy-bios | uefi | uefi-preferred).    capacity-reservation-id - The ID of the Capacity Reservation into which the instance was launched.    capacity-reservation-specification.capacity-reservation-preference - The instance's Capacity Reservation preference (open | none).    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-id - The ID of the targeted Capacity Reservation.    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-resource-group-arn - The ARN of the targeted Capacity Reservation group.    client-token - The idempotency token you provided when you launched the instance.    current-instance-boot-mode - The boot mode that is used to launch the instance at launch or start (legacy-bios | uefi).    dns-name - The public DNS name of the instance.    ebs-optimized - A Boolean that indicates whether the instance is optimized for Amazon EBS I/O.    ena-support - A Boolean that indicates whether the instance is enabled for enhanced networking with ENA.    enclave-options.enabled - A Boolean that indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.    host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen). The value xen is used for both Xen and Nitro hypervisors.    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    iam-instance-profile.id - The instance profile associated with the instance. Specified as an ID.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance, a Scheduled Instance, or a Capacity Block (spot | scheduled | capacity-block).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    ipv6-address - The IPv6 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    maintenance-options.auto-recovery - The current automatic recovery behavior of the instance (disabled | default).    metadata-options.http-endpoint - The status of access to the HTTP metadata endpoint on your instance (enabled | disabled)    metadata-options.http-protocol-ipv4 - Indicates whether the IPv4 endpoint is enabled (disabled | enabled).    metadata-options.http-protocol-ipv6 - Indicates whether the IPv6 endpoint is enabled (disabled | enabled).    metadata-options.http-put-response-hop-limit - The HTTP metadata request put response hop limit (integer, possible values 1 to 64)    metadata-options.http-tokens - The metadata request authorization state (optional | required)    metadata-options.instance-metadata-tags - The status of access to instance tags from the instance metadata (enabled | disabled)    metadata-options.state - The state of the metadata option changes (pending | applied).    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.association.allocation-id - The allocation ID.    network-interface.addresses.association.association-id - The association ID.    network-interface.addresses.association.carrier-ip - The carrier IP address.    network-interface.addresses.association.customer-owned-ip - The customer-owned IP address.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.addresses.association.public-dns-name - The public DNS name.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.private-dns-name - The private DNS name.    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.association.carrier-ip - The customer-owned IP address.    network-interface.association.customer-owned-ip - The customer-owned IP address.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.public-dns-name - The public DNS name.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.network-card-index - The index of the network card.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.deny-all-igw-traffic - A Boolean that indicates whether  a network interface with an IPv6 address is unreachable from the public internet.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv4-prefixes.ipv4-prefix - The IPv4 prefixes that are assigned to the network interface.    network-interface.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.is-primary-ipv6 - A Boolean that indicates whether this is the primary IPv6 address.    network-interface.ipv6-native - A Boolean that indicates whether this is an IPv6 only network interface.    network-interface.ipv6-prefixes.ipv6-prefix - The IPv6 prefix assigned to the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.operator.managed - A Boolean that indicates whether the instance has a managed network interface.    network-interface.operator.principal - The principal that manages the network interface. Only valid for instances with managed network interfaces, where managed is true.    network-interface.outpost-arn - The ARN of the Outpost.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.private-ip-address - The private IPv4 address.    network-interface.public-dns-name - The public DNS name.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by Amazon Web Services.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.tag-key - The key of a tag assigned to the network interface.    network-interface.tag-value - The value of a tag assigned to the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The Amazon Web Services account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. To list only Windows instances, use windows.    platform-details - The platform (Linux/UNIX | Red Hat BYOL Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA | Red Hat Enterprise Linux with SQL Server Standard and HA | Red Hat Enterprise Linux with SQL Server Enterprise and HA | Red Hat Enterprise Linux with SQL Server Standard | Red Hat Enterprise Linux with SQL Server Web | Red Hat Enterprise Linux with SQL Server Enterprise | SQL Server Enterprise | SQL Server Standard | SQL Server Web | SUSE Linux | Ubuntu Pro | Windows | Windows BYOL | Windows with SQL Server Enterprise | Windows with SQL Server Standard | Windows with SQL Server Web).    private-dns-name - The private IPv4 DNS name of the instance.    private-dns-name-options.enable-resource-name-dns-a-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options.enable-resource-name-dns-aaaa-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    private-dns-name-options.hostname-type - The type of hostname (ip-name | resource-name).    private-ip-address - The private IPv4 address of the instance. This can only be used to filter by the primary IP address of the network interface attached to the instance. To filter by additional IP addresses assigned to the network interface, use the filter network-interface.addresses.private-ip-address.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    tpm-support - Indicates if the instance is configured for NitroTPM support (v2.0).     usage-operation - The usage operation value for the instance (RunInstances | RunInstances:00g0 | RunInstances:0010 | RunInstances:1010 | RunInstances:1014 | RunInstances:1110 | RunInstances:0014 | RunInstances:0210 | RunInstances:0110 | RunInstances:0100 | RunInstances:0004 | RunInstances:0200 | RunInstances:000g | RunInstances:0g00 | RunInstances:0002 | RunInstances:0800 | RunInstances:0102 | RunInstances:0006 | RunInstances:0202).    usage-operation-update-time - The time that the usage operation was last updated, for example, 2022-09-15T17:15:20.000Z.    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInstancesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInstancesRequest, DescribeInstancesResult> {
        let input = DescribeInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults
        )
        return self.describeInstancesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeInternetGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInternetGatewaysPaginator(
        _ input: DescribeInternetGatewaysRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeInternetGatewaysRequest, DescribeInternetGatewaysResult> {
        return .init(
            input: input,
            command: self.describeInternetGateways,
            inputKey: \DescribeInternetGatewaysRequest.nextToken,
            outputKey: \DescribeInternetGatewaysResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeInternetGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    attachment.state - The current state of the attachment between the gateway and the VPC (available). Present only if a VPC is attached.    attachment.vpc-id - The ID of an attached VPC.    internet-gateway-id - The ID of the Internet gateway.    owner-id - The ID of the Amazon Web Services account that owns the internet gateway.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - internetGatewayIds: The IDs of the internet gateways. Default: Describes all your internet gateways.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeInternetGatewaysPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        internetGatewayIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeInternetGatewaysRequest, DescribeInternetGatewaysResult> {
        let input = DescribeInternetGatewaysRequest(
            dryRun: dryRun, 
            filters: filters, 
            internetGatewayIds: internetGatewayIds, 
            maxResults: maxResults
        )
        return self.describeInternetGatewaysPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeIpamPools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamPoolsPaginator(
        _ input: DescribeIpamPoolsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeIpamPoolsRequest, DescribeIpamPoolsResult> {
        return .init(
            input: input,
            command: self.describeIpamPools,
            inputKey: \DescribeIpamPoolsRequest.nextToken,
            outputKey: \DescribeIpamPoolsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeIpamPools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamPoolIds: The IDs of the IPAM pools you would like information on.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamPoolsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamPoolIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeIpamPoolsRequest, DescribeIpamPoolsResult> {
        let input = DescribeIpamPoolsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamPoolIds: ipamPoolIds, 
            maxResults: maxResults
        )
        return self.describeIpamPoolsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeIpamResourceDiscoveries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamResourceDiscoveriesPaginator(
        _ input: DescribeIpamResourceDiscoveriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeIpamResourceDiscoveriesRequest, DescribeIpamResourceDiscoveriesResult> {
        return .init(
            input: input,
            command: self.describeIpamResourceDiscoveries,
            inputKey: \DescribeIpamResourceDiscoveriesRequest.nextToken,
            outputKey: \DescribeIpamResourceDiscoveriesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeIpamResourceDiscoveries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The resource discovery filters.
    ///   - ipamResourceDiscoveryIds: The IPAM resource discovery IDs.
    ///   - maxResults: The maximum number of resource discoveries to return in one page of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamResourceDiscoveriesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamResourceDiscoveryIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeIpamResourceDiscoveriesRequest, DescribeIpamResourceDiscoveriesResult> {
        let input = DescribeIpamResourceDiscoveriesRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamResourceDiscoveryIds: ipamResourceDiscoveryIds, 
            maxResults: maxResults
        )
        return self.describeIpamResourceDiscoveriesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeIpamResourceDiscoveryAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamResourceDiscoveryAssociationsPaginator(
        _ input: DescribeIpamResourceDiscoveryAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeIpamResourceDiscoveryAssociationsRequest, DescribeIpamResourceDiscoveryAssociationsResult> {
        return .init(
            input: input,
            command: self.describeIpamResourceDiscoveryAssociations,
            inputKey: \DescribeIpamResourceDiscoveryAssociationsRequest.nextToken,
            outputKey: \DescribeIpamResourceDiscoveryAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeIpamResourceDiscoveryAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The resource discovery association filters.
    ///   - ipamResourceDiscoveryAssociationIds: The resource discovery association IDs.
    ///   - maxResults: The maximum number of resource discovery associations to return in one page of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamResourceDiscoveryAssociationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamResourceDiscoveryAssociationIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeIpamResourceDiscoveryAssociationsRequest, DescribeIpamResourceDiscoveryAssociationsResult> {
        let input = DescribeIpamResourceDiscoveryAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamResourceDiscoveryAssociationIds: ipamResourceDiscoveryAssociationIds, 
            maxResults: maxResults
        )
        return self.describeIpamResourceDiscoveryAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeIpamScopes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamScopesPaginator(
        _ input: DescribeIpamScopesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeIpamScopesRequest, DescribeIpamScopesResult> {
        return .init(
            input: input,
            command: self.describeIpamScopes,
            inputKey: \DescribeIpamScopesRequest.nextToken,
            outputKey: \DescribeIpamScopesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeIpamScopes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamScopeIds: The IDs of the scopes you want information on.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamScopesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamScopeIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeIpamScopesRequest, DescribeIpamScopesResult> {
        let input = DescribeIpamScopesRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamScopeIds: ipamScopeIds, 
            maxResults: maxResults
        )
        return self.describeIpamScopesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeIpams(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamsPaginator(
        _ input: DescribeIpamsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeIpamsRequest, DescribeIpamsResult> {
        return .init(
            input: input,
            command: self.describeIpams,
            inputKey: \DescribeIpamsRequest.nextToken,
            outputKey: \DescribeIpamsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeIpams(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamIds: The IDs of the IPAMs you want information on.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpamsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeIpamsRequest, DescribeIpamsResult> {
        let input = DescribeIpamsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamIds: ipamIds, 
            maxResults: maxResults
        )
        return self.describeIpamsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeIpv6Pools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpv6PoolsPaginator(
        _ input: DescribeIpv6PoolsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeIpv6PoolsRequest, DescribeIpv6PoolsResult> {
        return .init(
            input: input,
            command: self.describeIpv6Pools,
            inputKey: \DescribeIpv6PoolsRequest.nextToken,
            outputKey: \DescribeIpv6PoolsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeIpv6Pools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - poolIds: The IDs of the IPv6 address pools.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeIpv6PoolsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        poolIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeIpv6PoolsRequest, DescribeIpv6PoolsResult> {
        let input = DescribeIpv6PoolsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            poolIds: poolIds
        )
        return self.describeIpv6PoolsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLaunchTemplateVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLaunchTemplateVersionsPaginator(
        _ input: DescribeLaunchTemplateVersionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLaunchTemplateVersionsRequest, DescribeLaunchTemplateVersionsResult> {
        return .init(
            input: input,
            command: self.describeLaunchTemplateVersions,
            inputKey: \DescribeLaunchTemplateVersionsRequest.nextToken,
            outputKey: \DescribeLaunchTemplateVersionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLaunchTemplateVersions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    create-time - The time the launch template version was created.    ebs-optimized - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.    http-endpoint - Indicates whether the HTTP metadata endpoint on your instances is enabled (enabled | disabled).    http-protocol-ipv4 - Indicates whether the IPv4 endpoint for the instance metadata service is enabled (enabled | disabled).    host-resource-group-arn - The ARN of the host resource group in which to launch the instances.    http-tokens - The state of token usage for your instance metadata requests (optional | required).    iam-instance-profile - The ARN of the IAM instance profile.    image-id - The ID of the AMI.    instance-type - The instance type.    is-default-version - A boolean that indicates whether the launch template version is the default version.    kernel-id - The kernel ID.    license-configuration-arn - The ARN of the license configuration.    network-card-index - The index of the network card.    ram-disk-id - The RAM disk ID.
    ///   - launchTemplateId: The ID of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template ID or the launch template name, but not both. To describe all the latest or default launch template versions in your account, you must omit this parameter.
    ///   - launchTemplateName: The name of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template name or the launch template ID, but not both. To describe all the latest or default launch template versions in your account, you must omit this parameter.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
    ///   - maxVersion: The version number up to which to describe launch template versions.
    ///   - minVersion: The version number after which to describe launch template versions.
    ///   - resolveAlias: If true, and if a Systems Manager parameter is specified for ImageId, the AMI ID is displayed in the response for imageId. If false, and if a Systems Manager parameter is specified for ImageId, the parameter is displayed in the response for imageId. For more information, see Use a Systems  Manager parameter instead of an AMI ID in the Amazon EC2 User Guide. Default: false
    ///   - versions: One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account. To describe one or more versions of a specified launch template, valid values are $Latest, $Default, and numbers. To describe all launch templates in your account that are defined as the latest version, the valid value is $Latest. To describe all launch templates in your account that are defined as the default version, the valid value is $Default. You can specify $Latest and $Default in the same request. You cannot specify numbers.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLaunchTemplateVersionsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        launchTemplateId: String? = nil,
        launchTemplateName: String? = nil,
        maxResults: Int? = nil,
        maxVersion: String? = nil,
        minVersion: String? = nil,
        resolveAlias: Bool? = nil,
        versions: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLaunchTemplateVersionsRequest, DescribeLaunchTemplateVersionsResult> {
        let input = DescribeLaunchTemplateVersionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            launchTemplateId: launchTemplateId, 
            launchTemplateName: launchTemplateName, 
            maxResults: maxResults, 
            maxVersion: maxVersion, 
            minVersion: minVersion, 
            resolveAlias: resolveAlias, 
            versions: versions
        )
        return self.describeLaunchTemplateVersionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLaunchTemplates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLaunchTemplatesPaginator(
        _ input: DescribeLaunchTemplatesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLaunchTemplatesRequest, DescribeLaunchTemplatesResult> {
        return .init(
            input: input,
            command: self.describeLaunchTemplates,
            inputKey: \DescribeLaunchTemplatesRequest.nextToken,
            outputKey: \DescribeLaunchTemplatesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLaunchTemplates(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    create-time - The time the launch template was created.    launch-template-name - The name of the launch template.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - launchTemplateIds: One or more launch template IDs.
    ///   - launchTemplateNames: One or more launch template names.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLaunchTemplatesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        launchTemplateIds: [String]? = nil,
        launchTemplateNames: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLaunchTemplatesRequest, DescribeLaunchTemplatesResult> {
        let input = DescribeLaunchTemplatesRequest(
            dryRun: dryRun, 
            filters: filters, 
            launchTemplateIds: launchTemplateIds, 
            launchTemplateNames: launchTemplateNames, 
            maxResults: maxResults
        )
        return self.describeLaunchTemplatesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPaginator(
        _ input: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest, DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult> {
        return .init(
            input: input,
            command: self.describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations,
            inputKey: \DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest.nextToken,
            outputKey: \DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-arn - The Amazon Resource Name (ARN) of the local  gateway route table for the virtual interface group.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-virtual-interface-group-association-id - The ID of the association.    local-gateway-route-table-virtual-interface-group-id - The ID of the virtual interface group.    owner-id - The ID of the Amazon Web Services account that owns the local gateway virtual  interface group association.    state - The state of the association.
    ///   - localGatewayRouteTableVirtualInterfaceGroupAssociationIds: The IDs of the associations.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayRouteTableVirtualInterfaceGroupAssociationIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest, DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult> {
        let input = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayRouteTableVirtualInterfaceGroupAssociationIds: localGatewayRouteTableVirtualInterfaceGroupAssociationIds, 
            maxResults: maxResults
        )
        return self.describeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLocalGatewayRouteTableVpcAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayRouteTableVpcAssociationsPaginator(
        _ input: DescribeLocalGatewayRouteTableVpcAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayRouteTableVpcAssociationsRequest, DescribeLocalGatewayRouteTableVpcAssociationsResult> {
        return .init(
            input: input,
            command: self.describeLocalGatewayRouteTableVpcAssociations,
            inputKey: \DescribeLocalGatewayRouteTableVpcAssociationsRequest.nextToken,
            outputKey: \DescribeLocalGatewayRouteTableVpcAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLocalGatewayRouteTableVpcAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-arn - The Amazon Resource Name (ARN) of the local  gateway route table for the association.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-vpc-association-id - The ID of the association.    owner-id - The ID of the Amazon Web Services account that owns the local gateway route table for the association.    state - The state of the association.    vpc-id - The ID of the VPC.
    ///   - localGatewayRouteTableVpcAssociationIds: The IDs of the associations.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayRouteTableVpcAssociationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayRouteTableVpcAssociationIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayRouteTableVpcAssociationsRequest, DescribeLocalGatewayRouteTableVpcAssociationsResult> {
        let input = DescribeLocalGatewayRouteTableVpcAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayRouteTableVpcAssociationIds: localGatewayRouteTableVpcAssociationIds, 
            maxResults: maxResults
        )
        return self.describeLocalGatewayRouteTableVpcAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLocalGatewayRouteTables(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayRouteTablesPaginator(
        _ input: DescribeLocalGatewayRouteTablesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayRouteTablesRequest, DescribeLocalGatewayRouteTablesResult> {
        return .init(
            input: input,
            command: self.describeLocalGatewayRouteTables,
            inputKey: \DescribeLocalGatewayRouteTablesRequest.nextToken,
            outputKey: \DescribeLocalGatewayRouteTablesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLocalGatewayRouteTables(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-arn - The Amazon Resource Name (ARN) of the  local gateway route table.    local-gateway-route-table-id - The ID of a local gateway route table.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the local gateway route table.    state - The state of the local gateway route table.
    ///   - localGatewayRouteTableIds: The IDs of the local gateway route tables.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayRouteTablesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayRouteTableIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayRouteTablesRequest, DescribeLocalGatewayRouteTablesResult> {
        let input = DescribeLocalGatewayRouteTablesRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayRouteTableIds: localGatewayRouteTableIds, 
            maxResults: maxResults
        )
        return self.describeLocalGatewayRouteTablesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLocalGatewayVirtualInterfaceGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayVirtualInterfaceGroupsPaginator(
        _ input: DescribeLocalGatewayVirtualInterfaceGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayVirtualInterfaceGroupsRequest, DescribeLocalGatewayVirtualInterfaceGroupsResult> {
        return .init(
            input: input,
            command: self.describeLocalGatewayVirtualInterfaceGroups,
            inputKey: \DescribeLocalGatewayVirtualInterfaceGroupsRequest.nextToken,
            outputKey: \DescribeLocalGatewayVirtualInterfaceGroupsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLocalGatewayVirtualInterfaceGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-virtual-interface-group-id - The ID of the virtual interface group.    local-gateway-virtual-interface-id - The ID of the virtual interface.    owner-id - The ID of the Amazon Web Services account that owns the local gateway virtual interface group.
    ///   - localGatewayVirtualInterfaceGroupIds: The IDs of the virtual interface groups.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayVirtualInterfaceGroupsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayVirtualInterfaceGroupIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayVirtualInterfaceGroupsRequest, DescribeLocalGatewayVirtualInterfaceGroupsResult> {
        let input = DescribeLocalGatewayVirtualInterfaceGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayVirtualInterfaceGroupIds: localGatewayVirtualInterfaceGroupIds, 
            maxResults: maxResults
        )
        return self.describeLocalGatewayVirtualInterfaceGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLocalGatewayVirtualInterfaces(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayVirtualInterfacesPaginator(
        _ input: DescribeLocalGatewayVirtualInterfacesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayVirtualInterfacesRequest, DescribeLocalGatewayVirtualInterfacesResult> {
        return .init(
            input: input,
            command: self.describeLocalGatewayVirtualInterfaces,
            inputKey: \DescribeLocalGatewayVirtualInterfacesRequest.nextToken,
            outputKey: \DescribeLocalGatewayVirtualInterfacesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLocalGatewayVirtualInterfaces(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-address - The local address.    local-bgp-asn - The Border Gateway Protocol (BGP) Autonomous System Number (ASN)  of the local gateway.    local-gateway-id - The ID of the local gateway.    local-gateway-virtual-interface-id - The ID of the virtual interface.    owner-id - The ID of the Amazon Web Services account that owns the local gateway virtual interface.    peer-address - The peer address.    peer-bgp-asn - The peer BGP ASN.    vlan - The ID of the VLAN.
    ///   - localGatewayVirtualInterfaceIds: The IDs of the virtual interfaces.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewayVirtualInterfacesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayVirtualInterfaceIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewayVirtualInterfacesRequest, DescribeLocalGatewayVirtualInterfacesResult> {
        let input = DescribeLocalGatewayVirtualInterfacesRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayVirtualInterfaceIds: localGatewayVirtualInterfaceIds, 
            maxResults: maxResults
        )
        return self.describeLocalGatewayVirtualInterfacesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeLocalGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewaysPaginator(
        _ input: DescribeLocalGatewaysRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewaysRequest, DescribeLocalGatewaysResult> {
        return .init(
            input: input,
            command: self.describeLocalGateways,
            inputKey: \DescribeLocalGatewaysRequest.nextToken,
            outputKey: \DescribeLocalGatewaysResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeLocalGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    local-gateway-id - The ID of a local gateway.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the local gateway.    state - The state of the association.
    ///   - localGatewayIds: The IDs of the local gateways.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeLocalGatewaysPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeLocalGatewaysRequest, DescribeLocalGatewaysResult> {
        let input = DescribeLocalGatewaysRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayIds: localGatewayIds, 
            maxResults: maxResults
        )
        return self.describeLocalGatewaysPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeMacHosts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeMacHostsPaginator(
        _ input: DescribeMacHostsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeMacHostsRequest, DescribeMacHostsResult> {
        return .init(
            input: input,
            command: self.describeMacHosts,
            inputKey: \DescribeMacHostsRequest.nextToken,
            outputKey: \DescribeMacHostsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeMacHosts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: The filters.    availability-zone - The Availability Zone of the EC2 Mac Dedicated Host.    instance-type - The instance type size that the EC2 Mac Dedicated Host is configured to support.
    ///   - hostIds:  The IDs of the EC2 Mac Dedicated Hosts.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeMacHostsPaginator(
        filters: [Filter]? = nil,
        hostIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeMacHostsRequest, DescribeMacHostsResult> {
        let input = DescribeMacHostsRequest(
            filters: filters, 
            hostIds: hostIds, 
            maxResults: maxResults
        )
        return self.describeMacHostsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeManagedPrefixLists(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeManagedPrefixListsPaginator(
        _ input: DescribeManagedPrefixListsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeManagedPrefixListsRequest, DescribeManagedPrefixListsResult> {
        return .init(
            input: input,
            command: self.describeManagedPrefixLists,
            inputKey: \DescribeManagedPrefixListsRequest.nextToken,
            outputKey: \DescribeManagedPrefixListsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeManagedPrefixLists(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    owner-id - The ID of the prefix list owner.    prefix-list-id - The ID of the prefix list.    prefix-list-name - The name of the prefix list.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - prefixListIds: One or more prefix list IDs.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeManagedPrefixListsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        prefixListIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeManagedPrefixListsRequest, DescribeManagedPrefixListsResult> {
        let input = DescribeManagedPrefixListsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            prefixListIds: prefixListIds
        )
        return self.describeManagedPrefixListsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeMovingAddresses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeMovingAddressesPaginator(
        _ input: DescribeMovingAddressesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeMovingAddressesRequest, DescribeMovingAddressesResult> {
        return .init(
            input: input,
            command: self.describeMovingAddresses,
            inputKey: \DescribeMovingAddressesRequest.nextToken,
            outputKey: \DescribeMovingAddressesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeMovingAddresses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    moving-status - The status of the Elastic IP address (MovingToVpc | RestoringToClassic).
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value outside of this range, an error is returned. Default: If no value is provided, the default is 1000.
    ///   - publicIps: One or more Elastic IP addresses.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeMovingAddressesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        publicIps: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeMovingAddressesRequest, DescribeMovingAddressesResult> {
        let input = DescribeMovingAddressesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            publicIps: publicIps
        )
        return self.describeMovingAddressesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeNatGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNatGatewaysPaginator(
        _ input: DescribeNatGatewaysRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeNatGatewaysRequest, DescribeNatGatewaysResult> {
        return .init(
            input: input,
            command: self.describeNatGateways,
            inputKey: \DescribeNatGatewaysRequest.nextToken,
            outputKey: \DescribeNatGatewaysResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeNatGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filter: The filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the NAT gateway resides.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - natGatewayIds: The IDs of the NAT gateways.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNatGatewaysPaginator(
        dryRun: Bool? = nil,
        filter: [Filter]? = nil,
        maxResults: Int? = nil,
        natGatewayIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeNatGatewaysRequest, DescribeNatGatewaysResult> {
        let input = DescribeNatGatewaysRequest(
            dryRun: dryRun, 
            filter: filter, 
            maxResults: maxResults, 
            natGatewayIds: natGatewayIds
        )
        return self.describeNatGatewaysPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeNetworkAcls(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkAclsPaginator(
        _ input: DescribeNetworkAclsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeNetworkAclsRequest, DescribeNetworkAclsResult> {
        return .init(
            input: input,
            command: self.describeNetworkAcls,
            inputKey: \DescribeNetworkAclsRequest.nextToken,
            outputKey: \DescribeNetworkAclsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeNetworkAcls(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    association.association-id - The ID of an association ID for the ACL.    association.network-acl-id - The ID of the network ACL involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    default - Indicates whether the ACL is the default network ACL for the VPC.    entry.cidr - The IPv4 CIDR range specified in the entry.    entry.icmp.code - The ICMP code specified in the entry, if any.    entry.icmp.type - The ICMP type specified in the entry, if any.    entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.    entry.port-range.from - The start of the port range specified in the entry.     entry.port-range.to - The end of the port range specified in the entry.     entry.protocol - The protocol specified in the entry (tcp | udp | icmp or a protocol number).    entry.rule-action - Allows or denies the matching traffic (allow | deny).    entry.egress - A Boolean that indicates the type of rule. Specify true
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - networkAclIds: The IDs of the network ACLs.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkAclsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkAclIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeNetworkAclsRequest, DescribeNetworkAclsResult> {
        let input = DescribeNetworkAclsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkAclIds: networkAclIds
        )
        return self.describeNetworkAclsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeNetworkInsightsAccessScopeAnalyses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInsightsAccessScopeAnalysesPaginator(
        _ input: DescribeNetworkInsightsAccessScopeAnalysesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInsightsAccessScopeAnalysesRequest, DescribeNetworkInsightsAccessScopeAnalysesResult> {
        return .init(
            input: input,
            command: self.describeNetworkInsightsAccessScopeAnalyses,
            inputKey: \DescribeNetworkInsightsAccessScopeAnalysesRequest.nextToken,
            outputKey: \DescribeNetworkInsightsAccessScopeAnalysesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeNetworkInsightsAccessScopeAnalyses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - analysisStartTimeBegin: Filters the results based on the start time. The analysis must have started on or after this time.
    ///   - analysisStartTimeEnd: Filters the results based on the start time. The analysis must have started on or before this time.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: There are no supported filters.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsAccessScopeAnalysisIds: The IDs of the Network Access Scope analyses.
    ///   - networkInsightsAccessScopeId: The ID of the Network Access Scope.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInsightsAccessScopeAnalysesPaginator(
        analysisStartTimeBegin: Date? = nil,
        analysisStartTimeEnd: Date? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInsightsAccessScopeAnalysisIds: [String]? = nil,
        networkInsightsAccessScopeId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInsightsAccessScopeAnalysesRequest, DescribeNetworkInsightsAccessScopeAnalysesResult> {
        let input = DescribeNetworkInsightsAccessScopeAnalysesRequest(
            analysisStartTimeBegin: analysisStartTimeBegin, 
            analysisStartTimeEnd: analysisStartTimeEnd, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInsightsAccessScopeAnalysisIds: networkInsightsAccessScopeAnalysisIds, 
            networkInsightsAccessScopeId: networkInsightsAccessScopeId
        )
        return self.describeNetworkInsightsAccessScopeAnalysesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeNetworkInsightsAccessScopes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInsightsAccessScopesPaginator(
        _ input: DescribeNetworkInsightsAccessScopesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInsightsAccessScopesRequest, DescribeNetworkInsightsAccessScopesResult> {
        return .init(
            input: input,
            command: self.describeNetworkInsightsAccessScopes,
            inputKey: \DescribeNetworkInsightsAccessScopesRequest.nextToken,
            outputKey: \DescribeNetworkInsightsAccessScopesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeNetworkInsightsAccessScopes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: There are no supported filters.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsAccessScopeIds: The IDs of the Network Access Scopes.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInsightsAccessScopesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInsightsAccessScopeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInsightsAccessScopesRequest, DescribeNetworkInsightsAccessScopesResult> {
        let input = DescribeNetworkInsightsAccessScopesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInsightsAccessScopeIds: networkInsightsAccessScopeIds
        )
        return self.describeNetworkInsightsAccessScopesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeNetworkInsightsAnalyses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInsightsAnalysesPaginator(
        _ input: DescribeNetworkInsightsAnalysesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInsightsAnalysesRequest, DescribeNetworkInsightsAnalysesResult> {
        return .init(
            input: input,
            command: self.describeNetworkInsightsAnalyses,
            inputKey: \DescribeNetworkInsightsAnalysesRequest.nextToken,
            outputKey: \DescribeNetworkInsightsAnalysesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeNetworkInsightsAnalyses(_:logger:)``.
    ///
    /// - Parameters:
    ///   - analysisEndTime: The time when the network insights analyses ended.
    ///   - analysisStartTime: The time when the network insights analyses started.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. The following are the possible values:   path-found - A Boolean value that indicates whether a feasible path is found.   status - The status of the analysis (running | succeeded | failed).
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsAnalysisIds: The ID of the network insights analyses. You must specify either analysis IDs or a path ID.
    ///   - networkInsightsPathId: The ID of the path. You must specify either a path ID or analysis IDs.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInsightsAnalysesPaginator(
        analysisEndTime: Date? = nil,
        analysisStartTime: Date? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInsightsAnalysisIds: [String]? = nil,
        networkInsightsPathId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInsightsAnalysesRequest, DescribeNetworkInsightsAnalysesResult> {
        let input = DescribeNetworkInsightsAnalysesRequest(
            analysisEndTime: analysisEndTime, 
            analysisStartTime: analysisStartTime, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInsightsAnalysisIds: networkInsightsAnalysisIds, 
            networkInsightsPathId: networkInsightsPathId
        )
        return self.describeNetworkInsightsAnalysesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeNetworkInsightsPaths(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInsightsPathsPaginator(
        _ input: DescribeNetworkInsightsPathsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInsightsPathsRequest, DescribeNetworkInsightsPathsResult> {
        return .init(
            input: input,
            command: self.describeNetworkInsightsPaths,
            inputKey: \DescribeNetworkInsightsPathsRequest.nextToken,
            outputKey: \DescribeNetworkInsightsPathsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeNetworkInsightsPaths(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. The following are the possible values:   destination - The ID of the resource.   filter-at-source.source-address - The source IPv4 address at the source.   filter-at-source.source-port-range - The source port range at the source.   filter-at-source.destination-address - The destination IPv4 address at the source.   filter-at-source.destination-port-range - The destination port range at the source.   filter-at-destination.source-address - The source IPv4 address at the destination.   filter-at-destination.source-port-range - The source port range at the destination.   filter-at-destination.destination-address - The destination IPv4 address at the destination.   filter-at-destination.destination-port-range - The destination port range at the destination.   protocol - The protocol.   source - The ID of the resource.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsPathIds: The IDs of the paths.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInsightsPathsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInsightsPathIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInsightsPathsRequest, DescribeNetworkInsightsPathsResult> {
        let input = DescribeNetworkInsightsPathsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInsightsPathIds: networkInsightsPathIds
        )
        return self.describeNetworkInsightsPathsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeNetworkInterfacePermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInterfacePermissionsPaginator(
        _ input: DescribeNetworkInterfacePermissionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInterfacePermissionsRequest, DescribeNetworkInterfacePermissionsResult> {
        return .init(
            input: input,
            command: self.describeNetworkInterfacePermissions,
            inputKey: \DescribeNetworkInterfacePermissionsRequest.nextToken,
            outputKey: \DescribeNetworkInterfacePermissionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeNetworkInterfacePermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: One or more filters.    network-interface-permission.network-interface-permission-id - The ID of the
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items,
    ///   - networkInterfacePermissionIds: The network interface permission IDs.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInterfacePermissionsPaginator(
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInterfacePermissionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInterfacePermissionsRequest, DescribeNetworkInterfacePermissionsResult> {
        let input = DescribeNetworkInterfacePermissionsRequest(
            filters: filters, 
            maxResults: maxResults, 
            networkInterfacePermissionIds: networkInterfacePermissionIds
        )
        return self.describeNetworkInterfacePermissionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeNetworkInterfaces(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInterfacesPaginator(
        _ input: DescribeNetworkInterfacesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInterfacesRequest, DescribeNetworkInterfacesResult> {
        return .init(
            input: input,
            command: self.describeNetworkInterfaces,
            inputKey: \DescribeNetworkInterfacesRequest.nextToken,
            outputKey: \DescribeNetworkInterfacesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeNetworkInterfaces(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    association.allocation-id - The allocation ID returned when you
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items,
    ///   - networkInterfaceIds: The network interface IDs. Default: Describes all your network interfaces.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeNetworkInterfacesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInterfaceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeNetworkInterfacesRequest, DescribeNetworkInterfacesResult> {
        let input = DescribeNetworkInterfacesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInterfaceIds: networkInterfaceIds
        )
        return self.describeNetworkInterfacesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describePrefixLists(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describePrefixListsPaginator(
        _ input: DescribePrefixListsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribePrefixListsRequest, DescribePrefixListsResult> {
        return .init(
            input: input,
            command: self.describePrefixLists,
            inputKey: \DescribePrefixListsRequest.nextToken,
            outputKey: \DescribePrefixListsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describePrefixLists(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    prefix-list-id: The ID of a prefix list.    prefix-list-name: The name of a prefix list.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - prefixListIds: One or more prefix list IDs.
    ///   - logger: Logger used for logging
    @inlinable
    public func describePrefixListsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        prefixListIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribePrefixListsRequest, DescribePrefixListsResult> {
        let input = DescribePrefixListsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            prefixListIds: prefixListIds
        )
        return self.describePrefixListsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describePrincipalIdFormat(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describePrincipalIdFormatPaginator(
        _ input: DescribePrincipalIdFormatRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribePrincipalIdFormatRequest, DescribePrincipalIdFormatResult> {
        return .init(
            input: input,
            command: self.describePrincipalIdFormat,
            inputKey: \DescribePrincipalIdFormatRequest.nextToken,
            outputKey: \DescribePrincipalIdFormatResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describePrincipalIdFormat(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
    ///   - resources: The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
    ///   - logger: Logger used for logging
    @inlinable
    public func describePrincipalIdFormatPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        resources: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribePrincipalIdFormatRequest, DescribePrincipalIdFormatResult> {
        let input = DescribePrincipalIdFormatRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            resources: resources
        )
        return self.describePrincipalIdFormatPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describePublicIpv4Pools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describePublicIpv4PoolsPaginator(
        _ input: DescribePublicIpv4PoolsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribePublicIpv4PoolsRequest, DescribePublicIpv4PoolsResult> {
        return .init(
            input: input,
            command: self.describePublicIpv4Pools,
            inputKey: \DescribePublicIpv4PoolsRequest.nextToken,
            outputKey: \DescribePublicIpv4PoolsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describePublicIpv4Pools(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: One or more filters.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - poolIds: The IDs of the address pools.
    ///   - logger: Logger used for logging
    @inlinable
    public func describePublicIpv4PoolsPaginator(
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        poolIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribePublicIpv4PoolsRequest, DescribePublicIpv4PoolsResult> {
        let input = DescribePublicIpv4PoolsRequest(
            filters: filters, 
            maxResults: maxResults, 
            poolIds: poolIds
        )
        return self.describePublicIpv4PoolsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeReplaceRootVolumeTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReplaceRootVolumeTasksPaginator(
        _ input: DescribeReplaceRootVolumeTasksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeReplaceRootVolumeTasksRequest, DescribeReplaceRootVolumeTasksResult> {
        return .init(
            input: input,
            command: self.describeReplaceRootVolumeTasks,
            inputKey: \DescribeReplaceRootVolumeTasksRequest.nextToken,
            outputKey: \DescribeReplaceRootVolumeTasksResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeReplaceRootVolumeTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Filter to use:    instance-id - The ID of the instance for which the root volume replacement task was created.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - replaceRootVolumeTaskIds: The ID of the root volume replacement task to view.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReplaceRootVolumeTasksPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        replaceRootVolumeTaskIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeReplaceRootVolumeTasksRequest, DescribeReplaceRootVolumeTasksResult> {
        let input = DescribeReplaceRootVolumeTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            replaceRootVolumeTaskIds: replaceRootVolumeTaskIds
        )
        return self.describeReplaceRootVolumeTasksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeReservedInstancesModifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReservedInstancesModificationsPaginator(
        _ input: DescribeReservedInstancesModificationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeReservedInstancesModificationsRequest, DescribeReservedInstancesModificationsResult> {
        return .init(
            input: input,
            command: self.describeReservedInstancesModifications,
            inputKey: \DescribeReservedInstancesModificationsRequest.nextToken,
            outputKey: \DescribeReservedInstancesModificationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeReservedInstancesModifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - filters: One or more filters.    client-token - The idempotency token for the modification request.    create-date - The time when the modification request was created.    effective-date - The time when the modification becomes effective.    modification-result.reserved-instances-id - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is fulfilled.    modification-result.target-configuration.availability-zone - The Availability Zone for the new Reserved Instances.    modification-result.target-configuration.instance-count  - The number of new Reserved Instances.    modification-result.target-configuration.instance-type - The instance type of the new Reserved Instances.    reserved-instances-id - The ID of the Reserved Instances modified.    reserved-instances-modification-id - The ID of the modification request.    status - The status of the Reserved Instances modification request (processing | fulfilled | failed).    status-message - The reason for the status.    update-date - The time when the modification request was last updated.
    ///   - reservedInstancesModificationIds: IDs for the submitted modification request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReservedInstancesModificationsPaginator(
        filters: [Filter]? = nil,
        reservedInstancesModificationIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeReservedInstancesModificationsRequest, DescribeReservedInstancesModificationsResult> {
        let input = DescribeReservedInstancesModificationsRequest(
            filters: filters, 
            reservedInstancesModificationIds: reservedInstancesModificationIds
        )
        return self.describeReservedInstancesModificationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeReservedInstancesOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReservedInstancesOfferingsPaginator(
        _ input: DescribeReservedInstancesOfferingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeReservedInstancesOfferingsRequest, DescribeReservedInstancesOfferingsResult> {
        return .init(
            input: input,
            command: self.describeReservedInstancesOfferings,
            inputKey: \DescribeReservedInstancesOfferingsRequest.nextToken,
            outputKey: \DescribeReservedInstancesOfferingsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeReservedInstancesOfferings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - availabilityZone: The Availability Zone in which the Reserved Instance can be used.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (for example, one year or three years), in seconds (31536000 | 94608000).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    marketplace - Set to true to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both Amazon Web Services and the Reserved Instance Marketplace are listed.    product-description - The Reserved Instance product platform description (Linux/UNIX | Linux with SQL Server Standard | Linux with SQL Server Web | Linux with SQL Server Enterprise | SUSE Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA |  Windows | Windows with SQL Server Standard | Windows with SQL Server Web | Windows with SQL Server Enterprise).    reserved-instances-offering-id - The Reserved Instances offering ID.    scope - The scope of the Reserved Instance (Availability Zone or Region).    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).
    ///   - includeMarketplace: Include Reserved Instance Marketplace offerings in the response.
    ///   - instanceTenancy: The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of dedicated is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).  Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default
    ///   - instanceType: The instance type that the reservation will cover (for example, m1.small). For more information, see Amazon EC2 instance types in the Amazon EC2 User Guide.
    ///   - maxDuration: The maximum duration (in seconds) to filter when searching for offerings. Default: 94608000 (3 years)
    ///   - maxInstanceCount: The maximum number of instances to filter when searching for offerings. Default: 20
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining
    ///   - minDuration: The minimum duration (in seconds) to filter when searching for offerings. Default: 2592000 (1 month)
    ///   - offeringClass: The offering class of the Reserved Instance. Can be standard or convertible.
    ///   - offeringType: The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API
    ///   - productDescription: The Reserved Instance product platform description. Instances that include (Amazon VPC) in the description are for use with Amazon VPC.
    ///   - reservedInstancesOfferingIds: One or more Reserved Instances offering IDs.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeReservedInstancesOfferingsPaginator(
        availabilityZone: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        includeMarketplace: Bool? = nil,
        instanceTenancy: Tenancy? = nil,
        instanceType: InstanceType? = nil,
        maxDuration: Int64? = nil,
        maxInstanceCount: Int? = nil,
        maxResults: Int? = nil,
        minDuration: Int64? = nil,
        offeringClass: OfferingClassType? = nil,
        offeringType: OfferingTypeValues? = nil,
        productDescription: RIProductDescription? = nil,
        reservedInstancesOfferingIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeReservedInstancesOfferingsRequest, DescribeReservedInstancesOfferingsResult> {
        let input = DescribeReservedInstancesOfferingsRequest(
            availabilityZone: availabilityZone, 
            dryRun: dryRun, 
            filters: filters, 
            includeMarketplace: includeMarketplace, 
            instanceTenancy: instanceTenancy, 
            instanceType: instanceType, 
            maxDuration: maxDuration, 
            maxInstanceCount: maxInstanceCount, 
            maxResults: maxResults, 
            minDuration: minDuration, 
            offeringClass: offeringClass, 
            offeringType: offeringType, 
            productDescription: productDescription, 
            reservedInstancesOfferingIds: reservedInstancesOfferingIds
        )
        return self.describeReservedInstancesOfferingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeRouteTables(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRouteTablesPaginator(
        _ input: DescribeRouteTablesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeRouteTablesRequest, DescribeRouteTablesResult> {
        return .init(
            input: input,
            command: self.describeRouteTables,
            inputKey: \DescribeRouteTablesRequest.nextToken,
            outputKey: \DescribeRouteTablesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeRouteTables(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    association.gateway-id - The ID of the gateway involved in the
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - routeTableIds: The IDs of the route tables.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeRouteTablesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        routeTableIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeRouteTablesRequest, DescribeRouteTablesResult> {
        let input = DescribeRouteTablesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            routeTableIds: routeTableIds
        )
        return self.describeRouteTablesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeScheduledInstanceAvailability(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeScheduledInstanceAvailabilityPaginator(
        _ input: DescribeScheduledInstanceAvailabilityRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeScheduledInstanceAvailabilityRequest, DescribeScheduledInstanceAvailabilityResult> {
        return .init(
            input: input,
            command: self.describeScheduledInstanceAvailability,
            inputKey: \DescribeScheduledInstanceAvailabilityRequest.nextToken,
            outputKey: \DescribeScheduledInstanceAvailabilityResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeScheduledInstanceAvailability(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    platform - The platform (Linux/UNIX or Windows).
    ///   - firstSlotStartTimeRange: The time period for the first schedule to start.
    ///   - maxResults: The maximum number of results to return in a single call.  This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned NextToken value.
    ///   - maxSlotDurationInHours: The maximum available duration, in hours. This value must be greater than MinSlotDurationInHours and less than 1,720.
    ///   - minSlotDurationInHours: The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
    ///   - recurrence: The schedule recurrence.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeScheduledInstanceAvailabilityPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        firstSlotStartTimeRange: SlotDateTimeRangeRequest? = nil,
        maxResults: Int? = nil,
        maxSlotDurationInHours: Int? = nil,
        minSlotDurationInHours: Int? = nil,
        recurrence: ScheduledInstanceRecurrenceRequest? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeScheduledInstanceAvailabilityRequest, DescribeScheduledInstanceAvailabilityResult> {
        let input = DescribeScheduledInstanceAvailabilityRequest(
            dryRun: dryRun, 
            filters: filters, 
            firstSlotStartTimeRange: firstSlotStartTimeRange, 
            maxResults: maxResults, 
            maxSlotDurationInHours: maxSlotDurationInHours, 
            minSlotDurationInHours: minSlotDurationInHours, 
            recurrence: recurrence
        )
        return self.describeScheduledInstanceAvailabilityPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeScheduledInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeScheduledInstancesPaginator(
        _ input: DescribeScheduledInstancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeScheduledInstancesRequest, DescribeScheduledInstancesResult> {
        return .init(
            input: input,
            command: self.describeScheduledInstances,
            inputKey: \DescribeScheduledInstancesRequest.nextToken,
            outputKey: \DescribeScheduledInstancesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeScheduledInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    platform - The platform (Linux/UNIX or Windows).
    ///   - maxResults: The maximum number of results to return in a single call.  This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned NextToken value.
    ///   - scheduledInstanceIds: The Scheduled Instance IDs.
    ///   - slotStartTimeRange: The time period for the first schedule to start.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeScheduledInstancesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        scheduledInstanceIds: [String]? = nil,
        slotStartTimeRange: SlotStartTimeRangeRequest? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeScheduledInstancesRequest, DescribeScheduledInstancesResult> {
        let input = DescribeScheduledInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            scheduledInstanceIds: scheduledInstanceIds, 
            slotStartTimeRange: slotStartTimeRange
        )
        return self.describeScheduledInstancesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSecurityGroupRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSecurityGroupRulesPaginator(
        _ input: DescribeSecurityGroupRulesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSecurityGroupRulesRequest, DescribeSecurityGroupRulesResult> {
        return .init(
            input: input,
            command: self.describeSecurityGroupRules,
            inputKey: \DescribeSecurityGroupRulesRequest.nextToken,
            outputKey: \DescribeSecurityGroupRulesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSecurityGroupRules(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    group-id - The ID of the security group.    security-group-rule-id - The ID of the security group rule.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of  items, make another request with the token returned in the output. This value can be between 5 and 1000. If this parameter is not specified, then all items are returned. For more information, see Pagination.
    ///   - securityGroupRuleIds: The IDs of the security group rules.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSecurityGroupRulesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        securityGroupRuleIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSecurityGroupRulesRequest, DescribeSecurityGroupRulesResult> {
        let input = DescribeSecurityGroupRulesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            securityGroupRuleIds: securityGroupRuleIds
        )
        return self.describeSecurityGroupRulesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSecurityGroupVpcAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSecurityGroupVpcAssociationsPaginator(
        _ input: DescribeSecurityGroupVpcAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSecurityGroupVpcAssociationsRequest, DescribeSecurityGroupVpcAssociationsResult> {
        return .init(
            input: input,
            command: self.describeSecurityGroupVpcAssociations,
            inputKey: \DescribeSecurityGroupVpcAssociationsRequest.nextToken,
            outputKey: \DescribeSecurityGroupVpcAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSecurityGroupVpcAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Security group VPC association filters.    group-id: The security group ID.    vpc-id: The ID of the associated VPC.    vpc-owner-id: The account ID of the VPC owner.    state: The state of the association.    tag:: The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key: The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSecurityGroupVpcAssociationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSecurityGroupVpcAssociationsRequest, DescribeSecurityGroupVpcAssociationsResult> {
        let input = DescribeSecurityGroupVpcAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeSecurityGroupVpcAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSecurityGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSecurityGroupsPaginator(
        _ input: DescribeSecurityGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSecurityGroupsRequest, DescribeSecurityGroupsResult> {
        return .init(
            input: input,
            command: self.describeSecurityGroups,
            inputKey: \DescribeSecurityGroupsRequest.nextToken,
            outputKey: \DescribeSecurityGroupsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSecurityGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.    description - The description of the security group.    egress.ip-permission.cidr - An IPv4 CIDR block for an outbound security group rule.    egress.ip-permission.from-port - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    egress.ip-permission.group-id - The ID of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.group-name - The name of a security group that is referenced in an outbound security group rule.    egress.ip-permission.ipv6-cidr - An IPv6 CIDR block for an outbound security group rule.    egress.ip-permission.prefix-list-id - The ID of a prefix list to which a security group rule allows outbound access.    egress.ip-permission.protocol - The IP protocol for an outbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    egress.ip-permission.to-port - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    egress.ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an outbound security group rule.    group-id - The ID of the security group.     group-name - The name of the security group.    ip-permission.cidr - An IPv4 CIDR block for an inbound security group rule.    ip-permission.from-port - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    ip-permission.group-id - The ID of a security group that has been referenced in an inbound security group rule.    ip-permission.group-name - The name of a security group that is referenced in an inbound security group rule.    ip-permission.ipv6-cidr - An IPv6 CIDR block for an inbound security group rule.    ip-permission.prefix-list-id - The ID of a prefix list from which a security group rule allows inbound access.    ip-permission.protocol - The IP protocol for an inbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    ip-permission.to-port - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an inbound security group rule.    owner-id - The Amazon Web Services account ID of the owner of the security group.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC specified when the security group was created.
    ///   - groupIds: The IDs of the security groups. Required for security groups in a nondefault VPC. Default: Describes all of your security groups.
    ///   - groupNames: [Default VPC] The names of the security groups. You can specify either
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. This value can be between 5 and 1000.  If this parameter is not specified, then all items are returned. For more information, see  Pagination.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSecurityGroupsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        groupIds: [String]? = nil,
        groupNames: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSecurityGroupsRequest, DescribeSecurityGroupsResult> {
        let input = DescribeSecurityGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            groupIds: groupIds, 
            groupNames: groupNames, 
            maxResults: maxResults
        )
        return self.describeSecurityGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSnapshotTierStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSnapshotTierStatusPaginator(
        _ input: DescribeSnapshotTierStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotTierStatusRequest, DescribeSnapshotTierStatusResult> {
        return .init(
            input: input,
            command: self.describeSnapshotTierStatus,
            inputKey: \DescribeSnapshotTierStatusRequest.nextToken,
            outputKey: \DescribeSnapshotTierStatusResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSnapshotTierStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    snapshot-id - The snapshot ID.    volume-id - The ID of the volume the snapshot is for.    last-tiering-operation - The state of the last archive or restore action. (archival-in-progress | archival-completed | archival-failed | permanent-restore-in-progress | permanent-restore-completed | permanent-restore-failed |
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSnapshotTierStatusPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotTierStatusRequest, DescribeSnapshotTierStatusResult> {
        let input = DescribeSnapshotTierStatusRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeSnapshotTierStatusPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSnapshotsPaginator(
        _ input: DescribeSnapshotsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotsRequest, DescribeSnapshotsResult> {
        return .init(
            input: input,
            command: self.describeSnapshots,
            inputKey: \DescribeSnapshotsRequest.nextToken,
            outputKey: \DescribeSnapshotsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    description - A description of the snapshot.    encrypted - Indicates whether the snapshot is encrypted (true | false)    owner-alias - The owner alias, from an Amazon-maintained list   (amazon).  This is not the user-configured Amazon Web Services account alias set using the IAM console. We recommend that you use the related parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that  you use the related parameter instead of this filter.    progress - The progress of the snapshot, as a percentage (for example, 80%).    snapshot-id - The snapshot ID.    start-time - The time stamp when the snapshot was initiated.    status - The status of the snapshot (pending | completed | error).    storage-tier - The storage tier of the snapshot (archive | standard).    transfer-type - The type of operation used to create the snapshot (time-based | standard).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The ID of the volume the snapshot is for.    volume-size - The size of the volume, in GiB.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - ownerIds: Scopes the results to snapshots with the specified owners. You can specify a combination of Amazon Web Services account IDs, self, and amazon.
    ///   - restorableByUserIds: The IDs of the Amazon Web Services accounts that can create volumes from the snapshot.
    ///   - snapshotIds: The snapshot IDs. Default: Describes the snapshots for which you have create volume permissions.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSnapshotsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        ownerIds: [String]? = nil,
        restorableByUserIds: [String]? = nil,
        snapshotIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSnapshotsRequest, DescribeSnapshotsResult> {
        let input = DescribeSnapshotsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            ownerIds: ownerIds, 
            restorableByUserIds: restorableByUserIds, 
            snapshotIds: snapshotIds
        )
        return self.describeSnapshotsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSpotFleetRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSpotFleetRequestsPaginator(
        _ input: DescribeSpotFleetRequestsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSpotFleetRequestsRequest, DescribeSpotFleetRequestsResponse> {
        return .init(
            input: input,
            command: self.describeSpotFleetRequests,
            inputKey: \DescribeSpotFleetRequestsRequest.nextToken,
            outputKey: \DescribeSpotFleetRequestsResponse.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSpotFleetRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - spotFleetRequestIds: The IDs of the Spot Fleet requests.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSpotFleetRequestsPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        spotFleetRequestIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSpotFleetRequestsRequest, DescribeSpotFleetRequestsResponse> {
        let input = DescribeSpotFleetRequestsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            spotFleetRequestIds: spotFleetRequestIds
        )
        return self.describeSpotFleetRequestsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSpotInstanceRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSpotInstanceRequestsPaginator(
        _ input: DescribeSpotInstanceRequestsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSpotInstanceRequestsRequest, DescribeSpotInstanceRequestsResult> {
        return .init(
            input: input,
            command: self.describeSpotInstanceRequests,
            inputKey: \DescribeSpotInstanceRequestsRequest.nextToken,
            outputKey: \DescribeSpotInstanceRequestsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSpotInstanceRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone-group - The Availability Zone group.    create-time - The time stamp when the Spot Instance request was created.    fault-code - The fault code related to the request.    fault-message - The fault message related to the request.    instance-id - The ID of the instance that fulfilled the request.    launch-group - The Spot Instance launch group.    launch.block-device-mapping.delete-on-termination - Indicates whether the EBS volume is deleted on instance termination.    launch.block-device-mapping.device-name - The device name for the volume in the block device mapping (for example, /dev/sdh or xvdh).    launch.block-device-mapping.snapshot-id - The ID of the snapshot for the EBS volume.    launch.block-device-mapping.volume-size - The size of the EBS volume, in GiB.    launch.block-device-mapping.volume-type - The type of EBS volume: gp2 or gp3 for General Purpose SSD, io1  or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic.    launch.group-id - The ID of the security group for the instance.    launch.group-name - The name of the security group for the instance.    launch.image-id - The ID of the AMI.    launch.instance-type - The type of instance (for example, m3.medium).    launch.kernel-id - The kernel ID.    launch.key-name - The name of the key pair the instance launched with.    launch.monitoring-enabled - Whether detailed monitoring is enabled for the Spot Instance.    launch.ramdisk-id - The RAM disk ID.    launched-availability-zone - The Availability Zone in which the request is launched.    network-interface.addresses.primary - Indicates whether the IP address is the primary private IP address.    network-interface.delete-on-termination - Indicates whether the network interface is deleted when the instance is terminated.    network-interface.description - A description of the network interface.    network-interface.device-index - The index of the device for the network interface attachment on the instance.    network-interface.group-id - The ID of the security group associated with the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.private-ip-address - The primary private IP address of the network interface.    network-interface.subnet-id - The ID of the subnet for the instance.    product-description - The product description associated with the instance (Linux/UNIX | Windows).    spot-instance-request-id - The Spot Instance request ID.    spot-price - The maximum hourly price for any Spot Instance launched to fulfill the request.    state - The state of the Spot Instance request (open | active | closed | cancelled | failed). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see Spot request status in the Amazon EC2 User Guide.    status-code - The short code describing the most recent evaluation of your Spot Instance request.    status-message - The message explaining the status of the Spot Instance request.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of Spot Instance request (one-time | persistent).    valid-from - The start date of the request.    valid-until - The end date of the request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - spotInstanceRequestIds: The IDs of the Spot Instance requests.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSpotInstanceRequestsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        spotInstanceRequestIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSpotInstanceRequestsRequest, DescribeSpotInstanceRequestsResult> {
        let input = DescribeSpotInstanceRequestsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            spotInstanceRequestIds: spotInstanceRequestIds
        )
        return self.describeSpotInstanceRequestsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSpotPriceHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSpotPriceHistoryPaginator(
        _ input: DescribeSpotPriceHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSpotPriceHistoryRequest, DescribeSpotPriceHistoryResult> {
        return .init(
            input: input,
            command: self.describeSpotPriceHistory,
            inputKey: \DescribeSpotPriceHistoryRequest.nextToken,
            outputKey: \DescribeSpotPriceHistoryResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSpotPriceHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - availabilityZone: Filters the results by the specified Availability Zone.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - endTime: The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
    ///   - filters: The filters.    availability-zone - The Availability Zone for which prices should be returned.    instance-type - The type of instance (for example, m3.medium).    product-description - The product description for the Spot price (Linux/UNIX | Red Hat Enterprise Linux | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | Red Hat Enterprise Linux (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon VPC)).    spot-price - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).    timestamp - The time stamp of the Spot price history, in UTC format (for example, ddd MMM dd HH:mm:ss UTC YYYY). You can use wildcards (* and ?). Greater than or less than comparison is not supported.
    ///   - instanceTypes: Filters the results by the specified instance types.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - productDescriptions: Filters the results by the specified basic product descriptions.
    ///   - startTime: The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSpotPriceHistoryPaginator(
        availabilityZone: String? = nil,
        dryRun: Bool? = nil,
        endTime: Date? = nil,
        filters: [Filter]? = nil,
        instanceTypes: [InstanceType]? = nil,
        maxResults: Int? = nil,
        productDescriptions: [String]? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSpotPriceHistoryRequest, DescribeSpotPriceHistoryResult> {
        let input = DescribeSpotPriceHistoryRequest(
            availabilityZone: availabilityZone, 
            dryRun: dryRun, 
            endTime: endTime, 
            filters: filters, 
            instanceTypes: instanceTypes, 
            maxResults: maxResults, 
            productDescriptions: productDescriptions, 
            startTime: startTime
        )
        return self.describeSpotPriceHistoryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeStaleSecurityGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeStaleSecurityGroupsPaginator(
        _ input: DescribeStaleSecurityGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeStaleSecurityGroupsRequest, DescribeStaleSecurityGroupsResult> {
        return .init(
            input: input,
            command: self.describeStaleSecurityGroups,
            inputKey: \DescribeStaleSecurityGroupsRequest.nextToken,
            outputKey: \DescribeStaleSecurityGroupsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeStaleSecurityGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - vpcId: The ID of the VPC.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeStaleSecurityGroupsPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeStaleSecurityGroupsRequest, DescribeStaleSecurityGroupsResult> {
        let input = DescribeStaleSecurityGroupsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            vpcId: vpcId
        )
        return self.describeStaleSecurityGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeStoreImageTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeStoreImageTasksPaginator(
        _ input: DescribeStoreImageTasksRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeStoreImageTasksRequest, DescribeStoreImageTasksResult> {
        return .init(
            input: input,
            command: self.describeStoreImageTasks,
            inputKey: \DescribeStoreImageTasksRequest.nextToken,
            outputKey: \DescribeStoreImageTasksResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeStoreImageTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - filters: The filters.    task-state - Returns tasks in a certain state (InProgress | Completed | Failed)    bucket - Returns task information for tasks that targeted a specific bucket. For the filter value, specify the bucket name.    When you specify the ImageIds parameter, any filters that you specify are ignored. To use the filters, you must remove the ImageIds parameter.
    ///   - imageIds: The AMI IDs for which to show progress. Up to 20 AMI IDs can be included in a request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeStoreImageTasksPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeStoreImageTasksRequest, DescribeStoreImageTasksResult> {
        let input = DescribeStoreImageTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            imageIds: imageIds, 
            maxResults: maxResults
        )
        return self.describeStoreImageTasksPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeSubnets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSubnetsPaginator(
        _ input: DescribeSubnetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeSubnetsRequest, DescribeSubnetsResult> {
        return .init(
            input: input,
            command: self.describeSubnets,
            inputKey: \DescribeSubnetsRequest.nextToken,
            outputKey: \DescribeSubnetsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeSubnets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone for the subnet. You can also use availabilityZone as the filter name.    availability-zone-id - The ID of the Availability Zone for the subnet. You can also use availabilityZoneId as the filter name.    available-ip-address-count - The number of IPv4 addresses in the subnet that are available.    cidr-block - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use cidr or cidrBlock as the filter names.    customer-owned-ipv4-pool - The customer-owned IPv4 address pool associated with the subnet.    default-for-az - Indicates whether this is the default subnet for the Availability Zone (true | false). You can also use defaultForAz as the filter name.    enable-dns64 - Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.    enable-lni-at-device-index - Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1).     ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.association-id - An association ID for an IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the subnet.    ipv6-native - Indicates whether this is an IPv6 only subnet (true | false).    map-customer-owned-ip-on-launch - Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.    map-public-ip-on-launch - Indicates whether instances launched in this subnet receive a public IPv4 address.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the subnet.    private-dns-name-options-on-launch.hostname-type - The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).    private-dns-name-options-on-launch.enable-resource-name-dns-a-record - Indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options-on-launch.enable-resource-name-dns-aaaa-record - Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    state - The state of the subnet (pending | available).    subnet-arn - The Amazon Resource Name (ARN) of the subnet.    subnet-id - The ID of the subnet.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the subnet.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - subnetIds: The IDs of the subnets. Default: Describes all your subnets.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeSubnetsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        subnetIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeSubnetsRequest, DescribeSubnetsResult> {
        let input = DescribeSubnetsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            subnetIds: subnetIds
        )
        return self.describeSubnetsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTagsPaginator(
        _ input: DescribeTagsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTagsRequest, DescribeTagsResult> {
        return .init(
            input: input,
            command: self.describeTags,
            inputKey: \DescribeTagsRequest.nextToken,
            outputKey: \DescribeTagsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTags(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    key - The tag key.    resource-id - The ID of the resource.    resource-type - The resource type. For a list of possible values, see  TagSpecification.    tag: - The key/value combination of the tag. For example, specify "tag:Owner" for the filter name and "TeamA" for the filter value to find resources with the tag "Owner=TeamA".    value - The tag value.
    ///   - maxResults: The maximum number of items to return for this request. This value can be between 5 and 1000.  To get the next page of items, make another request with the token returned in the output. For more information, see Pagination.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTagsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTagsRequest, DescribeTagsResult> {
        let input = DescribeTagsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeTagsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTrafficMirrorFilters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrafficMirrorFiltersPaginator(
        _ input: DescribeTrafficMirrorFiltersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTrafficMirrorFiltersRequest, DescribeTrafficMirrorFiltersResult> {
        return .init(
            input: input,
            command: self.describeTrafficMirrorFilters,
            inputKey: \DescribeTrafficMirrorFiltersRequest.nextToken,
            outputKey: \DescribeTrafficMirrorFiltersResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTrafficMirrorFilters(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    description: The Traffic Mirror filter description.    traffic-mirror-filter-id: The ID of the Traffic Mirror filter.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - trafficMirrorFilterIds: The ID of the Traffic Mirror filter.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrafficMirrorFiltersPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        trafficMirrorFilterIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTrafficMirrorFiltersRequest, DescribeTrafficMirrorFiltersResult> {
        let input = DescribeTrafficMirrorFiltersRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            trafficMirrorFilterIds: trafficMirrorFilterIds
        )
        return self.describeTrafficMirrorFiltersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTrafficMirrorSessions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrafficMirrorSessionsPaginator(
        _ input: DescribeTrafficMirrorSessionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTrafficMirrorSessionsRequest, DescribeTrafficMirrorSessionsResult> {
        return .init(
            input: input,
            command: self.describeTrafficMirrorSessions,
            inputKey: \DescribeTrafficMirrorSessionsRequest.nextToken,
            outputKey: \DescribeTrafficMirrorSessionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTrafficMirrorSessions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    description: The Traffic Mirror session description.    network-interface-id: The ID of the Traffic Mirror session network interface.    owner-id: The ID of the account that owns the Traffic Mirror session.    packet-length: The assigned number of packets to mirror.     session-number: The assigned session number.     traffic-mirror-filter-id: The ID of the Traffic Mirror filter.    traffic-mirror-session-id: The ID of the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.    virtual-network-id: The virtual network ID of the Traffic Mirror session.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - trafficMirrorSessionIds: The ID of the Traffic Mirror session.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrafficMirrorSessionsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        trafficMirrorSessionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTrafficMirrorSessionsRequest, DescribeTrafficMirrorSessionsResult> {
        let input = DescribeTrafficMirrorSessionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            trafficMirrorSessionIds: trafficMirrorSessionIds
        )
        return self.describeTrafficMirrorSessionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTrafficMirrorTargets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrafficMirrorTargetsPaginator(
        _ input: DescribeTrafficMirrorTargetsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTrafficMirrorTargetsRequest, DescribeTrafficMirrorTargetsResult> {
        return .init(
            input: input,
            command: self.describeTrafficMirrorTargets,
            inputKey: \DescribeTrafficMirrorTargetsRequest.nextToken,
            outputKey: \DescribeTrafficMirrorTargetsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTrafficMirrorTargets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    description: The Traffic Mirror target description.    network-interface-id: The ID of the Traffic Mirror session network interface.    network-load-balancer-arn: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.    owner-id: The ID of the account that owns the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - trafficMirrorTargetIds: The ID of the Traffic Mirror targets.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrafficMirrorTargetsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        trafficMirrorTargetIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTrafficMirrorTargetsRequest, DescribeTrafficMirrorTargetsResult> {
        let input = DescribeTrafficMirrorTargetsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            trafficMirrorTargetIds: trafficMirrorTargetIds
        )
        return self.describeTrafficMirrorTargetsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGatewayAttachments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayAttachmentsPaginator(
        _ input: DescribeTransitGatewayAttachmentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayAttachmentsRequest, DescribeTransitGatewayAttachmentsResult> {
        return .init(
            input: input,
            command: self.describeTransitGatewayAttachments,
            inputKey: \DescribeTransitGatewayAttachmentsRequest.nextToken,
            outputKey: \DescribeTransitGatewayAttachmentsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGatewayAttachments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    association.state - The state of the association (associating | associated | disassociating).    association.transit-gateway-route-table-id - The ID of the route table for the transit gateway.    resource-id - The ID of the resource.    resource-owner-id - The ID of the Amazon Web Services account that owns the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    state - The state of the attachment. Valid values are available | deleted | deleting | failed |  failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-owner-id - The ID of the Amazon Web Services account that owns the transit gateway.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayAttachmentIds: The IDs of the attachments.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayAttachmentsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayAttachmentIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayAttachmentsRequest, DescribeTransitGatewayAttachmentsResult> {
        let input = DescribeTransitGatewayAttachmentsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayAttachmentIds: transitGatewayAttachmentIds
        )
        return self.describeTransitGatewayAttachmentsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGatewayConnectPeers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayConnectPeersPaginator(
        _ input: DescribeTransitGatewayConnectPeersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayConnectPeersRequest, DescribeTransitGatewayConnectPeersResult> {
        return .init(
            input: input,
            command: self.describeTransitGatewayConnectPeers,
            inputKey: \DescribeTransitGatewayConnectPeersRequest.nextToken,
            outputKey: \DescribeTransitGatewayConnectPeersResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGatewayConnectPeers(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    state - The state of the Connect peer (pending | available | deleting | deleted).    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-connect-peer-id - The ID of the Connect peer.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayConnectPeerIds: The IDs of the Connect peers.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayConnectPeersPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayConnectPeerIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayConnectPeersRequest, DescribeTransitGatewayConnectPeersResult> {
        let input = DescribeTransitGatewayConnectPeersRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayConnectPeerIds: transitGatewayConnectPeerIds
        )
        return self.describeTransitGatewayConnectPeersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGatewayConnects(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayConnectsPaginator(
        _ input: DescribeTransitGatewayConnectsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayConnectsRequest, DescribeTransitGatewayConnectsResult> {
        return .init(
            input: input,
            command: self.describeTransitGatewayConnects,
            inputKey: \DescribeTransitGatewayConnectsRequest.nextToken,
            outputKey: \DescribeTransitGatewayConnectsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGatewayConnects(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    options.protocol - The tunnel protocol (gre).    state - The state of the attachment (initiating | initiatingRequest | pendingAcceptance | rollingBack | pending | available | modifying | deleting | deleted | failed | rejected | rejecting | failing).    transit-gateway-attachment-id - The ID of the Connect attachment.    transit-gateway-id - The ID of the transit gateway.    transport-transit-gateway-attachment-id - The ID of the transit gateway attachment from which the Connect attachment was created.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayAttachmentIds: The IDs of the attachments.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayConnectsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayAttachmentIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayConnectsRequest, DescribeTransitGatewayConnectsResult> {
        let input = DescribeTransitGatewayConnectsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayAttachmentIds: transitGatewayAttachmentIds
        )
        return self.describeTransitGatewayConnectsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGatewayMulticastDomains(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayMulticastDomainsPaginator(
        _ input: DescribeTransitGatewayMulticastDomainsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayMulticastDomainsRequest, DescribeTransitGatewayMulticastDomainsResult> {
        return .init(
            input: input,
            command: self.describeTransitGatewayMulticastDomains,
            inputKey: \DescribeTransitGatewayMulticastDomainsRequest.nextToken,
            outputKey: \DescribeTransitGatewayMulticastDomainsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGatewayMulticastDomains(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    state - The state of the transit gateway multicast domain. Valid values are pending | available | deleting | deleted.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-multicast-domain-id - The ID of the transit gateway multicast domain.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayMulticastDomainIds: The ID of the transit gateway multicast domain.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayMulticastDomainsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayMulticastDomainIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayMulticastDomainsRequest, DescribeTransitGatewayMulticastDomainsResult> {
        let input = DescribeTransitGatewayMulticastDomainsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayMulticastDomainIds: transitGatewayMulticastDomainIds
        )
        return self.describeTransitGatewayMulticastDomainsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGatewayPeeringAttachments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayPeeringAttachmentsPaginator(
        _ input: DescribeTransitGatewayPeeringAttachmentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayPeeringAttachmentsRequest, DescribeTransitGatewayPeeringAttachmentsResult> {
        return .init(
            input: input,
            command: self.describeTransitGatewayPeeringAttachments,
            inputKey: \DescribeTransitGatewayPeeringAttachmentsRequest.nextToken,
            outputKey: \DescribeTransitGatewayPeeringAttachmentsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGatewayPeeringAttachments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    transit-gateway-attachment-id - The ID of the transit gateway attachment.    local-owner-id - The ID of your Amazon Web Services account.    remote-owner-id - The ID of the Amazon Web Services account in the remote Region that owns the transit gateway.    state - The state of the peering attachment. Valid values are available | deleted | deleting | failed |  failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    transit-gateway-id - The ID of the transit gateway.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayAttachmentIds: One or more IDs of the transit gateway peering attachments.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayPeeringAttachmentsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayAttachmentIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayPeeringAttachmentsRequest, DescribeTransitGatewayPeeringAttachmentsResult> {
        let input = DescribeTransitGatewayPeeringAttachmentsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayAttachmentIds: transitGatewayAttachmentIds
        )
        return self.describeTransitGatewayPeeringAttachmentsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGatewayPolicyTables(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayPolicyTablesPaginator(
        _ input: DescribeTransitGatewayPolicyTablesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayPolicyTablesRequest, DescribeTransitGatewayPolicyTablesResult> {
        return .init(
            input: input,
            command: self.describeTransitGatewayPolicyTables,
            inputKey: \DescribeTransitGatewayPolicyTablesRequest.nextToken,
            outputKey: \DescribeTransitGatewayPolicyTablesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGatewayPolicyTables(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters associated with the transit gateway policy table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayPolicyTableIds: The IDs of the transit gateway policy tables.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayPolicyTablesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayPolicyTableIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayPolicyTablesRequest, DescribeTransitGatewayPolicyTablesResult> {
        let input = DescribeTransitGatewayPolicyTablesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayPolicyTableIds: transitGatewayPolicyTableIds
        )
        return self.describeTransitGatewayPolicyTablesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGatewayRouteTableAnnouncements(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayRouteTableAnnouncementsPaginator(
        _ input: DescribeTransitGatewayRouteTableAnnouncementsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayRouteTableAnnouncementsRequest, DescribeTransitGatewayRouteTableAnnouncementsResult> {
        return .init(
            input: input,
            command: self.describeTransitGatewayRouteTableAnnouncements,
            inputKey: \DescribeTransitGatewayRouteTableAnnouncementsRequest.nextToken,
            outputKey: \DescribeTransitGatewayRouteTableAnnouncementsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGatewayRouteTableAnnouncements(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters associated with the transit gateway policy table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayRouteTableAnnouncementIds: The IDs of the transit gateway route tables that are being advertised.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayRouteTableAnnouncementsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayRouteTableAnnouncementIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayRouteTableAnnouncementsRequest, DescribeTransitGatewayRouteTableAnnouncementsResult> {
        let input = DescribeTransitGatewayRouteTableAnnouncementsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayRouteTableAnnouncementIds: transitGatewayRouteTableAnnouncementIds
        )
        return self.describeTransitGatewayRouteTableAnnouncementsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGatewayRouteTables(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayRouteTablesPaginator(
        _ input: DescribeTransitGatewayRouteTablesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayRouteTablesRequest, DescribeTransitGatewayRouteTablesResult> {
        return .init(
            input: input,
            command: self.describeTransitGatewayRouteTables,
            inputKey: \DescribeTransitGatewayRouteTablesRequest.nextToken,
            outputKey: \DescribeTransitGatewayRouteTablesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGatewayRouteTables(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    default-association-route-table - Indicates whether this is the default association route table for the transit gateway (true | false).    default-propagation-route-table - Indicates whether this is the default propagation route table for the transit gateway (true | false).    state - The state of the route table (available | deleting | deleted | pending).    transit-gateway-id - The ID of the transit gateway.    transit-gateway-route-table-id - The ID of the transit gateway route table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayRouteTableIds: The IDs of the transit gateway route tables.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayRouteTablesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayRouteTableIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayRouteTablesRequest, DescribeTransitGatewayRouteTablesResult> {
        let input = DescribeTransitGatewayRouteTablesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayRouteTableIds: transitGatewayRouteTableIds
        )
        return self.describeTransitGatewayRouteTablesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGatewayVpcAttachments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayVpcAttachmentsPaginator(
        _ input: DescribeTransitGatewayVpcAttachmentsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayVpcAttachmentsRequest, DescribeTransitGatewayVpcAttachmentsResult> {
        return .init(
            input: input,
            command: self.describeTransitGatewayVpcAttachments,
            inputKey: \DescribeTransitGatewayVpcAttachmentsRequest.nextToken,
            outputKey: \DescribeTransitGatewayVpcAttachmentsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGatewayVpcAttachments(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    state - The state of the attachment. Valid values are available | deleted | deleting | failed |  failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    vpc-id - The ID of the VPC.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayAttachmentIds: The IDs of the attachments.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewayVpcAttachmentsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayAttachmentIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewayVpcAttachmentsRequest, DescribeTransitGatewayVpcAttachmentsResult> {
        let input = DescribeTransitGatewayVpcAttachmentsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayAttachmentIds: transitGatewayAttachmentIds
        )
        return self.describeTransitGatewayVpcAttachmentsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTransitGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewaysPaginator(
        _ input: DescribeTransitGatewaysRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewaysRequest, DescribeTransitGatewaysResult> {
        return .init(
            input: input,
            command: self.describeTransitGateways,
            inputKey: \DescribeTransitGatewaysRequest.nextToken,
            outputKey: \DescribeTransitGatewaysResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTransitGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    options.propagation-default-route-table-id - The ID of the default propagation route table.    options.amazon-side-asn - The private ASN for the Amazon side of a BGP session.    options.association-default-route-table-id - The ID of the default association route table.    options.auto-accept-shared-attachments - Indicates whether there is automatic acceptance of attachment requests (enable | disable).    options.default-route-table-association - Indicates whether resource attachments are automatically  associated with the default association route table (enable | disable).    options.default-route-table-propagation - Indicates whether resource attachments automatically propagate  routes to the default propagation route table (enable | disable).    options.dns-support - Indicates whether DNS support is enabled (enable | disable).    options.vpn-ecmp-support - Indicates whether Equal Cost Multipath Protocol support is enabled  (enable | disable).    owner-id - The ID of the Amazon Web Services account that owns the transit gateway.    state - The state of the transit gateway (available | deleted | deleting | modifying | pending).    transit-gateway-id - The ID of the transit gateway.    tag-key - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayIds: The IDs of the transit gateways.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTransitGatewaysPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTransitGatewaysRequest, DescribeTransitGatewaysResult> {
        let input = DescribeTransitGatewaysRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayIds: transitGatewayIds
        )
        return self.describeTransitGatewaysPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeTrunkInterfaceAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrunkInterfaceAssociationsPaginator(
        _ input: DescribeTrunkInterfaceAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeTrunkInterfaceAssociationsRequest, DescribeTrunkInterfaceAssociationsResult> {
        return .init(
            input: input,
            command: self.describeTrunkInterfaceAssociations,
            inputKey: \DescribeTrunkInterfaceAssociationsRequest.nextToken,
            outputKey: \DescribeTrunkInterfaceAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeTrunkInterfaceAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - associationIds: The IDs of the associations.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    gre-key - The ID of a trunk interface association.    interface-protocol - The interface protocol. Valid values are VLAN and GRE.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeTrunkInterfaceAssociationsPaginator(
        associationIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeTrunkInterfaceAssociationsRequest, DescribeTrunkInterfaceAssociationsResult> {
        let input = DescribeTrunkInterfaceAssociationsRequest(
            associationIds: associationIds, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeTrunkInterfaceAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVerifiedAccessEndpoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessEndpointsPaginator(
        _ input: DescribeVerifiedAccessEndpointsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessEndpointsRequest, DescribeVerifiedAccessEndpointsResult> {
        return .init(
            input: input,
            command: self.describeVerifiedAccessEndpoints,
            inputKey: \DescribeVerifiedAccessEndpointsRequest.nextToken,
            outputKey: \DescribeVerifiedAccessEndpointsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVerifiedAccessEndpoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - verifiedAccessEndpointIds: The ID of the Verified Access endpoint.
    ///   - verifiedAccessGroupId: The ID of the Verified Access group.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessEndpointsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        verifiedAccessEndpointIds: [String]? = nil,
        verifiedAccessGroupId: String? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessEndpointsRequest, DescribeVerifiedAccessEndpointsResult> {
        let input = DescribeVerifiedAccessEndpointsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            verifiedAccessEndpointIds: verifiedAccessEndpointIds, 
            verifiedAccessGroupId: verifiedAccessGroupId, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return self.describeVerifiedAccessEndpointsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVerifiedAccessGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessGroupsPaginator(
        _ input: DescribeVerifiedAccessGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessGroupsRequest, DescribeVerifiedAccessGroupsResult> {
        return .init(
            input: input,
            command: self.describeVerifiedAccessGroups,
            inputKey: \DescribeVerifiedAccessGroupsRequest.nextToken,
            outputKey: \DescribeVerifiedAccessGroupsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVerifiedAccessGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - verifiedAccessGroupIds: The ID of the Verified Access groups.
    ///   - verifiedAccessInstanceId: The ID of the Verified Access instance.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessGroupsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        verifiedAccessGroupIds: [String]? = nil,
        verifiedAccessInstanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessGroupsRequest, DescribeVerifiedAccessGroupsResult> {
        let input = DescribeVerifiedAccessGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            verifiedAccessGroupIds: verifiedAccessGroupIds, 
            verifiedAccessInstanceId: verifiedAccessInstanceId
        )
        return self.describeVerifiedAccessGroupsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVerifiedAccessInstanceLoggingConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessInstanceLoggingConfigurationsPaginator(
        _ input: DescribeVerifiedAccessInstanceLoggingConfigurationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessInstanceLoggingConfigurationsRequest, DescribeVerifiedAccessInstanceLoggingConfigurationsResult> {
        return .init(
            input: input,
            command: self.describeVerifiedAccessInstanceLoggingConfigurations,
            inputKey: \DescribeVerifiedAccessInstanceLoggingConfigurationsRequest.nextToken,
            outputKey: \DescribeVerifiedAccessInstanceLoggingConfigurationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVerifiedAccessInstanceLoggingConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - verifiedAccessInstanceIds: The IDs of the Verified Access instances.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessInstanceLoggingConfigurationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        verifiedAccessInstanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessInstanceLoggingConfigurationsRequest, DescribeVerifiedAccessInstanceLoggingConfigurationsResult> {
        let input = DescribeVerifiedAccessInstanceLoggingConfigurationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            verifiedAccessInstanceIds: verifiedAccessInstanceIds
        )
        return self.describeVerifiedAccessInstanceLoggingConfigurationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVerifiedAccessInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessInstancesPaginator(
        _ input: DescribeVerifiedAccessInstancesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessInstancesRequest, DescribeVerifiedAccessInstancesResult> {
        return .init(
            input: input,
            command: self.describeVerifiedAccessInstances,
            inputKey: \DescribeVerifiedAccessInstancesRequest.nextToken,
            outputKey: \DescribeVerifiedAccessInstancesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVerifiedAccessInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - verifiedAccessInstanceIds: The IDs of the Verified Access instances.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessInstancesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        verifiedAccessInstanceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessInstancesRequest, DescribeVerifiedAccessInstancesResult> {
        let input = DescribeVerifiedAccessInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            verifiedAccessInstanceIds: verifiedAccessInstanceIds
        )
        return self.describeVerifiedAccessInstancesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVerifiedAccessTrustProviders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessTrustProvidersPaginator(
        _ input: DescribeVerifiedAccessTrustProvidersRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessTrustProvidersRequest, DescribeVerifiedAccessTrustProvidersResult> {
        return .init(
            input: input,
            command: self.describeVerifiedAccessTrustProviders,
            inputKey: \DescribeVerifiedAccessTrustProvidersRequest.nextToken,
            outputKey: \DescribeVerifiedAccessTrustProvidersResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVerifiedAccessTrustProviders(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. Filter names and values are case-sensitive.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - verifiedAccessTrustProviderIds: The IDs of the Verified Access trust providers.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVerifiedAccessTrustProvidersPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        verifiedAccessTrustProviderIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVerifiedAccessTrustProvidersRequest, DescribeVerifiedAccessTrustProvidersResult> {
        let input = DescribeVerifiedAccessTrustProvidersRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            verifiedAccessTrustProviderIds: verifiedAccessTrustProviderIds
        )
        return self.describeVerifiedAccessTrustProvidersPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVolumeStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVolumeStatusPaginator(
        _ input: DescribeVolumeStatusRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVolumeStatusRequest, DescribeVolumeStatusResult> {
        return .init(
            input: input,
            command: self.describeVolumeStatus,
            inputKey: \DescribeVolumeStatusRequest.nextToken,
            outputKey: \DescribeVolumeStatusResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVolumeStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    action.code - The action code for the event (for example, enable-volume-io).    action.description - A description of the action.    action.event-id - The event ID associated with the action.    availability-zone - The Availability Zone of the instance.    event.description - A description of the event.    event.event-id - The event ID.    event.event-type - The event type (for io-enabled: passed | failed; for io-performance: io-performance:degraded | io-performance:severely-degraded | io-performance:stalled).    event.not-after - The latest end time for the event.    event.not-before - The earliest start time for the event.    volume-status.details-name - The cause for volume-status.status (io-enabled | io-performance).    volume-status.details-status - The status of volume-status.details-name (for io-enabled: passed | failed; for io-performance: normal | degraded | severely-degraded | stalled).    volume-status.status - The status of the volume (ok | impaired | warning | insufficient-data).
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - volumeIds: The IDs of the volumes. Default: Describes all your volumes.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVolumeStatusPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVolumeStatusRequest, DescribeVolumeStatusResult> {
        let input = DescribeVolumeStatusRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            volumeIds: volumeIds
        )
        return self.describeVolumeStatusPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVolumes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVolumesPaginator(
        _ input: DescribeVolumesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVolumesRequest, DescribeVolumesResult> {
        return .init(
            input: input,
            command: self.describeVolumes,
            inputKey: \DescribeVolumesRequest.nextToken,
            outputKey: \DescribeVolumesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVolumes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - Indicates whether the volume is encrypted (true | false)    fast-restored - Indicates whether the volume was created from a  snapshot that is enabled for fast snapshot restore (true |  false).    multi-attach-enabled - Indicates whether the volume is enabled for Multi-Attach (true 			| false)    operator.managed - A Boolean that indicates whether this is a managed volume.    operator.principal - The principal that manages the volume. Only valid for managed volumes, where managed is true.    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The state of the volume (creating | available | in-use | deleting | deleted | error).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type (gp2 | gp3 | io1 | io2 |  st1 | sc1| standard)
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - volumeIds: The volume IDs. If not specified, then all volumes are included in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVolumesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVolumesRequest, DescribeVolumesResult> {
        let input = DescribeVolumesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            volumeIds: volumeIds
        )
        return self.describeVolumesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVolumesModifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVolumesModificationsPaginator(
        _ input: DescribeVolumesModificationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVolumesModificationsRequest, DescribeVolumesModificationsResult> {
        return .init(
            input: input,
            command: self.describeVolumesModifications,
            inputKey: \DescribeVolumesModificationsRequest.nextToken,
            outputKey: \DescribeVolumesModificationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVolumesModifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    modification-state - The current modification state (modifying |  optimizing | completed | failed).    original-iops - The original IOPS rate of the volume.    original-size - The original size of the volume, in GiB.    original-volume-type - The original volume type of the volume (standard |  io1 | io2 | gp2 | sc1 | st1).    originalMultiAttachEnabled - Indicates whether Multi-Attach support was enabled (true | false).    start-time - The modification start time.    target-iops - The target IOPS rate of the volume.    target-size - The target size of the volume, in GiB.    target-volume-type - The target volume type of the volume (standard |  io1 | io2 | gp2 | sc1 | st1).    targetMultiAttachEnabled - Indicates whether Multi-Attach support is to be enabled (true | false).    volume-id - The ID of the volume.
    ///   - maxResults: The maximum number of results (up to a limit of 500) to be returned in a paginated request. For more information, see Pagination.
    ///   - volumeIds: The IDs of the volumes.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVolumesModificationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVolumesModificationsRequest, DescribeVolumesModificationsResult> {
        let input = DescribeVolumesModificationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            volumeIds: volumeIds
        )
        return self.describeVolumesModificationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVpcClassicLinkDnsSupport(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcClassicLinkDnsSupportPaginator(
        _ input: DescribeVpcClassicLinkDnsSupportRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVpcClassicLinkDnsSupportRequest, DescribeVpcClassicLinkDnsSupportResult> {
        return .init(
            input: input,
            command: self.describeVpcClassicLinkDnsSupport,
            inputKey: \DescribeVpcClassicLinkDnsSupportRequest.nextToken,
            outputKey: \DescribeVpcClassicLinkDnsSupportResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVpcClassicLinkDnsSupport(_:logger:)``.
    ///
    /// - Parameters:
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - vpcIds: The IDs of the VPCs.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcClassicLinkDnsSupportPaginator(
        maxResults: Int? = nil,
        vpcIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVpcClassicLinkDnsSupportRequest, DescribeVpcClassicLinkDnsSupportResult> {
        let input = DescribeVpcClassicLinkDnsSupportRequest(
            maxResults: maxResults, 
            vpcIds: vpcIds
        )
        return self.describeVpcClassicLinkDnsSupportPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVpcEndpointConnectionNotifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointConnectionNotificationsPaginator(
        _ input: DescribeVpcEndpointConnectionNotificationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointConnectionNotificationsRequest, DescribeVpcEndpointConnectionNotificationsResult> {
        return .init(
            input: input,
            command: self.describeVpcEndpointConnectionNotifications,
            inputKey: \DescribeVpcEndpointConnectionNotificationsRequest.nextToken,
            outputKey: \DescribeVpcEndpointConnectionNotificationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVpcEndpointConnectionNotifications(_:logger:)``.
    ///
    /// - Parameters:
    ///   - connectionNotificationId: The ID of the notification.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    connection-notification-arn - The ARN of the SNS topic for the notification.    connection-notification-id - The ID of the notification.    connection-notification-state - The state of the notification (Enabled | Disabled).    connection-notification-type - The type of notification (Topic).    service-id - The ID of the endpoint service.    vpc-endpoint-id - The ID of the VPC endpoint.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointConnectionNotificationsPaginator(
        connectionNotificationId: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointConnectionNotificationsRequest, DescribeVpcEndpointConnectionNotificationsResult> {
        let input = DescribeVpcEndpointConnectionNotificationsRequest(
            connectionNotificationId: connectionNotificationId, 
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeVpcEndpointConnectionNotificationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVpcEndpointConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointConnectionsPaginator(
        _ input: DescribeVpcEndpointConnectionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointConnectionsRequest, DescribeVpcEndpointConnectionsResult> {
        return .init(
            input: input,
            command: self.describeVpcEndpointConnections,
            inputKey: \DescribeVpcEndpointConnectionsRequest.nextToken,
            outputKey: \DescribeVpcEndpointConnectionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVpcEndpointConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    ip-address-type - The IP address type (ipv4 | ipv6).    service-id - The ID of the service.    vpc-endpoint-owner - The ID of the Amazon Web Services account ID
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointConnectionsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointConnectionsRequest, DescribeVpcEndpointConnectionsResult> {
        let input = DescribeVpcEndpointConnectionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults
        )
        return self.describeVpcEndpointConnectionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVpcEndpointServiceConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointServiceConfigurationsPaginator(
        _ input: DescribeVpcEndpointServiceConfigurationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointServiceConfigurationsRequest, DescribeVpcEndpointServiceConfigurationsResult> {
        return .init(
            input: input,
            command: self.describeVpcEndpointServiceConfigurations,
            inputKey: \DescribeVpcEndpointServiceConfigurationsRequest.nextToken,
            outputKey: \DescribeVpcEndpointServiceConfigurationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVpcEndpointServiceConfigurations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    service-name - The name of the service.    service-id - The ID of the service.    service-state - The state of the service (Pending | Available | Deleting | Deleted | Failed).     supported-ip-address-types - The IP address type (ipv4 | ipv6).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
    ///   - serviceIds: The IDs of the endpoint services.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointServiceConfigurationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        serviceIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointServiceConfigurationsRequest, DescribeVpcEndpointServiceConfigurationsResult> {
        let input = DescribeVpcEndpointServiceConfigurationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            serviceIds: serviceIds
        )
        return self.describeVpcEndpointServiceConfigurationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVpcEndpointServicePermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointServicePermissionsPaginator(
        _ input: DescribeVpcEndpointServicePermissionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointServicePermissionsRequest, DescribeVpcEndpointServicePermissionsResult> {
        return .init(
            input: input,
            command: self.describeVpcEndpointServicePermissions,
            inputKey: \DescribeVpcEndpointServicePermissionsRequest.nextToken,
            outputKey: \DescribeVpcEndpointServicePermissionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVpcEndpointServicePermissions(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    principal - The ARN of the principal.    principal-type - The principal type (All |
    ///   - maxResults: The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
    ///   - serviceId: The ID of the service.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointServicePermissionsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        serviceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointServicePermissionsRequest, DescribeVpcEndpointServicePermissionsResult> {
        let input = DescribeVpcEndpointServicePermissionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            serviceId: serviceId
        )
        return self.describeVpcEndpointServicePermissionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVpcEndpoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointsPaginator(
        _ input: DescribeVpcEndpointsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointsRequest, DescribeVpcEndpointsResult> {
        return .init(
            input: input,
            command: self.describeVpcEndpoints,
            inputKey: \DescribeVpcEndpointsRequest.nextToken,
            outputKey: \DescribeVpcEndpointsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVpcEndpoints(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    ip-address-type - The IP address type (ipv4 | ipv6).    service-name - The name of the service.    service-region - The Region of the service.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the endpoint resides.    vpc-endpoint-id - The ID of the endpoint.    vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).    vpc-endpoint-type - The type of VPC endpoint (Interface | Gateway | GatewayLoadBalancer).
    ///   - maxResults: The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
    ///   - vpcEndpointIds: The IDs of the VPC endpoints.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcEndpointsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        vpcEndpointIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVpcEndpointsRequest, DescribeVpcEndpointsResult> {
        let input = DescribeVpcEndpointsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            vpcEndpointIds: vpcEndpointIds
        )
        return self.describeVpcEndpointsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVpcPeeringConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcPeeringConnectionsPaginator(
        _ input: DescribeVpcPeeringConnectionsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVpcPeeringConnectionsRequest, DescribeVpcPeeringConnectionsResult> {
        return .init(
            input: input,
            command: self.describeVpcPeeringConnections,
            inputKey: \DescribeVpcPeeringConnectionsRequest.nextToken,
            outputKey: \DescribeVpcPeeringConnectionsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVpcPeeringConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.    accepter-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the accepter VPC.    accepter-vpc-info.vpc-id - The ID of the accepter VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleting | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-peering-connection-id - The ID of the VPC peering connection.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - vpcPeeringConnectionIds: The IDs of the VPC peering connections. Default: Describes all your VPC peering connections.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcPeeringConnectionsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        vpcPeeringConnectionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVpcPeeringConnectionsRequest, DescribeVpcPeeringConnectionsResult> {
        let input = DescribeVpcPeeringConnectionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            vpcPeeringConnectionIds: vpcPeeringConnectionIds
        )
        return self.describeVpcPeeringConnectionsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``describeVpcs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcsPaginator(
        _ input: DescribeVpcsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<DescribeVpcsRequest, DescribeVpcsResult> {
        return .init(
            input: input,
            command: self.describeVpcs,
            inputKey: \DescribeVpcsRequest.nextToken,
            outputKey: \DescribeVpcsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``describeVpcs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    cidr-block-association.cidr-block - An IPv4 CIDR block associated with the VPC.    cidr-block-association.association-id - The association ID for an IPv4 CIDR block associated with the VPC.    cidr-block-association.state - The state of an IPv4 CIDR block associated with the VPC.    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.ipv6-pool - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    is-default - Indicates whether the VPC is the default VPC.    owner-id - The ID of the Amazon Web Services account that owns the VPC.    state - The state of the VPC (pending | available).    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - vpcIds: The IDs of the VPCs.
    ///   - logger: Logger used for logging
    @inlinable
    public func describeVpcsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        vpcIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<DescribeVpcsRequest, DescribeVpcsResult> {
        let input = DescribeVpcsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            vpcIds: vpcIds
        )
        return self.describeVpcsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getAssociatedIpv6PoolCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getAssociatedIpv6PoolCidrsPaginator(
        _ input: GetAssociatedIpv6PoolCidrsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetAssociatedIpv6PoolCidrsRequest, GetAssociatedIpv6PoolCidrsResult> {
        return .init(
            input: input,
            command: self.getAssociatedIpv6PoolCidrs,
            inputKey: \GetAssociatedIpv6PoolCidrsRequest.nextToken,
            outputKey: \GetAssociatedIpv6PoolCidrsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getAssociatedIpv6PoolCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - poolId: The ID of the IPv6 address pool.
    ///   - logger: Logger used for logging
    @inlinable
    public func getAssociatedIpv6PoolCidrsPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        poolId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetAssociatedIpv6PoolCidrsRequest, GetAssociatedIpv6PoolCidrsResult> {
        let input = GetAssociatedIpv6PoolCidrsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            poolId: poolId
        )
        return self.getAssociatedIpv6PoolCidrsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getAwsNetworkPerformanceData(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getAwsNetworkPerformanceDataPaginator(
        _ input: GetAwsNetworkPerformanceDataRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetAwsNetworkPerformanceDataRequest, GetAwsNetworkPerformanceDataResult> {
        return .init(
            input: input,
            command: self.getAwsNetworkPerformanceData,
            inputKey: \GetAwsNetworkPerformanceDataRequest.nextToken,
            outputKey: \GetAwsNetworkPerformanceDataResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getAwsNetworkPerformanceData(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dataQueries: A list of network performance data queries.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - endTime: The ending time for the performance data request. The end time must be formatted as yyyy-mm-ddThh:mm:ss. For example, 2022-06-12T12:00:00.000Z.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - startTime: The starting time for the performance data request. The starting time must be formatted as yyyy-mm-ddThh:mm:ss.  For example, 2022-06-10T12:00:00.000Z.
    ///   - logger: Logger used for logging
    @inlinable
    public func getAwsNetworkPerformanceDataPaginator(
        dataQueries: [DataQuery]? = nil,
        dryRun: Bool? = nil,
        endTime: Date? = nil,
        maxResults: Int? = nil,
        startTime: Date? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetAwsNetworkPerformanceDataRequest, GetAwsNetworkPerformanceDataResult> {
        let input = GetAwsNetworkPerformanceDataRequest(
            dataQueries: dataQueries, 
            dryRun: dryRun, 
            endTime: endTime, 
            maxResults: maxResults, 
            startTime: startTime
        )
        return self.getAwsNetworkPerformanceDataPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getGroupsForCapacityReservation(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getGroupsForCapacityReservationPaginator(
        _ input: GetGroupsForCapacityReservationRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetGroupsForCapacityReservationRequest, GetGroupsForCapacityReservationResult> {
        return .init(
            input: input,
            command: self.getGroupsForCapacityReservation,
            inputKey: \GetGroupsForCapacityReservationRequest.nextToken,
            outputKey: \GetGroupsForCapacityReservationResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getGroupsForCapacityReservation(_:logger:)``.
    ///
    /// - Parameters:
    ///   - capacityReservationId: The ID of the Capacity Reservation. If you specify a Capacity Reservation that is
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. For more information,  see Pagination.
    ///   - logger: Logger used for logging
    @inlinable
    public func getGroupsForCapacityReservationPaginator(
        capacityReservationId: String? = nil,
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetGroupsForCapacityReservationRequest, GetGroupsForCapacityReservationResult> {
        let input = GetGroupsForCapacityReservationRequest(
            capacityReservationId: capacityReservationId, 
            dryRun: dryRun, 
            maxResults: maxResults
        )
        return self.getGroupsForCapacityReservationPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getInstanceTypesFromInstanceRequirements(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getInstanceTypesFromInstanceRequirementsPaginator(
        _ input: GetInstanceTypesFromInstanceRequirementsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetInstanceTypesFromInstanceRequirementsRequest, GetInstanceTypesFromInstanceRequirementsResult> {
        return .init(
            input: input,
            command: self.getInstanceTypesFromInstanceRequirements,
            inputKey: \GetInstanceTypesFromInstanceRequirementsRequest.nextToken,
            outputKey: \GetInstanceTypesFromInstanceRequirementsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getInstanceTypesFromInstanceRequirements(_:logger:)``.
    ///
    /// - Parameters:
    ///   - architectureTypes: The processor architecture type.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceRequirements: The attributes required for the instance types.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - virtualizationTypes: The virtualization type.
    ///   - logger: Logger used for logging
    @inlinable
    public func getInstanceTypesFromInstanceRequirementsPaginator(
        architectureTypes: [ArchitectureType]? = nil,
        dryRun: Bool? = nil,
        instanceRequirements: InstanceRequirementsRequest? = nil,
        maxResults: Int? = nil,
        virtualizationTypes: [VirtualizationType]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetInstanceTypesFromInstanceRequirementsRequest, GetInstanceTypesFromInstanceRequirementsResult> {
        let input = GetInstanceTypesFromInstanceRequirementsRequest(
            architectureTypes: architectureTypes, 
            dryRun: dryRun, 
            instanceRequirements: instanceRequirements, 
            maxResults: maxResults, 
            virtualizationTypes: virtualizationTypes
        )
        return self.getInstanceTypesFromInstanceRequirementsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getIpamAddressHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamAddressHistoryPaginator(
        _ input: GetIpamAddressHistoryRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetIpamAddressHistoryRequest, GetIpamAddressHistoryResult> {
        return .init(
            input: input,
            command: self.getIpamAddressHistory,
            inputKey: \GetIpamAddressHistoryRequest.nextToken,
            outputKey: \GetIpamAddressHistoryResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getIpamAddressHistory(_:logger:)``.
    ///
    /// - Parameters:
    ///   - cidr: The CIDR you want the history of. The CIDR can be an IPv4 or IPv6 IP address range.  If you enter a /16 IPv4 CIDR, you will get records that match it exactly. You will not get records for any subnets within the /16 CIDR.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - endTime: The end of the time period for which you are looking for history. If you omit this option, it will default to the current time.
    ///   - ipamScopeId: The ID of the IPAM scope that the CIDR is in.
    ///   - maxResults: The maximum number of historical results you would like returned per page. Defaults to 100.
    ///   - startTime: The start of the time period for which you are looking for history. If you omit this option, it will default to the value of EndTime.
    ///   - vpcId: The ID of the VPC you want your history records filtered by.
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamAddressHistoryPaginator(
        cidr: String? = nil,
        dryRun: Bool? = nil,
        endTime: Date? = nil,
        ipamScopeId: String? = nil,
        maxResults: Int? = nil,
        startTime: Date? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetIpamAddressHistoryRequest, GetIpamAddressHistoryResult> {
        let input = GetIpamAddressHistoryRequest(
            cidr: cidr, 
            dryRun: dryRun, 
            endTime: endTime, 
            ipamScopeId: ipamScopeId, 
            maxResults: maxResults, 
            startTime: startTime, 
            vpcId: vpcId
        )
        return self.getIpamAddressHistoryPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getIpamDiscoveredAccounts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamDiscoveredAccountsPaginator(
        _ input: GetIpamDiscoveredAccountsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetIpamDiscoveredAccountsRequest, GetIpamDiscoveredAccountsResult> {
        return .init(
            input: input,
            command: self.getIpamDiscoveredAccounts,
            inputKey: \GetIpamDiscoveredAccountsRequest.nextToken,
            outputKey: \GetIpamDiscoveredAccountsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getIpamDiscoveredAccounts(_:logger:)``.
    ///
    /// - Parameters:
    ///   - discoveryRegion: The Amazon Web Services Region that the account information is returned from.
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Discovered account filters.
    ///   - ipamResourceDiscoveryId: A resource discovery ID.
    ///   - maxResults: The maximum number of discovered accounts to return in one page of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamDiscoveredAccountsPaginator(
        discoveryRegion: String? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamResourceDiscoveryId: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetIpamDiscoveredAccountsRequest, GetIpamDiscoveredAccountsResult> {
        let input = GetIpamDiscoveredAccountsRequest(
            discoveryRegion: discoveryRegion, 
            dryRun: dryRun, 
            filters: filters, 
            ipamResourceDiscoveryId: ipamResourceDiscoveryId, 
            maxResults: maxResults
        )
        return self.getIpamDiscoveredAccountsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getIpamDiscoveredResourceCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamDiscoveredResourceCidrsPaginator(
        _ input: GetIpamDiscoveredResourceCidrsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetIpamDiscoveredResourceCidrsRequest, GetIpamDiscoveredResourceCidrsResult> {
        return .init(
            input: input,
            command: self.getIpamDiscoveredResourceCidrs,
            inputKey: \GetIpamDiscoveredResourceCidrsRequest.nextToken,
            outputKey: \GetIpamDiscoveredResourceCidrsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getIpamDiscoveredResourceCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: Filters.
    ///   - ipamResourceDiscoveryId: A resource discovery ID.
    ///   - maxResults: The maximum number of discovered resource CIDRs to return in one page of results.
    ///   - resourceRegion: A resource Region.
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamDiscoveredResourceCidrsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamResourceDiscoveryId: String? = nil,
        maxResults: Int? = nil,
        resourceRegion: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetIpamDiscoveredResourceCidrsRequest, GetIpamDiscoveredResourceCidrsResult> {
        let input = GetIpamDiscoveredResourceCidrsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamResourceDiscoveryId: ipamResourceDiscoveryId, 
            maxResults: maxResults, 
            resourceRegion: resourceRegion
        )
        return self.getIpamDiscoveredResourceCidrsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getIpamPoolAllocations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamPoolAllocationsPaginator(
        _ input: GetIpamPoolAllocationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetIpamPoolAllocationsRequest, GetIpamPoolAllocationsResult> {
        return .init(
            input: input,
            command: self.getIpamPoolAllocations,
            inputKey: \GetIpamPoolAllocationsRequest.nextToken,
            outputKey: \GetIpamPoolAllocationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getIpamPoolAllocations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamPoolAllocationId: The ID of the allocation.
    ///   - ipamPoolId: The ID of the IPAM pool you want to see the allocations for.
    ///   - maxResults: The maximum number of results you would like returned per page.
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamPoolAllocationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamPoolAllocationId: String? = nil,
        ipamPoolId: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetIpamPoolAllocationsRequest, GetIpamPoolAllocationsResult> {
        let input = GetIpamPoolAllocationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamPoolAllocationId: ipamPoolAllocationId, 
            ipamPoolId: ipamPoolId, 
            maxResults: maxResults
        )
        return self.getIpamPoolAllocationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getIpamPoolCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamPoolCidrsPaginator(
        _ input: GetIpamPoolCidrsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetIpamPoolCidrsRequest, GetIpamPoolCidrsResult> {
        return .init(
            input: input,
            command: self.getIpamPoolCidrs,
            inputKey: \GetIpamPoolCidrsRequest.nextToken,
            outputKey: \GetIpamPoolCidrsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getIpamPoolCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamPoolId: The ID of the IPAM pool you want the CIDR for.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamPoolCidrsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamPoolId: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetIpamPoolCidrsRequest, GetIpamPoolCidrsResult> {
        let input = GetIpamPoolCidrsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamPoolId: ipamPoolId, 
            maxResults: maxResults
        )
        return self.getIpamPoolCidrsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getIpamResourceCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamResourceCidrsPaginator(
        _ input: GetIpamResourceCidrsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetIpamResourceCidrsRequest, GetIpamResourceCidrsResult> {
        return .init(
            input: input,
            command: self.getIpamResourceCidrs,
            inputKey: \GetIpamResourceCidrsRequest.nextToken,
            outputKey: \GetIpamResourceCidrsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getIpamResourceCidrs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: A check for whether you have the required permissions for the action without actually making the request  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters for the request. For more information about filtering, see Filtering CLI output.
    ///   - ipamPoolId: The ID of the IPAM pool that the resource is in.
    ///   - ipamScopeId: The ID of the scope that the resource is in.
    ///   - maxResults: The maximum number of results to return in the request.
    ///   - resourceId: The ID of the resource.
    ///   - resourceOwner: The ID of the Amazon Web Services account that owns the resource.
    ///   - resourceTag: The resource tag.
    ///   - resourceType: The resource type.
    ///   - logger: Logger used for logging
    @inlinable
    public func getIpamResourceCidrsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        ipamPoolId: String? = nil,
        ipamScopeId: String? = nil,
        maxResults: Int? = nil,
        resourceId: String? = nil,
        resourceOwner: String? = nil,
        resourceTag: RequestIpamResourceTag? = nil,
        resourceType: IpamResourceType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetIpamResourceCidrsRequest, GetIpamResourceCidrsResult> {
        let input = GetIpamResourceCidrsRequest(
            dryRun: dryRun, 
            filters: filters, 
            ipamPoolId: ipamPoolId, 
            ipamScopeId: ipamScopeId, 
            maxResults: maxResults, 
            resourceId: resourceId, 
            resourceOwner: resourceOwner, 
            resourceTag: resourceTag, 
            resourceType: resourceType
        )
        return self.getIpamResourceCidrsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getManagedPrefixListAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getManagedPrefixListAssociationsPaginator(
        _ input: GetManagedPrefixListAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetManagedPrefixListAssociationsRequest, GetManagedPrefixListAssociationsResult> {
        return .init(
            input: input,
            command: self.getManagedPrefixListAssociations,
            inputKey: \GetManagedPrefixListAssociationsRequest.nextToken,
            outputKey: \GetManagedPrefixListAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getManagedPrefixListAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - prefixListId: The ID of the prefix list.
    ///   - logger: Logger used for logging
    @inlinable
    public func getManagedPrefixListAssociationsPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        prefixListId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetManagedPrefixListAssociationsRequest, GetManagedPrefixListAssociationsResult> {
        let input = GetManagedPrefixListAssociationsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            prefixListId: prefixListId
        )
        return self.getManagedPrefixListAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getManagedPrefixListEntries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getManagedPrefixListEntriesPaginator(
        _ input: GetManagedPrefixListEntriesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetManagedPrefixListEntriesRequest, GetManagedPrefixListEntriesResult> {
        return .init(
            input: input,
            command: self.getManagedPrefixListEntries,
            inputKey: \GetManagedPrefixListEntriesRequest.nextToken,
            outputKey: \GetManagedPrefixListEntriesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getManagedPrefixListEntries(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - prefixListId: The ID of the prefix list.
    ///   - targetVersion: The version of the prefix list for which to return the entries. The default is the current version.
    ///   - logger: Logger used for logging
    @inlinable
    public func getManagedPrefixListEntriesPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        prefixListId: String? = nil,
        targetVersion: Int64? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetManagedPrefixListEntriesRequest, GetManagedPrefixListEntriesResult> {
        let input = GetManagedPrefixListEntriesRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            prefixListId: prefixListId, 
            targetVersion: targetVersion
        )
        return self.getManagedPrefixListEntriesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getNetworkInsightsAccessScopeAnalysisFindings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getNetworkInsightsAccessScopeAnalysisFindingsPaginator(
        _ input: GetNetworkInsightsAccessScopeAnalysisFindingsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetNetworkInsightsAccessScopeAnalysisFindingsRequest, GetNetworkInsightsAccessScopeAnalysisFindingsResult> {
        return .init(
            input: input,
            command: self.getNetworkInsightsAccessScopeAnalysisFindings,
            inputKey: \GetNetworkInsightsAccessScopeAnalysisFindingsRequest.nextToken,
            outputKey: \GetNetworkInsightsAccessScopeAnalysisFindingsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getNetworkInsightsAccessScopeAnalysisFindings(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
    ///   - networkInsightsAccessScopeAnalysisId: The ID of the Network Access Scope analysis.
    ///   - logger: Logger used for logging
    @inlinable
    public func getNetworkInsightsAccessScopeAnalysisFindingsPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        networkInsightsAccessScopeAnalysisId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetNetworkInsightsAccessScopeAnalysisFindingsRequest, GetNetworkInsightsAccessScopeAnalysisFindingsResult> {
        let input = GetNetworkInsightsAccessScopeAnalysisFindingsRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            networkInsightsAccessScopeAnalysisId: networkInsightsAccessScopeAnalysisId
        )
        return self.getNetworkInsightsAccessScopeAnalysisFindingsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getSecurityGroupsForVpc(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getSecurityGroupsForVpcPaginator(
        _ input: GetSecurityGroupsForVpcRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetSecurityGroupsForVpcRequest, GetSecurityGroupsForVpcResult> {
        return .init(
            input: input,
            command: self.getSecurityGroupsForVpc,
            inputKey: \GetSecurityGroupsForVpcRequest.nextToken,
            outputKey: \GetSecurityGroupsForVpcResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getSecurityGroupsForVpc(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. If using multiple filters, the results include security groups which match all filters.    group-id: The security group ID.    description: The security group's description.    group-name: The security group name.    owner-id: The security group owner ID.    primary-vpc-id: The VPC ID in which the security group was created.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - vpcId: The VPC ID where the security group can be used.
    ///   - logger: Logger used for logging
    @inlinable
    public func getSecurityGroupsForVpcPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        vpcId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetSecurityGroupsForVpcRequest, GetSecurityGroupsForVpcResult> {
        let input = GetSecurityGroupsForVpcRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            vpcId: vpcId
        )
        return self.getSecurityGroupsForVpcPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getSpotPlacementScores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getSpotPlacementScoresPaginator(
        _ input: GetSpotPlacementScoresRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetSpotPlacementScoresRequest, GetSpotPlacementScoresResult> {
        return .init(
            input: input,
            command: self.getSpotPlacementScores,
            inputKey: \GetSpotPlacementScoresRequest.nextToken,
            outputKey: \GetSpotPlacementScoresResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getSpotPlacementScores(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - instanceRequirementsWithMetadata: The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with those attributes. If you specify InstanceRequirementsWithMetadata, you can't specify InstanceTypes.
    ///   - instanceTypes: The instance types. We recommend that you specify at least three instance types. If you specify one or two instance types, or specify variations of a single instance type (for example, an m3.xlarge with and without instance storage), the returned placement score will always be low.  If you specify InstanceTypes, you can't specify InstanceRequirementsWithMetadata.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - regionNames: The Regions used to narrow down the list of Regions to be scored. Enter the Region code, for example, us-east-1.
    ///   - singleAvailabilityZone: Specify true so that the response returns a list of scored Availability Zones. Otherwise, the response returns a list of scored Regions. A list of scored Availability Zones is useful if you want to launch all of your Spot capacity into a single Availability Zone.
    ///   - targetCapacity: The target capacity.
    ///   - targetCapacityUnitType: The unit for the target capacity.
    ///   - logger: Logger used for logging
    @inlinable
    public func getSpotPlacementScoresPaginator(
        dryRun: Bool? = nil,
        instanceRequirementsWithMetadata: InstanceRequirementsWithMetadataRequest? = nil,
        instanceTypes: [String]? = nil,
        maxResults: Int? = nil,
        regionNames: [String]? = nil,
        singleAvailabilityZone: Bool? = nil,
        targetCapacity: Int? = nil,
        targetCapacityUnitType: TargetCapacityUnitType? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetSpotPlacementScoresRequest, GetSpotPlacementScoresResult> {
        let input = GetSpotPlacementScoresRequest(
            dryRun: dryRun, 
            instanceRequirementsWithMetadata: instanceRequirementsWithMetadata, 
            instanceTypes: instanceTypes, 
            maxResults: maxResults, 
            regionNames: regionNames, 
            singleAvailabilityZone: singleAvailabilityZone, 
            targetCapacity: targetCapacity, 
            targetCapacityUnitType: targetCapacityUnitType
        )
        return self.getSpotPlacementScoresPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getTransitGatewayAttachmentPropagations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayAttachmentPropagationsPaginator(
        _ input: GetTransitGatewayAttachmentPropagationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayAttachmentPropagationsRequest, GetTransitGatewayAttachmentPropagationsResult> {
        return .init(
            input: input,
            command: self.getTransitGatewayAttachmentPropagations,
            inputKey: \GetTransitGatewayAttachmentPropagationsRequest.nextToken,
            outputKey: \GetTransitGatewayAttachmentPropagationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getTransitGatewayAttachmentPropagations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    transit-gateway-route-table-id - The ID of the transit gateway route table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayAttachmentId: The ID of the attachment.
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayAttachmentPropagationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayAttachmentId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayAttachmentPropagationsRequest, GetTransitGatewayAttachmentPropagationsResult> {
        let input = GetTransitGatewayAttachmentPropagationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayAttachmentId: transitGatewayAttachmentId
        )
        return self.getTransitGatewayAttachmentPropagationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getTransitGatewayMulticastDomainAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayMulticastDomainAssociationsPaginator(
        _ input: GetTransitGatewayMulticastDomainAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayMulticastDomainAssociationsRequest, GetTransitGatewayMulticastDomainAssociationsResult> {
        return .init(
            input: input,
            command: self.getTransitGatewayMulticastDomainAssociations,
            inputKey: \GetTransitGatewayMulticastDomainAssociationsRequest.nextToken,
            outputKey: \GetTransitGatewayMulticastDomainAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getTransitGatewayMulticastDomainAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The type of resource. The valid value is: vpc.    state - The state of the subnet association. Valid values are associated | associating | disassociated | disassociating.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayMulticastDomainAssociationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayMulticastDomainAssociationsRequest, GetTransitGatewayMulticastDomainAssociationsResult> {
        let input = GetTransitGatewayMulticastDomainAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return self.getTransitGatewayMulticastDomainAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getTransitGatewayPolicyTableAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayPolicyTableAssociationsPaginator(
        _ input: GetTransitGatewayPolicyTableAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayPolicyTableAssociationsRequest, GetTransitGatewayPolicyTableAssociationsResult> {
        return .init(
            input: input,
            command: self.getTransitGatewayPolicyTableAssociations,
            inputKey: \GetTransitGatewayPolicyTableAssociationsRequest.nextToken,
            outputKey: \GetTransitGatewayPolicyTableAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getTransitGatewayPolicyTableAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters associated with the transit gateway policy table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayPolicyTableId: The ID of the transit gateway policy table.
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayPolicyTableAssociationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayPolicyTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayPolicyTableAssociationsRequest, GetTransitGatewayPolicyTableAssociationsResult> {
        let input = GetTransitGatewayPolicyTableAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayPolicyTableId: transitGatewayPolicyTableId
        )
        return self.getTransitGatewayPolicyTableAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getTransitGatewayPrefixListReferences(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayPrefixListReferencesPaginator(
        _ input: GetTransitGatewayPrefixListReferencesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayPrefixListReferencesRequest, GetTransitGatewayPrefixListReferencesResult> {
        return .init(
            input: input,
            command: self.getTransitGatewayPrefixListReferences,
            inputKey: \GetTransitGatewayPrefixListReferencesRequest.nextToken,
            outputKey: \GetTransitGatewayPrefixListReferencesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getTransitGatewayPrefixListReferences(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    attachment.resource-id - The ID of the resource for the attachment.    attachment.resource-type - The type of resource for the attachment. Valid values are vpc | vpn | direct-connect-gateway | peering.    attachment.transit-gateway-attachment-id - The ID of the attachment.    is-blackhole - Whether traffic matching the route is blocked (true | false).    prefix-list-id - The ID of the prefix list.    prefix-list-owner-id - The ID of the owner of the prefix list.    state - The state of the prefix list reference (pending | available | modifying | deleting).
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayPrefixListReferencesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayPrefixListReferencesRequest, GetTransitGatewayPrefixListReferencesResult> {
        let input = GetTransitGatewayPrefixListReferencesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return self.getTransitGatewayPrefixListReferencesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getTransitGatewayRouteTableAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayRouteTableAssociationsPaginator(
        _ input: GetTransitGatewayRouteTableAssociationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayRouteTableAssociationsRequest, GetTransitGatewayRouteTableAssociationsResult> {
        return .init(
            input: input,
            command: self.getTransitGatewayRouteTableAssociations,
            inputKey: \GetTransitGatewayRouteTableAssociationsRequest.nextToken,
            outputKey: \GetTransitGatewayRouteTableAssociationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getTransitGatewayRouteTableAssociations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    transit-gateway-attachment-id - The ID of the attachment.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayRouteTableAssociationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayRouteTableAssociationsRequest, GetTransitGatewayRouteTableAssociationsResult> {
        let input = GetTransitGatewayRouteTableAssociationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return self.getTransitGatewayRouteTableAssociationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getTransitGatewayRouteTablePropagations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayRouteTablePropagationsPaginator(
        _ input: GetTransitGatewayRouteTablePropagationsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayRouteTablePropagationsRequest, GetTransitGatewayRouteTablePropagationsResult> {
        return .init(
            input: input,
            command: self.getTransitGatewayRouteTablePropagations,
            inputKey: \GetTransitGatewayRouteTablePropagationsRequest.nextToken,
            outputKey: \GetTransitGatewayRouteTablePropagationsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getTransitGatewayRouteTablePropagations(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    transit-gateway-attachment-id - The ID of the attachment.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayRouteTableId: The ID of the transit gateway route table.
    ///   - logger: Logger used for logging
    @inlinable
    public func getTransitGatewayRouteTablePropagationsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayRouteTableId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetTransitGatewayRouteTablePropagationsRequest, GetTransitGatewayRouteTablePropagationsResult> {
        let input = GetTransitGatewayRouteTablePropagationsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayRouteTableId: transitGatewayRouteTableId
        )
        return self.getTransitGatewayRouteTablePropagationsPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``getVpnConnectionDeviceTypes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func getVpnConnectionDeviceTypesPaginator(
        _ input: GetVpnConnectionDeviceTypesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<GetVpnConnectionDeviceTypesRequest, GetVpnConnectionDeviceTypesResult> {
        return .init(
            input: input,
            command: self.getVpnConnectionDeviceTypes,
            inputKey: \GetVpnConnectionDeviceTypesRequest.nextToken,
            outputKey: \GetVpnConnectionDeviceTypesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``getVpnConnectionDeviceTypes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of results returned by GetVpnConnectionDeviceTypes in paginated output. When this parameter is used, GetVpnConnectionDeviceTypes only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another GetVpnConnectionDeviceTypes request with the returned NextToken value. This value can be between 200 and 1000. If this parameter is not used, then GetVpnConnectionDeviceTypes returns all results.
    ///   - logger: Logger used for logging
    @inlinable
    public func getVpnConnectionDeviceTypesPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<GetVpnConnectionDeviceTypesRequest, GetVpnConnectionDeviceTypesResult> {
        let input = GetVpnConnectionDeviceTypesRequest(
            dryRun: dryRun, 
            maxResults: maxResults
        )
        return self.getVpnConnectionDeviceTypesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listImagesInRecycleBin(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listImagesInRecycleBinPaginator(
        _ input: ListImagesInRecycleBinRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListImagesInRecycleBinRequest, ListImagesInRecycleBinResult> {
        return .init(
            input: input,
            command: self.listImagesInRecycleBin,
            inputKey: \ListImagesInRecycleBinRequest.nextToken,
            outputKey: \ListImagesInRecycleBinResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listImagesInRecycleBin(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - imageIds: The IDs of the AMIs to list. Omit this parameter to list all of the AMIs that are in the Recycle Bin. You can specify up to 20 IDs in a single request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - logger: Logger used for logging
    @inlinable
    public func listImagesInRecycleBinPaginator(
        dryRun: Bool? = nil,
        imageIds: [String]? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListImagesInRecycleBinRequest, ListImagesInRecycleBinResult> {
        let input = ListImagesInRecycleBinRequest(
            dryRun: dryRun, 
            imageIds: imageIds, 
            maxResults: maxResults
        )
        return self.listImagesInRecycleBinPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``listSnapshotsInRecycleBin(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func listSnapshotsInRecycleBinPaginator(
        _ input: ListSnapshotsInRecycleBinRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<ListSnapshotsInRecycleBinRequest, ListSnapshotsInRecycleBinResult> {
        return .init(
            input: input,
            command: self.listSnapshotsInRecycleBin,
            inputKey: \ListSnapshotsInRecycleBinRequest.nextToken,
            outputKey: \ListSnapshotsInRecycleBinResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``listSnapshotsInRecycleBin(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - snapshotIds: The IDs of the snapshots to list. Omit this parameter to list all of the  snapshots that are in the Recycle Bin.
    ///   - logger: Logger used for logging
    @inlinable
    public func listSnapshotsInRecycleBinPaginator(
        dryRun: Bool? = nil,
        maxResults: Int? = nil,
        snapshotIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<ListSnapshotsInRecycleBinRequest, ListSnapshotsInRecycleBinResult> {
        let input = ListSnapshotsInRecycleBinRequest(
            dryRun: dryRun, 
            maxResults: maxResults, 
            snapshotIds: snapshotIds
        )
        return self.listSnapshotsInRecycleBinPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchLocalGatewayRoutes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchLocalGatewayRoutesPaginator(
        _ input: SearchLocalGatewayRoutesRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchLocalGatewayRoutesRequest, SearchLocalGatewayRoutesResult> {
        return .init(
            input: input,
            command: self.searchLocalGatewayRoutes,
            inputKey: \SearchLocalGatewayRoutesRequest.nextToken,
            outputKey: \SearchLocalGatewayRoutesResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchLocalGatewayRoutes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    prefix-list-id - The ID of the prefix list.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter.  For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match  as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route.    type - The route type.
    ///   - localGatewayRouteTableId: The ID of the local gateway route table.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchLocalGatewayRoutesPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        localGatewayRouteTableId: String? = nil,
        maxResults: Int? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchLocalGatewayRoutesRequest, SearchLocalGatewayRoutesResult> {
        let input = SearchLocalGatewayRoutesRequest(
            dryRun: dryRun, 
            filters: filters, 
            localGatewayRouteTableId: localGatewayRouteTableId, 
            maxResults: maxResults
        )
        return self.searchLocalGatewayRoutesPaginator(input, logger: logger)
    }

    /// Return PaginatorSequence for operation ``searchTransitGatewayMulticastGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func searchTransitGatewayMulticastGroupsPaginator(
        _ input: SearchTransitGatewayMulticastGroupsRequest,
        logger: Logger = AWSClient.loggingDisabled
    ) -> AWSClient.PaginatorSequence<SearchTransitGatewayMulticastGroupsRequest, SearchTransitGatewayMulticastGroupsResult> {
        return .init(
            input: input,
            command: self.searchTransitGatewayMulticastGroups,
            inputKey: \SearchTransitGatewayMulticastGroupsRequest.nextToken,
            outputKey: \SearchTransitGatewayMulticastGroupsResult.nextToken,
            logger: logger
        )
    }
    /// Return PaginatorSequence for operation ``searchTransitGatewayMulticastGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters. The possible values are:    group-ip-address - The IP address of the  transit gateway multicast group.    is-group-member - The resource is a group member. Valid values are true | false.    is-group-source - The resource is a group source. Valid values are true | false.    member-type - The member type. Valid values are igmp | static.    resource-id - The ID of the resource.    resource-type - The type of resource. Valid values are vpc | vpn | direct-connect-gateway | tgw-peering.    source-type - The source type. Valid values are igmp | static.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.
    ///   - maxResults: The maximum number of results to return with a single call.
    ///   - transitGatewayMulticastDomainId: The ID of the transit gateway multicast domain.
    ///   - logger: Logger used for logging
    @inlinable
    public func searchTransitGatewayMulticastGroupsPaginator(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        transitGatewayMulticastDomainId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) -> AWSClient.PaginatorSequence<SearchTransitGatewayMulticastGroupsRequest, SearchTransitGatewayMulticastGroupsResult> {
        let input = SearchTransitGatewayMulticastGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            transitGatewayMulticastDomainId: transitGatewayMulticastDomainId
        )
        return self.searchTransitGatewayMulticastGroupsPaginator(input, logger: logger)
    }
}

extension EC2.DescribeAddressTransfersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeAddressTransfersRequest {
        return .init(
            allocationIds: self.allocationIds,
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeAddressesAttributeRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeAddressesAttributeRequest {
        return .init(
            allocationIds: self.allocationIds,
            attribute: self.attribute,
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeAwsNetworkPerformanceMetricSubscriptionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeAwsNetworkPerformanceMetricSubscriptionsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeByoipCidrsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeByoipCidrsRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeCapacityBlockExtensionHistoryRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeCapacityBlockExtensionHistoryRequest {
        return .init(
            capacityReservationIds: self.capacityReservationIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeCapacityBlockExtensionOfferingsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeCapacityBlockExtensionOfferingsRequest {
        return .init(
            capacityBlockExtensionDurationHours: self.capacityBlockExtensionDurationHours,
            capacityReservationId: self.capacityReservationId,
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeCapacityBlockOfferingsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeCapacityBlockOfferingsRequest {
        return .init(
            capacityDurationHours: self.capacityDurationHours,
            dryRun: self.dryRun,
            endDateRange: self.endDateRange,
            instanceCount: self.instanceCount,
            instanceType: self.instanceType,
            maxResults: self.maxResults,
            nextToken: token,
            startDateRange: self.startDateRange
        )
    }
}

extension EC2.DescribeCapacityReservationBillingRequestsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeCapacityReservationBillingRequestsRequest {
        return .init(
            capacityReservationIds: self.capacityReservationIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            role: self.role
        )
    }
}

extension EC2.DescribeCapacityReservationFleetsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeCapacityReservationFleetsRequest {
        return .init(
            capacityReservationFleetIds: self.capacityReservationFleetIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeCapacityReservationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeCapacityReservationsRequest {
        return .init(
            capacityReservationIds: self.capacityReservationIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeCarrierGatewaysRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeCarrierGatewaysRequest {
        return .init(
            carrierGatewayIds: self.carrierGatewayIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeClassicLinkInstancesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeClassicLinkInstancesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeClientVpnAuthorizationRulesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeClientVpnAuthorizationRulesRequest {
        return .init(
            clientVpnEndpointId: self.clientVpnEndpointId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeClientVpnConnectionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeClientVpnConnectionsRequest {
        return .init(
            clientVpnEndpointId: self.clientVpnEndpointId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeClientVpnEndpointsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeClientVpnEndpointsRequest {
        return .init(
            clientVpnEndpointIds: self.clientVpnEndpointIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeClientVpnRoutesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeClientVpnRoutesRequest {
        return .init(
            clientVpnEndpointId: self.clientVpnEndpointId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeClientVpnTargetNetworksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeClientVpnTargetNetworksRequest {
        return .init(
            associationIds: self.associationIds,
            clientVpnEndpointId: self.clientVpnEndpointId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeCoipPoolsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeCoipPoolsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            poolIds: self.poolIds
        )
    }
}

extension EC2.DescribeDhcpOptionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeDhcpOptionsRequest {
        return .init(
            dhcpOptionsIds: self.dhcpOptionsIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeEgressOnlyInternetGatewaysRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeEgressOnlyInternetGatewaysRequest {
        return .init(
            dryRun: self.dryRun,
            egressOnlyInternetGatewayIds: self.egressOnlyInternetGatewayIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeExportImageTasksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeExportImageTasksRequest {
        return .init(
            dryRun: self.dryRun,
            exportImageTaskIds: self.exportImageTaskIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeFastLaunchImagesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeFastLaunchImagesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            imageIds: self.imageIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeFastSnapshotRestoresRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeFastSnapshotRestoresRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeFleetsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeFleetsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            fleetIds: self.fleetIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeFlowLogsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeFlowLogsRequest {
        return .init(
            dryRun: self.dryRun,
            filter: self.filter,
            flowLogIds: self.flowLogIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeFpgaImagesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeFpgaImagesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            fpgaImageIds: self.fpgaImageIds,
            maxResults: self.maxResults,
            nextToken: token,
            owners: self.owners
        )
    }
}

extension EC2.DescribeHostReservationOfferingsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeHostReservationOfferingsRequest {
        return .init(
            filter: self.filter,
            maxDuration: self.maxDuration,
            maxResults: self.maxResults,
            minDuration: self.minDuration,
            nextToken: token,
            offeringId: self.offeringId
        )
    }
}

extension EC2.DescribeHostReservationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeHostReservationsRequest {
        return .init(
            filter: self.filter,
            hostReservationIdSet: self.hostReservationIdSet,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeHostsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeHostsRequest {
        return .init(
            filter: self.filter,
            hostIds: self.hostIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeIamInstanceProfileAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeIamInstanceProfileAssociationsRequest {
        return .init(
            associationIds: self.associationIds,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeImagesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeImagesRequest {
        return .init(
            dryRun: self.dryRun,
            executableUsers: self.executableUsers,
            filters: self.filters,
            imageIds: self.imageIds,
            includeDeprecated: self.includeDeprecated,
            includeDisabled: self.includeDisabled,
            maxResults: self.maxResults,
            nextToken: token,
            owners: self.owners
        )
    }
}

extension EC2.DescribeImportImageTasksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeImportImageTasksRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            importTaskIds: self.importTaskIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeImportSnapshotTasksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeImportSnapshotTasksRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            importTaskIds: self.importTaskIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInstanceConnectEndpointsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInstanceConnectEndpointsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceConnectEndpointIds: self.instanceConnectEndpointIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInstanceCreditSpecificationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInstanceCreditSpecificationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInstanceEventWindowsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInstanceEventWindowsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceEventWindowIds: self.instanceEventWindowIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInstanceImageMetadataRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInstanceImageMetadataRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInstanceStatusRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInstanceStatusRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            includeAllInstances: self.includeAllInstances,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInstanceTopologyRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInstanceTopologyRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            groupNames: self.groupNames,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInstanceTypeOfferingsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInstanceTypeOfferingsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            locationType: self.locationType,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInstanceTypesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInstanceTypesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceTypes: self.instanceTypes,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInstancesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInstancesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            instanceIds: self.instanceIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeInternetGatewaysRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeInternetGatewaysRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            internetGatewayIds: self.internetGatewayIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeIpamPoolsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeIpamPoolsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamPoolIds: self.ipamPoolIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeIpamResourceDiscoveriesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeIpamResourceDiscoveriesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamResourceDiscoveryIds: self.ipamResourceDiscoveryIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeIpamResourceDiscoveryAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeIpamResourceDiscoveryAssociationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamResourceDiscoveryAssociationIds: self.ipamResourceDiscoveryAssociationIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeIpamScopesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeIpamScopesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamScopeIds: self.ipamScopeIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeIpamsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeIpamsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamIds: self.ipamIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeIpv6PoolsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeIpv6PoolsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            poolIds: self.poolIds
        )
    }
}

extension EC2.DescribeLaunchTemplateVersionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeLaunchTemplateVersionsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            launchTemplateId: self.launchTemplateId,
            launchTemplateName: self.launchTemplateName,
            maxResults: self.maxResults,
            maxVersion: self.maxVersion,
            minVersion: self.minVersion,
            nextToken: token,
            resolveAlias: self.resolveAlias,
            versions: self.versions
        )
    }
}

extension EC2.DescribeLaunchTemplatesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeLaunchTemplatesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            launchTemplateIds: self.launchTemplateIds,
            launchTemplateNames: self.launchTemplateNames,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayRouteTableVirtualInterfaceGroupAssociationIds: self.localGatewayRouteTableVirtualInterfaceGroupAssociationIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeLocalGatewayRouteTableVpcAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeLocalGatewayRouteTableVpcAssociationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayRouteTableVpcAssociationIds: self.localGatewayRouteTableVpcAssociationIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeLocalGatewayRouteTablesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeLocalGatewayRouteTablesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayRouteTableIds: self.localGatewayRouteTableIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeLocalGatewayVirtualInterfaceGroupsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeLocalGatewayVirtualInterfaceGroupsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayVirtualInterfaceGroupIds: self.localGatewayVirtualInterfaceGroupIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeLocalGatewayVirtualInterfacesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeLocalGatewayVirtualInterfacesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayVirtualInterfaceIds: self.localGatewayVirtualInterfaceIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeLocalGatewaysRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeLocalGatewaysRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayIds: self.localGatewayIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeMacHostsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeMacHostsRequest {
        return .init(
            filters: self.filters,
            hostIds: self.hostIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeManagedPrefixListsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeManagedPrefixListsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            prefixListIds: self.prefixListIds
        )
    }
}

extension EC2.DescribeMovingAddressesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeMovingAddressesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            publicIps: self.publicIps
        )
    }
}

extension EC2.DescribeNatGatewaysRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeNatGatewaysRequest {
        return .init(
            dryRun: self.dryRun,
            filter: self.filter,
            maxResults: self.maxResults,
            natGatewayIds: self.natGatewayIds,
            nextToken: token
        )
    }
}

extension EC2.DescribeNetworkAclsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeNetworkAclsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkAclIds: self.networkAclIds,
            nextToken: token
        )
    }
}

extension EC2.DescribeNetworkInsightsAccessScopeAnalysesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeNetworkInsightsAccessScopeAnalysesRequest {
        return .init(
            analysisStartTimeBegin: self.analysisStartTimeBegin,
            analysisStartTimeEnd: self.analysisStartTimeEnd,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInsightsAccessScopeAnalysisIds: self.networkInsightsAccessScopeAnalysisIds,
            networkInsightsAccessScopeId: self.networkInsightsAccessScopeId,
            nextToken: token
        )
    }
}

extension EC2.DescribeNetworkInsightsAccessScopesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeNetworkInsightsAccessScopesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInsightsAccessScopeIds: self.networkInsightsAccessScopeIds,
            nextToken: token
        )
    }
}

extension EC2.DescribeNetworkInsightsAnalysesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeNetworkInsightsAnalysesRequest {
        return .init(
            analysisEndTime: self.analysisEndTime,
            analysisStartTime: self.analysisStartTime,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInsightsAnalysisIds: self.networkInsightsAnalysisIds,
            networkInsightsPathId: self.networkInsightsPathId,
            nextToken: token
        )
    }
}

extension EC2.DescribeNetworkInsightsPathsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeNetworkInsightsPathsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInsightsPathIds: self.networkInsightsPathIds,
            nextToken: token
        )
    }
}

extension EC2.DescribeNetworkInterfacePermissionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeNetworkInterfacePermissionsRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            networkInterfacePermissionIds: self.networkInterfacePermissionIds,
            nextToken: token
        )
    }
}

extension EC2.DescribeNetworkInterfacesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeNetworkInterfacesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            networkInterfaceIds: self.networkInterfaceIds,
            nextToken: token
        )
    }
}

extension EC2.DescribePrefixListsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribePrefixListsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            prefixListIds: self.prefixListIds
        )
    }
}

extension EC2.DescribePrincipalIdFormatRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribePrincipalIdFormatRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            resources: self.resources
        )
    }
}

extension EC2.DescribePublicIpv4PoolsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribePublicIpv4PoolsRequest {
        return .init(
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            poolIds: self.poolIds
        )
    }
}

extension EC2.DescribeReplaceRootVolumeTasksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeReplaceRootVolumeTasksRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            replaceRootVolumeTaskIds: self.replaceRootVolumeTaskIds
        )
    }
}

extension EC2.DescribeReservedInstancesModificationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeReservedInstancesModificationsRequest {
        return .init(
            filters: self.filters,
            nextToken: token,
            reservedInstancesModificationIds: self.reservedInstancesModificationIds
        )
    }
}

extension EC2.DescribeReservedInstancesOfferingsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeReservedInstancesOfferingsRequest {
        return .init(
            availabilityZone: self.availabilityZone,
            dryRun: self.dryRun,
            filters: self.filters,
            includeMarketplace: self.includeMarketplace,
            instanceTenancy: self.instanceTenancy,
            instanceType: self.instanceType,
            maxDuration: self.maxDuration,
            maxInstanceCount: self.maxInstanceCount,
            maxResults: self.maxResults,
            minDuration: self.minDuration,
            nextToken: token,
            offeringClass: self.offeringClass,
            offeringType: self.offeringType,
            productDescription: self.productDescription,
            reservedInstancesOfferingIds: self.reservedInstancesOfferingIds
        )
    }
}

extension EC2.DescribeRouteTablesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeRouteTablesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            routeTableIds: self.routeTableIds
        )
    }
}

extension EC2.DescribeScheduledInstanceAvailabilityRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeScheduledInstanceAvailabilityRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            firstSlotStartTimeRange: self.firstSlotStartTimeRange,
            maxResults: self.maxResults,
            maxSlotDurationInHours: self.maxSlotDurationInHours,
            minSlotDurationInHours: self.minSlotDurationInHours,
            nextToken: token,
            recurrence: self.recurrence
        )
    }
}

extension EC2.DescribeScheduledInstancesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeScheduledInstancesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            scheduledInstanceIds: self.scheduledInstanceIds,
            slotStartTimeRange: self.slotStartTimeRange
        )
    }
}

extension EC2.DescribeSecurityGroupRulesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeSecurityGroupRulesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            securityGroupRuleIds: self.securityGroupRuleIds
        )
    }
}

extension EC2.DescribeSecurityGroupVpcAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeSecurityGroupVpcAssociationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeSecurityGroupsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeSecurityGroupsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            groupIds: self.groupIds,
            groupNames: self.groupNames,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeSnapshotTierStatusRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeSnapshotTierStatusRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeSnapshotsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeSnapshotsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            ownerIds: self.ownerIds,
            restorableByUserIds: self.restorableByUserIds,
            snapshotIds: self.snapshotIds
        )
    }
}

extension EC2.DescribeSpotFleetRequestsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeSpotFleetRequestsRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            spotFleetRequestIds: self.spotFleetRequestIds
        )
    }
}

extension EC2.DescribeSpotInstanceRequestsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeSpotInstanceRequestsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            spotInstanceRequestIds: self.spotInstanceRequestIds
        )
    }
}

extension EC2.DescribeSpotPriceHistoryRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeSpotPriceHistoryRequest {
        return .init(
            availabilityZone: self.availabilityZone,
            dryRun: self.dryRun,
            endTime: self.endTime,
            filters: self.filters,
            instanceTypes: self.instanceTypes,
            maxResults: self.maxResults,
            nextToken: token,
            productDescriptions: self.productDescriptions,
            startTime: self.startTime
        )
    }
}

extension EC2.DescribeStaleSecurityGroupsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeStaleSecurityGroupsRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            vpcId: self.vpcId
        )
    }
}

extension EC2.DescribeStoreImageTasksRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeStoreImageTasksRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            imageIds: self.imageIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeSubnetsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeSubnetsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            subnetIds: self.subnetIds
        )
    }
}

extension EC2.DescribeTagsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTagsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeTrafficMirrorFiltersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTrafficMirrorFiltersRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            trafficMirrorFilterIds: self.trafficMirrorFilterIds
        )
    }
}

extension EC2.DescribeTrafficMirrorSessionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTrafficMirrorSessionsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            trafficMirrorSessionIds: self.trafficMirrorSessionIds
        )
    }
}

extension EC2.DescribeTrafficMirrorTargetsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTrafficMirrorTargetsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            trafficMirrorTargetIds: self.trafficMirrorTargetIds
        )
    }
}

extension EC2.DescribeTransitGatewayAttachmentsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewayAttachmentsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentIds: self.transitGatewayAttachmentIds
        )
    }
}

extension EC2.DescribeTransitGatewayConnectPeersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewayConnectPeersRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayConnectPeerIds: self.transitGatewayConnectPeerIds
        )
    }
}

extension EC2.DescribeTransitGatewayConnectsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewayConnectsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentIds: self.transitGatewayAttachmentIds
        )
    }
}

extension EC2.DescribeTransitGatewayMulticastDomainsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewayMulticastDomainsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayMulticastDomainIds: self.transitGatewayMulticastDomainIds
        )
    }
}

extension EC2.DescribeTransitGatewayPeeringAttachmentsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewayPeeringAttachmentsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentIds: self.transitGatewayAttachmentIds
        )
    }
}

extension EC2.DescribeTransitGatewayPolicyTablesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewayPolicyTablesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayPolicyTableIds: self.transitGatewayPolicyTableIds
        )
    }
}

extension EC2.DescribeTransitGatewayRouteTableAnnouncementsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewayRouteTableAnnouncementsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableAnnouncementIds: self.transitGatewayRouteTableAnnouncementIds
        )
    }
}

extension EC2.DescribeTransitGatewayRouteTablesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewayRouteTablesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableIds: self.transitGatewayRouteTableIds
        )
    }
}

extension EC2.DescribeTransitGatewayVpcAttachmentsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewayVpcAttachmentsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentIds: self.transitGatewayAttachmentIds
        )
    }
}

extension EC2.DescribeTransitGatewaysRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTransitGatewaysRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayIds: self.transitGatewayIds
        )
    }
}

extension EC2.DescribeTrunkInterfaceAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeTrunkInterfaceAssociationsRequest {
        return .init(
            associationIds: self.associationIds,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeVerifiedAccessEndpointsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVerifiedAccessEndpointsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessEndpointIds: self.verifiedAccessEndpointIds,
            verifiedAccessGroupId: self.verifiedAccessGroupId,
            verifiedAccessInstanceId: self.verifiedAccessInstanceId
        )
    }
}

extension EC2.DescribeVerifiedAccessGroupsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVerifiedAccessGroupsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessGroupIds: self.verifiedAccessGroupIds,
            verifiedAccessInstanceId: self.verifiedAccessInstanceId
        )
    }
}

extension EC2.DescribeVerifiedAccessInstanceLoggingConfigurationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVerifiedAccessInstanceLoggingConfigurationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessInstanceIds: self.verifiedAccessInstanceIds
        )
    }
}

extension EC2.DescribeVerifiedAccessInstancesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVerifiedAccessInstancesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessInstanceIds: self.verifiedAccessInstanceIds
        )
    }
}

extension EC2.DescribeVerifiedAccessTrustProvidersRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVerifiedAccessTrustProvidersRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            verifiedAccessTrustProviderIds: self.verifiedAccessTrustProviderIds
        )
    }
}

extension EC2.DescribeVolumeStatusRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVolumeStatusRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            volumeIds: self.volumeIds
        )
    }
}

extension EC2.DescribeVolumesModificationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVolumesModificationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            volumeIds: self.volumeIds
        )
    }
}

extension EC2.DescribeVolumesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVolumesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            volumeIds: self.volumeIds
        )
    }
}

extension EC2.DescribeVpcClassicLinkDnsSupportRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVpcClassicLinkDnsSupportRequest {
        return .init(
            maxResults: self.maxResults,
            nextToken: token,
            vpcIds: self.vpcIds
        )
    }
}

extension EC2.DescribeVpcEndpointConnectionNotificationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVpcEndpointConnectionNotificationsRequest {
        return .init(
            connectionNotificationId: self.connectionNotificationId,
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeVpcEndpointConnectionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVpcEndpointConnectionsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.DescribeVpcEndpointServiceConfigurationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVpcEndpointServiceConfigurationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            serviceIds: self.serviceIds
        )
    }
}

extension EC2.DescribeVpcEndpointServicePermissionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVpcEndpointServicePermissionsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            serviceId: self.serviceId
        )
    }
}

extension EC2.DescribeVpcEndpointsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVpcEndpointsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            vpcEndpointIds: self.vpcEndpointIds
        )
    }
}

extension EC2.DescribeVpcPeeringConnectionsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVpcPeeringConnectionsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            vpcPeeringConnectionIds: self.vpcPeeringConnectionIds
        )
    }
}

extension EC2.DescribeVpcsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.DescribeVpcsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            vpcIds: self.vpcIds
        )
    }
}

extension EC2.GetAssociatedIpv6PoolCidrsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetAssociatedIpv6PoolCidrsRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            poolId: self.poolId
        )
    }
}

extension EC2.GetAwsNetworkPerformanceDataRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetAwsNetworkPerformanceDataRequest {
        return .init(
            dataQueries: self.dataQueries,
            dryRun: self.dryRun,
            endTime: self.endTime,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime
        )
    }
}

extension EC2.GetGroupsForCapacityReservationRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetGroupsForCapacityReservationRequest {
        return .init(
            capacityReservationId: self.capacityReservationId,
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.GetInstanceTypesFromInstanceRequirementsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetInstanceTypesFromInstanceRequirementsRequest {
        return .init(
            architectureTypes: self.architectureTypes,
            dryRun: self.dryRun,
            instanceRequirements: self.instanceRequirements,
            maxResults: self.maxResults,
            nextToken: token,
            virtualizationTypes: self.virtualizationTypes
        )
    }
}

extension EC2.GetIpamAddressHistoryRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetIpamAddressHistoryRequest {
        return .init(
            cidr: self.cidr,
            dryRun: self.dryRun,
            endTime: self.endTime,
            ipamScopeId: self.ipamScopeId,
            maxResults: self.maxResults,
            nextToken: token,
            startTime: self.startTime,
            vpcId: self.vpcId
        )
    }
}

extension EC2.GetIpamDiscoveredAccountsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetIpamDiscoveredAccountsRequest {
        return .init(
            discoveryRegion: self.discoveryRegion,
            dryRun: self.dryRun,
            filters: self.filters,
            ipamResourceDiscoveryId: self.ipamResourceDiscoveryId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.GetIpamDiscoveredResourceCidrsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetIpamDiscoveredResourceCidrsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamResourceDiscoveryId: self.ipamResourceDiscoveryId,
            maxResults: self.maxResults,
            nextToken: token,
            resourceRegion: self.resourceRegion
        )
    }
}

extension EC2.GetIpamPoolAllocationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetIpamPoolAllocationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamPoolAllocationId: self.ipamPoolAllocationId,
            ipamPoolId: self.ipamPoolId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.GetIpamPoolCidrsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetIpamPoolCidrsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamPoolId: self.ipamPoolId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.GetIpamResourceCidrsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetIpamResourceCidrsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            ipamPoolId: self.ipamPoolId,
            ipamScopeId: self.ipamScopeId,
            maxResults: self.maxResults,
            nextToken: token,
            resourceId: self.resourceId,
            resourceOwner: self.resourceOwner,
            resourceTag: self.resourceTag,
            resourceType: self.resourceType
        )
    }
}

extension EC2.GetManagedPrefixListAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetManagedPrefixListAssociationsRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            prefixListId: self.prefixListId
        )
    }
}

extension EC2.GetManagedPrefixListEntriesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetManagedPrefixListEntriesRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            prefixListId: self.prefixListId,
            targetVersion: self.targetVersion
        )
    }
}

extension EC2.GetNetworkInsightsAccessScopeAnalysisFindingsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetNetworkInsightsAccessScopeAnalysisFindingsRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            networkInsightsAccessScopeAnalysisId: self.networkInsightsAccessScopeAnalysisId,
            nextToken: token
        )
    }
}

extension EC2.GetSecurityGroupsForVpcRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetSecurityGroupsForVpcRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            vpcId: self.vpcId
        )
    }
}

extension EC2.GetSpotPlacementScoresRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetSpotPlacementScoresRequest {
        return .init(
            dryRun: self.dryRun,
            instanceRequirementsWithMetadata: self.instanceRequirementsWithMetadata,
            instanceTypes: self.instanceTypes,
            maxResults: self.maxResults,
            nextToken: token,
            regionNames: self.regionNames,
            singleAvailabilityZone: self.singleAvailabilityZone,
            targetCapacity: self.targetCapacity,
            targetCapacityUnitType: self.targetCapacityUnitType
        )
    }
}

extension EC2.GetTransitGatewayAttachmentPropagationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetTransitGatewayAttachmentPropagationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayAttachmentId: self.transitGatewayAttachmentId
        )
    }
}

extension EC2.GetTransitGatewayMulticastDomainAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetTransitGatewayMulticastDomainAssociationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayMulticastDomainId: self.transitGatewayMulticastDomainId
        )
    }
}

extension EC2.GetTransitGatewayPolicyTableAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetTransitGatewayPolicyTableAssociationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayPolicyTableId: self.transitGatewayPolicyTableId
        )
    }
}

extension EC2.GetTransitGatewayPrefixListReferencesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetTransitGatewayPrefixListReferencesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableId: self.transitGatewayRouteTableId
        )
    }
}

extension EC2.GetTransitGatewayRouteTableAssociationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetTransitGatewayRouteTableAssociationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableId: self.transitGatewayRouteTableId
        )
    }
}

extension EC2.GetTransitGatewayRouteTablePropagationsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetTransitGatewayRouteTablePropagationsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayRouteTableId: self.transitGatewayRouteTableId
        )
    }
}

extension EC2.GetVpnConnectionDeviceTypesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.GetVpnConnectionDeviceTypesRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.ListImagesInRecycleBinRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.ListImagesInRecycleBinRequest {
        return .init(
            dryRun: self.dryRun,
            imageIds: self.imageIds,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.ListSnapshotsInRecycleBinRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.ListSnapshotsInRecycleBinRequest {
        return .init(
            dryRun: self.dryRun,
            maxResults: self.maxResults,
            nextToken: token,
            snapshotIds: self.snapshotIds
        )
    }
}

extension EC2.SearchLocalGatewayRoutesRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.SearchLocalGatewayRoutesRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            localGatewayRouteTableId: self.localGatewayRouteTableId,
            maxResults: self.maxResults,
            nextToken: token
        )
    }
}

extension EC2.SearchTransitGatewayMulticastGroupsRequest: AWSPaginateToken {
    @inlinable
    public func usingPaginationToken(_ token: String) -> EC2.SearchTransitGatewayMulticastGroupsRequest {
        return .init(
            dryRun: self.dryRun,
            filters: self.filters,
            maxResults: self.maxResults,
            nextToken: token,
            transitGatewayMulticastDomainId: self.transitGatewayMulticastDomainId
        )
    }
}

// MARK: Waiters

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension EC2 {
    /// Waiter for operation ``describeBundleTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilBundleTaskComplete(
        _ input: DescribeBundleTasksRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeBundleTasksRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("bundleTasks[].state", expected: "complete")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("bundleTasks[].state", expected: "failed")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeBundleTasks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeBundleTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - bundleIds: The bundle task IDs. Default: Describes all your bundle tasks.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - filters: The filters.    bundle-id - The ID of the bundle task.    error-code - If the task failed, the error code returned.    error-message - If the task failed, the error message returned.    instance-id - The ID of the instance.    progress - The level of task completion, as a percentage (for example, 20%).    s3-bucket - The Amazon S3 bucket to store the AMI.    s3-prefix - The beginning of the AMI name.    start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).    state - The state of the task (pending | waiting-for-shutdown | bundling | storing | cancelling | complete | failed).    update-time - The time of the most recent update for the task.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilBundleTaskComplete(
        bundleIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeBundleTasksRequest(
            bundleIds: bundleIds, 
            dryRun: dryRun, 
            filters: filters
        )
        try await self.waitUntilBundleTaskComplete(input, logger: logger)
    }

    /// Waiter for operation ``describeConversionTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilConversionTaskCancelled(
        _ input: DescribeConversionTasksRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeConversionTasksRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("conversionTasks[].state", expected: "cancelled")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeConversionTasks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeConversionTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - conversionTaskIds: The conversion task IDs.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilConversionTaskCancelled(
        conversionTaskIds: [String]? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeConversionTasksRequest(
            conversionTaskIds: conversionTaskIds, 
            dryRun: dryRun
        )
        try await self.waitUntilConversionTaskCancelled(input, logger: logger)
    }

    /// Waiter for operation ``describeConversionTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilConversionTaskCompleted(
        _ input: DescribeConversionTasksRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeConversionTasksRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("conversionTasks[].state", expected: "completed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("conversionTasks[].state", expected: "cancelled")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("conversionTasks[].state", expected: "cancelling")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeConversionTasks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeConversionTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - conversionTaskIds: The conversion task IDs.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilConversionTaskCompleted(
        conversionTaskIds: [String]? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeConversionTasksRequest(
            conversionTaskIds: conversionTaskIds, 
            dryRun: dryRun
        )
        try await self.waitUntilConversionTaskCompleted(input, logger: logger)
    }

    /// Waiter for operation ``describeConversionTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilConversionTaskDeleted(
        _ input: DescribeConversionTasksRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeConversionTasksRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("conversionTasks[].state", expected: "deleted")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeConversionTasks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeConversionTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - conversionTaskIds: The conversion task IDs.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilConversionTaskDeleted(
        conversionTaskIds: [String]? = nil,
        dryRun: Bool? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeConversionTasksRequest(
            conversionTaskIds: conversionTaskIds, 
            dryRun: dryRun
        )
        try await self.waitUntilConversionTaskDeleted(input, logger: logger)
    }

    /// Waiter for operation ``describeCustomerGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCustomerGatewayAvailable(
        _ input: DescribeCustomerGatewaysRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeCustomerGatewaysRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("customerGateways[].state", expected: "available")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("customerGateways[].state", expected: "deleted")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("customerGateways[].state", expected: "deleting")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeCustomerGateways
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeCustomerGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - customerGatewayIds: One or more customer gateway IDs. Default: Describes all your customer gateways.
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).    customer-gateway-id - The ID of the customer gateway.    ip-address - The IP address of the customer gateway device's external interface.    state - The state of the customer gateway (pending | available | deleting | deleted).    type - The type of customer gateway. Currently, the only supported type is ipsec.1.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilCustomerGatewayAvailable(
        customerGatewayIds: [String]? = nil,
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeCustomerGatewaysRequest(
            customerGatewayIds: customerGatewayIds, 
            dryRun: dryRun, 
            filters: filters
        )
        try await self.waitUntilCustomerGatewayAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeExportTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilExportTaskCancelled(
        _ input: DescribeExportTasksRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeExportTasksRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("exportTasks[].state", expected: "cancelled")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeExportTasks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeExportTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - exportTaskIds: The export task IDs.
    ///   - filters: the filters for the export tasks.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilExportTaskCancelled(
        exportTaskIds: [String]? = nil,
        filters: [Filter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeExportTasksRequest(
            exportTaskIds: exportTaskIds, 
            filters: filters
        )
        try await self.waitUntilExportTaskCancelled(input, logger: logger)
    }

    /// Waiter for operation ``describeExportTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilExportTaskCompleted(
        _ input: DescribeExportTasksRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeExportTasksRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("exportTasks[].state", expected: "completed")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeExportTasks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeExportTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - exportTaskIds: The export task IDs.
    ///   - filters: the filters for the export tasks.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilExportTaskCompleted(
        exportTaskIds: [String]? = nil,
        filters: [Filter]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeExportTasksRequest(
            exportTaskIds: exportTaskIds, 
            filters: filters
        )
        try await self.waitUntilExportTaskCompleted(input, logger: logger)
    }

    /// Waiter for operation ``describeImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilImageAvailable(
        _ input: DescribeImagesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeImagesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("images[].state", expected: "available")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("images[].state", expected: "failed")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeImages
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - executableUsers: Scopes the images by users with explicit launch permissions. Specify an Amazon Web Services account ID, self (the sender of the request), or all (public AMIs).   If you specify an Amazon Web Services account ID that is not your own, only AMIs shared with that specific Amazon Web Services account ID are returned. However, AMIs that are shared with the account’s organization or organizational unit (OU) are not returned.   If you specify self or your own Amazon Web Services account ID, AMIs shared with your account are returned. In addition, AMIs that are shared with the organization or OU of which you are member are also returned.    If you specify all, all public AMIs are returned.
    ///   - filters: The filters.    architecture - The image architecture (i386 | x86_64 | arm64 | x86_64_mac | arm64_mac).    block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the Amazon EBS volume.    block-device-mapping.volume-size - The volume size of the Amazon EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the Amazon EBS volume (io1 | io2 | gp2 | gp3 | sc1 | st1 | standard).    block-device-mapping.encrypted - A Boolean that indicates whether the Amazon EBS volume is encrypted.    creation-date - The time when the image was created, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-allowed - A Boolean that indicates whether the image meets the criteria specified for Allowed AMIs.    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - The owner alias (amazon | aws-backup-vault | aws-marketplace). The valid aliases are defined in an Amazon-maintained list. This is not the Amazon Web Services account alias that can be set using the IAM console. We recommend that you use the Owner request parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that you use the Owner request parameter instead of this filter.    platform - The platform. The only supported value is windows.    product-code - The product code.    product-code.type - The type of the product code (marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-image-id - The ID of the source AMI from which the AMI was created.    source-image-region - The Region of the source AMI.    source-instance-id - The ID of the instance that the AMI was created from if the AMI was created using CreateImage. This filter is applicable only if the AMI was created using CreateImage.    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    sriov-net-support - A value of simple indicates that enhanced networking with the Intel 82599 VF interface is enabled.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    virtualization-type - The virtualization type (paravirtual | hvm).
    ///   - imageIds: The image IDs. Default: Describes all images available to you.
    ///   - includeDeprecated: Specifies whether to include deprecated AMIs. Default: No deprecated AMIs are included in the response.  If you are the AMI owner, all deprecated AMIs appear in the response regardless of what you specify for this parameter.
    ///   - includeDisabled: Specifies whether to include disabled AMIs. Default: No disabled AMIs are included in the response.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - owners: Scopes the results to images with the specified owners. You can specify a combination of Amazon Web Services account IDs, self, amazon, aws-backup-vault, and aws-marketplace. If you omit this parameter, the results include all images for which you have launch permissions, regardless of ownership.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilImageAvailable(
        dryRun: Bool? = nil,
        executableUsers: [String]? = nil,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        includeDeprecated: Bool? = nil,
        includeDisabled: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        owners: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeImagesRequest(
            dryRun: dryRun, 
            executableUsers: executableUsers, 
            filters: filters, 
            imageIds: imageIds, 
            includeDeprecated: includeDeprecated, 
            includeDisabled: includeDisabled, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            owners: owners
        )
        try await self.waitUntilImageAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilImageExists(
        _ input: DescribeImagesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeImagesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("length(images[]) > `0`", expected: "true")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidAMIID.NotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeImages
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeImages(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - executableUsers: Scopes the images by users with explicit launch permissions. Specify an Amazon Web Services account ID, self (the sender of the request), or all (public AMIs).   If you specify an Amazon Web Services account ID that is not your own, only AMIs shared with that specific Amazon Web Services account ID are returned. However, AMIs that are shared with the account’s organization or organizational unit (OU) are not returned.   If you specify self or your own Amazon Web Services account ID, AMIs shared with your account are returned. In addition, AMIs that are shared with the organization or OU of which you are member are also returned.    If you specify all, all public AMIs are returned.
    ///   - filters: The filters.    architecture - The image architecture (i386 | x86_64 | arm64 | x86_64_mac | arm64_mac).    block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the Amazon EBS volume.    block-device-mapping.volume-size - The volume size of the Amazon EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the Amazon EBS volume (io1 | io2 | gp2 | gp3 | sc1 | st1 | standard).    block-device-mapping.encrypted - A Boolean that indicates whether the Amazon EBS volume is encrypted.    creation-date - The time when the image was created, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-allowed - A Boolean that indicates whether the image meets the criteria specified for Allowed AMIs.    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - The owner alias (amazon | aws-backup-vault | aws-marketplace). The valid aliases are defined in an Amazon-maintained list. This is not the Amazon Web Services account alias that can be set using the IAM console. We recommend that you use the Owner request parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that you use the Owner request parameter instead of this filter.    platform - The platform. The only supported value is windows.    product-code - The product code.    product-code.type - The type of the product code (marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-image-id - The ID of the source AMI from which the AMI was created.    source-image-region - The Region of the source AMI.    source-instance-id - The ID of the instance that the AMI was created from if the AMI was created using CreateImage. This filter is applicable only if the AMI was created using CreateImage.    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    sriov-net-support - A value of simple indicates that enhanced networking with the Intel 82599 VF interface is enabled.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    virtualization-type - The virtualization type (paravirtual | hvm).
    ///   - imageIds: The image IDs. Default: Describes all images available to you.
    ///   - includeDeprecated: Specifies whether to include deprecated AMIs. Default: No deprecated AMIs are included in the response.  If you are the AMI owner, all deprecated AMIs appear in the response regardless of what you specify for this parameter.
    ///   - includeDisabled: Specifies whether to include disabled AMIs. Default: No disabled AMIs are included in the response.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - owners: Scopes the results to images with the specified owners. You can specify a combination of Amazon Web Services account IDs, self, amazon, aws-backup-vault, and aws-marketplace. If you omit this parameter, the results include all images for which you have launch permissions, regardless of ownership.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilImageExists(
        dryRun: Bool? = nil,
        executableUsers: [String]? = nil,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        includeDeprecated: Bool? = nil,
        includeDisabled: Bool? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        owners: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeImagesRequest(
            dryRun: dryRun, 
            executableUsers: executableUsers, 
            filters: filters, 
            imageIds: imageIds, 
            includeDeprecated: includeDeprecated, 
            includeDisabled: includeDisabled, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            owners: owners
        )
        try await self.waitUntilImageExists(input, logger: logger)
    }

    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceExists(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstancesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("length(reservations[]) > `0`", expected: "true")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidInstanceID.NotFound")),
            ],
            minDelayTime: .seconds(5),
            command: self.describeInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64 | arm64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2022-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    boot-mode - The boot mode that was specified by the AMI (legacy-bios | uefi | uefi-preferred).    capacity-reservation-id - The ID of the Capacity Reservation into which the instance was launched.    capacity-reservation-specification.capacity-reservation-preference - The instance's Capacity Reservation preference (open | none).    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-id - The ID of the targeted Capacity Reservation.    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-resource-group-arn - The ARN of the targeted Capacity Reservation group.    client-token - The idempotency token you provided when you launched the instance.    current-instance-boot-mode - The boot mode that is used to launch the instance at launch or start (legacy-bios | uefi).    dns-name - The public DNS name of the instance.    ebs-optimized - A Boolean that indicates whether the instance is optimized for Amazon EBS I/O.    ena-support - A Boolean that indicates whether the instance is enabled for enhanced networking with ENA.    enclave-options.enabled - A Boolean that indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.    host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen). The value xen is used for both Xen and Nitro hypervisors.    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    iam-instance-profile.id - The instance profile associated with the instance. Specified as an ID.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance, a Scheduled Instance, or a Capacity Block (spot | scheduled | capacity-block).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    ipv6-address - The IPv6 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    maintenance-options.auto-recovery - The current automatic recovery behavior of the instance (disabled | default).    metadata-options.http-endpoint - The status of access to the HTTP metadata endpoint on your instance (enabled | disabled)    metadata-options.http-protocol-ipv4 - Indicates whether the IPv4 endpoint is enabled (disabled | enabled).    metadata-options.http-protocol-ipv6 - Indicates whether the IPv6 endpoint is enabled (disabled | enabled).    metadata-options.http-put-response-hop-limit - The HTTP metadata request put response hop limit (integer, possible values 1 to 64)    metadata-options.http-tokens - The metadata request authorization state (optional | required)    metadata-options.instance-metadata-tags - The status of access to instance tags from the instance metadata (enabled | disabled)    metadata-options.state - The state of the metadata option changes (pending | applied).    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.association.allocation-id - The allocation ID.    network-interface.addresses.association.association-id - The association ID.    network-interface.addresses.association.carrier-ip - The carrier IP address.    network-interface.addresses.association.customer-owned-ip - The customer-owned IP address.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.addresses.association.public-dns-name - The public DNS name.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.private-dns-name - The private DNS name.    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.association.carrier-ip - The customer-owned IP address.    network-interface.association.customer-owned-ip - The customer-owned IP address.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.public-dns-name - The public DNS name.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.network-card-index - The index of the network card.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.deny-all-igw-traffic - A Boolean that indicates whether  a network interface with an IPv6 address is unreachable from the public internet.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv4-prefixes.ipv4-prefix - The IPv4 prefixes that are assigned to the network interface.    network-interface.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.is-primary-ipv6 - A Boolean that indicates whether this is the primary IPv6 address.    network-interface.ipv6-native - A Boolean that indicates whether this is an IPv6 only network interface.    network-interface.ipv6-prefixes.ipv6-prefix - The IPv6 prefix assigned to the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.operator.managed - A Boolean that indicates whether the instance has a managed network interface.    network-interface.operator.principal - The principal that manages the network interface. Only valid for instances with managed network interfaces, where managed is true.    network-interface.outpost-arn - The ARN of the Outpost.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.private-ip-address - The private IPv4 address.    network-interface.public-dns-name - The public DNS name.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by Amazon Web Services.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.tag-key - The key of a tag assigned to the network interface.    network-interface.tag-value - The value of a tag assigned to the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The Amazon Web Services account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. To list only Windows instances, use windows.    platform-details - The platform (Linux/UNIX | Red Hat BYOL Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA | Red Hat Enterprise Linux with SQL Server Standard and HA | Red Hat Enterprise Linux with SQL Server Enterprise and HA | Red Hat Enterprise Linux with SQL Server Standard | Red Hat Enterprise Linux with SQL Server Web | Red Hat Enterprise Linux with SQL Server Enterprise | SQL Server Enterprise | SQL Server Standard | SQL Server Web | SUSE Linux | Ubuntu Pro | Windows | Windows BYOL | Windows with SQL Server Enterprise | Windows with SQL Server Standard | Windows with SQL Server Web).    private-dns-name - The private IPv4 DNS name of the instance.    private-dns-name-options.enable-resource-name-dns-a-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options.enable-resource-name-dns-aaaa-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    private-dns-name-options.hostname-type - The type of hostname (ip-name | resource-name).    private-ip-address - The private IPv4 address of the instance. This can only be used to filter by the primary IP address of the network interface attached to the instance. To filter by additional IP addresses assigned to the network interface, use the filter network-interface.addresses.private-ip-address.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    tpm-support - Indicates if the instance is configured for NitroTPM support (v2.0).     usage-operation - The usage operation value for the instance (RunInstances | RunInstances:00g0 | RunInstances:0010 | RunInstances:1010 | RunInstances:1014 | RunInstances:1110 | RunInstances:0014 | RunInstances:0210 | RunInstances:0110 | RunInstances:0100 | RunInstances:0004 | RunInstances:0200 | RunInstances:000g | RunInstances:0g00 | RunInstances:0002 | RunInstances:0800 | RunInstances:0102 | RunInstances:0006 | RunInstances:0202).    usage-operation-update-time - The time that the usage operation was last updated, for example, 2022-09-15T17:15:20.000Z.    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceExists(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilInstanceExists(input, logger: logger)
    }

    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceRunning(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstancesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("reservations[].instances[].state.name", expected: "running")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("reservations[].instances[].state.name", expected: "shutting-down")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("reservations[].instances[].state.name", expected: "terminated")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("reservations[].instances[].state.name", expected: "stopping")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidInstanceID.NotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64 | arm64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2022-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    boot-mode - The boot mode that was specified by the AMI (legacy-bios | uefi | uefi-preferred).    capacity-reservation-id - The ID of the Capacity Reservation into which the instance was launched.    capacity-reservation-specification.capacity-reservation-preference - The instance's Capacity Reservation preference (open | none).    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-id - The ID of the targeted Capacity Reservation.    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-resource-group-arn - The ARN of the targeted Capacity Reservation group.    client-token - The idempotency token you provided when you launched the instance.    current-instance-boot-mode - The boot mode that is used to launch the instance at launch or start (legacy-bios | uefi).    dns-name - The public DNS name of the instance.    ebs-optimized - A Boolean that indicates whether the instance is optimized for Amazon EBS I/O.    ena-support - A Boolean that indicates whether the instance is enabled for enhanced networking with ENA.    enclave-options.enabled - A Boolean that indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.    host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen). The value xen is used for both Xen and Nitro hypervisors.    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    iam-instance-profile.id - The instance profile associated with the instance. Specified as an ID.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance, a Scheduled Instance, or a Capacity Block (spot | scheduled | capacity-block).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    ipv6-address - The IPv6 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    maintenance-options.auto-recovery - The current automatic recovery behavior of the instance (disabled | default).    metadata-options.http-endpoint - The status of access to the HTTP metadata endpoint on your instance (enabled | disabled)    metadata-options.http-protocol-ipv4 - Indicates whether the IPv4 endpoint is enabled (disabled | enabled).    metadata-options.http-protocol-ipv6 - Indicates whether the IPv6 endpoint is enabled (disabled | enabled).    metadata-options.http-put-response-hop-limit - The HTTP metadata request put response hop limit (integer, possible values 1 to 64)    metadata-options.http-tokens - The metadata request authorization state (optional | required)    metadata-options.instance-metadata-tags - The status of access to instance tags from the instance metadata (enabled | disabled)    metadata-options.state - The state of the metadata option changes (pending | applied).    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.association.allocation-id - The allocation ID.    network-interface.addresses.association.association-id - The association ID.    network-interface.addresses.association.carrier-ip - The carrier IP address.    network-interface.addresses.association.customer-owned-ip - The customer-owned IP address.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.addresses.association.public-dns-name - The public DNS name.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.private-dns-name - The private DNS name.    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.association.carrier-ip - The customer-owned IP address.    network-interface.association.customer-owned-ip - The customer-owned IP address.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.public-dns-name - The public DNS name.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.network-card-index - The index of the network card.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.deny-all-igw-traffic - A Boolean that indicates whether  a network interface with an IPv6 address is unreachable from the public internet.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv4-prefixes.ipv4-prefix - The IPv4 prefixes that are assigned to the network interface.    network-interface.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.is-primary-ipv6 - A Boolean that indicates whether this is the primary IPv6 address.    network-interface.ipv6-native - A Boolean that indicates whether this is an IPv6 only network interface.    network-interface.ipv6-prefixes.ipv6-prefix - The IPv6 prefix assigned to the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.operator.managed - A Boolean that indicates whether the instance has a managed network interface.    network-interface.operator.principal - The principal that manages the network interface. Only valid for instances with managed network interfaces, where managed is true.    network-interface.outpost-arn - The ARN of the Outpost.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.private-ip-address - The private IPv4 address.    network-interface.public-dns-name - The public DNS name.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by Amazon Web Services.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.tag-key - The key of a tag assigned to the network interface.    network-interface.tag-value - The value of a tag assigned to the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The Amazon Web Services account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. To list only Windows instances, use windows.    platform-details - The platform (Linux/UNIX | Red Hat BYOL Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA | Red Hat Enterprise Linux with SQL Server Standard and HA | Red Hat Enterprise Linux with SQL Server Enterprise and HA | Red Hat Enterprise Linux with SQL Server Standard | Red Hat Enterprise Linux with SQL Server Web | Red Hat Enterprise Linux with SQL Server Enterprise | SQL Server Enterprise | SQL Server Standard | SQL Server Web | SUSE Linux | Ubuntu Pro | Windows | Windows BYOL | Windows with SQL Server Enterprise | Windows with SQL Server Standard | Windows with SQL Server Web).    private-dns-name - The private IPv4 DNS name of the instance.    private-dns-name-options.enable-resource-name-dns-a-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options.enable-resource-name-dns-aaaa-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    private-dns-name-options.hostname-type - The type of hostname (ip-name | resource-name).    private-ip-address - The private IPv4 address of the instance. This can only be used to filter by the primary IP address of the network interface attached to the instance. To filter by additional IP addresses assigned to the network interface, use the filter network-interface.addresses.private-ip-address.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    tpm-support - Indicates if the instance is configured for NitroTPM support (v2.0).     usage-operation - The usage operation value for the instance (RunInstances | RunInstances:00g0 | RunInstances:0010 | RunInstances:1010 | RunInstances:1014 | RunInstances:1110 | RunInstances:0014 | RunInstances:0210 | RunInstances:0110 | RunInstances:0100 | RunInstances:0004 | RunInstances:0200 | RunInstances:000g | RunInstances:0g00 | RunInstances:0002 | RunInstances:0800 | RunInstances:0102 | RunInstances:0006 | RunInstances:0202).    usage-operation-update-time - The time that the usage operation was last updated, for example, 2022-09-15T17:15:20.000Z.    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceRunning(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilInstanceRunning(input, logger: logger)
    }

    /// Waiter for operation ``describeInstanceStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceStatusOk(
        _ input: DescribeInstanceStatusRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstanceStatusRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("instanceStatuses[].instanceStatus.status", expected: "ok")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidInstanceID.NotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeInstanceStatus
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstanceStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.instance-event-id - The ID of the event whose date and time you are modifying.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before-deadline - The deadline for starting the event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    attached-ebs-status.status - The status of the attached EBS volume  for the instance (ok | impaired | initializing |  insufficient-data | not-applicable).
    ///   - includeAllInstances: When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false
    ///   - instanceIds: The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceStatusOk(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        includeAllInstances: Bool? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstanceStatusRequest(
            dryRun: dryRun, 
            filters: filters, 
            includeAllInstances: includeAllInstances, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilInstanceStatusOk(input, logger: logger)
    }

    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceStopped(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstancesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("reservations[].instances[].state.name", expected: "stopped")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("reservations[].instances[].state.name", expected: "pending")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("reservations[].instances[].state.name", expected: "terminated")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64 | arm64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2022-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    boot-mode - The boot mode that was specified by the AMI (legacy-bios | uefi | uefi-preferred).    capacity-reservation-id - The ID of the Capacity Reservation into which the instance was launched.    capacity-reservation-specification.capacity-reservation-preference - The instance's Capacity Reservation preference (open | none).    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-id - The ID of the targeted Capacity Reservation.    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-resource-group-arn - The ARN of the targeted Capacity Reservation group.    client-token - The idempotency token you provided when you launched the instance.    current-instance-boot-mode - The boot mode that is used to launch the instance at launch or start (legacy-bios | uefi).    dns-name - The public DNS name of the instance.    ebs-optimized - A Boolean that indicates whether the instance is optimized for Amazon EBS I/O.    ena-support - A Boolean that indicates whether the instance is enabled for enhanced networking with ENA.    enclave-options.enabled - A Boolean that indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.    host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen). The value xen is used for both Xen and Nitro hypervisors.    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    iam-instance-profile.id - The instance profile associated with the instance. Specified as an ID.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance, a Scheduled Instance, or a Capacity Block (spot | scheduled | capacity-block).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    ipv6-address - The IPv6 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    maintenance-options.auto-recovery - The current automatic recovery behavior of the instance (disabled | default).    metadata-options.http-endpoint - The status of access to the HTTP metadata endpoint on your instance (enabled | disabled)    metadata-options.http-protocol-ipv4 - Indicates whether the IPv4 endpoint is enabled (disabled | enabled).    metadata-options.http-protocol-ipv6 - Indicates whether the IPv6 endpoint is enabled (disabled | enabled).    metadata-options.http-put-response-hop-limit - The HTTP metadata request put response hop limit (integer, possible values 1 to 64)    metadata-options.http-tokens - The metadata request authorization state (optional | required)    metadata-options.instance-metadata-tags - The status of access to instance tags from the instance metadata (enabled | disabled)    metadata-options.state - The state of the metadata option changes (pending | applied).    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.association.allocation-id - The allocation ID.    network-interface.addresses.association.association-id - The association ID.    network-interface.addresses.association.carrier-ip - The carrier IP address.    network-interface.addresses.association.customer-owned-ip - The customer-owned IP address.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.addresses.association.public-dns-name - The public DNS name.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.private-dns-name - The private DNS name.    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.association.carrier-ip - The customer-owned IP address.    network-interface.association.customer-owned-ip - The customer-owned IP address.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.public-dns-name - The public DNS name.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.network-card-index - The index of the network card.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.deny-all-igw-traffic - A Boolean that indicates whether  a network interface with an IPv6 address is unreachable from the public internet.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv4-prefixes.ipv4-prefix - The IPv4 prefixes that are assigned to the network interface.    network-interface.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.is-primary-ipv6 - A Boolean that indicates whether this is the primary IPv6 address.    network-interface.ipv6-native - A Boolean that indicates whether this is an IPv6 only network interface.    network-interface.ipv6-prefixes.ipv6-prefix - The IPv6 prefix assigned to the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.operator.managed - A Boolean that indicates whether the instance has a managed network interface.    network-interface.operator.principal - The principal that manages the network interface. Only valid for instances with managed network interfaces, where managed is true.    network-interface.outpost-arn - The ARN of the Outpost.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.private-ip-address - The private IPv4 address.    network-interface.public-dns-name - The public DNS name.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by Amazon Web Services.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.tag-key - The key of a tag assigned to the network interface.    network-interface.tag-value - The value of a tag assigned to the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The Amazon Web Services account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. To list only Windows instances, use windows.    platform-details - The platform (Linux/UNIX | Red Hat BYOL Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA | Red Hat Enterprise Linux with SQL Server Standard and HA | Red Hat Enterprise Linux with SQL Server Enterprise and HA | Red Hat Enterprise Linux with SQL Server Standard | Red Hat Enterprise Linux with SQL Server Web | Red Hat Enterprise Linux with SQL Server Enterprise | SQL Server Enterprise | SQL Server Standard | SQL Server Web | SUSE Linux | Ubuntu Pro | Windows | Windows BYOL | Windows with SQL Server Enterprise | Windows with SQL Server Standard | Windows with SQL Server Web).    private-dns-name - The private IPv4 DNS name of the instance.    private-dns-name-options.enable-resource-name-dns-a-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options.enable-resource-name-dns-aaaa-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    private-dns-name-options.hostname-type - The type of hostname (ip-name | resource-name).    private-ip-address - The private IPv4 address of the instance. This can only be used to filter by the primary IP address of the network interface attached to the instance. To filter by additional IP addresses assigned to the network interface, use the filter network-interface.addresses.private-ip-address.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    tpm-support - Indicates if the instance is configured for NitroTPM support (v2.0).     usage-operation - The usage operation value for the instance (RunInstances | RunInstances:00g0 | RunInstances:0010 | RunInstances:1010 | RunInstances:1014 | RunInstances:1110 | RunInstances:0014 | RunInstances:0210 | RunInstances:0110 | RunInstances:0100 | RunInstances:0004 | RunInstances:0200 | RunInstances:000g | RunInstances:0g00 | RunInstances:0002 | RunInstances:0800 | RunInstances:0102 | RunInstances:0006 | RunInstances:0202).    usage-operation-update-time - The time that the usage operation was last updated, for example, 2022-09-15T17:15:20.000Z.    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceStopped(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilInstanceStopped(input, logger: logger)
    }

    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceTerminated(
        _ input: DescribeInstancesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstancesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("reservations[].instances[].state.name", expected: "terminated")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("reservations[].instances[].state.name", expected: "pending")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("reservations[].instances[].state.name", expected: "stopping")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeInstances
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstances(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64 | arm64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2022-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    boot-mode - The boot mode that was specified by the AMI (legacy-bios | uefi | uefi-preferred).    capacity-reservation-id - The ID of the Capacity Reservation into which the instance was launched.    capacity-reservation-specification.capacity-reservation-preference - The instance's Capacity Reservation preference (open | none).    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-id - The ID of the targeted Capacity Reservation.    capacity-reservation-specification.capacity-reservation-target.capacity-reservation-resource-group-arn - The ARN of the targeted Capacity Reservation group.    client-token - The idempotency token you provided when you launched the instance.    current-instance-boot-mode - The boot mode that is used to launch the instance at launch or start (legacy-bios | uefi).    dns-name - The public DNS name of the instance.    ebs-optimized - A Boolean that indicates whether the instance is optimized for Amazon EBS I/O.    ena-support - A Boolean that indicates whether the instance is enabled for enhanced networking with ENA.    enclave-options.enabled - A Boolean that indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.    host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen). The value xen is used for both Xen and Nitro hypervisors.    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    iam-instance-profile.id - The instance profile associated with the instance. Specified as an ID.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance, a Scheduled Instance, or a Capacity Block (spot | scheduled | capacity-block).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    ipv6-address - The IPv6 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched, in the ISO 8601 format in the UTC time zone (YYYY-MM-DDThh:mm:ss.sssZ), for example, 2021-09-29T11:04:43.305Z. You can use a wildcard (*), for example, 2021-09-29T*, which matches an entire day.    maintenance-options.auto-recovery - The current automatic recovery behavior of the instance (disabled | default).    metadata-options.http-endpoint - The status of access to the HTTP metadata endpoint on your instance (enabled | disabled)    metadata-options.http-protocol-ipv4 - Indicates whether the IPv4 endpoint is enabled (disabled | enabled).    metadata-options.http-protocol-ipv6 - Indicates whether the IPv6 endpoint is enabled (disabled | enabled).    metadata-options.http-put-response-hop-limit - The HTTP metadata request put response hop limit (integer, possible values 1 to 64)    metadata-options.http-tokens - The metadata request authorization state (optional | required)    metadata-options.instance-metadata-tags - The status of access to instance tags from the instance metadata (enabled | disabled)    metadata-options.state - The state of the metadata option changes (pending | applied).    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.association.allocation-id - The allocation ID.    network-interface.addresses.association.association-id - The association ID.    network-interface.addresses.association.carrier-ip - The carrier IP address.    network-interface.addresses.association.customer-owned-ip - The customer-owned IP address.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.addresses.association.public-dns-name - The public DNS name.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.private-dns-name - The private DNS name.    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.association.carrier-ip - The customer-owned IP address.    network-interface.association.customer-owned-ip - The customer-owned IP address.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.public-dns-name - The public DNS name.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.network-card-index - The index of the network card.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.deny-all-igw-traffic - A Boolean that indicates whether  a network interface with an IPv6 address is unreachable from the public internet.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv4-prefixes.ipv4-prefix - The IPv4 prefixes that are assigned to the network interface.    network-interface.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.ipv6-addresses.is-primary-ipv6 - A Boolean that indicates whether this is the primary IPv6 address.    network-interface.ipv6-native - A Boolean that indicates whether this is an IPv6 only network interface.    network-interface.ipv6-prefixes.ipv6-prefix - The IPv6 prefix assigned to the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.operator.managed - A Boolean that indicates whether the instance has a managed network interface.    network-interface.operator.principal - The principal that manages the network interface. Only valid for instances with managed network interfaces, where managed is true.    network-interface.outpost-arn - The ARN of the Outpost.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.private-ip-address - The private IPv4 address.    network-interface.public-dns-name - The public DNS name.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by Amazon Web Services.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.tag-key - The key of a tag assigned to the network interface.    network-interface.tag-value - The value of a tag assigned to the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The Amazon Web Services account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. To list only Windows instances, use windows.    platform-details - The platform (Linux/UNIX | Red Hat BYOL Linux |  Red Hat Enterprise Linux | Red Hat Enterprise Linux with HA | Red Hat Enterprise Linux with SQL Server Standard and HA | Red Hat Enterprise Linux with SQL Server Enterprise and HA | Red Hat Enterprise Linux with SQL Server Standard | Red Hat Enterprise Linux with SQL Server Web | Red Hat Enterprise Linux with SQL Server Enterprise | SQL Server Enterprise | SQL Server Standard | SQL Server Web | SUSE Linux | Ubuntu Pro | Windows | Windows BYOL | Windows with SQL Server Enterprise | Windows with SQL Server Standard | Windows with SQL Server Web).    private-dns-name - The private IPv4 DNS name of the instance.    private-dns-name-options.enable-resource-name-dns-a-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options.enable-resource-name-dns-aaaa-record - A Boolean that indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    private-dns-name-options.hostname-type - The type of hostname (ip-name | resource-name).    private-ip-address - The private IPv4 address of the instance. This can only be used to filter by the primary IP address of the network interface attached to the instance. To filter by additional IP addresses assigned to the network interface, use the filter network-interface.addresses.private-ip-address.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, Amazon Web Services Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    tpm-support - Indicates if the instance is configured for NitroTPM support (v2.0).     usage-operation - The usage operation value for the instance (RunInstances | RunInstances:00g0 | RunInstances:0010 | RunInstances:1010 | RunInstances:1014 | RunInstances:1110 | RunInstances:0014 | RunInstances:0210 | RunInstances:0110 | RunInstances:0100 | RunInstances:0004 | RunInstances:0200 | RunInstances:000g | RunInstances:0g00 | RunInstances:0002 | RunInstances:0800 | RunInstances:0102 | RunInstances:0006 | RunInstances:0202).    usage-operation-update-time - The time that the usage operation was last updated, for example, 2022-09-15T17:15:20.000Z.    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.
    ///   - instanceIds: The instance IDs. Default: Describes all your instances.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInstanceTerminated(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstancesRequest(
            dryRun: dryRun, 
            filters: filters, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilInstanceTerminated(input, logger: logger)
    }

    /// Waiter for operation ``describeInternetGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInternetGatewayExists(
        _ input: DescribeInternetGatewaysRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInternetGatewaysRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("length(internetGateways[].internetGatewayId) > `0`", expected: "true")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidInternetGateway.NotFound")),
            ],
            minDelayTime: .seconds(5),
            command: self.describeInternetGateways
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInternetGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    attachment.state - The current state of the attachment between the gateway and the VPC (available). Present only if a VPC is attached.    attachment.vpc-id - The ID of an attached VPC.    internet-gateway-id - The ID of the Internet gateway.    owner-id - The ID of the Amazon Web Services account that owns the internet gateway.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
    ///   - internetGatewayIds: The IDs of the internet gateways. Default: Describes all your internet gateways.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilInternetGatewayExists(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        internetGatewayIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInternetGatewaysRequest(
            dryRun: dryRun, 
            filters: filters, 
            internetGatewayIds: internetGatewayIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilInternetGatewayExists(input, logger: logger)
    }

    /// Waiter for operation ``describeKeyPairs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilKeyPairExists(
        _ input: DescribeKeyPairsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeKeyPairsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("length(keyPairs[].keyName) > `0`", expected: "true")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidKeyPair.NotFound")),
            ],
            minDelayTime: .seconds(5),
            command: self.describeKeyPairs
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeKeyPairs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    key-pair-id - The ID of the key pair.    fingerprint - The fingerprint of the key pair.    key-name - The name of the key pair.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
    ///   - includePublicKey: If true, the public key material is included in the response. Default: false
    ///   - keyNames: The key pair names. Default: Describes all of your key pairs.
    ///   - keyPairIds: The IDs of the key pairs.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilKeyPairExists(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        includePublicKey: Bool? = nil,
        keyNames: [String]? = nil,
        keyPairIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeKeyPairsRequest(
            dryRun: dryRun, 
            filters: filters, 
            includePublicKey: includePublicKey, 
            keyNames: keyNames, 
            keyPairIds: keyPairIds
        )
        try await self.waitUntilKeyPairExists(input, logger: logger)
    }

    /// Waiter for operation ``describeNatGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilNatGatewayAvailable(
        _ input: DescribeNatGatewaysRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeNatGatewaysRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("natGateways[].state", expected: "available")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("natGateways[].state", expected: "failed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("natGateways[].state", expected: "deleting")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("natGateways[].state", expected: "deleted")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("NatGatewayNotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeNatGateways
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeNatGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filter: The filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the NAT gateway resides.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - natGatewayIds: The IDs of the NAT gateways.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilNatGatewayAvailable(
        dryRun: Bool? = nil,
        filter: [Filter]? = nil,
        maxResults: Int? = nil,
        natGatewayIds: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeNatGatewaysRequest(
            dryRun: dryRun, 
            filter: filter, 
            maxResults: maxResults, 
            natGatewayIds: natGatewayIds, 
            nextToken: nextToken
        )
        try await self.waitUntilNatGatewayAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeNatGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilNatGatewayDeleted(
        _ input: DescribeNatGatewaysRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeNatGatewaysRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("natGateways[].state", expected: "deleted")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("NatGatewayNotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeNatGateways
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeNatGateways(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filter: The filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the NAT gateway resides.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - natGatewayIds: The IDs of the NAT gateways.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilNatGatewayDeleted(
        dryRun: Bool? = nil,
        filter: [Filter]? = nil,
        maxResults: Int? = nil,
        natGatewayIds: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeNatGatewaysRequest(
            dryRun: dryRun, 
            filter: filter, 
            maxResults: maxResults, 
            natGatewayIds: natGatewayIds, 
            nextToken: nextToken
        )
        try await self.waitUntilNatGatewayDeleted(input, logger: logger)
    }

    /// Waiter for operation ``describeNetworkInterfaces(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilNetworkInterfaceAvailable(
        _ input: DescribeNetworkInterfacesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeNetworkInterfacesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("networkInterfaces[].status", expected: "available")),
                .init(state: .failure, matcher: AWSErrorCodeMatcher("InvalidNetworkInterfaceID.NotFound")),
            ],
            minDelayTime: .seconds(20),
            command: self.describeNetworkInterfaces
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeNetworkInterfaces(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    association.allocation-id - The allocation ID returned when you
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items,
    ///   - networkInterfaceIds: The network interface IDs. Default: Describes all your network interfaces.
    ///   - nextToken: The token returned from a previous paginated request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilNetworkInterfaceAvailable(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        networkInterfaceIds: [String]? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeNetworkInterfacesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            networkInterfaceIds: networkInterfaceIds, 
            nextToken: nextToken
        )
        try await self.waitUntilNetworkInterfaceAvailable(input, logger: logger)
    }

    /// Waiter for operation ``getPasswordData(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilPasswordDataAvailable(
        _ input: GetPasswordDataRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<GetPasswordDataRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("length(passwordData) > `0`", expected: "true")),
            ],
            minDelayTime: .seconds(15),
            command: self.getPasswordData
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``getPasswordData(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - instanceId: The ID of the Windows instance.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilPasswordDataAvailable(
        dryRun: Bool? = nil,
        instanceId: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = GetPasswordDataRequest(
            dryRun: dryRun, 
            instanceId: instanceId
        )
        try await self.waitUntilPasswordDataAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeSecurityGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSecurityGroupExists(
        _ input: DescribeSecurityGroupsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeSecurityGroupsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESPathMatcher("length(securityGroups[].groupId) > `0`", expected: "true")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidGroup.NotFound")),
            ],
            minDelayTime: .seconds(5),
            command: self.describeSecurityGroups
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeSecurityGroups(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.    description - The description of the security group.    egress.ip-permission.cidr - An IPv4 CIDR block for an outbound security group rule.    egress.ip-permission.from-port - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    egress.ip-permission.group-id - The ID of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.group-name - The name of a security group that is referenced in an outbound security group rule.    egress.ip-permission.ipv6-cidr - An IPv6 CIDR block for an outbound security group rule.    egress.ip-permission.prefix-list-id - The ID of a prefix list to which a security group rule allows outbound access.    egress.ip-permission.protocol - The IP protocol for an outbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    egress.ip-permission.to-port - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    egress.ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an outbound security group rule.    group-id - The ID of the security group.     group-name - The name of the security group.    ip-permission.cidr - An IPv4 CIDR block for an inbound security group rule.    ip-permission.from-port - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    ip-permission.group-id - The ID of a security group that has been referenced in an inbound security group rule.    ip-permission.group-name - The name of a security group that is referenced in an inbound security group rule.    ip-permission.ipv6-cidr - An IPv6 CIDR block for an inbound security group rule.    ip-permission.prefix-list-id - The ID of a prefix list from which a security group rule allows inbound access.    ip-permission.protocol - The IP protocol for an inbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    ip-permission.to-port - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an inbound security group rule.    owner-id - The Amazon Web Services account ID of the owner of the security group.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC specified when the security group was created.
    ///   - groupIds: The IDs of the security groups. Required for security groups in a nondefault VPC. Default: Describes all of your security groups.
    ///   - groupNames: [Default VPC] The names of the security groups. You can specify either
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output. This value can be between 5 and 1000.  If this parameter is not specified, then all items are returned. For more information, see  Pagination.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSecurityGroupExists(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        groupIds: [String]? = nil,
        groupNames: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeSecurityGroupsRequest(
            dryRun: dryRun, 
            filters: filters, 
            groupIds: groupIds, 
            groupNames: groupNames, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilSecurityGroupExists(input, logger: logger)
    }

    /// Waiter for operation ``describeSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSnapshotCompleted(
        _ input: DescribeSnapshotsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeSnapshotsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("snapshots[].state", expected: "completed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("snapshots[].state", expected: "error")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeSnapshots
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeSnapshots(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    description - A description of the snapshot.    encrypted - Indicates whether the snapshot is encrypted (true | false)    owner-alias - The owner alias, from an Amazon-maintained list   (amazon).  This is not the user-configured Amazon Web Services account alias set using the IAM console. We recommend that you use the related parameter instead of this filter.    owner-id - The Amazon Web Services account ID of the owner. We recommend that  you use the related parameter instead of this filter.    progress - The progress of the snapshot, as a percentage (for example, 80%).    snapshot-id - The snapshot ID.    start-time - The time stamp when the snapshot was initiated.    status - The status of the snapshot (pending | completed | error).    storage-tier - The storage tier of the snapshot (archive | standard).    transfer-type - The type of operation used to create the snapshot (time-based | standard).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The ID of the volume the snapshot is for.    volume-size - The size of the volume, in GiB.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - ownerIds: Scopes the results to snapshots with the specified owners. You can specify a combination of Amazon Web Services account IDs, self, and amazon.
    ///   - restorableByUserIds: The IDs of the Amazon Web Services accounts that can create volumes from the snapshot.
    ///   - snapshotIds: The snapshot IDs. Default: Describes the snapshots for which you have create volume permissions.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSnapshotCompleted(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        ownerIds: [String]? = nil,
        restorableByUserIds: [String]? = nil,
        snapshotIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeSnapshotsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            ownerIds: ownerIds, 
            restorableByUserIds: restorableByUserIds, 
            snapshotIds: snapshotIds
        )
        try await self.waitUntilSnapshotCompleted(input, logger: logger)
    }

    /// Waiter for operation ``describeImportSnapshotTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSnapshotImported(
        _ input: DescribeImportSnapshotTasksRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeImportSnapshotTasksRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("importSnapshotTasks[].snapshotTaskDetail.status", expected: "completed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("importSnapshotTasks[].snapshotTaskDetail.status", expected: "error")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeImportSnapshotTasks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeImportSnapshotTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.
    ///   - importTaskIds: A list of import snapshot task IDs.
    ///   - maxResults: The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
    ///   - nextToken: A token that indicates the next page of results.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSnapshotImported(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        importTaskIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeImportSnapshotTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            importTaskIds: importTaskIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilSnapshotImported(input, logger: logger)
    }

    /// Waiter for operation ``describeSpotInstanceRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSpotInstanceRequestFulfilled(
        _ input: DescribeSpotInstanceRequestsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeSpotInstanceRequestsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("spotInstanceRequests[].status.code", expected: "fulfilled")),
                .init(state: .success, matcher: try! JMESAllPathMatcher("spotInstanceRequests[].status.code", expected: "request-canceled-and-instance-running")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("spotInstanceRequests[].status.code", expected: "schedule-expired")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("spotInstanceRequests[].status.code", expected: "canceled-before-fulfillment")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("spotInstanceRequests[].status.code", expected: "bad-parameters")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("spotInstanceRequests[].status.code", expected: "system-error")),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidSpotInstanceRequestID.NotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeSpotInstanceRequests
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeSpotInstanceRequests(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone-group - The Availability Zone group.    create-time - The time stamp when the Spot Instance request was created.    fault-code - The fault code related to the request.    fault-message - The fault message related to the request.    instance-id - The ID of the instance that fulfilled the request.    launch-group - The Spot Instance launch group.    launch.block-device-mapping.delete-on-termination - Indicates whether the EBS volume is deleted on instance termination.    launch.block-device-mapping.device-name - The device name for the volume in the block device mapping (for example, /dev/sdh or xvdh).    launch.block-device-mapping.snapshot-id - The ID of the snapshot for the EBS volume.    launch.block-device-mapping.volume-size - The size of the EBS volume, in GiB.    launch.block-device-mapping.volume-type - The type of EBS volume: gp2 or gp3 for General Purpose SSD, io1  or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1 for Cold HDD, or standard for Magnetic.    launch.group-id - The ID of the security group for the instance.    launch.group-name - The name of the security group for the instance.    launch.image-id - The ID of the AMI.    launch.instance-type - The type of instance (for example, m3.medium).    launch.kernel-id - The kernel ID.    launch.key-name - The name of the key pair the instance launched with.    launch.monitoring-enabled - Whether detailed monitoring is enabled for the Spot Instance.    launch.ramdisk-id - The RAM disk ID.    launched-availability-zone - The Availability Zone in which the request is launched.    network-interface.addresses.primary - Indicates whether the IP address is the primary private IP address.    network-interface.delete-on-termination - Indicates whether the network interface is deleted when the instance is terminated.    network-interface.description - A description of the network interface.    network-interface.device-index - The index of the device for the network interface attachment on the instance.    network-interface.group-id - The ID of the security group associated with the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.private-ip-address - The primary private IP address of the network interface.    network-interface.subnet-id - The ID of the subnet for the instance.    product-description - The product description associated with the instance (Linux/UNIX | Windows).    spot-instance-request-id - The Spot Instance request ID.    spot-price - The maximum hourly price for any Spot Instance launched to fulfill the request.    state - The state of the Spot Instance request (open | active | closed | cancelled | failed). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see Spot request status in the Amazon EC2 User Guide.    status-code - The short code describing the most recent evaluation of your Spot Instance request.    status-message - The message explaining the status of the Spot Instance request.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of Spot Instance request (one-time | persistent).    valid-from - The start date of the request.    valid-until - The end date of the request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - spotInstanceRequestIds: The IDs of the Spot Instance requests.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSpotInstanceRequestFulfilled(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        spotInstanceRequestIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeSpotInstanceRequestsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            spotInstanceRequestIds: spotInstanceRequestIds
        )
        try await self.waitUntilSpotInstanceRequestFulfilled(input, logger: logger)
    }

    /// Waiter for operation ``describeStoreImageTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStoreImageTaskComplete(
        _ input: DescribeStoreImageTasksRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeStoreImageTasksRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("storeImageTaskResults[].storeTaskState", expected: "Completed")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("storeImageTaskResults[].storeTaskState", expected: "Failed")),
                .init(state: .retry, matcher: try! JMESAnyPathMatcher("storeImageTaskResults[].storeTaskState", expected: "InProgress")),
            ],
            minDelayTime: .seconds(5),
            command: self.describeStoreImageTasks
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeStoreImageTasks(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,
    ///   - filters: The filters.    task-state - Returns tasks in a certain state (InProgress | Completed | Failed)    bucket - Returns task information for tasks that targeted a specific bucket. For the filter value, specify the bucket name.    When you specify the ImageIds parameter, any filters that you specify are ignored. To use the filters, you must remove the ImageIds parameter.
    ///   - imageIds: The AMI IDs for which to show progress. Up to 20 AMI IDs can be included in a request.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilStoreImageTaskComplete(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        imageIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeStoreImageTasksRequest(
            dryRun: dryRun, 
            filters: filters, 
            imageIds: imageIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilStoreImageTaskComplete(input, logger: logger)
    }

    /// Waiter for operation ``describeSubnets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSubnetAvailable(
        _ input: DescribeSubnetsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeSubnetsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("subnets[].state", expected: "available")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeSubnets
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeSubnets(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone for the subnet. You can also use availabilityZone as the filter name.    availability-zone-id - The ID of the Availability Zone for the subnet. You can also use availabilityZoneId as the filter name.    available-ip-address-count - The number of IPv4 addresses in the subnet that are available.    cidr-block - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use cidr or cidrBlock as the filter names.    customer-owned-ipv4-pool - The customer-owned IPv4 address pool associated with the subnet.    default-for-az - Indicates whether this is the default subnet for the Availability Zone (true | false). You can also use defaultForAz as the filter name.    enable-dns64 - Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations.    enable-lni-at-device-index - Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1).     ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.association-id - An association ID for an IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the subnet.    ipv6-native - Indicates whether this is an IPv6 only subnet (true | false).    map-customer-owned-ip-on-launch - Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.    map-public-ip-on-launch - Indicates whether instances launched in this subnet receive a public IPv4 address.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the Amazon Web Services account that owns the subnet.    private-dns-name-options-on-launch.hostname-type - The type of hostname to assign to instances in the subnet at launch. For IPv4-only and dual-stack (IPv4 and IPv6) subnets, an instance DNS name can be based on the instance IPv4 address (ip-name) or the instance ID (resource-name). For IPv6 only subnets, an instance DNS name must be based on the instance ID (resource-name).    private-dns-name-options-on-launch.enable-resource-name-dns-a-record - Indicates whether to respond to DNS queries for instance hostnames with DNS A records.    private-dns-name-options-on-launch.enable-resource-name-dns-aaaa-record - Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.    state - The state of the subnet (pending | available).    subnet-arn - The Amazon Resource Name (ARN) of the subnet.    subnet-id - The ID of the subnet.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the subnet.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - subnetIds: The IDs of the subnets. Default: Describes all your subnets.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSubnetAvailable(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        subnetIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeSubnetsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            subnetIds: subnetIds
        )
        try await self.waitUntilSubnetAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeInstanceStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSystemStatusOk(
        _ input: DescribeInstanceStatusRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeInstanceStatusRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("instanceStatuses[].systemStatus.status", expected: "ok")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeInstanceStatus
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeInstanceStatus(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the operation, without actually making the  request, and provides an error response. If you have the required permissions, the error response is  DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.instance-event-id - The ID of the event whose date and time you are modifying.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before-deadline - The deadline for starting the event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    operator.managed - A Boolean that indicates whether this is a managed instance.    operator.principal - The principal that manages the instance. Only valid for managed instances, where managed is true.    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    attached-ebs-status.status - The status of the attached EBS volume  for the instance (ok | impaired | initializing |  insufficient-data | not-applicable).
    ///   - includeAllInstances: When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false
    ///   - instanceIds: The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
    ///   - maxResults: The maximum number of items to return for this request. To get the next page of items, make another request with the token returned in the output.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilSystemStatusOk(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        includeAllInstances: Bool? = nil,
        instanceIds: [String]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeInstanceStatusRequest(
            dryRun: dryRun, 
            filters: filters, 
            includeAllInstances: includeAllInstances, 
            instanceIds: instanceIds, 
            maxResults: maxResults, 
            nextToken: nextToken
        )
        try await self.waitUntilSystemStatusOk(input, logger: logger)
    }

    /// Waiter for operation ``describeVolumes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVolumeAvailable(
        _ input: DescribeVolumesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeVolumesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("volumes[].state", expected: "available")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("volumes[].state", expected: "deleted")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeVolumes
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeVolumes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - Indicates whether the volume is encrypted (true | false)    fast-restored - Indicates whether the volume was created from a  snapshot that is enabled for fast snapshot restore (true |  false).    multi-attach-enabled - Indicates whether the volume is enabled for Multi-Attach (true 			| false)    operator.managed - A Boolean that indicates whether this is a managed volume.    operator.principal - The principal that manages the volume. Only valid for managed volumes, where managed is true.    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The state of the volume (creating | available | in-use | deleting | deleted | error).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type (gp2 | gp3 | io1 | io2 |  st1 | sc1| standard)
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - volumeIds: The volume IDs. If not specified, then all volumes are included in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVolumeAvailable(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeVolumesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            volumeIds: volumeIds
        )
        try await self.waitUntilVolumeAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeVolumes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVolumeDeleted(
        _ input: DescribeVolumesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeVolumesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("volumes[].state", expected: "deleted")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("InvalidVolume.NotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeVolumes
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeVolumes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - Indicates whether the volume is encrypted (true | false)    fast-restored - Indicates whether the volume was created from a  snapshot that is enabled for fast snapshot restore (true |  false).    multi-attach-enabled - Indicates whether the volume is enabled for Multi-Attach (true 			| false)    operator.managed - A Boolean that indicates whether this is a managed volume.    operator.principal - The principal that manages the volume. Only valid for managed volumes, where managed is true.    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The state of the volume (creating | available | in-use | deleting | deleted | error).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type (gp2 | gp3 | io1 | io2 |  st1 | sc1| standard)
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - volumeIds: The volume IDs. If not specified, then all volumes are included in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVolumeDeleted(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeVolumesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            volumeIds: volumeIds
        )
        try await self.waitUntilVolumeDeleted(input, logger: logger)
    }

    /// Waiter for operation ``describeVolumes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVolumeInUse(
        _ input: DescribeVolumesRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeVolumesRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("volumes[].state", expected: "in-use")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("volumes[].state", expected: "deleted")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeVolumes
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeVolumes(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - Indicates whether the volume is encrypted (true | false)    fast-restored - Indicates whether the volume was created from a  snapshot that is enabled for fast snapshot restore (true |  false).    multi-attach-enabled - Indicates whether the volume is enabled for Multi-Attach (true 			| false)    operator.managed - A Boolean that indicates whether this is a managed volume.    operator.principal - The principal that manages the volume. Only valid for managed volumes, where managed is true.    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The state of the volume (creating | available | in-use | deleting | deleted | error).    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type (gp2 | gp3 | io1 | io2 |  st1 | sc1| standard)
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - volumeIds: The volume IDs. If not specified, then all volumes are included in the response.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVolumeInUse(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        volumeIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeVolumesRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            volumeIds: volumeIds
        )
        try await self.waitUntilVolumeInUse(input, logger: logger)
    }

    /// Waiter for operation ``describeVpcs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpcAvailable(
        _ input: DescribeVpcsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeVpcsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("vpcs[].state", expected: "available")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeVpcs
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeVpcs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    cidr-block-association.cidr-block - An IPv4 CIDR block associated with the VPC.    cidr-block-association.association-id - The association ID for an IPv4 CIDR block associated with the VPC.    cidr-block-association.state - The state of an IPv4 CIDR block associated with the VPC.    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.ipv6-pool - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    is-default - Indicates whether the VPC is the default VPC.    owner-id - The ID of the Amazon Web Services account that owns the VPC.    state - The state of the VPC (pending | available).    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - vpcIds: The IDs of the VPCs.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpcAvailable(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeVpcsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcIds: vpcIds
        )
        try await self.waitUntilVpcAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeVpcs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpcExists(
        _ input: DescribeVpcsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeVpcsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidVpcID.NotFound")),
            ],
            minDelayTime: .seconds(1),
            command: self.describeVpcs
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeVpcs(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    cidr-block-association.cidr-block - An IPv4 CIDR block associated with the VPC.    cidr-block-association.association-id - The association ID for an IPv4 CIDR block associated with the VPC.    cidr-block-association.state - The state of an IPv4 CIDR block associated with the VPC.    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.ipv6-pool - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    is-default - Indicates whether the VPC is the default VPC.    owner-id - The ID of the Amazon Web Services account that owns the VPC.    state - The state of the VPC (pending | available).    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - vpcIds: The IDs of the VPCs.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpcExists(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeVpcsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcIds: vpcIds
        )
        try await self.waitUntilVpcExists(input, logger: logger)
    }

    /// Waiter for operation ``describeVpcPeeringConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpcPeeringConnectionDeleted(
        _ input: DescribeVpcPeeringConnectionsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeVpcPeeringConnectionsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("vpcPeeringConnections[].status.code", expected: "deleted")),
                .init(state: .success, matcher: AWSErrorCodeMatcher("InvalidVpcPeeringConnectionID.NotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeVpcPeeringConnections
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeVpcPeeringConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.    accepter-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the accepter VPC.    accepter-vpc-info.vpc-id - The ID of the accepter VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleting | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-peering-connection-id - The ID of the VPC peering connection.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - vpcPeeringConnectionIds: The IDs of the VPC peering connections. Default: Describes all your VPC peering connections.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpcPeeringConnectionDeleted(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcPeeringConnectionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeVpcPeeringConnectionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcPeeringConnectionIds: vpcPeeringConnectionIds
        )
        try await self.waitUntilVpcPeeringConnectionDeleted(input, logger: logger)
    }

    /// Waiter for operation ``describeVpcPeeringConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpcPeeringConnectionExists(
        _ input: DescribeVpcPeeringConnectionsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeVpcPeeringConnectionsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: AWSSuccessMatcher()),
                .init(state: .retry, matcher: AWSErrorCodeMatcher("InvalidVpcPeeringConnectionID.NotFound")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeVpcPeeringConnections
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeVpcPeeringConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request,  and provides an error response. If you have the required permissions, the error response is DryRunOperation.  Otherwise, it is UnauthorizedOperation.
    ///   - filters: The filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.    accepter-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the accepter VPC.    accepter-vpc-info.vpc-id - The ID of the accepter VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The ID of the Amazon Web Services account that owns the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleting | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-peering-connection-id - The ID of the VPC peering connection.
    ///   - maxResults: The maximum number of items to return for this request.
    ///   - nextToken: The token returned from a previous paginated request. Pagination continues from the end of the items returned by the previous request.
    ///   - vpcPeeringConnectionIds: The IDs of the VPC peering connections. Default: Describes all your VPC peering connections.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpcPeeringConnectionExists(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        maxResults: Int? = nil,
        nextToken: String? = nil,
        vpcPeeringConnectionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeVpcPeeringConnectionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            maxResults: maxResults, 
            nextToken: nextToken, 
            vpcPeeringConnectionIds: vpcPeeringConnectionIds
        )
        try await self.waitUntilVpcPeeringConnectionExists(input, logger: logger)
    }

    /// Waiter for operation ``describeVpnConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpnConnectionAvailable(
        _ input: DescribeVpnConnectionsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeVpnConnectionsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("vpnConnections[].state", expected: "available")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("vpnConnections[].state", expected: "deleting")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("vpnConnections[].state", expected: "deleted")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeVpnConnections
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeVpnConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    customer-gateway-configuration - The configuration information for the customer gateway.    customer-gateway-id - The ID of a customer gateway associated with the VPN connection.    state - The state of the VPN connection (pending | available | deleting | deleted).    option.static-routes-only - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).    route.destination-cidr-block - The destination CIDR block. This corresponds to the subnet used in a customer data center.    bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP device.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of VPN connection. Currently the only supported type is ipsec.1.    vpn-connection-id - The ID of the VPN connection.    vpn-gateway-id - The ID of a virtual private gateway associated with the VPN connection.    transit-gateway-id - The ID of a transit gateway associated with the VPN connection.
    ///   - vpnConnectionIds: One or more VPN connection IDs. Default: Describes your VPN connections.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpnConnectionAvailable(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        vpnConnectionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeVpnConnectionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            vpnConnectionIds: vpnConnectionIds
        )
        try await self.waitUntilVpnConnectionAvailable(input, logger: logger)
    }

    /// Waiter for operation ``describeVpnConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - input: Input for operation
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpnConnectionDeleted(
        _ input: DescribeVpnConnectionsRequest,
        maxWaitTime: TimeAmount? = nil,
        logger: Logger = AWSClient.loggingDisabled
    ) async throws {
        let waiter = AWSClient.Waiter<DescribeVpnConnectionsRequest, _>(
            acceptors: [
                .init(state: .success, matcher: try! JMESAllPathMatcher("vpnConnections[].state", expected: "deleted")),
                .init(state: .failure, matcher: try! JMESAnyPathMatcher("vpnConnections[].state", expected: "pending")),
            ],
            minDelayTime: .seconds(15),
            command: self.describeVpnConnections
        )
        return try await self.client.waitUntil(input, waiter: waiter, maxWaitTime: maxWaitTime, logger: logger)
    }
    /// Waiter for operation ``describeVpnConnections(_:logger:)``.
    ///
    /// - Parameters:
    ///   - dryRun: Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
    ///   - filters: One or more filters.    customer-gateway-configuration - The configuration information for the customer gateway.    customer-gateway-id - The ID of a customer gateway associated with the VPN connection.    state - The state of the VPN connection (pending | available | deleting | deleted).    option.static-routes-only - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).    route.destination-cidr-block - The destination CIDR block. This corresponds to the subnet used in a customer data center.    bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP device.    tag: - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of VPN connection. Currently the only supported type is ipsec.1.    vpn-connection-id - The ID of the VPN connection.    vpn-gateway-id - The ID of a virtual private gateway associated with the VPN connection.    transit-gateway-id - The ID of a transit gateway associated with the VPN connection.
    ///   - vpnConnectionIds: One or more VPN connection IDs. Default: Describes your VPN connections.
    ///   - logger: Logger used for logging
    @inlinable
    public func waitUntilVpnConnectionDeleted(
        dryRun: Bool? = nil,
        filters: [Filter]? = nil,
        vpnConnectionIds: [String]? = nil,
        logger: Logger = AWSClient.loggingDisabled        
    ) async throws {
        let input = DescribeVpnConnectionsRequest(
            dryRun: dryRun, 
            filters: filters, 
            vpnConnectionIds: vpnConnectionIds
        )
        try await self.waitUntilVpnConnectionDeleted(input, logger: logger)
    }
}
