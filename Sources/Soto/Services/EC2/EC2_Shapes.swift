//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2021 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto/tree/main/CodeGenerator. DO NOT EDIT.

import Foundation
import SotoCore

extension EC2 {
    // MARK: Enums

    public enum AccountAttributeName: String, CustomStringConvertible, Codable {
        case defaultVpc = "default-vpc"
        case supportedPlatforms = "supported-platforms"
        public var description: String { return self.rawValue }
    }

    public enum ActivityStatus: String, CustomStringConvertible, Codable {
        case error
        case fulfilled
        case pendingFulfillment = "pending_fulfillment"
        case pendingTermination = "pending_termination"
        public var description: String { return self.rawValue }
    }

    public enum AddressAttributeName: String, CustomStringConvertible, Codable {
        case domainName = "domain-name"
        public var description: String { return self.rawValue }
    }

    public enum Affinity: String, CustomStringConvertible, Codable {
        case `default`
        case host
        public var description: String { return self.rawValue }
    }

    public enum AllocationState: String, CustomStringConvertible, Codable {
        case available
        case pending
        case permanentFailure = "permanent-failure"
        case released
        case releasedPermanentFailure = "released-permanent-failure"
        case underAssessment = "under-assessment"
        public var description: String { return self.rawValue }
    }

    public enum AllocationStrategy: String, CustomStringConvertible, Codable {
        case capacityoptimized = "capacityOptimized"
        case capacityoptimizedprioritized = "capacityOptimizedPrioritized"
        case diversified
        case lowestprice = "lowestPrice"
        public var description: String { return self.rawValue }
    }

    public enum AllowsMultipleInstanceTypes: String, CustomStringConvertible, Codable {
        case off
        case on
        public var description: String { return self.rawValue }
    }

    public enum AnalysisStatus: String, CustomStringConvertible, Codable {
        case failed
        case running
        case succeeded
        public var description: String { return self.rawValue }
    }

    public enum ApplianceModeSupportValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public struct ArchitectureType: RawRepresentable, Equatable, Codable {
        public var rawValue: String

        public init(rawValue: String) {
            self.rawValue = rawValue
        }

        public static var arm64: Self { .init(rawValue: "arm64") }
        public static var i386: Self { .init(rawValue: "i386") }
        public static var x8664: Self { .init(rawValue: "x86_64") }
    }

    public enum ArchitectureValues: String, CustomStringConvertible, Codable {
        case arm64
        case i386
        case x8664 = "x86_64"
        public var description: String { return self.rawValue }
    }

    public enum AssociationStatusCode: String, CustomStringConvertible, Codable {
        case associated
        case associating
        case associationFailed = "association-failed"
        case disassociated
        case disassociating
        public var description: String { return self.rawValue }
    }

    public enum AttachmentStatus: String, CustomStringConvertible, Codable {
        case attached
        case attaching
        case detached
        case detaching
        public var description: String { return self.rawValue }
    }

    public enum AutoAcceptSharedAssociationsValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum AutoAcceptSharedAttachmentsValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum AutoPlacement: String, CustomStringConvertible, Codable {
        case off
        case on
        public var description: String { return self.rawValue }
    }

    public enum AvailabilityZoneOptInStatus: String, CustomStringConvertible, Codable {
        case notOptedIn = "not-opted-in"
        case optInNotRequired = "opt-in-not-required"
        case optedIn = "opted-in"
        public var description: String { return self.rawValue }
    }

    public enum AvailabilityZoneState: String, CustomStringConvertible, Codable {
        case available
        case impaired
        case information
        case unavailable
        public var description: String { return self.rawValue }
    }

    public enum BatchState: String, CustomStringConvertible, Codable {
        case active
        case cancelled
        case cancelledRunning = "cancelled_running"
        case cancelledTerminating = "cancelled_terminating"
        case failed
        case modifying
        case submitted
        public var description: String { return self.rawValue }
    }

    public enum BgpStatus: String, CustomStringConvertible, Codable {
        case down
        case up
        public var description: String { return self.rawValue }
    }

    public enum BootModeType: String, CustomStringConvertible, Codable {
        case legacyBios = "legacy-bios"
        case uefi
        public var description: String { return self.rawValue }
    }

    public enum BootModeValues: String, CustomStringConvertible, Codable {
        case legacyBios = "legacy-bios"
        case uefi
        public var description: String { return self.rawValue }
    }

    public enum BundleTaskState: String, CustomStringConvertible, Codable {
        case bundling
        case cancelling
        case complete
        case failed
        case pending
        case storing
        case waitingForShutdown = "waiting-for-shutdown"
        public var description: String { return self.rawValue }
    }

    public enum ByoipCidrState: String, CustomStringConvertible, Codable {
        case advertised
        case deprovisioned
        case failedDeprovision = "failed-deprovision"
        case failedProvision = "failed-provision"
        case pendingDeprovision = "pending-deprovision"
        case pendingProvision = "pending-provision"
        case provisioned
        case provisionedNotPubliclyAdvertisable = "provisioned-not-publicly-advertisable"
        public var description: String { return self.rawValue }
    }

    public enum CancelBatchErrorCode: String, CustomStringConvertible, Codable {
        case fleetrequestiddoesnotexist = "fleetRequestIdDoesNotExist"
        case fleetrequestidmalformed = "fleetRequestIdMalformed"
        case fleetrequestnotincancellablestate = "fleetRequestNotInCancellableState"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public enum CancelSpotInstanceRequestState: String, CustomStringConvertible, Codable {
        case active
        case cancelled
        case closed
        case completed
        case open
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationInstancePlatform: String, CustomStringConvertible, Codable {
        case linuxUnix = "Linux/UNIX"
        case linuxWithSqlServerEnterprise = "Linux with SQL Server Enterprise"
        case linuxWithSqlServerStandard = "Linux with SQL Server Standard"
        case linuxWithSqlServerWeb = "Linux with SQL Server Web"
        case redHatEnterpriseLinux = "Red Hat Enterprise Linux"
        case suseLinux = "SUSE Linux"
        case windows = "Windows"
        case windowsWithSqlServer = "Windows with SQL Server"
        case windowsWithSqlServerEnterprise = "Windows with SQL Server Enterprise"
        case windowsWithSqlServerStandard = "Windows with SQL Server Standard"
        case windowsWithSqlServerWeb = "Windows with SQL Server Web"
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationPreference: String, CustomStringConvertible, Codable {
        case none
        case open
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationState: String, CustomStringConvertible, Codable {
        case active
        case cancelled
        case expired
        case failed
        case pending
        public var description: String { return self.rawValue }
    }

    public enum CapacityReservationTenancy: String, CustomStringConvertible, Codable {
        case dedicated
        case `default`
        public var description: String { return self.rawValue }
    }

    public enum CarrierGatewayState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case pending
        public var description: String { return self.rawValue }
    }

    public enum ClientCertificateRevocationListStatusCode: String, CustomStringConvertible, Codable {
        case active
        case pending
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnAuthenticationType: String, CustomStringConvertible, Codable {
        case certificateAuthentication = "certificate-authentication"
        case directoryServiceAuthentication = "directory-service-authentication"
        case federatedAuthentication = "federated-authentication"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnAuthorizationRuleStatusCode: String, CustomStringConvertible, Codable {
        case active
        case authorizing
        case failed
        case revoking
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnConnectionStatusCode: String, CustomStringConvertible, Codable {
        case active
        case failedToTerminate = "failed-to-terminate"
        case terminated
        case terminating
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnEndpointAttributeStatusCode: String, CustomStringConvertible, Codable {
        case applied
        case applying
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnEndpointStatusCode: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case pendingAssociate = "pending-associate"
        public var description: String { return self.rawValue }
    }

    public enum ClientVpnRouteStatusCode: String, CustomStringConvertible, Codable {
        case active
        case creating
        case deleting
        case failed
        public var description: String { return self.rawValue }
    }

    public enum ConnectionNotificationState: String, CustomStringConvertible, Codable {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public enum ConnectionNotificationType: String, CustomStringConvertible, Codable {
        case topic = "Topic"
        public var description: String { return self.rawValue }
    }

    public enum ConnectivityType: String, CustomStringConvertible, Codable {
        case `private`
        case `public`
        public var description: String { return self.rawValue }
    }

    public enum ContainerFormat: String, CustomStringConvertible, Codable {
        case ova
        public var description: String { return self.rawValue }
    }

    public enum ConversionTaskState: String, CustomStringConvertible, Codable {
        case active
        case cancelled
        case cancelling
        case completed
        case deleted
        public var description: String { return self.rawValue }
    }

    public enum CopyTagsFromSource: String, CustomStringConvertible, Codable {
        case volume
        public var description: String { return self.rawValue }
    }

    public enum CurrencyCodeValues: String, CustomStringConvertible, Codable {
        case usd = "USD"
        public var description: String { return self.rawValue }
    }

    public enum DatafeedSubscriptionState: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public enum DefaultRouteTableAssociationValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum DefaultRouteTablePropagationValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum DefaultTargetCapacityType: String, CustomStringConvertible, Codable {
        case onDemand = "on-demand"
        case spot
        public var description: String { return self.rawValue }
    }

    public enum DeleteFleetErrorCode: String, CustomStringConvertible, Codable {
        case fleetiddoesnotexist = "fleetIdDoesNotExist"
        case fleetidmalformed = "fleetIdMalformed"
        case fleetnotindeletablestate = "fleetNotInDeletableState"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public enum DeleteQueuedReservedInstancesErrorCode: String, CustomStringConvertible, Codable {
        case reservedInstancesIdInvalid = "reserved-instances-id-invalid"
        case reservedInstancesNotInQueuedState = "reserved-instances-not-in-queued-state"
        case unexpectedError = "unexpected-error"
        public var description: String { return self.rawValue }
    }

    public enum DeviceType: String, CustomStringConvertible, Codable {
        case ebs
        case instanceStore = "instance-store"
        public var description: String { return self.rawValue }
    }

    public enum DiskImageFormat: String, CustomStringConvertible, Codable {
        case raw = "RAW"
        case vhd = "VHD"
        case vmdk = "VMDK"
        public var description: String { return self.rawValue }
    }

    public enum DiskType: String, CustomStringConvertible, Codable {
        case hdd
        case ssd
        public var description: String { return self.rawValue }
    }

    public enum DnsNameState: String, CustomStringConvertible, Codable {
        case failed
        case pendingverification = "pendingVerification"
        case verified
        public var description: String { return self.rawValue }
    }

    public enum DnsSupportValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum DomainType: String, CustomStringConvertible, Codable {
        case standard
        case vpc
        public var description: String { return self.rawValue }
    }

    public enum EbsEncryptionSupport: String, CustomStringConvertible, Codable {
        case supported
        case unsupported
        public var description: String { return self.rawValue }
    }

    public enum EbsNvmeSupport: String, CustomStringConvertible, Codable {
        case required
        case supported
        case unsupported
        public var description: String { return self.rawValue }
    }

    public enum EbsOptimizedSupport: String, CustomStringConvertible, Codable {
        case `default`
        case supported
        case unsupported
        public var description: String { return self.rawValue }
    }

    public enum ElasticGpuState: String, CustomStringConvertible, Codable {
        case attached = "ATTACHED"
        public var description: String { return self.rawValue }
    }

    public enum ElasticGpuStatus: String, CustomStringConvertible, Codable {
        case impaired = "IMPAIRED"
        case ok = "OK"
        public var description: String { return self.rawValue }
    }

    public enum EnaSupport: String, CustomStringConvertible, Codable {
        case required
        case supported
        case unsupported
        public var description: String { return self.rawValue }
    }

    public enum EndDateType: String, CustomStringConvertible, Codable {
        case limited
        case unlimited
        public var description: String { return self.rawValue }
    }

    public enum EphemeralNvmeSupport: String, CustomStringConvertible, Codable {
        case required
        case supported
        case unsupported
        public var description: String { return self.rawValue }
    }

    public enum EventCode: String, CustomStringConvertible, Codable {
        case instanceReboot = "instance-reboot"
        case instanceRetirement = "instance-retirement"
        case instanceStop = "instance-stop"
        case systemMaintenance = "system-maintenance"
        case systemReboot = "system-reboot"
        public var description: String { return self.rawValue }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case error
        case fleetrequestchange = "fleetRequestChange"
        case information
        case instancechange = "instanceChange"
        public var description: String { return self.rawValue }
    }

    public enum ExcessCapacityTerminationPolicy: String, CustomStringConvertible, Codable {
        case `default`
        case notermination = "noTermination"
        public var description: String { return self.rawValue }
    }

    public enum ExportEnvironment: String, CustomStringConvertible, Codable {
        case citrix
        case microsoft
        case vmware
        public var description: String { return self.rawValue }
    }

    public enum ExportTaskState: String, CustomStringConvertible, Codable {
        case active
        case cancelled
        case cancelling
        case completed
        public var description: String { return self.rawValue }
    }

    public enum FastSnapshotRestoreStateCode: String, CustomStringConvertible, Codable {
        case disabled
        case disabling
        case enabled
        case enabling
        case optimizing
        public var description: String { return self.rawValue }
    }

    public enum FleetActivityStatus: String, CustomStringConvertible, Codable {
        case error
        case fulfilled
        case pendingFulfillment = "pending_fulfillment"
        case pendingTermination = "pending_termination"
        public var description: String { return self.rawValue }
    }

    public enum FleetCapacityReservationUsageStrategy: String, CustomStringConvertible, Codable {
        case useCapacityReservationsFirst = "use-capacity-reservations-first"
        public var description: String { return self.rawValue }
    }

    public enum FleetEventType: String, CustomStringConvertible, Codable {
        case fleetChange = "fleet-change"
        case instanceChange = "instance-change"
        case serviceError = "service-error"
        public var description: String { return self.rawValue }
    }

    public enum FleetExcessCapacityTerminationPolicy: String, CustomStringConvertible, Codable {
        case noTermination = "no-termination"
        case termination
        public var description: String { return self.rawValue }
    }

    public enum FleetOnDemandAllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestPrice = "lowest-price"
        case prioritized
        public var description: String { return self.rawValue }
    }

    public enum FleetReplacementStrategy: String, CustomStringConvertible, Codable {
        case launch
        public var description: String { return self.rawValue }
    }

    public enum FleetStateCode: String, CustomStringConvertible, Codable {
        case active
        case deleted
        case deletedRunning = "deleted_running"
        case deletedTerminating = "deleted_terminating"
        case failed
        case modifying
        case submitted
        public var description: String { return self.rawValue }
    }

    public enum FleetType: String, CustomStringConvertible, Codable {
        case instant
        case maintain
        case request
        public var description: String { return self.rawValue }
    }

    public enum FlowLogsResourceType: String, CustomStringConvertible, Codable {
        case networkinterface = "NetworkInterface"
        case subnet = "Subnet"
        case vpc = "VPC"
        public var description: String { return self.rawValue }
    }

    public enum FpgaImageAttributeName: String, CustomStringConvertible, Codable {
        case description
        case loadpermission = "loadPermission"
        case name
        case productcodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public enum FpgaImageStateCode: String, CustomStringConvertible, Codable {
        case available
        case failed
        case pending
        case unavailable
        public var description: String { return self.rawValue }
    }

    public enum GatewayType: String, CustomStringConvertible, Codable {
        case ipsec1 = "ipsec.1"
        public var description: String { return self.rawValue }
    }

    public enum HostRecovery: String, CustomStringConvertible, Codable {
        case off
        case on
        public var description: String { return self.rawValue }
    }

    public enum HostTenancy: String, CustomStringConvertible, Codable {
        case dedicated
        case host
        public var description: String { return self.rawValue }
    }

    public enum HttpTokensState: String, CustomStringConvertible, Codable {
        case optional
        case required
        public var description: String { return self.rawValue }
    }

    public enum HypervisorType: String, CustomStringConvertible, Codable {
        case ovm
        case xen
        public var description: String { return self.rawValue }
    }

    public enum IamInstanceProfileAssociationState: String, CustomStringConvertible, Codable {
        case associated
        case associating
        case disassociated
        case disassociating
        public var description: String { return self.rawValue }
    }

    public enum Igmpv2SupportValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum ImageAttributeName: String, CustomStringConvertible, Codable {
        case blockdevicemapping = "blockDeviceMapping"
        case bootmode = "bootMode"
        case description
        case kernel
        case launchpermission = "launchPermission"
        case productcodes = "productCodes"
        case ramdisk
        case sriovnetsupport = "sriovNetSupport"
        public var description: String { return self.rawValue }
    }

    public enum ImageState: String, CustomStringConvertible, Codable {
        case available
        case deregistered
        case error
        case failed
        case invalid
        case pending
        case transient
        public var description: String { return self.rawValue }
    }

    public enum ImageTypeValues: String, CustomStringConvertible, Codable {
        case kernel
        case machine
        case ramdisk
        public var description: String { return self.rawValue }
    }

    public enum InstanceAttributeName: String, CustomStringConvertible, Codable {
        case blockdevicemapping = "blockDeviceMapping"
        case disableapitermination = "disableApiTermination"
        case ebsoptimized = "ebsOptimized"
        case enasupport = "enaSupport"
        case enclaveoptions = "enclaveOptions"
        case groupset = "groupSet"
        case instanceinitiatedshutdownbehavior = "instanceInitiatedShutdownBehavior"
        case instancetype = "instanceType"
        case kernel
        case productcodes = "productCodes"
        case ramdisk
        case rootdevicename = "rootDeviceName"
        case sourcedestcheck = "sourceDestCheck"
        case sriovnetsupport = "sriovNetSupport"
        case userdata = "userData"
        public var description: String { return self.rawValue }
    }

    public enum InstanceEventWindowState: String, CustomStringConvertible, Codable {
        case active
        case creating
        case deleted
        case deleting
        public var description: String { return self.rawValue }
    }

    public enum InstanceHealthStatus: String, CustomStringConvertible, Codable {
        case healthy
        case unhealthy
        public var description: String { return self.rawValue }
    }

    public enum InstanceInterruptionBehavior: String, CustomStringConvertible, Codable {
        case hibernate
        case stop
        case terminate
        public var description: String { return self.rawValue }
    }

    public enum InstanceLifecycle: String, CustomStringConvertible, Codable {
        case onDemand = "on-demand"
        case spot
        public var description: String { return self.rawValue }
    }

    public enum InstanceLifecycleType: String, CustomStringConvertible, Codable {
        case scheduled
        case spot
        public var description: String { return self.rawValue }
    }

    public enum InstanceMatchCriteria: String, CustomStringConvertible, Codable {
        case open
        case targeted
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetadataEndpointState: String, CustomStringConvertible, Codable {
        case disabled
        case enabled
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetadataOptionsState: String, CustomStringConvertible, Codable {
        case applied
        case pending
        public var description: String { return self.rawValue }
    }

    public enum InstanceStateName: String, CustomStringConvertible, Codable {
        case pending
        case running
        case shuttingDown = "shutting-down"
        case stopped
        case stopping
        case terminated
        public var description: String { return self.rawValue }
    }

    public struct InstanceType: RawRepresentable, Equatable, Codable {
        public var rawValue: String

        public init(rawValue: String) {
            self.rawValue = rawValue
        }

        public static var a12Xlarge: Self { .init(rawValue: "a1.2xlarge") }
        public static var a14Xlarge: Self { .init(rawValue: "a1.4xlarge") }
        public static var a1Large: Self { .init(rawValue: "a1.large") }
        public static var a1Medium: Self { .init(rawValue: "a1.medium") }
        public static var a1Metal: Self { .init(rawValue: "a1.metal") }
        public static var a1Xlarge: Self { .init(rawValue: "a1.xlarge") }
        public static var c1Medium: Self { .init(rawValue: "c1.medium") }
        public static var c1Xlarge: Self { .init(rawValue: "c1.xlarge") }
        public static var c32Xlarge: Self { .init(rawValue: "c3.2xlarge") }
        public static var c34Xlarge: Self { .init(rawValue: "c3.4xlarge") }
        public static var c38Xlarge: Self { .init(rawValue: "c3.8xlarge") }
        public static var c3Large: Self { .init(rawValue: "c3.large") }
        public static var c3Xlarge: Self { .init(rawValue: "c3.xlarge") }
        public static var c42Xlarge: Self { .init(rawValue: "c4.2xlarge") }
        public static var c44Xlarge: Self { .init(rawValue: "c4.4xlarge") }
        public static var c48Xlarge: Self { .init(rawValue: "c4.8xlarge") }
        public static var c4Large: Self { .init(rawValue: "c4.large") }
        public static var c4Xlarge: Self { .init(rawValue: "c4.xlarge") }
        public static var c512Xlarge: Self { .init(rawValue: "c5.12xlarge") }
        public static var c518Xlarge: Self { .init(rawValue: "c5.18xlarge") }
        public static var c524Xlarge: Self { .init(rawValue: "c5.24xlarge") }
        public static var c52Xlarge: Self { .init(rawValue: "c5.2xlarge") }
        public static var c54Xlarge: Self { .init(rawValue: "c5.4xlarge") }
        public static var c59Xlarge: Self { .init(rawValue: "c5.9xlarge") }
        public static var c5Large: Self { .init(rawValue: "c5.large") }
        public static var c5Metal: Self { .init(rawValue: "c5.metal") }
        public static var c5Xlarge: Self { .init(rawValue: "c5.xlarge") }
        public static var c5a12Xlarge: Self { .init(rawValue: "c5a.12xlarge") }
        public static var c5a16Xlarge: Self { .init(rawValue: "c5a.16xlarge") }
        public static var c5a24Xlarge: Self { .init(rawValue: "c5a.24xlarge") }
        public static var c5a2Xlarge: Self { .init(rawValue: "c5a.2xlarge") }
        public static var c5a4Xlarge: Self { .init(rawValue: "c5a.4xlarge") }
        public static var c5a8Xlarge: Self { .init(rawValue: "c5a.8xlarge") }
        public static var c5aLarge: Self { .init(rawValue: "c5a.large") }
        public static var c5aXlarge: Self { .init(rawValue: "c5a.xlarge") }
        public static var c5ad12Xlarge: Self { .init(rawValue: "c5ad.12xlarge") }
        public static var c5ad16Xlarge: Self { .init(rawValue: "c5ad.16xlarge") }
        public static var c5ad24Xlarge: Self { .init(rawValue: "c5ad.24xlarge") }
        public static var c5ad2Xlarge: Self { .init(rawValue: "c5ad.2xlarge") }
        public static var c5ad4Xlarge: Self { .init(rawValue: "c5ad.4xlarge") }
        public static var c5ad8Xlarge: Self { .init(rawValue: "c5ad.8xlarge") }
        public static var c5adLarge: Self { .init(rawValue: "c5ad.large") }
        public static var c5adXlarge: Self { .init(rawValue: "c5ad.xlarge") }
        public static var c5d12Xlarge: Self { .init(rawValue: "c5d.12xlarge") }
        public static var c5d18Xlarge: Self { .init(rawValue: "c5d.18xlarge") }
        public static var c5d24Xlarge: Self { .init(rawValue: "c5d.24xlarge") }
        public static var c5d2Xlarge: Self { .init(rawValue: "c5d.2xlarge") }
        public static var c5d4Xlarge: Self { .init(rawValue: "c5d.4xlarge") }
        public static var c5d9Xlarge: Self { .init(rawValue: "c5d.9xlarge") }
        public static var c5dLarge: Self { .init(rawValue: "c5d.large") }
        public static var c5dMetal: Self { .init(rawValue: "c5d.metal") }
        public static var c5dXlarge: Self { .init(rawValue: "c5d.xlarge") }
        public static var c5n18Xlarge: Self { .init(rawValue: "c5n.18xlarge") }
        public static var c5n2Xlarge: Self { .init(rawValue: "c5n.2xlarge") }
        public static var c5n4Xlarge: Self { .init(rawValue: "c5n.4xlarge") }
        public static var c5n9Xlarge: Self { .init(rawValue: "c5n.9xlarge") }
        public static var c5nLarge: Self { .init(rawValue: "c5n.large") }
        public static var c5nMetal: Self { .init(rawValue: "c5n.metal") }
        public static var c5nXlarge: Self { .init(rawValue: "c5n.xlarge") }
        public static var c6g12Xlarge: Self { .init(rawValue: "c6g.12xlarge") }
        public static var c6g16Xlarge: Self { .init(rawValue: "c6g.16xlarge") }
        public static var c6g2Xlarge: Self { .init(rawValue: "c6g.2xlarge") }
        public static var c6g4Xlarge: Self { .init(rawValue: "c6g.4xlarge") }
        public static var c6g8Xlarge: Self { .init(rawValue: "c6g.8xlarge") }
        public static var c6gLarge: Self { .init(rawValue: "c6g.large") }
        public static var c6gMedium: Self { .init(rawValue: "c6g.medium") }
        public static var c6gMetal: Self { .init(rawValue: "c6g.metal") }
        public static var c6gXlarge: Self { .init(rawValue: "c6g.xlarge") }
        public static var c6gd12Xlarge: Self { .init(rawValue: "c6gd.12xlarge") }
        public static var c6gd16Xlarge: Self { .init(rawValue: "c6gd.16xlarge") }
        public static var c6gd2Xlarge: Self { .init(rawValue: "c6gd.2xlarge") }
        public static var c6gd4Xlarge: Self { .init(rawValue: "c6gd.4xlarge") }
        public static var c6gd8Xlarge: Self { .init(rawValue: "c6gd.8xlarge") }
        public static var c6gdLarge: Self { .init(rawValue: "c6gd.large") }
        public static var c6gdMedium: Self { .init(rawValue: "c6gd.medium") }
        public static var c6gdMetal: Self { .init(rawValue: "c6gd.metal") }
        public static var c6gdXlarge: Self { .init(rawValue: "c6gd.xlarge") }
        public static var c6gn12Xlarge: Self { .init(rawValue: "c6gn.12xlarge") }
        public static var c6gn16Xlarge: Self { .init(rawValue: "c6gn.16xlarge") }
        public static var c6gn2Xlarge: Self { .init(rawValue: "c6gn.2xlarge") }
        public static var c6gn4Xlarge: Self { .init(rawValue: "c6gn.4xlarge") }
        public static var c6gn8Xlarge: Self { .init(rawValue: "c6gn.8xlarge") }
        public static var c6gnLarge: Self { .init(rawValue: "c6gn.large") }
        public static var c6gnMedium: Self { .init(rawValue: "c6gn.medium") }
        public static var c6gnXlarge: Self { .init(rawValue: "c6gn.xlarge") }
        public static var cc14Xlarge: Self { .init(rawValue: "cc1.4xlarge") }
        public static var cc28Xlarge: Self { .init(rawValue: "cc2.8xlarge") }
        public static var cg14Xlarge: Self { .init(rawValue: "cg1.4xlarge") }
        public static var cr18Xlarge: Self { .init(rawValue: "cr1.8xlarge") }
        public static var d22Xlarge: Self { .init(rawValue: "d2.2xlarge") }
        public static var d24Xlarge: Self { .init(rawValue: "d2.4xlarge") }
        public static var d28Xlarge: Self { .init(rawValue: "d2.8xlarge") }
        public static var d2Xlarge: Self { .init(rawValue: "d2.xlarge") }
        public static var d32Xlarge: Self { .init(rawValue: "d3.2xlarge") }
        public static var d34Xlarge: Self { .init(rawValue: "d3.4xlarge") }
        public static var d38Xlarge: Self { .init(rawValue: "d3.8xlarge") }
        public static var d3Xlarge: Self { .init(rawValue: "d3.xlarge") }
        public static var d3en12Xlarge: Self { .init(rawValue: "d3en.12xlarge") }
        public static var d3en2Xlarge: Self { .init(rawValue: "d3en.2xlarge") }
        public static var d3en4Xlarge: Self { .init(rawValue: "d3en.4xlarge") }
        public static var d3en6Xlarge: Self { .init(rawValue: "d3en.6xlarge") }
        public static var d3en8Xlarge: Self { .init(rawValue: "d3en.8xlarge") }
        public static var d3enXlarge: Self { .init(rawValue: "d3en.xlarge") }
        public static var f116Xlarge: Self { .init(rawValue: "f1.16xlarge") }
        public static var f12Xlarge: Self { .init(rawValue: "f1.2xlarge") }
        public static var f14Xlarge: Self { .init(rawValue: "f1.4xlarge") }
        public static var g22Xlarge: Self { .init(rawValue: "g2.2xlarge") }
        public static var g28Xlarge: Self { .init(rawValue: "g2.8xlarge") }
        public static var g316Xlarge: Self { .init(rawValue: "g3.16xlarge") }
        public static var g34Xlarge: Self { .init(rawValue: "g3.4xlarge") }
        public static var g38Xlarge: Self { .init(rawValue: "g3.8xlarge") }
        public static var g3sXlarge: Self { .init(rawValue: "g3s.xlarge") }
        public static var g4ad16Xlarge: Self { .init(rawValue: "g4ad.16xlarge") }
        public static var g4ad4Xlarge: Self { .init(rawValue: "g4ad.4xlarge") }
        public static var g4ad8Xlarge: Self { .init(rawValue: "g4ad.8xlarge") }
        public static var g4dn12Xlarge: Self { .init(rawValue: "g4dn.12xlarge") }
        public static var g4dn16Xlarge: Self { .init(rawValue: "g4dn.16xlarge") }
        public static var g4dn2Xlarge: Self { .init(rawValue: "g4dn.2xlarge") }
        public static var g4dn4Xlarge: Self { .init(rawValue: "g4dn.4xlarge") }
        public static var g4dn8Xlarge: Self { .init(rawValue: "g4dn.8xlarge") }
        public static var g4dnMetal: Self { .init(rawValue: "g4dn.metal") }
        public static var g4dnXlarge: Self { .init(rawValue: "g4dn.xlarge") }
        public static var h116Xlarge: Self { .init(rawValue: "h1.16xlarge") }
        public static var h12Xlarge: Self { .init(rawValue: "h1.2xlarge") }
        public static var h14Xlarge: Self { .init(rawValue: "h1.4xlarge") }
        public static var h18Xlarge: Self { .init(rawValue: "h1.8xlarge") }
        public static var hi14Xlarge: Self { .init(rawValue: "hi1.4xlarge") }
        public static var hs18Xlarge: Self { .init(rawValue: "hs1.8xlarge") }
        public static var i22Xlarge: Self { .init(rawValue: "i2.2xlarge") }
        public static var i24Xlarge: Self { .init(rawValue: "i2.4xlarge") }
        public static var i28Xlarge: Self { .init(rawValue: "i2.8xlarge") }
        public static var i2Xlarge: Self { .init(rawValue: "i2.xlarge") }
        public static var i316Xlarge: Self { .init(rawValue: "i3.16xlarge") }
        public static var i32Xlarge: Self { .init(rawValue: "i3.2xlarge") }
        public static var i34Xlarge: Self { .init(rawValue: "i3.4xlarge") }
        public static var i38Xlarge: Self { .init(rawValue: "i3.8xlarge") }
        public static var i3Large: Self { .init(rawValue: "i3.large") }
        public static var i3Metal: Self { .init(rawValue: "i3.metal") }
        public static var i3Xlarge: Self { .init(rawValue: "i3.xlarge") }
        public static var i3en12Xlarge: Self { .init(rawValue: "i3en.12xlarge") }
        public static var i3en24Xlarge: Self { .init(rawValue: "i3en.24xlarge") }
        public static var i3en2Xlarge: Self { .init(rawValue: "i3en.2xlarge") }
        public static var i3en3Xlarge: Self { .init(rawValue: "i3en.3xlarge") }
        public static var i3en6Xlarge: Self { .init(rawValue: "i3en.6xlarge") }
        public static var i3enLarge: Self { .init(rawValue: "i3en.large") }
        public static var i3enMetal: Self { .init(rawValue: "i3en.metal") }
        public static var i3enXlarge: Self { .init(rawValue: "i3en.xlarge") }
        public static var inf124Xlarge: Self { .init(rawValue: "inf1.24xlarge") }
        public static var inf12Xlarge: Self { .init(rawValue: "inf1.2xlarge") }
        public static var inf16Xlarge: Self { .init(rawValue: "inf1.6xlarge") }
        public static var inf1Xlarge: Self { .init(rawValue: "inf1.xlarge") }
        public static var m1Large: Self { .init(rawValue: "m1.large") }
        public static var m1Medium: Self { .init(rawValue: "m1.medium") }
        public static var m1Small: Self { .init(rawValue: "m1.small") }
        public static var m1Xlarge: Self { .init(rawValue: "m1.xlarge") }
        public static var m22Xlarge: Self { .init(rawValue: "m2.2xlarge") }
        public static var m24Xlarge: Self { .init(rawValue: "m2.4xlarge") }
        public static var m2Xlarge: Self { .init(rawValue: "m2.xlarge") }
        public static var m32Xlarge: Self { .init(rawValue: "m3.2xlarge") }
        public static var m3Large: Self { .init(rawValue: "m3.large") }
        public static var m3Medium: Self { .init(rawValue: "m3.medium") }
        public static var m3Xlarge: Self { .init(rawValue: "m3.xlarge") }
        public static var m410Xlarge: Self { .init(rawValue: "m4.10xlarge") }
        public static var m416Xlarge: Self { .init(rawValue: "m4.16xlarge") }
        public static var m42Xlarge: Self { .init(rawValue: "m4.2xlarge") }
        public static var m44Xlarge: Self { .init(rawValue: "m4.4xlarge") }
        public static var m4Large: Self { .init(rawValue: "m4.large") }
        public static var m4Xlarge: Self { .init(rawValue: "m4.xlarge") }
        public static var m512Xlarge: Self { .init(rawValue: "m5.12xlarge") }
        public static var m516Xlarge: Self { .init(rawValue: "m5.16xlarge") }
        public static var m524Xlarge: Self { .init(rawValue: "m5.24xlarge") }
        public static var m52Xlarge: Self { .init(rawValue: "m5.2xlarge") }
        public static var m54Xlarge: Self { .init(rawValue: "m5.4xlarge") }
        public static var m58Xlarge: Self { .init(rawValue: "m5.8xlarge") }
        public static var m5Large: Self { .init(rawValue: "m5.large") }
        public static var m5Metal: Self { .init(rawValue: "m5.metal") }
        public static var m5Xlarge: Self { .init(rawValue: "m5.xlarge") }
        public static var m5a12Xlarge: Self { .init(rawValue: "m5a.12xlarge") }
        public static var m5a16Xlarge: Self { .init(rawValue: "m5a.16xlarge") }
        public static var m5a24Xlarge: Self { .init(rawValue: "m5a.24xlarge") }
        public static var m5a2Xlarge: Self { .init(rawValue: "m5a.2xlarge") }
        public static var m5a4Xlarge: Self { .init(rawValue: "m5a.4xlarge") }
        public static var m5a8Xlarge: Self { .init(rawValue: "m5a.8xlarge") }
        public static var m5aLarge: Self { .init(rawValue: "m5a.large") }
        public static var m5aXlarge: Self { .init(rawValue: "m5a.xlarge") }
        public static var m5ad12Xlarge: Self { .init(rawValue: "m5ad.12xlarge") }
        public static var m5ad16Xlarge: Self { .init(rawValue: "m5ad.16xlarge") }
        public static var m5ad24Xlarge: Self { .init(rawValue: "m5ad.24xlarge") }
        public static var m5ad2Xlarge: Self { .init(rawValue: "m5ad.2xlarge") }
        public static var m5ad4Xlarge: Self { .init(rawValue: "m5ad.4xlarge") }
        public static var m5ad8Xlarge: Self { .init(rawValue: "m5ad.8xlarge") }
        public static var m5adLarge: Self { .init(rawValue: "m5ad.large") }
        public static var m5adXlarge: Self { .init(rawValue: "m5ad.xlarge") }
        public static var m5d12Xlarge: Self { .init(rawValue: "m5d.12xlarge") }
        public static var m5d16Xlarge: Self { .init(rawValue: "m5d.16xlarge") }
        public static var m5d24Xlarge: Self { .init(rawValue: "m5d.24xlarge") }
        public static var m5d2Xlarge: Self { .init(rawValue: "m5d.2xlarge") }
        public static var m5d4Xlarge: Self { .init(rawValue: "m5d.4xlarge") }
        public static var m5d8Xlarge: Self { .init(rawValue: "m5d.8xlarge") }
        public static var m5dLarge: Self { .init(rawValue: "m5d.large") }
        public static var m5dMetal: Self { .init(rawValue: "m5d.metal") }
        public static var m5dXlarge: Self { .init(rawValue: "m5d.xlarge") }
        public static var m5dn12Xlarge: Self { .init(rawValue: "m5dn.12xlarge") }
        public static var m5dn16Xlarge: Self { .init(rawValue: "m5dn.16xlarge") }
        public static var m5dn24Xlarge: Self { .init(rawValue: "m5dn.24xlarge") }
        public static var m5dn2Xlarge: Self { .init(rawValue: "m5dn.2xlarge") }
        public static var m5dn4Xlarge: Self { .init(rawValue: "m5dn.4xlarge") }
        public static var m5dn8Xlarge: Self { .init(rawValue: "m5dn.8xlarge") }
        public static var m5dnLarge: Self { .init(rawValue: "m5dn.large") }
        public static var m5dnMetal: Self { .init(rawValue: "m5dn.metal") }
        public static var m5dnXlarge: Self { .init(rawValue: "m5dn.xlarge") }
        public static var m5n12Xlarge: Self { .init(rawValue: "m5n.12xlarge") }
        public static var m5n16Xlarge: Self { .init(rawValue: "m5n.16xlarge") }
        public static var m5n24Xlarge: Self { .init(rawValue: "m5n.24xlarge") }
        public static var m5n2Xlarge: Self { .init(rawValue: "m5n.2xlarge") }
        public static var m5n4Xlarge: Self { .init(rawValue: "m5n.4xlarge") }
        public static var m5n8Xlarge: Self { .init(rawValue: "m5n.8xlarge") }
        public static var m5nLarge: Self { .init(rawValue: "m5n.large") }
        public static var m5nMetal: Self { .init(rawValue: "m5n.metal") }
        public static var m5nXlarge: Self { .init(rawValue: "m5n.xlarge") }
        public static var m5zn12Xlarge: Self { .init(rawValue: "m5zn.12xlarge") }
        public static var m5zn2Xlarge: Self { .init(rawValue: "m5zn.2xlarge") }
        public static var m5zn3Xlarge: Self { .init(rawValue: "m5zn.3xlarge") }
        public static var m5zn6Xlarge: Self { .init(rawValue: "m5zn.6xlarge") }
        public static var m5znLarge: Self { .init(rawValue: "m5zn.large") }
        public static var m5znMetal: Self { .init(rawValue: "m5zn.metal") }
        public static var m5znXlarge: Self { .init(rawValue: "m5zn.xlarge") }
        public static var m6g12Xlarge: Self { .init(rawValue: "m6g.12xlarge") }
        public static var m6g16Xlarge: Self { .init(rawValue: "m6g.16xlarge") }
        public static var m6g2Xlarge: Self { .init(rawValue: "m6g.2xlarge") }
        public static var m6g4Xlarge: Self { .init(rawValue: "m6g.4xlarge") }
        public static var m6g8Xlarge: Self { .init(rawValue: "m6g.8xlarge") }
        public static var m6gLarge: Self { .init(rawValue: "m6g.large") }
        public static var m6gMedium: Self { .init(rawValue: "m6g.medium") }
        public static var m6gMetal: Self { .init(rawValue: "m6g.metal") }
        public static var m6gXlarge: Self { .init(rawValue: "m6g.xlarge") }
        public static var m6gd12Xlarge: Self { .init(rawValue: "m6gd.12xlarge") }
        public static var m6gd16Xlarge: Self { .init(rawValue: "m6gd.16xlarge") }
        public static var m6gd2Xlarge: Self { .init(rawValue: "m6gd.2xlarge") }
        public static var m6gd4Xlarge: Self { .init(rawValue: "m6gd.4xlarge") }
        public static var m6gd8Xlarge: Self { .init(rawValue: "m6gd.8xlarge") }
        public static var m6gdLarge: Self { .init(rawValue: "m6gd.large") }
        public static var m6gdMedium: Self { .init(rawValue: "m6gd.medium") }
        public static var m6gdMetal: Self { .init(rawValue: "m6gd.metal") }
        public static var m6gdXlarge: Self { .init(rawValue: "m6gd.xlarge") }
        public static var mac1Metal: Self { .init(rawValue: "mac1.metal") }
        public static var p216Xlarge: Self { .init(rawValue: "p2.16xlarge") }
        public static var p28Xlarge: Self { .init(rawValue: "p2.8xlarge") }
        public static var p2Xlarge: Self { .init(rawValue: "p2.xlarge") }
        public static var p316Xlarge: Self { .init(rawValue: "p3.16xlarge") }
        public static var p32Xlarge: Self { .init(rawValue: "p3.2xlarge") }
        public static var p38Xlarge: Self { .init(rawValue: "p3.8xlarge") }
        public static var p3dn24Xlarge: Self { .init(rawValue: "p3dn.24xlarge") }
        public static var p4d24Xlarge: Self { .init(rawValue: "p4d.24xlarge") }
        public static var r32Xlarge: Self { .init(rawValue: "r3.2xlarge") }
        public static var r34Xlarge: Self { .init(rawValue: "r3.4xlarge") }
        public static var r38Xlarge: Self { .init(rawValue: "r3.8xlarge") }
        public static var r3Large: Self { .init(rawValue: "r3.large") }
        public static var r3Xlarge: Self { .init(rawValue: "r3.xlarge") }
        public static var r416Xlarge: Self { .init(rawValue: "r4.16xlarge") }
        public static var r42Xlarge: Self { .init(rawValue: "r4.2xlarge") }
        public static var r44Xlarge: Self { .init(rawValue: "r4.4xlarge") }
        public static var r48Xlarge: Self { .init(rawValue: "r4.8xlarge") }
        public static var r4Large: Self { .init(rawValue: "r4.large") }
        public static var r4Xlarge: Self { .init(rawValue: "r4.xlarge") }
        public static var r512Xlarge: Self { .init(rawValue: "r5.12xlarge") }
        public static var r516Xlarge: Self { .init(rawValue: "r5.16xlarge") }
        public static var r524Xlarge: Self { .init(rawValue: "r5.24xlarge") }
        public static var r52Xlarge: Self { .init(rawValue: "r5.2xlarge") }
        public static var r54Xlarge: Self { .init(rawValue: "r5.4xlarge") }
        public static var r58Xlarge: Self { .init(rawValue: "r5.8xlarge") }
        public static var r5Large: Self { .init(rawValue: "r5.large") }
        public static var r5Metal: Self { .init(rawValue: "r5.metal") }
        public static var r5Xlarge: Self { .init(rawValue: "r5.xlarge") }
        public static var r5a12Xlarge: Self { .init(rawValue: "r5a.12xlarge") }
        public static var r5a16Xlarge: Self { .init(rawValue: "r5a.16xlarge") }
        public static var r5a24Xlarge: Self { .init(rawValue: "r5a.24xlarge") }
        public static var r5a2Xlarge: Self { .init(rawValue: "r5a.2xlarge") }
        public static var r5a4Xlarge: Self { .init(rawValue: "r5a.4xlarge") }
        public static var r5a8Xlarge: Self { .init(rawValue: "r5a.8xlarge") }
        public static var r5aLarge: Self { .init(rawValue: "r5a.large") }
        public static var r5aXlarge: Self { .init(rawValue: "r5a.xlarge") }
        public static var r5ad12Xlarge: Self { .init(rawValue: "r5ad.12xlarge") }
        public static var r5ad16Xlarge: Self { .init(rawValue: "r5ad.16xlarge") }
        public static var r5ad24Xlarge: Self { .init(rawValue: "r5ad.24xlarge") }
        public static var r5ad2Xlarge: Self { .init(rawValue: "r5ad.2xlarge") }
        public static var r5ad4Xlarge: Self { .init(rawValue: "r5ad.4xlarge") }
        public static var r5ad8Xlarge: Self { .init(rawValue: "r5ad.8xlarge") }
        public static var r5adLarge: Self { .init(rawValue: "r5ad.large") }
        public static var r5adXlarge: Self { .init(rawValue: "r5ad.xlarge") }
        public static var r5b12Xlarge: Self { .init(rawValue: "r5b.12xlarge") }
        public static var r5b16Xlarge: Self { .init(rawValue: "r5b.16xlarge") }
        public static var r5b24Xlarge: Self { .init(rawValue: "r5b.24xlarge") }
        public static var r5b2Xlarge: Self { .init(rawValue: "r5b.2xlarge") }
        public static var r5b4Xlarge: Self { .init(rawValue: "r5b.4xlarge") }
        public static var r5b8Xlarge: Self { .init(rawValue: "r5b.8xlarge") }
        public static var r5bLarge: Self { .init(rawValue: "r5b.large") }
        public static var r5bMetal: Self { .init(rawValue: "r5b.metal") }
        public static var r5bXlarge: Self { .init(rawValue: "r5b.xlarge") }
        public static var r5d12Xlarge: Self { .init(rawValue: "r5d.12xlarge") }
        public static var r5d16Xlarge: Self { .init(rawValue: "r5d.16xlarge") }
        public static var r5d24Xlarge: Self { .init(rawValue: "r5d.24xlarge") }
        public static var r5d2Xlarge: Self { .init(rawValue: "r5d.2xlarge") }
        public static var r5d4Xlarge: Self { .init(rawValue: "r5d.4xlarge") }
        public static var r5d8Xlarge: Self { .init(rawValue: "r5d.8xlarge") }
        public static var r5dLarge: Self { .init(rawValue: "r5d.large") }
        public static var r5dMetal: Self { .init(rawValue: "r5d.metal") }
        public static var r5dXlarge: Self { .init(rawValue: "r5d.xlarge") }
        public static var r5dn12Xlarge: Self { .init(rawValue: "r5dn.12xlarge") }
        public static var r5dn16Xlarge: Self { .init(rawValue: "r5dn.16xlarge") }
        public static var r5dn24Xlarge: Self { .init(rawValue: "r5dn.24xlarge") }
        public static var r5dn2Xlarge: Self { .init(rawValue: "r5dn.2xlarge") }
        public static var r5dn4Xlarge: Self { .init(rawValue: "r5dn.4xlarge") }
        public static var r5dn8Xlarge: Self { .init(rawValue: "r5dn.8xlarge") }
        public static var r5dnLarge: Self { .init(rawValue: "r5dn.large") }
        public static var r5dnMetal: Self { .init(rawValue: "r5dn.metal") }
        public static var r5dnXlarge: Self { .init(rawValue: "r5dn.xlarge") }
        public static var r5n12Xlarge: Self { .init(rawValue: "r5n.12xlarge") }
        public static var r5n16Xlarge: Self { .init(rawValue: "r5n.16xlarge") }
        public static var r5n24Xlarge: Self { .init(rawValue: "r5n.24xlarge") }
        public static var r5n2Xlarge: Self { .init(rawValue: "r5n.2xlarge") }
        public static var r5n4Xlarge: Self { .init(rawValue: "r5n.4xlarge") }
        public static var r5n8Xlarge: Self { .init(rawValue: "r5n.8xlarge") }
        public static var r5nLarge: Self { .init(rawValue: "r5n.large") }
        public static var r5nMetal: Self { .init(rawValue: "r5n.metal") }
        public static var r5nXlarge: Self { .init(rawValue: "r5n.xlarge") }
        public static var r6g12Xlarge: Self { .init(rawValue: "r6g.12xlarge") }
        public static var r6g16Xlarge: Self { .init(rawValue: "r6g.16xlarge") }
        public static var r6g2Xlarge: Self { .init(rawValue: "r6g.2xlarge") }
        public static var r6g4Xlarge: Self { .init(rawValue: "r6g.4xlarge") }
        public static var r6g8Xlarge: Self { .init(rawValue: "r6g.8xlarge") }
        public static var r6gLarge: Self { .init(rawValue: "r6g.large") }
        public static var r6gMedium: Self { .init(rawValue: "r6g.medium") }
        public static var r6gMetal: Self { .init(rawValue: "r6g.metal") }
        public static var r6gXlarge: Self { .init(rawValue: "r6g.xlarge") }
        public static var r6gd12Xlarge: Self { .init(rawValue: "r6gd.12xlarge") }
        public static var r6gd16Xlarge: Self { .init(rawValue: "r6gd.16xlarge") }
        public static var r6gd2Xlarge: Self { .init(rawValue: "r6gd.2xlarge") }
        public static var r6gd4Xlarge: Self { .init(rawValue: "r6gd.4xlarge") }
        public static var r6gd8Xlarge: Self { .init(rawValue: "r6gd.8xlarge") }
        public static var r6gdLarge: Self { .init(rawValue: "r6gd.large") }
        public static var r6gdMedium: Self { .init(rawValue: "r6gd.medium") }
        public static var r6gdMetal: Self { .init(rawValue: "r6gd.metal") }
        public static var r6gdXlarge: Self { .init(rawValue: "r6gd.xlarge") }
        public static var t1Micro: Self { .init(rawValue: "t1.micro") }
        public static var t22Xlarge: Self { .init(rawValue: "t2.2xlarge") }
        public static var t2Large: Self { .init(rawValue: "t2.large") }
        public static var t2Medium: Self { .init(rawValue: "t2.medium") }
        public static var t2Micro: Self { .init(rawValue: "t2.micro") }
        public static var t2Nano: Self { .init(rawValue: "t2.nano") }
        public static var t2Small: Self { .init(rawValue: "t2.small") }
        public static var t2Xlarge: Self { .init(rawValue: "t2.xlarge") }
        public static var t32Xlarge: Self { .init(rawValue: "t3.2xlarge") }
        public static var t3Large: Self { .init(rawValue: "t3.large") }
        public static var t3Medium: Self { .init(rawValue: "t3.medium") }
        public static var t3Micro: Self { .init(rawValue: "t3.micro") }
        public static var t3Nano: Self { .init(rawValue: "t3.nano") }
        public static var t3Small: Self { .init(rawValue: "t3.small") }
        public static var t3Xlarge: Self { .init(rawValue: "t3.xlarge") }
        public static var t3a2Xlarge: Self { .init(rawValue: "t3a.2xlarge") }
        public static var t3aLarge: Self { .init(rawValue: "t3a.large") }
        public static var t3aMedium: Self { .init(rawValue: "t3a.medium") }
        public static var t3aMicro: Self { .init(rawValue: "t3a.micro") }
        public static var t3aNano: Self { .init(rawValue: "t3a.nano") }
        public static var t3aSmall: Self { .init(rawValue: "t3a.small") }
        public static var t3aXlarge: Self { .init(rawValue: "t3a.xlarge") }
        public static var t4g2Xlarge: Self { .init(rawValue: "t4g.2xlarge") }
        public static var t4gLarge: Self { .init(rawValue: "t4g.large") }
        public static var t4gMedium: Self { .init(rawValue: "t4g.medium") }
        public static var t4gMicro: Self { .init(rawValue: "t4g.micro") }
        public static var t4gNano: Self { .init(rawValue: "t4g.nano") }
        public static var t4gSmall: Self { .init(rawValue: "t4g.small") }
        public static var t4gXlarge: Self { .init(rawValue: "t4g.xlarge") }
        public static var u12Tb1112Xlarge: Self { .init(rawValue: "u-12tb1.112xlarge") }
        public static var u12Tb1Metal: Self { .init(rawValue: "u-12tb1.metal") }
        public static var u18Tb1Metal: Self { .init(rawValue: "u-18tb1.metal") }
        public static var u24Tb1Metal: Self { .init(rawValue: "u-24tb1.metal") }
        public static var u6Tb1112Xlarge: Self { .init(rawValue: "u-6tb1.112xlarge") }
        public static var u6Tb156Xlarge: Self { .init(rawValue: "u-6tb1.56xlarge") }
        public static var u6Tb1Metal: Self { .init(rawValue: "u-6tb1.metal") }
        public static var u9Tb1112Xlarge: Self { .init(rawValue: "u-9tb1.112xlarge") }
        public static var u9Tb1Metal: Self { .init(rawValue: "u-9tb1.metal") }
        public static var x116Xlarge: Self { .init(rawValue: "x1.16xlarge") }
        public static var x132Xlarge: Self { .init(rawValue: "x1.32xlarge") }
        public static var x1e16Xlarge: Self { .init(rawValue: "x1e.16xlarge") }
        public static var x1e2Xlarge: Self { .init(rawValue: "x1e.2xlarge") }
        public static var x1e32Xlarge: Self { .init(rawValue: "x1e.32xlarge") }
        public static var x1e4Xlarge: Self { .init(rawValue: "x1e.4xlarge") }
        public static var x1e8Xlarge: Self { .init(rawValue: "x1e.8xlarge") }
        public static var x1eXlarge: Self { .init(rawValue: "x1e.xlarge") }
        public static var x2gd12Xlarge: Self { .init(rawValue: "x2gd.12xlarge") }
        public static var x2gd16Xlarge: Self { .init(rawValue: "x2gd.16xlarge") }
        public static var x2gd2Xlarge: Self { .init(rawValue: "x2gd.2xlarge") }
        public static var x2gd4Xlarge: Self { .init(rawValue: "x2gd.4xlarge") }
        public static var x2gd8Xlarge: Self { .init(rawValue: "x2gd.8xlarge") }
        public static var x2gdLarge: Self { .init(rawValue: "x2gd.large") }
        public static var x2gdMedium: Self { .init(rawValue: "x2gd.medium") }
        public static var x2gdMetal: Self { .init(rawValue: "x2gd.metal") }
        public static var x2gdXlarge: Self { .init(rawValue: "x2gd.xlarge") }
        public static var z1d12Xlarge: Self { .init(rawValue: "z1d.12xlarge") }
        public static var z1d2Xlarge: Self { .init(rawValue: "z1d.2xlarge") }
        public static var z1d3Xlarge: Self { .init(rawValue: "z1d.3xlarge") }
        public static var z1d6Xlarge: Self { .init(rawValue: "z1d.6xlarge") }
        public static var z1dLarge: Self { .init(rawValue: "z1d.large") }
        public static var z1dMetal: Self { .init(rawValue: "z1d.metal") }
        public static var z1dXlarge: Self { .init(rawValue: "z1d.xlarge") }
    }

    public enum InstanceTypeHypervisor: String, CustomStringConvertible, Codable {
        case nitro
        case xen
        public var description: String { return self.rawValue }
    }

    public enum InterfacePermissionType: String, CustomStringConvertible, Codable {
        case eipAssociate = "EIP-ASSOCIATE"
        case instanceAttach = "INSTANCE-ATTACH"
        public var description: String { return self.rawValue }
    }

    public enum InterfaceProtocolType: String, CustomStringConvertible, Codable {
        case gre = "GRE"
        case vlan = "VLAN"
        public var description: String { return self.rawValue }
    }

    public enum Ipv6SupportValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateErrorCode: String, CustomStringConvertible, Codable {
        case launchtemplateiddoesnotexist = "launchTemplateIdDoesNotExist"
        case launchtemplateidmalformed = "launchTemplateIdMalformed"
        case launchtemplatenamedoesnotexist = "launchTemplateNameDoesNotExist"
        case launchtemplatenamemalformed = "launchTemplateNameMalformed"
        case launchtemplateversiondoesnotexist = "launchTemplateVersionDoesNotExist"
        case unexpectederror = "unexpectedError"
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateHttpTokensState: String, CustomStringConvertible, Codable {
        case optional
        case required
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateInstanceMetadataEndpointState: String, CustomStringConvertible, Codable {
        case disabled
        case enabled
        public var description: String { return self.rawValue }
    }

    public enum LaunchTemplateInstanceMetadataOptionsState: String, CustomStringConvertible, Codable {
        case applied
        case pending
        public var description: String { return self.rawValue }
    }

    public enum ListingState: String, CustomStringConvertible, Codable {
        case available
        case cancelled
        case pending
        case sold
        public var description: String { return self.rawValue }
    }

    public enum ListingStatus: String, CustomStringConvertible, Codable {
        case active
        case cancelled
        case closed
        case pending
        public var description: String { return self.rawValue }
    }

    public enum LocalGatewayRouteState: String, CustomStringConvertible, Codable {
        case active
        case blackhole
        case deleted
        case deleting
        case pending
        public var description: String { return self.rawValue }
    }

    public enum LocalGatewayRouteType: String, CustomStringConvertible, Codable {
        case propagated
        case `static`
        public var description: String { return self.rawValue }
    }

    public enum LocationType: String, CustomStringConvertible, Codable {
        case availabilityZone = "availability-zone"
        case availabilityZoneId = "availability-zone-id"
        case region
        public var description: String { return self.rawValue }
    }

    public enum LogDestinationType: String, CustomStringConvertible, Codable {
        case cloudWatchLogs = "cloud-watch-logs"
        case s3
        public var description: String { return self.rawValue }
    }

    public enum MarketType: String, CustomStringConvertible, Codable {
        case spot
        public var description: String { return self.rawValue }
    }

    public enum MembershipType: String, CustomStringConvertible, Codable {
        case igmp
        case `static`
        public var description: String { return self.rawValue }
    }

    public enum ModifyAvailabilityZoneOptInStatus: String, CustomStringConvertible, Codable {
        case notOptedIn = "not-opted-in"
        case optedIn = "opted-in"
        public var description: String { return self.rawValue }
    }

    public enum MonitoringState: String, CustomStringConvertible, Codable {
        case disabled
        case disabling
        case enabled
        case pending
        public var description: String { return self.rawValue }
    }

    public enum MoveStatus: String, CustomStringConvertible, Codable {
        case movingtovpc = "movingToVpc"
        case restoringtoclassic = "restoringToClassic"
        public var description: String { return self.rawValue }
    }

    public enum MulticastSupportValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum NatGatewayState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case failed
        case pending
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceAttribute: String, CustomStringConvertible, Codable {
        case attachment
        case description
        case groupset = "groupSet"
        case sourcedestcheck = "sourceDestCheck"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceCreationType: String, CustomStringConvertible, Codable {
        case branch
        case efa
        case trunk
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfacePermissionStateCode: String, CustomStringConvertible, Codable {
        case granted
        case pending
        case revoked
        case revoking
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceStatus: String, CustomStringConvertible, Codable {
        case associated
        case attaching
        case available
        case detaching
        case inUse = "in-use"
        public var description: String { return self.rawValue }
    }

    public enum NetworkInterfaceType: String, CustomStringConvertible, Codable {
        case efa
        case interface
        case natgateway = "natGateway"
        case trunk
        public var description: String { return self.rawValue }
    }

    public enum OfferingClassType: String, CustomStringConvertible, Codable {
        case convertible
        case standard
        public var description: String { return self.rawValue }
    }

    public enum OfferingTypeValues: String, CustomStringConvertible, Codable {
        case allUpfront = "All Upfront"
        case heavyUtilization = "Heavy Utilization"
        case lightUtilization = "Light Utilization"
        case mediumUtilization = "Medium Utilization"
        case noUpfront = "No Upfront"
        case partialUpfront = "Partial Upfront"
        public var description: String { return self.rawValue }
    }

    public enum OnDemandAllocationStrategy: String, CustomStringConvertible, Codable {
        case lowestprice = "lowestPrice"
        case prioritized
        public var description: String { return self.rawValue }
    }

    public enum OperationType: String, CustomStringConvertible, Codable {
        case add
        case remove
        public var description: String { return self.rawValue }
    }

    public enum PartitionLoadFrequency: String, CustomStringConvertible, Codable {
        case daily
        case monthly
        case none
        case weekly
        public var description: String { return self.rawValue }
    }

    public enum PaymentOption: String, CustomStringConvertible, Codable {
        case allupfront = "AllUpfront"
        case noupfront = "NoUpfront"
        case partialupfront = "PartialUpfront"
        public var description: String { return self.rawValue }
    }

    public enum PermissionGroup: String, CustomStringConvertible, Codable {
        case all
        public var description: String { return self.rawValue }
    }

    public enum PlacementGroupState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case pending
        public var description: String { return self.rawValue }
    }

    public enum PlacementGroupStrategy: String, CustomStringConvertible, Codable {
        case cluster
        case partition
        case spread
        public var description: String { return self.rawValue }
    }

    public enum PlacementStrategy: String, CustomStringConvertible, Codable {
        case cluster
        case partition
        case spread
        public var description: String { return self.rawValue }
    }

    public enum PlatformValues: String, CustomStringConvertible, Codable {
        case windows
        public var description: String { return self.rawValue }
    }

    public enum PrefixListState: String, CustomStringConvertible, Codable {
        case createComplete = "create-complete"
        case createFailed = "create-failed"
        case createInProgress = "create-in-progress"
        case deleteComplete = "delete-complete"
        case deleteFailed = "delete-failed"
        case deleteInProgress = "delete-in-progress"
        case modifyComplete = "modify-complete"
        case modifyFailed = "modify-failed"
        case modifyInProgress = "modify-in-progress"
        case restoreComplete = "restore-complete"
        case restoreFailed = "restore-failed"
        case restoreInProgress = "restore-in-progress"
        public var description: String { return self.rawValue }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case account = "Account"
        case all = "All"
        case organizationunit = "OrganizationUnit"
        case role = "Role"
        case service = "Service"
        case user = "User"
        public var description: String { return self.rawValue }
    }

    public enum ProductCodeValues: String, CustomStringConvertible, Codable {
        case devpay
        case marketplace
        public var description: String { return self.rawValue }
    }

    public enum `Protocol`: String, CustomStringConvertible, Codable {
        case tcp
        case udp
        public var description: String { return self.rawValue }
    }

    public enum ProtocolValue: String, CustomStringConvertible, Codable {
        case gre
        public var description: String { return self.rawValue }
    }

    public enum RIProductDescription: String, CustomStringConvertible, Codable {
        case linuxUnix = "Linux/UNIX"
        case linuxUnixAmazonVpc = "Linux/UNIX (Amazon VPC)"
        case windows = "Windows"
        case windowsAmazonVpc = "Windows (Amazon VPC)"
        public var description: String { return self.rawValue }
    }

    public enum RecurringChargeFrequency: String, CustomStringConvertible, Codable {
        case hourly = "Hourly"
        public var description: String { return self.rawValue }
    }

    public enum ReplaceRootVolumeTaskState: String, CustomStringConvertible, Codable {
        case failed
        case failedDetached = "failed-detached"
        case failing
        case inProgress = "in-progress"
        case pending
        case succeeded
        public var description: String { return self.rawValue }
    }

    public enum ReplacementStrategy: String, CustomStringConvertible, Codable {
        case launch
        public var description: String { return self.rawValue }
    }

    public enum ReportInstanceReasonCodes: String, CustomStringConvertible, Codable {
        case instanceStuckInState = "instance-stuck-in-state"
        case notAcceptingCredentials = "not-accepting-credentials"
        case other
        case passwordNotAvailable = "password-not-available"
        case performanceEbsVolume = "performance-ebs-volume"
        case performanceInstanceStore = "performance-instance-store"
        case performanceNetwork = "performance-network"
        case performanceOther = "performance-other"
        case unresponsive
        public var description: String { return self.rawValue }
    }

    public enum ReportStatusType: String, CustomStringConvertible, Codable {
        case impaired
        case ok
        public var description: String { return self.rawValue }
    }

    public enum ReservationState: String, CustomStringConvertible, Codable {
        case active
        case paymentFailed = "payment-failed"
        case paymentPending = "payment-pending"
        case retired
        public var description: String { return self.rawValue }
    }

    public enum ReservedInstanceState: String, CustomStringConvertible, Codable {
        case active
        case paymentFailed = "payment-failed"
        case paymentPending = "payment-pending"
        case queued
        case queuedDeleted = "queued-deleted"
        case retired
        public var description: String { return self.rawValue }
    }

    public enum ResetFpgaImageAttributeName: String, CustomStringConvertible, Codable {
        case loadpermission = "loadPermission"
        public var description: String { return self.rawValue }
    }

    public enum ResetImageAttributeName: String, CustomStringConvertible, Codable {
        case launchpermission = "launchPermission"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case clientVpnEndpoint = "client-vpn-endpoint"
        case customerGateway = "customer-gateway"
        case dedicatedHost = "dedicated-host"
        case dhcpOptions = "dhcp-options"
        case egressOnlyInternetGateway = "egress-only-internet-gateway"
        case elasticGpu = "elastic-gpu"
        case elasticIp = "elastic-ip"
        case exportImageTask = "export-image-task"
        case exportInstanceTask = "export-instance-task"
        case fleet
        case fpgaImage = "fpga-image"
        case hostReservation = "host-reservation"
        case image
        case importImageTask = "import-image-task"
        case importSnapshotTask = "import-snapshot-task"
        case instance
        case instanceEventWindow = "instance-event-window"
        case internetGateway = "internet-gateway"
        case keyPair = "key-pair"
        case launchTemplate = "launch-template"
        case localGatewayRouteTableVpcAssociation = "local-gateway-route-table-vpc-association"
        case natgateway
        case networkAcl = "network-acl"
        case networkInsightsAnalysis = "network-insights-analysis"
        case networkInsightsPath = "network-insights-path"
        case networkInterface = "network-interface"
        case placementGroup = "placement-group"
        case reservedInstances = "reserved-instances"
        case routeTable = "route-table"
        case securityGroup = "security-group"
        case securityGroupRule = "security-group-rule"
        case snapshot
        case spotFleetRequest = "spot-fleet-request"
        case spotInstancesRequest = "spot-instances-request"
        case subnet
        case trafficMirrorFilter = "traffic-mirror-filter"
        case trafficMirrorSession = "traffic-mirror-session"
        case trafficMirrorTarget = "traffic-mirror-target"
        case transitGateway = "transit-gateway"
        case transitGatewayAttachment = "transit-gateway-attachment"
        case transitGatewayConnectPeer = "transit-gateway-connect-peer"
        case transitGatewayMulticastDomain = "transit-gateway-multicast-domain"
        case transitGatewayRouteTable = "transit-gateway-route-table"
        case volume
        case vpc
        case vpcFlowLog = "vpc-flow-log"
        case vpcPeeringConnection = "vpc-peering-connection"
        case vpnConnection = "vpn-connection"
        case vpnGateway = "vpn-gateway"
        public var description: String { return self.rawValue }
    }

    public enum RootDeviceType: String, CustomStringConvertible, Codable {
        case ebs
        case instanceStore = "instance-store"
        public var description: String { return self.rawValue }
    }

    public enum RouteOrigin: String, CustomStringConvertible, Codable {
        case createroute = "CreateRoute"
        case createroutetable = "CreateRouteTable"
        case enablevgwroutepropagation = "EnableVgwRoutePropagation"
        public var description: String { return self.rawValue }
    }

    public enum RouteState: String, CustomStringConvertible, Codable {
        case active
        case blackhole
        public var description: String { return self.rawValue }
    }

    public enum RouteTableAssociationStateCode: String, CustomStringConvertible, Codable {
        case associated
        case associating
        case disassociated
        case disassociating
        case failed
        public var description: String { return self.rawValue }
    }

    public enum RuleAction: String, CustomStringConvertible, Codable {
        case allow
        case deny
        public var description: String { return self.rawValue }
    }

    public enum SelfServicePortal: String, CustomStringConvertible, Codable {
        case disabled
        case enabled
        public var description: String { return self.rawValue }
    }

    public enum ServiceState: String, CustomStringConvertible, Codable {
        case available = "Available"
        case deleted = "Deleted"
        case deleting = "Deleting"
        case failed = "Failed"
        case pending = "Pending"
        public var description: String { return self.rawValue }
    }

    public enum ServiceType: String, CustomStringConvertible, Codable {
        case gateway = "Gateway"
        case gatewayloadbalancer = "GatewayLoadBalancer"
        case interface = "Interface"
        public var description: String { return self.rawValue }
    }

    public enum ShutdownBehavior: String, CustomStringConvertible, Codable {
        case stop
        case terminate
        public var description: String { return self.rawValue }
    }

    public enum SnapshotAttributeName: String, CustomStringConvertible, Codable {
        case createvolumepermission = "createVolumePermission"
        case productcodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public enum SnapshotState: String, CustomStringConvertible, Codable {
        case completed
        case error
        case pending
        public var description: String { return self.rawValue }
    }

    public enum SpotAllocationStrategy: String, CustomStringConvertible, Codable {
        case capacityOptimized = "capacity-optimized"
        case capacityOptimizedPrioritized = "capacity-optimized-prioritized"
        case diversified
        case lowestPrice = "lowest-price"
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceInterruptionBehavior: String, CustomStringConvertible, Codable {
        case hibernate
        case stop
        case terminate
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceState: String, CustomStringConvertible, Codable {
        case active
        case cancelled
        case closed
        case failed
        case open
        public var description: String { return self.rawValue }
    }

    public enum SpotInstanceType: String, CustomStringConvertible, Codable {
        case oneTime = "one-time"
        case persistent
        public var description: String { return self.rawValue }
    }

    public enum State: String, CustomStringConvertible, Codable {
        case available = "Available"
        case deleted = "Deleted"
        case deleting = "Deleting"
        case expired = "Expired"
        case failed = "Failed"
        case pending = "Pending"
        case pendingacceptance = "PendingAcceptance"
        case rejected = "Rejected"
        public var description: String { return self.rawValue }
    }

    public enum StaticSourcesSupportValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case inclassic = "InClassic"
        case invpc = "InVpc"
        case moveinprogress = "MoveInProgress"
        public var description: String { return self.rawValue }
    }

    public enum StatusName: String, CustomStringConvertible, Codable {
        case reachability
        public var description: String { return self.rawValue }
    }

    public enum StatusType: String, CustomStringConvertible, Codable {
        case failed
        case initializing
        case insufficientData = "insufficient-data"
        case passed
        public var description: String { return self.rawValue }
    }

    public enum SubnetCidrBlockStateCode: String, CustomStringConvertible, Codable {
        case associated
        case associating
        case disassociated
        case disassociating
        case failed
        case failing
        public var description: String { return self.rawValue }
    }

    public enum SubnetState: String, CustomStringConvertible, Codable {
        case available
        case pending
        public var description: String { return self.rawValue }
    }

    public enum SummaryStatus: String, CustomStringConvertible, Codable {
        case impaired
        case initializing
        case insufficientData = "insufficient-data"
        case notApplicable = "not-applicable"
        case ok
        public var description: String { return self.rawValue }
    }

    public enum TelemetryStatus: String, CustomStringConvertible, Codable {
        case down = "DOWN"
        case up = "UP"
        public var description: String { return self.rawValue }
    }

    public enum Tenancy: String, CustomStringConvertible, Codable {
        case dedicated
        case `default`
        case host
        public var description: String { return self.rawValue }
    }

    public enum TrafficDirection: String, CustomStringConvertible, Codable {
        case egress
        case ingress
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorFilterRuleField: String, CustomStringConvertible, Codable {
        case description
        case destinationPortRange = "destination-port-range"
        case `protocol`
        case sourcePortRange = "source-port-range"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorNetworkService: String, CustomStringConvertible, Codable {
        case amazonDns = "amazon-dns"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorRuleAction: String, CustomStringConvertible, Codable {
        case accept
        case reject
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorSessionField: String, CustomStringConvertible, Codable {
        case description
        case packetLength = "packet-length"
        case virtualNetworkId = "virtual-network-id"
        public var description: String { return self.rawValue }
    }

    public enum TrafficMirrorTargetType: String, CustomStringConvertible, Codable {
        case networkInterface = "network-interface"
        case networkLoadBalancer = "network-load-balancer"
        public var description: String { return self.rawValue }
    }

    public enum TrafficType: String, CustomStringConvertible, Codable {
        case accept = "ACCEPT"
        case all = "ALL"
        case reject = "REJECT"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAssociationState: String, CustomStringConvertible, Codable {
        case associated
        case associating
        case disassociated
        case disassociating
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAttachmentResourceType: String, CustomStringConvertible, Codable {
        case connect
        case directConnectGateway = "direct-connect-gateway"
        case peering
        case tgwPeering = "tgw-peering"
        case vpc
        case vpn
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayAttachmentState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case failed
        case failing
        case initiating
        case initiatingrequest = "initiatingRequest"
        case modifying
        case pending
        case pendingacceptance = "pendingAcceptance"
        case rejected
        case rejecting
        case rollingback = "rollingBack"
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayConnectPeerState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case pending
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayMulitcastDomainAssociationState: String, CustomStringConvertible, Codable {
        case associated
        case associating
        case disassociated
        case disassociating
        case failed
        case pendingacceptance = "pendingAcceptance"
        case rejected
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayMulticastDomainState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case pending
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayPrefixListReferenceState: String, CustomStringConvertible, Codable {
        case available
        case deleting
        case modifying
        case pending
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayPropagationState: String, CustomStringConvertible, Codable {
        case disabled
        case disabling
        case enabled
        case enabling
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteState: String, CustomStringConvertible, Codable {
        case active
        case blackhole
        case deleted
        case deleting
        case pending
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteTableState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case pending
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayRouteType: String, CustomStringConvertible, Codable {
        case propagated
        case `static`
        public var description: String { return self.rawValue }
    }

    public enum TransitGatewayState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case modifying
        case pending
        public var description: String { return self.rawValue }
    }

    public enum TransportProtocol: String, CustomStringConvertible, Codable {
        case tcp
        case udp
        public var description: String { return self.rawValue }
    }

    public enum TunnelInsideIpVersion: String, CustomStringConvertible, Codable {
        case ipv4
        case ipv6
        public var description: String { return self.rawValue }
    }

    public enum UnlimitedSupportedInstanceFamily: String, CustomStringConvertible, Codable {
        case t2
        case t3
        case t3a
        case t4g
        public var description: String { return self.rawValue }
    }

    public enum UnsuccessfulInstanceCreditSpecificationErrorCode: String, CustomStringConvertible, Codable {
        case incorrectinstancestate = "IncorrectInstanceState"
        case instancecreditspecificationNotsupported = "InstanceCreditSpecification.NotSupported"
        case invalidinstanceidMalformed = "InvalidInstanceID.Malformed"
        case invalidinstanceidNotfound = "InvalidInstanceID.NotFound"
        public var description: String { return self.rawValue }
    }

    public enum UsageClassType: String, CustomStringConvertible, Codable {
        case onDemand = "on-demand"
        case spot
        public var description: String { return self.rawValue }
    }

    public enum VirtualizationType: String, CustomStringConvertible, Codable {
        case hvm
        case paravirtual
        public var description: String { return self.rawValue }
    }

    public enum VolumeAttachmentState: String, CustomStringConvertible, Codable {
        case attached
        case attaching
        case busy
        case detached
        case detaching
        public var description: String { return self.rawValue }
    }

    public enum VolumeAttributeName: String, CustomStringConvertible, Codable {
        case autoenableio = "autoEnableIO"
        case productcodes = "productCodes"
        public var description: String { return self.rawValue }
    }

    public enum VolumeModificationState: String, CustomStringConvertible, Codable {
        case completed
        case failed
        case modifying
        case optimizing
        public var description: String { return self.rawValue }
    }

    public enum VolumeState: String, CustomStringConvertible, Codable {
        case available
        case creating
        case deleted
        case deleting
        case error
        case inUse = "in-use"
        public var description: String { return self.rawValue }
    }

    public enum VolumeStatusInfoStatus: String, CustomStringConvertible, Codable {
        case impaired
        case insufficientData = "insufficient-data"
        case ok
        public var description: String { return self.rawValue }
    }

    public enum VolumeStatusName: String, CustomStringConvertible, Codable {
        case ioEnabled = "io-enabled"
        case ioPerformance = "io-performance"
        public var description: String { return self.rawValue }
    }

    public enum VolumeType: String, CustomStringConvertible, Codable {
        case gp2
        case gp3
        case io1
        case io2
        case sc1
        case st1
        case standard
        public var description: String { return self.rawValue }
    }

    public enum VpcAttributeName: String, CustomStringConvertible, Codable {
        case enablednshostnames = "enableDnsHostnames"
        case enablednssupport = "enableDnsSupport"
        public var description: String { return self.rawValue }
    }

    public enum VpcCidrBlockStateCode: String, CustomStringConvertible, Codable {
        case associated
        case associating
        case disassociated
        case disassociating
        case failed
        case failing
        public var description: String { return self.rawValue }
    }

    public enum VpcEndpointType: String, CustomStringConvertible, Codable {
        case gateway = "Gateway"
        case gatewayloadbalancer = "GatewayLoadBalancer"
        case interface = "Interface"
        public var description: String { return self.rawValue }
    }

    public enum VpcPeeringConnectionStateReasonCode: String, CustomStringConvertible, Codable {
        case active
        case deleted
        case deleting
        case expired
        case failed
        case initiatingRequest = "initiating-request"
        case pendingAcceptance = "pending-acceptance"
        case provisioning
        case rejected
        public var description: String { return self.rawValue }
    }

    public enum VpcState: String, CustomStringConvertible, Codable {
        case available
        case pending
        public var description: String { return self.rawValue }
    }

    public enum VpcTenancy: String, CustomStringConvertible, Codable {
        case `default`
        public var description: String { return self.rawValue }
    }

    public enum VpnEcmpSupportValue: String, CustomStringConvertible, Codable {
        case disable
        case enable
        public var description: String { return self.rawValue }
    }

    public enum VpnProtocol: String, CustomStringConvertible, Codable {
        case openvpn
        public var description: String { return self.rawValue }
    }

    public enum VpnState: String, CustomStringConvertible, Codable {
        case available
        case deleted
        case deleting
        case pending
        public var description: String { return self.rawValue }
    }

    public enum VpnStaticRouteSource: String, CustomStringConvertible, Codable {
        case `static` = "Static"
        public var description: String { return self.rawValue }
    }

    public enum WeekDay: String, CustomStringConvertible, Codable {
        case friday
        case monday
        case saturday
        case sunday
        case thursday
        case tuesday
        case wednesday
        public var description: String { return self.rawValue }
    }

    public enum Scope: String, CustomStringConvertible, Codable {
        case availabilityZone = "Availability Zone"
        case region = "Region"
        public var description: String { return self.rawValue }
    }

    // MARK: Shapes

    public struct AcceptReservedInstancesExchangeQuoteRequest: AWSEncodableShape {
        public struct _ReservedInstanceIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstanceId" }
        public struct _TargetConfigurationsEncoding: ArrayCoderProperties { public static let member = "TargetConfigurationRequest" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.
        @CustomCoding<ArrayCoder<_ReservedInstanceIdsEncoding, String>>
        public var reservedInstanceIds: [String]
        /// The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
        @OptionalCustomCoding<ArrayCoder<_TargetConfigurationsEncoding, TargetConfigurationRequest>>
        public var targetConfigurations: [TargetConfigurationRequest]?

        public init(dryRun: Bool? = nil, reservedInstanceIds: [String], targetConfigurations: [TargetConfigurationRequest]? = nil) {
            self.dryRun = dryRun
            self.reservedInstanceIds = reservedInstanceIds
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case reservedInstanceIds = "ReservedInstanceId"
            case targetConfigurations = "TargetConfiguration"
        }
    }

    public struct AcceptReservedInstancesExchangeQuoteResult: AWSDecodableShape {
        /// The ID of the successful exchange.
        public let exchangeId: String?

        public init(exchangeId: String? = nil) {
            self.exchangeId = exchangeId
        }

        private enum CodingKeys: String, CodingKey {
            case exchangeId
        }
    }

    public struct AcceptTransitGatewayMulticastDomainAssociationsRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets to associate with the transit gateway multicast domain.
        @OptionalCustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct AcceptTransitGatewayMulticastDomainAssociationsResult: AWSDecodableShape {
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations
        }
    }

    public struct AcceptTransitGatewayPeeringAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct AcceptTransitGatewayPeeringAttachmentResult: AWSDecodableShape {
        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment
        }
    }

    public struct AcceptTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct AcceptTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// The VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment
        }
    }

    public struct AcceptVpcEndpointConnectionsRequest: AWSEncodableShape {
        public struct _VpcEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC endpoint service.
        public let serviceId: String
        /// The IDs of one or more interface VPC endpoints.
        @CustomCoding<ArrayCoder<_VpcEndpointIdsEncoding, String>>
        public var vpcEndpointIds: [String]

        public init(dryRun: Bool? = nil, serviceId: String, vpcEndpointIds: [String]) {
            self.dryRun = dryRun
            self.serviceId = serviceId
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct AcceptVpcEndpointConnectionsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the interface endpoints that were not accepted, if applicable.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful
        }
    }

    public struct AcceptVpcPeeringConnectionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection. You must specify this parameter in the request.
        public let vpcPeeringConnectionId: String?

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String? = nil) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpcPeeringConnectionId
        }
    }

    public struct AcceptVpcPeeringConnectionResult: AWSDecodableShape {
        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection
        }
    }

    public struct AccountAttribute: AWSDecodableShape {
        public struct _AttributeValuesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of the account attribute.
        public let attributeName: String?
        /// The values for the account attribute.
        @OptionalCustomCoding<ArrayCoder<_AttributeValuesEncoding, AccountAttributeValue>>
        public var attributeValues: [AccountAttributeValue]?

        public init(attributeName: String? = nil, attributeValues: [AccountAttributeValue]? = nil) {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName
            case attributeValues = "attributeValueSet"
        }
    }

    public struct AccountAttributeValue: AWSDecodableShape {
        /// The value of the attribute.
        public let attributeValue: String?

        public init(attributeValue: String? = nil) {
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValue
        }
    }

    public struct ActiveInstance: AWSDecodableShape {
        /// The health status of the instance. If the status of either the instance status check or the system status check is impaired, the health status of the instance is unhealthy. Otherwise, the health status is healthy.
        public let instanceHealth: InstanceHealthStatus?
        /// The ID of the instance.
        public let instanceId: String?
        /// The instance type.
        public let instanceType: String?
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?

        public init(instanceHealth: InstanceHealthStatus? = nil, instanceId: String? = nil, instanceType: String? = nil, spotInstanceRequestId: String? = nil) {
            self.instanceHealth = instanceHealth
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.spotInstanceRequestId = spotInstanceRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceHealth
            case instanceId
            case instanceType
            case spotInstanceRequestId
        }
    }

    public struct AddPrefixListEntry: AWSEncodableShape {
        /// The CIDR block.
        public let cidr: String
        /// A description for the entry. Constraints: Up to 255 characters in length.
        public let description: String?

        public init(cidr: String, description: String? = nil) {
            self.cidr = cidr
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case description = "Description"
        }
    }

    public struct Address: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID representing the allocation of the address for use with EC2-VPC.
        public let allocationId: String?
        /// The ID representing the association of the address with an instance in a VPC.
        public let associationId: String?
        /// The carrier IP address associated. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance).
        public let carrierIp: String?
        /// The customer-owned IP address.
        public let customerOwnedIp: String?
        /// The ID of the customer-owned address pool.
        public let customerOwnedIpv4Pool: String?
        /// Indicates whether this Elastic IP address is for use with instances in EC2-Classic (standard) or instances in a VPC (vpc).
        public let domain: DomainType?
        /// The ID of the instance that the address is associated with (if any).
        public let instanceId: String?
        /// The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses.
        public let networkBorderGroup: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the account that owns the network interface.
        public let networkInterfaceOwnerId: String?
        /// The private IP address associated with the Elastic IP address.
        public let privateIpAddress: String?
        /// The Elastic IP address.
        public let publicIp: String?
        /// The ID of an address pool.
        public let publicIpv4Pool: String?
        /// Any tags assigned to the Elastic IP address.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(allocationId: String? = nil, associationId: String? = nil, carrierIp: String? = nil, customerOwnedIp: String? = nil, customerOwnedIpv4Pool: String? = nil, domain: DomainType? = nil, instanceId: String? = nil, networkBorderGroup: String? = nil, networkInterfaceId: String? = nil, networkInterfaceOwnerId: String? = nil, privateIpAddress: String? = nil, publicIp: String? = nil, publicIpv4Pool: String? = nil, tags: [Tag]? = nil) {
            self.allocationId = allocationId
            self.associationId = associationId
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.domain = domain
            self.instanceId = instanceId
            self.networkBorderGroup = networkBorderGroup
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfaceOwnerId = networkInterfaceOwnerId
            self.privateIpAddress = privateIpAddress
            self.publicIp = publicIp
            self.publicIpv4Pool = publicIpv4Pool
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId
            case associationId
            case carrierIp
            case customerOwnedIp
            case customerOwnedIpv4Pool
            case domain
            case instanceId
            case networkBorderGroup
            case networkInterfaceId
            case networkInterfaceOwnerId
            case privateIpAddress
            case publicIp
            case publicIpv4Pool
            case tags = "tagSet"
        }
    }

    public struct AddressAttribute: AWSDecodableShape {
        /// [EC2-VPC] The allocation ID.
        public let allocationId: String?
        /// The pointer (PTR) record for the IP address.
        public let ptrRecord: String?
        /// The updated PTR record for the IP address.
        public let ptrRecordUpdate: PtrUpdateStatus?
        /// The public IP address.
        public let publicIp: String?

        public init(allocationId: String? = nil, ptrRecord: String? = nil, ptrRecordUpdate: PtrUpdateStatus? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.ptrRecord = ptrRecord
            self.ptrRecordUpdate = ptrRecordUpdate
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId
            case ptrRecord
            case ptrRecordUpdate
            case publicIp
        }
    }

    public struct AdvertiseByoipCidrRequest: AWSEncodableShape {
        /// The address range, in CIDR notation. This must be the exact range that you provisioned. You can't advertise only a portion of the provisioned range.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct AdvertiseByoipCidrResult: AWSDecodableShape {
        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr
        }
    }

    public struct AllocateAddressRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.
        public let address: String?
        /// The ID of a customer-owned address pool. Use this parameter to let Amazon EC2 select an address from the address pool. Alternatively, specify a specific address from the address pool.
        public let customerOwnedIpv4Pool: String?
        /// Indicates whether the Elastic IP address is for use with instances in a VPC or instances in EC2-Classic. Default: If the Region supports EC2-Classic, the default is standard. Otherwise, the default is vpc.
        public let domain: DomainType?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        ///  A unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. Use this parameter to limit the IP address to this location. IP addresses cannot move between network border groups. Use DescribeAvailabilityZones to view the network border groups.  You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an InvalidParameterCombination error. For more information, see Error Codes.
        public let networkBorderGroup: String?
        /// The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the Address parameter instead.
        public let publicIpv4Pool: String?
        /// The tags to assign to the Elastic IP address.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(address: String? = nil, customerOwnedIpv4Pool: String? = nil, domain: DomainType? = nil, dryRun: Bool? = nil, networkBorderGroup: String? = nil, publicIpv4Pool: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.address = address
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.domain = domain
            self.dryRun = dryRun
            self.networkBorderGroup = networkBorderGroup
            self.publicIpv4Pool = publicIpv4Pool
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case customerOwnedIpv4Pool = "CustomerOwnedIpv4Pool"
            case domain = "Domain"
            case dryRun
            case networkBorderGroup = "NetworkBorderGroup"
            case publicIpv4Pool = "PublicIpv4Pool"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct AllocateAddressResult: AWSDecodableShape {
        /// [EC2-VPC] The ID that Amazon Web Services assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
        public let allocationId: String?
        /// The carrier IP address. This option is only available for network interfaces which reside in a subnet in a Wavelength Zone (for example an EC2 instance).
        public let carrierIp: String?
        /// The customer-owned IP address.
        public let customerOwnedIp: String?
        /// The ID of the customer-owned address pool.
        public let customerOwnedIpv4Pool: String?
        /// Indicates whether the Elastic IP address is for use with instances in a VPC (vpc) or instances in EC2-Classic (standard).
        public let domain: DomainType?
        /// The set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses.
        public let networkBorderGroup: String?
        /// The Elastic IP address.
        public let publicIp: String?
        /// The ID of an address pool.
        public let publicIpv4Pool: String?

        public init(allocationId: String? = nil, carrierIp: String? = nil, customerOwnedIp: String? = nil, customerOwnedIpv4Pool: String? = nil, domain: DomainType? = nil, networkBorderGroup: String? = nil, publicIp: String? = nil, publicIpv4Pool: String? = nil) {
            self.allocationId = allocationId
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.domain = domain
            self.networkBorderGroup = networkBorderGroup
            self.publicIp = publicIp
            self.publicIpv4Pool = publicIpv4Pool
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId
            case carrierIp
            case customerOwnedIp
            case customerOwnedIpv4Pool
            case domain
            case networkBorderGroup
            case publicIp
            case publicIpv4Pool
        }
    }

    public struct AllocateHostsRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. For more information, see  Understanding auto-placement and affinity in the Amazon EC2 User Guide. Default: on
        public let autoPlacement: AutoPlacement?
        /// The Availability Zone in which to allocate the Dedicated Host.
        public let availabilityZone: String
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default. For more information, see  Host recovery in the Amazon EC2 User Guide. Default: off
        public let hostRecovery: HostRecovery?
        /// Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family. If you want the Dedicated Hosts to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request.
        public let instanceFamily: String?
        /// Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only. If you want the Dedicated Hosts to support multiple instance types in a specific instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request.
        public let instanceType: String?
        /// The number of Dedicated Hosts to allocate to your account with these parameters.
        public let quantity: Int
        /// The tags to apply to the Dedicated Host during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(autoPlacement: AutoPlacement? = nil, availabilityZone: String, clientToken: String? = nil, hostRecovery: HostRecovery? = nil, instanceFamily: String? = nil, instanceType: String? = nil, quantity: Int, tagSpecifications: [TagSpecification]? = nil) {
            self.autoPlacement = autoPlacement
            self.availabilityZone = availabilityZone
            self.clientToken = clientToken
            self.hostRecovery = hostRecovery
            self.instanceFamily = instanceFamily
            self.instanceType = instanceType
            self.quantity = quantity
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case autoPlacement
            case availabilityZone
            case clientToken
            case hostRecovery = "HostRecovery"
            case instanceFamily = "InstanceFamily"
            case instanceType
            case quantity
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct AllocateHostsResult: AWSDecodableShape {
        public struct _HostIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the allocated Dedicated Host. This is used to launch an instance onto a specific host.
        @OptionalCustomCoding<ArrayCoder<_HostIdsEncoding, String>>
        public var hostIds: [String]?

        public init(hostIds: [String]? = nil) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostIdSet"
        }
    }

    public struct AllowedPrincipal: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the principal.
        public let principal: String?
        /// The type of principal.
        public let principalType: PrincipalType?

        public init(principal: String? = nil, principalType: PrincipalType? = nil) {
            self.principal = principal
            self.principalType = principalType
        }

        private enum CodingKeys: String, CodingKey {
            case principal
            case principalType
        }
    }

    public struct AlternatePathHint: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the component.
        public let componentArn: String?
        /// The ID of the component.
        public let componentId: String?

        public init(componentArn: String? = nil, componentId: String? = nil) {
            self.componentArn = componentArn
            self.componentId = componentId
        }

        private enum CodingKeys: String, CodingKey {
            case componentArn
            case componentId
        }
    }

    public struct AnalysisAclRule: AWSDecodableShape {
        /// The IPv4 address range, in CIDR notation.
        public let cidr: String?
        /// Indicates whether the rule is an outbound rule.
        public let egress: Bool?
        /// The range of ports.
        public let portRange: PortRange?
        /// The protocol.
        public let `protocol`: String?
        /// Indicates whether to allow or deny traffic that matches the rule.
        public let ruleAction: String?
        /// The rule number.
        public let ruleNumber: Int?

        public init(cidr: String? = nil, egress: Bool? = nil, portRange: PortRange? = nil, protocol: String? = nil, ruleAction: String? = nil, ruleNumber: Int? = nil) {
            self.cidr = cidr
            self.egress = egress
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidr
            case egress
            case portRange
            case `protocol`
            case ruleAction
            case ruleNumber
        }
    }

    public struct AnalysisComponent: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the component.
        public let arn: String?
        /// The ID of the component.
        public let id: String?

        public init(arn: String? = nil, id: String? = nil) {
            self.arn = arn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case id
        }
    }

    public struct AnalysisLoadBalancerListener: AWSDecodableShape {
        /// [Classic Load Balancers] The back-end port for the listener.
        public let instancePort: Int?
        /// The port on which the load balancer is listening.
        public let loadBalancerPort: Int?

        public init(instancePort: Int? = nil, loadBalancerPort: Int? = nil) {
            self.instancePort = instancePort
            self.loadBalancerPort = loadBalancerPort
        }

        private enum CodingKeys: String, CodingKey {
            case instancePort
            case loadBalancerPort
        }
    }

    public struct AnalysisLoadBalancerTarget: AWSDecodableShape {
        /// The IP address.
        public let address: String?
        /// The Availability Zone.
        public let availabilityZone: String?
        /// Information about the instance.
        public let instance: AnalysisComponent?
        /// The port on which the target is listening.
        public let port: Int?

        public init(address: String? = nil, availabilityZone: String? = nil, instance: AnalysisComponent? = nil, port: Int? = nil) {
            self.address = address
            self.availabilityZone = availabilityZone
            self.instance = instance
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case address
            case availabilityZone
            case instance
            case port
        }
    }

    public struct AnalysisPacketHeader: AWSDecodableShape {
        public struct _DestinationAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DestinationPortRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourceAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SourcePortRangesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The destination addresses.
        @OptionalCustomCoding<ArrayCoder<_DestinationAddressesEncoding, String>>
        public var destinationAddresses: [String]?
        /// The destination port ranges.
        @OptionalCustomCoding<ArrayCoder<_DestinationPortRangesEncoding, PortRange>>
        public var destinationPortRanges: [PortRange]?
        /// The protocol.
        public let `protocol`: String?
        /// The source addresses.
        @OptionalCustomCoding<ArrayCoder<_SourceAddressesEncoding, String>>
        public var sourceAddresses: [String]?
        /// The source port ranges.
        @OptionalCustomCoding<ArrayCoder<_SourcePortRangesEncoding, PortRange>>
        public var sourcePortRanges: [PortRange]?

        public init(destinationAddresses: [String]? = nil, destinationPortRanges: [PortRange]? = nil, protocol: String? = nil, sourceAddresses: [String]? = nil, sourcePortRanges: [PortRange]? = nil) {
            self.destinationAddresses = destinationAddresses
            self.destinationPortRanges = destinationPortRanges
            self.`protocol` = `protocol`
            self.sourceAddresses = sourceAddresses
            self.sourcePortRanges = sourcePortRanges
        }

        private enum CodingKeys: String, CodingKey {
            case destinationAddresses = "destinationAddressSet"
            case destinationPortRanges = "destinationPortRangeSet"
            case `protocol`
            case sourceAddresses = "sourceAddressSet"
            case sourcePortRanges = "sourcePortRangeSet"
        }
    }

    public struct AnalysisRouteTableRoute: AWSDecodableShape {
        /// The destination IPv4 address, in CIDR notation.
        public let destinationCidr: String?
        /// The prefix of the AWS service.
        public let destinationPrefixListId: String?
        /// The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of the gateway, such as an internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The ID of the instance, such as a NAT instance.
        public let instanceId: String?
        /// The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// Describes how the route was created. The following are possible values:    CreateRouteTable - The route was automatically created when the route table was created.    CreateRoute - The route was manually added to the route table.    EnableVgwRoutePropagation - The route was propagated by route propagation.
        public let origin: String?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(destinationCidr: String? = nil, destinationPrefixListId: String? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, origin: String? = nil, transitGatewayId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.destinationCidr = destinationCidr
            self.destinationPrefixListId = destinationPrefixListId
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.origin = origin
            self.transitGatewayId = transitGatewayId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidr
            case destinationPrefixListId
            case egressOnlyInternetGatewayId
            case gatewayId
            case instanceId
            case natGatewayId
            case networkInterfaceId
            case origin
            case transitGatewayId
            case vpcPeeringConnectionId
        }
    }

    public struct AnalysisSecurityGroupRule: AWSDecodableShape {
        /// The IPv4 address range, in CIDR notation.
        public let cidr: String?
        /// The direction. The following are possible values:   egress   ingress
        public let direction: String?
        /// The port range.
        public let portRange: PortRange?
        /// The prefix list ID.
        public let prefixListId: String?
        /// The protocol name.
        public let `protocol`: String?
        /// The security group ID.
        public let securityGroupId: String?

        public init(cidr: String? = nil, direction: String? = nil, portRange: PortRange? = nil, prefixListId: String? = nil, protocol: String? = nil, securityGroupId: String? = nil) {
            self.cidr = cidr
            self.direction = direction
            self.portRange = portRange
            self.prefixListId = prefixListId
            self.`protocol` = `protocol`
            self.securityGroupId = securityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case cidr
            case direction
            case portRange
            case prefixListId
            case `protocol`
            case securityGroupId
        }
    }

    public struct ApplySecurityGroupsToClientVpnTargetNetworkRequest: AWSEncodableShape {
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the security groups to apply to the associated target network. Up to 5 security groups can be applied to an associated target network.
        @CustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]
        /// The ID of the VPC in which the associated target network is located.
        public let vpcId: String

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil, securityGroupIds: [String], vpcId: String) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.securityGroupIds = securityGroupIds
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case securityGroupIds = "SecurityGroupId"
            case vpcId = "VpcId"
        }
    }

    public struct ApplySecurityGroupsToClientVpnTargetNetworkResult: AWSDecodableShape {
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the applied security groups.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?

        public init(securityGroupIds: [String]? = nil) {
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupIds
        }
    }

    public struct AssignIpv6AddressesRequest: AWSEncodableShape {
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The number of additional IPv6 addresses to assign to the network interface. The specified number of IPv6 addresses are assigned in addition to the existing IPv6 addresses that are already assigned to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
        public let ipv6AddressCount: Int?
        /// One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.
        @OptionalCustomCoding<ArrayCoder<_Ipv6AddressesEncoding, String>>
        public var ipv6Addresses: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(ipv6AddressCount: Int? = nil, ipv6Addresses: [String]? = nil, networkInterfaceId: String) {
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6AddressCount
            case ipv6Addresses
            case networkInterfaceId
        }
    }

    public struct AssignIpv6AddressesResult: AWSDecodableShape {
        public struct _AssignedIpv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The new IPv6 addresses assigned to the network interface. Existing IPv6 addresses that were assigned to the network interface before the request are not included.
        @OptionalCustomCoding<ArrayCoder<_AssignedIpv6AddressesEncoding, String>>
        public var assignedIpv6Addresses: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(assignedIpv6Addresses: [String]? = nil, networkInterfaceId: String? = nil) {
            self.assignedIpv6Addresses = assignedIpv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case assignedIpv6Addresses
            case networkInterfaceId
        }
    }

    public struct AssignPrivateIpAddressesRequest: AWSEncodableShape {
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "PrivateIpAddress" }

        /// Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
        public let allowReassignment: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses. If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.
        @OptionalCustomCoding<ArrayCoder<_PrivateIpAddressesEncoding, String>>
        public var privateIpAddresses: [String]?
        /// The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
        public let secondaryPrivateIpAddressCount: Int?

        public init(allowReassignment: Bool? = nil, networkInterfaceId: String, privateIpAddresses: [String]? = nil, secondaryPrivateIpAddressCount: Int? = nil) {
            self.allowReassignment = allowReassignment
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case allowReassignment
            case networkInterfaceId
            case privateIpAddresses = "privateIpAddress"
            case secondaryPrivateIpAddressCount
        }
    }

    public struct AssignPrivateIpAddressesResult: AWSDecodableShape {
        public struct _AssignedPrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The private IP addresses assigned to the network interface.
        @OptionalCustomCoding<ArrayCoder<_AssignedPrivateIpAddressesEncoding, AssignedPrivateIpAddress>>
        public var assignedPrivateIpAddresses: [AssignedPrivateIpAddress]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?

        public init(assignedPrivateIpAddresses: [AssignedPrivateIpAddress]? = nil, networkInterfaceId: String? = nil) {
            self.assignedPrivateIpAddresses = assignedPrivateIpAddresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case assignedPrivateIpAddresses = "assignedPrivateIpAddressesSet"
            case networkInterfaceId
        }
    }

    public struct AssignedPrivateIpAddress: AWSDecodableShape {
        /// The private IP address assigned to the network interface.
        public let privateIpAddress: String?

        public init(privateIpAddress: String? = nil) {
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress
        }
    }

    public struct AssociateAddressRequest: AWSEncodableShape {
        /// [EC2-VPC] The allocation ID. This is required for EC2-VPC.
        public let allocationId: String?
        /// [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.
        public let allowReassociation: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance. The instance must have exactly one attached network interface. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. For EC2-Classic, you must specify an instance ID and the instance must be in the running state.
        public let instanceId: String?
        /// [EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both.
        public let networkInterfaceId: String?
        /// [EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
        public let privateIpAddress: String?
        /// [EC2-Classic] The Elastic IP address to associate with the instance. This is required for EC2-Classic.
        public let publicIp: String?

        public init(allocationId: String? = nil, allowReassociation: Bool? = nil, dryRun: Bool? = nil, instanceId: String? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.allowReassociation = allowReassociation
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case allowReassociation
            case dryRun
            case instanceId = "InstanceId"
            case networkInterfaceId
            case privateIpAddress
            case publicIp = "PublicIp"
        }
    }

    public struct AssociateAddressResult: AWSDecodableShape {
        /// [EC2-VPC] The ID that represents the association of the Elastic IP address with an instance.
        public let associationId: String?

        public init(associationId: String? = nil) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
        }
    }

    public struct AssociateClientVpnTargetNetworkRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet to associate with the Client VPN endpoint.
        public let subnetId: String

        public init(clientToken: String? = AssociateClientVpnTargetNetworkRequest.idempotencyToken(), clientVpnEndpointId: String, dryRun: Bool? = nil, subnetId: String) {
            self.clientToken = clientToken
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case subnetId = "SubnetId"
        }
    }

    public struct AssociateClientVpnTargetNetworkResult: AWSDecodableShape {
        /// The unique ID of the target network association.
        public let associationId: String?
        /// The current state of the target network association.
        public let status: AssociationStatus?

        public init(associationId: String? = nil, status: AssociationStatus? = nil) {
            self.associationId = associationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case status
        }
    }

    public struct AssociateDhcpOptionsRequest: AWSEncodableShape {
        /// The ID of the DHCP options set, or default to associate no DHCP options with the VPC.
        public let dhcpOptionsId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dhcpOptionsId: String, dryRun: Bool? = nil, vpcId: String) {
            self.dhcpOptionsId = dhcpOptionsId
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
            case dryRun
            case vpcId = "VpcId"
        }
    }

    public struct AssociateEnclaveCertificateIamRoleRequest: AWSEncodableShape {
        /// The ARN of the ACM certificate with which to associate the IAM role.
        public let certificateArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ARN of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.
        public let roleArn: String?

        public init(certificateArn: String? = nil, dryRun: Bool? = nil, roleArn: String? = nil) {
            self.certificateArn = certificateArn
            self.dryRun = dryRun
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.validate(self.certificateArn, name: "certificateArn", parent: name, max: 1283)
            try self.validate(self.certificateArn, name: "certificateArn", parent: name, min: 1)
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 1283)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case dryRun = "DryRun"
            case roleArn = "RoleArn"
        }
    }

    public struct AssociateEnclaveCertificateIamRoleResult: AWSDecodableShape {
        /// The name of the Amazon S3 bucket to which the certificate was uploaded.
        public let certificateS3BucketName: String?
        /// The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored. The object key is formatted as follows: role_arn/certificate_arn.
        public let certificateS3ObjectKey: String?
        /// The ID of the KMS key used to encrypt the private key of the certificate.
        public let encryptionKmsKeyId: String?

        public init(certificateS3BucketName: String? = nil, certificateS3ObjectKey: String? = nil, encryptionKmsKeyId: String? = nil) {
            self.certificateS3BucketName = certificateS3BucketName
            self.certificateS3ObjectKey = certificateS3ObjectKey
            self.encryptionKmsKeyId = encryptionKmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateS3BucketName
            case certificateS3ObjectKey
            case encryptionKmsKeyId
        }
    }

    public struct AssociateIamInstanceProfileRequest: AWSEncodableShape {
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification
        /// The ID of the instance.
        public let instanceId: String

        public init(iamInstanceProfile: IamInstanceProfileSpecification, instanceId: String) {
            self.iamInstanceProfile = iamInstanceProfile
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfile = "IamInstanceProfile"
            case instanceId = "InstanceId"
        }
    }

    public struct AssociateIamInstanceProfileResult: AWSDecodableShape {
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation
        }
    }

    public struct AssociateInstanceEventWindowRequest: AWSEncodableShape {
        /// One or more targets associated with the specified event window.
        public let associationTarget: InstanceEventWindowAssociationRequest
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the event window.
        public let instanceEventWindowId: String

        public init(associationTarget: InstanceEventWindowAssociationRequest, dryRun: Bool? = nil, instanceEventWindowId: String) {
            self.associationTarget = associationTarget
            self.dryRun = dryRun
            self.instanceEventWindowId = instanceEventWindowId
        }

        private enum CodingKeys: String, CodingKey {
            case associationTarget = "AssociationTarget"
            case dryRun = "DryRun"
            case instanceEventWindowId = "InstanceEventWindowId"
        }
    }

    public struct AssociateInstanceEventWindowResult: AWSDecodableShape {
        /// Information about the event window.
        public let instanceEventWindow: InstanceEventWindow?

        public init(instanceEventWindow: InstanceEventWindow? = nil) {
            self.instanceEventWindow = instanceEventWindow
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindow
        }
    }

    public struct AssociateRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The ID of the route table.
        public let routeTableId: String
        /// The ID of the subnet.
        public let subnetId: String?

        public init(dryRun: Bool? = nil, gatewayId: String? = nil, routeTableId: String, subnetId: String? = nil) {
            self.dryRun = dryRun
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case gatewayId = "GatewayId"
            case routeTableId
            case subnetId
        }
    }

    public struct AssociateRouteTableResult: AWSDecodableShape {
        /// The route table association ID. This ID is required for disassociating the route table.
        public let associationId: String?
        /// The state of the association.
        public let associationState: RouteTableAssociationState?

        public init(associationId: String? = nil, associationState: RouteTableAssociationState? = nil) {
            self.associationId = associationId
            self.associationState = associationState
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case associationState
        }
    }

    public struct AssociateSubnetCidrBlockRequest: AWSEncodableShape {
        /// The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length.
        public let ipv6CidrBlock: String
        /// The ID of your subnet.
        public let subnetId: String

        public init(ipv6CidrBlock: String, subnetId: String) {
            self.ipv6CidrBlock = ipv6CidrBlock
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock
            case subnetId
        }
    }

    public struct AssociateSubnetCidrBlockResult: AWSDecodableShape {
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil, subnetId: String? = nil) {
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockAssociation
            case subnetId
        }
    }

    public struct AssociateTransitGatewayMulticastDomainRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets to associate with the transit gateway multicast domain.
        @OptionalCustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The ID of the transit gateway attachment to associate with the transit gateway multicast domain.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct AssociateTransitGatewayMulticastDomainResult: AWSDecodableShape {
        /// Information about the transit gateway multicast domain associations.
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations
        }
    }

    public struct AssociateTransitGatewayRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct AssociateTransitGatewayRouteTableResult: AWSDecodableShape {
        /// The ID of the association.
        public let association: TransitGatewayAssociation?

        public init(association: TransitGatewayAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association
        }
    }

    public struct AssociateTrunkInterfaceRequest: AWSEncodableShape {
        /// The ID of the branch network interface.
        public let branchInterfaceId: String
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The application key. This applies to the GRE protocol.
        public let greKey: Int?
        /// The ID of the trunk network interface.
        public let trunkInterfaceId: String
        /// The ID of the VLAN. This applies to the VLAN protocol.
        public let vlanId: Int?

        public init(branchInterfaceId: String, clientToken: String? = AssociateTrunkInterfaceRequest.idempotencyToken(), dryRun: Bool? = nil, greKey: Int? = nil, trunkInterfaceId: String, vlanId: Int? = nil) {
            self.branchInterfaceId = branchInterfaceId
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.greKey = greKey
            self.trunkInterfaceId = trunkInterfaceId
            self.vlanId = vlanId
        }

        private enum CodingKeys: String, CodingKey {
            case branchInterfaceId = "BranchInterfaceId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case greKey = "GreKey"
            case trunkInterfaceId = "TrunkInterfaceId"
            case vlanId = "VlanId"
        }
    }

    public struct AssociateTrunkInterfaceResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the association between the trunk network interface and branch network interface.
        public let interfaceAssociation: TrunkInterfaceAssociation?

        public init(clientToken: String? = nil, interfaceAssociation: TrunkInterfaceAssociation? = nil) {
            self.clientToken = clientToken
            self.interfaceAssociation = interfaceAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case interfaceAssociation
        }
    }

    public struct AssociateVpcCidrBlockRequest: AWSEncodableShape {
        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?
        /// An IPv4 CIDR block to associate with the VPC.
        public let cidrBlock: String?
        /// An IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
        public let ipv6CidrBlock: String?
        /// The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the CIDR block to this location.  You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.  You can have one IPv6 CIDR block association per network border group.
        public let ipv6CidrBlockNetworkBorderGroup: String?
        /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
        public let ipv6Pool: String?
        /// The ID of the VPC.
        public let vpcId: String

        public init(amazonProvidedIpv6CidrBlock: Bool? = nil, cidrBlock: String? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockNetworkBorderGroup: String? = nil, ipv6Pool: String? = nil, vpcId: String) {
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
            self.cidrBlock = cidrBlock
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockNetworkBorderGroup = ipv6CidrBlockNetworkBorderGroup
            self.ipv6Pool = ipv6Pool
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case amazonProvidedIpv6CidrBlock
            case cidrBlock = "CidrBlock"
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case ipv6CidrBlockNetworkBorderGroup = "Ipv6CidrBlockNetworkBorderGroup"
            case ipv6Pool = "Ipv6Pool"
            case vpcId
        }
    }

    public struct AssociateVpcCidrBlockResult: AWSDecodableShape {
        /// Information about the IPv4 CIDR block association.
        public let cidrBlockAssociation: VpcCidrBlockAssociation?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlockAssociation: VpcCidrBlockAssociation? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil, vpcId: String? = nil) {
            self.cidrBlockAssociation = cidrBlockAssociation
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlockAssociation
            case ipv6CidrBlockAssociation
            case vpcId
        }
    }

    public struct AssociatedRole: AWSDecodableShape {
        /// The ARN of the associated IAM role.
        public let associatedRoleArn: String?
        /// The name of the Amazon S3 bucket in which the Amazon S3 object is stored.
        public let certificateS3BucketName: String?
        /// The key of the Amazon S3 object ey where the certificate, certificate chain, and encrypted private key bundle is stored. The object key is formated as follows: role_arn/certificate_arn.
        public let certificateS3ObjectKey: String?
        /// The ID of the KMS customer master key (CMK) used to encrypt the private key.
        public let encryptionKmsKeyId: String?

        public init(associatedRoleArn: String? = nil, certificateS3BucketName: String? = nil, certificateS3ObjectKey: String? = nil, encryptionKmsKeyId: String? = nil) {
            self.associatedRoleArn = associatedRoleArn
            self.certificateS3BucketName = certificateS3BucketName
            self.certificateS3ObjectKey = certificateS3ObjectKey
            self.encryptionKmsKeyId = encryptionKmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case associatedRoleArn
            case certificateS3BucketName
            case certificateS3ObjectKey
            case encryptionKmsKeyId
        }
    }

    public struct AssociationStatus: AWSDecodableShape {
        /// The state of the target network association.
        public let code: AssociationStatusCode?
        /// A message about the status of the target network association, if applicable.
        public let message: String?

        public init(code: AssociationStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct AthenaIntegration: AWSEncodableShape {
        /// The location in Amazon S3 to store the generated CloudFormation template.
        public let integrationResultS3DestinationArn: String
        /// The end date for the partition.
        public let partitionEndDate: Date?
        /// The schedule for adding new partitions to the table.
        public let partitionLoadFrequency: PartitionLoadFrequency
        /// The start date for the partition.
        public let partitionStartDate: Date?

        public init(integrationResultS3DestinationArn: String, partitionEndDate: Date? = nil, partitionLoadFrequency: PartitionLoadFrequency, partitionStartDate: Date? = nil) {
            self.integrationResultS3DestinationArn = integrationResultS3DestinationArn
            self.partitionEndDate = partitionEndDate
            self.partitionLoadFrequency = partitionLoadFrequency
            self.partitionStartDate = partitionStartDate
        }

        private enum CodingKeys: String, CodingKey {
            case integrationResultS3DestinationArn = "IntegrationResultS3DestinationArn"
            case partitionEndDate = "PartitionEndDate"
            case partitionLoadFrequency = "PartitionLoadFrequency"
            case partitionStartDate = "PartitionStartDate"
        }
    }

    public struct AttachClassicLinkVpcRequest: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "groupId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC.
        @CustomCoding<ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]
        /// The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC.
        public let instanceId: String
        /// The ID of a ClassicLink-enabled VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, groups: [String], instanceId: String, vpcId: String) {
            self.dryRun = dryRun
            self.groups = groups
            self.instanceId = instanceId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case groups = "SecurityGroupId"
            case instanceId
            case vpcId
        }
    }

    public struct AttachClassicLinkVpcResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct AttachInternetGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, internetGatewayId: String, vpcId: String) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case internetGatewayId
            case vpcId
        }
    }

    public struct AttachNetworkInterfaceRequest: AWSEncodableShape {
        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
        public let networkCardIndex: Int?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(deviceIndex: Int, dryRun: Bool? = nil, instanceId: String, networkCardIndex: Int? = nil, networkInterfaceId: String) {
            self.deviceIndex = deviceIndex
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceIndex
            case dryRun
            case instanceId
            case networkCardIndex = "NetworkCardIndex"
            case networkInterfaceId
        }
    }

    public struct AttachNetworkInterfaceResult: AWSDecodableShape {
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The index of the network card.
        public let networkCardIndex: Int?

        public init(attachmentId: String? = nil, networkCardIndex: Int? = nil) {
            self.attachmentId = attachmentId
            self.networkCardIndex = networkCardIndex
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId
            case networkCardIndex
        }
    }

    public struct AttachVolumeRequest: AWSEncodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let device: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The ID of the EBS volume. The volume and instance must be within the same Availability Zone.
        public let volumeId: String

        public init(device: String, dryRun: Bool? = nil, instanceId: String, volumeId: String) {
            self.device = device
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case dryRun
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
        }
    }

    public struct AttachVpnGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(dryRun: Bool? = nil, vpcId: String, vpnGatewayId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpcId = "VpcId"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct AttachVpnGatewayResult: AWSDecodableShape {
        /// Information about the attachment.
        public let vpcAttachment: VpcAttachment?

        public init(vpcAttachment: VpcAttachment? = nil) {
            self.vpcAttachment = vpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case vpcAttachment = "attachment"
        }
    }

    public struct AttributeBooleanValue: AWSEncodableShape & AWSDecodableShape {
        /// The attribute value. The valid values are true or false.
        public let value: Bool?

        public init(value: Bool? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct AttributeValue: AWSEncodableShape & AWSDecodableShape {
        /// The attribute value. The value is case-sensitive.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct AuthorizationRule: AWSDecodableShape {
        /// Indicates whether the authorization rule grants access to all clients.
        public let accessAll: Bool?
        /// The ID of the Client VPN endpoint with which the authorization rule is associated.
        public let clientVpnEndpointId: String?
        /// A brief description of the authorization rule.
        public let description: String?
        /// The IPv4 address range, in CIDR notation, of the network to which the authorization rule applies.
        public let destinationCidr: String?
        /// The ID of the Active Directory group to which the authorization rule grants access.
        public let groupId: String?
        /// The current state of the authorization rule.
        public let status: ClientVpnAuthorizationRuleStatus?

        public init(accessAll: Bool? = nil, clientVpnEndpointId: String? = nil, description: String? = nil, destinationCidr: String? = nil, groupId: String? = nil, status: ClientVpnAuthorizationRuleStatus? = nil) {
            self.accessAll = accessAll
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.destinationCidr = destinationCidr
            self.groupId = groupId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case accessAll
            case clientVpnEndpointId
            case description
            case destinationCidr
            case groupId
            case status
        }
    }

    public struct AuthorizeClientVpnIngressRequest: AWSEncodableShape {
        /// The ID of the group to grant access to, for example, the Active Directory group or identity provider (IdP) group. Required if AuthorizeAllGroups is false or not specified.
        public let accessGroupId: String?
        /// Indicates whether to grant access to all clients. Specify true to grant all clients who successfully establish a VPN connection access to the network. Must be set to true if AccessGroupId is not specified.
        public let authorizeAllGroups: Bool?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// A brief description of the authorization rule.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv4 address range, in CIDR notation, of the network for which access is being authorized.
        public let targetNetworkCidr: String

        public init(accessGroupId: String? = nil, authorizeAllGroups: Bool? = nil, clientToken: String? = AuthorizeClientVpnIngressRequest.idempotencyToken(), clientVpnEndpointId: String, description: String? = nil, dryRun: Bool? = nil, targetNetworkCidr: String) {
            self.accessGroupId = accessGroupId
            self.authorizeAllGroups = authorizeAllGroups
            self.clientToken = clientToken
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.dryRun = dryRun
            self.targetNetworkCidr = targetNetworkCidr
        }

        private enum CodingKeys: String, CodingKey {
            case accessGroupId = "AccessGroupId"
            case authorizeAllGroups = "AuthorizeAllGroups"
            case clientToken = "ClientToken"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case description = "Description"
            case dryRun = "DryRun"
            case targetNetworkCidr = "TargetNetworkCidr"
        }
    }

    public struct AuthorizeClientVpnIngressResult: AWSDecodableShape {
        /// The current state of the authorization rule.
        public let status: ClientVpnAuthorizationRuleStatus?

        public init(status: ClientVpnAuthorizationRuleStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status
        }
    }

    public struct AuthorizeSecurityGroupEgressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Not supported. Use a set of IP permissions to specify the CIDR.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String
        /// The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
        @OptionalCustomCoding<ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// Not supported. Use a set of IP permissions to specify the protocol name or number.
        public let ipProtocol: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupName: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupOwnerId: String?
        /// The tags applied to the security group rule.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, tagSpecifications: [TagSpecification]? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.tagSpecifications = tagSpecifications
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp
            case dryRun
            case fromPort
            case groupId
            case ipPermissions
            case ipProtocol
            case sourceSecurityGroupName
            case sourceSecurityGroupOwnerId
            case tagSpecifications = "TagSpecification"
            case toPort
        }
    }

    public struct AuthorizeSecurityGroupEgressResult: AWSDecodableShape {
        public struct _SecurityGroupRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?
        /// Information about the outbound (egress) security group rules that were added.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupRulesEncoding, SecurityGroupRule>>
        public var securityGroupRules: [SecurityGroupRule]?

        public init(return: Bool? = nil, securityGroupRules: [SecurityGroupRule]? = nil) {
            self.`return` = `return`
            self.securityGroupRules = securityGroupRules
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
            case securityGroupRules = "securityGroupRuleSet"
        }
    }

    public struct AuthorizeSecurityGroupIngressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source security group. To specify an IPv6 address range, use a set of IP permissions. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use -1 to specify all types. If you specify all ICMP types, you must specify all codes. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.
        public let fromPort: Int?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The sets of IP permissions.
        @OptionalCustomCoding<ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). To specify icmpv6, use a set of IP permissions. [VPC only] Use -1 to specify all protocols. If you specify -1 or a protocol other than tcp, udp, or icmp, traffic on all ports is allowed, regardless of any ports you specify. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.
        public let ipProtocol: String?
        /// [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.
        public let sourceSecurityGroupName: String?
        /// [nondefault VPC] The Amazon Web Services account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// [VPC Only] The tags applied to the security group rule.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use -1 to specify all codes. If you specify all ICMP types, you must specify all codes. Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, tagSpecifications: [TagSpecification]? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.tagSpecifications = tagSpecifications
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "CidrIp"
            case dryRun
            case fromPort = "FromPort"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case ipProtocol = "IpProtocol"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case tagSpecifications = "TagSpecification"
            case toPort = "ToPort"
        }
    }

    public struct AuthorizeSecurityGroupIngressResult: AWSDecodableShape {
        public struct _SecurityGroupRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?
        /// Information about the inbound (ingress) security group rules that were added.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupRulesEncoding, SecurityGroupRule>>
        public var securityGroupRules: [SecurityGroupRule]?

        public init(return: Bool? = nil, securityGroupRules: [SecurityGroupRule]? = nil) {
            self.`return` = `return`
            self.securityGroupRules = securityGroupRules
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
            case securityGroupRules = "securityGroupRuleSet"
        }
    }

    public struct AvailabilityZone: AWSDecodableShape {
        public struct _MessagesEncoding: ArrayCoderProperties { public static let member = "item" }

        ///  For Availability Zones, this parameter has the same value as the Region name. For Local Zones, the name of the associated group, for example us-west-2-lax-1. For Wavelength Zones, the name of the associated group, for example us-east-1-wl1-bos-wlz-1.
        public let groupName: String?
        /// Any messages about the Availability Zone, Local Zone, or Wavelength Zone.
        @OptionalCustomCoding<ArrayCoder<_MessagesEncoding, AvailabilityZoneMessage>>
        public var messages: [AvailabilityZoneMessage]?
        /// The name of the network border group.
        public let networkBorderGroup: String?
        /// For Availability Zones, this parameter always has the value of opt-in-not-required. For Local Zones and Wavelength Zones, this parameter is the opt-in status. The possible values are opted-in, and not-opted-in.
        public let optInStatus: AvailabilityZoneOptInStatus?
        /// The ID of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
        public let parentZoneId: String?
        /// The name of the zone that handles some of the Local Zone or Wavelength Zone control plane operations, such as API calls.
        public let parentZoneName: String?
        /// The name of the Region.
        public let regionName: String?
        /// The state of the Availability Zone, Local Zone, or Wavelength Zone.
        public let state: AvailabilityZoneState?
        /// The ID of the Availability Zone, Local Zone, or Wavelength Zone.
        public let zoneId: String?
        /// The name of the Availability Zone, Local Zone, or Wavelength Zone.
        public let zoneName: String?
        /// The type of zone. The valid values are availability-zone, local-zone, and wavelength-zone.
        public let zoneType: String?

        public init(groupName: String? = nil, messages: [AvailabilityZoneMessage]? = nil, networkBorderGroup: String? = nil, optInStatus: AvailabilityZoneOptInStatus? = nil, parentZoneId: String? = nil, parentZoneName: String? = nil, regionName: String? = nil, state: AvailabilityZoneState? = nil, zoneId: String? = nil, zoneName: String? = nil, zoneType: String? = nil) {
            self.groupName = groupName
            self.messages = messages
            self.networkBorderGroup = networkBorderGroup
            self.optInStatus = optInStatus
            self.parentZoneId = parentZoneId
            self.parentZoneName = parentZoneName
            self.regionName = regionName
            self.state = state
            self.zoneId = zoneId
            self.zoneName = zoneName
            self.zoneType = zoneType
        }

        private enum CodingKeys: String, CodingKey {
            case groupName
            case messages = "messageSet"
            case networkBorderGroup
            case optInStatus
            case parentZoneId
            case parentZoneName
            case regionName
            case state = "zoneState"
            case zoneId
            case zoneName
            case zoneType
        }
    }

    public struct AvailabilityZoneMessage: AWSDecodableShape {
        /// The message about the Availability Zone, Local Zone, or Wavelength Zone.
        public let message: String?

        public init(message: String? = nil) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message
        }
    }

    public struct AvailableCapacity: AWSDecodableShape {
        public struct _AvailableInstanceCapacityEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The number of instances that can be launched onto the Dedicated Host depending on the host's available capacity. For Dedicated Hosts that support multiple instance types, this parameter represents the number of instances for each instance size that is supported on the host.
        @OptionalCustomCoding<ArrayCoder<_AvailableInstanceCapacityEncoding, InstanceCapacity>>
        public var availableInstanceCapacity: [InstanceCapacity]?
        /// The number of vCPUs available for launching instances onto the Dedicated Host.
        public let availableVCpus: Int?

        public init(availableInstanceCapacity: [InstanceCapacity]? = nil, availableVCpus: Int? = nil) {
            self.availableInstanceCapacity = availableInstanceCapacity
            self.availableVCpus = availableVCpus
        }

        private enum CodingKeys: String, CodingKey {
            case availableInstanceCapacity
            case availableVCpus
        }
    }

    public struct BlobAttributeValue: AWSEncodableShape {
        public let value: Data?

        public init(value: Data? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct BlockDeviceMapping: AWSEncodableShape & AWSDecodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsBlockDevice?
        /// To omit the device from the block device mapping, specify an empty string.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. NVMe instance store volumes are automatically enumerated and assigned a device name. Including them in your block device mapping has no effect. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: EbsBlockDevice? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName
            case ebs
            case noDevice
            case virtualName
        }
    }

    public struct BundleInstanceRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance to bundle. Type: String Default: None Required: Yes
        public let instanceId: String
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let storage: Storage

        public init(dryRun: Bool? = nil, instanceId: String, storage: Storage) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.storage = storage
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceId = "InstanceId"
            case storage = "Storage"
        }
    }

    public struct BundleInstanceResult: AWSDecodableShape {
        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct BundleTask: AWSDecodableShape {
        /// The ID of the bundle task.
        public let bundleId: String?
        /// If the task fails, a description of the error.
        public let bundleTaskError: BundleTaskError?
        /// The ID of the instance associated with this bundle task.
        public let instanceId: String?
        /// The level of task completion, as a percent (for example, 20%).
        public let progress: String?
        /// The time this task started.
        public let startTime: Date?
        /// The state of the task.
        public let state: BundleTaskState?
        /// The Amazon S3 storage locations.
        public let storage: Storage?
        /// The time of the most recent update for the task.
        public let updateTime: Date?

        public init(bundleId: String? = nil, bundleTaskError: BundleTaskError? = nil, instanceId: String? = nil, progress: String? = nil, startTime: Date? = nil, state: BundleTaskState? = nil, storage: Storage? = nil, updateTime: Date? = nil) {
            self.bundleId = bundleId
            self.bundleTaskError = bundleTaskError
            self.instanceId = instanceId
            self.progress = progress
            self.startTime = startTime
            self.state = state
            self.storage = storage
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId
            case bundleTaskError = "error"
            case instanceId
            case progress
            case startTime
            case state
            case storage
            case updateTime
        }
    }

    public struct BundleTaskError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct ByoipCidr: AWSDecodableShape {
        /// The address range, in CIDR notation.
        public let cidr: String?
        /// The description of the address range.
        public let description: String?
        /// The state of the address pool.
        public let state: ByoipCidrState?
        /// Upon success, contains the ID of the address pool. Otherwise, contains an error message.
        public let statusMessage: String?

        public init(cidr: String? = nil, description: String? = nil, state: ByoipCidrState? = nil, statusMessage: String? = nil) {
            self.cidr = cidr
            self.description = description
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case cidr
            case description
            case state
            case statusMessage
        }
    }

    public struct CancelBundleTaskRequest: AWSEncodableShape {
        /// The ID of the bundle task.
        public let bundleId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(bundleId: String, dryRun: Bool? = nil) {
            self.bundleId = bundleId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case bundleId = "BundleId"
            case dryRun
        }
    }

    public struct CancelBundleTaskResult: AWSDecodableShape {
        /// Information about the bundle task.
        public let bundleTask: BundleTask?

        public init(bundleTask: BundleTask? = nil) {
            self.bundleTask = bundleTask
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTask = "bundleInstanceTask"
        }
    }

    public struct CancelCapacityReservationRequest: AWSEncodableShape {
        /// The ID of the Capacity Reservation to be cancelled.
        public let capacityReservationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(capacityReservationId: String, dryRun: Bool? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
        }
    }

    public struct CancelCapacityReservationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct CancelConversionRequest: AWSEncodableShape {
        /// The ID of the conversion task.
        public let conversionTaskId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The reason for canceling the conversion task.
        public let reasonMessage: String?

        public init(conversionTaskId: String, dryRun: Bool? = nil, reasonMessage: String? = nil) {
            self.conversionTaskId = conversionTaskId
            self.dryRun = dryRun
            self.reasonMessage = reasonMessage
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskId
            case dryRun
            case reasonMessage
        }
    }

    public struct CancelExportTaskRequest: AWSEncodableShape {
        /// The ID of the export task. This is the ID returned by CreateInstanceExportTask.
        public let exportTaskId: String

        public init(exportTaskId: String) {
            self.exportTaskId = exportTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskId
        }
    }

    public struct CancelImportTaskRequest: AWSEncodableShape {
        /// The reason for canceling the task.
        public let cancelReason: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the import image or import snapshot task to be canceled.
        public let importTaskId: String?

        public init(cancelReason: String? = nil, dryRun: Bool? = nil, importTaskId: String? = nil) {
            self.cancelReason = cancelReason
            self.dryRun = dryRun
            self.importTaskId = importTaskId
        }

        private enum CodingKeys: String, CodingKey {
            case cancelReason = "CancelReason"
            case dryRun = "DryRun"
            case importTaskId = "ImportTaskId"
        }
    }

    public struct CancelImportTaskResult: AWSDecodableShape {
        /// The ID of the task being canceled.
        public let importTaskId: String?
        /// The current state of the task being canceled.
        public let previousState: String?
        /// The current state of the task being canceled.
        public let state: String?

        public init(importTaskId: String? = nil, previousState: String? = nil, state: String? = nil) {
            self.importTaskId = importTaskId
            self.previousState = previousState
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case importTaskId
            case previousState
            case state
        }
    }

    public struct CancelReservedInstancesListingRequest: AWSEncodableShape {
        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String

        public init(reservedInstancesListingId: String) {
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListingId
        }
    }

    public struct CancelReservedInstancesListingResult: AWSDecodableShape {
        public struct _ReservedInstancesListingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Reserved Instance listing.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstancesListingsEncoding, ReservedInstancesListing>>
        public var reservedInstancesListings: [ReservedInstancesListing]?

        public init(reservedInstancesListings: [ReservedInstancesListing]? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct CancelSpotFleetRequestsError: AWSDecodableShape {
        /// The error code.
        public let code: CancelBatchErrorCode?
        /// The description for the error code.
        public let message: String?

        public init(code: CancelBatchErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct CancelSpotFleetRequestsErrorItem: AWSDecodableShape {
        /// The error.
        public let error: CancelSpotFleetRequestsError?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(error: CancelSpotFleetRequestsError? = nil, spotFleetRequestId: String? = nil) {
            self.error = error
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case error
            case spotFleetRequestId
        }
    }

    public struct CancelSpotFleetRequestsRequest: AWSEncodableShape {
        public struct _SpotFleetRequestIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Spot Fleet requests.
        @CustomCoding<ArrayCoder<_SpotFleetRequestIdsEncoding, String>>
        public var spotFleetRequestIds: [String]
        /// Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.
        public let terminateInstances: Bool

        public init(dryRun: Bool? = nil, spotFleetRequestIds: [String], terminateInstances: Bool) {
            self.dryRun = dryRun
            self.spotFleetRequestIds = spotFleetRequestIds
            self.terminateInstances = terminateInstances
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case spotFleetRequestIds = "spotFleetRequestId"
            case terminateInstances
        }
    }

    public struct CancelSpotFleetRequestsResponse: AWSDecodableShape {
        public struct _SuccessfulFleetRequestsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulFleetRequestsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Spot Fleet requests that are successfully canceled.
        @OptionalCustomCoding<ArrayCoder<_SuccessfulFleetRequestsEncoding, CancelSpotFleetRequestsSuccessItem>>
        public var successfulFleetRequests: [CancelSpotFleetRequestsSuccessItem]?
        /// Information about the Spot Fleet requests that are not successfully canceled.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulFleetRequestsEncoding, CancelSpotFleetRequestsErrorItem>>
        public var unsuccessfulFleetRequests: [CancelSpotFleetRequestsErrorItem]?

        public init(successfulFleetRequests: [CancelSpotFleetRequestsSuccessItem]? = nil, unsuccessfulFleetRequests: [CancelSpotFleetRequestsErrorItem]? = nil) {
            self.successfulFleetRequests = successfulFleetRequests
            self.unsuccessfulFleetRequests = unsuccessfulFleetRequests
        }

        private enum CodingKeys: String, CodingKey {
            case successfulFleetRequests = "successfulFleetRequestSet"
            case unsuccessfulFleetRequests = "unsuccessfulFleetRequestSet"
        }
    }

    public struct CancelSpotFleetRequestsSuccessItem: AWSDecodableShape {
        /// The current state of the Spot Fleet request.
        public let currentSpotFleetRequestState: BatchState?
        /// The previous state of the Spot Fleet request.
        public let previousSpotFleetRequestState: BatchState?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(currentSpotFleetRequestState: BatchState? = nil, previousSpotFleetRequestState: BatchState? = nil, spotFleetRequestId: String? = nil) {
            self.currentSpotFleetRequestState = currentSpotFleetRequestState
            self.previousSpotFleetRequestState = previousSpotFleetRequestState
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case currentSpotFleetRequestState
            case previousSpotFleetRequestState
            case spotFleetRequestId
        }
    }

    public struct CancelSpotInstanceRequestsRequest: AWSEncodableShape {
        public struct _SpotInstanceRequestIdsEncoding: ArrayCoderProperties { public static let member = "SpotInstanceRequestId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more Spot Instance request IDs.
        @CustomCoding<ArrayCoder<_SpotInstanceRequestIdsEncoding, String>>
        public var spotInstanceRequestIds: [String]

        public init(dryRun: Bool? = nil, spotInstanceRequestIds: [String]) {
            self.dryRun = dryRun
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public struct CancelSpotInstanceRequestsResult: AWSDecodableShape {
        public struct _CancelledSpotInstanceRequestsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more Spot Instance requests.
        @OptionalCustomCoding<ArrayCoder<_CancelledSpotInstanceRequestsEncoding, CancelledSpotInstanceRequest>>
        public var cancelledSpotInstanceRequests: [CancelledSpotInstanceRequest]?

        public init(cancelledSpotInstanceRequests: [CancelledSpotInstanceRequest]? = nil) {
            self.cancelledSpotInstanceRequests = cancelledSpotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case cancelledSpotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct CancelledSpotInstanceRequest: AWSDecodableShape {
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?
        /// The state of the Spot Instance request.
        public let state: CancelSpotInstanceRequestState?

        public init(spotInstanceRequestId: String? = nil, state: CancelSpotInstanceRequestState? = nil) {
            self.spotInstanceRequestId = spotInstanceRequestId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequestId
            case state
        }
    }

    public struct CapacityReservation: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in which the capacity is reserved.
        public let availabilityZone: String?
        /// The Availability Zone ID of the Capacity Reservation.
        public let availabilityZoneId: String?
        /// The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
        public let availableInstanceCount: Int?
        /// The Amazon Resource Name (ARN) of the Capacity Reservation.
        public let capacityReservationArn: String?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// The date and time at which the Capacity Reservation was created.
        public let createDate: Date?
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
        public let ebsOptimized: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.
        public let endDate: Date?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it.    limited - The Capacity Reservation expires automatically at a specified date and time.
        public let endDateType: EndDateType?
        /// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
        public let ephemeralStorage: Bool?
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
        public let instanceMatchCriteria: InstanceMatchCriteria?
        /// The type of operating system for which the Capacity Reservation reserves capacity.
        public let instancePlatform: CapacityReservationInstancePlatform?
        /// The type of instance for which the Capacity Reservation reserves capacity.
        public let instanceType: String?
        /// The Amazon Resource Name (ARN) of the Outpost on which the Capacity Reservation was created.
        public let outpostArn: String?
        /// The ID of the account that owns the Capacity Reservation.
        public let ownerId: String?
        /// The date and time at which the Capacity Reservation was started.
        public let startDate: Date?
        /// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active - The Capacity Reservation is active and the capacity is available for your use.    expired - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.    cancelled - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.    pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.
        public let state: CapacityReservationState?
        /// Any tags assigned to the Capacity Reservation.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single account.
        public let tenancy: CapacityReservationTenancy?
        /// The total number of instances for which the Capacity Reservation reserves capacity.
        public let totalInstanceCount: Int?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, availableInstanceCount: Int? = nil, capacityReservationArn: String? = nil, capacityReservationId: String? = nil, createDate: Date? = nil, ebsOptimized: Bool? = nil, endDate: Date? = nil, endDateType: EndDateType? = nil, ephemeralStorage: Bool? = nil, instanceMatchCriteria: InstanceMatchCriteria? = nil, instancePlatform: CapacityReservationInstancePlatform? = nil, instanceType: String? = nil, outpostArn: String? = nil, ownerId: String? = nil, startDate: Date? = nil, state: CapacityReservationState? = nil, tags: [Tag]? = nil, tenancy: CapacityReservationTenancy? = nil, totalInstanceCount: Int? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableInstanceCount = availableInstanceCount
            self.capacityReservationArn = capacityReservationArn
            self.capacityReservationId = capacityReservationId
            self.createDate = createDate
            self.ebsOptimized = ebsOptimized
            self.endDate = endDate
            self.endDateType = endDateType
            self.ephemeralStorage = ephemeralStorage
            self.instanceMatchCriteria = instanceMatchCriteria
            self.instancePlatform = instancePlatform
            self.instanceType = instanceType
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.startDate = startDate
            self.state = state
            self.tags = tags
            self.tenancy = tenancy
            self.totalInstanceCount = totalInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case availabilityZoneId
            case availableInstanceCount
            case capacityReservationArn
            case capacityReservationId
            case createDate
            case ebsOptimized
            case endDate
            case endDateType
            case ephemeralStorage
            case instanceMatchCriteria
            case instancePlatform
            case instanceType
            case outpostArn
            case ownerId
            case startDate
            case state
            case tags = "tagSet"
            case tenancy
            case totalInstanceCount
        }
    }

    public struct CapacityReservationGroup: AWSDecodableShape {
        /// The ARN of the resource group.
        public let groupArn: String?
        /// The ID of the account that owns the resource group.
        public let ownerId: String?

        public init(groupArn: String? = nil, ownerId: String? = nil) {
            self.groupArn = groupArn
            self.ownerId = ownerId
        }

        private enum CodingKeys: String, CodingKey {
            case groupArn
            case ownerId
        }
    }

    public struct CapacityReservationOptions: AWSDecodableShape {
        /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify use-capacity-reservations-first, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (lowest-price or prioritized) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (lowest-price or prioritized). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
        public let usageStrategy: FleetCapacityReservationUsageStrategy?

        public init(usageStrategy: FleetCapacityReservationUsageStrategy? = nil) {
            self.usageStrategy = usageStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case usageStrategy
        }
    }

    public struct CapacityReservationOptionsRequest: AWSEncodableShape {
        /// Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity. If you specify use-capacity-reservations-first, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (lowest-price or prioritized) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (lowest-price or prioritized). If you do not specify a value, the fleet fulfils the On-Demand capacity according to the chosen On-Demand allocation strategy.
        public let usageStrategy: FleetCapacityReservationUsageStrategy?

        public init(usageStrategy: FleetCapacityReservationUsageStrategy? = nil) {
            self.usageStrategy = usageStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case usageStrategy = "UsageStrategy"
        }
    }

    public struct CapacityReservationSpecification: AWSEncodableShape {
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTarget?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTarget? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "CapacityReservationPreference"
            case capacityReservationTarget = "CapacityReservationTarget"
        }
    }

    public struct CapacityReservationSpecificationResponse: AWSDecodableShape {
        /// Describes the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the targeted Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTargetResponse?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTargetResponse? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference
            case capacityReservationTarget
        }
    }

    public struct CapacityReservationTarget: AWSEncodableShape {
        /// The ID of the Capacity Reservation in which to run the instance.
        public let capacityReservationId: String?
        /// The ARN of the Capacity Reservation resource group in which to run the instance.
        public let capacityReservationResourceGroupArn: String?

        public init(capacityReservationId: String? = nil, capacityReservationResourceGroupArn: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case capacityReservationResourceGroupArn = "CapacityReservationResourceGroupArn"
        }
    }

    public struct CapacityReservationTargetResponse: AWSDecodableShape {
        /// The ID of the targeted Capacity Reservation.
        public let capacityReservationId: String?
        /// The ARN of the targeted Capacity Reservation group.
        public let capacityReservationResourceGroupArn: String?

        public init(capacityReservationId: String? = nil, capacityReservationResourceGroupArn: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.capacityReservationResourceGroupArn = capacityReservationResourceGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId
            case capacityReservationResourceGroupArn
        }
    }

    public struct CarrierGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the carrier gateway.
        public let carrierGatewayId: String?
        /// The AWS account ID of the owner of the carrier gateway.
        public let ownerId: String?
        /// The state of the carrier gateway.
        public let state: CarrierGatewayState?
        /// The tags assigned to the carrier gateway.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC associated with the carrier gateway.
        public let vpcId: String?

        public init(carrierGatewayId: String? = nil, ownerId: String? = nil, state: CarrierGatewayState? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId
            case ownerId
            case state
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct CertificateAuthentication: AWSDecodableShape {
        /// The ARN of the client certificate.
        public let clientRootCertificateChain: String?

        public init(clientRootCertificateChain: String? = nil) {
            self.clientRootCertificateChain = clientRootCertificateChain
        }

        private enum CodingKeys: String, CodingKey {
            case clientRootCertificateChain
        }
    }

    public struct CertificateAuthenticationRequest: AWSEncodableShape {
        /// The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM).
        public let clientRootCertificateChainArn: String?

        public init(clientRootCertificateChainArn: String? = nil) {
            self.clientRootCertificateChainArn = clientRootCertificateChainArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientRootCertificateChainArn = "ClientRootCertificateChainArn"
        }
    }

    public struct CidrAuthorizationContext: AWSEncodableShape {
        /// The plain-text authorization message for the prefix and account.
        public let message: String
        /// The signed authorization message for the prefix and account.
        public let signature: String

        public init(message: String, signature: String) {
            self.message = message
            self.signature = signature
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case signature = "Signature"
        }
    }

    public struct CidrBlock: AWSDecodableShape {
        /// The IPv4 CIDR block.
        public let cidrBlock: String?

        public init(cidrBlock: String? = nil) {
            self.cidrBlock = cidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock
        }
    }

    public struct ClassicLinkDnsSupport: AWSDecodableShape {
        /// Indicates whether ClassicLink DNS support is enabled for the VPC.
        public let classicLinkDnsSupported: Bool?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(classicLinkDnsSupported: Bool? = nil, vpcId: String? = nil) {
            self.classicLinkDnsSupported = classicLinkDnsSupported
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case classicLinkDnsSupported
            case vpcId
        }
    }

    public struct ClassicLinkInstance: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A list of security groups.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The ID of the instance.
        public let instanceId: String?
        /// Any tags assigned to the instance.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(groups: [GroupIdentifier]? = nil, instanceId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.groups = groups
            self.instanceId = instanceId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "groupSet"
            case instanceId
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct ClassicLoadBalancer: AWSEncodableShape & AWSDecodableShape {
        /// The name of the load balancer.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name
        }
    }

    public struct ClassicLoadBalancersConfig: AWSEncodableShape & AWSDecodableShape {
        public struct _ClassicLoadBalancersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more Classic Load Balancers.
        @OptionalCustomCoding<ArrayCoder<_ClassicLoadBalancersEncoding, ClassicLoadBalancer>>
        public var classicLoadBalancers: [ClassicLoadBalancer]?

        public init(classicLoadBalancers: [ClassicLoadBalancer]? = nil) {
            self.classicLoadBalancers = classicLoadBalancers
        }

        public func validate(name: String) throws {
            try self.validate(self.classicLoadBalancers, name: "classicLoadBalancers", parent: name, max: 5)
            try self.validate(self.classicLoadBalancers, name: "classicLoadBalancers", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case classicLoadBalancers
        }
    }

    public struct ClientCertificateRevocationListStatus: AWSDecodableShape {
        /// The state of the client certificate revocation list.
        public let code: ClientCertificateRevocationListStatusCode?
        /// A message about the status of the client certificate revocation list, if applicable.
        public let message: String?

        public init(code: ClientCertificateRevocationListStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct ClientConnectOptions: AWSEncodableShape {
        /// Indicates whether client connect options are enabled. The default is false (not enabled).
        public let enabled: Bool?
        /// The Amazon Resource Name (ARN) of the AWS Lambda function used for connection authorization.
        public let lambdaFunctionArn: String?

        public init(enabled: Bool? = nil, lambdaFunctionArn: String? = nil) {
            self.enabled = enabled
            self.lambdaFunctionArn = lambdaFunctionArn
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case lambdaFunctionArn = "LambdaFunctionArn"
        }
    }

    public struct ClientConnectResponseOptions: AWSDecodableShape {
        /// Indicates whether client connect options are enabled.
        public let enabled: Bool?
        /// The Amazon Resource Name (ARN) of the AWS Lambda function used for connection authorization.
        public let lambdaFunctionArn: String?
        /// The status of any updates to the client connect options.
        public let status: ClientVpnEndpointAttributeStatus?

        public init(enabled: Bool? = nil, lambdaFunctionArn: String? = nil, status: ClientVpnEndpointAttributeStatus? = nil) {
            self.enabled = enabled
            self.lambdaFunctionArn = lambdaFunctionArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case enabled
            case lambdaFunctionArn
            case status
        }
    }

    public struct ClientData: AWSEncodableShape {
        /// A user-defined comment about the disk upload.
        public let comment: String?
        /// The time that the disk upload ends.
        public let uploadEnd: Date?
        /// The size of the uploaded disk image, in GiB.
        public let uploadSize: Double?
        /// The time that the disk upload starts.
        public let uploadStart: Date?

        public init(comment: String? = nil, uploadEnd: Date? = nil, uploadSize: Double? = nil, uploadStart: Date? = nil) {
            self.comment = comment
            self.uploadEnd = uploadEnd
            self.uploadSize = uploadSize
            self.uploadStart = uploadStart
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "Comment"
            case uploadEnd = "UploadEnd"
            case uploadSize = "UploadSize"
            case uploadStart = "UploadStart"
        }
    }

    public struct ClientVpnAuthentication: AWSDecodableShape {
        /// Information about the Active Directory, if applicable.
        public let activeDirectory: DirectoryServiceAuthentication?
        /// Information about the IAM SAML identity provider, if applicable.
        public let federatedAuthentication: FederatedAuthentication?
        /// Information about the authentication certificates, if applicable.
        public let mutualAuthentication: CertificateAuthentication?
        /// The authentication type used.
        public let type: ClientVpnAuthenticationType?

        public init(activeDirectory: DirectoryServiceAuthentication? = nil, federatedAuthentication: FederatedAuthentication? = nil, mutualAuthentication: CertificateAuthentication? = nil, type: ClientVpnAuthenticationType? = nil) {
            self.activeDirectory = activeDirectory
            self.federatedAuthentication = federatedAuthentication
            self.mutualAuthentication = mutualAuthentication
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case activeDirectory
            case federatedAuthentication
            case mutualAuthentication
            case type
        }
    }

    public struct ClientVpnAuthenticationRequest: AWSEncodableShape {
        /// Information about the Active Directory to be used, if applicable. You must provide this information if Type is directory-service-authentication.
        public let activeDirectory: DirectoryServiceAuthenticationRequest?
        /// Information about the IAM SAML identity provider to be used, if applicable. You must provide this information if Type is federated-authentication.
        public let federatedAuthentication: FederatedAuthenticationRequest?
        /// Information about the authentication certificates to be used, if applicable. You must provide this information if Type is certificate-authentication.
        public let mutualAuthentication: CertificateAuthenticationRequest?
        /// The type of client authentication to be used.
        public let type: ClientVpnAuthenticationType?

        public init(activeDirectory: DirectoryServiceAuthenticationRequest? = nil, federatedAuthentication: FederatedAuthenticationRequest? = nil, mutualAuthentication: CertificateAuthenticationRequest? = nil, type: ClientVpnAuthenticationType? = nil) {
            self.activeDirectory = activeDirectory
            self.federatedAuthentication = federatedAuthentication
            self.mutualAuthentication = mutualAuthentication
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case activeDirectory = "ActiveDirectory"
            case federatedAuthentication = "FederatedAuthentication"
            case mutualAuthentication = "MutualAuthentication"
            case type = "Type"
        }
    }

    public struct ClientVpnAuthorizationRuleStatus: AWSDecodableShape {
        /// The state of the authorization rule.
        public let code: ClientVpnAuthorizationRuleStatusCode?
        /// A message about the status of the authorization rule, if applicable.
        public let message: String?

        public init(code: ClientVpnAuthorizationRuleStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct ClientVpnConnection: AWSDecodableShape {
        public struct _PostureComplianceStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address of the client.
        public let clientIp: String?
        /// The ID of the Client VPN endpoint to which the client is connected.
        public let clientVpnEndpointId: String?
        /// The common name associated with the client. This is either the name of the client certificate, or the Active Directory user name.
        public let commonName: String?
        /// The date and time the client connection was terminated.
        public let connectionEndTime: String?
        /// The date and time the client connection was established.
        public let connectionEstablishedTime: String?
        /// The ID of the client connection.
        public let connectionId: String?
        /// The number of bytes received by the client.
        public let egressBytes: String?
        /// The number of packets received by the client.
        public let egressPackets: String?
        /// The number of bytes sent by the client.
        public let ingressBytes: String?
        /// The number of packets sent by the client.
        public let ingressPackets: String?
        /// The statuses returned by the client connect handler for posture compliance, if applicable.
        @OptionalCustomCoding<ArrayCoder<_PostureComplianceStatusesEncoding, String>>
        public var postureComplianceStatuses: [String]?
        /// The current state of the client connection.
        public let status: ClientVpnConnectionStatus?
        /// The current date and time.
        public let timestamp: String?
        /// The username of the client who established the client connection. This information is only provided if Active Directory client authentication is used.
        public let username: String?

        public init(clientIp: String? = nil, clientVpnEndpointId: String? = nil, commonName: String? = nil, connectionEndTime: String? = nil, connectionEstablishedTime: String? = nil, connectionId: String? = nil, egressBytes: String? = nil, egressPackets: String? = nil, ingressBytes: String? = nil, ingressPackets: String? = nil, postureComplianceStatuses: [String]? = nil, status: ClientVpnConnectionStatus? = nil, timestamp: String? = nil, username: String? = nil) {
            self.clientIp = clientIp
            self.clientVpnEndpointId = clientVpnEndpointId
            self.commonName = commonName
            self.connectionEndTime = connectionEndTime
            self.connectionEstablishedTime = connectionEstablishedTime
            self.connectionId = connectionId
            self.egressBytes = egressBytes
            self.egressPackets = egressPackets
            self.ingressBytes = ingressBytes
            self.ingressPackets = ingressPackets
            self.postureComplianceStatuses = postureComplianceStatuses
            self.status = status
            self.timestamp = timestamp
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientIp
            case clientVpnEndpointId
            case commonName
            case connectionEndTime
            case connectionEstablishedTime
            case connectionId
            case egressBytes
            case egressPackets
            case ingressBytes
            case ingressPackets
            case postureComplianceStatuses = "postureComplianceStatusSet"
            case status
            case timestamp
            case username
        }
    }

    public struct ClientVpnConnectionStatus: AWSDecodableShape {
        /// The state of the client connection.
        public let code: ClientVpnConnectionStatusCode?
        /// A message about the status of the client connection, if applicable.
        public let message: String?

        public init(code: ClientVpnConnectionStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct ClientVpnEndpoint: AWSDecodableShape {
        public struct _AuthenticationOptionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _DnsServersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the authentication method used by the Client VPN endpoint.
        @OptionalCustomCoding<ArrayCoder<_AuthenticationOptionsEncoding, ClientVpnAuthentication>>
        public var authenticationOptions: [ClientVpnAuthentication]?
        /// The IPv4 address range, in CIDR notation, from which client IP addresses are assigned.
        public let clientCidrBlock: String?
        /// The options for managing connection authorization for new client connections.
        public let clientConnectOptions: ClientConnectResponseOptions?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// Information about the client connection logging options for the Client VPN endpoint.
        public let connectionLogOptions: ConnectionLogResponseOptions?
        /// The date and time the Client VPN endpoint was created.
        public let creationTime: String?
        /// The date and time the Client VPN endpoint was deleted, if applicable.
        public let deletionTime: String?
        /// A brief description of the endpoint.
        public let description: String?
        /// The DNS name to be used by clients when connecting to the Client VPN endpoint.
        public let dnsName: String?
        /// Information about the DNS servers to be used for DNS resolution.
        @OptionalCustomCoding<ArrayCoder<_DnsServersEncoding, String>>
        public var dnsServers: [String]?
        /// The IDs of the security groups for the target network.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The URL of the self-service portal.
        public let selfServicePortalUrl: String?
        /// The ARN of the server certificate.
        public let serverCertificateArn: String?
        /// Indicates whether split-tunnel is enabled in the AWS Client VPN endpoint. For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client VPN Endpoint in the AWS Client VPN Administrator Guide.
        public let splitTunnel: Bool?
        /// The current state of the Client VPN endpoint.
        public let status: ClientVpnEndpointStatus?
        /// Any tags assigned to the Client VPN endpoint.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The transport protocol used by the Client VPN endpoint.
        public let transportProtocol: TransportProtocol?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The port number for the Client VPN endpoint.
        public let vpnPort: Int?
        /// The protocol used by the VPN session.
        public let vpnProtocol: VpnProtocol?

        public init(authenticationOptions: [ClientVpnAuthentication]? = nil, clientCidrBlock: String? = nil, clientConnectOptions: ClientConnectResponseOptions? = nil, clientVpnEndpointId: String? = nil, connectionLogOptions: ConnectionLogResponseOptions? = nil, creationTime: String? = nil, deletionTime: String? = nil, description: String? = nil, dnsName: String? = nil, dnsServers: [String]? = nil, securityGroupIds: [String]? = nil, selfServicePortalUrl: String? = nil, serverCertificateArn: String? = nil, splitTunnel: Bool? = nil, status: ClientVpnEndpointStatus? = nil, tags: [Tag]? = nil, transportProtocol: TransportProtocol? = nil, vpcId: String? = nil, vpnPort: Int? = nil, vpnProtocol: VpnProtocol? = nil) {
            self.authenticationOptions = authenticationOptions
            self.clientCidrBlock = clientCidrBlock
            self.clientConnectOptions = clientConnectOptions
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionLogOptions = connectionLogOptions
            self.creationTime = creationTime
            self.deletionTime = deletionTime
            self.description = description
            self.dnsName = dnsName
            self.dnsServers = dnsServers
            self.securityGroupIds = securityGroupIds
            self.selfServicePortalUrl = selfServicePortalUrl
            self.serverCertificateArn = serverCertificateArn
            self.splitTunnel = splitTunnel
            self.status = status
            self.tags = tags
            self.transportProtocol = transportProtocol
            self.vpcId = vpcId
            self.vpnPort = vpnPort
            self.vpnProtocol = vpnProtocol
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationOptions
            case clientCidrBlock
            case clientConnectOptions
            case clientVpnEndpointId
            case connectionLogOptions
            case creationTime
            case deletionTime
            case description
            case dnsName
            case dnsServers = "dnsServer"
            case securityGroupIds = "securityGroupIdSet"
            case selfServicePortalUrl
            case serverCertificateArn
            case splitTunnel
            case status
            case tags = "tagSet"
            case transportProtocol
            case vpcId
            case vpnPort
            case vpnProtocol
        }
    }

    public struct ClientVpnEndpointAttributeStatus: AWSDecodableShape {
        /// The status code.
        public let code: ClientVpnEndpointAttributeStatusCode?
        /// The status message.
        public let message: String?

        public init(code: ClientVpnEndpointAttributeStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct ClientVpnEndpointStatus: AWSDecodableShape {
        /// The state of the Client VPN endpoint. Possible states include:    pending-associate - The Client VPN endpoint has been created but no target networks have been associated. The Client VPN endpoint cannot accept connections.    available - The Client VPN endpoint has been created and a target network has been associated. The Client VPN endpoint can accept connections.    deleting - The Client VPN endpoint is being deleted. The Client VPN endpoint cannot accept connections.    deleted - The Client VPN endpoint has been deleted. The Client VPN endpoint cannot accept connections.
        public let code: ClientVpnEndpointStatusCode?
        /// A message about the status of the Client VPN endpoint.
        public let message: String?

        public init(code: ClientVpnEndpointStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct ClientVpnRoute: AWSDecodableShape {
        /// The ID of the Client VPN endpoint with which the route is associated.
        public let clientVpnEndpointId: String?
        /// A brief description of the route.
        public let description: String?
        /// The IPv4 address range, in CIDR notation, of the route destination.
        public let destinationCidr: String?
        /// Indicates how the route was associated with the Client VPN endpoint. associate indicates that the route was automatically added when the target network was associated with the Client VPN endpoint. add-route indicates that the route was manually added using the CreateClientVpnRoute action.
        public let origin: String?
        /// The current state of the route.
        public let status: ClientVpnRouteStatus?
        /// The ID of the subnet through which traffic is routed.
        public let targetSubnet: String?
        /// The route type.
        public let type: String?

        public init(clientVpnEndpointId: String? = nil, description: String? = nil, destinationCidr: String? = nil, origin: String? = nil, status: ClientVpnRouteStatus? = nil, targetSubnet: String? = nil, type: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.destinationCidr = destinationCidr
            self.origin = origin
            self.status = status
            self.targetSubnet = targetSubnet
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId
            case description
            case destinationCidr
            case origin
            case status
            case targetSubnet
            case type
        }
    }

    public struct ClientVpnRouteStatus: AWSDecodableShape {
        /// The state of the Client VPN endpoint route.
        public let code: ClientVpnRouteStatusCode?
        /// A message about the status of the Client VPN endpoint route, if applicable.
        public let message: String?

        public init(code: ClientVpnRouteStatusCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct CoipAddressUsage: AWSDecodableShape {
        /// The allocation ID of the address.
        public let allocationId: String?
        /// The AWS account ID.
        public let awsAccountId: String?
        /// The AWS service.
        public let awsService: String?
        /// The customer-owned IP address.
        public let coIp: String?

        public init(allocationId: String? = nil, awsAccountId: String? = nil, awsService: String? = nil, coIp: String? = nil) {
            self.allocationId = allocationId
            self.awsAccountId = awsAccountId
            self.awsService = awsService
            self.coIp = coIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId
            case awsAccountId
            case awsService
            case coIp
        }
    }

    public struct CoipPool: AWSDecodableShape {
        public struct _PoolCidrsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ARN of the address pool.
        public let poolArn: String?
        /// The address ranges of the address pool.
        @OptionalCustomCoding<ArrayCoder<_PoolCidrsEncoding, String>>
        public var poolCidrs: [String]?
        /// The ID of the address pool.
        public let poolId: String?
        /// The tags.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayRouteTableId: String? = nil, poolArn: String? = nil, poolCidrs: [String]? = nil, poolId: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.poolArn = poolArn
            self.poolCidrs = poolCidrs
            self.poolId = poolId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableId
            case poolArn
            case poolCidrs = "poolCidrSet"
            case poolId
            case tags = "tagSet"
        }
    }

    public struct ConfirmProductInstanceRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// The product code. This must be a product code that you own.
        public let productCode: String

        public init(dryRun: Bool? = nil, instanceId: String, productCode: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.productCode = productCode
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceId = "InstanceId"
            case productCode = "ProductCode"
        }
    }

    public struct ConfirmProductInstanceResult: AWSDecodableShape {
        /// The account ID of the instance owner. This is only present if the product code is attached to the instance.
        public let ownerId: String?
        /// The return value of the request. Returns true if the specified product code is owned by the requester and associated with the specified instance.
        public let `return`: Bool?

        public init(ownerId: String? = nil, return: Bool? = nil) {
            self.ownerId = ownerId
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId
            case `return`
        }
    }

    public struct ConnectionLogOptions: AWSEncodableShape {
        /// The name of the CloudWatch Logs log group. Required if connection logging is enabled.
        public let cloudwatchLogGroup: String?
        /// The name of the CloudWatch Logs log stream to which the connection data is published.
        public let cloudwatchLogStream: String?
        /// Indicates whether connection logging is enabled.
        public let enabled: Bool?

        public init(cloudwatchLogGroup: String? = nil, cloudwatchLogStream: String? = nil, enabled: Bool? = nil) {
            self.cloudwatchLogGroup = cloudwatchLogGroup
            self.cloudwatchLogStream = cloudwatchLogStream
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case cloudwatchLogGroup = "CloudwatchLogGroup"
            case cloudwatchLogStream = "CloudwatchLogStream"
            case enabled = "Enabled"
        }
    }

    public struct ConnectionLogResponseOptions: AWSDecodableShape {
        /// The name of the Amazon CloudWatch Logs log group to which connection logging data is published.
        public let cloudwatchLogGroup: String?
        /// The name of the Amazon CloudWatch Logs log stream to which connection logging data is published.
        public let cloudwatchLogStream: String?
        /// Indicates whether client connection logging is enabled for the Client VPN endpoint.
        public let enabled: Bool?

        public init(cloudwatchLogGroup: String? = nil, cloudwatchLogStream: String? = nil, enabled: Bool? = nil) {
            self.cloudwatchLogGroup = cloudwatchLogGroup
            self.cloudwatchLogStream = cloudwatchLogStream
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case cloudwatchLogGroup = "CloudwatchLogGroup"
            case cloudwatchLogStream = "CloudwatchLogStream"
            case enabled = "Enabled"
        }
    }

    public struct ConnectionNotification: AWSDecodableShape {
        public struct _ConnectionEventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The events for the notification. Valid values are Accept, Connect, Delete, and Reject.
        @OptionalCustomCoding<ArrayCoder<_ConnectionEventsEncoding, String>>
        public var connectionEvents: [String]?
        /// The ARN of the SNS topic for the notification.
        public let connectionNotificationArn: String?
        /// The ID of the notification.
        public let connectionNotificationId: String?
        /// The state of the notification.
        public let connectionNotificationState: ConnectionNotificationState?
        /// The type of notification.
        public let connectionNotificationType: ConnectionNotificationType?
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?

        public init(connectionEvents: [String]? = nil, connectionNotificationArn: String? = nil, connectionNotificationId: String? = nil, connectionNotificationState: ConnectionNotificationState? = nil, connectionNotificationType: ConnectionNotificationType? = nil, serviceId: String? = nil, vpcEndpointId: String? = nil) {
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.connectionNotificationId = connectionNotificationId
            self.connectionNotificationState = connectionNotificationState
            self.connectionNotificationType = connectionNotificationType
            self.serviceId = serviceId
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionEvents
            case connectionNotificationArn
            case connectionNotificationId
            case connectionNotificationState
            case connectionNotificationType
            case serviceId
            case vpcEndpointId
        }
    }

    public struct ConversionTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the conversion task.
        public let conversionTaskId: String?
        /// The time when the task expires. If the upload isn't complete before the expiration time, we automatically cancel the task.
        public let expirationTime: String?
        /// If the task is for importing an instance, this contains information about the import instance task.
        public let importInstance: ImportInstanceTaskDetails?
        /// If the task is for importing a volume, this contains information about the import volume task.
        public let importVolume: ImportVolumeTaskDetails?
        /// The state of the conversion task.
        public let state: ConversionTaskState?
        /// The status message related to the conversion task.
        public let statusMessage: String?
        /// Any tags assigned to the task.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(conversionTaskId: String? = nil, expirationTime: String? = nil, importInstance: ImportInstanceTaskDetails? = nil, importVolume: ImportVolumeTaskDetails? = nil, state: ConversionTaskState? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.conversionTaskId = conversionTaskId
            self.expirationTime = expirationTime
            self.importInstance = importInstance
            self.importVolume = importVolume
            self.state = state
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskId
            case expirationTime
            case importInstance
            case importVolume
            case state
            case statusMessage
            case tags = "tagSet"
        }
    }

    public struct CopyFpgaImageRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The description for the new AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name for the new AFI. The default is the name of the source AFI.
        public let name: String?
        /// The ID of the source AFI.
        public let sourceFpgaImageId: String
        /// The Region that contains the source AFI.
        public let sourceRegion: String

        public init(clientToken: String? = nil, description: String? = nil, dryRun: Bool? = nil, name: String? = nil, sourceFpgaImageId: String, sourceRegion: String) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.name = name
            self.sourceFpgaImageId = sourceFpgaImageId
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case name = "Name"
            case sourceFpgaImageId = "SourceFpgaImageId"
            case sourceRegion = "SourceRegion"
        }
    }

    public struct CopyFpgaImageResult: AWSDecodableShape {
        /// The ID of the new AFI.
        public let fpgaImageId: String?

        public init(fpgaImageId: String? = nil) {
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageId
        }
    }

    public struct CopyImageRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see Ensuring idempotency in the Amazon EC2 API Reference.
        public let clientToken: String?
        /// A description for the new AMI in the destination Region.
        public let description: String?
        /// The Amazon Resource Name (ARN) of the Outpost to which to copy the AMI. Only specify this parameter when copying an AMI from an AWS Region to an Outpost. The AMI must be in the Region of the destination Outpost. You cannot copy an AMI from an Outpost to a Region, from one Outpost to another, or within the same Outpost. For more information, see  Copying AMIs from an AWS Region to an Outpost in the Amazon Elastic Compute Cloud User Guide.
        public let destinationOutpostArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The identifier of the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating encrypted volumes. If this parameter is not specified, your AWS managed CMK for EBS is used. If you specify a CMK, you must also set the encrypted state to true. You can specify a CMK using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   AWS authenticates the CMK asynchronously. Therefore, if you specify an identifier that is not valid, the action can appear to complete, but eventually fails. The specified CMK must exist in the destination Region. Amazon EBS does not support asymmetric CMKs.
        public let kmsKeyId: String?
        /// The name of the new AMI in the destination Region.
        public let name: String
        /// The ID of the AMI to copy.
        public let sourceImageId: String
        /// The name of the Region that contains the AMI to copy.
        public let sourceRegion: String

        public init(clientToken: String? = nil, description: String? = nil, destinationOutpostArn: String? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, name: String, sourceImageId: String, sourceRegion: String) {
            self.clientToken = clientToken
            self.description = description
            self.destinationOutpostArn = destinationOutpostArn
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.name = name
            self.sourceImageId = sourceImageId
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case destinationOutpostArn = "DestinationOutpostArn"
            case dryRun
            case encrypted
            case kmsKeyId
            case name = "Name"
            case sourceImageId = "SourceImageId"
            case sourceRegion = "SourceRegion"
        }
    }

    public struct CopyImageResult: AWSDecodableShape {
        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId
        }
    }

    public struct CopySnapshotRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description for the EBS snapshot.
        public let description: String?
        /// The Amazon Resource Name (ARN) of the Outpost to which to copy the snapshot. Only specify this parameter when copying a snapshot from an AWS Region to an Outpost. The snapshot must be in the Region for the destination Outpost. You cannot copy a snapshot from an Outpost to a Region, from one Outpost to another, or within the same Outpost. For more information, see  Copying snapshots from an AWS Region to an Outpost in the Amazon Elastic Compute Cloud User Guide.
        public let destinationOutpostArn: String?
        /// The destination Region to use in the PresignedUrl parameter of a snapshot copy operation. This parameter is only valid for specifying the destination Region in a PresignedUrl parameter, where it is required. The snapshot copy is sent to the regional endpoint that you sent the HTTP request to (for example, ec2.us-east-1.amazonaws.com). With the AWS CLI, this is specified using the --region parameter or the default Region in your AWS configuration file.
        public let destinationRegion: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots are encrypted, even if you omit this parameter and encryption by default is not enabled. You cannot set this parameter to false. For more information, see Amazon EBS encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the CMK using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.
        public let kmsKeyId: String?
        /// When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see Query requests. The PresignedUrl should use the snapshot source endpoint, the CopySnapshot action, and include the SourceRegion, SourceSnapshotId, and DestinationRegion parameters. The PresignedUrl must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in Authenticating Requests: Using Query Parameters (AWS Signature Version 4) in the Amazon Simple Storage Service API Reference. An invalid or improperly signed PresignedUrl will cause the copy operation to fail asynchronously, and the snapshot will move to an error state.
        public let presignedUrl: String?
        /// The ID of the Region that contains the snapshot to be copied.
        public let sourceRegion: String
        /// The ID of the EBS snapshot to copy.
        public let sourceSnapshotId: String
        /// The tags to apply to the new snapshot.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(description: String? = nil, destinationOutpostArn: String? = nil, destinationRegion: String? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, presignedUrl: String? = nil, sourceRegion: String, sourceSnapshotId: String, tagSpecifications: [TagSpecification]? = nil) {
            self.description = description
            self.destinationOutpostArn = destinationOutpostArn
            self.destinationRegion = destinationRegion
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.presignedUrl = presignedUrl
            self.sourceRegion = sourceRegion
            self.sourceSnapshotId = sourceSnapshotId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case destinationOutpostArn = "DestinationOutpostArn"
            case destinationRegion
            case dryRun
            case encrypted
            case kmsKeyId
            case presignedUrl
            case sourceRegion = "SourceRegion"
            case sourceSnapshotId = "SourceSnapshotId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CopySnapshotResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the new snapshot.
        public let snapshotId: String?
        /// Any tags applied to the new snapshot.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(snapshotId: String? = nil, tags: [Tag]? = nil) {
            self.snapshotId = snapshotId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId
            case tags = "tagSet"
        }
    }

    public struct CpuOptions: AWSDecodableShape {
        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core.
        public let threadsPerCore: Int?

        public init(coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount
            case threadsPerCore
        }
    }

    public struct CpuOptionsRequest: AWSEncodableShape {
        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
        public let threadsPerCore: Int?

        public init(coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "CoreCount"
            case threadsPerCore = "ThreadsPerCore"
        }
    }

    public struct CreateCapacityReservationRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in which to create the Capacity Reservation.
        public let availabilityZone: String?
        /// The ID of the Availability Zone in which to create the Capacity Reservation.
        public let availabilityZoneId: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
        public let ebsOptimized: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited. If the EndDateType is limited, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.
        public let endDate: Date?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an EndDate if the EndDateType is unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must provide an EndDate value if the EndDateType value is limited.
        public let endDateType: EndDateType?
        /// Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
        public let ephemeralStorage: Bool?
        /// The number of instances for which to reserve capacity.
        public let instanceCount: Int
        /// Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.    Default: open
        public let instanceMatchCriteria: InstanceMatchCriteria?
        /// The type of operating system for which to reserve capacity.
        public let instancePlatform: CapacityReservationInstancePlatform
        /// The instance type for which to reserve capacity. For more information, see Instance types in the Amazon EC2 User Guide.
        public let instanceType: String
        /// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity Reservation.
        public let outpostArn: String?
        /// The tags to apply to the Capacity Reservation during launch.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single account.
        public let tenancy: CapacityReservationTenancy?

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, clientToken: String? = nil, dryRun: Bool? = nil, ebsOptimized: Bool? = nil, endDate: Date? = nil, endDateType: EndDateType? = nil, ephemeralStorage: Bool? = nil, instanceCount: Int, instanceMatchCriteria: InstanceMatchCriteria? = nil, instancePlatform: CapacityReservationInstancePlatform, instanceType: String, outpostArn: String? = nil, tagSpecifications: [TagSpecification]? = nil, tenancy: CapacityReservationTenancy? = nil) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.ebsOptimized = ebsOptimized
            self.endDate = endDate
            self.endDateType = endDateType
            self.ephemeralStorage = ephemeralStorage
            self.instanceCount = instanceCount
            self.instanceMatchCriteria = instanceMatchCriteria
            self.instancePlatform = instancePlatform
            self.instanceType = instanceType
            self.outpostArn = outpostArn
            self.tagSpecifications = tagSpecifications
            self.tenancy = tenancy
        }

        public func validate(name: String) throws {
            try self.validate(self.outpostArn, name: "outpostArn", parent: name, pattern: "^arn:aws([a-z-]+)?:outposts:[a-z\\d-]+:\\d{12}:outpost/op-[a-f0-9]{17}$")
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case availabilityZoneId = "AvailabilityZoneId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case ebsOptimized = "EbsOptimized"
            case endDate = "EndDate"
            case endDateType = "EndDateType"
            case ephemeralStorage = "EphemeralStorage"
            case instanceCount = "InstanceCount"
            case instanceMatchCriteria = "InstanceMatchCriteria"
            case instancePlatform = "InstancePlatform"
            case instanceType = "InstanceType"
            case outpostArn = "OutpostArn"
            case tagSpecifications = "TagSpecifications"
            case tenancy = "Tenancy"
        }
    }

    public struct CreateCapacityReservationResult: AWSDecodableShape {
        /// Information about the Capacity Reservation.
        public let capacityReservation: CapacityReservation?

        public init(capacityReservation: CapacityReservation? = nil) {
            self.capacityReservation = capacityReservation
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservation
        }
    }

    public struct CreateCarrierGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to associate with the carrier gateway.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC to associate with the carrier gateway.
        public let vpcId: String

        public init(clientToken: String? = CreateCarrierGatewayRequest.idempotencyToken(), dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateCarrierGatewayResult: AWSDecodableShape {
        /// Information about the carrier gateway.
        public let carrierGateway: CarrierGateway?

        public init(carrierGateway: CarrierGateway? = nil) {
            self.carrierGateway = carrierGateway
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGateway
        }
    }

    public struct CreateClientVpnEndpointRequest: AWSEncodableShape {
        public struct _DnsServersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the authentication method to be used to authenticate clients.
        @CustomCoding<StandardArrayCoder>
        public var authenticationOptions: [ClientVpnAuthenticationRequest]
        /// The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
        public let clientCidrBlock: String
        /// The options for managing connection authorization for new client connections.
        public let clientConnectOptions: ClientConnectOptions?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:   Client connection requests   Client connection results (successful and unsuccessful)   Reasons for unsuccessful client connection requests   Client connection termination time
        public let connectionLogOptions: ConnectionLogOptions
        /// A brief description of the Client VPN endpoint.
        public let description: String?
        /// Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server.
        @OptionalCustomCoding<ArrayCoder<_DnsServersEncoding, String>>
        public var dnsServers: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups to apply to the target network. You must also specify the ID of the VPC that contains the security groups.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// Specify whether to enable the self-service portal for the Client VPN endpoint. Default Value: enabled
        public let selfServicePortal: SelfServicePortal?
        /// The ARN of the server certificate. For more information, see the AWS Certificate Manager User Guide.
        public let serverCertificateArn: String
        /// Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint. By default, split-tunnel on a VPN endpoint is disabled. For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client VPN Endpoint in the AWS Client VPN Administrator Guide.
        public let splitTunnel: Bool?
        /// The tags to apply to the Client VPN endpoint during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The transport protocol to be used by the VPN session. Default value: udp
        public let transportProtocol: TransportProtocol?
        /// The ID of the VPC to associate with the Client VPN endpoint. If no security group IDs are specified in the request, the default security group for the VPC is applied.
        public let vpcId: String?
        /// The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194  Default Value: 443
        public let vpnPort: Int?

        public init(authenticationOptions: [ClientVpnAuthenticationRequest], clientCidrBlock: String, clientConnectOptions: ClientConnectOptions? = nil, clientToken: String? = CreateClientVpnEndpointRequest.idempotencyToken(), connectionLogOptions: ConnectionLogOptions, description: String? = nil, dnsServers: [String]? = nil, dryRun: Bool? = nil, securityGroupIds: [String]? = nil, selfServicePortal: SelfServicePortal? = nil, serverCertificateArn: String, splitTunnel: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, transportProtocol: TransportProtocol? = nil, vpcId: String? = nil, vpnPort: Int? = nil) {
            self.authenticationOptions = authenticationOptions
            self.clientCidrBlock = clientCidrBlock
            self.clientConnectOptions = clientConnectOptions
            self.clientToken = clientToken
            self.connectionLogOptions = connectionLogOptions
            self.description = description
            self.dnsServers = dnsServers
            self.dryRun = dryRun
            self.securityGroupIds = securityGroupIds
            self.selfServicePortal = selfServicePortal
            self.serverCertificateArn = serverCertificateArn
            self.splitTunnel = splitTunnel
            self.tagSpecifications = tagSpecifications
            self.transportProtocol = transportProtocol
            self.vpcId = vpcId
            self.vpnPort = vpnPort
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationOptions = "Authentication"
            case clientCidrBlock = "ClientCidrBlock"
            case clientConnectOptions = "ClientConnectOptions"
            case clientToken = "ClientToken"
            case connectionLogOptions = "ConnectionLogOptions"
            case description = "Description"
            case dnsServers = "DnsServers"
            case dryRun = "DryRun"
            case securityGroupIds = "SecurityGroupId"
            case selfServicePortal = "SelfServicePortal"
            case serverCertificateArn = "ServerCertificateArn"
            case splitTunnel = "SplitTunnel"
            case tagSpecifications = "TagSpecification"
            case transportProtocol = "TransportProtocol"
            case vpcId = "VpcId"
            case vpnPort = "VpnPort"
        }
    }

    public struct CreateClientVpnEndpointResult: AWSDecodableShape {
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// The DNS name to be used by clients when establishing their VPN session.
        public let dnsName: String?
        /// The current state of the Client VPN endpoint.
        public let status: ClientVpnEndpointStatus?

        public init(clientVpnEndpointId: String? = nil, dnsName: String? = nil, status: ClientVpnEndpointStatus? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dnsName = dnsName
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId
            case dnsName
            case status
        }
    }

    public struct CreateClientVpnRouteRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ID of the Client VPN endpoint to which to add the route.
        public let clientVpnEndpointId: String
        /// A brief description of the route.
        public let description: String?
        /// The IPv4 address range, in CIDR notation, of the route destination. For example:   To add a route for Internet access, enter 0.0.0.0/0    To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range   To add a route for an on-premises network, enter the AWS Site-to-Site VPN connection's IPv4 CIDR range   To add a route for the local network, enter the client CIDR range
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint. Alternatively, if you're adding a route for the local network, specify local.
        public let targetVpcSubnetId: String

        public init(clientToken: String? = CreateClientVpnRouteRequest.idempotencyToken(), clientVpnEndpointId: String, description: String? = nil, destinationCidrBlock: String, dryRun: Bool? = nil, targetVpcSubnetId: String) {
            self.clientToken = clientToken
            self.clientVpnEndpointId = clientVpnEndpointId
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.targetVpcSubnetId = targetVpcSubnetId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case targetVpcSubnetId = "TargetVpcSubnetId"
        }
    }

    public struct CreateClientVpnRouteResult: AWSDecodableShape {
        /// The current state of the route.
        public let status: ClientVpnRouteStatus?

        public init(status: ClientVpnRouteStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status
        }
    }

    public struct CreateCustomerGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// For devices that support BGP, the customer gateway's BGP ASN. Default: 65000
        public let bgpAsn: Int
        /// The Amazon Resource Name (ARN) for the customer gateway certificate.
        public let certificateArn: String?
        /// A name for the customer gateway device. Length Constraints: Up to 255 characters.
        public let deviceName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
        public let publicIp: String?
        /// The tags to apply to the customer gateway.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The type of VPN connection that this customer gateway supports (ipsec.1).
        public let type: GatewayType

        public init(bgpAsn: Int, certificateArn: String? = nil, deviceName: String? = nil, dryRun: Bool? = nil, publicIp: String? = nil, tagSpecifications: [TagSpecification]? = nil, type: GatewayType) {
            self.bgpAsn = bgpAsn
            self.certificateArn = certificateArn
            self.deviceName = deviceName
            self.dryRun = dryRun
            self.publicIp = publicIp
            self.tagSpecifications = tagSpecifications
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case bgpAsn = "BgpAsn"
            case certificateArn = "CertificateArn"
            case deviceName = "DeviceName"
            case dryRun
            case publicIp = "IpAddress"
            case tagSpecifications = "TagSpecification"
            case type = "Type"
        }
    }

    public struct CreateCustomerGatewayResult: AWSDecodableShape {
        /// Information about the customer gateway.
        public let customerGateway: CustomerGateway?

        public init(customerGateway: CustomerGateway? = nil) {
            self.customerGateway = customerGateway
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateway
        }
    }

    public struct CreateDefaultSubnetRequest: AWSEncodableShape {
        /// The Availability Zone in which to create the default subnet.
        public let availabilityZone: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(availabilityZone: String, dryRun: Bool? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dryRun = "DryRun"
        }
    }

    public struct CreateDefaultSubnetResult: AWSDecodableShape {
        /// Information about the subnet.
        public let subnet: Subnet?

        public init(subnet: Subnet? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet
        }
    }

    public struct CreateDefaultVpcRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct CreateDefaultVpcResult: AWSDecodableShape {
        /// Information about the VPC.
        public let vpc: Vpc?

        public init(vpc: Vpc? = nil) {
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case vpc
        }
    }

    public struct CreateDhcpOptionsRequest: AWSEncodableShape {
        public struct _DhcpConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A DHCP configuration option.
        @CustomCoding<ArrayCoder<_DhcpConfigurationsEncoding, NewDhcpConfiguration>>
        public var dhcpConfigurations: [NewDhcpConfiguration]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the DHCP option.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dhcpConfigurations: [NewDhcpConfiguration], dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dhcpConfigurations = dhcpConfigurations
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpConfigurations = "dhcpConfiguration"
            case dryRun
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateDhcpOptionsResult: AWSDecodableShape {
        /// A set of DHCP options.
        public let dhcpOptions: DhcpOptions?

        public init(dhcpOptions: DhcpOptions? = nil) {
            self.dhcpOptions = dhcpOptions
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions
        }
    }

    public struct CreateEgressOnlyInternetGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the egress-only internet gateway.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC for which to create the egress-only internet gateway.
        public let vpcId: String

        public init(clientToken: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateEgressOnlyInternetGatewayResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the egress-only internet gateway.
        public let egressOnlyInternetGateway: EgressOnlyInternetGateway?

        public init(clientToken: String? = nil, egressOnlyInternetGateway: EgressOnlyInternetGateway? = nil) {
            self.clientToken = clientToken
            self.egressOnlyInternetGateway = egressOnlyInternetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case egressOnlyInternetGateway
        }
    }

    public struct CreateFleetError: AWSDecodableShape {
        /// The error code that indicates why the instance could not be launched. For more information about error codes, see Error Codes.
        public let errorCode: String?
        /// The error message that describes why the instance could not be launched. For more information about error messages, see Error Codes.
        public let errorMessage: String?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(errorCode: String? = nil, errorMessage: String? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode
            case errorMessage
            case launchTemplateAndOverrides
            case lifecycle
        }
    }

    public struct CreateFleetInstance: AWSDecodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the instances.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?
        /// The value is Windows for Windows instances. Otherwise, the value is blank.
        public let platform: PlatformValues?

        public init(instanceIds: [String]? = nil, instanceType: InstanceType? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil, platform: PlatformValues? = nil) {
            self.instanceIds = instanceIds
            self.instanceType = instanceType
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds
            case instanceType
            case launchTemplateAndOverrides
            case lifecycle
            case platform
        }
    }

    public struct CreateFleetRequest: AWSEncodableShape {
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Reserved.
        public let context: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The configuration for the EC2 Fleet.
        @CustomCoding<ArrayCoder<_LaunchTemplateConfigsEncoding, FleetLaunchTemplateConfigRequest>>
        public var launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]
        /// Describes the configuration of On-Demand Instances in an EC2 Fleet.
        public let onDemandOptions: OnDemandOptionsRequest?
        /// Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for fleets of type maintain. For more information, see EC2 Fleet health checks in the Amazon EC2 User Guide.
        public let replaceUnhealthyInstances: Bool?
        /// Describes the configuration of Spot Instances in an EC2 Fleet.
        public let spotOptions: SpotOptionsRequest?
        /// The key-value pair for tagging the EC2 Fleet request on creation. For more information, see Tagging your resources. If the fleet type is instant, specify a resource type of fleet to tag the fleet or instance to tag the instances at launch. If the fleet type is maintain or request, specify a resource type of fleet to tag the fleet. You cannot specify a resource type of instance. To tag instances at launch, specify the tags in a launch template.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The number of units to request.
        public let targetCapacitySpecification: TargetCapacitySpecificationRequest
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The fleet type. The default value is maintain.    maintain - The EC2 Fleet places an asynchronous request for your desired capacity, and continues to maintain your desired Spot capacity by replenishing interrupted Spot Instances.    request - The EC2 Fleet places an asynchronous one-time request for your desired capacity, but does submit Spot requests in alternative capacity pools if Spot capacity is unavailable, and does not maintain Spot capacity if Spot Instances are interrupted.    instant - The EC2 Fleet places a synchronous one-time request for your desired capacity, and returns errors for any instances that could not be launched.   For more information, see EC2 Fleet request types in the Amazon EC2 User Guide.
        public let type: FleetType?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        public let validFrom: Date?
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
        public let validUntil: Date?

        public init(clientToken: String? = nil, context: String? = nil, dryRun: Bool? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, launchTemplateConfigs: [FleetLaunchTemplateConfigRequest], onDemandOptions: OnDemandOptionsRequest? = nil, replaceUnhealthyInstances: Bool? = nil, spotOptions: SpotOptionsRequest? = nil, tagSpecifications: [TagSpecification]? = nil, targetCapacitySpecification: TargetCapacitySpecificationRequest, terminateInstancesWithExpiration: Bool? = nil, type: FleetType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.clientToken = clientToken
            self.context = context
            self.dryRun = dryRun
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.launchTemplateConfigs = launchTemplateConfigs
            self.onDemandOptions = onDemandOptions
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotOptions = spotOptions
            self.tagSpecifications = tagSpecifications
            self.targetCapacitySpecification = targetCapacitySpecification
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
            try self.validate(self.launchTemplateConfigs, name: "launchTemplateConfigs", parent: name, max: 50)
            try self.validate(self.launchTemplateConfigs, name: "launchTemplateConfigs", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case context = "Context"
            case dryRun = "DryRun"
            case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
            case launchTemplateConfigs = "LaunchTemplateConfigs"
            case onDemandOptions = "OnDemandOptions"
            case replaceUnhealthyInstances = "ReplaceUnhealthyInstances"
            case spotOptions = "SpotOptions"
            case tagSpecifications = "TagSpecification"
            case targetCapacitySpecification = "TargetCapacitySpecification"
            case terminateInstancesWithExpiration = "TerminateInstancesWithExpiration"
            case type = "Type"
            case validFrom = "ValidFrom"
            case validUntil = "ValidUntil"
        }
    }

    public struct CreateFleetResult: AWSDecodableShape {
        public struct _ErrorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the instances that could not be launched by the fleet. Supported only for fleets of type instant.
        @OptionalCustomCoding<ArrayCoder<_ErrorsEncoding, CreateFleetError>>
        public var errors: [CreateFleetError]?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// Information about the instances that were launched by the fleet. Supported only for fleets of type instant.
        @OptionalCustomCoding<ArrayCoder<_InstancesEncoding, CreateFleetInstance>>
        public var instances: [CreateFleetInstance]?

        public init(errors: [CreateFleetError]? = nil, fleetId: String? = nil, instances: [CreateFleetInstance]? = nil) {
            self.errors = errors
            self.fleetId = fleetId
            self.instances = instances
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errorSet"
            case fleetId
            case instances = "fleetInstanceSet"
        }
    }

    public struct CreateFlowLogsRequest: AWSEncodableShape {
        public struct _ResourceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName.
        public let deliverLogsPermissionArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for LogDestinationType. If LogDestinationType is not specified or cloud-watch-logs, specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish to a log group called my-logs, specify arn:aws:logs:us-east-1:123456789012:log-group:my-logs. Alternatively, use LogGroupName instead. If LogDestinationType is s3, specify the ARN of the Amazon S3 bucket. You can also specify a subfolder in the bucket. To specify a subfolder in the bucket, use the following ARN format: bucket_ARN/subfolder_name/. For example, to specify a subfolder named my-logs in a bucket named my-bucket, use the following ARN: arn:aws:s3:::my-bucket/my-logs/. You cannot use AWSLogs as a subfolder name. This is a reserved term.
        public let logDestination: String?
        /// Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify cloud-watch-logs. To publish flow log data to Amazon S3, specify s3. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName. Default: cloud-watch-logs
        public let logDestinationType: LogDestinationType?
        /// The fields to include in the flow log record, in the order in which they should appear. For a list of available fields, see Flow Log Records. If you omit this parameter, the flow log is created using the default format. If you specify this parameter, you must specify at least one field. Specify the fields using the ${field-id} format, separated by spaces. For the AWS CLI, use single quotation marks (' ') to surround the parameter value.
        public let logFormat: String?
        /// The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify LogDestinationType as s3, do not specify DeliverLogsPermissionArn or LogGroupName.
        public let logGroupName: String?
        /// The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes). When a network interface is attached to a Nitro-based instance, the aggregation interval is always 60 seconds or less, regardless of the value that you specify. Default: 600
        public let maxAggregationInterval: Int?
        /// The ID of the subnet, network interface, or VPC for which you want to create a flow log. Constraints: Maximum of 1000 resources
        @CustomCoding<ArrayCoder<_ResourceIdsEncoding, String>>
        public var resourceIds: [String]
        /// The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
        public let resourceType: FlowLogsResourceType
        /// The tags to apply to the flow logs.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
        public let trafficType: TrafficType

        public init(clientToken: String? = nil, deliverLogsPermissionArn: String? = nil, dryRun: Bool? = nil, logDestination: String? = nil, logDestinationType: LogDestinationType? = nil, logFormat: String? = nil, logGroupName: String? = nil, maxAggregationInterval: Int? = nil, resourceIds: [String], resourceType: FlowLogsResourceType, tagSpecifications: [TagSpecification]? = nil, trafficType: TrafficType) {
            self.clientToken = clientToken
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
            self.dryRun = dryRun
            self.logDestination = logDestination
            self.logDestinationType = logDestinationType
            self.logFormat = logFormat
            self.logGroupName = logGroupName
            self.maxAggregationInterval = maxAggregationInterval
            self.resourceIds = resourceIds
            self.resourceType = resourceType
            self.tagSpecifications = tagSpecifications
            self.trafficType = trafficType
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case deliverLogsPermissionArn = "DeliverLogsPermissionArn"
            case dryRun = "DryRun"
            case logDestination = "LogDestination"
            case logDestinationType = "LogDestinationType"
            case logFormat = "LogFormat"
            case logGroupName = "LogGroupName"
            case maxAggregationInterval = "MaxAggregationInterval"
            case resourceIds = "ResourceId"
            case resourceType = "ResourceType"
            case tagSpecifications = "TagSpecification"
            case trafficType = "TrafficType"
        }
    }

    public struct CreateFlowLogsResult: AWSDecodableShape {
        public struct _FlowLogIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// The IDs of the flow logs.
        @OptionalCustomCoding<ArrayCoder<_FlowLogIdsEncoding, String>>
        public var flowLogIds: [String]?
        /// Information about the flow logs that could not be created successfully.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(clientToken: String? = nil, flowLogIds: [String]? = nil, unsuccessful: [UnsuccessfulItem]? = nil) {
            self.clientToken = clientToken
            self.flowLogIds = flowLogIds
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case flowLogIds = "flowLogIdSet"
            case unsuccessful
        }
    }

    public struct CreateFpgaImageRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The location of the encrypted design checkpoint in Amazon S3. The input must be a tarball.
        public let inputStorageLocation: StorageLocation
        /// The location in Amazon S3 for the output logs.
        public let logsStorageLocation: StorageLocation?
        /// A name for the AFI.
        public let name: String?
        /// The tags to apply to the FPGA image during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, description: String? = nil, dryRun: Bool? = nil, inputStorageLocation: StorageLocation, logsStorageLocation: StorageLocation? = nil, name: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.inputStorageLocation = inputStorageLocation
            self.logsStorageLocation = logsStorageLocation
            self.name = name
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case inputStorageLocation = "InputStorageLocation"
            case logsStorageLocation = "LogsStorageLocation"
            case name = "Name"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateFpgaImageResult: AWSDecodableShape {
        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?

        public init(fpgaImageGlobalId: String? = nil, fpgaImageId: String? = nil) {
            self.fpgaImageGlobalId = fpgaImageGlobalId
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageGlobalId
            case fpgaImageId
        }
    }

    public struct CreateImageRequest: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The block device mappings. This parameter cannot be used to modify the encryption status of existing volumes or snapshots. To create an AMI with encrypted snapshots, use the CopyImage action.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// A description for the new image.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// A name for the new image. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String
        /// By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the No Reboot option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.
        public let noReboot: Bool?
        /// The tags to apply to the AMI and snapshots on creation. You can tag the AMI, the snapshots, or both.   To tag the AMI, the value for ResourceType must be image.   To tag the snapshots that are created of the root volume and of other EBS volumes that are attached to the instance, the value for ResourceType must be snapshot. The same tag is applied to all of the snapshots that are created.   If you specify other values for ResourceType, the request fails. To tag an AMI or snapshot after it has been created, see CreateTags.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, description: String? = nil, dryRun: Bool? = nil, instanceId: String, name: String, noReboot: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.description = description
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.name = name
            self.noReboot = noReboot
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case description
            case dryRun
            case instanceId
            case name
            case noReboot
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateImageResult: AWSDecodableShape {
        /// The ID of the new AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId
        }
    }

    public struct CreateInstanceEventWindowRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The cron expression for the event window, for example, * 0-4,20-23 * * 1,5. If you specify a cron expression, you can't specify a time range. Constraints:   Only hour and day of the week values are supported.   For day of the week values, you can specify either integers 0 through 6, or alternative single values SUN through SAT.   The minute, month, and year must be specified by *.   The hour value must be one or a multiple range, for example, 0-4 or 0-4,20-23.   Each hour range must be &gt;= 2 hours, for example, 0-2 or 20-23.   The event window must be &gt;= 4 hours. The combined total time ranges in the event window must be &gt;= 4 hours.   For more information about cron expressions, see cron on the Wikipedia website.
        public let cronExpression: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the event window.
        public let name: String?
        /// The tags to apply to the event window.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The time range for the event window. If you specify a time range, you can't specify a cron expression.
        @OptionalCustomCoding<StandardArrayCoder>
        public var timeRanges: [InstanceEventWindowTimeRangeRequest]?

        public init(cronExpression: String? = nil, dryRun: Bool? = nil, name: String? = nil, tagSpecifications: [TagSpecification]? = nil, timeRanges: [InstanceEventWindowTimeRangeRequest]? = nil) {
            self.cronExpression = cronExpression
            self.dryRun = dryRun
            self.name = name
            self.tagSpecifications = tagSpecifications
            self.timeRanges = timeRanges
        }

        public func validate(name: String) throws {
            try self.timeRanges?.forEach {
                try $0.validate(name: "\(name).timeRanges[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case cronExpression = "CronExpression"
            case dryRun = "DryRun"
            case name = "Name"
            case tagSpecifications = "TagSpecification"
            case timeRanges = "TimeRange"
        }
    }

    public struct CreateInstanceEventWindowResult: AWSDecodableShape {
        /// Information about the event window.
        public let instanceEventWindow: InstanceEventWindow?

        public init(instanceEventWindow: InstanceEventWindow? = nil) {
            self.instanceEventWindow = instanceEventWindow
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindow
        }
    }

    public struct CreateInstanceExportTaskRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description for the conversion task or the resource being exported. The maximum length is 255 characters.
        public let description: String?
        /// The format and location for an export instance task.
        public let exportToS3Task: ExportToS3TaskSpecification
        /// The ID of the instance.
        public let instanceId: String
        /// The tags to apply to the export instance task during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment

        public init(description: String? = nil, exportToS3Task: ExportToS3TaskSpecification, instanceId: String, tagSpecifications: [TagSpecification]? = nil, targetEnvironment: ExportEnvironment) {
            self.description = description
            self.exportToS3Task = exportToS3Task
            self.instanceId = instanceId
            self.tagSpecifications = tagSpecifications
            self.targetEnvironment = targetEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case exportToS3Task = "exportToS3"
            case instanceId
            case tagSpecifications = "TagSpecification"
            case targetEnvironment
        }
    }

    public struct CreateInstanceExportTaskResult: AWSDecodableShape {
        /// Information about the export instance task.
        public let exportTask: ExportTask?

        public init(exportTask: ExportTask? = nil) {
            self.exportTask = exportTask
        }

        private enum CodingKeys: String, CodingKey {
            case exportTask
        }
    }

    public struct CreateInternetGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the internet gateway.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateInternetGatewayResult: AWSDecodableShape {
        /// Information about the internet gateway.
        public let internetGateway: InternetGateway?

        public init(internetGateway: InternetGateway? = nil) {
            self.internetGateway = internetGateway
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateway
        }
    }

    public struct CreateKeyPairRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A unique name for the key pair. Constraints: Up to 255 ASCII characters
        public let keyName: String
        /// The tags to apply to the new key pair.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, keyName: String, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.keyName = keyName
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case keyName = "KeyName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateLaunchTemplateRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The information for the launch template.
        public let launchTemplateData: RequestLaunchTemplateData
        /// A name for the launch template.
        public let launchTemplateName: String
        /// The tags to apply to the launch template during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// A description for the first version of the launch template.
        public let versionDescription: String?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, launchTemplateData: RequestLaunchTemplateData, launchTemplateName: String, tagSpecifications: [TagSpecification]? = nil, versionDescription: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.launchTemplateData = launchTemplateData
            self.launchTemplateName = launchTemplateName
            self.tagSpecifications = tagSpecifications
            self.versionDescription = versionDescription
        }

        public func validate(name: String) throws {
            try self.launchTemplateData.validate(name: "\(name).launchTemplateData")
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
            try self.validate(self.versionDescription, name: "versionDescription", parent: name, max: 255)
            try self.validate(self.versionDescription, name: "versionDescription", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case launchTemplateData = "LaunchTemplateData"
            case launchTemplateName = "LaunchTemplateName"
            case tagSpecifications = "TagSpecification"
            case versionDescription = "VersionDescription"
        }
    }

    public struct CreateLaunchTemplateResult: AWSDecodableShape {
        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?
        /// If the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.
        public let warning: ValidationWarning?

        public init(launchTemplate: LaunchTemplate? = nil, warning: ValidationWarning? = nil) {
            self.launchTemplate = launchTemplate
            self.warning = warning
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate
            case warning
        }
    }

    public struct CreateLaunchTemplateVersionRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The information for the launch template.
        public let launchTemplateData: RequestLaunchTemplateData
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?
        /// The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in LaunchTemplateData. Snapshots applied to the block device mapping are ignored when creating a new version unless they are explicitly included.
        public let sourceVersion: String?
        /// A description for the version of the launch template.
        public let versionDescription: String?

        public init(clientToken: String? = nil, dryRun: Bool? = nil, launchTemplateData: RequestLaunchTemplateData, launchTemplateId: String? = nil, launchTemplateName: String? = nil, sourceVersion: String? = nil, versionDescription: String? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.launchTemplateData = launchTemplateData
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.sourceVersion = sourceVersion
            self.versionDescription = versionDescription
        }

        public func validate(name: String) throws {
            try self.launchTemplateData.validate(name: "\(name).launchTemplateData")
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
            try self.validate(self.versionDescription, name: "versionDescription", parent: name, max: 255)
            try self.validate(self.versionDescription, name: "versionDescription", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case launchTemplateData = "LaunchTemplateData"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case sourceVersion = "SourceVersion"
            case versionDescription = "VersionDescription"
        }
    }

    public struct CreateLaunchTemplateVersionResult: AWSDecodableShape {
        /// Information about the launch template version.
        public let launchTemplateVersion: LaunchTemplateVersion?
        /// If the new version of the launch template contains parameters or parameter combinations that are not valid, an error code and an error message are returned for each issue that's found.
        public let warning: ValidationWarning?

        public init(launchTemplateVersion: LaunchTemplateVersion? = nil, warning: ValidationWarning? = nil) {
            self.launchTemplateVersion = launchTemplateVersion
            self.warning = warning
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateVersion
            case warning
        }
    }

    public struct CreateLocalGatewayRouteRequest: AWSEncodableShape {
        /// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String

        public init(destinationCidrBlock: String, dryRun: Bool? = nil, localGatewayRouteTableId: String, localGatewayVirtualInterfaceGroupId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case localGatewayVirtualInterfaceGroupId = "LocalGatewayVirtualInterfaceGroupId"
        }
    }

    public struct CreateLocalGatewayRouteResult: AWSDecodableShape {
        /// Information about the route.
        public let route: LocalGatewayRoute?

        public init(route: LocalGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route
        }
    }

    public struct CreateLocalGatewayRouteTableVpcAssociationRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String
        /// The tags to assign to the local gateway route table VPC association.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, localGatewayRouteTableId: String, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateLocalGatewayRouteTableVpcAssociationResult: AWSDecodableShape {
        /// Information about the association.
        public let localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation?

        public init(localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation? = nil) {
            self.localGatewayRouteTableVpcAssociation = localGatewayRouteTableVpcAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVpcAssociation
        }
    }

    public struct CreateManagedPrefixListRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address type. Valid Values: IPv4 | IPv6
        public let addressFamily: String
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Up to 255 UTF-8 characters in length.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more entries for the prefix list.
        @OptionalCustomCoding<StandardArrayCoder>
        public var entries: [AddPrefixListEntry]?
        /// The maximum number of entries for the prefix list.
        public let maxEntries: Int
        /// A name for the prefix list. Constraints: Up to 255 characters in length. The name cannot start with com.amazonaws.
        public let prefixListName: String
        /// The tags to apply to the prefix list during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(addressFamily: String, clientToken: String? = CreateManagedPrefixListRequest.idempotencyToken(), dryRun: Bool? = nil, entries: [AddPrefixListEntry]? = nil, maxEntries: Int, prefixListName: String, tagSpecifications: [TagSpecification]? = nil) {
            self.addressFamily = addressFamily
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.entries = entries
            self.maxEntries = maxEntries
            self.prefixListName = prefixListName
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.validate(self.entries, name: "entries", parent: name, max: 100)
            try self.validate(self.entries, name: "entries", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily = "AddressFamily"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case entries = "Entry"
            case maxEntries = "MaxEntries"
            case prefixListName = "PrefixListName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateManagedPrefixListResult: AWSDecodableShape {
        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList
        }
    }

    public struct CreateNatGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// [Public NAT gateways only] The allocation ID of an Elastic IP address to associate with the NAT gateway. You cannot specify an Elastic IP address with a private NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it.
        public let allocationId: String?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency. Constraint: Maximum 64 ASCII characters.
        public let clientToken: String?
        /// Indicates whether the NAT gateway supports public or private connectivity. The default is public connectivity.
        public let connectivityType: ConnectivityType?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The subnet in which to create the NAT gateway.
        public let subnetId: String
        /// The tags to assign to the NAT gateway.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(allocationId: String? = nil, clientToken: String? = CreateNatGatewayRequest.idempotencyToken(), connectivityType: ConnectivityType? = nil, dryRun: Bool? = nil, subnetId: String, tagSpecifications: [TagSpecification]? = nil) {
            self.allocationId = allocationId
            self.clientToken = clientToken
            self.connectivityType = connectivityType
            self.dryRun = dryRun
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case clientToken = "ClientToken"
            case connectivityType = "ConnectivityType"
            case dryRun = "DryRun"
            case subnetId = "SubnetId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateNatGatewayResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.
        public let clientToken: String?
        /// Information about the NAT gateway.
        public let natGateway: NatGateway?

        public init(clientToken: String? = nil, natGateway: NatGateway? = nil) {
            self.clientToken = clientToken
            self.natGateway = natGateway
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case natGateway
        }
    }

    public struct CreateNetworkAclEntryRequest: AWSEncodableShape {
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let cidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet).
        public let egress: Bool
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64).
        public let ipv6CidrBlock: String?
        /// The ID of the network ACL.
        public let networkAclId: String
        /// TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
        public let portRange: PortRange?
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction
        /// The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number. Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.
        public let ruleNumber: Int

        public init(cidrBlock: String? = nil, dryRun: Bool? = nil, egress: Bool, icmpTypeCode: IcmpTypeCode? = nil, ipv6CidrBlock: String? = nil, networkAclId: String, portRange: PortRange? = nil, protocol: String, ruleAction: RuleAction, ruleNumber: Int) {
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.networkAclId = networkAclId
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock
            case dryRun
            case egress
            case icmpTypeCode = "Icmp"
            case ipv6CidrBlock
            case networkAclId
            case portRange
            case `protocol`
            case ruleAction
            case ruleNumber
        }
    }

    public struct CreateNetworkAclRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the network ACL.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case tagSpecifications = "TagSpecification"
            case vpcId
        }
    }

    public struct CreateNetworkAclResult: AWSDecodableShape {
        /// Information about the network ACL.
        public let networkAcl: NetworkAcl?

        public init(networkAcl: NetworkAcl? = nil) {
            self.networkAcl = networkAcl
        }

        private enum CodingKeys: String, CodingKey {
            case networkAcl
        }
    }

    public struct CreateNetworkInsightsPathRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String
        /// The AWS resource that is the destination of the path.
        public let destination: String
        /// The IP address of the AWS resource that is the destination of the path.
        public let destinationIp: String?
        /// The destination port.
        public let destinationPort: Int?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The protocol.
        public let `protocol`: Protocol
        /// The AWS resource that is the source of the path.
        public let source: String
        /// The IP address of the AWS resource that is the source of the path.
        public let sourceIp: String?
        /// The tags to add to the path.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String = CreateNetworkInsightsPathRequest.idempotencyToken(), destination: String, destinationIp: String? = nil, destinationPort: Int? = nil, dryRun: Bool? = nil, protocol: Protocol, source: String, sourceIp: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.destination = destination
            self.destinationIp = destinationIp
            self.destinationPort = destinationPort
            self.dryRun = dryRun
            self.`protocol` = `protocol`
            self.source = source
            self.sourceIp = sourceIp
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.validate(self.destinationIp, name: "destinationIp", parent: name, max: 15)
            try self.validate(self.destinationIp, name: "destinationIp", parent: name, min: 0)
            try self.validate(self.destinationIp, name: "destinationIp", parent: name, pattern: "^([0-9]{1,3}.){3}[0-9]{1,3}$")
            try self.validate(self.destinationPort, name: "destinationPort", parent: name, max: 65535)
            try self.validate(self.destinationPort, name: "destinationPort", parent: name, min: 1)
            try self.validate(self.sourceIp, name: "sourceIp", parent: name, max: 15)
            try self.validate(self.sourceIp, name: "sourceIp", parent: name, min: 0)
            try self.validate(self.sourceIp, name: "sourceIp", parent: name, pattern: "^([0-9]{1,3}.){3}[0-9]{1,3}$")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case destination = "Destination"
            case destinationIp = "DestinationIp"
            case destinationPort = "DestinationPort"
            case dryRun = "DryRun"
            case `protocol` = "Protocol"
            case source = "Source"
            case sourceIp = "SourceIp"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateNetworkInsightsPathResult: AWSDecodableShape {
        /// Information about the path.
        public let networkInsightsPath: NetworkInsightsPath?

        public init(networkInsightsPath: NetworkInsightsPath? = nil) {
            self.networkInsightsPath = networkInsightsPath
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsPath
        }
    }

    public struct CreateNetworkInterfacePermissionRequest: AWSEncodableShape {
        /// The account ID.
        public let awsAccountId: String?
        /// The Amazon Web Service. Currently not supported.
        public let awsService: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The type of permission to grant.
        public let permission: InterfacePermissionType

        public init(awsAccountId: String? = nil, awsService: String? = nil, dryRun: Bool? = nil, networkInterfaceId: String, permission: InterfacePermissionType) {
            self.awsAccountId = awsAccountId
            self.awsService = awsService
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountId = "AwsAccountId"
            case awsService = "AwsService"
            case dryRun = "DryRun"
            case networkInterfaceId = "NetworkInterfaceId"
            case permission = "Permission"
        }
    }

    public struct CreateNetworkInterfacePermissionResult: AWSDecodableShape {
        /// Information about the permission for the network interface.
        public let interfacePermission: NetworkInterfacePermission?

        public init(interfacePermission: NetworkInterfacePermission? = nil) {
            self.interfacePermission = interfacePermission
        }

        private enum CodingKeys: String, CodingKey {
            case interfacePermission
        }
    }

    public struct CreateNetworkInterfaceRequest: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// A description for the network interface.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// Indicates the type of network interface. To create an Elastic Fabric Adapter (EFA), specify efa. For more information, see  Elastic Fabric Adapter in the Amazon Elastic Compute Cloud User Guide. To create a trunk network interface, specify efa. For more information, see  Network interface trunking in the Amazon Elastic Compute Cloud User Guide.
        public let interfaceType: NetworkInterfaceCreationType?
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the AssignIpv6AddressOnCreation attribute set to true, you can specify 0 to override this setting.
        public let ipv6AddressCount: Int?
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
        @OptionalCustomCoding<ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in privateIpAddresses as primary (only one IP address can be designated as primary).
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        @OptionalCustomCoding<ArrayCoder<_PrivateIpAddressesEncoding, PrivateIpAddressSpecification>>
        public var privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses. The number of IP addresses you can assign to a network interface varies by instance type. For more information, see IP Addresses Per ENI Per Instance Type in the Amazon Virtual Private Cloud User Guide.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet to associate with the network interface.
        public let subnetId: String
        /// The tags to apply to the new network interface.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateNetworkInterfaceRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, groups: [String]? = nil, interfaceType: NetworkInterfaceCreationType? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description
            case dryRun
            case groups = "SecurityGroupId"
            case interfaceType = "InterfaceType"
            case ipv6AddressCount
            case ipv6Addresses
            case privateIpAddress
            case privateIpAddresses
            case secondaryPrivateIpAddressCount
            case subnetId
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateNetworkInterfaceResult: AWSDecodableShape {
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let clientToken: String?
        /// Information about the network interface.
        public let networkInterface: NetworkInterface?

        public init(clientToken: String? = nil, networkInterface: NetworkInterface? = nil) {
            self.clientToken = clientToken
            self.networkInterface = networkInterface
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case networkInterface
        }
    }

    public struct CreatePlacementGroupRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A name for the placement group. Must be unique within the scope of your account for the Region. Constraints: Up to 255 ASCII characters
        public let groupName: String?
        /// The number of partitions. Valid only when Strategy is set to partition.
        public let partitionCount: Int?
        /// The placement strategy.
        public let strategy: PlacementStrategy?
        /// The tags to apply to the new placement group.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, groupName: String? = nil, partitionCount: Int? = nil, strategy: PlacementStrategy? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.groupName = groupName
            self.partitionCount = partitionCount
            self.strategy = strategy
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case groupName
            case partitionCount = "PartitionCount"
            case strategy
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreatePlacementGroupResult: AWSDecodableShape {
        public let placementGroup: PlacementGroup?

        public init(placementGroup: PlacementGroup? = nil) {
            self.placementGroup = placementGroup
        }

        private enum CodingKeys: String, CodingKey {
            case placementGroup
        }
    }

    public struct CreateReplaceRootVolumeTaskRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance for which to replace the root volume.
        public let instanceId: String
        /// The ID of the snapshot from which to restore the replacement root volume. If you want to restore the volume to the initial launch state, omit this parameter.
        public let snapshotId: String?
        /// The tags to apply to the root volume replacement task.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateReplaceRootVolumeTaskRequest.idempotencyToken(), dryRun: Bool? = nil, instanceId: String, snapshotId: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.snapshotId = snapshotId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
            case snapshotId = "SnapshotId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateReplaceRootVolumeTaskResult: AWSDecodableShape {
        /// Information about the root volume replacement task.
        public let replaceRootVolumeTask: ReplaceRootVolumeTask?

        public init(replaceRootVolumeTask: ReplaceRootVolumeTask? = nil) {
            self.replaceRootVolumeTask = replaceRootVolumeTask
        }

        private enum CodingKeys: String, CodingKey {
            case replaceRootVolumeTask
        }
    }

    public struct CreateReservedInstancesListingRequest: AWSEncodableShape {
        public struct _PriceSchedulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see Ensuring Idempotency.
        public let clientToken: String
        /// The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call.
        public let instanceCount: Int
        /// A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term.
        @CustomCoding<ArrayCoder<_PriceSchedulesEncoding, PriceScheduleSpecification>>
        public var priceSchedules: [PriceScheduleSpecification]
        /// The ID of the active Standard Reserved Instance.
        public let reservedInstancesId: String

        public init(clientToken: String, instanceCount: Int, priceSchedules: [PriceScheduleSpecification], reservedInstancesId: String) {
            self.clientToken = clientToken
            self.instanceCount = instanceCount
            self.priceSchedules = priceSchedules
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case instanceCount
            case priceSchedules
            case reservedInstancesId
        }
    }

    public struct CreateReservedInstancesListingResult: AWSDecodableShape {
        public struct _ReservedInstancesListingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Standard Reserved Instance listing.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstancesListingsEncoding, ReservedInstancesListing>>
        public var reservedInstancesListings: [ReservedInstancesListing]?

        public init(reservedInstancesListings: [ReservedInstancesListing]? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct CreateRestoreImageTaskRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of the S3 bucket that contains the stored AMI object.
        public let bucket: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name for the restored AMI. The name must be unique for AMIs in the Region for this account. If you do not provide a name, the new AMI gets the same name as the original AMI.
        public let name: String?
        /// The name of the stored AMI object in the bucket.
        public let objectKey: String
        /// The tags to apply to the AMI and snapshots on restoration. You can tag the AMI, the snapshots, or both.   To tag the AMI, the value for ResourceType must be image.   To tag the snapshots, the value for ResourceType must be snapshot. The same tag is applied to all of the snapshots that are created.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(bucket: String, dryRun: Bool? = nil, name: String? = nil, objectKey: String, tagSpecifications: [TagSpecification]? = nil) {
            self.bucket = bucket
            self.dryRun = dryRun
            self.name = name
            self.objectKey = objectKey
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case dryRun = "DryRun"
            case name = "Name"
            case objectKey = "ObjectKey"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateRestoreImageTaskResult: AWSDecodableShape {
        /// The AMI ID.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId
        }
    }

    public struct CreateRouteRequest: AWSEncodableShape {
        /// The ID of the carrier gateway. You can only use this option when the VPC contains a subnet which is associated with a Wavelength Zone.
        public let carrierGatewayId: String?
        /// The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
        public let destinationIpv6CidrBlock: String?
        /// The ID of a prefix list used for the destination match.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [IPv6 traffic only] The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of an internet gateway or virtual private gateway attached to your VPC.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
        public let instanceId: String?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// The ID of the route table for the route.
        public let routeTableId: String
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
        public let vpcEndpointId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, localGatewayId: String? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, routeTableId: String, transitGatewayId: String? = nil, vpcEndpointId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.localGatewayId = localGatewayId
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.routeTableId = routeTableId
            self.transitGatewayId = transitGatewayId
            self.vpcEndpointId = vpcEndpointId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "CarrierGatewayId"
            case destinationCidrBlock
            case destinationIpv6CidrBlock
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun
            case egressOnlyInternetGatewayId
            case gatewayId
            case instanceId
            case localGatewayId = "LocalGatewayId"
            case natGatewayId
            case networkInterfaceId
            case routeTableId
            case transitGatewayId = "TransitGatewayId"
            case vpcEndpointId = "VpcEndpointId"
            case vpcPeeringConnectionId
        }
    }

    public struct CreateRouteResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct CreateRouteTableRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to the route table.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case tagSpecifications = "TagSpecification"
            case vpcId
        }
    }

    public struct CreateRouteTableResult: AWSDecodableShape {
        /// Information about the route table.
        public let routeTable: RouteTable?

        public init(routeTable: RouteTable? = nil) {
            self.routeTable = routeTable
        }

        private enum CodingKeys: String, CodingKey {
            case routeTable
        }
    }

    public struct CreateSecurityGroupRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description for the security group. This is informational only. Constraints: Up to 255 characters in length Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let description: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the security group. Constraints: Up to 255 characters in length. Cannot start with sg-. Constraints for EC2-Classic: ASCII characters Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let groupName: String
        /// The tags to assign to the security group.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
        public let vpcId: String?

        public init(description: String, dryRun: Bool? = nil, groupName: String, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.groupName = groupName
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "GroupDescription"
            case dryRun
            case groupName = "GroupName"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateSecurityGroupResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the security group.
        public let groupId: String?
        /// The tags assigned to the security group.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(groupId: String? = nil, tags: [Tag]? = nil) {
            self.groupId = groupId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case groupId
            case tags = "tagSet"
        }
    }

    public struct CreateSnapshotRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description for the snapshot.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Name (ARN) of the AWS Outpost on which to create a local snapshot.   To create a snapshot of a volume in a Region, omit this parameter. The snapshot is created in the same Region as the volume.   To create a snapshot of a volume on an Outpost and store the snapshot in the Region, omit this parameter. The snapshot is created in the Region for the Outpost.   To create a snapshot of a volume on an Outpost and store the snapshot on an Outpost, specify the ARN of the destination Outpost. The snapshot must be created on the same Outpost as the volume.   For more information, see  Creating local snapshots from volumes on an Outpost in the Amazon Elastic Compute Cloud User Guide.
        public let outpostArn: String?
        /// The tags to apply to the snapshot during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the EBS volume.
        public let volumeId: String

        public init(description: String? = nil, dryRun: Bool? = nil, outpostArn: String? = nil, tagSpecifications: [TagSpecification]? = nil, volumeId: String) {
            self.description = description
            self.dryRun = dryRun
            self.outpostArn = outpostArn
            self.tagSpecifications = tagSpecifications
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun
            case outpostArn = "OutpostArn"
            case tagSpecifications = "TagSpecification"
            case volumeId = "VolumeId"
        }
    }

    public struct CreateSnapshotsRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Copies the tags from the specified volume to corresponding snapshot.
        public let copyTagsFromSource: CopyTagsFromSource?
        ///  A description propagated to every snapshot specified by the instance.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance to specify which volumes should be included in the snapshots.
        public let instanceSpecification: InstanceSpecification
        /// The Amazon Resource Name (ARN) of the AWS Outpost on which to create the local snapshots.   To create snapshots from an instance in a Region, omit this parameter. The snapshots are created in the same Region as the instance.   To create snapshots from an instance on an Outpost and store the snapshots in the Region, omit this parameter. The snapshots are created in the Region for the Outpost.   To create snapshots from an instance on an Outpost and store the snapshots on an Outpost, specify the ARN of the destination Outpost. The snapshots must be created on the same Outpost as the instance.   For more information, see  Creating multi-volume local snapshots from instances on an Outpost in the Amazon Elastic Compute Cloud User Guide.
        public let outpostArn: String?
        /// Tags to apply to every snapshot specified by the instance.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(copyTagsFromSource: CopyTagsFromSource? = nil, description: String? = nil, dryRun: Bool? = nil, instanceSpecification: InstanceSpecification, outpostArn: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.copyTagsFromSource = copyTagsFromSource
            self.description = description
            self.dryRun = dryRun
            self.instanceSpecification = instanceSpecification
            self.outpostArn = outpostArn
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case copyTagsFromSource = "CopyTagsFromSource"
            case description = "Description"
            case dryRun = "DryRun"
            case instanceSpecification = "InstanceSpecification"
            case outpostArn = "OutpostArn"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateSnapshotsResult: AWSDecodableShape {
        public struct _SnapshotsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// List of snapshots.
        @OptionalCustomCoding<ArrayCoder<_SnapshotsEncoding, SnapshotInfo>>
        public var snapshots: [SnapshotInfo]?

        public init(snapshots: [SnapshotInfo]? = nil) {
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case snapshots = "snapshotSet"
        }
    }

    public struct CreateSpotDatafeedSubscriptionRequest: AWSEncodableShape {
        /// The name of the Amazon S3 bucket in which to store the Spot Instance data feed. For more information about bucket names, see Rules for bucket naming in the Amazon S3 Developer Guide.
        public let bucket: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The prefix for the data feed file names.
        public let prefix: String?

        public init(bucket: String, dryRun: Bool? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.dryRun = dryRun
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket
            case dryRun
            case prefix
        }
    }

    public struct CreateSpotDatafeedSubscriptionResult: AWSDecodableShape {
        /// The Spot Instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription
        }
    }

    public struct CreateStoreImageTaskRequest: AWSEncodableShape {
        public struct _S3ObjectTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of the S3 bucket in which the AMI object will be stored. The bucket must be in the Region in which the request is being made. The AMI object appears in the bucket only after the upload task has completed.
        public let bucket: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String
        /// The tags to apply to the AMI object that will be stored in the S3 bucket.
        @OptionalCustomCoding<ArrayCoder<_S3ObjectTagsEncoding, S3ObjectTag>>
        public var s3ObjectTags: [S3ObjectTag]?

        public init(bucket: String, dryRun: Bool? = nil, imageId: String, s3ObjectTags: [S3ObjectTag]? = nil) {
            self.bucket = bucket
            self.dryRun = dryRun
            self.imageId = imageId
            self.s3ObjectTags = s3ObjectTags
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case dryRun = "DryRun"
            case imageId = "ImageId"
            case s3ObjectTags = "S3ObjectTag"
        }
    }

    public struct CreateStoreImageTaskResult: AWSDecodableShape {
        /// The name of the stored AMI object in the S3 bucket.
        public let objectKey: String?

        public init(objectKey: String? = nil) {
            self.objectKey = objectKey
        }

        private enum CodingKeys: String, CodingKey {
            case objectKey
        }
    }

    public struct CreateSubnetRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone or Local Zone for the subnet. Default: AWS selects one for you. If you create more than one subnet in your VPC, we do not necessarily select a different zone for each subnet. To create a subnet in a Local Zone, set this value to the Local Zone ID, for example us-west-2-lax-1a. For information about the Regions that support Local Zones, see Available Regions in the Amazon Elastic Compute Cloud User Guide. To create a subnet in an Outpost, set this value to the Availability Zone for the Outpost and specify the Outpost ARN.
        public let availabilityZone: String?
        /// The AZ ID or the Local Zone ID of the subnet.
        public let availabilityZoneId: String?
        /// The IPv4 network range for the subnet, in CIDR notation. For example, 10.0.0.0/24. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let cidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.
        public let ipv6CidrBlock: String?
        /// The Amazon Resource Name (ARN) of the Outpost. If you specify an Outpost ARN, you must also specify the Availability Zone of the Outpost subnet.
        public let outpostArn: String?
        /// The tags to assign to the subnet.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the VPC.
        public let vpcId: String

        public init(availabilityZone: String? = nil, availabilityZoneId: String? = nil, cidrBlock: String, dryRun: Bool? = nil, ipv6CidrBlock: String? = nil, outpostArn: String? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String) {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.ipv6CidrBlock = ipv6CidrBlock
            self.outpostArn = outpostArn
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case availabilityZoneId = "AvailabilityZoneId"
            case cidrBlock = "CidrBlock"
            case dryRun
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case outpostArn = "OutpostArn"
            case tagSpecifications = "TagSpecification"
            case vpcId = "VpcId"
        }
    }

    public struct CreateSubnetResult: AWSDecodableShape {
        /// Information about the subnet.
        public let subnet: Subnet?

        public init(subnet: Subnet? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet
        }
    }

    public struct CreateTagsRequest: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
        @CustomCoding<StandardArrayCoder>
        public var resources: [String]
        /// The tags. The value parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.
        @CustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]

        public init(dryRun: Bool? = nil, resources: [String], tags: [Tag]) {
            self.dryRun = dryRun
            self.resources = resources
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case resources = "ResourceId"
            case tags = "Tag"
        }
    }

    public struct CreateTrafficMirrorFilterRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror filter.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to assign to a Traffic Mirror filter.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateTrafficMirrorFilterRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateTrafficMirrorFilterResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the Traffic Mirror filter.
        public let trafficMirrorFilter: TrafficMirrorFilter?

        public init(clientToken: String? = nil, trafficMirrorFilter: TrafficMirrorFilter? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorFilter = trafficMirrorFilter
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case trafficMirrorFilter
        }
    }

    public struct CreateTrafficMirrorFilterRuleRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror rule.
        public let description: String?
        /// The destination CIDR block to assign to the Traffic Mirror rule.
        public let destinationCidrBlock: String
        /// The destination port range.
        public let destinationPortRange: TrafficMirrorPortRangeRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The protocol, for example UDP, to assign to the Traffic Mirror rule. For information about the protocol value, see Protocol Numbers on the Internet Assigned Numbers Authority (IANA) website.
        public let `protocol`: Int?
        /// The action to take (accept | reject) on the filtered traffic.
        public let ruleAction: TrafficMirrorRuleAction
        /// The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
        public let ruleNumber: Int
        /// The source CIDR block to assign to the Traffic Mirror rule.
        public let sourceCidrBlock: String
        /// The source port range.
        public let sourcePortRange: TrafficMirrorPortRangeRequest?
        /// The type of traffic (ingress | egress).
        public let trafficDirection: TrafficDirection
        /// The ID of the filter that this rule is associated with.
        public let trafficMirrorFilterId: String

        public init(clientToken: String? = CreateTrafficMirrorFilterRuleRequest.idempotencyToken(), description: String? = nil, destinationCidrBlock: String, destinationPortRange: TrafficMirrorPortRangeRequest? = nil, dryRun: Bool? = nil, protocol: Int? = nil, ruleAction: TrafficMirrorRuleAction, ruleNumber: Int, sourceCidrBlock: String, sourcePortRange: TrafficMirrorPortRangeRequest? = nil, trafficDirection: TrafficDirection, trafficMirrorFilterId: String) {
            self.clientToken = clientToken
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.dryRun = dryRun
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
            self.trafficDirection = trafficDirection
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationPortRange = "DestinationPortRange"
            case dryRun = "DryRun"
            case `protocol` = "Protocol"
            case ruleAction = "RuleAction"
            case ruleNumber = "RuleNumber"
            case sourceCidrBlock = "SourceCidrBlock"
            case sourcePortRange = "SourcePortRange"
            case trafficDirection = "TrafficDirection"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
        }
    }

    public struct CreateTrafficMirrorFilterRuleResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The Traffic Mirror rule.
        public let trafficMirrorFilterRule: TrafficMirrorFilterRule?

        public init(clientToken: String? = nil, trafficMirrorFilterRule: TrafficMirrorFilterRule? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorFilterRule = trafficMirrorFilterRule
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case trafficMirrorFilterRule
        }
    }

    public struct CreateTrafficMirrorSessionRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror session.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the source network interface.
        public let networkInterfaceId: String
        /// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. If you do not want to mirror the entire packet, use the PacketLength parameter to specify the number of bytes in each packet to mirror.
        public let packetLength: Int?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public let sessionNumber: Int
        /// The tags to assign to a Traffic Mirror session.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String
        /// The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see RFC 7348. If you do not specify a VirtualNetworkId, an account-wide unique id is chosen at random.
        public let virtualNetworkId: Int?

        public init(clientToken: String? = CreateTrafficMirrorSessionRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, networkInterfaceId: String, packetLength: Int? = nil, sessionNumber: Int, tagSpecifications: [TagSpecification]? = nil, trafficMirrorFilterId: String, trafficMirrorTargetId: String, virtualNetworkId: Int? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.packetLength = packetLength
            self.sessionNumber = sessionNumber
            self.tagSpecifications = tagSpecifications
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case networkInterfaceId = "NetworkInterfaceId"
            case packetLength = "PacketLength"
            case sessionNumber = "SessionNumber"
            case tagSpecifications = "TagSpecification"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
            case trafficMirrorTargetId = "TrafficMirrorTargetId"
            case virtualNetworkId = "VirtualNetworkId"
        }
    }

    public struct CreateTrafficMirrorSessionResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the Traffic Mirror session.
        public let trafficMirrorSession: TrafficMirrorSession?

        public init(clientToken: String? = nil, trafficMirrorSession: TrafficMirrorSession? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorSession = trafficMirrorSession
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case trafficMirrorSession
        }
    }

    public struct CreateTrafficMirrorTargetRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// The description of the Traffic Mirror target.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The network interface ID that is associated with the target.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
        public let networkLoadBalancerArn: String?
        /// The tags to assign to the Traffic Mirror target.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = CreateTrafficMirrorTargetRequest.idempotencyToken(), description: String? = nil, dryRun: Bool? = nil, networkInterfaceId: String? = nil, networkLoadBalancerArn: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.networkLoadBalancerArn = networkLoadBalancerArn
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case dryRun = "DryRun"
            case networkInterfaceId = "NetworkInterfaceId"
            case networkLoadBalancerArn = "NetworkLoadBalancerArn"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateTrafficMirrorTargetResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Information about the Traffic Mirror target.
        public let trafficMirrorTarget: TrafficMirrorTarget?

        public init(clientToken: String? = nil, trafficMirrorTarget: TrafficMirrorTarget? = nil) {
            self.clientToken = clientToken
            self.trafficMirrorTarget = trafficMirrorTarget
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case trafficMirrorTarget
        }
    }

    public struct CreateTransitGatewayConnectPeerRequest: AWSEncodableShape {
        public struct _InsideCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The BGP options for the Connect peer.
        public let bgpOptions: TransitGatewayConnectRequestBgpOptions?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The range of inside IP addresses that are used for BGP peering. You must specify a size /29 IPv4 CIDR block from the 169.254.0.0/16 range. The first address from the range must be configured on the appliance as the BGP IP address. You can also optionally specify a size /125 IPv6 CIDR block from the fd00::/8 range.
        @CustomCoding<ArrayCoder<_InsideCidrBlocksEncoding, String>>
        public var insideCidrBlocks: [String]
        /// The peer IP address (GRE outer IP address) on the appliance side of the Connect peer.
        public let peerAddress: String
        /// The tags to apply to the Connect peer.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The peer IP address (GRE outer IP address) on the transit gateway side of the Connect peer, which must be specified from a transit gateway CIDR block. If not specified, Amazon automatically assigns the first available IP address from the transit gateway CIDR block.
        public let transitGatewayAddress: String?
        /// The ID of the Connect attachment.
        public let transitGatewayAttachmentId: String

        public init(bgpOptions: TransitGatewayConnectRequestBgpOptions? = nil, dryRun: Bool? = nil, insideCidrBlocks: [String], peerAddress: String, tagSpecifications: [TagSpecification]? = nil, transitGatewayAddress: String? = nil, transitGatewayAttachmentId: String) {
            self.bgpOptions = bgpOptions
            self.dryRun = dryRun
            self.insideCidrBlocks = insideCidrBlocks
            self.peerAddress = peerAddress
            self.tagSpecifications = tagSpecifications
            self.transitGatewayAddress = transitGatewayAddress
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case bgpOptions = "BgpOptions"
            case dryRun = "DryRun"
            case insideCidrBlocks = "InsideCidrBlocks"
            case peerAddress = "PeerAddress"
            case tagSpecifications = "TagSpecification"
            case transitGatewayAddress = "TransitGatewayAddress"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct CreateTransitGatewayConnectPeerResult: AWSDecodableShape {
        /// Information about the Connect peer.
        public let transitGatewayConnectPeer: TransitGatewayConnectPeer?

        public init(transitGatewayConnectPeer: TransitGatewayConnectPeer? = nil) {
            self.transitGatewayConnectPeer = transitGatewayConnectPeer
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayConnectPeer
        }
    }

    public struct CreateTransitGatewayConnectRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Connect attachment options.
        public let options: CreateTransitGatewayConnectRequestOptions
        /// The tags to apply to the Connect attachment.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway attachment. You can specify a VPC attachment or a AWS Direct Connect attachment.
        public let transportTransitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, options: CreateTransitGatewayConnectRequestOptions, tagSpecifications: [TagSpecification]? = nil, transportTransitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
            self.transportTransitGatewayAttachmentId = transportTransitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case options = "Options"
            case tagSpecifications = "TagSpecification"
            case transportTransitGatewayAttachmentId = "TransportTransitGatewayAttachmentId"
        }
    }

    public struct CreateTransitGatewayConnectRequestOptions: AWSEncodableShape {
        /// The tunnel protocol.
        public let `protocol`: ProtocolValue

        public init(protocol: ProtocolValue) {
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
        }
    }

    public struct CreateTransitGatewayConnectResult: AWSDecodableShape {
        /// Information about the Connect attachment.
        public let transitGatewayConnect: TransitGatewayConnect?

        public init(transitGatewayConnect: TransitGatewayConnect? = nil) {
            self.transitGatewayConnect = transitGatewayConnect
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayConnect
        }
    }

    public struct CreateTransitGatewayMulticastDomainRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options for the transit gateway multicast domain.
        public let options: CreateTransitGatewayMulticastDomainRequestOptions?
        /// The tags for the transit gateway multicast domain.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(dryRun: Bool? = nil, options: CreateTransitGatewayMulticastDomainRequestOptions? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String) {
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case options = "Options"
            case tagSpecifications = "TagSpecification"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayMulticastDomainRequestOptions: AWSEncodableShape {
        /// Indicates whether to automatically accept cross-account subnet associations that are associated with the transit gateway multicast domain.
        public let autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue?
        /// Specify whether to enable Internet Group Management Protocol (IGMP) version 2 for the transit gateway multicast domain.
        public let igmpv2Support: Igmpv2SupportValue?
        /// Specify whether to enable support for statically configuring multicast group sources for a domain.
        public let staticSourcesSupport: StaticSourcesSupportValue?

        public init(autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue? = nil, igmpv2Support: Igmpv2SupportValue? = nil, staticSourcesSupport: StaticSourcesSupportValue? = nil) {
            self.autoAcceptSharedAssociations = autoAcceptSharedAssociations
            self.igmpv2Support = igmpv2Support
            self.staticSourcesSupport = staticSourcesSupport
        }

        private enum CodingKeys: String, CodingKey {
            case autoAcceptSharedAssociations = "AutoAcceptSharedAssociations"
            case igmpv2Support = "Igmpv2Support"
            case staticSourcesSupport = "StaticSourcesSupport"
        }
    }

    public struct CreateTransitGatewayMulticastDomainResult: AWSDecodableShape {
        /// Information about the transit gateway multicast domain.
        public let transitGatewayMulticastDomain: TransitGatewayMulticastDomain?

        public init(transitGatewayMulticastDomain: TransitGatewayMulticastDomain? = nil) {
            self.transitGatewayMulticastDomain = transitGatewayMulticastDomain
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayMulticastDomain
        }
    }

    public struct CreateTransitGatewayPeeringAttachmentRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The AWS account ID of the owner of the peer transit gateway.
        public let peerAccountId: String
        /// The Region where the peer transit gateway is located.
        public let peerRegion: String
        /// The ID of the peer transit gateway with which to create the peering attachment.
        public let peerTransitGatewayId: String
        /// The tags to apply to the transit gateway peering attachment.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(dryRun: Bool? = nil, peerAccountId: String, peerRegion: String, peerTransitGatewayId: String, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String) {
            self.dryRun = dryRun
            self.peerAccountId = peerAccountId
            self.peerRegion = peerRegion
            self.peerTransitGatewayId = peerTransitGatewayId
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case peerAccountId = "PeerAccountId"
            case peerRegion = "PeerRegion"
            case peerTransitGatewayId = "PeerTransitGatewayId"
            case tagSpecifications = "TagSpecification"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayPeeringAttachmentResult: AWSDecodableShape {
        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment
        }
    }

    public struct CreateTransitGatewayPrefixListReferenceRequest: AWSEncodableShape {
        /// Indicates whether to drop traffic that matches this route.
        public let blackhole: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list that is used for destination matches.
        public let prefixListId: String
        /// The ID of the attachment to which traffic is routed.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(blackhole: Bool? = nil, dryRun: Bool? = nil, prefixListId: String, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String) {
            self.blackhole = blackhole
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct CreateTransitGatewayPrefixListReferenceResult: AWSDecodableShape {
        /// Information about the prefix list reference.
        public let transitGatewayPrefixListReference: TransitGatewayPrefixListReference?

        public init(transitGatewayPrefixListReference: TransitGatewayPrefixListReference? = nil) {
            self.transitGatewayPrefixListReference = transitGatewayPrefixListReference
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPrefixListReference
        }
    }

    public struct CreateTransitGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the transit gateway.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The transit gateway options.
        public let options: TransitGatewayRequestOptions?
        /// The tags to apply to the transit gateway.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(description: String? = nil, dryRun: Bool? = nil, options: TransitGatewayRequestOptions? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case options = "Options"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateTransitGatewayResult: AWSDecodableShape {
        /// Information about the transit gateway.
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway
        }
    }

    public struct CreateTransitGatewayRouteRequest: AWSEncodableShape {
        /// Indicates whether to drop traffic that matches this route.
        public let blackhole: Bool?
        /// The CIDR range used for destination matches. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(blackhole: Bool? = nil, destinationCidrBlock: String, dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String) {
            self.blackhole = blackhole
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct CreateTransitGatewayRouteResult: AWSDecodableShape {
        /// Information about the route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route
        }
    }

    public struct CreateTransitGatewayRouteTableRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to apply to the transit gateway route table.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String) {
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case tagSpecifications = "TagSpecifications"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct CreateTransitGatewayRouteTableResult: AWSDecodableShape {
        /// Information about the transit gateway route table.
        public let transitGatewayRouteTable: TransitGatewayRouteTable?

        public init(transitGatewayRouteTable: TransitGatewayRouteTable? = nil) {
            self.transitGatewayRouteTable = transitGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTable
        }
    }

    public struct CreateTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The VPC attachment options.
        public let options: CreateTransitGatewayVpcAttachmentRequestOptions?
        /// The IDs of one or more subnets. You can specify only one subnet per Availability Zone. You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet.
        @CustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]
        /// The tags to apply to the VPC attachment.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, options: CreateTransitGatewayVpcAttachmentRequestOptions? = nil, subnetIds: [String], tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String, vpcId: String) {
            self.dryRun = dryRun
            self.options = options
            self.subnetIds = subnetIds
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case options = "Options"
            case subnetIds = "SubnetIds"
            case tagSpecifications = "TagSpecifications"
            case transitGatewayId = "TransitGatewayId"
            case vpcId = "VpcId"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentRequestOptions: AWSEncodableShape {
        /// Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is disable.
        public let applianceModeSupport: ApplianceModeSupportValue?
        /// Enable or disable DNS support. The default is enable.
        public let dnsSupport: DnsSupportValue?
        /// Enable or disable IPv6 support. The default is disable.
        public let ipv6Support: Ipv6SupportValue?

        public init(applianceModeSupport: ApplianceModeSupportValue? = nil, dnsSupport: DnsSupportValue? = nil, ipv6Support: Ipv6SupportValue? = nil) {
            self.applianceModeSupport = applianceModeSupport
            self.dnsSupport = dnsSupport
            self.ipv6Support = ipv6Support
        }

        private enum CodingKeys: String, CodingKey {
            case applianceModeSupport = "ApplianceModeSupport"
            case dnsSupport = "DnsSupport"
            case ipv6Support = "Ipv6Support"
        }
    }

    public struct CreateTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// Information about the VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment
        }
    }

    public struct CreateVolumePermission: AWSEncodableShape & AWSDecodableShape {
        /// The group to be added or removed. The possible value is all.
        public let group: PermissionGroup?
        /// The AWS account ID to be added or removed.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group
            case userId
        }
    }

    public struct CreateVolumePermissionModifications: AWSEncodableShape {
        public struct _AddEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Adds the specified AWS account ID or group to the list.
        @OptionalCustomCoding<ArrayCoder<_AddEncoding, CreateVolumePermission>>
        public var add: [CreateVolumePermission]?
        /// Removes the specified AWS account ID or group from the list.
        @OptionalCustomCoding<ArrayCoder<_RemoveEncoding, CreateVolumePermission>>
        public var remove: [CreateVolumePermission]?

        public init(add: [CreateVolumePermission]? = nil, remove: [CreateVolumePermission]? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct CreateVolumeRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in which to create the volume.
        public let availabilityZone: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the volume should be encrypted. The effect of setting the encryption state to true depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see Encryption by default in the Amazon Elastic Compute Cloud User Guide. Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see Supported instance types.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:    gp3: 3,000-16,000 IOPS    io1: 100-64,000 IOPS    io2: 100-64,000 IOPS   For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System. Other instance families guarantee performance up to 32,000 IOPS. This parameter is required for io1 and io2 volumes. The default for gp3 volumes is 3,000 IOPS. This parameter is not supported for gp2, st1, sc1, or standard volumes.
        public let iops: Int?
        /// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the CMK using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.
        public let kmsKeyId: String?
        /// Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the volume to up to 16 Instances built on the Nitro System in the same Availability Zone. This parameter is supported with io1 and io2 volumes only. For more information, see  Amazon EBS Multi-Attach in the Amazon Elastic Compute Cloud User Guide.
        public let multiAttachEnabled: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:    gp2 and gp3: 1-16,384    io1 and io2: 4-16,384    st1 and sc1: 125-16,384    standard: 1-1,024
        public let size: Int?
        /// The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
        public let snapshotId: String?
        /// The tags to apply to the volume during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The throughput to provision for a volume, with a maximum of 1,000 MiB/s. This parameter is valid only for gp3 volumes. Valid Range: Minimum value of 125. Maximum value of 1000.
        public let throughput: Int?
        /// The volume type. This parameter can be one of the following values:   General Purpose SSD: gp2 | gp3    Provisioned IOPS SSD: io1 | io2    Throughput Optimized HDD: st1    Cold HDD: sc1    Magnetic: standard    For more information, see Amazon EBS volume types in the Amazon Elastic Compute Cloud User Guide. Default: gp2
        public let volumeType: VolumeType?

        public init(availabilityZone: String, dryRun: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, multiAttachEnabled: Bool? = nil, outpostArn: String? = nil, size: Int? = nil, snapshotId: String? = nil, tagSpecifications: [TagSpecification]? = nil, throughput: Int? = nil, volumeType: VolumeType? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.multiAttachEnabled = multiAttachEnabled
            self.outpostArn = outpostArn
            self.size = size
            self.snapshotId = snapshotId
            self.tagSpecifications = tagSpecifications
            self.throughput = throughput
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dryRun
            case encrypted
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case multiAttachEnabled = "MultiAttachEnabled"
            case outpostArn = "OutpostArn"
            case size = "Size"
            case snapshotId = "SnapshotId"
            case tagSpecifications = "TagSpecification"
            case throughput = "Throughput"
            case volumeType = "VolumeType"
        }
    }

    public struct CreateVpcEndpointConnectionNotificationRequest: AWSEncodableShape {
        public struct _ConnectionEventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// One or more endpoint events for which to receive notifications. Valid values are Accept, Connect, Delete, and Reject.
        @CustomCoding<ArrayCoder<_ConnectionEventsEncoding, String>>
        public var connectionEvents: [String]
        /// The ARN of the SNS topic for the notifications.
        public let connectionNotificationArn: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The ID of the endpoint.
        public let vpcEndpointId: String?

        public init(clientToken: String? = nil, connectionEvents: [String], connectionNotificationArn: String, dryRun: Bool? = nil, serviceId: String? = nil, vpcEndpointId: String? = nil) {
            self.clientToken = clientToken
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.dryRun = dryRun
            self.serviceId = serviceId
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case connectionEvents = "ConnectionEvents"
            case connectionNotificationArn = "ConnectionNotificationArn"
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
            case vpcEndpointId = "VpcEndpointId"
        }
    }

    public struct CreateVpcEndpointConnectionNotificationResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the notification.
        public let connectionNotification: ConnectionNotification?

        public init(clientToken: String? = nil, connectionNotification: ConnectionNotification? = nil) {
            self.clientToken = clientToken
            self.connectionNotification = connectionNotification
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case connectionNotification
        }
    }

    public struct CreateVpcEndpointRequest: AWSEncodableShape {
        public struct _RouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service. To use a private hosted zone, you must set the following VPC attributes to true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to set the VPC attributes. Default: true
        public let privateDnsEnabled: Bool?
        /// (Gateway endpoint) One or more route table IDs.
        @OptionalCustomCoding<ArrayCoder<_RouteTableIdsEncoding, String>>
        public var routeTableIds: [String]?
        /// (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The service name. To get a list of available services, use the DescribeVpcEndpointServices request, or get the name from the service provider.
        public let serviceName: String
        /// (Interface and Gateway Load Balancer endpoints) The ID of one or more subnets in which to create an endpoint network interface. For a Gateway Load Balancer endpoint, you can specify one subnet only.
        @OptionalCustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The tags to associate with the endpoint.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The type of endpoint. Default: Gateway
        public let vpcEndpointType: VpcEndpointType?
        /// The ID of the VPC in which the endpoint will be used.
        public let vpcId: String

        public init(clientToken: String? = nil, dryRun: Bool? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, routeTableIds: [String]? = nil, securityGroupIds: [String]? = nil, serviceName: String, subnetIds: [String]? = nil, tagSpecifications: [TagSpecification]? = nil, vpcEndpointType: VpcEndpointType? = nil, vpcId: String) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.routeTableIds = routeTableIds
            self.securityGroupIds = securityGroupIds
            self.serviceName = serviceName
            self.subnetIds = subnetIds
            self.tagSpecifications = tagSpecifications
            self.vpcEndpointType = vpcEndpointType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case policyDocument = "PolicyDocument"
            case privateDnsEnabled = "PrivateDnsEnabled"
            case routeTableIds = "RouteTableId"
            case securityGroupIds = "SecurityGroupId"
            case serviceName = "ServiceName"
            case subnetIds = "SubnetId"
            case tagSpecifications = "TagSpecification"
            case vpcEndpointType = "VpcEndpointType"
            case vpcId = "VpcId"
        }
    }

    public struct CreateVpcEndpointResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the endpoint.
        public let vpcEndpoint: VpcEndpoint?

        public init(clientToken: String? = nil, vpcEndpoint: VpcEndpoint? = nil) {
            self.clientToken = clientToken
            self.vpcEndpoint = vpcEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case vpcEndpoint
        }
    }

    public struct CreateVpcEndpointServiceConfigurationRequest: AWSEncodableShape {
        public struct _GatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether requests from service consumers to create an endpoint to your service must be accepted. To accept a request, use AcceptVpcEndpointConnections.
        public let acceptanceRequired: Bool?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARNs) of one or more Gateway Load Balancers.
        @OptionalCustomCoding<ArrayCoder<_GatewayLoadBalancerArnsEncoding, String>>
        public var gatewayLoadBalancerArns: [String]?
        /// The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your service.
        @OptionalCustomCoding<ArrayCoder<_NetworkLoadBalancerArnsEncoding, String>>
        public var networkLoadBalancerArns: [String]?
        /// (Interface endpoint configuration) The private DNS name to assign to the VPC endpoint service.
        public let privateDnsName: String?
        /// The tags to associate with the service.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(acceptanceRequired: Bool? = nil, clientToken: String? = nil, dryRun: Bool? = nil, gatewayLoadBalancerArns: [String]? = nil, networkLoadBalancerArns: [String]? = nil, privateDnsName: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.gatewayLoadBalancerArns = gatewayLoadBalancerArns
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.privateDnsName = privateDnsName
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case gatewayLoadBalancerArns = "GatewayLoadBalancerArn"
            case networkLoadBalancerArns = "NetworkLoadBalancerArn"
            case privateDnsName = "PrivateDnsName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateVpcEndpointServiceConfigurationResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
        public let clientToken: String?
        /// Information about the service configuration.
        public let serviceConfiguration: ServiceConfiguration?

        public init(clientToken: String? = nil, serviceConfiguration: ServiceConfiguration? = nil) {
            self.clientToken = clientToken
            self.serviceConfiguration = serviceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case serviceConfiguration
        }
    }

    public struct CreateVpcPeeringConnectionRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The AWS account ID of the owner of the accepter VPC. Default: Your AWS account ID
        public let peerOwnerId: String?
        /// The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request. Default: The Region in which you make the request.
        public let peerRegion: String?
        /// The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
        public let peerVpcId: String?
        /// The tags to assign to the peering connection.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the requester VPC. You must specify this parameter in the request.
        public let vpcId: String?

        public init(dryRun: Bool? = nil, peerOwnerId: String? = nil, peerRegion: String? = nil, peerVpcId: String? = nil, tagSpecifications: [TagSpecification]? = nil, vpcId: String? = nil) {
            self.dryRun = dryRun
            self.peerOwnerId = peerOwnerId
            self.peerRegion = peerRegion
            self.peerVpcId = peerVpcId
            self.tagSpecifications = tagSpecifications
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case peerOwnerId
            case peerRegion = "PeerRegion"
            case peerVpcId
            case tagSpecifications = "TagSpecification"
            case vpcId
        }
    }

    public struct CreateVpcPeeringConnectionResult: AWSDecodableShape {
        /// Information about the VPC peering connection.
        public let vpcPeeringConnection: VpcPeeringConnection?

        public init(vpcPeeringConnection: VpcPeeringConnection? = nil) {
            self.vpcPeeringConnection = vpcPeeringConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpcPeeringConnection
        }
    }

    public struct CreateVpcRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
        public let amazonProvidedIpv6CidrBlock: Bool?
        /// The IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16. We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18.
        public let cidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tenancy options for instances launched into the VPC. For default, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For dedicated, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of dedicated or host into a dedicated tenancy VPC.   Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default
        public let instanceTenancy: Tenancy?
        /// The IPv6 CIDR block from the IPv6 address pool. You must also specify Ipv6Pool in the request. To let Amazon choose the IPv6 CIDR block for you, omit this parameter.
        public let ipv6CidrBlock: String?
        /// The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location.  You must set AmazonProvidedIpv6CidrBlock to true to use this parameter.
        public let ipv6CidrBlockNetworkBorderGroup: String?
        /// The ID of an IPv6 address pool from which to allocate the IPv6 CIDR block.
        public let ipv6Pool: String?
        /// The tags to assign to the VPC.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(amazonProvidedIpv6CidrBlock: Bool? = nil, cidrBlock: String, dryRun: Bool? = nil, instanceTenancy: Tenancy? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockNetworkBorderGroup: String? = nil, ipv6Pool: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.amazonProvidedIpv6CidrBlock = amazonProvidedIpv6CidrBlock
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.instanceTenancy = instanceTenancy
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockNetworkBorderGroup = ipv6CidrBlockNetworkBorderGroup
            self.ipv6Pool = ipv6Pool
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case amazonProvidedIpv6CidrBlock
            case cidrBlock = "CidrBlock"
            case dryRun
            case instanceTenancy
            case ipv6CidrBlock = "Ipv6CidrBlock"
            case ipv6CidrBlockNetworkBorderGroup = "Ipv6CidrBlockNetworkBorderGroup"
            case ipv6Pool = "Ipv6Pool"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct CreateVpcResult: AWSDecodableShape {
        /// Information about the VPC.
        public let vpc: Vpc?

        public init(vpc: Vpc? = nil) {
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case vpc
        }
    }

    public struct CreateVpnConnectionRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the customer gateway.
        public let customerGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options for the VPN connection.
        public let options: VpnConnectionOptionsSpecification?
        /// The tags to apply to the VPN connection.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.
        public let transitGatewayId: String?
        /// The type of VPN connection (ipsec.1).
        public let type: String
        /// The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.
        public let vpnGatewayId: String?

        public init(customerGatewayId: String, dryRun: Bool? = nil, options: VpnConnectionOptionsSpecification? = nil, tagSpecifications: [TagSpecification]? = nil, transitGatewayId: String? = nil, type: String, vpnGatewayId: String? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
            self.options = options
            self.tagSpecifications = tagSpecifications
            self.transitGatewayId = transitGatewayId
            self.type = type
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun
            case options
            case tagSpecifications = "TagSpecification"
            case transitGatewayId = "TransitGatewayId"
            case type = "Type"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct CreateVpnConnectionResult: AWSDecodableShape {
        /// Information about the VPN connection.
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection
        }
    }

    public struct CreateVpnConnectionRouteRequest: AWSEncodableShape {
        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String
        /// The ID of the VPN connection.
        public let vpnConnectionId: String

        public init(destinationCidrBlock: String, vpnConnectionId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct CreateVpnGatewayRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range. Default: 64512
        public let amazonSideAsn: Int64?
        /// The Availability Zone for the virtual private gateway.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tags to apply to the virtual private gateway.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The type of VPN connection this virtual private gateway supports.
        public let type: GatewayType

        public init(amazonSideAsn: Int64? = nil, availabilityZone: String? = nil, dryRun: Bool? = nil, tagSpecifications: [TagSpecification]? = nil, type: GatewayType) {
            self.amazonSideAsn = amazonSideAsn
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.tagSpecifications = tagSpecifications
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "AmazonSideAsn"
            case availabilityZone = "AvailabilityZone"
            case dryRun
            case tagSpecifications = "TagSpecification"
            case type = "Type"
        }
    }

    public struct CreateVpnGatewayResult: AWSDecodableShape {
        /// Information about the virtual private gateway.
        public let vpnGateway: VpnGateway?

        public init(vpnGateway: VpnGateway? = nil) {
            self.vpnGateway = vpnGateway
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateway
        }
    }

    public struct CreditSpecification: AWSDecodableShape {
        /// The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are standard and unlimited.
        public let cpuCredits: String?

        public init(cpuCredits: String? = nil) {
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits
        }
    }

    public struct CreditSpecificationRequest: AWSEncodableShape {
        /// The credit option for CPU usage of a T2, T3, or T3a instance. Valid values are standard and unlimited.
        public let cpuCredits: String

        public init(cpuCredits: String) {
            self.cpuCredits = cpuCredits
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
        }
    }

    public struct CustomerGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
        public let bgpAsn: String?
        /// The Amazon Resource Name (ARN) for the customer gateway certificate.
        public let certificateArn: String?
        /// The ID of the customer gateway.
        public let customerGatewayId: String?
        /// The name of customer gateway device.
        public let deviceName: String?
        /// The Internet-routable IP address of the customer gateway's outside interface.
        public let ipAddress: String?
        /// The current state of the customer gateway (pending | available | deleting | deleted).
        public let state: String?
        /// Any tags assigned to the customer gateway.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The type of VPN connection the customer gateway supports (ipsec.1).
        public let type: String?

        public init(bgpAsn: String? = nil, certificateArn: String? = nil, customerGatewayId: String? = nil, deviceName: String? = nil, ipAddress: String? = nil, state: String? = nil, tags: [Tag]? = nil, type: String? = nil) {
            self.bgpAsn = bgpAsn
            self.certificateArn = certificateArn
            self.customerGatewayId = customerGatewayId
            self.deviceName = deviceName
            self.ipAddress = ipAddress
            self.state = state
            self.tags = tags
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case bgpAsn
            case certificateArn
            case customerGatewayId
            case deviceName
            case ipAddress
            case state
            case tags = "tagSet"
            case type
        }
    }

    public struct DeleteCarrierGatewayRequest: AWSEncodableShape {
        /// The ID of the carrier gateway.
        public let carrierGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(carrierGatewayId: String, dryRun: Bool? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "CarrierGatewayId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteCarrierGatewayResult: AWSDecodableShape {
        /// Information about the carrier gateway.
        public let carrierGateway: CarrierGateway?

        public init(carrierGateway: CarrierGateway? = nil) {
            self.carrierGateway = carrierGateway
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGateway
        }
    }

    public struct DeleteClientVpnEndpointRequest: AWSEncodableShape {
        /// The ID of the Client VPN to be deleted.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteClientVpnEndpointResult: AWSDecodableShape {
        /// The current state of the Client VPN endpoint.
        public let status: ClientVpnEndpointStatus?

        public init(status: ClientVpnEndpointStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status
        }
    }

    public struct DeleteClientVpnRouteRequest: AWSEncodableShape {
        /// The ID of the Client VPN endpoint from which the route is to be deleted.
        public let clientVpnEndpointId: String
        /// The IPv4 address range, in CIDR notation, of the route to be deleted.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the target subnet used by the route.
        public let targetVpcSubnetId: String?

        public init(clientVpnEndpointId: String, destinationCidrBlock: String, dryRun: Bool? = nil, targetVpcSubnetId: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.targetVpcSubnetId = targetVpcSubnetId
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case targetVpcSubnetId = "TargetVpcSubnetId"
        }
    }

    public struct DeleteClientVpnRouteResult: AWSDecodableShape {
        /// The current state of the route.
        public let status: ClientVpnRouteStatus?

        public init(status: ClientVpnRouteStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status
        }
    }

    public struct DeleteCustomerGatewayRequest: AWSEncodableShape {
        /// The ID of the customer gateway.
        public let customerGatewayId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(customerGatewayId: String, dryRun: Bool? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun
        }
    }

    public struct DeleteDhcpOptionsRequest: AWSEncodableShape {
        /// The ID of the DHCP options set.
        public let dhcpOptionsId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dhcpOptionsId: String, dryRun: Bool? = nil) {
            self.dhcpOptionsId = dhcpOptionsId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsId = "DhcpOptionsId"
            case dryRun
        }
    }

    public struct DeleteEgressOnlyInternetGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String

        public init(dryRun: Bool? = nil, egressOnlyInternetGatewayId: String) {
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case egressOnlyInternetGatewayId = "EgressOnlyInternetGatewayId"
        }
    }

    public struct DeleteEgressOnlyInternetGatewayResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnCode: Bool?

        public init(returnCode: Bool? = nil) {
            self.returnCode = returnCode
        }

        private enum CodingKeys: String, CodingKey {
            case returnCode
        }
    }

    public struct DeleteFleetError: AWSDecodableShape {
        /// The error code.
        public let code: DeleteFleetErrorCode?
        /// The description for the error code.
        public let message: String?

        public init(code: DeleteFleetErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct DeleteFleetErrorItem: AWSDecodableShape {
        /// The error.
        public let error: DeleteFleetError?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?

        public init(error: DeleteFleetError? = nil, fleetId: String? = nil) {
            self.error = error
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case error
            case fleetId
        }
    }

    public struct DeleteFleetSuccessItem: AWSDecodableShape {
        /// The current state of the EC2 Fleet.
        public let currentFleetState: FleetStateCode?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The previous state of the EC2 Fleet.
        public let previousFleetState: FleetStateCode?

        public init(currentFleetState: FleetStateCode? = nil, fleetId: String? = nil, previousFleetState: FleetStateCode? = nil) {
            self.currentFleetState = currentFleetState
            self.fleetId = fleetId
            self.previousFleetState = previousFleetState
        }

        private enum CodingKeys: String, CodingKey {
            case currentFleetState
            case fleetId
            case previousFleetState
        }
    }

    public struct DeleteFleetsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the EC2 Fleets.
        @CustomCoding<StandardArrayCoder>
        public var fleetIds: [String]
        /// Indicates whether to terminate the instances when the EC2 Fleet is deleted. The default is to terminate the instances. To let the instances continue to run after the EC2 Fleet is deleted, specify NoTerminateInstances. Supported only for fleets of type maintain and request. For instant fleets, you cannot specify NoTerminateInstances. A deleted instant fleet with running instances is not supported.
        public let terminateInstances: Bool

        public init(dryRun: Bool? = nil, fleetIds: [String], terminateInstances: Bool) {
            self.dryRun = dryRun
            self.fleetIds = fleetIds
            self.terminateInstances = terminateInstances
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case fleetIds = "FleetId"
            case terminateInstances = "TerminateInstances"
        }
    }

    public struct DeleteFleetsResult: AWSDecodableShape {
        public struct _SuccessfulFleetDeletionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulFleetDeletionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the EC2 Fleets that are successfully deleted.
        @OptionalCustomCoding<ArrayCoder<_SuccessfulFleetDeletionsEncoding, DeleteFleetSuccessItem>>
        public var successfulFleetDeletions: [DeleteFleetSuccessItem]?
        /// Information about the EC2 Fleets that are not successfully deleted.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulFleetDeletionsEncoding, DeleteFleetErrorItem>>
        public var unsuccessfulFleetDeletions: [DeleteFleetErrorItem]?

        public init(successfulFleetDeletions: [DeleteFleetSuccessItem]? = nil, unsuccessfulFleetDeletions: [DeleteFleetErrorItem]? = nil) {
            self.successfulFleetDeletions = successfulFleetDeletions
            self.unsuccessfulFleetDeletions = unsuccessfulFleetDeletions
        }

        private enum CodingKeys: String, CodingKey {
            case successfulFleetDeletions = "successfulFleetDeletionSet"
            case unsuccessfulFleetDeletions = "unsuccessfulFleetDeletionSet"
        }
    }

    public struct DeleteFlowLogsRequest: AWSEncodableShape {
        public struct _FlowLogIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs.
        @CustomCoding<ArrayCoder<_FlowLogIdsEncoding, String>>
        public var flowLogIds: [String]

        public init(dryRun: Bool? = nil, flowLogIds: [String]) {
            self.dryRun = dryRun
            self.flowLogIds = flowLogIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case flowLogIds = "FlowLogId"
        }
    }

    public struct DeleteFlowLogsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the flow logs that could not be deleted successfully.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful
        }
    }

    public struct DeleteFpgaImageRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String

        public init(dryRun: Bool? = nil, fpgaImageId: String) {
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
        }
    }

    public struct DeleteFpgaImageResult: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct DeleteInstanceEventWindowRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specify true to force delete the event window. Use the force delete parameter if the event window is currently associated with targets.
        public let forceDelete: Bool?
        /// The ID of the event window.
        public let instanceEventWindowId: String

        public init(dryRun: Bool? = nil, forceDelete: Bool? = nil, instanceEventWindowId: String) {
            self.dryRun = dryRun
            self.forceDelete = forceDelete
            self.instanceEventWindowId = instanceEventWindowId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case forceDelete = "ForceDelete"
            case instanceEventWindowId = "InstanceEventWindowId"
        }
    }

    public struct DeleteInstanceEventWindowResult: AWSDecodableShape {
        /// The state of the event window.
        public let instanceEventWindowState: InstanceEventWindowStateChange?

        public init(instanceEventWindowState: InstanceEventWindowStateChange? = nil) {
            self.instanceEventWindowState = instanceEventWindowState
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindowState
        }
    }

    public struct DeleteInternetGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String

        public init(dryRun: Bool? = nil, internetGatewayId: String) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case internetGatewayId
        }
    }

    public struct DeleteKeyPairRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the key pair.
        public let keyName: String?
        /// The ID of the key pair.
        public let keyPairId: String?

        public init(dryRun: Bool? = nil, keyName: String? = nil, keyPairId: String? = nil) {
            self.dryRun = dryRun
            self.keyName = keyName
            self.keyPairId = keyPairId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case keyName = "KeyName"
            case keyPairId = "KeyPairId"
        }
    }

    public struct DeleteLaunchTemplateRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?

        public init(dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil) {
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
        }
    }

    public struct DeleteLaunchTemplateResult: AWSDecodableShape {
        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?

        public init(launchTemplate: LaunchTemplate? = nil) {
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate
        }
    }

    public struct DeleteLaunchTemplateVersionsRequest: AWSEncodableShape {
        public struct _VersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?
        /// The version numbers of one or more launch template versions to delete.
        @CustomCoding<ArrayCoder<_VersionsEncoding, String>>
        public var versions: [String]

        public init(dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, versions: [String]) {
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versions = versions
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case versions = "LaunchTemplateVersion"
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseErrorItem: AWSDecodableShape {
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// Information about the error.
        public let responseError: ResponseError?
        /// The version number of the launch template.
        public let versionNumber: Int64?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, responseError: ResponseError? = nil, versionNumber: Int64? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.responseError = responseError
            self.versionNumber = versionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId
            case launchTemplateName
            case responseError
            case versionNumber
        }
    }

    public struct DeleteLaunchTemplateVersionsResponseSuccessItem: AWSDecodableShape {
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The version number of the launch template.
        public let versionNumber: Int64?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, versionNumber: Int64? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versionNumber = versionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId
            case launchTemplateName
            case versionNumber
        }
    }

    public struct DeleteLaunchTemplateVersionsResult: AWSDecodableShape {
        public struct _SuccessfullyDeletedLaunchTemplateVersionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfullyDeletedLaunchTemplateVersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the launch template versions that were successfully deleted.
        @OptionalCustomCoding<ArrayCoder<_SuccessfullyDeletedLaunchTemplateVersionsEncoding, DeleteLaunchTemplateVersionsResponseSuccessItem>>
        public var successfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseSuccessItem]?
        /// Information about the launch template versions that could not be deleted.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfullyDeletedLaunchTemplateVersionsEncoding, DeleteLaunchTemplateVersionsResponseErrorItem>>
        public var unsuccessfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseErrorItem]?

        public init(successfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseSuccessItem]? = nil, unsuccessfullyDeletedLaunchTemplateVersions: [DeleteLaunchTemplateVersionsResponseErrorItem]? = nil) {
            self.successfullyDeletedLaunchTemplateVersions = successfullyDeletedLaunchTemplateVersions
            self.unsuccessfullyDeletedLaunchTemplateVersions = unsuccessfullyDeletedLaunchTemplateVersions
        }

        private enum CodingKeys: String, CodingKey {
            case successfullyDeletedLaunchTemplateVersions = "successfullyDeletedLaunchTemplateVersionSet"
            case unsuccessfullyDeletedLaunchTemplateVersions = "unsuccessfullyDeletedLaunchTemplateVersionSet"
        }
    }

    public struct DeleteLocalGatewayRouteRequest: AWSEncodableShape {
        /// The CIDR range for the route. This must match the CIDR for the route exactly.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String

        public init(destinationCidrBlock: String, dryRun: Bool? = nil, localGatewayRouteTableId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.localGatewayRouteTableId = localGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
        }
    }

    public struct DeleteLocalGatewayRouteResult: AWSDecodableShape {
        /// Information about the route.
        public let route: LocalGatewayRoute?

        public init(route: LocalGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route
        }
    }

    public struct DeleteLocalGatewayRouteTableVpcAssociationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the association.
        public let localGatewayRouteTableVpcAssociationId: String

        public init(dryRun: Bool? = nil, localGatewayRouteTableVpcAssociationId: String) {
            self.dryRun = dryRun
            self.localGatewayRouteTableVpcAssociationId = localGatewayRouteTableVpcAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localGatewayRouteTableVpcAssociationId = "LocalGatewayRouteTableVpcAssociationId"
        }
    }

    public struct DeleteLocalGatewayRouteTableVpcAssociationResult: AWSDecodableShape {
        /// Information about the association.
        public let localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation?

        public init(localGatewayRouteTableVpcAssociation: LocalGatewayRouteTableVpcAssociation? = nil) {
            self.localGatewayRouteTableVpcAssociation = localGatewayRouteTableVpcAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVpcAssociation
        }
    }

    public struct DeleteManagedPrefixListRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String

        public init(dryRun: Bool? = nil, prefixListId: String) {
            self.dryRun = dryRun
            self.prefixListId = prefixListId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
        }
    }

    public struct DeleteManagedPrefixListResult: AWSDecodableShape {
        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList
        }
    }

    public struct DeleteNatGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the NAT gateway.
        public let natGatewayId: String

        public init(dryRun: Bool? = nil, natGatewayId: String) {
            self.dryRun = dryRun
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case natGatewayId = "NatGatewayId"
        }
    }

    public struct DeleteNatGatewayResult: AWSDecodableShape {
        /// The ID of the NAT gateway.
        public let natGatewayId: String?

        public init(natGatewayId: String? = nil) {
            self.natGatewayId = natGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case natGatewayId
        }
    }

    public struct DeleteNetworkAclEntryRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the rule is an egress rule.
        public let egress: Bool
        /// The ID of the network ACL.
        public let networkAclId: String
        /// The rule number of the entry to delete.
        public let ruleNumber: Int

        public init(dryRun: Bool? = nil, egress: Bool, networkAclId: String, ruleNumber: Int) {
            self.dryRun = dryRun
            self.egress = egress
            self.networkAclId = networkAclId
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case egress
            case networkAclId
            case ruleNumber
        }
    }

    public struct DeleteNetworkAclRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network ACL.
        public let networkAclId: String

        public init(dryRun: Bool? = nil, networkAclId: String) {
            self.dryRun = dryRun
            self.networkAclId = networkAclId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case networkAclId
        }
    }

    public struct DeleteNetworkInsightsAnalysisRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network insights analysis.
        public let networkInsightsAnalysisId: String

        public init(dryRun: Bool? = nil, networkInsightsAnalysisId: String) {
            self.dryRun = dryRun
            self.networkInsightsAnalysisId = networkInsightsAnalysisId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case networkInsightsAnalysisId = "NetworkInsightsAnalysisId"
        }
    }

    public struct DeleteNetworkInsightsAnalysisResult: AWSDecodableShape {
        /// The ID of the network insights analysis.
        public let networkInsightsAnalysisId: String?

        public init(networkInsightsAnalysisId: String? = nil) {
            self.networkInsightsAnalysisId = networkInsightsAnalysisId
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAnalysisId
        }
    }

    public struct DeleteNetworkInsightsPathRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the path.
        public let networkInsightsPathId: String

        public init(dryRun: Bool? = nil, networkInsightsPathId: String) {
            self.dryRun = dryRun
            self.networkInsightsPathId = networkInsightsPathId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case networkInsightsPathId = "NetworkInsightsPathId"
        }
    }

    public struct DeleteNetworkInsightsPathResult: AWSDecodableShape {
        /// The ID of the path.
        public let networkInsightsPathId: String?

        public init(networkInsightsPathId: String? = nil) {
            self.networkInsightsPathId = networkInsightsPathId
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsPathId
        }
    }

    public struct DeleteNetworkInterfacePermissionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specify true to remove the permission even if the network interface is attached to an instance.
        public let force: Bool?
        /// The ID of the network interface permission.
        public let networkInterfacePermissionId: String

        public init(dryRun: Bool? = nil, force: Bool? = nil, networkInterfacePermissionId: String) {
            self.dryRun = dryRun
            self.force = force
            self.networkInterfacePermissionId = networkInterfacePermissionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case force = "Force"
            case networkInterfacePermissionId = "NetworkInterfacePermissionId"
        }
    }

    public struct DeleteNetworkInterfacePermissionResult: AWSDecodableShape {
        /// Returns true if the request succeeds, otherwise returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct DeleteNetworkInterfaceRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(dryRun: Bool? = nil, networkInterfaceId: String) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case networkInterfaceId
        }
    }

    public struct DeletePlacementGroupRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the placement group.
        public let groupName: String

        public init(dryRun: Bool? = nil, groupName: String) {
            self.dryRun = dryRun
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case groupName
        }
    }

    public struct DeleteQueuedReservedInstancesError: AWSDecodableShape {
        /// The error code.
        public let code: DeleteQueuedReservedInstancesErrorCode?
        /// The error message.
        public let message: String?

        public init(code: DeleteQueuedReservedInstancesErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct DeleteQueuedReservedInstancesRequest: AWSEncodableShape {
        public struct _ReservedInstancesIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Reserved Instances.
        @CustomCoding<ArrayCoder<_ReservedInstancesIdsEncoding, String>>
        public var reservedInstancesIds: [String]

        public init(dryRun: Bool? = nil, reservedInstancesIds: [String]) {
            self.dryRun = dryRun
            self.reservedInstancesIds = reservedInstancesIds
        }

        public func validate(name: String) throws {
            try self.validate(self.reservedInstancesIds, name: "reservedInstancesIds", parent: name, max: 100)
            try self.validate(self.reservedInstancesIds, name: "reservedInstancesIds", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case reservedInstancesIds = "ReservedInstancesId"
        }
    }

    public struct DeleteQueuedReservedInstancesResult: AWSDecodableShape {
        public struct _FailedQueuedPurchaseDeletionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SuccessfulQueuedPurchaseDeletionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the queued purchases that could not be deleted.
        @OptionalCustomCoding<ArrayCoder<_FailedQueuedPurchaseDeletionsEncoding, FailedQueuedPurchaseDeletion>>
        public var failedQueuedPurchaseDeletions: [FailedQueuedPurchaseDeletion]?
        /// Information about the queued purchases that were successfully deleted.
        @OptionalCustomCoding<ArrayCoder<_SuccessfulQueuedPurchaseDeletionsEncoding, SuccessfulQueuedPurchaseDeletion>>
        public var successfulQueuedPurchaseDeletions: [SuccessfulQueuedPurchaseDeletion]?

        public init(failedQueuedPurchaseDeletions: [FailedQueuedPurchaseDeletion]? = nil, successfulQueuedPurchaseDeletions: [SuccessfulQueuedPurchaseDeletion]? = nil) {
            self.failedQueuedPurchaseDeletions = failedQueuedPurchaseDeletions
            self.successfulQueuedPurchaseDeletions = successfulQueuedPurchaseDeletions
        }

        private enum CodingKeys: String, CodingKey {
            case failedQueuedPurchaseDeletions = "failedQueuedPurchaseDeletionSet"
            case successfulQueuedPurchaseDeletions = "successfulQueuedPurchaseDeletionSet"
        }
    }

    public struct DeleteRouteRequest: AWSEncodableShape {
        /// The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
        public let destinationIpv6CidrBlock: String?
        /// The ID of the prefix list for the route.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the route table.
        public let routeTableId: String

        public init(destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, routeTableId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock
            case destinationIpv6CidrBlock
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun
            case routeTableId
        }
    }

    public struct DeleteRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the route table.
        public let routeTableId: String

        public init(dryRun: Bool? = nil, routeTableId: String) {
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case routeTableId
        }
    }

    public struct DeleteSecurityGroupRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group. Required for a nondefault VPC.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.
        public let groupName: String?

        public init(dryRun: Bool? = nil, groupId: String? = nil, groupName: String? = nil) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case groupId = "GroupId"
            case groupName = "GroupName"
        }
    }

    public struct DeleteSnapshotRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the EBS snapshot.
        public let snapshotId: String

        public init(dryRun: Bool? = nil, snapshotId: String) {
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case snapshotId = "SnapshotId"
        }
    }

    public struct DeleteSpotDatafeedSubscriptionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
        }
    }

    public struct DeleteSubnetRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the subnet.
        public let subnetId: String

        public init(dryRun: Bool? = nil, subnetId: String) {
            self.dryRun = dryRun
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case subnetId = "SubnetId"
        }
    }

    public struct DeleteTagsRequest: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the resources, separated by spaces. Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.
        @CustomCoding<StandardArrayCoder>
        public var resources: [String]
        /// The tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string. If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete Amazon Web Services-generated tags (tags that have the aws: prefix).
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dryRun: Bool? = nil, resources: [String], tags: [Tag]? = nil) {
            self.dryRun = dryRun
            self.resources = resources
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case resources = "resourceId"
            case tags = "tag"
        }
    }

    public struct DeleteTrafficMirrorFilterRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String

        public init(dryRun: Bool? = nil, trafficMirrorFilterId: String) {
            self.dryRun = dryRun
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
        }
    }

    public struct DeleteTrafficMirrorFilterResult: AWSDecodableShape {
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?

        public init(trafficMirrorFilterId: String? = nil) {
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilterId
        }
    }

    public struct DeleteTrafficMirrorFilterRuleRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String

        public init(dryRun: Bool? = nil, trafficMirrorFilterRuleId: String) {
            self.dryRun = dryRun
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorFilterRuleId = "TrafficMirrorFilterRuleId"
        }
    }

    public struct DeleteTrafficMirrorFilterRuleResult: AWSDecodableShape {
        /// The ID of the deleted Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String?

        public init(trafficMirrorFilterRuleId: String? = nil) {
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilterRuleId
        }
    }

    public struct DeleteTrafficMirrorSessionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror session.
        public let trafficMirrorSessionId: String

        public init(dryRun: Bool? = nil, trafficMirrorSessionId: String) {
            self.dryRun = dryRun
            self.trafficMirrorSessionId = trafficMirrorSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorSessionId = "TrafficMirrorSessionId"
        }
    }

    public struct DeleteTrafficMirrorSessionResult: AWSDecodableShape {
        /// The ID of the deleted Traffic Mirror session.
        public let trafficMirrorSessionId: String?

        public init(trafficMirrorSessionId: String? = nil) {
            self.trafficMirrorSessionId = trafficMirrorSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorSessionId
        }
    }

    public struct DeleteTrafficMirrorTargetRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String

        public init(dryRun: Bool? = nil, trafficMirrorTargetId: String) {
            self.dryRun = dryRun
            self.trafficMirrorTargetId = trafficMirrorTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case trafficMirrorTargetId = "TrafficMirrorTargetId"
        }
    }

    public struct DeleteTrafficMirrorTargetResult: AWSDecodableShape {
        /// The ID of the deleted Traffic Mirror target.
        public let trafficMirrorTargetId: String?

        public init(trafficMirrorTargetId: String? = nil) {
            self.trafficMirrorTargetId = trafficMirrorTargetId
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorTargetId
        }
    }

    public struct DeleteTransitGatewayConnectPeerRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Connect peer.
        public let transitGatewayConnectPeerId: String

        public init(dryRun: Bool? = nil, transitGatewayConnectPeerId: String) {
            self.dryRun = dryRun
            self.transitGatewayConnectPeerId = transitGatewayConnectPeerId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayConnectPeerId = "TransitGatewayConnectPeerId"
        }
    }

    public struct DeleteTransitGatewayConnectPeerResult: AWSDecodableShape {
        /// Information about the deleted Connect peer.
        public let transitGatewayConnectPeer: TransitGatewayConnectPeer?

        public init(transitGatewayConnectPeer: TransitGatewayConnectPeer? = nil) {
            self.transitGatewayConnectPeer = transitGatewayConnectPeer
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayConnectPeer
        }
    }

    public struct DeleteTransitGatewayConnectRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Connect attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct DeleteTransitGatewayConnectResult: AWSDecodableShape {
        /// Information about the deleted Connect attachment.
        public let transitGatewayConnect: TransitGatewayConnect?

        public init(transitGatewayConnect: TransitGatewayConnect? = nil) {
            self.transitGatewayConnect = transitGatewayConnect
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayConnect
        }
    }

    public struct DeleteTransitGatewayMulticastDomainRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String

        public init(dryRun: Bool? = nil, transitGatewayMulticastDomainId: String) {
            self.dryRun = dryRun
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DeleteTransitGatewayMulticastDomainResult: AWSDecodableShape {
        /// Information about the deleted transit gateway multicast domain.
        public let transitGatewayMulticastDomain: TransitGatewayMulticastDomain?

        public init(transitGatewayMulticastDomain: TransitGatewayMulticastDomain? = nil) {
            self.transitGatewayMulticastDomain = transitGatewayMulticastDomain
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayMulticastDomain
        }
    }

    public struct DeleteTransitGatewayPeeringAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway peering attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct DeleteTransitGatewayPeeringAttachmentResult: AWSDecodableShape {
        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment
        }
    }

    public struct DeleteTransitGatewayPrefixListReferenceRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, prefixListId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DeleteTransitGatewayPrefixListReferenceResult: AWSDecodableShape {
        /// Information about the deleted prefix list reference.
        public let transitGatewayPrefixListReference: TransitGatewayPrefixListReference?

        public init(transitGatewayPrefixListReference: TransitGatewayPrefixListReference? = nil) {
            self.transitGatewayPrefixListReference = transitGatewayPrefixListReference
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPrefixListReference
        }
    }

    public struct DeleteTransitGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(dryRun: Bool? = nil, transitGatewayId: String) {
            self.dryRun = dryRun
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct DeleteTransitGatewayResult: AWSDecodableShape {
        /// Information about the deleted transit gateway.
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway
        }
    }

    public struct DeleteTransitGatewayRouteRequest: AWSEncodableShape {
        /// The CIDR range for the route. This must match the CIDR for the route exactly.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(destinationCidrBlock: String, dryRun: Bool? = nil, transitGatewayRouteTableId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DeleteTransitGatewayRouteResult: AWSDecodableShape {
        /// Information about the route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route
        }
    }

    public struct DeleteTransitGatewayRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DeleteTransitGatewayRouteTableResult: AWSDecodableShape {
        /// Information about the deleted transit gateway route table.
        public let transitGatewayRouteTable: TransitGatewayRouteTable?

        public init(transitGatewayRouteTable: TransitGatewayRouteTable? = nil) {
            self.transitGatewayRouteTable = transitGatewayRouteTable
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayRouteTable
        }
    }

    public struct DeleteTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct DeleteTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// Information about the deleted VPC attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment
        }
    }

    public struct DeleteVolumeRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String

        public init(dryRun: Bool? = nil, volumeId: String) {
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case volumeId = "VolumeId"
        }
    }

    public struct DeleteVpcEndpointConnectionNotificationsRequest: AWSEncodableShape {
        public struct _ConnectionNotificationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more notification IDs.
        @CustomCoding<ArrayCoder<_ConnectionNotificationIdsEncoding, String>>
        public var connectionNotificationIds: [String]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(connectionNotificationIds: [String], dryRun: Bool? = nil) {
            self.connectionNotificationIds = connectionNotificationIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationIds = "ConnectionNotificationId"
            case dryRun = "DryRun"
        }
    }

    public struct DeleteVpcEndpointConnectionNotificationsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the notifications that could not be deleted successfully.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful
        }
    }

    public struct DeleteVpcEndpointServiceConfigurationsRequest: AWSEncodableShape {
        public struct _ServiceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more services.
        @CustomCoding<ArrayCoder<_ServiceIdsEncoding, String>>
        public var serviceIds: [String]

        public init(dryRun: Bool? = nil, serviceIds: [String]) {
            self.dryRun = dryRun
            self.serviceIds = serviceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceIds = "ServiceId"
        }
    }

    public struct DeleteVpcEndpointServiceConfigurationsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the service configurations that were not deleted, if applicable.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful
        }
    }

    public struct DeleteVpcEndpointsRequest: AWSEncodableShape {
        public struct _VpcEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more VPC endpoint IDs.
        @CustomCoding<ArrayCoder<_VpcEndpointIdsEncoding, String>>
        public var vpcEndpointIds: [String]

        public init(dryRun: Bool? = nil, vpcEndpointIds: [String]) {
            self.dryRun = dryRun
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct DeleteVpcEndpointsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the VPC endpoints that were not successfully deleted.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful
        }
    }

    public struct DeleteVpcPeeringConnectionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpcPeeringConnectionId
        }
    }

    public struct DeleteVpcPeeringConnectionResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct DeleteVpcRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpcId = "VpcId"
        }
    }

    public struct DeleteVpnConnectionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String

        public init(dryRun: Bool? = nil, vpnConnectionId: String) {
            self.dryRun = dryRun
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct DeleteVpnConnectionRouteRequest: AWSEncodableShape {
        /// The CIDR block associated with the local subnet of the customer network.
        public let destinationCidrBlock: String
        /// The ID of the VPN connection.
        public let vpnConnectionId: String

        public init(destinationCidrBlock: String, vpnConnectionId: String) {
            self.destinationCidrBlock = destinationCidrBlock
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock = "DestinationCidrBlock"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct DeleteVpnGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(dryRun: Bool? = nil, vpnGatewayId: String) {
            self.dryRun = dryRun
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct DeprovisionByoipCidrRequest: AWSEncodableShape {
        /// The address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct DeprovisionByoipCidrResult: AWSDecodableShape {
        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr
        }
    }

    public struct DeregisterImageRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String

        public init(dryRun: Bool? = nil, imageId: String) {
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case imageId = "ImageId"
        }
    }

    public struct DeregisterInstanceEventNotificationAttributesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Information about the tag keys to deregister.
        public let instanceTagAttribute: DeregisterInstanceTagAttributeRequest?

        public init(dryRun: Bool? = nil, instanceTagAttribute: DeregisterInstanceTagAttributeRequest? = nil) {
            self.dryRun = dryRun
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceTagAttribute = "InstanceTagAttribute"
        }
    }

    public struct DeregisterInstanceEventNotificationAttributesResult: AWSDecodableShape {
        /// The resulting set of tag keys.
        public let instanceTagAttribute: InstanceTagNotificationAttribute?

        public init(instanceTagAttribute: InstanceTagNotificationAttribute? = nil) {
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTagAttribute
        }
    }

    public struct DeregisterInstanceTagAttributeRequest: AWSEncodableShape {
        public struct _InstanceTagKeysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether to deregister all tag keys in the current Region. Specify false to deregister all tag keys.
        public let includeAllTagsOfInstance: Bool?
        /// Information about the tag keys to deregister.
        @OptionalCustomCoding<ArrayCoder<_InstanceTagKeysEncoding, String>>
        public var instanceTagKeys: [String]?

        public init(includeAllTagsOfInstance: Bool? = nil, instanceTagKeys: [String]? = nil) {
            self.includeAllTagsOfInstance = includeAllTagsOfInstance
            self.instanceTagKeys = instanceTagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case includeAllTagsOfInstance = "IncludeAllTagsOfInstance"
            case instanceTagKeys = "InstanceTagKey"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupMembersRequest: AWSEncodableShape {
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The IDs of the group members' network interfaces.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupMembersResult: AWSDecodableShape {
        /// Information about the deregistered members.
        public let deregisteredMulticastGroupMembers: TransitGatewayMulticastDeregisteredGroupMembers?

        public init(deregisteredMulticastGroupMembers: TransitGatewayMulticastDeregisteredGroupMembers? = nil) {
            self.deregisteredMulticastGroupMembers = deregisteredMulticastGroupMembers
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredMulticastGroupMembers
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupSourcesRequest: AWSEncodableShape {
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The IDs of the group sources' network interfaces.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DeregisterTransitGatewayMulticastGroupSourcesResult: AWSDecodableShape {
        /// Information about the deregistered group sources.
        public let deregisteredMulticastGroupSources: TransitGatewayMulticastDeregisteredGroupSources?

        public init(deregisteredMulticastGroupSources: TransitGatewayMulticastDeregisteredGroupSources? = nil) {
            self.deregisteredMulticastGroupSources = deregisteredMulticastGroupSources
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredMulticastGroupSources
        }
    }

    public struct DescribeAccountAttributesRequest: AWSEncodableShape {
        public struct _AttributeNamesEncoding: ArrayCoderProperties { public static let member = "attributeName" }

        /// The account attribute names.
        @OptionalCustomCoding<ArrayCoder<_AttributeNamesEncoding, AccountAttributeName>>
        public var attributeNames: [AccountAttributeName]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(attributeNames: [AccountAttributeName]? = nil, dryRun: Bool? = nil) {
            self.attributeNames = attributeNames
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "attributeName"
            case dryRun
        }
    }

    public struct DescribeAccountAttributesResult: AWSDecodableShape {
        public struct _AccountAttributesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the account attributes.
        @OptionalCustomCoding<ArrayCoder<_AccountAttributesEncoding, AccountAttribute>>
        public var accountAttributes: [AccountAttribute]?

        public init(accountAttributes: [AccountAttribute]? = nil) {
            self.accountAttributes = accountAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case accountAttributes = "accountAttributeSet"
        }
    }

    public struct DescribeAddressesAttributeRequest: AWSEncodableShape {
        public struct _AllocationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// [EC2-VPC] The allocation IDs.
        @OptionalCustomCoding<ArrayCoder<_AllocationIdsEncoding, String>>
        public var allocationIds: [String]?
        /// The attribute of the IP address.
        public let attribute: AddressAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(allocationIds: [String]? = nil, attribute: AddressAttributeName? = nil, dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.allocationIds = allocationIds
            self.attribute = attribute
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case allocationIds = "AllocationId"
            case attribute = "Attribute"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAddressesAttributeResult: AWSDecodableShape {
        public struct _AddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IP addresses.
        @OptionalCustomCoding<ArrayCoder<_AddressesEncoding, AddressAttribute>>
        public var addresses: [AddressAttribute]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(addresses: [AddressAttribute]? = nil, nextToken: String? = nil) {
            self.addresses = addresses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "addressSet"
            case nextToken
        }
    }

    public struct DescribeAddressesRequest: AWSEncodableShape {
        public struct _AllocationIdsEncoding: ArrayCoderProperties { public static let member = "AllocationId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PublicIpsEncoding: ArrayCoderProperties { public static let member = "PublicIp" }

        /// [EC2-VPC] Information about the allocation IDs.
        @OptionalCustomCoding<ArrayCoder<_AllocationIdsEncoding, String>>
        public var allocationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    allocation-id - [EC2-VPC] The allocation ID for the address.    association-id - [EC2-VPC] The association ID for the address.    domain - Indicates whether the address is for use in EC2-Classic (standard) or in a VPC (vpc).    instance-id - The ID of the instance the address is associated with, if any.    network-border-group - A unique set of Availability Zones, Local Zones, or Wavelength Zones from where Amazon Web Services advertises IP addresses.     network-interface-id - [EC2-VPC] The ID of the network interface that the address is associated with, if any.    network-interface-owner-id - The account ID of the owner.    private-ip-address - [EC2-VPC] The private IP address associated with the Elastic IP address.    public-ip - The Elastic IP address, or the carrier IP address.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more Elastic IP addresses. Default: Describes all your Elastic IP addresses.
        @OptionalCustomCoding<ArrayCoder<_PublicIpsEncoding, String>>
        public var publicIps: [String]?

        public init(allocationIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, publicIps: [String]? = nil) {
            self.allocationIds = allocationIds
            self.dryRun = dryRun
            self.filters = filters
            self.publicIps = publicIps
        }

        private enum CodingKeys: String, CodingKey {
            case allocationIds = "AllocationId"
            case dryRun
            case filters = "Filter"
            case publicIps = "PublicIp"
        }
    }

    public struct DescribeAddressesResult: AWSDecodableShape {
        public struct _AddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Elastic IP addresses.
        @OptionalCustomCoding<ArrayCoder<_AddressesEncoding, Address>>
        public var addresses: [Address]?

        public init(addresses: [Address]? = nil) {
            self.addresses = addresses
        }

        private enum CodingKeys: String, CodingKey {
            case addresses = "addressesSet"
        }
    }

    public struct DescribeAggregateIdFormatRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DescribeAggregateIdFormatResult: AWSDecodableShape {
        public struct _StatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about each resource's ID format.
        @OptionalCustomCoding<ArrayCoder<_StatusesEncoding, IdFormat>>
        public var statuses: [IdFormat]?
        /// Indicates whether all resource types in the Region are configured to use longer IDs. This value is only true if all users are configured to use longer IDs for all resources types in the Region.
        public let useLongIdsAggregated: Bool?

        public init(statuses: [IdFormat]? = nil, useLongIdsAggregated: Bool? = nil) {
            self.statuses = statuses
            self.useLongIdsAggregated = useLongIdsAggregated
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
            case useLongIdsAggregated
        }
    }

    public struct DescribeAvailabilityZonesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ZoneIdsEncoding: ArrayCoderProperties { public static let member = "ZoneId" }
        public struct _ZoneNamesEncoding: ArrayCoderProperties { public static let member = "ZoneName" }

        /// Include all Availability Zones, Local Zones, and Wavelength Zones regardless of your opt-in status. If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in.
        public let allAvailabilityZones: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    group-name - For Availability Zones, use the Region name. For Local Zones, use the name of the group associated with the Local Zone (for example, us-west-2-lax-1) For Wavelength Zones, use the name of the group associated with the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    message - The Zone message.    opt-in-status - The opt-in status (opted-in, and not-opted-in | opt-in-not-required).    parent-zoneID - The ID of the zone that handles some of the Local Zone and Wavelength Zone control plane operations, such as API calls.    parent-zoneName - The ID of the zone that handles some of the Local Zone and Wavelength Zone control plane operations, such as API calls.    region-name - The name of the Region for the Zone (for example, us-east-1).    state - The state of the Availability Zone, the Local Zone, or the Wavelength Zone (available | information | impaired | unavailable).    zone-id - The ID of the Availability Zone (for example, use1-az1), the Local Zone (for example, usw2-lax1-az1), or the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    zone-type - The type of zone, for example, local-zone.    zone-name - The name of the Availability Zone (for example, us-east-1a), the Local Zone (for example, us-west-2-lax-1a), or the Wavelength Zone (for example, us-east-1-wl1-bos-wlz-1).    zone-type - The type of zone, for example, local-zone.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the Availability Zones, Local Zones, and Wavelength Zones.
        @OptionalCustomCoding<ArrayCoder<_ZoneIdsEncoding, String>>
        public var zoneIds: [String]?
        /// The names of the Availability Zones, Local Zones, and Wavelength Zones.
        @OptionalCustomCoding<ArrayCoder<_ZoneNamesEncoding, String>>
        public var zoneNames: [String]?

        public init(allAvailabilityZones: Bool? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, zoneIds: [String]? = nil, zoneNames: [String]? = nil) {
            self.allAvailabilityZones = allAvailabilityZones
            self.dryRun = dryRun
            self.filters = filters
            self.zoneIds = zoneIds
            self.zoneNames = zoneNames
        }

        private enum CodingKeys: String, CodingKey {
            case allAvailabilityZones = "AllAvailabilityZones"
            case dryRun
            case filters = "Filter"
            case zoneIds = "ZoneId"
            case zoneNames = "ZoneName"
        }
    }

    public struct DescribeAvailabilityZonesResult: AWSDecodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Availability Zones, Local Zones, and Wavelength Zones.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, AvailabilityZone>>
        public var availabilityZones: [AvailabilityZone]?

        public init(availabilityZones: [AvailabilityZone]? = nil) {
            self.availabilityZones = availabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "availabilityZoneInfo"
        }
    }

    public struct DescribeBundleTasksRequest: AWSEncodableShape {
        public struct _BundleIdsEncoding: ArrayCoderProperties { public static let member = "BundleId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The bundle task IDs. Default: Describes all your bundle tasks.
        @OptionalCustomCoding<ArrayCoder<_BundleIdsEncoding, String>>
        public var bundleIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    bundle-id - The ID of the bundle task.    error-code - If the task failed, the error code returned.    error-message - If the task failed, the error message returned.    instance-id - The ID of the instance.    progress - The level of task completion, as a percentage (for example, 20%).    s3-bucket - The Amazon S3 bucket to store the AMI.    s3-prefix - The beginning of the AMI name.    start-time - The time the task started (for example, 2013-09-15T17:15:20.000Z).    state - The state of the task (pending | waiting-for-shutdown | bundling | storing | cancelling | complete | failed).    update-time - The time of the most recent update for the task.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?

        public init(bundleIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil) {
            self.bundleIds = bundleIds
            self.dryRun = dryRun
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case bundleIds = "BundleId"
            case dryRun
            case filters = "Filter"
        }
    }

    public struct DescribeBundleTasksResult: AWSDecodableShape {
        public struct _BundleTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the bundle tasks.
        @OptionalCustomCoding<ArrayCoder<_BundleTasksEncoding, BundleTask>>
        public var bundleTasks: [BundleTask]?

        public init(bundleTasks: [BundleTask]? = nil) {
            self.bundleTasks = bundleTasks
        }

        private enum CodingKeys: String, CodingKey {
            case bundleTasks = "bundleInstanceTasksSet"
        }
    }

    public struct DescribeByoipCidrsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, maxResults: Int, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeByoipCidrsResult: AWSDecodableShape {
        public struct _ByoipCidrsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about your address ranges.
        @OptionalCustomCoding<ArrayCoder<_ByoipCidrsEncoding, ByoipCidr>>
        public var byoipCidrs: [ByoipCidr]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(byoipCidrs: [ByoipCidr]? = nil, nextToken: String? = nil) {
            self.byoipCidrs = byoipCidrs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidrs = "byoipCidrSet"
            case nextToken
        }
    }

    public struct DescribeCapacityReservationsRequest: AWSEncodableShape {
        public struct _CapacityReservationIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Capacity Reservation.
        @OptionalCustomCoding<ArrayCoder<_CapacityReservationIdsEncoding, String>>
        public var capacityReservationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    instance-type - The type of instance for which the Capacity Reservation reserves capacity.    owner-id - The ID of the account that owns the Capacity Reservation.    availability-zone-id - The Availability Zone ID of the Capacity Reservation.    instance-platform - The type of operating system for which the Capacity Reservation reserves capacity.    availability-zone - The Availability Zone ID of the Capacity Reservation.    tenancy - Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:    default - The Capacity Reservation is created on hardware that is shared with other accounts.    dedicated - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single account.      outpost-arn - The Amazon Resource Name (ARN) of the Outpost on which the Capacity Reservation was created.    state - The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active- The Capacity Reservation is active and the capacity is available for your use.    expired - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.    cancelled - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.    pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.      start-date - The date and time at which the Capacity Reservation was started.    end-date - The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time.    end-date-type - Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it.    limited - The Capacity Reservation expires automatically at a specified date and time.      instance-match-criteria - Indicates the type of instance launches that the Capacity Reservation accepts. The options include:    open - The Capacity Reservation accepts all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes launch into the Capacity Reservation automatically without specifying any additional parameters.    targeted - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationIds = capacityReservationIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationIds = "CapacityReservationId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCapacityReservationsResult: AWSDecodableShape {
        public struct _CapacityReservationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Capacity Reservations.
        @OptionalCustomCoding<ArrayCoder<_CapacityReservationsEncoding, CapacityReservation>>
        public var capacityReservations: [CapacityReservation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(capacityReservations: [CapacityReservation]? = nil, nextToken: String? = nil) {
            self.capacityReservations = capacityReservations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservations = "capacityReservationSet"
            case nextToken
        }
    }

    public struct DescribeCarrierGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// One or more carrier gateway IDs.
        @OptionalCustomCoding<StandardArrayCoder>
        public var carrierGatewayIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    carrier-gateway-id - The ID of the carrier gateway.    state - The state of the carrier gateway (pending | failed | available | deleting | deleted).    owner-id - The AWS account ID of the owner of the carrier gateway.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC associated with the carrier gateway.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(carrierGatewayIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.carrierGatewayIds = carrierGatewayIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayIds = "CarrierGatewayId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeCarrierGatewaysResult: AWSDecodableShape {
        public struct _CarrierGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the carrier gateway.
        @OptionalCustomCoding<ArrayCoder<_CarrierGatewaysEncoding, CarrierGateway>>
        public var carrierGateways: [CarrierGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(carrierGateways: [CarrierGateway]? = nil, nextToken: String? = nil) {
            self.carrierGateways = carrierGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGateways = "carrierGatewaySet"
            case nextToken
        }
    }

    public struct DescribeClassicLinkInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    group-id - The ID of a VPC security group that's associated with the instance.    instance-id - The ID of the instance.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC to which the instance is linked.  vpc-id - The ID of the VPC that the instance is linked to.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more instance IDs. Must be instances linked to a VPC through ClassicLink.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value. Constraint: If the value is greater than 1000, we return only 1000 items.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case instanceIds = "InstanceId"
            case maxResults
            case nextToken
        }
    }

    public struct DescribeClassicLinkInstancesResult: AWSDecodableShape {
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more linked EC2-Classic instances.
        @OptionalCustomCoding<ArrayCoder<_InstancesEncoding, ClassicLinkInstance>>
        public var instances: [ClassicLinkInstance]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instances: [ClassicLinkInstance]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "instancesSet"
            case nextToken
        }
    }

    public struct DescribeClientVpnAuthorizationRulesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    description - The description of the authorization rule.    destination-cidr - The CIDR of the network to which the authorization rule applies.    group-id - The ID of the Active Directory group to which the authorization rule grants access.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnAuthorizationRulesResult: AWSDecodableShape {
        public struct _AuthorizationRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the authorization rules.
        @OptionalCustomCoding<ArrayCoder<_AuthorizationRulesEncoding, AuthorizationRule>>
        public var authorizationRules: [AuthorizationRule]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(authorizationRules: [AuthorizationRule]? = nil, nextToken: String? = nil) {
            self.authorizationRules = authorizationRules
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case authorizationRules = "authorizationRule"
            case nextToken
        }
    }

    public struct DescribeClientVpnConnectionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    connection-id - The ID of the connection.    username - For Active Directory client authentication, the user name of the client who established the client connection.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnConnectionsResult: AWSDecodableShape {
        public struct _ConnectionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the active and terminated client connections.
        @OptionalCustomCoding<ArrayCoder<_ConnectionsEncoding, ClientVpnConnection>>
        public var connections: [ClientVpnConnection]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(connections: [ClientVpnConnection]? = nil, nextToken: String? = nil) {
            self.connections = connections
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connections
            case nextToken
        }
    }

    public struct DescribeClientVpnEndpointsRequest: AWSEncodableShape {
        public struct _ClientVpnEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Client VPN endpoint.
        @OptionalCustomCoding<ArrayCoder<_ClientVpnEndpointIdsEncoding, String>>
        public var clientVpnEndpointIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    endpoint-id - The ID of the Client VPN endpoint.    transport-protocol - The transport protocol (tcp | udp).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointIds = clientVpnEndpointIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointIds = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnEndpointsResult: AWSDecodableShape {
        public struct _ClientVpnEndpointsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Client VPN endpoints.
        @OptionalCustomCoding<ArrayCoder<_ClientVpnEndpointsEncoding, ClientVpnEndpoint>>
        public var clientVpnEndpoints: [ClientVpnEndpoint]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(clientVpnEndpoints: [ClientVpnEndpoint]? = nil, nextToken: String? = nil) {
            self.clientVpnEndpoints = clientVpnEndpoints
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpoints = "clientVpnEndpoint"
            case nextToken
        }
    }

    public struct DescribeClientVpnRoutesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    destination-cidr - The CIDR of the route destination.    origin - How the route was associated with the Client VPN endpoint (associate | add-route).    target-subnet - The ID of the subnet through which traffic is routed.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnRoutesResult: AWSDecodableShape {
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Client VPN endpoint routes.
        @OptionalCustomCoding<ArrayCoder<_RoutesEncoding, ClientVpnRoute>>
        public var routes: [ClientVpnRoute]?

        public init(nextToken: String? = nil, routes: [ClientVpnRoute]? = nil) {
            self.nextToken = nextToken
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case routes
        }
    }

    public struct DescribeClientVpnTargetNetworksRequest: AWSEncodableShape {
        public struct _AssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The IDs of the target network associations.
        @OptionalCustomCoding<ArrayCoder<_AssociationIdsEncoding, String>>
        public var associationIds: [String]?
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    association-id - The ID of the association.    target-network-id - The ID of the subnet specified as the target network.    vpc-id - The ID of the VPC in which the target network is located.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(associationIds: [String]? = nil, clientVpnEndpointId: String, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.associationIds = associationIds
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationIds"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeClientVpnTargetNetworksResult: AWSDecodableShape {
        public struct _ClientVpnTargetNetworksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associated target networks.
        @OptionalCustomCoding<ArrayCoder<_ClientVpnTargetNetworksEncoding, TargetNetwork>>
        public var clientVpnTargetNetworks: [TargetNetwork]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(clientVpnTargetNetworks: [TargetNetwork]? = nil, nextToken: String? = nil) {
            self.clientVpnTargetNetworks = clientVpnTargetNetworks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnTargetNetworks
            case nextToken
        }
    }

    public struct DescribeCoipPoolsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PoolIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The following are the possible values:    coip-pool.pool-id       coip-pool.local-gateway-route-table-id
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the address pools.
        @OptionalCustomCoding<ArrayCoder<_PoolIdsEncoding, String>>
        public var poolIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolIds = poolIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolIds = "PoolId"
        }
    }

    public struct DescribeCoipPoolsResult: AWSDecodableShape {
        public struct _CoipPoolsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the address pools.
        @OptionalCustomCoding<ArrayCoder<_CoipPoolsEncoding, CoipPool>>
        public var coipPools: [CoipPool]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(coipPools: [CoipPool]? = nil, nextToken: String? = nil) {
            self.coipPools = coipPools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case coipPools = "coipPoolSet"
            case nextToken
        }
    }

    public struct DescribeConversionTasksRequest: AWSEncodableShape {
        public struct _ConversionTaskIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The conversion task IDs.
        @OptionalCustomCoding<ArrayCoder<_ConversionTaskIdsEncoding, String>>
        public var conversionTaskIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(conversionTaskIds: [String]? = nil, dryRun: Bool? = nil) {
            self.conversionTaskIds = conversionTaskIds
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTaskIds = "conversionTaskId"
            case dryRun
        }
    }

    public struct DescribeConversionTasksResult: AWSDecodableShape {
        public struct _ConversionTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the conversion tasks.
        @OptionalCustomCoding<ArrayCoder<_ConversionTasksEncoding, ConversionTask>>
        public var conversionTasks: [ConversionTask]?

        public init(conversionTasks: [ConversionTask]? = nil) {
            self.conversionTasks = conversionTasks
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTasks
        }
    }

    public struct DescribeCustomerGatewaysRequest: AWSEncodableShape {
        public struct _CustomerGatewayIdsEncoding: ArrayCoderProperties { public static let member = "CustomerGatewayId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// One or more customer gateway IDs. Default: Describes all your customer gateways.
        @OptionalCustomCoding<ArrayCoder<_CustomerGatewayIdsEncoding, String>>
        public var customerGatewayIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    bgp-asn - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).    customer-gateway-id - The ID of the customer gateway.    ip-address - The IP address of the customer gateway's Internet-routable external interface.    state - The state of the customer gateway (pending | available | deleting | deleted).    type - The type of customer gateway. Currently, the only supported type is ipsec.1.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?

        public init(customerGatewayIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil) {
            self.customerGatewayIds = customerGatewayIds
            self.dryRun = dryRun
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayIds = "CustomerGatewayId"
            case dryRun
            case filters = "Filter"
        }
    }

    public struct DescribeCustomerGatewaysResult: AWSDecodableShape {
        public struct _CustomerGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more customer gateways.
        @OptionalCustomCoding<ArrayCoder<_CustomerGatewaysEncoding, CustomerGateway>>
        public var customerGateways: [CustomerGateway]?

        public init(customerGateways: [CustomerGateway]? = nil) {
            self.customerGateways = customerGateways
        }

        private enum CodingKeys: String, CodingKey {
            case customerGateways = "customerGatewaySet"
        }
    }

    public struct DescribeDhcpOptionsRequest: AWSEncodableShape {
        public struct _DhcpOptionsIdsEncoding: ArrayCoderProperties { public static let member = "DhcpOptionsId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The IDs of one or more DHCP options sets. Default: Describes all your DHCP options sets.
        @OptionalCustomCoding<ArrayCoder<_DhcpOptionsIdsEncoding, String>>
        public var dhcpOptionsIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    dhcp-options-id - The ID of a DHCP options set.    key - The key for one of the options (for example, domain-name).    value - The value for one of the options.    owner-id - The ID of the AWS account that owns the DHCP options set.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dhcpOptionsIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dhcpOptionsIds = dhcpOptionsIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptionsIds = "DhcpOptionsId"
            case dryRun
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeDhcpOptionsResult: AWSDecodableShape {
        public struct _DhcpOptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more DHCP options sets.
        @OptionalCustomCoding<ArrayCoder<_DhcpOptionsEncoding, DhcpOptions>>
        public var dhcpOptions: [DhcpOptions]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(dhcpOptions: [DhcpOptions]? = nil, nextToken: String? = nil) {
            self.dhcpOptions = dhcpOptions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpOptions = "dhcpOptionsSet"
            case nextToken
        }
    }

    public struct DescribeEgressOnlyInternetGatewaysRequest: AWSEncodableShape {
        public struct _EgressOnlyInternetGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more egress-only internet gateway IDs.
        @OptionalCustomCoding<ArrayCoder<_EgressOnlyInternetGatewayIdsEncoding, String>>
        public var egressOnlyInternetGatewayIds: [String]?
        /// One or more filters.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, egressOnlyInternetGatewayIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayIds = egressOnlyInternetGatewayIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case egressOnlyInternetGatewayIds = "EgressOnlyInternetGatewayId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeEgressOnlyInternetGatewaysResult: AWSDecodableShape {
        public struct _EgressOnlyInternetGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the egress-only internet gateways.
        @OptionalCustomCoding<ArrayCoder<_EgressOnlyInternetGatewaysEncoding, EgressOnlyInternetGateway>>
        public var egressOnlyInternetGateways: [EgressOnlyInternetGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(egressOnlyInternetGateways: [EgressOnlyInternetGateway]? = nil, nextToken: String? = nil) {
            self.egressOnlyInternetGateways = egressOnlyInternetGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case egressOnlyInternetGateways = "egressOnlyInternetGatewaySet"
            case nextToken
        }
    }

    public struct DescribeElasticGpusRequest: AWSEncodableShape {
        public struct _ElasticGpuIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic Graphics accelerator IDs.
        @OptionalCustomCoding<ArrayCoder<_ElasticGpuIdsEncoding, String>>
        public var elasticGpuIds: [String]?
        /// The filters.    availability-zone - The Availability Zone in which the Elastic Graphics accelerator resides.    elastic-gpu-health - The status of the Elastic Graphics accelerator (OK | IMPAIRED).    elastic-gpu-state - The state of the Elastic Graphics accelerator (ATTACHED).    elastic-gpu-type - The type of Elastic Graphics accelerator; for example, eg1.medium.    instance-id - The ID of the instance to which the Elastic Graphics accelerator is associated.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, elasticGpuIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.elasticGpuIds = elasticGpuIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 10)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case elasticGpuIds = "ElasticGpuId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeElasticGpusResult: AWSDecodableShape {
        public struct _ElasticGpuSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Elastic Graphics accelerators.
        @OptionalCustomCoding<ArrayCoder<_ElasticGpuSetEncoding, ElasticGpus>>
        public var elasticGpuSet: [ElasticGpus]?
        /// The total number of items to return. If the total number of items available is more than the value specified in max-items then a Next-Token will be provided in the output that you can use to resume pagination.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(elasticGpuSet: [ElasticGpus]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.elasticGpuSet = elasticGpuSet
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case elasticGpuSet
            case maxResults
            case nextToken
        }
    }

    public struct DescribeExportImageTasksRequest: AWSEncodableShape {
        public struct _ExportImageTaskIdsEncoding: ArrayCoderProperties { public static let member = "ExportImageTaskId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the export image tasks.
        @OptionalCustomCoding<ArrayCoder<_ExportImageTaskIdsEncoding, String>>
        public var exportImageTaskIds: [String]?
        /// Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// A token that indicates the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, exportImageTaskIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.exportImageTaskIds = exportImageTaskIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 500)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case exportImageTaskIds = "ExportImageTaskId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeExportImageTasksResult: AWSDecodableShape {
        public struct _ExportImageTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the export image tasks.
        @OptionalCustomCoding<ArrayCoder<_ExportImageTasksEncoding, ExportImageTask>>
        public var exportImageTasks: [ExportImageTask]?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(exportImageTasks: [ExportImageTask]? = nil, nextToken: String? = nil) {
            self.exportImageTasks = exportImageTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case exportImageTasks = "exportImageTaskSet"
            case nextToken
        }
    }

    public struct DescribeExportTasksRequest: AWSEncodableShape {
        public struct _ExportTaskIdsEncoding: ArrayCoderProperties { public static let member = "ExportTaskId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The export task IDs.
        @OptionalCustomCoding<ArrayCoder<_ExportTaskIdsEncoding, String>>
        public var exportTaskIds: [String]?
        /// the filters for the export tasks.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?

        public init(exportTaskIds: [String]? = nil, filters: [Filter]? = nil) {
            self.exportTaskIds = exportTaskIds
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case exportTaskIds = "exportTaskId"
            case filters = "Filter"
        }
    }

    public struct DescribeExportTasksResult: AWSDecodableShape {
        public struct _ExportTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the export tasks.
        @OptionalCustomCoding<ArrayCoder<_ExportTasksEncoding, ExportTask>>
        public var exportTasks: [ExportTask]?

        public init(exportTasks: [ExportTask]? = nil) {
            self.exportTasks = exportTasks
        }

        private enum CodingKeys: String, CodingKey {
            case exportTasks = "exportTaskSet"
        }
    }

    public struct DescribeFastSnapshotRestoreSuccessItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The time at which fast snapshot restores entered the disabled state.
        public let disabledTime: Date?
        /// The time at which fast snapshot restores entered the disabling state.
        public let disablingTime: Date?
        /// The time at which fast snapshot restores entered the enabled state.
        public let enabledTime: Date?
        /// The time at which fast snapshot restores entered the enabling state.
        public let enablingTime: Date?
        /// The time at which fast snapshot restores entered the optimizing state.
        public let optimizingTime: Date?
        /// The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
        public let ownerAlias: String?
        /// The ID of the AWS account that enabled fast snapshot restores on the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of fast snapshot restores.
        public let state: FastSnapshotRestoreStateCode?
        /// The reason for the state transition. The possible values are as follows:    Client.UserInitiated - The state successfully transitioned to enabling or disabling.    Client.UserInitiated - Lifecycle state transition - The state successfully transitioned to optimizing, enabled, or disabled.
        public let stateTransitionReason: String?

        public init(availabilityZone: String? = nil, disabledTime: Date? = nil, disablingTime: Date? = nil, enabledTime: Date? = nil, enablingTime: Date? = nil, optimizingTime: Date? = nil, ownerAlias: String? = nil, ownerId: String? = nil, snapshotId: String? = nil, state: FastSnapshotRestoreStateCode? = nil, stateTransitionReason: String? = nil) {
            self.availabilityZone = availabilityZone
            self.disabledTime = disabledTime
            self.disablingTime = disablingTime
            self.enabledTime = enabledTime
            self.enablingTime = enablingTime
            self.optimizingTime = optimizingTime
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.snapshotId = snapshotId
            self.state = state
            self.stateTransitionReason = stateTransitionReason
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case disabledTime
            case disablingTime
            case enabledTime
            case enablingTime
            case optimizingTime
            case ownerAlias
            case ownerId
            case snapshotId
            case state
            case stateTransitionReason
        }
    }

    public struct DescribeFastSnapshotRestoresRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The possible values are:    availability-zone: The Availability Zone of the snapshot.    owner-id: The ID of the AWS account that enabled fast snapshot restore on the snapshot.    snapshot-id: The ID of the snapshot.    state: The state of fast snapshot restores for the snapshot (enabling | optimizing | enabled | disabling | disabled).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFastSnapshotRestoresResult: AWSDecodableShape {
        public struct _FastSnapshotRestoresEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the state of fast snapshot restores.
        @OptionalCustomCoding<ArrayCoder<_FastSnapshotRestoresEncoding, DescribeFastSnapshotRestoreSuccessItem>>
        public var fastSnapshotRestores: [DescribeFastSnapshotRestoreSuccessItem]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(fastSnapshotRestores: [DescribeFastSnapshotRestoreSuccessItem]? = nil, nextToken: String? = nil) {
            self.fastSnapshotRestores = fastSnapshotRestores
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fastSnapshotRestores = "fastSnapshotRestoreSet"
            case nextToken
        }
    }

    public struct DescribeFleetError: AWSDecodableShape {
        /// The error code that indicates why the instance could not be launched. For more information about error codes, see Error Codes.
        public let errorCode: String?
        /// The error message that describes why the instance could not be launched. For more information about error messages, see Error Codes.
        public let errorMessage: String?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that could not be launched was a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?

        public init(errorCode: String? = nil, errorMessage: String? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil) {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode
            case errorMessage
            case launchTemplateAndOverrides
            case lifecycle
        }
    }

    public struct DescribeFleetHistoryRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of events to describe. By default, all events are described.
        public let eventType: FleetEventType?
        /// The ID of the EC2 Fleet.
        public let fleetId: String
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date

        public init(dryRun: Bool? = nil, eventType: FleetEventType? = nil, fleetId: String, maxResults: Int? = nil, nextToken: String? = nil, startTime: Date) {
            self.dryRun = dryRun
            self.eventType = eventType
            self.fleetId = fleetId
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case eventType = "EventType"
            case fleetId = "FleetId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case startTime = "StartTime"
        }
    }

    public struct DescribeFleetHistoryResult: AWSDecodableShape {
        public struct _HistoryRecordsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the EC Fleet.
        public let fleetId: String?
        /// Information about the events in the history of the EC2 Fleet.
        @OptionalCustomCoding<ArrayCoder<_HistoryRecordsEncoding, HistoryRecordEntry>>
        public var historyRecords: [HistoryRecordEntry]?
        /// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present.
        public let lastEvaluatedTime: Date?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The start date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date?

        public init(fleetId: String? = nil, historyRecords: [HistoryRecordEntry]? = nil, lastEvaluatedTime: Date? = nil, nextToken: String? = nil, startTime: Date? = nil) {
            self.fleetId = fleetId
            self.historyRecords = historyRecords
            self.lastEvaluatedTime = lastEvaluatedTime
            self.nextToken = nextToken
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId
            case historyRecords = "historyRecordSet"
            case lastEvaluatedTime
            case nextToken
            case startTime
        }
    }

    public struct DescribeFleetInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    instance-type - The instance type.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The ID of the EC2 Fleet.
        public let fleetId: String
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, fleetId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.fleetId = fleetId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case fleetId = "FleetId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetInstancesResult: AWSDecodableShape {
        public struct _ActiveInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The running instances. This list is refreshed periodically and might be out of date.
        @OptionalCustomCoding<ArrayCoder<_ActiveInstancesEncoding, ActiveInstance>>
        public var activeInstances: [ActiveInstance]?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(activeInstances: [ActiveInstance]? = nil, fleetId: String? = nil, nextToken: String? = nil) {
            self.activeInstances = activeInstances
            self.fleetId = fleetId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case activeInstances = "activeInstanceSet"
            case fleetId
            case nextToken
        }
    }

    public struct DescribeFleetsInstances: AWSDecodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the instances.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The launch templates and overrides that were used for launching the instances. The values that you specify in the Overrides replace the values in the launch template.
        public let launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse?
        /// Indicates if the instance that was launched is a Spot Instance or On-Demand Instance.
        public let lifecycle: InstanceLifecycle?
        /// The value is Windows for Windows instances. Otherwise, the value is blank.
        public let platform: PlatformValues?

        public init(instanceIds: [String]? = nil, instanceType: InstanceType? = nil, launchTemplateAndOverrides: LaunchTemplateAndOverridesResponse? = nil, lifecycle: InstanceLifecycle? = nil, platform: PlatformValues? = nil) {
            self.instanceIds = instanceIds
            self.instanceType = instanceType
            self.launchTemplateAndOverrides = launchTemplateAndOverrides
            self.lifecycle = lifecycle
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds
            case instanceType
            case launchTemplateAndOverrides
            case lifecycle
            case platform
        }
    }

    public struct DescribeFleetsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    activity-status - The progress of the EC2 Fleet ( error | pending-fulfillment | pending-termination | fulfilled).    excess-capacity-termination-policy - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (true | false).    fleet-state - The state of the EC2 Fleet (submitted | active | deleted | failed | deleted-running | deleted-terminating | modifying).    replace-unhealthy-instances - Indicates whether EC2 Fleet should replace unhealthy instances (true | false).    type - The type of request (instant | request | maintain).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The ID of the EC2 Fleets.
        @OptionalCustomCoding<StandardArrayCoder>
        public var fleetIds: [String]?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, fleetIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.fleetIds = fleetIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case fleetIds = "FleetId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFleetsResult: AWSDecodableShape {
        public struct _FleetsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the EC2 Fleets.
        @OptionalCustomCoding<ArrayCoder<_FleetsEncoding, FleetData>>
        public var fleets: [FleetData]?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(fleets: [FleetData]? = nil, nextToken: String? = nil) {
            self.fleets = fleets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleets = "fleetSet"
            case nextToken
        }
    }

    public struct DescribeFlowLogsRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _FlowLogIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    deliver-log-status - The status of the logs delivery (SUCCESS | FAILED).    log-destination-type - The type of destination to which the flow log publishes data. Possible destination types include cloud-watch-logs and s3.    flow-log-id - The ID of the flow log.    log-group-name - The name of the log group.    resource-id - The ID of the VPC, subnet, or network interface.    traffic-type - The type of traffic (ACCEPT | REJECT | ALL).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// One or more flow log IDs. Constraint: Maximum of 1000 flow log IDs.
        @OptionalCustomCoding<ArrayCoder<_FlowLogIdsEncoding, String>>
        public var flowLogIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filter: [Filter]? = nil, flowLogIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filter = filter
            self.flowLogIds = flowLogIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filter = "Filter"
            case flowLogIds = "FlowLogId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeFlowLogsResult: AWSDecodableShape {
        public struct _FlowLogsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the flow logs.
        @OptionalCustomCoding<ArrayCoder<_FlowLogsEncoding, FlowLog>>
        public var flowLogs: [FlowLog]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(flowLogs: [FlowLog]? = nil, nextToken: String? = nil) {
            self.flowLogs = flowLogs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case flowLogs = "flowLogSet"
            case nextToken
        }
    }

    public struct DescribeFpgaImageAttributeRequest: AWSEncodableShape {
        /// The AFI attribute.
        public let attribute: FpgaImageAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String

        public init(attribute: FpgaImageAttributeName, dryRun: Bool? = nil, fpgaImageId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
        }
    }

    public struct DescribeFpgaImageAttributeResult: AWSDecodableShape {
        /// Information about the attribute.
        public let fpgaImageAttribute: FpgaImageAttribute?

        public init(fpgaImageAttribute: FpgaImageAttribute? = nil) {
            self.fpgaImageAttribute = fpgaImageAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageAttribute
        }
    }

    public struct DescribeFpgaImagesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _FpgaImageIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _OwnersEncoding: ArrayCoderProperties { public static let member = "Owner" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    create-time - The creation time of the AFI.    fpga-image-id - The FPGA image identifier (AFI ID).    fpga-image-global-id - The global FPGA image identifier (AGFI ID).    name - The name of the AFI.    owner-id - The AWS account ID of the AFI owner.    product-code - The product code.    shell-version - The version of the AWS Shell that was used to create the bitstream.    state - The state of the AFI (pending | failed | available | unavailable).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    update-time - The time of the most recent update.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The AFI IDs.
        @OptionalCustomCoding<ArrayCoder<_FpgaImageIdsEncoding, String>>
        public var fpgaImageIds: [String]?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// Filters the AFI by owner. Specify an AWS account ID, self (owner is the sender of the request), or an AWS owner alias (valid values are amazon | aws-marketplace).
        @OptionalCustomCoding<ArrayCoder<_OwnersEncoding, String>>
        public var owners: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, fpgaImageIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil, owners: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.fpgaImageIds = fpgaImageIds
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.owners = owners
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case fpgaImageIds = "FpgaImageId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case owners = "Owner"
        }
    }

    public struct DescribeFpgaImagesResult: AWSDecodableShape {
        public struct _FpgaImagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the FPGA images.
        @OptionalCustomCoding<ArrayCoder<_FpgaImagesEncoding, FpgaImage>>
        public var fpgaImages: [FpgaImage]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(fpgaImages: [FpgaImage]? = nil, nextToken: String? = nil) {
            self.fpgaImages = fpgaImages
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImages = "fpgaImageSet"
            case nextToken
        }
    }

    public struct DescribeHostReservationOfferingsRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The filters.    instance-family - The instance family of the offering (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).
        @OptionalCustomCoding<ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
        public let maxDuration: Int?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
        public let minDuration: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?
        /// The ID of the reservation offering.
        public let offeringId: String?

        public init(filter: [Filter]? = nil, maxDuration: Int? = nil, maxResults: Int? = nil, minDuration: Int? = nil, nextToken: String? = nil, offeringId: String? = nil) {
            self.filter = filter
            self.maxDuration = maxDuration
            self.maxResults = maxResults
            self.minDuration = minDuration
            self.nextToken = nextToken
            self.offeringId = offeringId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 500)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case maxDuration = "MaxDuration"
            case maxResults = "MaxResults"
            case minDuration = "MinDuration"
            case nextToken = "NextToken"
            case offeringId = "OfferingId"
        }
    }

    public struct DescribeHostReservationOfferingsResult: AWSDecodableShape {
        public struct _OfferingSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the offerings.
        @OptionalCustomCoding<ArrayCoder<_OfferingSetEncoding, HostOffering>>
        public var offeringSet: [HostOffering]?

        public init(nextToken: String? = nil, offeringSet: [HostOffering]? = nil) {
            self.nextToken = nextToken
            self.offeringSet = offeringSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case offeringSet
        }
    }

    public struct DescribeHostReservationsRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _HostReservationIdSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The filters.    instance-family - The instance family (for example, m4).    payment-option - The payment option (NoUpfront | PartialUpfront | AllUpfront).    state - The state of the reservation (payment-pending | payment-failed | active | retired).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// The host reservation IDs.
        @OptionalCustomCoding<ArrayCoder<_HostReservationIdSetEncoding, String>>
        public var hostReservationIdSet: [String]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(filter: [Filter]? = nil, hostReservationIdSet: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.hostReservationIdSet = hostReservationIdSet
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case hostReservationIdSet = "HostReservationIdSet"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeHostReservationsResult: AWSDecodableShape {
        public struct _HostReservationSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Details about the reservation's configuration.
        @OptionalCustomCoding<ArrayCoder<_HostReservationSetEncoding, HostReservation>>
        public var hostReservationSet: [HostReservation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hostReservationSet: [HostReservation]? = nil, nextToken: String? = nil) {
            self.hostReservationSet = hostReservationSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hostReservationSet
            case nextToken
        }
    }

    public struct DescribeHostsRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _HostIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The filters.    auto-placement - Whether auto-placement is enabled or disabled (on | off).    availability-zone - The Availability Zone of the host.    client-token - The idempotency token that you provided when you allocated the host.    host-reservation-id - The ID of the reservation assigned to this host.    instance-type - The instance type size that the Dedicated Host is configured to support.    state - The allocation state of the Dedicated Host (available | under-assessment | permanent-failure | released | released-permanent-failure).    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
        @OptionalCustomCoding<ArrayCoder<_HostIdsEncoding, String>>
        public var hostIds: [String]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. You cannot specify this parameter and the host IDs parameter in the same request.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(filter: [Filter]? = nil, hostIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.filter = filter
            self.hostIds = hostIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filter
            case hostIds = "hostId"
            case maxResults
            case nextToken
        }
    }

    public struct DescribeHostsResult: AWSDecodableShape {
        public struct _HostsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Dedicated Hosts.
        @OptionalCustomCoding<ArrayCoder<_HostsEncoding, Host>>
        public var hosts: [Host]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(hosts: [Host]? = nil, nextToken: String? = nil) {
            self.hosts = hosts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hosts = "hostSet"
            case nextToken
        }
    }

    public struct DescribeIamInstanceProfileAssociationsRequest: AWSEncodableShape {
        public struct _AssociationIdsEncoding: ArrayCoderProperties { public static let member = "AssociationId" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The IAM instance profile associations.
        @OptionalCustomCoding<ArrayCoder<_AssociationIdsEncoding, String>>
        public var associationIds: [String]?
        /// The filters.    instance-id - The ID of the instance.    state - The state of the association (associating | associated | disassociating).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(associationIds: [String]? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.associationIds = associationIds
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationId"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeIamInstanceProfileAssociationsResult: AWSDecodableShape {
        public struct _IamInstanceProfileAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IAM instance profile associations.
        @OptionalCustomCoding<ArrayCoder<_IamInstanceProfileAssociationsEncoding, IamInstanceProfileAssociation>>
        public var iamInstanceProfileAssociations: [IamInstanceProfileAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(iamInstanceProfileAssociations: [IamInstanceProfileAssociation]? = nil, nextToken: String? = nil) {
            self.iamInstanceProfileAssociations = iamInstanceProfileAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociations = "iamInstanceProfileAssociationSet"
            case nextToken
        }
    }

    public struct DescribeIdFormatRequest: AWSEncodableShape {
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
        public let resource: String?

        public init(resource: String? = nil) {
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
        }
    }

    public struct DescribeIdFormatResult: AWSDecodableShape {
        public struct _StatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the ID format for the resource.
        @OptionalCustomCoding<ArrayCoder<_StatusesEncoding, IdFormat>>
        public var statuses: [IdFormat]?

        public init(statuses: [IdFormat]? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct DescribeIdentityIdFormatRequest: AWSEncodableShape {
        /// The ARN of the principal, which can be an IAM role, IAM user, or the root user.
        public let principalArn: String
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
        public let resource: String?

        public init(principalArn: String, resource: String? = nil) {
            self.principalArn = principalArn
            self.resource = resource
        }

        private enum CodingKeys: String, CodingKey {
            case principalArn
            case resource
        }
    }

    public struct DescribeIdentityIdFormatResult: AWSDecodableShape {
        public struct _StatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the ID format for the resources.
        @OptionalCustomCoding<ArrayCoder<_StatusesEncoding, IdFormat>>
        public var statuses: [IdFormat]?

        public init(statuses: [IdFormat]? = nil) {
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case statuses = "statusSet"
        }
    }

    public struct DescribeImageAttributeRequest: AWSEncodableShape {
        /// The AMI attribute.  Note: The blockDeviceMapping attribute is deprecated. Using this attribute returns the Client.AuthFailure error. To get information about the block device mappings for an AMI, use the DescribeImages action.
        public let attribute: ImageAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String

        public init(attribute: ImageAttributeName, dryRun: Bool? = nil, imageId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun
            case imageId = "ImageId"
        }
    }

    public struct DescribeImagesRequest: AWSEncodableShape {
        public struct _ExecutableUsersEncoding: ArrayCoderProperties { public static let member = "ExecutableBy" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ImageIdsEncoding: ArrayCoderProperties { public static let member = "ImageId" }
        public struct _OwnersEncoding: ArrayCoderProperties { public static let member = "Owner" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Scopes the images by users with explicit launch permissions. Specify an AWS account ID, self (the sender of the request), or all (public AMIs).
        @OptionalCustomCoding<ArrayCoder<_ExecutableUsersEncoding, String>>
        public var executableUsers: [String]?
        /// The filters.    architecture - The image architecture (i386 | x86_64 | arm64).    block-device-mapping.delete-on-termination - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.snapshot-id - The ID of the snapshot used for the EBS volume.    block-device-mapping.volume-size - The volume size of the EBS volume, in GiB.    block-device-mapping.volume-type - The volume type of the EBS volume (gp2 | io1 | io2 | st1 | sc1 | standard).    block-device-mapping.encrypted - A Boolean that indicates whether the EBS volume is encrypted.    description - The description of the image (provided during image creation).    ena-support - A Boolean that indicates whether enhanced networking with ENA is enabled.    hypervisor - The hypervisor type (ovm | xen).    image-id - The ID of the image.    image-type - The image type (machine | kernel | ramdisk).    is-public - A Boolean that indicates whether the image is public.    kernel-id - The kernel ID.    manifest-location - The location of the image manifest.    name - The name of the AMI (provided during image creation).    owner-alias - The owner alias (amazon | aws-marketplace). The valid aliases are defined in an Amazon-maintained list. This is not the AWS account alias that can be set using the IAM console. We recommend that you use the Owner request parameter instead of this filter.    owner-id - The AWS account ID of the owner. We recommend that you use the Owner request parameter instead of this filter.    platform - The platform. To only list Windows-based AMIs, use windows.    product-code - The product code.    product-code.type - The type of the product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    state - The state of the image (available | pending | failed).    state-reason-code - The reason code for the state change.    state-reason-message - The message for the state change.    sriov-net-support - A value of simple indicates that enhanced networking with the Intel 82599 VF interface is enabled.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    virtualization-type - The virtualization type (paravirtual | hvm).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The image IDs. Default: Describes all images available to you.
        @OptionalCustomCoding<ArrayCoder<_ImageIdsEncoding, String>>
        public var imageIds: [String]?
        /// If true, all deprecated AMIs are included in the response. If false, no deprecated AMIs are included in the response. If no value is specified, the default value is false.  If you are the AMI owner, all deprecated AMIs appear in the response regardless of the value (true or false) that you set for this parameter.
        public let includeDeprecated: Bool?
        /// Scopes the results to images with the specified owners. You can specify a combination of AWS account IDs, self, amazon, and aws-marketplace. If you omit this parameter, the results include all images for which you have launch permissions, regardless of ownership.
        @OptionalCustomCoding<ArrayCoder<_OwnersEncoding, String>>
        public var owners: [String]?

        public init(dryRun: Bool? = nil, executableUsers: [String]? = nil, filters: [Filter]? = nil, imageIds: [String]? = nil, includeDeprecated: Bool? = nil, owners: [String]? = nil) {
            self.dryRun = dryRun
            self.executableUsers = executableUsers
            self.filters = filters
            self.imageIds = imageIds
            self.includeDeprecated = includeDeprecated
            self.owners = owners
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case executableUsers = "ExecutableBy"
            case filters = "Filter"
            case imageIds = "ImageId"
            case includeDeprecated = "IncludeDeprecated"
            case owners = "Owner"
        }
    }

    public struct DescribeImagesResult: AWSDecodableShape {
        public struct _ImagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the images.
        @OptionalCustomCoding<ArrayCoder<_ImagesEncoding, Image>>
        public var images: [Image]?

        public init(images: [Image]? = nil) {
            self.images = images
        }

        private enum CodingKeys: String, CodingKey {
            case images = "imagesSet"
        }
    }

    public struct DescribeImportImageTasksRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ImportTaskIdsEncoding: ArrayCoderProperties { public static let member = "ImportTaskId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filter tasks using the task-state filter and one of the following values: active, completed, deleting, or deleted.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the import image tasks.
        @OptionalCustomCoding<ArrayCoder<_ImportTaskIdsEncoding, String>>
        public var importTaskIds: [String]?
        /// The maximum number of results to return in a single call.
        public let maxResults: Int?
        /// A token that indicates the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, importTaskIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.importTaskIds = importTaskIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filters"
            case importTaskIds = "ImportTaskId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeImportImageTasksResult: AWSDecodableShape {
        public struct _ImportImageTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A list of zero or more import image tasks that are currently active or were completed or canceled in the previous 7 days.
        @OptionalCustomCoding<ArrayCoder<_ImportImageTasksEncoding, ImportImageTask>>
        public var importImageTasks: [ImportImageTask]?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(importImageTasks: [ImportImageTask]? = nil, nextToken: String? = nil) {
            self.importImageTasks = importImageTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case importImageTasks = "importImageTaskSet"
            case nextToken
        }
    }

    public struct DescribeImportSnapshotTasksRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ImportTaskIdsEncoding: ArrayCoderProperties { public static let member = "ImportTaskId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// A list of import snapshot task IDs.
        @OptionalCustomCoding<ArrayCoder<_ImportTaskIdsEncoding, String>>
        public var importTaskIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// A token that indicates the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, importTaskIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.importTaskIds = importTaskIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filters"
            case importTaskIds = "ImportTaskId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeImportSnapshotTasksResult: AWSDecodableShape {
        public struct _ImportSnapshotTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A list of zero or more import snapshot tasks that are currently active or were completed or canceled in the previous 7 days.
        @OptionalCustomCoding<ArrayCoder<_ImportSnapshotTasksEncoding, ImportSnapshotTask>>
        public var importSnapshotTasks: [ImportSnapshotTask]?
        /// The token to use to get the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(importSnapshotTasks: [ImportSnapshotTask]? = nil, nextToken: String? = nil) {
            self.importSnapshotTasks = importSnapshotTasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case importSnapshotTasks = "importSnapshotTaskSet"
            case nextToken
        }
    }

    public struct DescribeInstanceAttributeRequest: AWSEncodableShape {
        /// The instance attribute. Note: The enaSupport attribute is not supported at this time.
        public let attribute: InstanceAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String

        public init(attribute: InstanceAttributeName, dryRun: Bool? = nil, instanceId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute
            case dryRun
            case instanceId
        }
    }

    public struct DescribeInstanceCreditSpecificationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    instance-id - The ID of the instance.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The instance IDs. Default: Describes all your instances. Constraints: Maximum 1000 explicitly specified instance IDs.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case instanceIds = "InstanceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceCreditSpecificationsResult: AWSDecodableShape {
        public struct _InstanceCreditSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the credit option for CPU usage of an instance.
        @OptionalCustomCoding<ArrayCoder<_InstanceCreditSpecificationsEncoding, InstanceCreditSpecification>>
        public var instanceCreditSpecifications: [InstanceCreditSpecification]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceCreditSpecifications: [InstanceCreditSpecification]? = nil, nextToken: String? = nil) {
            self.instanceCreditSpecifications = instanceCreditSpecifications
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCreditSpecifications = "instanceCreditSpecificationSet"
            case nextToken
        }
    }

    public struct DescribeInstanceEventNotificationAttributesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DescribeInstanceEventNotificationAttributesResult: AWSDecodableShape {
        /// Information about the registered tag keys.
        public let instanceTagAttribute: InstanceTagNotificationAttribute?

        public init(instanceTagAttribute: InstanceTagNotificationAttribute? = nil) {
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTagAttribute
        }
    }

    public struct DescribeInstanceEventWindowsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceEventWindowIdsEncoding: ArrayCoderProperties { public static let member = "InstanceEventWindowId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    dedicated-host-id - The event windows associated with the specified Dedicated Host ID.    event-window-name - The event windows associated with the specified names.     instance-id - The event windows associated with the specified instance ID.    instance-tag - The event windows associated with the specified tag and value.    instance-tag-key - The event windows associated with the specified tag key, regardless of the value.    instance-tag-value - The event windows associated with the specified tag value, regardless of the key.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the event window. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value CMX, specify tag:Owner for the filter name and CMX for the filter value.     tag-key - The key of a tag assigned to the event window. Use this filter to find all event windows that have a tag with a specific key, regardless of the tag value.     tag-value - The value of a tag assigned to the event window. Use this filter to find all event windows that have a tag with a specific value, regardless of the tag key.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the event windows.
        @OptionalCustomCoding<ArrayCoder<_InstanceEventWindowIdsEncoding, String>>
        public var instanceEventWindowIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 20 and 500. You cannot specify this parameter and the event window IDs parameter in the same call.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceEventWindowIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceEventWindowIds = instanceEventWindowIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 500)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 20)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case instanceEventWindowIds = "InstanceEventWindowId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceEventWindowsResult: AWSDecodableShape {
        public struct _InstanceEventWindowsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the event windows.
        @OptionalCustomCoding<ArrayCoder<_InstanceEventWindowsEncoding, InstanceEventWindow>>
        public var instanceEventWindows: [InstanceEventWindow]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceEventWindows: [InstanceEventWindow]? = nil, nextToken: String? = nil) {
            self.instanceEventWindows = instanceEventWindows
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindows = "instanceEventWindowSet"
            case nextToken
        }
    }

    public struct DescribeInstanceStatusRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone of the instance.    event.code - The code for the scheduled event (instance-reboot | system-reboot | system-maintenance | instance-retirement | instance-stop).    event.description - A description of the event.    event.instance-event-id - The ID of the event whose date and time you are modifying.    event.not-after - The latest end time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before - The earliest start time for the scheduled event (for example, 2014-09-15T17:15:20.000Z).    event.not-before-deadline - The deadline for starting the event (for example, 2014-09-15T17:15:20.000Z).    instance-state-code - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-status.reachability - Filters on instance status where the name is reachability (passed | failed | initializing | insufficient-data).    instance-status.status - The status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).    system-status.reachability - Filters on system status where the name is reachability (passed | failed | initializing | insufficient-data).    system-status.status - The system status of the instance (ok | impaired | initializing | insufficient-data | not-applicable).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// When true, includes the health status for all instances. When false, includes the health status for running instances only. Default: false
        public let includeAllInstances: Bool?
        /// The instance IDs. Default: Describes all your instances. Constraints: Maximum 100 explicitly specified instance IDs.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, includeAllInstances: Bool? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.includeAllInstances = includeAllInstances
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case includeAllInstances
            case instanceIds = "InstanceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceStatusResult: AWSDecodableShape {
        public struct _InstanceStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the status of the instances.
        @OptionalCustomCoding<ArrayCoder<_InstanceStatusesEncoding, InstanceStatus>>
        public var instanceStatuses: [InstanceStatus]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceStatuses: [InstanceStatus]? = nil, nextToken: String? = nil) {
            self.instanceStatuses = instanceStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceStatuses = "instanceStatusSet"
            case nextToken
        }
    }

    public struct DescribeInstanceTypeOfferingsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    location - This depends on the location type. For example, if the location type is region (default), the location is the Region code (for example, us-east-2.)    instance-type - The instance type. For example, c5.2xlarge.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The location type.
        public let locationType: LocationType?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, locationType: LocationType? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.locationType = locationType
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case locationType = "LocationType"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceTypeOfferingsResult: AWSDecodableShape {
        public struct _InstanceTypeOfferingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The instance types offered.
        @OptionalCustomCoding<ArrayCoder<_InstanceTypeOfferingsEncoding, InstanceTypeOffering>>
        public var instanceTypeOfferings: [InstanceTypeOffering]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceTypeOfferings: [InstanceTypeOffering]? = nil, nextToken: String? = nil) {
            self.instanceTypeOfferings = instanceTypeOfferings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTypeOfferings = "instanceTypeOfferingSet"
            case nextToken
        }
    }

    public struct DescribeInstanceTypesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. Filter names and values are case-sensitive.    auto-recovery-supported - Indicates whether auto recovery is supported (true | false).    bare-metal - Indicates whether it is a bare metal instance type (true | false).    burstable-performance-supported - Indicates whether it is a burstable performance instance type (true | false).    current-generation - Indicates whether this instance type is the latest generation instance type of an instance family (true | false).    ebs-info.ebs-optimized-info.baseline-bandwidth-in-mbps - The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.baseline-iops - The baseline input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-info.baseline-throughput-in-mbps - The baseline throughput performance for an EBS-optimized instance type, in MB/s.    ebs-info.ebs-optimized-info.maximum-bandwidth-in-mbps - The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.    ebs-info.ebs-optimized-info.maximum-iops - The maximum input/output storage operations per second for an EBS-optimized instance type.    ebs-info.ebs-optimized-info.maximum-throughput-in-mbps - The maximum throughput performance for an EBS-optimized instance type, in MB/s.    ebs-info.ebs-optimized-support - Indicates whether the instance type is EBS-optimized (supported | unsupported | default).    ebs-info.encryption-support - Indicates whether EBS encryption is supported (supported | unsupported).    ebs-info.nvme-support - Indicates whether non-volatile memory express (NVMe) is supported for EBS volumes (required | supported | unsupported).    free-tier-eligible - Indicates whether the instance type is eligible to use in the free tier (true | false).    hibernation-supported - Indicates whether On-Demand hibernation is supported (true | false).    hypervisor - The hypervisor (nitro | xen).    instance-storage-info.disk.count - The number of local disks.    instance-storage-info.disk.size-in-gb - The storage size of each instance storage disk, in GB.    instance-storage-info.disk.type - The storage technology for the local instance storage disks (hdd | ssd).    instance-storage-info.nvme-support - Indicates whether non-volatile memory express (NVMe) is supported for instance store (required | supported) | unsupported).    instance-storage-info.total-size-in-gb - The total amount of storage available from all local instance storage, in GB.    instance-storage-supported - Indicates whether the instance type has local instance storage (true | false).    instance-type - The instance type (for example c5.2xlarge or c5*).    memory-info.size-in-mib - The memory size.    network-info.efa-info.maximum-efa-interfaces - The maximum number of Elastic Fabric Adapters (EFAs) per instance.    network-info.efa-supported - Indicates whether the instance type supports Elastic Fabric Adapter (EFA) (true | false).    network-info.ena-support - Indicates whether Elastic Network Adapter (ENA) is supported or required (required | supported | unsupported).    network-info.ipv4-addresses-per-interface - The maximum number of private IPv4 addresses per network interface.    network-info.ipv6-addresses-per-interface - The maximum number of private IPv6 addresses per network interface.    network-info.ipv6-supported - Indicates whether the instance type supports IPv6 (true | false).    network-info.maximum-network-interfaces - The maximum number of network interfaces per instance.    network-info.network-performance - The network performance (for example, "25 Gigabit").    processor-info.supported-architecture - The CPU architecture (arm64 | i386 | x86_64).    processor-info.sustained-clock-speed-in-ghz - The CPU clock speed, in GHz.    supported-boot-mode - The boot mode (legacy-bios | uefi).    supported-root-device-type - The root device type (ebs | instance-store).    supported-usage-class - The usage class (on-demand | spot).    supported-virtualization-type - The virtualization type (hvm | paravirtual).    vcpu-info.default-cores - The default number of cores for the instance type.    vcpu-info.default-threads-per-core - The default number of threads per core for the instance type.    vcpu-info.default-vcpus - The default number of vCPUs for the instance type.    vcpu-info.valid-cores - The number of cores that can be configured for the instance type.    vcpu-info.valid-threads-per-core - The number of threads per core that can be configured for the instance type. For example, "1" or "1,2".
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The instance types. For more information, see Instance types in the Amazon EC2 User Guide.
        @OptionalCustomCoding<StandardArrayCoder>
        public var instanceTypes: [InstanceType]?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceTypes: [InstanceType]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceTypes = instanceTypes
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.instanceTypes, name: "instanceTypes", parent: name, max: 100)
            try self.validate(self.instanceTypes, name: "instanceTypes", parent: name, min: 0)
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case instanceTypes = "InstanceType"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstanceTypesResult: AWSDecodableShape {
        public struct _InstanceTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The instance type. For more information, see Instance types in the Amazon EC2 User Guide.
        @OptionalCustomCoding<ArrayCoder<_InstanceTypesEncoding, InstanceTypeInfo>>
        public var instanceTypes: [InstanceTypeInfo]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(instanceTypes: [InstanceTypeInfo]? = nil, nextToken: String? = nil) {
            self.instanceTypes = instanceTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTypes = "instanceTypeSet"
            case nextToken
        }
    }

    public struct DescribeInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    affinity - The affinity setting for an instance running on a Dedicated Host (default | host).    architecture - The instance architecture (i386 | x86_64 | arm64).    availability-zone - The Availability Zone of the instance.    block-device-mapping.attach-time - The attach time for an EBS volume mapped to the instance, for example, 2010-09-15T17:15:20.000Z.    block-device-mapping.delete-on-termination - A Boolean that indicates whether the EBS volume is deleted on instance termination.    block-device-mapping.device-name - The device name specified in the block device mapping (for example, /dev/sdh or xvdh).    block-device-mapping.status - The status for the EBS volume (attaching | attached | detaching | detached).    block-device-mapping.volume-id - The volume ID of the EBS volume.    client-token - The idempotency token you provided when you launched the instance.    dns-name - The public DNS name of the instance.    group-id - The ID of the security group for the instance. EC2-Classic only.    group-name - The name of the security group for the instance. EC2-Classic only.    hibernation-options.configured - A Boolean that indicates whether the instance is enabled for hibernation. A value of true means that the instance is enabled for hibernation.     host-id - The ID of the Dedicated Host on which the instance is running, if applicable.    hypervisor - The hypervisor type of the instance (ovm | xen). The value xen is used for both Xen and Nitro hypervisors.    iam-instance-profile.arn - The instance profile associated with the instance. Specified as an ARN.    image-id - The ID of the image used to launch the instance.    instance-id - The ID of the instance.    instance-lifecycle - Indicates whether this is a Spot Instance or a Scheduled Instance (spot | scheduled).    instance-state-code - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).    instance-state-name - The state of the instance (pending | running | shutting-down | terminated | stopping | stopped).    instance-type - The type of instance (for example, t2.micro).    instance.group-id - The ID of the security group for the instance.     instance.group-name - The name of the security group for the instance.     ip-address - The public IPv4 address of the instance.    kernel-id - The kernel ID.    key-name - The name of the key pair used when the instance was launched.    launch-index - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on).     launch-time - The time when the instance was launched.    metadata-options.http-tokens - The metadata request authorization state (optional | required)    metadata-options.http-put-response-hop-limit - The http metadata request put response hop limit (integer, possible values 1 to 64)    metadata-options.http-endpoint - Enable or disable metadata access on http endpoint (enabled | disabled)    monitoring-state - Indicates whether detailed monitoring is enabled (disabled | enabled).    network-interface.addresses.private-ip-address - The private IPv4 address associated with the network interface.    network-interface.addresses.primary - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.    network-interface.addresses.association.public-ip - The ID of the association of an Elastic IP address (IPv4) with a network interface.    network-interface.addresses.association.ip-owner-id - The owner ID of the private IPv4 address associated with the network interface.    network-interface.association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    network-interface.association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    network-interface.association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    network-interface.association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    network-interface.attachment.attachment-id - The ID of the interface attachment.    network-interface.attachment.instance-id - The ID of the instance to which the network interface is attached.    network-interface.attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    network-interface.attachment.device-index - The device index to which the network interface is attached.    network-interface.attachment.status - The status of the attachment (attaching | attached | detaching | detached).    network-interface.attachment.attach-time - The time that the network interface was attached to an instance.    network-interface.attachment.delete-on-termination - Specifies whether the attachment is deleted when an instance is terminated.    network-interface.availability-zone - The Availability Zone for the network interface.    network-interface.description - The description of the network interface.    network-interface.group-id - The ID of a security group associated with the network interface.    network-interface.group-name - The name of a security group associated with the network interface.    network-interface.ipv6-addresses.ipv6-address - The IPv6 address associated with the network interface.    network-interface.mac-address - The MAC address of the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.owner-id - The ID of the owner of the network interface.    network-interface.private-dns-name - The private DNS name of the network interface.    network-interface.requester-id - The requester ID for the network interface.    network-interface.requester-managed - Indicates whether the network interface is being managed by Amazon Web Services.    network-interface.status - The status of the network interface (available) | in-use).    network-interface.source-dest-check - Whether the network interface performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.    network-interface.subnet-id - The ID of the subnet for the network interface.    network-interface.vpc-id - The ID of the VPC for the network interface.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The account ID of the instance owner.    placement-group-name - The name of the placement group for the instance.    placement-partition-number - The partition in which the instance is located.    platform - The platform. To list only Windows instances, use windows.    private-dns-name - The private IPv4 DNS name of the instance.    private-ip-address - The private IPv4 address of the instance.    product-code - The product code associated with the AMI used to launch the instance.    product-code.type - The type of product code (devpay | marketplace).    ramdisk-id - The RAM disk ID.    reason - The reason for the current state of the instance (for example, shows "User Initiated [date]" when you stop or terminate the instance). Similar to the state-reason-code filter.    requester-id - The ID of the entity that launched the instance on your behalf (for example, Management Console, Auto Scaling, and so on).    reservation-id - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.    root-device-name - The device name of the root device volume (for example, /dev/sda1).    root-device-type - The type of the root device volume (ebs | instance-store).    source-dest-check - Indicates whether the instance performs source/destination checking. A value of true means that checking is enabled, and false means that checking is disabled. The value must be false for the instance to perform network address translation (NAT) in your VPC.     spot-instance-request-id - The ID of the Spot Instance request.    state-reason-code - The reason code for the state change.    state-reason-message - A message that describes the state change.    subnet-id - The ID of the subnet for the instance.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    tenancy - The tenancy of an instance (dedicated | default | host).    virtualization-type - The virtualization type of the instance (paravirtual | hvm).    vpc-id - The ID of the VPC that the instance is running in.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The instance IDs. Default: Describes all your instances.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, instanceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.instanceIds = instanceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case instanceIds = "InstanceId"
            case maxResults
            case nextToken
        }
    }

    public struct DescribeInstancesResult: AWSDecodableShape {
        public struct _ReservationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the reservations.
        @OptionalCustomCoding<ArrayCoder<_ReservationsEncoding, Reservation>>
        public var reservations: [Reservation]?

        public init(nextToken: String? = nil, reservations: [Reservation]? = nil) {
            self.nextToken = nextToken
            self.reservations = reservations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case reservations = "reservationSet"
        }
    }

    public struct DescribeInternetGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _InternetGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    attachment.state - The current state of the attachment between the gateway and the VPC (available). Present only if a VPC is attached.    attachment.vpc-id - The ID of an attached VPC.    internet-gateway-id - The ID of the Internet gateway.    owner-id - The ID of the AWS account that owns the internet gateway.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more internet gateway IDs. Default: Describes all your internet gateways.
        @OptionalCustomCoding<ArrayCoder<_InternetGatewayIdsEncoding, String>>
        public var internetGatewayIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, internetGatewayIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.internetGatewayIds = internetGatewayIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case internetGatewayIds = "internetGatewayId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInternetGatewaysResult: AWSDecodableShape {
        public struct _InternetGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more internet gateways.
        @OptionalCustomCoding<ArrayCoder<_InternetGatewaysEncoding, InternetGateway>>
        public var internetGateways: [InternetGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(internetGateways: [InternetGateway]? = nil, nextToken: String? = nil) {
            self.internetGateways = internetGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case internetGateways = "internetGatewaySet"
            case nextToken
        }
    }

    public struct DescribeIpv6PoolsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PoolIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the IPv6 address pools.
        @OptionalCustomCoding<ArrayCoder<_PoolIdsEncoding, String>>
        public var poolIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolIds = poolIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolIds = "PoolId"
        }
    }

    public struct DescribeIpv6PoolsResult: AWSDecodableShape {
        public struct _Ipv6PoolsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IPv6 address pools.
        @OptionalCustomCoding<ArrayCoder<_Ipv6PoolsEncoding, Ipv6Pool>>
        public var ipv6Pools: [Ipv6Pool]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipv6Pools: [Ipv6Pool]? = nil, nextToken: String? = nil) {
            self.ipv6Pools = ipv6Pools
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Pools = "ipv6PoolSet"
            case nextToken
        }
    }

    public struct DescribeKeyPairsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _KeyNamesEncoding: ArrayCoderProperties { public static let member = "KeyName" }
        public struct _KeyPairIdsEncoding: ArrayCoderProperties { public static let member = "KeyPairId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    key-pair-id - The ID of the key pair.    fingerprint - The fingerprint of the key pair.    key-name - The name of the key pair.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The key pair names. Default: Describes all of your key pairs.
        @OptionalCustomCoding<ArrayCoder<_KeyNamesEncoding, String>>
        public var keyNames: [String]?
        /// The IDs of the key pairs.
        @OptionalCustomCoding<ArrayCoder<_KeyPairIdsEncoding, String>>
        public var keyPairIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, keyNames: [String]? = nil, keyPairIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.keyNames = keyNames
            self.keyPairIds = keyPairIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case keyNames = "KeyName"
            case keyPairIds = "KeyPairId"
        }
    }

    public struct DescribeKeyPairsResult: AWSDecodableShape {
        public struct _KeyPairsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the key pairs.
        @OptionalCustomCoding<ArrayCoder<_KeyPairsEncoding, KeyPairInfo>>
        public var keyPairs: [KeyPairInfo]?

        public init(keyPairs: [KeyPairInfo]? = nil) {
            self.keyPairs = keyPairs
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairs = "keySet"
        }
    }

    public struct DescribeLaunchTemplateVersionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    create-time - The time the launch template version was created.    ebs-optimized - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.    iam-instance-profile - The ARN of the IAM instance profile.    image-id - The ID of the AMI.    instance-type - The instance type.    is-default-version - A boolean that indicates whether the launch template version is the default version.    kernel-id - The kernel ID.    ram-disk-id - The RAM disk ID.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The ID of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template ID or the launch template name in the request. To describe all the latest or default launch template versions in your account, you must omit this parameter.
        public let launchTemplateId: String?
        /// The name of the launch template. To describe one or more versions of a specified launch template, you must specify either the launch template ID or the launch template name in the request. To describe all the latest or default launch template versions in your account, you must omit this parameter.
        public let launchTemplateName: String?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
        public let maxResults: Int?
        /// The version number up to which to describe launch template versions.
        public let maxVersion: String?
        /// The version number after which to describe launch template versions.
        public let minVersion: String?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// One or more versions of the launch template. Valid values depend on whether you are describing a specified launch template (by ID or name) or all launch templates in your account. To describe one or more versions of a specified launch template, valid values are $Latest, $Default, and numbers. To describe all launch templates in your account that are defined as the latest version, the valid value is $Latest. To describe all launch templates in your account that are defined as the default version, the valid value is $Default. You can specify $Latest and $Default in the same call. You cannot specify numbers.
        @OptionalCustomCoding<ArrayCoder<_VersionsEncoding, String>>
        public var versions: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, maxResults: Int? = nil, maxVersion: String? = nil, minVersion: String? = nil, nextToken: String? = nil, versions: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.maxResults = maxResults
            self.maxVersion = maxVersion
            self.minVersion = minVersion
            self.nextToken = nextToken
            self.versions = versions
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case maxResults = "MaxResults"
            case maxVersion = "MaxVersion"
            case minVersion = "MinVersion"
            case nextToken = "NextToken"
            case versions = "LaunchTemplateVersion"
        }
    }

    public struct DescribeLaunchTemplateVersionsResult: AWSDecodableShape {
        public struct _LaunchTemplateVersionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the launch template versions.
        @OptionalCustomCoding<ArrayCoder<_LaunchTemplateVersionsEncoding, LaunchTemplateVersion>>
        public var launchTemplateVersions: [LaunchTemplateVersion]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(launchTemplateVersions: [LaunchTemplateVersion]? = nil, nextToken: String? = nil) {
            self.launchTemplateVersions = launchTemplateVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateVersions = "launchTemplateVersionSet"
            case nextToken
        }
    }

    public struct DescribeLaunchTemplatesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LaunchTemplateIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LaunchTemplateNamesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    create-time - The time the launch template was created.    launch-template-name - The name of the launch template.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more launch template IDs.
        @OptionalCustomCoding<ArrayCoder<_LaunchTemplateIdsEncoding, String>>
        public var launchTemplateIds: [String]?
        /// One or more launch template names.
        @OptionalCustomCoding<ArrayCoder<_LaunchTemplateNamesEncoding, String>>
        public var launchTemplateNames: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, launchTemplateIds: [String]? = nil, launchTemplateNames: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.launchTemplateIds = launchTemplateIds
            self.launchTemplateNames = launchTemplateNames
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.launchTemplateNames?.forEach {
                try validate($0, name: "launchTemplateNames[]", parent: name, max: 128)
                try validate($0, name: "launchTemplateNames[]", parent: name, min: 3)
                try validate($0, name: "launchTemplateNames[]", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
            }
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case launchTemplateIds = "LaunchTemplateId"
            case launchTemplateNames = "LaunchTemplateName"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLaunchTemplatesResult: AWSDecodableShape {
        public struct _LaunchTemplatesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the launch templates.
        @OptionalCustomCoding<ArrayCoder<_LaunchTemplatesEncoding, LaunchTemplate>>
        public var launchTemplates: [LaunchTemplate]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(launchTemplates: [LaunchTemplate]? = nil, nextToken: String? = nil) {
            self.launchTemplates = launchTemplates
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplates
            case nextToken
        }
    }

    public struct DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-virtual-interface-group-association-id - The ID of the association.    local-gateway-route-table-virtual-interface-group-id - The ID of the virtual interface group.    state - The state of the association.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the associations.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdsEncoding, String>>
        public var localGatewayRouteTableVirtualInterfaceGroupAssociationIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableVirtualInterfaceGroupAssociationIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableVirtualInterfaceGroupAssociationIds = localGatewayRouteTableVirtualInterfaceGroupAssociationIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableVirtualInterfaceGroupAssociationIds = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult: AWSDecodableShape {
        public struct _LocalGatewayRouteTableVirtualInterfaceGroupAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associations.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayRouteTableVirtualInterfaceGroupAssociationsEncoding, LocalGatewayRouteTableVirtualInterfaceGroupAssociation>>
        public var localGatewayRouteTableVirtualInterfaceGroupAssociations: [LocalGatewayRouteTableVirtualInterfaceGroupAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayRouteTableVirtualInterfaceGroupAssociations: [LocalGatewayRouteTableVirtualInterfaceGroupAssociation]? = nil, nextToken: String? = nil) {
            self.localGatewayRouteTableVirtualInterfaceGroupAssociations = localGatewayRouteTableVirtualInterfaceGroupAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVirtualInterfaceGroupAssociations = "localGatewayRouteTableVirtualInterfaceGroupAssociationSet"
            case nextToken
        }
    }

    public struct DescribeLocalGatewayRouteTableVpcAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayRouteTableVpcAssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-vpc-association-id - The ID of the association.    state - The state of the association.    vpc-id - The ID of the VPC.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the associations.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayRouteTableVpcAssociationIdsEncoding, String>>
        public var localGatewayRouteTableVpcAssociationIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableVpcAssociationIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableVpcAssociationIds = localGatewayRouteTableVpcAssociationIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableVpcAssociationIds = "LocalGatewayRouteTableVpcAssociationId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTableVpcAssociationsResult: AWSDecodableShape {
        public struct _LocalGatewayRouteTableVpcAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associations.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayRouteTableVpcAssociationsEncoding, LocalGatewayRouteTableVpcAssociation>>
        public var localGatewayRouteTableVpcAssociations: [LocalGatewayRouteTableVpcAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayRouteTableVpcAssociations: [LocalGatewayRouteTableVpcAssociation]? = nil, nextToken: String? = nil) {
            self.localGatewayRouteTableVpcAssociations = localGatewayRouteTableVpcAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTableVpcAssociations = "localGatewayRouteTableVpcAssociationSet"
            case nextToken
        }
    }

    public struct DescribeLocalGatewayRouteTablesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayRouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-id - The ID of a local gateway route table.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    state - The state of the local gateway route table.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the local gateway route tables.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayRouteTableIdsEncoding, String>>
        public var localGatewayRouteTableIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayRouteTableIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableIds = localGatewayRouteTableIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableIds = "LocalGatewayRouteTableId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayRouteTablesResult: AWSDecodableShape {
        public struct _LocalGatewayRouteTablesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the local gateway route tables.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayRouteTablesEncoding, LocalGatewayRouteTable>>
        public var localGatewayRouteTables: [LocalGatewayRouteTable]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayRouteTables: [LocalGatewayRouteTable]? = nil, nextToken: String? = nil) {
            self.localGatewayRouteTables = localGatewayRouteTables
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayRouteTables = "localGatewayRouteTableSet"
            case nextToken
        }
    }

    public struct DescribeLocalGatewayVirtualInterfaceGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayVirtualInterfaceGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-virtual-interface-id - The ID of the virtual interface.    local-gateway-virtual-interface-group-id - The ID of the virtual interface group.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the virtual interface groups.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayVirtualInterfaceGroupIdsEncoding, String>>
        public var localGatewayVirtualInterfaceGroupIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayVirtualInterfaceGroupIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayVirtualInterfaceGroupIds = localGatewayVirtualInterfaceGroupIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayVirtualInterfaceGroupIds = "LocalGatewayVirtualInterfaceGroupId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfaceGroupsResult: AWSDecodableShape {
        public struct _LocalGatewayVirtualInterfaceGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The virtual interface groups.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayVirtualInterfaceGroupsEncoding, LocalGatewayVirtualInterfaceGroup>>
        public var localGatewayVirtualInterfaceGroups: [LocalGatewayVirtualInterfaceGroup]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayVirtualInterfaceGroups: [LocalGatewayVirtualInterfaceGroup]? = nil, nextToken: String? = nil) {
            self.localGatewayVirtualInterfaceGroups = localGatewayVirtualInterfaceGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayVirtualInterfaceGroups = "localGatewayVirtualInterfaceGroupSet"
            case nextToken
        }
    }

    public struct DescribeLocalGatewayVirtualInterfacesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayVirtualInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the virtual interfaces.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayVirtualInterfaceIdsEncoding, String>>
        public var localGatewayVirtualInterfaceIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayVirtualInterfaceIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayVirtualInterfaceIds = localGatewayVirtualInterfaceIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayVirtualInterfaceIds = "LocalGatewayVirtualInterfaceId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewayVirtualInterfacesResult: AWSDecodableShape {
        public struct _LocalGatewayVirtualInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the virtual interfaces.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayVirtualInterfacesEncoding, LocalGatewayVirtualInterface>>
        public var localGatewayVirtualInterfaces: [LocalGatewayVirtualInterface]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGatewayVirtualInterfaces: [LocalGatewayVirtualInterface]? = nil, nextToken: String? = nil) {
            self.localGatewayVirtualInterfaces = localGatewayVirtualInterfaces
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayVirtualInterfaces = "localGatewayVirtualInterfaceSet"
            case nextToken
        }
    }

    public struct DescribeLocalGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _LocalGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more filters.    local-gateway-id - The ID of a local gateway.    local-gateway-route-table-id - The ID of the local gateway route table.    local-gateway-route-table-virtual-interface-group-association-id - The ID of the association.    local-gateway-route-table-virtual-interface-group-id - The ID of the virtual interface group.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    state - The state of the association.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayIdsEncoding, String>>
        public var localGatewayIds: [String]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, localGatewayIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayIds = localGatewayIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayIds = "LocalGatewayId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeLocalGatewaysResult: AWSDecodableShape {
        public struct _LocalGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the local gateways.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewaysEncoding, LocalGateway>>
        public var localGateways: [LocalGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(localGateways: [LocalGateway]? = nil, nextToken: String? = nil) {
            self.localGateways = localGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case localGateways = "localGatewaySet"
            case nextToken
        }
    }

    public struct DescribeManagedPrefixListsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PrefixListIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    owner-id - The ID of the prefix list owner.    prefix-list-id - The ID of the prefix list.    prefix-list-name - The name of the prefix list.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more prefix list IDs.
        @OptionalCustomCoding<ArrayCoder<_PrefixListIdsEncoding, String>>
        public var prefixListIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListIds = prefixListIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListIds = "PrefixListId"
        }
    }

    public struct DescribeManagedPrefixListsResult: AWSDecodableShape {
        public struct _PrefixListsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the prefix lists.
        @OptionalCustomCoding<ArrayCoder<_PrefixListsEncoding, ManagedPrefixList>>
        public var prefixLists: [ManagedPrefixList]?

        public init(nextToken: String? = nil, prefixLists: [ManagedPrefixList]? = nil) {
            self.nextToken = nextToken
            self.prefixLists = prefixLists
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case prefixLists = "prefixListSet"
        }
    }

    public struct DescribeMovingAddressesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PublicIpsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    moving-status - The status of the Elastic IP address (MovingToVpc | RestoringToClassic).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1000; if MaxResults is given a value outside of this range, an error is returned. Default: If no value is provided, the default is 1000.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more Elastic IP addresses.
        @OptionalCustomCoding<ArrayCoder<_PublicIpsEncoding, String>>
        public var publicIps: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, publicIps: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.publicIps = publicIps
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "filter"
            case maxResults
            case nextToken
            case publicIps = "publicIp"
        }
    }

    public struct DescribeMovingAddressesResult: AWSDecodableShape {
        public struct _MovingAddressStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The status for each Elastic IP address.
        @OptionalCustomCoding<ArrayCoder<_MovingAddressStatusesEncoding, MovingAddressStatus>>
        public var movingAddressStatuses: [MovingAddressStatus]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(movingAddressStatuses: [MovingAddressStatus]? = nil, nextToken: String? = nil) {
            self.movingAddressStatuses = movingAddressStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case movingAddressStatuses = "movingAddressStatusSet"
            case nextToken
        }
    }

    public struct DescribeNatGatewaysRequest: AWSEncodableShape {
        public struct _FilterEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NatGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    nat-gateway-id - The ID of the NAT gateway.    state - The state of the NAT gateway (pending | failed | available | deleting | deleted).    subnet-id - The ID of the subnet in which the NAT gateway resides.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC in which the NAT gateway resides.
        @OptionalCustomCoding<ArrayCoder<_FilterEncoding, Filter>>
        public var filter: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// One or more NAT gateway IDs.
        @OptionalCustomCoding<ArrayCoder<_NatGatewayIdsEncoding, String>>
        public var natGatewayIds: [String]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filter: [Filter]? = nil, maxResults: Int? = nil, natGatewayIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filter = filter
            self.maxResults = maxResults
            self.natGatewayIds = natGatewayIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filter = "Filter"
            case maxResults = "MaxResults"
            case natGatewayIds = "NatGatewayId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNatGatewaysResult: AWSDecodableShape {
        public struct _NatGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the NAT gateways.
        @OptionalCustomCoding<ArrayCoder<_NatGatewaysEncoding, NatGateway>>
        public var natGateways: [NatGateway]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(natGateways: [NatGateway]? = nil, nextToken: String? = nil) {
            self.natGateways = natGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case natGateways = "natGatewaySet"
            case nextToken
        }
    }

    public struct DescribeNetworkAclsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkAclIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    association.association-id - The ID of an association ID for the ACL.    association.network-acl-id - The ID of the network ACL involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    default - Indicates whether the ACL is the default network ACL for the VPC.    entry.cidr - The IPv4 CIDR range specified in the entry.    entry.icmp.code - The ICMP code specified in the entry, if any.    entry.icmp.type - The ICMP type specified in the entry, if any.    entry.ipv6-cidr - The IPv6 CIDR range specified in the entry.    entry.port-range.from - The start of the port range specified in the entry.     entry.port-range.to - The end of the port range specified in the entry.     entry.protocol - The protocol specified in the entry (tcp | udp | icmp or a protocol number).    entry.rule-action - Allows or denies the matching traffic (allow | deny).    entry.rule-number - The number of an entry (in other words, rule) in the set of ACL entries.    network-acl-id - The ID of the network ACL.    owner-id - The ID of the AWS account that owns the network ACL.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network ACL.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// One or more network ACL IDs. Default: Describes all your network ACLs.
        @OptionalCustomCoding<ArrayCoder<_NetworkAclIdsEncoding, String>>
        public var networkAclIds: [String]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkAclIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkAclIds = networkAclIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkAclIds = "NetworkAclId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkAclsResult: AWSDecodableShape {
        public struct _NetworkAclsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more network ACLs.
        @OptionalCustomCoding<ArrayCoder<_NetworkAclsEncoding, NetworkAcl>>
        public var networkAcls: [NetworkAcl]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkAcls: [NetworkAcl]? = nil, nextToken: String? = nil) {
            self.networkAcls = networkAcls
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkAcls = "networkAclSet"
            case nextToken
        }
    }

    public struct DescribeNetworkInsightsAnalysesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkInsightsAnalysisIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time when the network insights analyses ended.
        public let analysisEndTime: Date?
        /// The time when the network insights analyses started.
        public let analysisStartTime: Date?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The following are possible values:   PathFound - A Boolean value that indicates whether a feasible path is found.   Status - The status of the analysis (running | succeeded | failed).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The ID of the network insights analyses. You must specify either analysis IDs or a path ID.
        @OptionalCustomCoding<ArrayCoder<_NetworkInsightsAnalysisIdsEncoding, String>>
        public var networkInsightsAnalysisIds: [String]?
        /// The ID of the path. You must specify either a path ID or analysis IDs.
        public let networkInsightsPathId: String?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(analysisEndTime: Date? = nil, analysisStartTime: Date? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkInsightsAnalysisIds: [String]? = nil, networkInsightsPathId: String? = nil, nextToken: String? = nil) {
            self.analysisEndTime = analysisEndTime
            self.analysisStartTime = analysisStartTime
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkInsightsAnalysisIds = networkInsightsAnalysisIds
            self.networkInsightsPathId = networkInsightsPathId
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case analysisEndTime = "AnalysisEndTime"
            case analysisStartTime = "AnalysisStartTime"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkInsightsAnalysisIds = "NetworkInsightsAnalysisId"
            case networkInsightsPathId = "NetworkInsightsPathId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInsightsAnalysesResult: AWSDecodableShape {
        public struct _NetworkInsightsAnalysesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the network insights analyses.
        @OptionalCustomCoding<ArrayCoder<_NetworkInsightsAnalysesEncoding, NetworkInsightsAnalysis>>
        public var networkInsightsAnalyses: [NetworkInsightsAnalysis]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkInsightsAnalyses: [NetworkInsightsAnalysis]? = nil, nextToken: String? = nil) {
            self.networkInsightsAnalyses = networkInsightsAnalyses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAnalyses = "networkInsightsAnalysisSet"
            case nextToken
        }
    }

    public struct DescribeNetworkInsightsPathsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkInsightsPathIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The following are possible values:   Destination - The ID of the resource.   DestinationPort - The destination port.   Name - The path name.   Protocol - The protocol.   Source - The ID of the resource.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The IDs of the paths.
        @OptionalCustomCoding<ArrayCoder<_NetworkInsightsPathIdsEncoding, String>>
        public var networkInsightsPathIds: [String]?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkInsightsPathIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkInsightsPathIds = networkInsightsPathIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkInsightsPathIds = "NetworkInsightsPathId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInsightsPathsResult: AWSDecodableShape {
        public struct _NetworkInsightsPathsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the paths.
        @OptionalCustomCoding<ArrayCoder<_NetworkInsightsPathsEncoding, NetworkInsightsPath>>
        public var networkInsightsPaths: [NetworkInsightsPath]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkInsightsPaths: [NetworkInsightsPath]? = nil, nextToken: String? = nil) {
            self.networkInsightsPaths = networkInsightsPaths
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsPaths = "networkInsightsPathSet"
            case nextToken
        }
    }

    public struct DescribeNetworkInterfaceAttributeRequest: AWSEncodableShape {
        /// The attribute of the network interface. This parameter is required.
        public let attribute: NetworkInterfaceAttribute?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(attribute: NetworkInterfaceAttribute? = nil, dryRun: Bool? = nil, networkInterfaceId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute
            case dryRun
            case networkInterfaceId
        }
    }

    public struct DescribeNetworkInterfaceAttributeResult: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The attachment (if any) of the network interface.
        public let attachment: NetworkInterfaceAttachment?
        /// The description of the network interface.
        public let description: AttributeValue?
        /// The security groups associated with the network interface.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: AttributeBooleanValue?

        public init(attachment: NetworkInterfaceAttachment? = nil, description: AttributeValue? = nil, groups: [GroupIdentifier]? = nil, networkInterfaceId: String? = nil, sourceDestCheck: AttributeBooleanValue? = nil) {
            self.attachment = attachment
            self.description = description
            self.groups = groups
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case attachment
            case description
            case groups = "groupSet"
            case networkInterfaceId
            case sourceDestCheck
        }
    }

    public struct DescribeNetworkInterfacePermissionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// One or more filters.    network-interface-permission.network-interface-permission-id - The ID of the permission.    network-interface-permission.network-interface-id - The ID of the network interface.    network-interface-permission.aws-account-id - The account ID.    network-interface-permission.aws-service - The Amazon Web Service.    network-interface-permission.permission - The type of permission (INSTANCE-ATTACH | EIP-ASSOCIATE).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. If this parameter is not specified, up to 50 results are returned by default.
        public let maxResults: Int?
        /// One or more network interface permission IDs.
        @OptionalCustomCoding<StandardArrayCoder>
        public var networkInterfacePermissionIds: [String]?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, networkInterfacePermissionIds: [String]? = nil, nextToken: String? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.networkInterfacePermissionIds = networkInterfacePermissionIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case maxResults = "MaxResults"
            case networkInterfacePermissionIds = "NetworkInterfacePermissionId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInterfacePermissionsResult: AWSDecodableShape {
        public struct _NetworkInterfacePermissionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network interface permissions.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacePermissionsEncoding, NetworkInterfacePermission>>
        public var networkInterfacePermissions: [NetworkInterfacePermission]?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(networkInterfacePermissions: [NetworkInterfacePermission]? = nil, nextToken: String? = nil) {
            self.networkInterfacePermissions = networkInterfacePermissions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfacePermissions
            case nextToken
        }
    }

    public struct DescribeNetworkInterfacesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    addresses.private-ip-address - The private IPv4 addresses associated with the network interface.    addresses.primary - Whether the private IPv4 address is the primary IP address associated with the network interface.     addresses.association.public-ip - The association ID returned when the network interface was associated with the Elastic IP address (IPv4).    addresses.association.owner-id - The owner ID of the addresses associated with the network interface.    association.association-id - The association ID returned when the network interface was associated with an IPv4 address.    association.allocation-id - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.    association.ip-owner-id - The owner of the Elastic IP address (IPv4) associated with the network interface.    association.public-ip - The address of the Elastic IP address (IPv4) bound to the network interface.    association.public-dns-name - The public DNS name for the network interface (IPv4).    attachment.attachment-id - The ID of the interface attachment.    attachment.attach-time - The time that the network interface was attached to an instance.    attachment.delete-on-termination - Indicates whether the attachment is deleted when an instance is terminated.    attachment.device-index - The device index to which the network interface is attached.    attachment.instance-id - The ID of the instance to which the network interface is attached.    attachment.instance-owner-id - The owner ID of the instance to which the network interface is attached.    attachment.status - The status of the attachment (attaching | attached | detaching | detached).    availability-zone - The Availability Zone of the network interface.    description - The description of the network interface.    group-id - The ID of a security group associated with the network interface.    group-name - The name of a security group associated with the network interface.    ipv6-addresses.ipv6-address - An IPv6 address associated with the network interface.    mac-address - The MAC address of the network interface.    network-interface-id - The ID of the network interface.    owner-id - The account ID of the network interface owner.    private-ip-address - The private IPv4 address or addresses of the network interface.    private-dns-name - The private DNS name of the network interface (IPv4).    requester-id - The alias or account ID of the principal or service that created the network interface.    requester-managed - Indicates whether the network interface is being managed by an Amazon Web Service (for example, Management Console, Auto Scaling, and so on).    source-dest-check - Indicates whether the network interface performs source/destination checking. A value of true means checking is enabled, and false means checking is disabled. The value must be false for the network interface to perform network address translation (NAT) in your VPC.     status - The status of the network interface. If the network interface is not attached to an instance, the status is available; if a network interface is attached to an instance the status is in-use.    subnet-id - The ID of the subnet for the network interface.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the network interface.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. You cannot specify this parameter and the network interface IDs parameter in the same request.
        public let maxResults: Int?
        /// One or more network interface IDs. Default: Describes all your network interfaces.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, networkInterfaceIds: [String]? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.networkInterfaceIds = networkInterfaceIds
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "filter"
            case maxResults = "MaxResults"
            case networkInterfaceIds = "NetworkInterfaceId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeNetworkInterfacesResult: AWSDecodableShape {
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more network interfaces.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacesEncoding, NetworkInterface>>
        public var networkInterfaces: [NetworkInterface]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(networkInterfaces: [NetworkInterface]? = nil, nextToken: String? = nil) {
            self.networkInterfaces = networkInterfaces
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaces = "networkInterfaceSet"
            case nextToken
        }
    }

    public struct DescribePlacementGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _GroupIdsEncoding: ArrayCoderProperties { public static let member = "GroupId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    group-name - The name of the placement group.    state - The state of the placement group (pending | available | deleting | deleted).    strategy - The strategy of the placement group (cluster | spread | partition).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the placement groups.
        @OptionalCustomCoding<ArrayCoder<_GroupIdsEncoding, String>>
        public var groupIds: [String]?
        /// The names of the placement groups. Default: Describes all your placement groups, or only those otherwise specified.
        @OptionalCustomCoding<StandardArrayCoder>
        public var groupNames: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, groupIds: [String]? = nil, groupNames: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.groupIds = groupIds
            self.groupNames = groupNames
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case groupIds = "GroupId"
            case groupNames = "groupName"
        }
    }

    public struct DescribePlacementGroupsResult: AWSDecodableShape {
        public struct _PlacementGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the placement groups.
        @OptionalCustomCoding<ArrayCoder<_PlacementGroupsEncoding, PlacementGroup>>
        public var placementGroups: [PlacementGroup]?

        public init(placementGroups: [PlacementGroup]? = nil) {
            self.placementGroups = placementGroups
        }

        private enum CodingKeys: String, CodingKey {
            case placementGroups = "placementGroupSet"
        }
    }

    public struct DescribePrefixListsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PrefixListIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    prefix-list-id: The ID of a prefix list.    prefix-list-name: The name of a prefix list.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more prefix list IDs.
        @OptionalCustomCoding<ArrayCoder<_PrefixListIdsEncoding, String>>
        public var prefixListIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListIds = prefixListIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListIds = "PrefixListId"
        }
    }

    public struct DescribePrefixListsResult: AWSDecodableShape {
        public struct _PrefixListsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// All available prefix lists.
        @OptionalCustomCoding<ArrayCoder<_PrefixListsEncoding, PrefixList>>
        public var prefixLists: [PrefixList]?

        public init(nextToken: String? = nil, prefixLists: [PrefixList]? = nil) {
            self.nextToken = nextToken
            self.prefixLists = prefixLists
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case prefixLists = "prefixListSet"
        }
    }

    public struct DescribePrincipalIdFormatRequest: AWSEncodableShape {
        public struct _ResourcesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | instance | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | reservation | route-table | route-table-association | security-group | snapshot | subnet | subnet-cidr-block-association | volume | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway
        @OptionalCustomCoding<ArrayCoder<_ResourcesEncoding, String>>
        public var resources: [String]?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, resources: [String]? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.resources = resources
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case resources = "Resource"
        }
    }

    public struct DescribePrincipalIdFormatResult: AWSDecodableShape {
        public struct _PrincipalsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the ID format settings for the ARN.
        @OptionalCustomCoding<ArrayCoder<_PrincipalsEncoding, PrincipalIdFormat>>
        public var principals: [PrincipalIdFormat]?

        public init(nextToken: String? = nil, principals: [PrincipalIdFormat]? = nil) {
            self.nextToken = nextToken
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case principals = "principalSet"
        }
    }

    public struct DescribePublicIpv4PoolsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _PoolIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more filters.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the address pools.
        @OptionalCustomCoding<ArrayCoder<_PoolIdsEncoding, String>>
        public var poolIds: [String]?

        public init(filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolIds: [String]? = nil) {
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolIds = poolIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 10)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolIds = "PoolId"
        }
    }

    public struct DescribePublicIpv4PoolsResult: AWSDecodableShape {
        public struct _PublicIpv4PoolsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the address pools.
        @OptionalCustomCoding<ArrayCoder<_PublicIpv4PoolsEncoding, PublicIpv4Pool>>
        public var publicIpv4Pools: [PublicIpv4Pool]?

        public init(nextToken: String? = nil, publicIpv4Pools: [PublicIpv4Pool]? = nil) {
            self.nextToken = nextToken
            self.publicIpv4Pools = publicIpv4Pools
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case publicIpv4Pools = "publicIpv4PoolSet"
        }
    }

    public struct DescribeRegionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _RegionNamesEncoding: ArrayCoderProperties { public static let member = "RegionName" }

        /// Indicates whether to display all Regions, including Regions that are disabled for your account.
        public let allRegions: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    endpoint - The endpoint of the Region (for example, ec2.us-east-1.amazonaws.com).    opt-in-status - The opt-in status of the Region (opt-in-not-required | opted-in | not-opted-in).    region-name - The name of the Region (for example, us-east-1).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.
        @OptionalCustomCoding<ArrayCoder<_RegionNamesEncoding, String>>
        public var regionNames: [String]?

        public init(allRegions: Bool? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, regionNames: [String]? = nil) {
            self.allRegions = allRegions
            self.dryRun = dryRun
            self.filters = filters
            self.regionNames = regionNames
        }

        private enum CodingKeys: String, CodingKey {
            case allRegions = "AllRegions"
            case dryRun
            case filters = "Filter"
            case regionNames = "RegionName"
        }
    }

    public struct DescribeRegionsResult: AWSDecodableShape {
        public struct _RegionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Regions.
        @OptionalCustomCoding<ArrayCoder<_RegionsEncoding, Region>>
        public var regions: [Region]?

        public init(regions: [Region]? = nil) {
            self.regions = regions
        }

        private enum CodingKeys: String, CodingKey {
            case regions = "regionInfo"
        }
    }

    public struct DescribeReplaceRootVolumeTasksRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ReplaceRootVolumeTaskIdsEncoding: ArrayCoderProperties { public static let member = "ReplaceRootVolumeTaskId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Filter to use:    instance-id - The ID of the instance for which the root volume replacement task was created.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the root volume replacement task to view.
        @OptionalCustomCoding<ArrayCoder<_ReplaceRootVolumeTaskIdsEncoding, String>>
        public var replaceRootVolumeTaskIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, replaceRootVolumeTaskIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.replaceRootVolumeTaskIds = replaceRootVolumeTaskIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 50)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case replaceRootVolumeTaskIds = "ReplaceRootVolumeTaskId"
        }
    }

    public struct DescribeReplaceRootVolumeTasksResult: AWSDecodableShape {
        public struct _ReplaceRootVolumeTasksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the root volume replacement task.
        @OptionalCustomCoding<ArrayCoder<_ReplaceRootVolumeTasksEncoding, ReplaceRootVolumeTask>>
        public var replaceRootVolumeTasks: [ReplaceRootVolumeTask]?

        public init(nextToken: String? = nil, replaceRootVolumeTasks: [ReplaceRootVolumeTask]? = nil) {
            self.nextToken = nextToken
            self.replaceRootVolumeTasks = replaceRootVolumeTasks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case replaceRootVolumeTasks = "replaceRootVolumeTaskSet"
        }
    }

    public struct DescribeReservedInstancesListingsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// One or more filters.    reserved-instances-id - The ID of the Reserved Instances.    reserved-instances-listing-id - The ID of the Reserved Instances listing.    status - The status of the Reserved Instance listing (pending | active | cancelled | closed).    status-message - The reason for the status.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more Reserved Instance IDs.
        public let reservedInstancesId: String?
        /// One or more Reserved Instance listing IDs.
        public let reservedInstancesListingId: String?

        public init(filters: [Filter]? = nil, reservedInstancesId: String? = nil, reservedInstancesListingId: String? = nil) {
            self.filters = filters
            self.reservedInstancesId = reservedInstancesId
            self.reservedInstancesListingId = reservedInstancesListingId
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case reservedInstancesId
            case reservedInstancesListingId
        }
    }

    public struct DescribeReservedInstancesListingsResult: AWSDecodableShape {
        public struct _ReservedInstancesListingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Reserved Instance listing.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstancesListingsEncoding, ReservedInstancesListing>>
        public var reservedInstancesListings: [ReservedInstancesListing]?

        public init(reservedInstancesListings: [ReservedInstancesListing]? = nil) {
            self.reservedInstancesListings = reservedInstancesListings
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesListings = "reservedInstancesListingsSet"
        }
    }

    public struct DescribeReservedInstancesModificationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ReservedInstancesModificationIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstancesModificationId" }

        /// One or more filters.    client-token - The idempotency token for the modification request.    create-date - The time when the modification request was created.    effective-date - The time when the modification becomes effective.    modification-result.reserved-instances-id - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is fulfilled.    modification-result.target-configuration.availability-zone - The Availability Zone for the new Reserved Instances.    modification-result.target-configuration.instance-count  - The number of new Reserved Instances.    modification-result.target-configuration.instance-type - The instance type of the new Reserved Instances.    modification-result.target-configuration.platform - The network platform of the new Reserved Instances (EC2-Classic | EC2-VPC).    reserved-instances-id - The ID of the Reserved Instances modified.    reserved-instances-modification-id - The ID of the modification request.    status - The status of the Reserved Instances modification request (processing | fulfilled | failed).    status-message - The reason for the status.    update-date - The time when the modification request was last updated.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// IDs for the submitted modification request.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstancesModificationIdsEncoding, String>>
        public var reservedInstancesModificationIds: [String]?

        public init(filters: [Filter]? = nil, nextToken: String? = nil, reservedInstancesModificationIds: [String]? = nil) {
            self.filters = filters
            self.nextToken = nextToken
            self.reservedInstancesModificationIds = reservedInstancesModificationIds
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filter"
            case nextToken
            case reservedInstancesModificationIds = "ReservedInstancesModificationId"
        }
    }

    public struct DescribeReservedInstancesModificationsResult: AWSDecodableShape {
        public struct _ReservedInstancesModificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The Reserved Instance modification information.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstancesModificationsEncoding, ReservedInstancesModification>>
        public var reservedInstancesModifications: [ReservedInstancesModification]?

        public init(nextToken: String? = nil, reservedInstancesModifications: [ReservedInstancesModification]? = nil) {
            self.nextToken = nextToken
            self.reservedInstancesModifications = reservedInstancesModifications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case reservedInstancesModifications = "reservedInstancesModificationsSet"
        }
    }

    public struct DescribeReservedInstancesOfferingsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (for example, one year or three years), in seconds (31536000 | 94608000).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    marketplace - Set to true to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both Amazon Web Services and the Reserved Instance Marketplace are listed.    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Red Hat Enterprise Linux with HA (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web |  Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC))     reserved-instances-offering-id - The Reserved Instances offering ID.    scope - The scope of the Reserved Instance (Availability Zone or Region).    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// Include Reserved Instance Marketplace offerings in the response.
        public let includeMarketplace: Bool?
        /// The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of dedicated is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).  Important: The host value cannot be used with this parameter. Use the default or dedicated values only. Default: default
        public let instanceTenancy: Tenancy?
        /// The instance type that the reservation will cover (for example, m1.small). For more information, see Instance types in the Amazon EC2 User Guide.
        public let instanceType: InstanceType?
        /// The maximum duration (in seconds) to filter when searching for offerings. Default: 94608000 (3 years)
        public let maxDuration: Int64?
        /// The maximum number of instances to filter when searching for offerings. Default: 20
        public let maxInstanceCount: Int?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. The maximum is 100. Default: 100
        public let maxResults: Int?
        /// The minimum duration (in seconds) to filter when searching for offerings. Default: 2592000 (1 month)
        public let minDuration: Int64?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The offering class of the Reserved Instance. Can be standard or convertible.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The Reserved Instance product platform description. Instances that include (Amazon VPC) in the description are for use with Amazon VPC.
        public let productDescription: RIProductDescription?
        /// One or more Reserved Instances offering IDs.
        @OptionalCustomCoding<StandardArrayCoder>
        public var reservedInstancesOfferingIds: [String]?

        public init(availabilityZone: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, includeMarketplace: Bool? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, maxDuration: Int64? = nil, maxInstanceCount: Int? = nil, maxResults: Int? = nil, minDuration: Int64? = nil, nextToken: String? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, productDescription: RIProductDescription? = nil, reservedInstancesOfferingIds: [String]? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.filters = filters
            self.includeMarketplace = includeMarketplace
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.maxDuration = maxDuration
            self.maxInstanceCount = maxInstanceCount
            self.maxResults = maxResults
            self.minDuration = minDuration
            self.nextToken = nextToken
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.reservedInstancesOfferingIds = reservedInstancesOfferingIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dryRun
            case filters = "Filter"
            case includeMarketplace = "IncludeMarketplace"
            case instanceTenancy
            case instanceType = "InstanceType"
            case maxDuration = "MaxDuration"
            case maxInstanceCount = "MaxInstanceCount"
            case maxResults
            case minDuration = "MinDuration"
            case nextToken
            case offeringClass = "OfferingClass"
            case offeringType
            case productDescription = "ProductDescription"
            case reservedInstancesOfferingIds = "ReservedInstancesOfferingId"
        }
    }

    public struct DescribeReservedInstancesOfferingsResult: AWSDecodableShape {
        public struct _ReservedInstancesOfferingsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of Reserved Instances offerings.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstancesOfferingsEncoding, ReservedInstancesOffering>>
        public var reservedInstancesOfferings: [ReservedInstancesOffering]?

        public init(nextToken: String? = nil, reservedInstancesOfferings: [ReservedInstancesOffering]? = nil) {
            self.nextToken = nextToken
            self.reservedInstancesOfferings = reservedInstancesOfferings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case reservedInstancesOfferings = "reservedInstancesOfferingsSet"
        }
    }

    public struct DescribeReservedInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ReservedInstancesIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstancesId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone - The Availability Zone where the Reserved Instance can be used.    duration - The duration of the Reserved Instance (one year or three years), in seconds (31536000 | 94608000).    end - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).    fixed-price - The purchase price of the Reserved Instance (for example, 9800.0).    instance-type - The instance type that is covered by the reservation.    scope - The scope of the Reserved Instance (Region or Availability Zone).    product-description - The Reserved Instance product platform description. Instances that include (Amazon VPC) in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (Linux/UNIX | Linux/UNIX (Amazon VPC) | SUSE Linux | SUSE Linux (Amazon VPC) | Red Hat Enterprise Linux | Red Hat Enterprise Linux (Amazon VPC) | Red Hat Enterprise Linux with HA (Amazon VPC) | Windows | Windows (Amazon VPC) | Windows with SQL Server Standard | Windows with SQL Server Standard (Amazon VPC) | Windows with SQL Server Web | Windows with SQL Server Web (Amazon VPC) | Windows with SQL Server Enterprise | Windows with SQL Server Enterprise (Amazon VPC)).    reserved-instances-id - The ID of the Reserved Instance.    start - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).    state - The state of the Reserved Instance (payment-pending | active | payment-failed | retired).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    usage-price - The usage price of the Reserved Instance, per hour (for example, 0.84).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// Describes whether the Reserved Instance is Standard or Convertible.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the Medium Utilization Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// One or more Reserved Instance IDs. Default: Describes all your Reserved Instances, or only those otherwise specified.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstancesIdsEncoding, String>>
        public var reservedInstancesIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, reservedInstancesIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.reservedInstancesIds = reservedInstancesIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case offeringClass = "OfferingClass"
            case offeringType
            case reservedInstancesIds = "ReservedInstancesId"
        }
    }

    public struct DescribeReservedInstancesResult: AWSDecodableShape {
        public struct _ReservedInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A list of Reserved Instances.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstancesEncoding, ReservedInstances>>
        public var reservedInstances: [ReservedInstances]?

        public init(reservedInstances: [ReservedInstances]? = nil) {
            self.reservedInstances = reservedInstances
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstances = "reservedInstancesSet"
        }
    }

    public struct DescribeRouteTablesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _RouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    association.route-table-association-id - The ID of an association ID for the route table.    association.route-table-id - The ID of the route table involved in the association.    association.subnet-id - The ID of the subnet involved in the association.    association.main - Indicates whether the route table is the main route table for the VPC (true | false). Route tables that do not have an association ID are not returned in the response.    owner-id - The ID of the AWS account that owns the route table.    route-table-id - The ID of the route table.    route.destination-cidr-block - The IPv4 CIDR range specified in a route in the table.    route.destination-ipv6-cidr-block - The IPv6 CIDR range specified in a route in the route table.    route.destination-prefix-list-id - The ID (prefix) of the AWS service specified in a route in the table.    route.egress-only-internet-gateway-id - The ID of an egress-only Internet gateway specified in a route in the route table.    route.gateway-id - The ID of a gateway specified in a route in the table.    route.instance-id - The ID of an instance specified in a route in the table.    route.nat-gateway-id - The ID of a NAT gateway.    route.transit-gateway-id - The ID of a transit gateway.    route.origin - Describes how the route was created. CreateRouteTable indicates that the route was automatically created when the route table was created; CreateRoute indicates that the route was manually added to the route table; EnableVgwRoutePropagation indicates that the route was propagated by route propagation.    route.state - The state of a route in the route table (active | blackhole). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).    route.vpc-peering-connection-id - The ID of a VPC peering connection specified in a route in the table.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the route table.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more route table IDs. Default: Describes all your route tables.
        @OptionalCustomCoding<ArrayCoder<_RouteTableIdsEncoding, String>>
        public var routeTableIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, routeTableIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.routeTableIds = routeTableIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case routeTableIds = "RouteTableId"
        }
    }

    public struct DescribeRouteTablesResult: AWSDecodableShape {
        public struct _RouteTablesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more route tables.
        @OptionalCustomCoding<ArrayCoder<_RouteTablesEncoding, RouteTable>>
        public var routeTables: [RouteTable]?

        public init(nextToken: String? = nil, routeTables: [RouteTable]? = nil) {
            self.nextToken = nextToken
            self.routeTables = routeTables
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case routeTables = "routeTableSet"
        }
    }

    public struct DescribeScheduledInstanceAvailabilityRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The time period for the first schedule to start.
        public let firstSlotStartTimeRange: SlotDateTimeRangeRequest
        /// The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The maximum available duration, in hours. This value must be greater than MinSlotDurationInHours and less than 1,720.
        public let maxSlotDurationInHours: Int?
        /// The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
        public let minSlotDurationInHours: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrenceRequest

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, firstSlotStartTimeRange: SlotDateTimeRangeRequest, maxResults: Int? = nil, maxSlotDurationInHours: Int? = nil, minSlotDurationInHours: Int? = nil, nextToken: String? = nil, recurrence: ScheduledInstanceRecurrenceRequest) {
            self.dryRun = dryRun
            self.filters = filters
            self.firstSlotStartTimeRange = firstSlotStartTimeRange
            self.maxResults = maxResults
            self.maxSlotDurationInHours = maxSlotDurationInHours
            self.minSlotDurationInHours = minSlotDurationInHours
            self.nextToken = nextToken
            self.recurrence = recurrence
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 300)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case firstSlotStartTimeRange = "FirstSlotStartTimeRange"
            case maxResults = "MaxResults"
            case maxSlotDurationInHours = "MaxSlotDurationInHours"
            case minSlotDurationInHours = "MinSlotDurationInHours"
            case nextToken = "NextToken"
            case recurrence = "Recurrence"
        }
    }

    public struct DescribeScheduledInstanceAvailabilityResult: AWSDecodableShape {
        public struct _ScheduledInstanceAvailabilitySetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the available Scheduled Instances.
        @OptionalCustomCoding<ArrayCoder<_ScheduledInstanceAvailabilitySetEncoding, ScheduledInstanceAvailability>>
        public var scheduledInstanceAvailabilitySet: [ScheduledInstanceAvailability]?

        public init(nextToken: String? = nil, scheduledInstanceAvailabilitySet: [ScheduledInstanceAvailability]? = nil) {
            self.nextToken = nextToken
            self.scheduledInstanceAvailabilitySet = scheduledInstanceAvailabilitySet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case scheduledInstanceAvailabilitySet
        }
    }

    public struct DescribeScheduledInstancesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ScheduledInstanceIdsEncoding: ArrayCoderProperties { public static let member = "ScheduledInstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    availability-zone - The Availability Zone (for example, us-west-2a).    instance-type - The instance type (for example, c4.large).    network-platform - The network platform (EC2-Classic or EC2-VPC).    platform - The platform (Linux/UNIX or Windows).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The Scheduled Instance IDs.
        @OptionalCustomCoding<ArrayCoder<_ScheduledInstanceIdsEncoding, String>>
        public var scheduledInstanceIds: [String]?
        /// The time period for the first schedule to start.
        public let slotStartTimeRange: SlotStartTimeRangeRequest?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, scheduledInstanceIds: [String]? = nil, slotStartTimeRange: SlotStartTimeRangeRequest? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.scheduledInstanceIds = scheduledInstanceIds
            self.slotStartTimeRange = slotStartTimeRange
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case scheduledInstanceIds = "ScheduledInstanceId"
            case slotStartTimeRange = "SlotStartTimeRange"
        }
    }

    public struct DescribeScheduledInstancesResult: AWSDecodableShape {
        public struct _ScheduledInstanceSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Scheduled Instances.
        @OptionalCustomCoding<ArrayCoder<_ScheduledInstanceSetEncoding, ScheduledInstance>>
        public var scheduledInstanceSet: [ScheduledInstance]?

        public init(nextToken: String? = nil, scheduledInstanceSet: [ScheduledInstance]? = nil) {
            self.nextToken = nextToken
            self.scheduledInstanceSet = scheduledInstanceSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case scheduledInstanceSet
        }
    }

    public struct DescribeSecurityGroupReferencesRequest: AWSEncodableShape {
        public struct _GroupIdEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the security groups in your account.
        @CustomCoding<ArrayCoder<_GroupIdEncoding, String>>
        public var groupId: [String]

        public init(dryRun: Bool? = nil, groupId: [String]) {
            self.dryRun = dryRun
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
        }
    }

    public struct DescribeSecurityGroupReferencesResult: AWSDecodableShape {
        public struct _SecurityGroupReferenceSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the VPCs with the referencing security groups.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupReferenceSetEncoding, SecurityGroupReference>>
        public var securityGroupReferenceSet: [SecurityGroupReference]?

        public init(securityGroupReferenceSet: [SecurityGroupReference]? = nil) {
            self.securityGroupReferenceSet = securityGroupReferenceSet
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupReferenceSet
        }
    }

    public struct DescribeSecurityGroupRulesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _SecurityGroupRuleIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    group-id - The ID of the security group.    security-group-rule-id - The ID of the security group rule.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the security group rules.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupRuleIdsEncoding, String>>
        public var securityGroupRuleIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, securityGroupRuleIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.securityGroupRuleIds = securityGroupRuleIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case securityGroupRuleIds = "SecurityGroupRuleId"
        }
    }

    public struct DescribeSecurityGroupRulesResult: AWSDecodableShape {
        public struct _SecurityGroupRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about security group rules.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupRulesEncoding, SecurityGroupRule>>
        public var securityGroupRules: [SecurityGroupRule]?

        public init(nextToken: String? = nil, securityGroupRules: [SecurityGroupRule]? = nil) {
            self.nextToken = nextToken
            self.securityGroupRules = securityGroupRules
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case securityGroupRules = "securityGroupRuleSet"
        }
    }

    public struct DescribeSecurityGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _GroupIdsEncoding: ArrayCoderProperties { public static let member = "groupId" }
        public struct _GroupNamesEncoding: ArrayCoderProperties { public static let member = "GroupName" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.    description - The description of the security group.    egress.ip-permission.cidr - An IPv4 CIDR block for an outbound security group rule.    egress.ip-permission.from-port - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    egress.ip-permission.group-id - The ID of a security group that has been referenced in an outbound security group rule.    egress.ip-permission.group-name - The name of a security group that is referenced in an outbound security group rule.    egress.ip-permission.ipv6-cidr - An IPv6 CIDR block for an outbound security group rule.    egress.ip-permission.prefix-list-id - The ID of a prefix list to which a security group rule allows outbound access.    egress.ip-permission.protocol - The IP protocol for an outbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    egress.ip-permission.to-port - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    egress.ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an outbound security group rule.    group-id - The ID of the security group.     group-name - The name of the security group.    ip-permission.cidr - An IPv4 CIDR block for an inbound security group rule.    ip-permission.from-port - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.    ip-permission.group-id - The ID of a security group that has been referenced in an inbound security group rule.    ip-permission.group-name - The name of a security group that is referenced in an inbound security group rule.    ip-permission.ipv6-cidr - An IPv6 CIDR block for an inbound security group rule.    ip-permission.prefix-list-id - The ID of a prefix list from which a security group rule allows inbound access.    ip-permission.protocol - The IP protocol for an inbound security group rule (tcp | udp | icmp, a protocol number, or -1 for all protocols).    ip-permission.to-port - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.    ip-permission.user-id - The ID of an Amazon Web Services account that has been referenced in an inbound security group rule.    owner-id - The Amazon Web Services account ID of the owner of the security group.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC specified when the security group was created.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The IDs of the security groups. Required for security groups in a nondefault VPC. Default: Describes all of your security groups.
        @OptionalCustomCoding<ArrayCoder<_GroupIdsEncoding, String>>
        public var groupIds: [String]?
        /// [EC2-Classic and default VPC only] The names of the security groups. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the group-name filter to describe security groups by name. Default: Describes all of your security groups.
        @OptionalCustomCoding<ArrayCoder<_GroupNamesEncoding, String>>
        public var groupNames: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, groupIds: [String]? = nil, groupNames: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.groupIds = groupIds
            self.groupNames = groupNames
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case groupIds = "GroupId"
            case groupNames = "GroupName"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeSecurityGroupsResult: AWSDecodableShape {
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the security groups.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, SecurityGroup>>
        public var securityGroups: [SecurityGroup]?

        public init(nextToken: String? = nil, securityGroups: [SecurityGroup]? = nil) {
            self.nextToken = nextToken
            self.securityGroups = securityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case securityGroups = "securityGroupInfo"
        }
    }

    public struct DescribeSnapshotAttributeRequest: AWSEncodableShape {
        /// The snapshot attribute you would like to view.
        public let attribute: SnapshotAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the EBS snapshot.
        public let snapshotId: String

        public init(attribute: SnapshotAttributeName, dryRun: Bool? = nil, snapshotId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun
            case snapshotId = "SnapshotId"
        }
    }

    public struct DescribeSnapshotAttributeResult: AWSDecodableShape {
        public struct _CreateVolumePermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The users and groups that have the permissions for creating volumes from the snapshot.
        @OptionalCustomCoding<ArrayCoder<_CreateVolumePermissionsEncoding, CreateVolumePermission>>
        public var createVolumePermissions: [CreateVolumePermission]?
        /// The product codes.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// The ID of the EBS snapshot.
        public let snapshotId: String?

        public init(createVolumePermissions: [CreateVolumePermission]? = nil, productCodes: [ProductCode]? = nil, snapshotId: String? = nil) {
            self.createVolumePermissions = createVolumePermissions
            self.productCodes = productCodes
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case createVolumePermissions = "createVolumePermission"
            case productCodes
            case snapshotId
        }
    }

    public struct DescribeSnapshotsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _OwnerIdsEncoding: ArrayCoderProperties { public static let member = "Owner" }
        public struct _SnapshotIdsEncoding: ArrayCoderProperties { public static let member = "SnapshotId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    description - A description of the snapshot.    encrypted - Indicates whether the snapshot is encrypted (true | false)    owner-alias - The owner alias, from an Amazon-maintained list (amazon). This is not the user-configured AWS account alias set using the IAM console. We recommend that you use the related parameter instead of this filter.    owner-id - The AWS account ID of the owner. We recommend that you use the related parameter instead of this filter.    progress - The progress of the snapshot, as a percentage (for example, 80%).    snapshot-id - The snapshot ID.    start-time - The time stamp when the snapshot was initiated.    status - The status of the snapshot (pending | completed | error).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The ID of the volume the snapshot is for.    volume-size - The size of the volume, in GiB.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of snapshot results returned by DescribeSnapshots in paginated output. When this parameter is used, DescribeSnapshots only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeSnapshots request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned. If this parameter is not used, then DescribeSnapshots returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.
        public let maxResults: Int?
        /// The NextToken value returned from a previous paginated DescribeSnapshots request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Scopes the results to snapshots with the specified owners. You can specify a combination of AWS account IDs, self, and amazon.
        @OptionalCustomCoding<ArrayCoder<_OwnerIdsEncoding, String>>
        public var ownerIds: [String]?
        /// The IDs of the AWS accounts that can create volumes from the snapshot.
        @OptionalCustomCoding<StandardArrayCoder>
        public var restorableByUserIds: [String]?
        /// The snapshot IDs. Default: Describes the snapshots for which you have create volume permissions.
        @OptionalCustomCoding<ArrayCoder<_SnapshotIdsEncoding, String>>
        public var snapshotIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, ownerIds: [String]? = nil, restorableByUserIds: [String]? = nil, snapshotIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.ownerIds = ownerIds
            self.restorableByUserIds = restorableByUserIds
            self.snapshotIds = snapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case ownerIds = "Owner"
            case restorableByUserIds = "RestorableBy"
            case snapshotIds = "SnapshotId"
        }
    }

    public struct DescribeSnapshotsResult: AWSDecodableShape {
        public struct _SnapshotsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The NextToken value to include in a future DescribeSnapshots request. When the results of a DescribeSnapshots request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the snapshots.
        @OptionalCustomCoding<ArrayCoder<_SnapshotsEncoding, Snapshot>>
        public var snapshots: [Snapshot]?

        public init(nextToken: String? = nil, snapshots: [Snapshot]? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case snapshots = "snapshotSet"
        }
    }

    public struct DescribeSpotDatafeedSubscriptionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
        }
    }

    public struct DescribeSpotDatafeedSubscriptionResult: AWSDecodableShape {
        /// The Spot Instance data feed subscription.
        public let spotDatafeedSubscription: SpotDatafeedSubscription?

        public init(spotDatafeedSubscription: SpotDatafeedSubscription? = nil) {
            self.spotDatafeedSubscription = spotDatafeedSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case spotDatafeedSubscription
        }
    }

    public struct DescribeSpotFleetInstancesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotFleetRequestId: String) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case maxResults
            case nextToken
            case spotFleetRequestId
        }
    }

    public struct DescribeSpotFleetInstancesResponse: AWSDecodableShape {
        public struct _ActiveInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The running instances. This list is refreshed periodically and might be out of date.
        @OptionalCustomCoding<ArrayCoder<_ActiveInstancesEncoding, ActiveInstance>>
        public var activeInstances: [ActiveInstance]?
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(activeInstances: [ActiveInstance]? = nil, nextToken: String? = nil, spotFleetRequestId: String? = nil) {
            self.activeInstances = activeInstances
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case activeInstances = "activeInstanceSet"
            case nextToken
            case spotFleetRequestId
        }
    }

    public struct DescribeSpotFleetRequestHistoryRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The type of events to describe. By default, all events are described.
        public let eventType: EventType?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date

        public init(dryRun: Bool? = nil, eventType: EventType? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotFleetRequestId: String, startTime: Date) {
            self.dryRun = dryRun
            self.eventType = eventType
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.startTime = startTime
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case eventType
            case maxResults
            case nextToken
            case spotFleetRequestId
            case startTime
        }
    }

    public struct DescribeSpotFleetRequestHistoryResponse: AWSDecodableShape {
        public struct _HistoryRecordsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the events in the history of the Spot Fleet request.
        @OptionalCustomCoding<ArrayCoder<_HistoryRecordsEncoding, HistoryRecord>>
        public var historyRecords: [HistoryRecord]?
        /// The last date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). All records up to this time were retrieved. If nextToken indicates that there are more results, this value is not present.
        public let lastEvaluatedTime: Date?
        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?
        /// The starting date and time for the events, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date?

        public init(historyRecords: [HistoryRecord]? = nil, lastEvaluatedTime: Date? = nil, nextToken: String? = nil, spotFleetRequestId: String? = nil, startTime: Date? = nil) {
            self.historyRecords = historyRecords
            self.lastEvaluatedTime = lastEvaluatedTime
            self.nextToken = nextToken
            self.spotFleetRequestId = spotFleetRequestId
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case historyRecords = "historyRecordSet"
            case lastEvaluatedTime
            case nextToken
            case spotFleetRequestId
            case startTime
        }
    }

    public struct DescribeSpotFleetRequestsRequest: AWSEncodableShape {
        public struct _SpotFleetRequestIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The IDs of the Spot Fleet requests.
        @OptionalCustomCoding<ArrayCoder<_SpotFleetRequestIdsEncoding, String>>
        public var spotFleetRequestIds: [String]?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotFleetRequestIds: [String]? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotFleetRequestIds = spotFleetRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case maxResults
            case nextToken
            case spotFleetRequestIds = "spotFleetRequestId"
        }
    }

    public struct DescribeSpotFleetRequestsResponse: AWSDecodableShape {
        public struct _SpotFleetRequestConfigsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token required to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the configuration of your Spot Fleet.
        @OptionalCustomCoding<ArrayCoder<_SpotFleetRequestConfigsEncoding, SpotFleetRequestConfig>>
        public var spotFleetRequestConfigs: [SpotFleetRequestConfig]?

        public init(nextToken: String? = nil, spotFleetRequestConfigs: [SpotFleetRequestConfig]? = nil) {
            self.nextToken = nextToken
            self.spotFleetRequestConfigs = spotFleetRequestConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case spotFleetRequestConfigs = "spotFleetRequestConfigSet"
        }
    }

    public struct DescribeSpotInstanceRequestsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _SpotInstanceRequestIdsEncoding: ArrayCoderProperties { public static let member = "SpotInstanceRequestId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone-group - The Availability Zone group.    create-time - The time stamp when the Spot Instance request was created.    fault-code - The fault code related to the request.    fault-message - The fault message related to the request.    instance-id - The ID of the instance that fulfilled the request.    launch-group - The Spot Instance launch group.    launch.block-device-mapping.delete-on-termination - Indicates whether the EBS volume is deleted on instance termination.    launch.block-device-mapping.device-name - The device name for the volume in the block device mapping (for example, /dev/sdh or xvdh).    launch.block-device-mapping.snapshot-id - The ID of the snapshot for the EBS volume.    launch.block-device-mapping.volume-size - The size of the EBS volume, in GiB.    launch.block-device-mapping.volume-type - The type of EBS volume: gp2 for General Purpose SSD, io1 or io2 for Provisioned IOPS SSD, st1 for Throughput Optimized HDD, sc1for Cold HDD, or standard for Magnetic.    launch.group-id - The ID of the security group for the instance.    launch.group-name - The name of the security group for the instance.    launch.image-id - The ID of the AMI.    launch.instance-type - The type of instance (for example, m3.medium).    launch.kernel-id - The kernel ID.    launch.key-name - The name of the key pair the instance launched with.    launch.monitoring-enabled - Whether detailed monitoring is enabled for the Spot Instance.    launch.ramdisk-id - The RAM disk ID.    launched-availability-zone - The Availability Zone in which the request is launched.    network-interface.addresses.primary - Indicates whether the IP address is the primary private IP address.    network-interface.delete-on-termination - Indicates whether the network interface is deleted when the instance is terminated.    network-interface.description - A description of the network interface.    network-interface.device-index - The index of the device for the network interface attachment on the instance.    network-interface.group-id - The ID of the security group associated with the network interface.    network-interface.network-interface-id - The ID of the network interface.    network-interface.private-ip-address - The primary private IP address of the network interface.    network-interface.subnet-id - The ID of the subnet for the instance.    product-description - The product description associated with the instance (Linux/UNIX | Windows).    spot-instance-request-id - The Spot Instance request ID.    spot-price - The maximum hourly price for any Spot Instance launched to fulfill the request.    state - The state of the Spot Instance request (open | active | closed | cancelled | failed). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see Spot request status in the Amazon EC2 User Guide for Linux Instances.    status-code - The short code describing the most recent evaluation of your Spot Instance request.    status-message - The message explaining the status of the Spot Instance request.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of Spot Instance request (one-time | persistent).    valid-from - The start date of the request.    valid-until - The end date of the request.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// One or more Spot Instance request IDs.
        @OptionalCustomCoding<ArrayCoder<_SpotInstanceRequestIdsEncoding, String>>
        public var spotInstanceRequestIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, spotInstanceRequestIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.spotInstanceRequestIds = spotInstanceRequestIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case spotInstanceRequestIds = "SpotInstanceRequestId"
        }
    }

    public struct DescribeSpotInstanceRequestsResult: AWSDecodableShape {
        public struct _SpotInstanceRequestsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next set of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// One or more Spot Instance requests.
        @OptionalCustomCoding<ArrayCoder<_SpotInstanceRequestsEncoding, SpotInstanceRequest>>
        public var spotInstanceRequests: [SpotInstanceRequest]?

        public init(nextToken: String? = nil, spotInstanceRequests: [SpotInstanceRequest]? = nil) {
            self.nextToken = nextToken
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct DescribeSpotPriceHistoryRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Filters the results by the specified Availability Zone.
        public let availabilityZone: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let endTime: Date?
        /// One or more filters.    availability-zone - The Availability Zone for which prices should be returned.    instance-type - The type of instance (for example, m3.medium).    product-description - The product description for the Spot price (Linux/UNIX | Red Hat Enterprise Linux | SUSE Linux | Windows | Linux/UNIX (Amazon VPC) | Red Hat Enterprise Linux (Amazon VPC) | SUSE Linux (Amazon VPC) | Windows (Amazon VPC)).    spot-price - The Spot price. The value must match exactly (or use wildcards; greater than or less than comparison is not supported).    timestamp - The time stamp of the Spot price history, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). You can use wildcards (* and ?). Greater than or less than comparison is not supported.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// Filters the results by the specified instance types.
        @OptionalCustomCoding<StandardArrayCoder>
        public var instanceTypes: [InstanceType]?
        /// The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token for the next set of results.
        public let nextToken: String?
        /// Filters the results by the specified basic product descriptions.
        @OptionalCustomCoding<StandardArrayCoder>
        public var productDescriptions: [String]?
        /// The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let startTime: Date?

        public init(availabilityZone: String? = nil, dryRun: Bool? = nil, endTime: Date? = nil, filters: [Filter]? = nil, instanceTypes: [InstanceType]? = nil, maxResults: Int? = nil, nextToken: String? = nil, productDescriptions: [String]? = nil, startTime: Date? = nil) {
            self.availabilityZone = availabilityZone
            self.dryRun = dryRun
            self.endTime = endTime
            self.filters = filters
            self.instanceTypes = instanceTypes
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.productDescriptions = productDescriptions
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case dryRun
            case endTime
            case filters = "Filter"
            case instanceTypes = "InstanceType"
            case maxResults
            case nextToken
            case productDescriptions = "ProductDescription"
            case startTime
        }
    }

    public struct DescribeSpotPriceHistoryResult: AWSDecodableShape {
        public struct _SpotPriceHistoryEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token required to retrieve the next set of results. This value is null or an empty string when there are no more results to return.
        public let nextToken: String?
        /// The historical Spot prices.
        @OptionalCustomCoding<ArrayCoder<_SpotPriceHistoryEncoding, SpotPrice>>
        public var spotPriceHistory: [SpotPrice]?

        public init(nextToken: String? = nil, spotPriceHistory: [SpotPrice]? = nil) {
            self.nextToken = nextToken
            self.spotPriceHistory = spotPriceHistory
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case spotPriceHistory = "spotPriceHistorySet"
        }
    }

    public struct DescribeStaleSecurityGroupsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
        public let maxResults: Int?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcId = vpcId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcId = "VpcId"
        }
    }

    public struct DescribeStaleSecurityGroupsResult: AWSDecodableShape {
        public struct _StaleSecurityGroupSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the stale security groups.
        @OptionalCustomCoding<ArrayCoder<_StaleSecurityGroupSetEncoding, StaleSecurityGroup>>
        public var staleSecurityGroupSet: [StaleSecurityGroup]?

        public init(nextToken: String? = nil, staleSecurityGroupSet: [StaleSecurityGroup]? = nil) {
            self.nextToken = nextToken
            self.staleSecurityGroupSet = staleSecurityGroupSet
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case staleSecurityGroupSet
        }
    }

    public struct DescribeStoreImageTasksRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ImageIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    task-state - Returns tasks in a certain state (InProgress | Completed | Failed)    bucket - Returns task information for tasks that targeted a specific bucket. For the filter value, specify the bucket name.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The AMI IDs for which to show progress. Up to 20 AMI IDs can be included in a request.
        @OptionalCustomCoding<ArrayCoder<_ImageIdsEncoding, String>>
        public var imageIds: [String]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 1 and 200. You cannot specify this parameter and the ImageIDs parameter in the same call.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, imageIds: [String]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.imageIds = imageIds
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 200)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case imageIds = "ImageId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeStoreImageTasksResult: AWSDecodableShape {
        public struct _StoreImageTaskResultsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The information about the AMI store tasks.
        @OptionalCustomCoding<ArrayCoder<_StoreImageTaskResultsEncoding, StoreImageTaskResult>>
        public var storeImageTaskResults: [StoreImageTaskResult]?

        public init(nextToken: String? = nil, storeImageTaskResults: [StoreImageTaskResult]? = nil) {
            self.nextToken = nextToken
            self.storeImageTaskResults = storeImageTaskResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case storeImageTaskResults = "storeImageTaskResultSet"
        }
    }

    public struct DescribeSubnetsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "SubnetId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    availability-zone - The Availability Zone for the subnet. You can also use availabilityZone as the filter name.    availability-zone-id - The ID of the Availability Zone for the subnet. You can also use availabilityZoneId as the filter name.    available-ip-address-count - The number of IPv4 addresses in the subnet that are available.    cidr-block - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use cidr or cidrBlock as the filter names.    default-for-az - Indicates whether this is the default subnet for the Availability Zone. You can also use defaultForAz as the filter name.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.association-id - An association ID for an IPv6 CIDR block associated with the subnet.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the subnet.    outpost-arn - The Amazon Resource Name (ARN) of the Outpost.    owner-id - The ID of the AWS account that owns the subnet.    state - The state of the subnet (pending | available).    subnet-arn - The Amazon Resource Name (ARN) of the subnet.    subnet-id - The ID of the subnet.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC for the subnet.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more subnet IDs. Default: Describes all your subnets.
        @OptionalCustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, subnetIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.subnetIds = subnetIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case subnetIds = "SubnetId"
        }
    }

    public struct DescribeSubnetsResult: AWSDecodableShape {
        public struct _SubnetsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more subnets.
        @OptionalCustomCoding<ArrayCoder<_SubnetsEncoding, Subnet>>
        public var subnets: [Subnet]?

        public init(nextToken: String? = nil, subnets: [Subnet]? = nil) {
            self.nextToken = nextToken
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case subnets = "subnetSet"
        }
    }

    public struct DescribeTagsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    key - The tag key.    resource-id - The ID of the resource.    resource-type - The resource type (customer-gateway | dedicated-host | dhcp-options | elastic-ip | fleet | fpga-image | host-reservation | image | instance | internet-gateway | key-pair | launch-template | natgateway | network-acl | network-interface | placement-group | reserved-instances | route-table | security-group | snapshot | spot-instances-request | subnet | volume | vpc | vpc-endpoint | vpc-endpoint-service | vpc-peering-connection | vpn-connection | vpn-gateway).    tag:&lt;key&gt; - The key/value combination of the tag. For example, specify "tag:Owner" for the filter name and "TeamA" for the filter value to find resources with the tag "Owner=TeamA".    value - The tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned NextToken value.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults
            case nextToken
        }
    }

    public struct DescribeTagsResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The tags.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, TagDescription>>
        public var tags: [TagDescription]?

        public init(nextToken: String? = nil, tags: [TagDescription]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case tags = "tagSet"
        }
    }

    public struct DescribeTrafficMirrorFiltersRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TrafficMirrorFilterIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    description: The Traffic Mirror filter description.    traffic-mirror-filter-id: The ID of the Traffic Mirror filter.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Traffic Mirror filter.
        @OptionalCustomCoding<ArrayCoder<_TrafficMirrorFilterIdsEncoding, String>>
        public var trafficMirrorFilterIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, trafficMirrorFilterIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.trafficMirrorFilterIds = trafficMirrorFilterIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case trafficMirrorFilterIds = "TrafficMirrorFilterId"
        }
    }

    public struct DescribeTrafficMirrorFiltersResult: AWSDecodableShape {
        public struct _TrafficMirrorFiltersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. The value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more Traffic Mirror filters.
        @OptionalCustomCoding<ArrayCoder<_TrafficMirrorFiltersEncoding, TrafficMirrorFilter>>
        public var trafficMirrorFilters: [TrafficMirrorFilter]?

        public init(nextToken: String? = nil, trafficMirrorFilters: [TrafficMirrorFilter]? = nil) {
            self.nextToken = nextToken
            self.trafficMirrorFilters = trafficMirrorFilters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case trafficMirrorFilters = "trafficMirrorFilterSet"
        }
    }

    public struct DescribeTrafficMirrorSessionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TrafficMirrorSessionIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    description: The Traffic Mirror session description.    network-interface-id: The ID of the Traffic Mirror session network interface.    owner-id: The ID of the account that owns the Traffic Mirror session.    packet-length: The assigned number of packets to mirror.     session-number: The assigned session number.     traffic-mirror-filter-id: The ID of the Traffic Mirror filter.    traffic-mirror-session-id: The ID of the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.    virtual-network-id: The virtual network ID of the Traffic Mirror session.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Traffic Mirror session.
        @OptionalCustomCoding<ArrayCoder<_TrafficMirrorSessionIdsEncoding, String>>
        public var trafficMirrorSessionIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, trafficMirrorSessionIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.trafficMirrorSessionIds = trafficMirrorSessionIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case trafficMirrorSessionIds = "TrafficMirrorSessionId"
        }
    }

    public struct DescribeTrafficMirrorSessionsResult: AWSDecodableShape {
        public struct _TrafficMirrorSessionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. The value is null when there are no more results to return.
        public let nextToken: String?
        /// Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.
        @OptionalCustomCoding<ArrayCoder<_TrafficMirrorSessionsEncoding, TrafficMirrorSession>>
        public var trafficMirrorSessions: [TrafficMirrorSession]?

        public init(nextToken: String? = nil, trafficMirrorSessions: [TrafficMirrorSession]? = nil) {
            self.nextToken = nextToken
            self.trafficMirrorSessions = trafficMirrorSessions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case trafficMirrorSessions = "trafficMirrorSessionSet"
        }
    }

    public struct DescribeTrafficMirrorTargetsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TrafficMirrorTargetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    description: The Traffic Mirror target description.    network-interface-id: The ID of the Traffic Mirror session network interface.    network-load-balancer-arn: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.    owner-id: The ID of the account that owns the Traffic Mirror session.    traffic-mirror-target-id: The ID of the Traffic Mirror target.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the Traffic Mirror targets.
        @OptionalCustomCoding<ArrayCoder<_TrafficMirrorTargetIdsEncoding, String>>
        public var trafficMirrorTargetIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, trafficMirrorTargetIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.trafficMirrorTargetIds = trafficMirrorTargetIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case trafficMirrorTargetIds = "TrafficMirrorTargetId"
        }
    }

    public struct DescribeTrafficMirrorTargetsResult: AWSDecodableShape {
        public struct _TrafficMirrorTargetsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. The value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more Traffic Mirror targets.
        @OptionalCustomCoding<ArrayCoder<_TrafficMirrorTargetsEncoding, TrafficMirrorTarget>>
        public var trafficMirrorTargets: [TrafficMirrorTarget]?

        public init(nextToken: String? = nil, trafficMirrorTargets: [TrafficMirrorTarget]? = nil) {
            self.nextToken = nextToken
            self.trafficMirrorTargets = trafficMirrorTargets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case trafficMirrorTargets = "trafficMirrorTargetSet"
        }
    }

    public struct DescribeTransitGatewayAttachmentsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    association.state - The state of the association (associating | associated | disassociating).    association.transit-gateway-route-table-id - The ID of the route table for the transit gateway.    resource-id - The ID of the resource.    resource-owner-id - The ID of the AWS account that owns the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    state - The state of the attachment. Valid values are available | deleted | deleting | failed | failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-owner-id - The ID of the AWS account that owns the transit gateway.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the attachments.
        @OptionalCustomCoding<StandardArrayCoder>
        public var transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayAttachmentsResult: AWSDecodableShape {
        public struct _TransitGatewayAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the attachments.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayAttachmentsEncoding, TransitGatewayAttachment>>
        public var transitGatewayAttachments: [TransitGatewayAttachment]?

        public init(nextToken: String? = nil, transitGatewayAttachments: [TransitGatewayAttachment]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayAttachments = transitGatewayAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayAttachments
        }
    }

    public struct DescribeTransitGatewayConnectPeersRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayConnectPeerIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    state - The state of the Connect peer (pending | available | deleting | deleted).    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-connect-peer-id - The ID of the Connect peer.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the Connect peers.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayConnectPeerIdsEncoding, String>>
        public var transitGatewayConnectPeerIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayConnectPeerIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayConnectPeerIds = transitGatewayConnectPeerIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayConnectPeerIds = "TransitGatewayConnectPeerIds"
        }
    }

    public struct DescribeTransitGatewayConnectPeersResult: AWSDecodableShape {
        public struct _TransitGatewayConnectPeersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Connect peers.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayConnectPeersEncoding, TransitGatewayConnectPeer>>
        public var transitGatewayConnectPeers: [TransitGatewayConnectPeer]?

        public init(nextToken: String? = nil, transitGatewayConnectPeers: [TransitGatewayConnectPeer]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayConnectPeers = transitGatewayConnectPeers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayConnectPeers = "transitGatewayConnectPeerSet"
        }
    }

    public struct DescribeTransitGatewayConnectsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    options.protocol - The tunnel protocol (gre).    state - The state of the attachment (initiating | initiatingRequest | pendingAcceptance | rollingBack | pending | available | modifying | deleting | deleted | failed | rejected | rejecting | failing).    transit-gateway-attachment-id - The ID of the Connect attachment.    transit-gateway-id - The ID of the transit gateway.    transport-transit-gateway-attachment-id - The ID of the transit gateway attachment from which the Connect attachment was created.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the attachments.
        @OptionalCustomCoding<StandardArrayCoder>
        public var transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayConnectsResult: AWSDecodableShape {
        public struct _TransitGatewayConnectsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the Connect attachments.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayConnectsEncoding, TransitGatewayConnect>>
        public var transitGatewayConnects: [TransitGatewayConnect]?

        public init(nextToken: String? = nil, transitGatewayConnects: [TransitGatewayConnect]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayConnects = transitGatewayConnects
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayConnects = "transitGatewayConnectSet"
        }
    }

    public struct DescribeTransitGatewayMulticastDomainsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayMulticastDomainIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    state - The state of the transit gateway multicast domain. Valid values are pending | available | deleting | deleted.    transit-gateway-id - The ID of the transit gateway.    transit-gateway-multicast-domain-id - The ID of the transit gateway multicast domain.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway multicast domain.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayMulticastDomainIdsEncoding, String>>
        public var transitGatewayMulticastDomainIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayMulticastDomainIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayMulticastDomainIds = transitGatewayMulticastDomainIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayMulticastDomainIds = "TransitGatewayMulticastDomainIds"
        }
    }

    public struct DescribeTransitGatewayMulticastDomainsResult: AWSDecodableShape {
        public struct _TransitGatewayMulticastDomainsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the transit gateway multicast domains.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayMulticastDomainsEncoding, TransitGatewayMulticastDomain>>
        public var transitGatewayMulticastDomains: [TransitGatewayMulticastDomain]?

        public init(nextToken: String? = nil, transitGatewayMulticastDomains: [TransitGatewayMulticastDomain]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayMulticastDomains = transitGatewayMulticastDomains
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayMulticastDomains
        }
    }

    public struct DescribeTransitGatewayPeeringAttachmentsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    transit-gateway-attachment-id - The ID of the transit gateway attachment.    local-owner-id - The ID of your AWS account.    remote-owner-id - The ID of the AWS account in the remote Region that owns the transit gateway.    state - The state of the peering attachment. Valid values are available | deleted | deleting | failed | failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.    transit-gateway-id - The ID of the transit gateway.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more IDs of the transit gateway peering attachments.
        @OptionalCustomCoding<StandardArrayCoder>
        public var transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayPeeringAttachmentsResult: AWSDecodableShape {
        public struct _TransitGatewayPeeringAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The transit gateway peering attachments.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayPeeringAttachmentsEncoding, TransitGatewayPeeringAttachment>>
        public var transitGatewayPeeringAttachments: [TransitGatewayPeeringAttachment]?

        public init(nextToken: String? = nil, transitGatewayPeeringAttachments: [TransitGatewayPeeringAttachment]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayPeeringAttachments = transitGatewayPeeringAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayPeeringAttachments
        }
    }

    public struct DescribeTransitGatewayRouteTablesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayRouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    default-association-route-table - Indicates whether this is the default association route table for the transit gateway (true | false).    default-propagation-route-table - Indicates whether this is the default propagation route table for the transit gateway (true | false).    state - The state of the route table (available | deleting | deleted | pending).    transit-gateway-id - The ID of the transit gateway.    transit-gateway-route-table-id - The ID of the transit gateway route table.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the transit gateway route tables.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayRouteTableIdsEncoding, String>>
        public var transitGatewayRouteTableIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableIds = transitGatewayRouteTableIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableIds = "TransitGatewayRouteTableIds"
        }
    }

    public struct DescribeTransitGatewayRouteTablesResult: AWSDecodableShape {
        public struct _TransitGatewayRouteTablesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the transit gateway route tables.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayRouteTablesEncoding, TransitGatewayRouteTable>>
        public var transitGatewayRouteTables: [TransitGatewayRouteTable]?

        public init(nextToken: String? = nil, transitGatewayRouteTables: [TransitGatewayRouteTable]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayRouteTables = transitGatewayRouteTables
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayRouteTables
        }
    }

    public struct DescribeTransitGatewayVpcAttachmentsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    state - The state of the attachment. Valid values are available | deleted | deleting | failed | failing | initiatingRequest | modifying | pendingAcceptance | pending | rollingBack | rejected | rejecting.    transit-gateway-attachment-id - The ID of the attachment.    transit-gateway-id - The ID of the transit gateway.    vpc-id - The ID of the VPC.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the attachments.
        @OptionalCustomCoding<StandardArrayCoder>
        public var transitGatewayAttachmentIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentIds = transitGatewayAttachmentIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentIds = "TransitGatewayAttachmentIds"
        }
    }

    public struct DescribeTransitGatewayVpcAttachmentsResult: AWSDecodableShape {
        public struct _TransitGatewayVpcAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the VPC attachments.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayVpcAttachmentsEncoding, TransitGatewayVpcAttachment>>
        public var transitGatewayVpcAttachments: [TransitGatewayVpcAttachment]?

        public init(nextToken: String? = nil, transitGatewayVpcAttachments: [TransitGatewayVpcAttachment]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayVpcAttachments = transitGatewayVpcAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayVpcAttachments
        }
    }

    public struct DescribeTransitGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _TransitGatewayIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    options.propagation-default-route-table-id - The ID of the default propagation route table.    options.amazon-side-asn - The private ASN for the Amazon side of a BGP session.    options.association-default-route-table-id - The ID of the default association route table.    options.auto-accept-shared-attachments - Indicates whether there is automatic acceptance of attachment requests (enable | disable).    options.default-route-table-association - Indicates whether resource attachments are automatically associated with the default association route table (enable | disable).    options.default-route-table-propagation - Indicates whether resource attachments automatically propagate routes to the default propagation route table (enable | disable).    options.dns-support - Indicates whether DNS support is enabled (enable | disable).    options.vpn-ecmp-support - Indicates whether Equal Cost Multipath Protocol support is enabled (enable | disable).    owner-id - The ID of the AWS account that owns the transit gateway.    state - The state of the transit gateway (available | deleted | deleting | modifying | pending).    transit-gateway-id - The ID of the transit gateway.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The IDs of the transit gateways.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayIdsEncoding, String>>
        public var transitGatewayIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayIds = transitGatewayIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayIds = "TransitGatewayIds"
        }
    }

    public struct DescribeTransitGatewaysResult: AWSDecodableShape {
        public struct _TransitGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the transit gateways.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewaysEncoding, TransitGateway>>
        public var transitGateways: [TransitGateway]?

        public init(nextToken: String? = nil, transitGateways: [TransitGateway]? = nil) {
            self.nextToken = nextToken
            self.transitGateways = transitGateways
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGateways = "transitGatewaySet"
        }
    }

    public struct DescribeTrunkInterfaceAssociationsRequest: AWSEncodableShape {
        public struct _AssociationIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The IDs of the associations.
        @OptionalCustomCoding<ArrayCoder<_AssociationIdsEncoding, String>>
        public var associationIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    gre-key - The ID of a trunk interface association.    interface-protocol - The interface protocol. Valid values are VLAN and GRE.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(associationIds: [String]? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.associationIds = associationIds
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case associationIds = "AssociationId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeTrunkInterfaceAssociationsResult: AWSDecodableShape {
        public struct _InterfaceAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the trunk associations.
        @OptionalCustomCoding<ArrayCoder<_InterfaceAssociationsEncoding, TrunkInterfaceAssociation>>
        public var interfaceAssociations: [TrunkInterfaceAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(interfaceAssociations: [TrunkInterfaceAssociation]? = nil, nextToken: String? = nil) {
            self.interfaceAssociations = interfaceAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case interfaceAssociations = "interfaceAssociationSet"
            case nextToken
        }
    }

    public struct DescribeVolumeAttributeRequest: AWSEncodableShape {
        /// The attribute of the volume. This parameter is required.
        public let attribute: VolumeAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String

        public init(attribute: VolumeAttributeName, dryRun: Bool? = nil, volumeId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun
            case volumeId = "VolumeId"
        }
    }

    public struct DescribeVolumeAttributeResult: AWSDecodableShape {
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The state of autoEnableIO attribute.
        public let autoEnableIO: AttributeBooleanValue?
        /// A list of product codes.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// The ID of the volume.
        public let volumeId: String?

        public init(autoEnableIO: AttributeBooleanValue? = nil, productCodes: [ProductCode]? = nil, volumeId: String? = nil) {
            self.autoEnableIO = autoEnableIO
            self.productCodes = productCodes
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case autoEnableIO
            case productCodes
            case volumeId
        }
    }

    public struct DescribeVolumeStatusRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VolumeIdsEncoding: ArrayCoderProperties { public static let member = "VolumeId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    action.code - The action code for the event (for example, enable-volume-io).    action.description - A description of the action.    action.event-id - The event ID associated with the action.    availability-zone - The Availability Zone of the instance.    event.description - A description of the event.    event.event-id - The event ID.    event.event-type - The event type (for io-enabled: passed | failed; for io-performance: io-performance:degraded | io-performance:severely-degraded | io-performance:stalled).    event.not-after - The latest end time for the event.    event.not-before - The earliest start time for the event.    volume-status.details-name - The cause for volume-status.status (io-enabled | io-performance).    volume-status.details-status - The status of volume-status.details-name (for io-enabled: passed | failed; for io-performance: normal | degraded | severely-degraded | stalled).    volume-status.status - The status of the volume (ok | impaired | warning | insufficient-data).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of volume results returned by DescribeVolumeStatus in paginated output. When this parameter is used, the request only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned. If this parameter is not used, then DescribeVolumeStatus returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
        public let maxResults: Int?
        /// The NextToken value to include in a future DescribeVolumeStatus request. When the results of the request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The IDs of the volumes. Default: Describes all your volumes.
        @OptionalCustomCoding<ArrayCoder<_VolumeIdsEncoding, String>>
        public var volumeIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeIds = volumeIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case volumeIds = "VolumeId"
        }
    }

    public struct DescribeVolumeStatusResult: AWSDecodableShape {
        public struct _VolumeStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the status of the volumes.
        @OptionalCustomCoding<ArrayCoder<_VolumeStatusesEncoding, VolumeStatusItem>>
        public var volumeStatuses: [VolumeStatusItem]?

        public init(nextToken: String? = nil, volumeStatuses: [VolumeStatusItem]? = nil) {
            self.nextToken = nextToken
            self.volumeStatuses = volumeStatuses
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case volumeStatuses = "volumeStatusSet"
        }
    }

    public struct DescribeVolumesModificationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VolumeIdsEncoding: ArrayCoderProperties { public static let member = "VolumeId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    modification-state - The current modification state (modifying | optimizing | completed | failed).    original-iops - The original IOPS rate of the volume.    original-size - The original size of the volume, in GiB.    original-volume-type - The original volume type of the volume (standard | io1 | io2 | gp2 | sc1 | st1).    originalMultiAttachEnabled - Indicates whether Multi-Attach support was enabled (true | false).    start-time - The modification start time.    target-iops - The target IOPS rate of the volume.    target-size - The target size of the volume, in GiB.    target-volume-type - The target volume type of the volume (standard | io1 | io2 | gp2 | sc1 | st1).    targetMultiAttachEnabled - Indicates whether Multi-Attach support is to be enabled (true | false).    volume-id - The ID of the volume.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results (up to a limit of 500) to be returned in a paginated request.
        public let maxResults: Int?
        /// The nextToken value returned by a previous paginated request.
        public let nextToken: String?
        /// The IDs of the volumes.
        @OptionalCustomCoding<ArrayCoder<_VolumeIdsEncoding, String>>
        public var volumeIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeIds = volumeIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case volumeIds = "VolumeId"
        }
    }

    public struct DescribeVolumesModificationsResult: AWSDecodableShape {
        public struct _VolumesModificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Token for pagination, null if there are no more results
        public let nextToken: String?
        /// Information about the volume modifications.
        @OptionalCustomCoding<ArrayCoder<_VolumesModificationsEncoding, VolumeModification>>
        public var volumesModifications: [VolumeModification]?

        public init(nextToken: String? = nil, volumesModifications: [VolumeModification]? = nil) {
            self.nextToken = nextToken
            self.volumesModifications = volumesModifications
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case volumesModifications = "volumeModificationSet"
        }
    }

    public struct DescribeVolumesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VolumeIdsEncoding: ArrayCoderProperties { public static let member = "VolumeId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters.    attachment.attach-time - The time stamp when the attachment initiated.    attachment.delete-on-termination - Whether the volume is deleted on instance termination.    attachment.device - The device name specified in the block device mapping (for example, /dev/sda1).    attachment.instance-id - The ID of the instance the volume is attached to.    attachment.status - The attachment state (attaching | attached | detaching).    availability-zone - The Availability Zone in which the volume was created.    create-time - The time stamp when the volume was created.    encrypted - Indicates whether the volume is encrypted (true | false)    multi-attach-enabled - Indicates whether the volume is enabled for Multi-Attach (true | false)    fast-restored - Indicates whether the volume was created from a snapshot that is enabled for fast snapshot restore (true | false).    size - The size of the volume, in GiB.    snapshot-id - The snapshot from which the volume was created.    status - The state of the volume (creating | available | in-use | deleting | deleted | error).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    volume-id - The volume ID.    volume-type - The Amazon EBS volume type (gp2 | gp3 | io1 | io2 | st1 | sc1| standard)
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of volume results returned by DescribeVolumes in paginated output. When this parameter is used, DescribeVolumes only returns MaxResults results in a single page along with a NextToken response element. The remaining results of the initial request can be seen by sending another DescribeVolumes request with the returned NextToken value. This value can be between 5 and 500; if MaxResults is given a value larger than 500, only 500 results are returned. If this parameter is not used, then DescribeVolumes returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
        public let maxResults: Int?
        /// The NextToken value returned from a previous paginated DescribeVolumes request where MaxResults was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the NextToken value. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The volume IDs.
        @OptionalCustomCoding<ArrayCoder<_VolumeIdsEncoding, String>>
        public var volumeIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, volumeIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.volumeIds = volumeIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults
            case nextToken
            case volumeIds = "VolumeId"
        }
    }

    public struct DescribeVolumesResult: AWSDecodableShape {
        public struct _VolumesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The NextToken value to include in a future DescribeVolumes request. When the results of a DescribeVolumes request exceed MaxResults, this value can be used to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the volumes.
        @OptionalCustomCoding<ArrayCoder<_VolumesEncoding, Volume>>
        public var volumes: [Volume]?

        public init(nextToken: String? = nil, volumes: [Volume]? = nil) {
            self.nextToken = nextToken
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case volumes = "volumeSet"
        }
    }

    public struct DescribeVpcAttributeRequest: AWSEncodableShape {
        /// The VPC attribute.
        public let attribute: VpcAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(attribute: VpcAttributeName, dryRun: Bool? = nil, vpcId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun
            case vpcId = "VpcId"
        }
    }

    public struct DescribeVpcAttributeResult: AWSDecodableShape {
        /// Indicates whether the instances launched in the VPC get DNS hostnames. If this attribute is true, instances in the VPC get DNS hostnames; otherwise, they do not.
        public let enableDnsHostnames: AttributeBooleanValue?
        /// Indicates whether DNS resolution is enabled for the VPC. If this attribute is true, the Amazon DNS server resolves DNS hostnames for your instances to their corresponding IP addresses; otherwise, it does not.
        public let enableDnsSupport: AttributeBooleanValue?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(enableDnsHostnames: AttributeBooleanValue? = nil, enableDnsSupport: AttributeBooleanValue? = nil, vpcId: String? = nil) {
            self.enableDnsHostnames = enableDnsHostnames
            self.enableDnsSupport = enableDnsSupport
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case enableDnsHostnames
            case enableDnsSupport
            case vpcId
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportRequest: AWSEncodableShape {
        public struct _VpcIdsEncoding: ArrayCoderProperties { public static let member = "VpcId" }

        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more VPC IDs.
        @OptionalCustomCoding<ArrayCoder<_VpcIdsEncoding, String>>
        public var vpcIds: [String]?

        public init(maxResults: Int? = nil, nextToken: String? = nil, vpcIds: [String]? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcIds = vpcIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
            try self.validate(self.nextToken, name: "nextToken", parent: name, max: 1024)
            try self.validate(self.nextToken, name: "nextToken", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults
            case nextToken
            case vpcIds = "VpcIds"
        }
    }

    public struct DescribeVpcClassicLinkDnsSupportResult: AWSDecodableShape {
        public struct _VpcsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the ClassicLink DNS support status of the VPCs.
        @OptionalCustomCoding<ArrayCoder<_VpcsEncoding, ClassicLinkDnsSupport>>
        public var vpcs: [ClassicLinkDnsSupport]?

        public init(nextToken: String? = nil, vpcs: [ClassicLinkDnsSupport]? = nil) {
            self.nextToken = nextToken
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case vpcs
        }
    }

    public struct DescribeVpcClassicLinkRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpcIdsEncoding: ArrayCoderProperties { public static let member = "VpcId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    is-classic-link-enabled - Whether the VPC is enabled for ClassicLink (true | false).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more VPCs for which you want to describe the ClassicLink status.
        @OptionalCustomCoding<ArrayCoder<_VpcIdsEncoding, String>>
        public var vpcIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, vpcIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpcIds = vpcIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case vpcIds = "VpcId"
        }
    }

    public struct DescribeVpcClassicLinkResult: AWSDecodableShape {
        public struct _VpcsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ClassicLink status of one or more VPCs.
        @OptionalCustomCoding<ArrayCoder<_VpcsEncoding, VpcClassicLink>>
        public var vpcs: [VpcClassicLink]?

        public init(vpcs: [VpcClassicLink]? = nil) {
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case vpcs = "vpcSet"
        }
    }

    public struct DescribeVpcEndpointConnectionNotificationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// The ID of the notification.
        public let connectionNotificationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    connection-notification-arn - The ARN of the SNS topic for the notification.    connection-notification-id - The ID of the notification.    connection-notification-state - The state of the notification (Enabled | Disabled).    connection-notification-type - The type of notification (Topic).    service-id - The ID of the endpoint service.    vpc-endpoint-id - The ID of the VPC endpoint.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned NextToken value.
        public let maxResults: Int?
        /// The token to request the next page of results.
        public let nextToken: String?

        public init(connectionNotificationId: String? = nil, dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.connectionNotificationId = connectionNotificationId
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationId = "ConnectionNotificationId"
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeVpcEndpointConnectionNotificationsResult: AWSDecodableShape {
        public struct _ConnectionNotificationSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more notifications.
        @OptionalCustomCoding<ArrayCoder<_ConnectionNotificationSetEncoding, ConnectionNotification>>
        public var connectionNotificationSet: [ConnectionNotification]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(connectionNotificationSet: [ConnectionNotification]? = nil, nextToken: String? = nil) {
            self.connectionNotificationSet = connectionNotificationSet
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connectionNotificationSet
            case nextToken
        }
    }

    public struct DescribeVpcEndpointConnectionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    service-id - The ID of the service.    vpc-endpoint-owner - The AWS account number of the owner of the endpoint.    vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).    vpc-endpoint-id - The ID of the endpoint.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeVpcEndpointConnectionsResult: AWSDecodableShape {
        public struct _VpcEndpointConnectionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more VPC endpoint connections.
        @OptionalCustomCoding<ArrayCoder<_VpcEndpointConnectionsEncoding, VpcEndpointConnection>>
        public var vpcEndpointConnections: [VpcEndpointConnection]?

        public init(nextToken: String? = nil, vpcEndpointConnections: [VpcEndpointConnection]? = nil) {
            self.nextToken = nextToken
            self.vpcEndpointConnections = vpcEndpointConnections
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case vpcEndpointConnections = "vpcEndpointConnectionSet"
        }
    }

    public struct DescribeVpcEndpointServiceConfigurationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ServiceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    service-name - The name of the service.    service-id - The ID of the service.    service-state - The state of the service (Pending | Available | Deleting | Deleted | Failed).     tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The IDs of one or more services.
        @OptionalCustomCoding<ArrayCoder<_ServiceIdsEncoding, String>>
        public var serviceIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceIds = serviceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceIds = "ServiceId"
        }
    }

    public struct DescribeVpcEndpointServiceConfigurationsResult: AWSDecodableShape {
        public struct _ServiceConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more services.
        @OptionalCustomCoding<ArrayCoder<_ServiceConfigurationsEncoding, ServiceConfiguration>>
        public var serviceConfigurations: [ServiceConfiguration]?

        public init(nextToken: String? = nil, serviceConfigurations: [ServiceConfiguration]? = nil) {
            self.nextToken = nextToken
            self.serviceConfigurations = serviceConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case serviceConfigurations = "serviceConfigurationSet"
        }
    }

    public struct DescribeVpcEndpointServicePermissionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    principal - The ARN of the principal.    principal-type - The principal type (All | Service | OrganizationUnit | Account | User | Role).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned NextToken value. This value can be between 5 and 1,000; if MaxResults is given a value larger than 1,000, only 1,000 results are returned.
        public let maxResults: Int?
        /// The token to retrieve the next page of results.
        public let nextToken: String?
        /// The ID of the service.
        public let serviceId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceId = "ServiceId"
        }
    }

    public struct DescribeVpcEndpointServicePermissionsResult: AWSDecodableShape {
        public struct _AllowedPrincipalsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more allowed principals.
        @OptionalCustomCoding<ArrayCoder<_AllowedPrincipalsEncoding, AllowedPrincipal>>
        public var allowedPrincipals: [AllowedPrincipal]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(allowedPrincipals: [AllowedPrincipal]? = nil, nextToken: String? = nil) {
            self.allowedPrincipals = allowedPrincipals
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case allowedPrincipals
            case nextToken
        }
    }

    public struct DescribeVpcEndpointServicesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _ServiceNamesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    service-name - The name of the service.    service-type - The type of service (Interface | Gateway).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
        public let maxResults: Int?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// One or more service names.
        @OptionalCustomCoding<ArrayCoder<_ServiceNamesEncoding, String>>
        public var serviceNames: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, serviceNames: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.serviceNames = serviceNames
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case serviceNames = "ServiceName"
        }
    }

    public struct DescribeVpcEndpointServicesResult: AWSDecodableShape {
        public struct _ServiceDetailsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ServiceNamesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the service.
        @OptionalCustomCoding<ArrayCoder<_ServiceDetailsEncoding, ServiceDetail>>
        public var serviceDetails: [ServiceDetail]?
        /// A list of supported services.
        @OptionalCustomCoding<ArrayCoder<_ServiceNamesEncoding, String>>
        public var serviceNames: [String]?

        public init(nextToken: String? = nil, serviceDetails: [ServiceDetail]? = nil, serviceNames: [String]? = nil) {
            self.nextToken = nextToken
            self.serviceDetails = serviceDetails
            self.serviceNames = serviceNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case serviceDetails = "serviceDetailSet"
            case serviceNames = "serviceNameSet"
        }
    }

    public struct DescribeVpcEndpointsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpcEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    service-name - The name of the service.    vpc-id - The ID of the VPC in which the endpoint resides.    vpc-endpoint-id - The ID of the endpoint.    vpc-endpoint-state - The state of the endpoint (pendingAcceptance | pending | available | deleting | deleted | rejected | failed).    vpc-endpoint-type - The type of VPC endpoint (Interface | Gateway | GatewayLoadBalancer).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. Constraint: If the value is greater than 1,000, we return only 1,000 items.
        public let maxResults: Int?
        /// The token for the next set of items to return. (You received this token from a prior call.)
        public let nextToken: String?
        /// One or more endpoint IDs.
        @OptionalCustomCoding<ArrayCoder<_VpcEndpointIdsEncoding, String>>
        public var vpcEndpointIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcEndpointIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct DescribeVpcEndpointsResult: AWSDecodableShape {
        public struct _VpcEndpointsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// Information about the endpoints.
        @OptionalCustomCoding<ArrayCoder<_VpcEndpointsEncoding, VpcEndpoint>>
        public var vpcEndpoints: [VpcEndpoint]?

        public init(nextToken: String? = nil, vpcEndpoints: [VpcEndpoint]? = nil) {
            self.nextToken = nextToken
            self.vpcEndpoints = vpcEndpoints
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case vpcEndpoints = "vpcEndpointSet"
        }
    }

    public struct DescribeVpcPeeringConnectionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpcPeeringConnectionIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    accepter-vpc-info.cidr-block - The IPv4 CIDR block of the accepter VPC.    accepter-vpc-info.owner-id - The AWS account ID of the owner of the accepter VPC.    accepter-vpc-info.vpc-id - The ID of the accepter VPC.    expiration-time - The expiration date and time for the VPC peering connection.    requester-vpc-info.cidr-block - The IPv4 CIDR block of the requester's VPC.    requester-vpc-info.owner-id - The AWS account ID of the owner of the requester VPC.    requester-vpc-info.vpc-id - The ID of the requester VPC.    status-code - The status of the VPC peering connection (pending-acceptance | failed | expired | provisioning | active | deleting | deleted | rejected).    status-message - A message that provides more information about the status of the VPC peering connection, if applicable.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-peering-connection-id - The ID of the VPC peering connection.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more VPC peering connection IDs. Default: Describes all your VPC peering connections.
        @OptionalCustomCoding<ArrayCoder<_VpcPeeringConnectionIdsEncoding, String>>
        public var vpcPeeringConnectionIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcPeeringConnectionIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcPeeringConnectionIds = vpcPeeringConnectionIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcPeeringConnectionIds = "VpcPeeringConnectionId"
        }
    }

    public struct DescribeVpcPeeringConnectionsResult: AWSDecodableShape {
        public struct _VpcPeeringConnectionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the VPC peering connections.
        @OptionalCustomCoding<ArrayCoder<_VpcPeeringConnectionsEncoding, VpcPeeringConnection>>
        public var vpcPeeringConnections: [VpcPeeringConnection]?

        public init(nextToken: String? = nil, vpcPeeringConnections: [VpcPeeringConnection]? = nil) {
            self.nextToken = nextToken
            self.vpcPeeringConnections = vpcPeeringConnections
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case vpcPeeringConnections = "vpcPeeringConnectionSet"
        }
    }

    public struct DescribeVpcsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpcIdsEncoding: ArrayCoderProperties { public static let member = "VpcId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    cidr - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, /28).    cidr-block-association.cidr-block - An IPv4 CIDR block associated with the VPC.    cidr-block-association.association-id - The association ID for an IPv4 CIDR block associated with the VPC.    cidr-block-association.state - The state of an IPv4 CIDR block associated with the VPC.    dhcp-options-id - The ID of a set of DHCP options.    ipv6-cidr-block-association.ipv6-cidr-block - An IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.ipv6-pool - The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.    ipv6-cidr-block-association.association-id - The association ID for an IPv6 CIDR block associated with the VPC.    ipv6-cidr-block-association.state - The state of an IPv6 CIDR block associated with the VPC.    isDefault - Indicates whether the VPC is the default VPC.    owner-id - The ID of the AWS account that owns the VPC.    state - The state of the VPC (pending | available).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    vpc-id - The ID of the VPC.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// One or more VPC IDs. Default: Describes all your VPCs.
        @OptionalCustomCoding<ArrayCoder<_VpcIdsEncoding, String>>
        public var vpcIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, vpcIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.vpcIds = vpcIds
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case vpcIds = "VpcId"
        }
    }

    public struct DescribeVpcsResult: AWSDecodableShape {
        public struct _VpcsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about one or more VPCs.
        @OptionalCustomCoding<ArrayCoder<_VpcsEncoding, Vpc>>
        public var vpcs: [Vpc]?

        public init(nextToken: String? = nil, vpcs: [Vpc]? = nil) {
            self.nextToken = nextToken
            self.vpcs = vpcs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case vpcs = "vpcSet"
        }
    }

    public struct DescribeVpnConnectionsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpnConnectionIdsEncoding: ArrayCoderProperties { public static let member = "VpnConnectionId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    customer-gateway-configuration - The configuration information for the customer gateway.    customer-gateway-id - The ID of a customer gateway associated with the VPN connection.    state - The state of the VPN connection (pending | available | deleting | deleted).    option.static-routes-only - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).    route.destination-cidr-block - The destination CIDR block. This corresponds to the subnet used in a customer data center.    bgp-asn - The BGP Autonomous System Number (ASN) associated with a BGP device.    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of VPN connection. Currently the only supported type is ipsec.1.    vpn-connection-id - The ID of the VPN connection.    vpn-gateway-id - The ID of a virtual private gateway associated with the VPN connection.    transit-gateway-id - The ID of a transit gateway associated with the VPN connection.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more VPN connection IDs. Default: Describes your VPN connections.
        @OptionalCustomCoding<ArrayCoder<_VpnConnectionIdsEncoding, String>>
        public var vpnConnectionIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, vpnConnectionIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpnConnectionIds = vpnConnectionIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case vpnConnectionIds = "VpnConnectionId"
        }
    }

    public struct DescribeVpnConnectionsResult: AWSDecodableShape {
        public struct _VpnConnectionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more VPN connections.
        @OptionalCustomCoding<ArrayCoder<_VpnConnectionsEncoding, VpnConnection>>
        public var vpnConnections: [VpnConnection]?

        public init(vpnConnections: [VpnConnection]? = nil) {
            self.vpnConnections = vpnConnections
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnections = "vpnConnectionSet"
        }
    }

    public struct DescribeVpnGatewaysRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }
        public struct _VpnGatewayIdsEncoding: ArrayCoderProperties { public static let member = "VpnGatewayId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.    amazon-side-asn - The Autonomous System Number (ASN) for the Amazon side of the gateway.    attachment.state - The current state of the attachment between the gateway and the VPC (attaching | attached | detaching | detached).    attachment.vpc-id - The ID of an attached VPC.    availability-zone - The Availability Zone for the virtual private gateway (if applicable).    state - The state of the virtual private gateway (pending | available | deleting | deleted).    tag:&lt;key&gt; - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key Owner and the value TeamA, specify tag:Owner for the filter name and TeamA for the filter value.    tag-key - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.    type - The type of virtual private gateway. Currently the only supported type is ipsec.1.    vpn-gateway-id - The ID of the virtual private gateway.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// One or more virtual private gateway IDs. Default: Describes all your virtual private gateways.
        @OptionalCustomCoding<ArrayCoder<_VpnGatewayIdsEncoding, String>>
        public var vpnGatewayIds: [String]?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, vpnGatewayIds: [String]? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.vpnGatewayIds = vpnGatewayIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case filters = "Filter"
            case vpnGatewayIds = "VpnGatewayId"
        }
    }

    public struct DescribeVpnGatewaysResult: AWSDecodableShape {
        public struct _VpnGatewaysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about one or more virtual private gateways.
        @OptionalCustomCoding<ArrayCoder<_VpnGatewaysEncoding, VpnGateway>>
        public var vpnGateways: [VpnGateway]?

        public init(vpnGateways: [VpnGateway]? = nil) {
            self.vpnGateways = vpnGateways
        }

        private enum CodingKeys: String, CodingKey {
            case vpnGateways = "vpnGatewaySet"
        }
    }

    public struct DetachClassicLinkVpcRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance to unlink from the VPC.
        public let instanceId: String
        /// The ID of the VPC to which the instance is linked.
        public let vpcId: String

        public init(dryRun: Bool? = nil, instanceId: String, vpcId: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceId
            case vpcId
        }
    }

    public struct DetachClassicLinkVpcResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct DetachInternetGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the internet gateway.
        public let internetGatewayId: String
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, internetGatewayId: String, vpcId: String) {
            self.dryRun = dryRun
            self.internetGatewayId = internetGatewayId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case internetGatewayId
            case vpcId
        }
    }

    public struct DetachNetworkInterfaceRequest: AWSEncodableShape {
        /// The ID of the attachment.
        public let attachmentId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether to force a detachment.    Use the Force parameter only as a last resort to detach a network interface from a failed instance.    If you use the Force parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.   If you force the detachment of a network interface, the instance metadata might not get updated. This means that the attributes associated with the detached network interface might still be visible. The instance metadata will get updated when you stop and start the instance.
        public let force: Bool?

        public init(attachmentId: String, dryRun: Bool? = nil, force: Bool? = nil) {
            self.attachmentId = attachmentId
            self.dryRun = dryRun
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId
            case dryRun
            case force
        }
    }

    public struct DetachVolumeRequest: AWSEncodableShape {
        /// The device name.
        public let device: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
        public let force: Bool?
        /// The ID of the instance. If you are detaching a Multi-Attach enabled volume, you must specify an instance ID.
        public let instanceId: String?
        /// The ID of the volume.
        public let volumeId: String

        public init(device: String? = nil, dryRun: Bool? = nil, force: Bool? = nil, instanceId: String? = nil, volumeId: String) {
            self.device = device
            self.dryRun = dryRun
            self.force = force
            self.instanceId = instanceId
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
            case dryRun
            case force = "Force"
            case instanceId = "InstanceId"
            case volumeId = "VolumeId"
        }
    }

    public struct DetachVpnGatewayRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String

        public init(dryRun: Bool? = nil, vpcId: String, vpnGatewayId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpcId = "VpcId"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct DhcpConfiguration: AWSDecodableShape {
        public struct _ValuesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of a DHCP option.
        public let key: String?
        /// One or more values for the DHCP option.
        @OptionalCustomCoding<ArrayCoder<_ValuesEncoding, AttributeValue>>
        public var values: [AttributeValue]?

        public init(key: String? = nil, values: [AttributeValue]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key
            case values = "valueSet"
        }
    }

    public struct DhcpOptions: AWSDecodableShape {
        public struct _DhcpConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more DHCP options in the set.
        @OptionalCustomCoding<ArrayCoder<_DhcpConfigurationsEncoding, DhcpConfiguration>>
        public var dhcpConfigurations: [DhcpConfiguration]?
        /// The ID of the set of DHCP options.
        public let dhcpOptionsId: String?
        /// The ID of the AWS account that owns the DHCP options set.
        public let ownerId: String?
        /// Any tags assigned to the DHCP options set.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dhcpConfigurations: [DhcpConfiguration]? = nil, dhcpOptionsId: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil) {
            self.dhcpConfigurations = dhcpConfigurations
            self.dhcpOptionsId = dhcpOptionsId
            self.ownerId = ownerId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dhcpConfigurations = "dhcpConfigurationSet"
            case dhcpOptionsId
            case ownerId
            case tags = "tagSet"
        }
    }

    public struct DirectoryServiceAuthentication: AWSDecodableShape {
        /// The ID of the Active Directory used for authentication.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId
        }
    }

    public struct DirectoryServiceAuthenticationRequest: AWSEncodableShape {
        /// The ID of the Active Directory to be used for authentication.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct DisableEbsEncryptionByDefaultRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DisableEbsEncryptionByDefaultResult: AWSDecodableShape {
        /// The updated status of encryption by default.
        public let ebsEncryptionByDefault: Bool?

        public init(ebsEncryptionByDefault: Bool? = nil) {
            self.ebsEncryptionByDefault = ebsEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case ebsEncryptionByDefault
        }
    }

    public struct DisableFastSnapshotRestoreErrorItem: AWSDecodableShape {
        public struct _FastSnapshotRestoreStateErrorsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The errors.
        @OptionalCustomCoding<ArrayCoder<_FastSnapshotRestoreStateErrorsEncoding, DisableFastSnapshotRestoreStateErrorItem>>
        public var fastSnapshotRestoreStateErrors: [DisableFastSnapshotRestoreStateErrorItem]?
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(fastSnapshotRestoreStateErrors: [DisableFastSnapshotRestoreStateErrorItem]? = nil, snapshotId: String? = nil) {
            self.fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrors
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case fastSnapshotRestoreStateErrors = "fastSnapshotRestoreStateErrorSet"
            case snapshotId
        }
    }

    public struct DisableFastSnapshotRestoreStateError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct DisableFastSnapshotRestoreStateErrorItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The error.
        public let error: DisableFastSnapshotRestoreStateError?

        public init(availabilityZone: String? = nil, error: DisableFastSnapshotRestoreStateError? = nil) {
            self.availabilityZone = availabilityZone
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case error
        }
    }

    public struct DisableFastSnapshotRestoreSuccessItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The time at which fast snapshot restores entered the disabled state.
        public let disabledTime: Date?
        /// The time at which fast snapshot restores entered the disabling state.
        public let disablingTime: Date?
        /// The time at which fast snapshot restores entered the enabled state.
        public let enabledTime: Date?
        /// The time at which fast snapshot restores entered the enabling state.
        public let enablingTime: Date?
        /// The time at which fast snapshot restores entered the optimizing state.
        public let optimizingTime: Date?
        /// The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
        public let ownerAlias: String?
        /// The ID of the AWS account that enabled fast snapshot restores on the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of fast snapshot restores for the snapshot.
        public let state: FastSnapshotRestoreStateCode?
        /// The reason for the state transition. The possible values are as follows:    Client.UserInitiated - The state successfully transitioned to enabling or disabling.    Client.UserInitiated - Lifecycle state transition - The state successfully transitioned to optimizing, enabled, or disabled.
        public let stateTransitionReason: String?

        public init(availabilityZone: String? = nil, disabledTime: Date? = nil, disablingTime: Date? = nil, enabledTime: Date? = nil, enablingTime: Date? = nil, optimizingTime: Date? = nil, ownerAlias: String? = nil, ownerId: String? = nil, snapshotId: String? = nil, state: FastSnapshotRestoreStateCode? = nil, stateTransitionReason: String? = nil) {
            self.availabilityZone = availabilityZone
            self.disabledTime = disabledTime
            self.disablingTime = disablingTime
            self.enabledTime = enabledTime
            self.enablingTime = enablingTime
            self.optimizingTime = optimizingTime
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.snapshotId = snapshotId
            self.state = state
            self.stateTransitionReason = stateTransitionReason
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case disabledTime
            case disablingTime
            case enabledTime
            case enablingTime
            case optimizingTime
            case ownerAlias
            case ownerId
            case snapshotId
            case state
            case stateTransitionReason
        }
    }

    public struct DisableFastSnapshotRestoresRequest: AWSEncodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _SourceSnapshotIdsEncoding: ArrayCoderProperties { public static let member = "SnapshotId" }

        /// One or more Availability Zones. For example, us-east-2a.
        @CustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more snapshots. For example, snap-1234567890abcdef0.
        @CustomCoding<ArrayCoder<_SourceSnapshotIdsEncoding, String>>
        public var sourceSnapshotIds: [String]

        public init(availabilityZones: [String], dryRun: Bool? = nil, sourceSnapshotIds: [String]) {
            self.availabilityZones = availabilityZones
            self.dryRun = dryRun
            self.sourceSnapshotIds = sourceSnapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZone"
            case dryRun = "DryRun"
            case sourceSnapshotIds = "SourceSnapshotId"
        }
    }

    public struct DisableFastSnapshotRestoresResult: AWSDecodableShape {
        public struct _SuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the snapshots for which fast snapshot restores were successfully disabled.
        @OptionalCustomCoding<ArrayCoder<_SuccessfulEncoding, DisableFastSnapshotRestoreSuccessItem>>
        public var successful: [DisableFastSnapshotRestoreSuccessItem]?
        /// Information about the snapshots for which fast snapshot restores could not be disabled.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, DisableFastSnapshotRestoreErrorItem>>
        public var unsuccessful: [DisableFastSnapshotRestoreErrorItem]?

        public init(successful: [DisableFastSnapshotRestoreSuccessItem]? = nil, unsuccessful: [DisableFastSnapshotRestoreErrorItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful
            case unsuccessful
        }
    }

    public struct DisableImageDeprecationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String

        public init(dryRun: Bool? = nil, imageId: String) {
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case imageId = "ImageId"
        }
    }

    public struct DisableImageDeprecationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct DisableSerialConsoleAccessRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct DisableSerialConsoleAccessResult: AWSDecodableShape {
        /// If true, access to the EC2 serial console of all instances is enabled for your account. If false, access to the EC2 serial console of all instances is disabled for your account.
        public let serialConsoleAccessEnabled: Bool?

        public init(serialConsoleAccessEnabled: Bool? = nil) {
            self.serialConsoleAccessEnabled = serialConsoleAccessEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case serialConsoleAccessEnabled
        }
    }

    public struct DisableTransitGatewayRouteTablePropagationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DisableTransitGatewayRouteTablePropagationResult: AWSDecodableShape {
        /// Information about route propagation.
        public let propagation: TransitGatewayPropagation?

        public init(propagation: TransitGatewayPropagation? = nil) {
            self.propagation = propagation
        }

        private enum CodingKeys: String, CodingKey {
            case propagation
        }
    }

    public struct DisableVgwRoutePropagationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway.
        public let gatewayId: String
        /// The ID of the route table.
        public let routeTableId: String

        public init(dryRun: Bool? = nil, gatewayId: String, routeTableId: String) {
            self.dryRun = dryRun
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportRequest: AWSEncodableShape {
        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct DisableVpcClassicLinkDnsSupportResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct DisableVpcClassicLinkRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpcId
        }
    }

    public struct DisableVpcClassicLinkResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct DisassociateAddressRequest: AWSEncodableShape {
        /// [EC2-VPC] The association ID. Required for EC2-VPC.
        public let associationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
        public let publicIp: String?

        public init(associationId: String? = nil, dryRun: Bool? = nil, publicIp: String? = nil) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case dryRun
            case publicIp = "PublicIp"
        }
    }

    public struct DisassociateClientVpnTargetNetworkRequest: AWSEncodableShape {
        /// The ID of the target network association.
        public let associationId: String
        /// The ID of the Client VPN endpoint from which to disassociate the target network.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(associationId: String, clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.associationId = associationId
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct DisassociateClientVpnTargetNetworkResult: AWSDecodableShape {
        /// The ID of the target network association.
        public let associationId: String?
        /// The current state of the target network association.
        public let status: AssociationStatus?

        public init(associationId: String? = nil, status: AssociationStatus? = nil) {
            self.associationId = associationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case status
        }
    }

    public struct DisassociateEnclaveCertificateIamRoleRequest: AWSEncodableShape {
        /// The ARN of the ACM certificate from which to disassociate the IAM role.
        public let certificateArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ARN of the IAM role to disassociate.
        public let roleArn: String?

        public init(certificateArn: String? = nil, dryRun: Bool? = nil, roleArn: String? = nil) {
            self.certificateArn = certificateArn
            self.dryRun = dryRun
            self.roleArn = roleArn
        }

        public func validate(name: String) throws {
            try self.validate(self.certificateArn, name: "certificateArn", parent: name, max: 1283)
            try self.validate(self.certificateArn, name: "certificateArn", parent: name, min: 1)
            try self.validate(self.roleArn, name: "roleArn", parent: name, max: 1283)
            try self.validate(self.roleArn, name: "roleArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case dryRun = "DryRun"
            case roleArn = "RoleArn"
        }
    }

    public struct DisassociateEnclaveCertificateIamRoleResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct DisassociateIamInstanceProfileRequest: AWSEncodableShape {
        /// The ID of the IAM instance profile association.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
        }
    }

    public struct DisassociateIamInstanceProfileResult: AWSDecodableShape {
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation
        }
    }

    public struct DisassociateInstanceEventWindowRequest: AWSEncodableShape {
        /// One or more targets to disassociate from the specified event window.
        public let associationTarget: InstanceEventWindowDisassociationRequest
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the event window.
        public let instanceEventWindowId: String

        public init(associationTarget: InstanceEventWindowDisassociationRequest, dryRun: Bool? = nil, instanceEventWindowId: String) {
            self.associationTarget = associationTarget
            self.dryRun = dryRun
            self.instanceEventWindowId = instanceEventWindowId
        }

        private enum CodingKeys: String, CodingKey {
            case associationTarget = "AssociationTarget"
            case dryRun = "DryRun"
            case instanceEventWindowId = "InstanceEventWindowId"
        }
    }

    public struct DisassociateInstanceEventWindowResult: AWSDecodableShape {
        /// Information about the event window.
        public let instanceEventWindow: InstanceEventWindow?

        public init(instanceEventWindow: InstanceEventWindow? = nil) {
            self.instanceEventWindow = instanceEventWindow
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindow
        }
    }

    public struct DisassociateRouteTableRequest: AWSEncodableShape {
        /// The association ID representing the current association between the route table and subnet or gateway.
        public let associationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(associationId: String, dryRun: Bool? = nil) {
            self.associationId = associationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case dryRun
        }
    }

    public struct DisassociateSubnetCidrBlockRequest: AWSEncodableShape {
        /// The association ID for the CIDR block.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
        }
    }

    public struct DisassociateSubnetCidrBlockResult: AWSDecodableShape {
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(ipv6CidrBlockAssociation: SubnetIpv6CidrBlockAssociation? = nil, subnetId: String? = nil) {
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlockAssociation
            case subnetId
        }
    }

    public struct DisassociateTransitGatewayMulticastDomainRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets;
        @OptionalCustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct DisassociateTransitGatewayMulticastDomainResult: AWSDecodableShape {
        /// Information about the association.
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations
        }
    }

    public struct DisassociateTransitGatewayRouteTableRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct DisassociateTransitGatewayRouteTableResult: AWSDecodableShape {
        /// Information about the association.
        public let association: TransitGatewayAssociation?

        public init(association: TransitGatewayAssociation? = nil) {
            self.association = association
        }

        private enum CodingKeys: String, CodingKey {
            case association
        }
    }

    public struct DisassociateTrunkInterfaceRequest: AWSEncodableShape {
        /// The ID ofthe association
        public let associationId: String
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(associationId: String, clientToken: String? = DisassociateTrunkInterfaceRequest.idempotencyToken(), dryRun: Bool? = nil) {
            self.associationId = associationId
            self.clientToken = clientToken
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
        }
    }

    public struct DisassociateTrunkInterfaceResult: AWSDecodableShape {
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String?
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(clientToken: String? = nil, return: Bool? = nil) {
            self.clientToken = clientToken
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case `return`
        }
    }

    public struct DisassociateVpcCidrBlockRequest: AWSEncodableShape {
        /// The association ID for the CIDR block.
        public let associationId: String

        public init(associationId: String) {
            self.associationId = associationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
        }
    }

    public struct DisassociateVpcCidrBlockResult: AWSDecodableShape {
        /// Information about the IPv4 CIDR block association.
        public let cidrBlockAssociation: VpcCidrBlockAssociation?
        /// Information about the IPv6 CIDR block association.
        public let ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlockAssociation: VpcCidrBlockAssociation? = nil, ipv6CidrBlockAssociation: VpcIpv6CidrBlockAssociation? = nil, vpcId: String? = nil) {
            self.cidrBlockAssociation = cidrBlockAssociation
            self.ipv6CidrBlockAssociation = ipv6CidrBlockAssociation
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlockAssociation
            case ipv6CidrBlockAssociation
            case vpcId
        }
    }

    public struct DiskImage: AWSEncodableShape {
        /// A description of the disk image.
        public let description: String?
        /// Information about the disk image.
        public let image: DiskImageDetail?
        /// Information about the volume.
        public let volume: VolumeDetail?

        public init(description: String? = nil, image: DiskImageDetail? = nil, volume: VolumeDetail? = nil) {
            self.description = description
            self.image = image
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case image = "Image"
            case volume = "Volume"
        }
    }

    public struct DiskImageDescription: AWSDecodableShape {
        /// The checksum computed for the disk image.
        public let checksum: String?
        /// The disk image format.
        public let format: DiskImageFormat?
        /// A presigned URL for the import manifest stored in Amazon S3. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String?
        /// The size of the disk image, in GiB.
        public let size: Int64?

        public init(checksum: String? = nil, format: DiskImageFormat? = nil, importManifestUrl: String? = nil, size: Int64? = nil) {
            self.checksum = checksum
            self.format = format
            self.importManifestUrl = importManifestUrl
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case checksum
            case format
            case importManifestUrl
            case size
        }
    }

    public struct DiskImageDetail: AWSEncodableShape {
        /// The size of the disk image, in GiB.
        public let bytes: Int64
        /// The disk image format.
        public let format: DiskImageFormat
        /// A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the "Query String Request Authentication Alternative" section of the Authenticating REST Requests topic in the Amazon Simple Storage Service Developer Guide. For information about the import manifest referenced by this API action, see VM Import Manifest.
        public let importManifestUrl: String

        public init(bytes: Int64, format: DiskImageFormat, importManifestUrl: String) {
            self.bytes = bytes
            self.format = format
            self.importManifestUrl = importManifestUrl
        }

        private enum CodingKeys: String, CodingKey {
            case bytes
            case format
            case importManifestUrl
        }
    }

    public struct DiskImageVolumeDescription: AWSDecodableShape {
        /// The volume identifier.
        public let id: String?
        /// The size of the volume, in GiB.
        public let size: Int64?

        public init(id: String? = nil, size: Int64? = nil) {
            self.id = id
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case id
            case size
        }
    }

    public struct DiskInfo: AWSDecodableShape {
        /// The number of disks with this configuration.
        public let count: Int?
        /// The size of the disk in GB.
        public let sizeInGB: Int64?
        /// The type of disk.
        public let type: DiskType?

        public init(count: Int? = nil, sizeInGB: Int64? = nil, type: DiskType? = nil) {
            self.count = count
            self.sizeInGB = sizeInGB
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case count
            case sizeInGB
            case type
        }
    }

    public struct DnsEntry: AWSDecodableShape {
        /// The DNS name.
        public let dnsName: String?
        /// The ID of the private hosted zone.
        public let hostedZoneId: String?

        public init(dnsName: String? = nil, hostedZoneId: String? = nil) {
            self.dnsName = dnsName
            self.hostedZoneId = hostedZoneId
        }

        private enum CodingKeys: String, CodingKey {
            case dnsName
            case hostedZoneId
        }
    }

    public struct DnsServersOptionsModifyStructure: AWSEncodableShape {
        public struct _CustomDnsServersEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values overwrite the existing values.
        @OptionalCustomCoding<ArrayCoder<_CustomDnsServersEncoding, String>>
        public var customDnsServers: [String]?
        /// Indicates whether DNS servers should be used. Specify False to delete the existing DNS servers.
        public let enabled: Bool?

        public init(customDnsServers: [String]? = nil, enabled: Bool? = nil) {
            self.customDnsServers = customDnsServers
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case customDnsServers = "CustomDnsServers"
            case enabled = "Enabled"
        }
    }

    public struct EbsBlockDevice: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether the EBS volume is deleted on instance termination. For more information, see Preserving Amazon EBS volumes on instance termination in the Amazon EC2 User Guide.
        public let deleteOnTermination: Bool?
        /// Indicates whether the encryption state of an EBS volume is changed while being restored from a backing snapshot. The effect of setting the encryption state to true depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see Amazon EBS encryption in the Amazon EC2 User Guide. In no case can you remove encryption from an encrypted volume. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. For more information, see Supported instance types. This parameter is not returned by .
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:    gp3: 3,000-16,000 IOPS    io1: 100-64,000 IOPS    io2: 100-64,000 IOPS   For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System. Other instance families guarantee performance up to 32,000 IOPS. This parameter is required for io1 and io2 volumes. The default for gp3 volumes is 3,000 IOPS. This parameter is not supported for gp2, st1, sc1, or standard volumes.
        public let iops: Int?
        /// Identifier (key ID, key alias, ID ARN, or alias ARN) for a customer managed CMK under which the EBS volume is encrypted. This parameter is only supported on BlockDeviceMapping objects called by RunInstances, RequestSpotFleet, and RequestSpotInstances.
        public let kmsKeyId: String?
        /// The ARN of the Outpost on which the snapshot is stored.
        public let outpostArn: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The throughput that the volume supports, in MiB/s. This parameter is valid only for gp3 volumes. Valid Range: Minimum value of 125. Maximum value of 1000.
        public let throughput: Int?
        /// The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size. The following are the supported volumes sizes for each volume type:    gp2 and gp3:1-16,384    io1 and io2: 4-16,384    st1 and sc1: 125-16,384    standard: 1-1,024
        public let volumeSize: Int?
        /// The volume type. For more information, see Amazon EBS volume types in the Amazon EC2 User Guide. If the volume type is io1 or io2, you must specify the IOPS that the volume supports.
        public let volumeType: VolumeType?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, outpostArn: String? = nil, snapshotId: String? = nil, throughput: Int? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.outpostArn = outpostArn
            self.snapshotId = snapshotId
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination
            case encrypted
            case iops
            case kmsKeyId = "KmsKeyId"
            case outpostArn
            case snapshotId
            case throughput
            case volumeSize
            case volumeType
        }
    }

    public struct EbsInfo: AWSDecodableShape {
        /// Describes the optimized EBS performance for the instance type.
        public let ebsOptimizedInfo: EbsOptimizedInfo?
        /// Indicates whether the instance type is Amazon EBS-optimized. For more information, see Amazon EBS-optimized instances in Amazon EC2 User Guide.
        public let ebsOptimizedSupport: EbsOptimizedSupport?
        /// Indicates whether Amazon EBS encryption is supported.
        public let encryptionSupport: EbsEncryptionSupport?
        /// Indicates whether non-volatile memory express (NVMe) is supported.
        public let nvmeSupport: EbsNvmeSupport?

        public init(ebsOptimizedInfo: EbsOptimizedInfo? = nil, ebsOptimizedSupport: EbsOptimizedSupport? = nil, encryptionSupport: EbsEncryptionSupport? = nil, nvmeSupport: EbsNvmeSupport? = nil) {
            self.ebsOptimizedInfo = ebsOptimizedInfo
            self.ebsOptimizedSupport = ebsOptimizedSupport
            self.encryptionSupport = encryptionSupport
            self.nvmeSupport = nvmeSupport
        }

        private enum CodingKeys: String, CodingKey {
            case ebsOptimizedInfo
            case ebsOptimizedSupport
            case encryptionSupport
            case nvmeSupport
        }
    }

    public struct EbsInstanceBlockDevice: AWSDecodableShape {
        /// The time stamp when the attachment initiated.
        public let attachTime: Date?
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The attachment state.
        public let status: AttachmentStatus?
        /// The ID of the EBS volume.
        public let volumeId: String?

        public init(attachTime: Date? = nil, deleteOnTermination: Bool? = nil, status: AttachmentStatus? = nil, volumeId: String? = nil) {
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.status = status
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case attachTime
            case deleteOnTermination
            case status
            case volumeId
        }
    }

    public struct EbsInstanceBlockDeviceSpecification: AWSEncodableShape {
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The ID of the EBS volume.
        public let volumeId: String?

        public init(deleteOnTermination: Bool? = nil, volumeId: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination
            case volumeId
        }
    }

    public struct EbsOptimizedInfo: AWSDecodableShape {
        /// The baseline bandwidth performance for an EBS-optimized instance type, in Mbps.
        public let baselineBandwidthInMbps: Int?
        /// The baseline input/output storage operations per seconds for an EBS-optimized instance type.
        public let baselineIops: Int?
        /// The baseline throughput performance for an EBS-optimized instance type, in MB/s.
        public let baselineThroughputInMBps: Double?
        /// The maximum bandwidth performance for an EBS-optimized instance type, in Mbps.
        public let maximumBandwidthInMbps: Int?
        /// The maximum input/output storage operations per second for an EBS-optimized instance type.
        public let maximumIops: Int?
        /// The maximum throughput performance for an EBS-optimized instance type, in MB/s.
        public let maximumThroughputInMBps: Double?

        public init(baselineBandwidthInMbps: Int? = nil, baselineIops: Int? = nil, baselineThroughputInMBps: Double? = nil, maximumBandwidthInMbps: Int? = nil, maximumIops: Int? = nil, maximumThroughputInMBps: Double? = nil) {
            self.baselineBandwidthInMbps = baselineBandwidthInMbps
            self.baselineIops = baselineIops
            self.baselineThroughputInMBps = baselineThroughputInMBps
            self.maximumBandwidthInMbps = maximumBandwidthInMbps
            self.maximumIops = maximumIops
            self.maximumThroughputInMBps = maximumThroughputInMBps
        }

        private enum CodingKeys: String, CodingKey {
            case baselineBandwidthInMbps
            case baselineIops
            case baselineThroughputInMBps
            case maximumBandwidthInMbps
            case maximumIops
            case maximumThroughputInMBps
        }
    }

    public struct EfaInfo: AWSDecodableShape {
        /// The maximum number of Elastic Fabric Adapters for the instance type.
        public let maximumEfaInterfaces: Int?

        public init(maximumEfaInterfaces: Int? = nil) {
            self.maximumEfaInterfaces = maximumEfaInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case maximumEfaInterfaces
        }
    }

    public struct EgressOnlyInternetGateway: AWSDecodableShape {
        public struct _AttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the attachment of the egress-only internet gateway.
        @OptionalCustomCoding<ArrayCoder<_AttachmentsEncoding, InternetGatewayAttachment>>
        public var attachments: [InternetGatewayAttachment]?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The tags assigned to the egress-only internet gateway.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(attachments: [InternetGatewayAttachment]? = nil, egressOnlyInternetGatewayId: String? = nil, tags: [Tag]? = nil) {
            self.attachments = attachments
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case egressOnlyInternetGatewayId
            case tags = "tagSet"
        }
    }

    public struct ElasticGpuAssociation: AWSDecodableShape {
        /// The ID of the association.
        public let elasticGpuAssociationId: String?
        /// The state of the association between the instance and the Elastic Graphics accelerator.
        public let elasticGpuAssociationState: String?
        /// The time the Elastic Graphics accelerator was associated with the instance.
        public let elasticGpuAssociationTime: String?
        /// The ID of the Elastic Graphics accelerator.
        public let elasticGpuId: String?

        public init(elasticGpuAssociationId: String? = nil, elasticGpuAssociationState: String? = nil, elasticGpuAssociationTime: String? = nil, elasticGpuId: String? = nil) {
            self.elasticGpuAssociationId = elasticGpuAssociationId
            self.elasticGpuAssociationState = elasticGpuAssociationState
            self.elasticGpuAssociationTime = elasticGpuAssociationTime
            self.elasticGpuId = elasticGpuId
        }

        private enum CodingKeys: String, CodingKey {
            case elasticGpuAssociationId
            case elasticGpuAssociationState
            case elasticGpuAssociationTime
            case elasticGpuId
        }
    }

    public struct ElasticGpuHealth: AWSDecodableShape {
        /// The health status.
        public let status: ElasticGpuStatus?

        public init(status: ElasticGpuStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status
        }
    }

    public struct ElasticGpuSpecification: AWSEncodableShape {
        /// The type of Elastic Graphics accelerator. For more information about the values to specify for Type, see Elastic Graphics Basics, specifically the Elastic Graphics accelerator column, in the Amazon Elastic Compute Cloud User Guide for Windows Instances.
        public let type: String

        public init(type: String) {
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case type = "Type"
        }
    }

    public struct ElasticGpuSpecificationResponse: AWSDecodableShape {
        /// The elastic GPU type.
        public let type: String?

        public init(type: String? = nil) {
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case type
        }
    }

    public struct ElasticGpus: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in the which the Elastic Graphics accelerator resides.
        public let availabilityZone: String?
        /// The status of the Elastic Graphics accelerator.
        public let elasticGpuHealth: ElasticGpuHealth?
        /// The ID of the Elastic Graphics accelerator.
        public let elasticGpuId: String?
        /// The state of the Elastic Graphics accelerator.
        public let elasticGpuState: ElasticGpuState?
        /// The type of Elastic Graphics accelerator.
        public let elasticGpuType: String?
        /// The ID of the instance to which the Elastic Graphics accelerator is attached.
        public let instanceId: String?
        /// The tags assigned to the Elastic Graphics accelerator.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(availabilityZone: String? = nil, elasticGpuHealth: ElasticGpuHealth? = nil, elasticGpuId: String? = nil, elasticGpuState: ElasticGpuState? = nil, elasticGpuType: String? = nil, instanceId: String? = nil, tags: [Tag]? = nil) {
            self.availabilityZone = availabilityZone
            self.elasticGpuHealth = elasticGpuHealth
            self.elasticGpuId = elasticGpuId
            self.elasticGpuState = elasticGpuState
            self.elasticGpuType = elasticGpuType
            self.instanceId = instanceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case elasticGpuHealth
            case elasticGpuId
            case elasticGpuState
            case elasticGpuType
            case instanceId
            case tags = "tagSet"
        }
    }

    public struct ElasticInferenceAccelerator: AWSEncodableShape {
        ///  The number of elastic inference accelerators to attach to the instance.  Default: 1
        public let count: Int?
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, eia1.xlarge, eia2.medium, eia2.large, and eia2.xlarge.
        public let type: String

        public init(count: Int? = nil, type: String) {
            self.count = count
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.count, name: "count", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
            case type = "Type"
        }
    }

    public struct ElasticInferenceAcceleratorAssociation: AWSDecodableShape {
        ///  The Amazon Resource Name (ARN) of the elastic inference accelerator.
        public let elasticInferenceAcceleratorArn: String?
        ///  The ID of the association.
        public let elasticInferenceAcceleratorAssociationId: String?
        ///  The state of the elastic inference accelerator.
        public let elasticInferenceAcceleratorAssociationState: String?
        ///  The time at which the elastic inference accelerator is associated with an instance.
        public let elasticInferenceAcceleratorAssociationTime: Date?

        public init(elasticInferenceAcceleratorArn: String? = nil, elasticInferenceAcceleratorAssociationId: String? = nil, elasticInferenceAcceleratorAssociationState: String? = nil, elasticInferenceAcceleratorAssociationTime: Date? = nil) {
            self.elasticInferenceAcceleratorArn = elasticInferenceAcceleratorArn
            self.elasticInferenceAcceleratorAssociationId = elasticInferenceAcceleratorAssociationId
            self.elasticInferenceAcceleratorAssociationState = elasticInferenceAcceleratorAssociationState
            self.elasticInferenceAcceleratorAssociationTime = elasticInferenceAcceleratorAssociationTime
        }

        private enum CodingKeys: String, CodingKey {
            case elasticInferenceAcceleratorArn
            case elasticInferenceAcceleratorAssociationId
            case elasticInferenceAcceleratorAssociationState
            case elasticInferenceAcceleratorAssociationTime
        }
    }

    public struct EnableEbsEncryptionByDefaultRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct EnableEbsEncryptionByDefaultResult: AWSDecodableShape {
        /// The updated status of encryption by default.
        public let ebsEncryptionByDefault: Bool?

        public init(ebsEncryptionByDefault: Bool? = nil) {
            self.ebsEncryptionByDefault = ebsEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case ebsEncryptionByDefault
        }
    }

    public struct EnableFastSnapshotRestoreErrorItem: AWSDecodableShape {
        public struct _FastSnapshotRestoreStateErrorsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The errors.
        @OptionalCustomCoding<ArrayCoder<_FastSnapshotRestoreStateErrorsEncoding, EnableFastSnapshotRestoreStateErrorItem>>
        public var fastSnapshotRestoreStateErrors: [EnableFastSnapshotRestoreStateErrorItem]?
        /// The ID of the snapshot.
        public let snapshotId: String?

        public init(fastSnapshotRestoreStateErrors: [EnableFastSnapshotRestoreStateErrorItem]? = nil, snapshotId: String? = nil) {
            self.fastSnapshotRestoreStateErrors = fastSnapshotRestoreStateErrors
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case fastSnapshotRestoreStateErrors = "fastSnapshotRestoreStateErrorSet"
            case snapshotId
        }
    }

    public struct EnableFastSnapshotRestoreStateError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct EnableFastSnapshotRestoreStateErrorItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The error.
        public let error: EnableFastSnapshotRestoreStateError?

        public init(availabilityZone: String? = nil, error: EnableFastSnapshotRestoreStateError? = nil) {
            self.availabilityZone = availabilityZone
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case error
        }
    }

    public struct EnableFastSnapshotRestoreSuccessItem: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The time at which fast snapshot restores entered the disabled state.
        public let disabledTime: Date?
        /// The time at which fast snapshot restores entered the disabling state.
        public let disablingTime: Date?
        /// The time at which fast snapshot restores entered the enabled state.
        public let enabledTime: Date?
        /// The time at which fast snapshot restores entered the enabling state.
        public let enablingTime: Date?
        /// The time at which fast snapshot restores entered the optimizing state.
        public let optimizingTime: Date?
        /// The AWS owner alias that enabled fast snapshot restores on the snapshot. This is intended for future use.
        public let ownerAlias: String?
        /// The ID of the AWS account that enabled fast snapshot restores on the snapshot.
        public let ownerId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The state of fast snapshot restores.
        public let state: FastSnapshotRestoreStateCode?
        /// The reason for the state transition. The possible values are as follows:    Client.UserInitiated - The state successfully transitioned to enabling or disabling.    Client.UserInitiated - Lifecycle state transition - The state successfully transitioned to optimizing, enabled, or disabled.
        public let stateTransitionReason: String?

        public init(availabilityZone: String? = nil, disabledTime: Date? = nil, disablingTime: Date? = nil, enabledTime: Date? = nil, enablingTime: Date? = nil, optimizingTime: Date? = nil, ownerAlias: String? = nil, ownerId: String? = nil, snapshotId: String? = nil, state: FastSnapshotRestoreStateCode? = nil, stateTransitionReason: String? = nil) {
            self.availabilityZone = availabilityZone
            self.disabledTime = disabledTime
            self.disablingTime = disablingTime
            self.enabledTime = enabledTime
            self.enablingTime = enablingTime
            self.optimizingTime = optimizingTime
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.snapshotId = snapshotId
            self.state = state
            self.stateTransitionReason = stateTransitionReason
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case disabledTime
            case disablingTime
            case enabledTime
            case enablingTime
            case optimizingTime
            case ownerAlias
            case ownerId
            case snapshotId
            case state
            case stateTransitionReason
        }
    }

    public struct EnableFastSnapshotRestoresRequest: AWSEncodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "AvailabilityZone" }
        public struct _SourceSnapshotIdsEncoding: ArrayCoderProperties { public static let member = "SnapshotId" }

        /// One or more Availability Zones. For example, us-east-2a.
        @CustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more snapshots. For example, snap-1234567890abcdef0. You can specify a snapshot that was shared with you from another AWS account.
        @CustomCoding<ArrayCoder<_SourceSnapshotIdsEncoding, String>>
        public var sourceSnapshotIds: [String]

        public init(availabilityZones: [String], dryRun: Bool? = nil, sourceSnapshotIds: [String]) {
            self.availabilityZones = availabilityZones
            self.dryRun = dryRun
            self.sourceSnapshotIds = sourceSnapshotIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZone"
            case dryRun = "DryRun"
            case sourceSnapshotIds = "SourceSnapshotId"
        }
    }

    public struct EnableFastSnapshotRestoresResult: AWSDecodableShape {
        public struct _SuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the snapshots for which fast snapshot restores were successfully enabled.
        @OptionalCustomCoding<ArrayCoder<_SuccessfulEncoding, EnableFastSnapshotRestoreSuccessItem>>
        public var successful: [EnableFastSnapshotRestoreSuccessItem]?
        /// Information about the snapshots for which fast snapshot restores could not be enabled.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, EnableFastSnapshotRestoreErrorItem>>
        public var unsuccessful: [EnableFastSnapshotRestoreErrorItem]?

        public init(successful: [EnableFastSnapshotRestoreSuccessItem]? = nil, unsuccessful: [EnableFastSnapshotRestoreErrorItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful
            case unsuccessful
        }
    }

    public struct EnableImageDeprecationRequest: AWSEncodableShape {
        /// The date and time to deprecate the AMI, in UTC, in the following format: YYYY-MM-DDTHH:MM:SSZ. If you specify a value for seconds, Amazon EC2 rounds the seconds to the nearest minute. You can’t specify a date in the past. The upper limit for DeprecateAt is 10 years from now.
        public let deprecateAt: Date
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String

        public init(deprecateAt: Date, dryRun: Bool? = nil, imageId: String) {
            self.deprecateAt = deprecateAt
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case deprecateAt = "DeprecateAt"
            case dryRun = "DryRun"
            case imageId = "ImageId"
        }
    }

    public struct EnableImageDeprecationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct EnableSerialConsoleAccessRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct EnableSerialConsoleAccessResult: AWSDecodableShape {
        /// If true, access to the EC2 serial console of all instances is enabled for your account. If false, access to the EC2 serial console of all instances is disabled for your account.
        public let serialConsoleAccessEnabled: Bool?

        public init(serialConsoleAccessEnabled: Bool? = nil) {
            self.serialConsoleAccessEnabled = serialConsoleAccessEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case serialConsoleAccessEnabled
        }
    }

    public struct EnableTransitGatewayRouteTablePropagationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct EnableTransitGatewayRouteTablePropagationResult: AWSDecodableShape {
        /// Information about route propagation.
        public let propagation: TransitGatewayPropagation?

        public init(propagation: TransitGatewayPropagation? = nil) {
            self.propagation = propagation
        }

        private enum CodingKeys: String, CodingKey {
            case propagation
        }
    }

    public struct EnableVgwRoutePropagationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with.
        public let gatewayId: String
        /// The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
        public let routeTableId: String

        public init(dryRun: Bool? = nil, gatewayId: String, routeTableId: String) {
            self.dryRun = dryRun
            self.gatewayId = gatewayId
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case gatewayId = "GatewayId"
            case routeTableId = "RouteTableId"
        }
    }

    public struct EnableVolumeIORequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String

        public init(dryRun: Bool? = nil, volumeId: String) {
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case volumeId
        }
    }

    public struct EnableVpcClassicLinkDnsSupportRequest: AWSEncodableShape {
        /// The ID of the VPC.
        public let vpcId: String?

        public init(vpcId: String? = nil) {
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
        }
    }

    public struct EnableVpcClassicLinkDnsSupportResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct EnableVpcClassicLinkRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, vpcId: String) {
            self.dryRun = dryRun
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpcId
        }
    }

    public struct EnableVpcClassicLinkResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct EnclaveOptions: AWSDecodableShape {
        /// If this parameter is set to true, the instance is enabled for Amazon Web Services Nitro Enclaves; otherwise, it is not enabled for Amazon Web Services Nitro Enclaves.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled
        }
    }

    public struct EnclaveOptionsRequest: AWSEncodableShape {
        /// To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to true.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct EventInformation: AWSDecodableShape {
        /// The description of the event.
        public let eventDescription: String?
        /// The event. The following are the error events:    iamFleetRoleInvalid - The EC2 Fleet or Spot Fleet did not have the required permissions either to launch or terminate an instance.    spotFleetRequestConfigurationInvalid - The configuration is not valid. For more information, see the description of the event.    spotInstanceCountLimitExceeded - You've reached the limit on the number of Spot Instances that you can launch.   The following are the fleetRequestChange events:    active - The EC2 Fleet or Spot Fleet request has been validated and Amazon EC2 is attempting to maintain the target number of running Spot Instances.    cancelled - The EC2 Fleet or Spot Fleet request is canceled and has no running Spot Instances. The EC2 Fleet or Spot Fleet will be deleted two days after its instances were terminated.    cancelled_running - The EC2 Fleet or Spot Fleet request is canceled and does not launch additional Spot Instances. Existing Spot Instances continue to run until they are interrupted or terminated.    cancelled_terminating - The EC2 Fleet or Spot Fleet request is canceled and its Spot Instances are terminating.    expired - The EC2 Fleet or Spot Fleet request has expired. A subsequent event indicates that the instances were terminated, if the request was created with TerminateInstancesWithExpiration set.    modify_in_progress - A request to modify the EC2 Fleet or Spot Fleet request was accepted and is in progress.    modify_successful - The EC2 Fleet or Spot Fleet request was modified.    price_update - The price for a launch configuration was adjusted because it was too high. This change is permanent.    submitted - The EC2 Fleet or Spot Fleet request is being evaluated and Amazon EC2 is preparing to launch the target number of Spot Instances.   The following are the instanceChange events:    launched - A request was fulfilled and a new instance was launched.    terminated - An instance was terminated by the user.   The following are the Information events:    launchSpecTemporarilyBlacklisted - The configuration is not valid and several attempts to launch instances have failed. For more information, see the description of the event.    launchSpecUnusable - The price in a launch specification is not valid because it is below the Spot price or the Spot price is above the On-Demand price.    fleetProgressHalted - The price in every launch specification is not valid. A launch specification might become valid if the Spot price changes.
        public let eventSubType: String?
        /// The ID of the instance. This information is available only for instanceChange events.
        public let instanceId: String?

        public init(eventDescription: String? = nil, eventSubType: String? = nil, instanceId: String? = nil) {
            self.eventDescription = eventDescription
            self.eventSubType = eventSubType
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case eventDescription
            case eventSubType
            case instanceId
        }
    }

    public struct Explanation: AWSDecodableShape {
        public struct _AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _CidrsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LoadBalancerTargetGroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PortRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProtocolsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network ACL.
        public let acl: AnalysisComponent?
        /// The network ACL rule.
        public let aclRule: AnalysisAclRule?
        /// The IPv4 address, in CIDR notation.
        public let address: String?
        /// The IPv4 addresses, in CIDR notation.
        @OptionalCustomCoding<ArrayCoder<_AddressesEncoding, String>>
        public var addresses: [String]?
        /// The resource to which the component is attached.
        public let attachedTo: AnalysisComponent?
        /// The Availability Zones.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The CIDR ranges.
        @OptionalCustomCoding<ArrayCoder<_CidrsEncoding, String>>
        public var cidrs: [String]?
        /// The listener for a Classic Load Balancer.
        public let classicLoadBalancerListener: AnalysisLoadBalancerListener?
        /// The component.
        public let component: AnalysisComponent?
        /// The customer gateway.
        public let customerGateway: AnalysisComponent?
        /// The destination.
        public let destination: AnalysisComponent?
        /// The destination VPC.
        public let destinationVpc: AnalysisComponent?
        /// The direction. The following are possible values:   egress   ingress
        public let direction: String?
        /// The load balancer listener.
        public let elasticLoadBalancerListener: AnalysisComponent?
        /// The explanation code.
        public let explanationCode: String?
        /// The route table.
        public let ingressRouteTable: AnalysisComponent?
        /// The internet gateway.
        public let internetGateway: AnalysisComponent?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let loadBalancerArn: String?
        /// The listener port of the load balancer.
        public let loadBalancerListenerPort: Int?
        /// The target.
        public let loadBalancerTarget: AnalysisLoadBalancerTarget?
        /// The target group.
        public let loadBalancerTargetGroup: AnalysisComponent?
        /// The target groups.
        @OptionalCustomCoding<ArrayCoder<_LoadBalancerTargetGroupsEncoding, AnalysisComponent>>
        public var loadBalancerTargetGroups: [AnalysisComponent]?
        /// The target port.
        public let loadBalancerTargetPort: Int?
        /// The missing component.
        public let missingComponent: String?
        /// The NAT gateway.
        public let natGateway: AnalysisComponent?
        /// The network interface.
        public let networkInterface: AnalysisComponent?
        /// The packet field.
        public let packetField: String?
        /// The port.
        public let port: Int?
        /// The port ranges.
        @OptionalCustomCoding<ArrayCoder<_PortRangesEncoding, PortRange>>
        public var portRanges: [PortRange]?
        /// The prefix list.
        public let prefixList: AnalysisComponent?
        /// The protocols.
        @OptionalCustomCoding<ArrayCoder<_ProtocolsEncoding, String>>
        public var protocols: [String]?
        /// The route table.
        public let routeTable: AnalysisComponent?
        /// The route table route.
        public let routeTableRoute: AnalysisRouteTableRoute?
        /// The security group.
        public let securityGroup: AnalysisComponent?
        /// The security group rule.
        public let securityGroupRule: AnalysisSecurityGroupRule?
        /// The security groups.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, AnalysisComponent>>
        public var securityGroups: [AnalysisComponent]?
        /// The source VPC.
        public let sourceVpc: AnalysisComponent?
        /// The state.
        public let state: String?
        /// The subnet.
        public let subnet: AnalysisComponent?
        /// The route table for the subnet.
        public let subnetRouteTable: AnalysisComponent?
        /// The component VPC.
        public let vpc: AnalysisComponent?
        /// The VPC endpoint.
        public let vpcEndpoint: AnalysisComponent?
        /// The VPC peering connection.
        public let vpcPeeringConnection: AnalysisComponent?
        /// The VPN connection.
        public let vpnConnection: AnalysisComponent?
        /// The VPN gateway.
        public let vpnGateway: AnalysisComponent?

        public init(acl: AnalysisComponent? = nil, aclRule: AnalysisAclRule? = nil, address: String? = nil, addresses: [String]? = nil, attachedTo: AnalysisComponent? = nil, availabilityZones: [String]? = nil, cidrs: [String]? = nil, classicLoadBalancerListener: AnalysisLoadBalancerListener? = nil, component: AnalysisComponent? = nil, customerGateway: AnalysisComponent? = nil, destination: AnalysisComponent? = nil, destinationVpc: AnalysisComponent? = nil, direction: String? = nil, elasticLoadBalancerListener: AnalysisComponent? = nil, explanationCode: String? = nil, ingressRouteTable: AnalysisComponent? = nil, internetGateway: AnalysisComponent? = nil, loadBalancerArn: String? = nil, loadBalancerListenerPort: Int? = nil, loadBalancerTarget: AnalysisLoadBalancerTarget? = nil, loadBalancerTargetGroup: AnalysisComponent? = nil, loadBalancerTargetGroups: [AnalysisComponent]? = nil, loadBalancerTargetPort: Int? = nil, missingComponent: String? = nil, natGateway: AnalysisComponent? = nil, networkInterface: AnalysisComponent? = nil, packetField: String? = nil, port: Int? = nil, portRanges: [PortRange]? = nil, prefixList: AnalysisComponent? = nil, protocols: [String]? = nil, routeTable: AnalysisComponent? = nil, routeTableRoute: AnalysisRouteTableRoute? = nil, securityGroup: AnalysisComponent? = nil, securityGroupRule: AnalysisSecurityGroupRule? = nil, securityGroups: [AnalysisComponent]? = nil, sourceVpc: AnalysisComponent? = nil, state: String? = nil, subnet: AnalysisComponent? = nil, subnetRouteTable: AnalysisComponent? = nil, vpc: AnalysisComponent? = nil, vpcEndpoint: AnalysisComponent? = nil, vpcPeeringConnection: AnalysisComponent? = nil, vpnConnection: AnalysisComponent? = nil, vpnGateway: AnalysisComponent? = nil) {
            self.acl = acl
            self.aclRule = aclRule
            self.address = address
            self.addresses = addresses
            self.attachedTo = attachedTo
            self.availabilityZones = availabilityZones
            self.cidrs = cidrs
            self.classicLoadBalancerListener = classicLoadBalancerListener
            self.component = component
            self.customerGateway = customerGateway
            self.destination = destination
            self.destinationVpc = destinationVpc
            self.direction = direction
            self.elasticLoadBalancerListener = elasticLoadBalancerListener
            self.explanationCode = explanationCode
            self.ingressRouteTable = ingressRouteTable
            self.internetGateway = internetGateway
            self.loadBalancerArn = loadBalancerArn
            self.loadBalancerListenerPort = loadBalancerListenerPort
            self.loadBalancerTarget = loadBalancerTarget
            self.loadBalancerTargetGroup = loadBalancerTargetGroup
            self.loadBalancerTargetGroups = loadBalancerTargetGroups
            self.loadBalancerTargetPort = loadBalancerTargetPort
            self.missingComponent = missingComponent
            self.natGateway = natGateway
            self.networkInterface = networkInterface
            self.packetField = packetField
            self.port = port
            self.portRanges = portRanges
            self.prefixList = prefixList
            self.protocols = protocols
            self.routeTable = routeTable
            self.routeTableRoute = routeTableRoute
            self.securityGroup = securityGroup
            self.securityGroupRule = securityGroupRule
            self.securityGroups = securityGroups
            self.sourceVpc = sourceVpc
            self.state = state
            self.subnet = subnet
            self.subnetRouteTable = subnetRouteTable
            self.vpc = vpc
            self.vpcEndpoint = vpcEndpoint
            self.vpcPeeringConnection = vpcPeeringConnection
            self.vpnConnection = vpnConnection
            self.vpnGateway = vpnGateway
        }

        private enum CodingKeys: String, CodingKey {
            case acl
            case aclRule
            case address
            case addresses = "addressSet"
            case attachedTo
            case availabilityZones = "availabilityZoneSet"
            case cidrs = "cidrSet"
            case classicLoadBalancerListener
            case component
            case customerGateway
            case destination
            case destinationVpc
            case direction
            case elasticLoadBalancerListener
            case explanationCode
            case ingressRouteTable
            case internetGateway
            case loadBalancerArn
            case loadBalancerListenerPort
            case loadBalancerTarget
            case loadBalancerTargetGroup
            case loadBalancerTargetGroups = "loadBalancerTargetGroupSet"
            case loadBalancerTargetPort
            case missingComponent
            case natGateway
            case networkInterface
            case packetField
            case port
            case portRanges = "portRangeSet"
            case prefixList
            case protocols = "protocolSet"
            case routeTable
            case routeTableRoute
            case securityGroup
            case securityGroupRule
            case securityGroups = "securityGroupSet"
            case sourceVpc
            case state
            case subnet
            case subnetRouteTable
            case vpc
            case vpcEndpoint
            case vpcPeeringConnection
            case vpnConnection
            case vpnGateway
        }
    }

    public struct ExportClientVpnClientCertificateRevocationListRequest: AWSEncodableShape {
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ExportClientVpnClientCertificateRevocationListResult: AWSDecodableShape {
        /// Information about the client certificate revocation list.
        public let certificateRevocationList: String?
        /// The current state of the client certificate revocation list.
        public let status: ClientCertificateRevocationListStatus?

        public init(certificateRevocationList: String? = nil, status: ClientCertificateRevocationListStatus? = nil) {
            self.certificateRevocationList = certificateRevocationList
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case certificateRevocationList
            case status
        }
    }

    public struct ExportClientVpnClientConfigurationRequest: AWSEncodableShape {
        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ExportClientVpnClientConfigurationResult: AWSDecodableShape {
        /// The contents of the Client VPN endpoint configuration file.
        public let clientConfiguration: String?

        public init(clientConfiguration: String? = nil) {
            self.clientConfiguration = clientConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case clientConfiguration
        }
    }

    public struct ExportImageRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Token to enable idempotency for export image requests.
        public let clientToken: String?
        /// A description of the image being exported. The maximum length is 255 characters.
        public let description: String?
        /// The disk image format.
        public let diskImageFormat: DiskImageFormat
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the image.
        public let imageId: String
        /// The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket. If this parameter is not specified, the default role is named 'vmimport'.
        public let roleName: String?
        /// Information about the destination Amazon S3 bucket. The bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3ExportLocation: ExportTaskS3LocationRequest
        /// The tags to apply to the export image task during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = ExportImageRequest.idempotencyToken(), description: String? = nil, diskImageFormat: DiskImageFormat, dryRun: Bool? = nil, imageId: String, roleName: String? = nil, s3ExportLocation: ExportTaskS3LocationRequest, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.description = description
            self.diskImageFormat = diskImageFormat
            self.dryRun = dryRun
            self.imageId = imageId
            self.roleName = roleName
            self.s3ExportLocation = s3ExportLocation
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case description = "Description"
            case diskImageFormat = "DiskImageFormat"
            case dryRun = "DryRun"
            case imageId = "ImageId"
            case roleName = "RoleName"
            case s3ExportLocation = "S3ExportLocation"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ExportImageResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the image being exported.
        public let description: String?
        /// The disk image format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The ID of the export image task.
        public let exportImageTaskId: String?
        /// The ID of the image.
        public let imageId: String?
        /// The percent complete of the export image task.
        public let progress: String?
        /// The name of the role that grants VM Import/Export permission to export images to your Amazon S3 bucket.
        public let roleName: String?
        /// Information about the destination Amazon S3 bucket.
        public let s3ExportLocation: ExportTaskS3Location?
        /// The status of the export image task. The possible values are active, completed, deleting, and deleted.
        public let status: String?
        /// The status message for the export image task.
        public let statusMessage: String?
        /// Any tags assigned to the export image task.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, diskImageFormat: DiskImageFormat? = nil, exportImageTaskId: String? = nil, imageId: String? = nil, progress: String? = nil, roleName: String? = nil, s3ExportLocation: ExportTaskS3Location? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.diskImageFormat = diskImageFormat
            self.exportImageTaskId = exportImageTaskId
            self.imageId = imageId
            self.progress = progress
            self.roleName = roleName
            self.s3ExportLocation = s3ExportLocation
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case diskImageFormat
            case exportImageTaskId
            case imageId
            case progress
            case roleName
            case s3ExportLocation
            case status
            case statusMessage
            case tags = "tagSet"
        }
    }

    public struct ExportImageTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the image being exported.
        public let description: String?
        /// The ID of the export image task.
        public let exportImageTaskId: String?
        /// The ID of the image.
        public let imageId: String?
        /// The percent complete of the export image task.
        public let progress: String?
        /// Information about the destination Amazon S3 bucket.
        public let s3ExportLocation: ExportTaskS3Location?
        /// The status of the export image task. The possible values are active, completed, deleting, and deleted.
        public let status: String?
        /// The status message for the export image task.
        public let statusMessage: String?
        /// Any tags assigned to the export image task.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, exportImageTaskId: String? = nil, imageId: String? = nil, progress: String? = nil, s3ExportLocation: ExportTaskS3Location? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.exportImageTaskId = exportImageTaskId
            self.imageId = imageId
            self.progress = progress
            self.s3ExportLocation = s3ExportLocation
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case exportImageTaskId
            case imageId
            case progress
            case s3ExportLocation
            case status
            case statusMessage
            case tags = "tagSet"
        }
    }

    public struct ExportTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the resource being exported.
        public let description: String?
        /// The ID of the export task.
        public let exportTaskId: String?
        /// Information about the export task.
        public let exportToS3Task: ExportToS3Task?
        /// Information about the instance to export.
        public let instanceExportDetails: InstanceExportDetails?
        /// The state of the export task.
        public let state: ExportTaskState?
        /// The status message related to the export task.
        public let statusMessage: String?
        /// The tags for the export task.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, exportTaskId: String? = nil, exportToS3Task: ExportToS3Task? = nil, instanceExportDetails: InstanceExportDetails? = nil, state: ExportTaskState? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.exportTaskId = exportTaskId
            self.exportToS3Task = exportToS3Task
            self.instanceExportDetails = instanceExportDetails
            self.state = state
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case exportTaskId
            case exportToS3Task = "exportToS3"
            case instanceExportDetails = "instanceExport"
            case state
            case statusMessage
            case tags = "tagSet"
        }
    }

    public struct ExportTaskS3Location: AWSDecodableShape {
        /// The destination Amazon S3 bucket.
        public let s3Bucket: String?
        /// The prefix (logical hierarchy) in the bucket.
        public let s3Prefix: String?

        public init(s3Bucket: String? = nil, s3Prefix: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket
            case s3Prefix
        }
    }

    public struct ExportTaskS3LocationRequest: AWSEncodableShape {
        /// The destination Amazon S3 bucket.
        public let s3Bucket: String
        /// The prefix (logical hierarchy) in the bucket.
        public let s3Prefix: String?

        public init(s3Bucket: String, s3Prefix: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Prefix = "S3Prefix"
        }
    }

    public struct ExportToS3Task: AWSDecodableShape {
        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The Amazon S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3Bucket: String?
        /// The encryption key for your S3 bucket.
        public let s3Key: String?

        public init(containerFormat: ContainerFormat? = nil, diskImageFormat: DiskImageFormat? = nil, s3Bucket: String? = nil, s3Key: String? = nil) {
            self.containerFormat = containerFormat
            self.diskImageFormat = diskImageFormat
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case containerFormat
            case diskImageFormat
            case s3Bucket
            case s3Key
        }
    }

    public struct ExportToS3TaskSpecification: AWSEncodableShape {
        /// The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
        public let containerFormat: ContainerFormat?
        /// The format for the exported image.
        public let diskImageFormat: DiskImageFormat?
        /// The Amazon S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account vm-import-export@amazon.com.
        public let s3Bucket: String?
        /// The image is written to a single object in the Amazon S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
        public let s3Prefix: String?

        public init(containerFormat: ContainerFormat? = nil, diskImageFormat: DiskImageFormat? = nil, s3Bucket: String? = nil, s3Prefix: String? = nil) {
            self.containerFormat = containerFormat
            self.diskImageFormat = diskImageFormat
            self.s3Bucket = s3Bucket
            self.s3Prefix = s3Prefix
        }

        private enum CodingKeys: String, CodingKey {
            case containerFormat
            case diskImageFormat
            case s3Bucket
            case s3Prefix
        }
    }

    public struct ExportTransitGatewayRoutesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    attachment.transit-gateway-attachment-id - The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route (active | blackhole).    transit-gateway-route-destination-cidr-block - The CIDR range.    type - The type of route (propagated | static).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The name of the S3 bucket.
        public let s3Bucket: String
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, s3Bucket: String, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.s3Bucket = s3Bucket
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case s3Bucket = "S3Bucket"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct ExportTransitGatewayRoutesResult: AWSDecodableShape {
        /// The URL of the exported file in Amazon S3. For example, s3://bucket_name/VPCTransitGateway/TransitGatewayRouteTables/file_name.
        public let s3Location: String?

        public init(s3Location: String? = nil) {
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location
        }
    }

    public struct FailedQueuedPurchaseDeletion: AWSDecodableShape {
        /// The error.
        public let error: DeleteQueuedReservedInstancesError?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(error: DeleteQueuedReservedInstancesError? = nil, reservedInstancesId: String? = nil) {
            self.error = error
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case error
            case reservedInstancesId
        }
    }

    public struct FederatedAuthentication: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
        public let samlProviderArn: String?
        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.
        public let selfServiceSamlProviderArn: String?

        public init(samlProviderArn: String? = nil, selfServiceSamlProviderArn: String? = nil) {
            self.samlProviderArn = samlProviderArn
            self.selfServiceSamlProviderArn = selfServiceSamlProviderArn
        }

        private enum CodingKeys: String, CodingKey {
            case samlProviderArn
            case selfServiceSamlProviderArn
        }
    }

    public struct FederatedAuthenticationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider.
        public let sAMLProviderArn: String?
        /// The Amazon Resource Name (ARN) of the IAM SAML identity provider for the self-service portal.
        public let selfServiceSAMLProviderArn: String?

        public init(sAMLProviderArn: String? = nil, selfServiceSAMLProviderArn: String? = nil) {
            self.sAMLProviderArn = sAMLProviderArn
            self.selfServiceSAMLProviderArn = selfServiceSAMLProviderArn
        }

        private enum CodingKeys: String, CodingKey {
            case sAMLProviderArn = "SAMLProviderArn"
            case selfServiceSAMLProviderArn = "SelfServiceSAMLProviderArn"
        }
    }

    public struct Filter: AWSEncodableShape {
        public struct _ValuesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The name of the filter. Filter names are case-sensitive.
        public let name: String?
        /// The filter values. Filter values are case-sensitive.
        @OptionalCustomCoding<ArrayCoder<_ValuesEncoding, String>>
        public var values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Value"
        }
    }

    public struct FleetData: AWSDecodableShape {
        public struct _ErrorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The progress of the EC2 Fleet. If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the EC2 Fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the EC2 Fleet is decreased, the status is pending_termination while instances are terminating.
        public let activityStatus: FleetActivityStatus?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
        public let clientToken: String?
        /// Reserved.
        public let context: String?
        /// The creation date and time of the EC2 Fleet.
        public let createTime: Date?
        /// Information about the instances that could not be launched by the fleet. Valid only when Type is set to instant.
        @OptionalCustomCoding<ArrayCoder<_ErrorsEncoding, DescribeFleetError>>
        public var errors: [DescribeFleetError]?
        /// Indicates whether running instances should be terminated if the target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The ID of the EC2 Fleet.
        public let fleetId: String?
        /// The state of the EC2 Fleet.
        public let fleetState: FleetStateCode?
        /// The number of units fulfilled by this request compared to the set target capacity.
        public let fulfilledCapacity: Double?
        /// The number of units fulfilled by this request compared to the set target On-Demand capacity.
        public let fulfilledOnDemandCapacity: Double?
        /// Information about the instances that were launched by the fleet. Valid only when Type is set to instant.
        @OptionalCustomCoding<ArrayCoder<_InstancesEncoding, DescribeFleetsInstances>>
        public var instances: [DescribeFleetsInstances]?
        /// The launch template and overrides.
        @OptionalCustomCoding<ArrayCoder<_LaunchTemplateConfigsEncoding, FleetLaunchTemplateConfig>>
        public var launchTemplateConfigs: [FleetLaunchTemplateConfig]?
        /// The allocation strategy of On-Demand Instances in an EC2 Fleet.
        public let onDemandOptions: OnDemandOptions?
        /// Indicates whether EC2 Fleet should replace unhealthy Spot Instances. Supported only for fleets of type maintain. For more information, see EC2 Fleet health checks in the Amazon EC2 User Guide.
        public let replaceUnhealthyInstances: Bool?
        /// The configuration of Spot Instances in an EC2 Fleet.
        public let spotOptions: SpotOptions?
        /// The tags for an EC2 Fleet resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The number of units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let targetCapacitySpecification: TargetCapacitySpecification?
        /// Indicates whether running instances should be terminated when the EC2 Fleet expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The type of request. Indicates whether the EC2 Fleet only requests the target capacity, or also attempts to maintain it. If you request a certain target capacity, EC2 Fleet only places the required requests; it does not attempt to replenish instances if capacity is diminished, and it does not submit requests in alternative capacity pools if capacity is unavailable. To maintain a certain target capacity, EC2 Fleet places the required requests to meet this target capacity. It also automatically replenishes any interrupted Spot Instances. Default: maintain.
        public let type: FleetType?
        /// The start date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        public let validFrom: Date?
        /// The end date and time of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new instance requests are placed or able to fulfill the request. The default end date is 7 days from the current date.
        public let validUntil: Date?

        public init(activityStatus: FleetActivityStatus? = nil, clientToken: String? = nil, context: String? = nil, createTime: Date? = nil, errors: [DescribeFleetError]? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, fleetId: String? = nil, fleetState: FleetStateCode? = nil, fulfilledCapacity: Double? = nil, fulfilledOnDemandCapacity: Double? = nil, instances: [DescribeFleetsInstances]? = nil, launchTemplateConfigs: [FleetLaunchTemplateConfig]? = nil, onDemandOptions: OnDemandOptions? = nil, replaceUnhealthyInstances: Bool? = nil, spotOptions: SpotOptions? = nil, tags: [Tag]? = nil, targetCapacitySpecification: TargetCapacitySpecification? = nil, terminateInstancesWithExpiration: Bool? = nil, type: FleetType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.activityStatus = activityStatus
            self.clientToken = clientToken
            self.context = context
            self.createTime = createTime
            self.errors = errors
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fleetId = fleetId
            self.fleetState = fleetState
            self.fulfilledCapacity = fulfilledCapacity
            self.fulfilledOnDemandCapacity = fulfilledOnDemandCapacity
            self.instances = instances
            self.launchTemplateConfigs = launchTemplateConfigs
            self.onDemandOptions = onDemandOptions
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotOptions = spotOptions
            self.tags = tags
            self.targetCapacitySpecification = targetCapacitySpecification
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case activityStatus
            case clientToken
            case context
            case createTime
            case errors = "errorSet"
            case excessCapacityTerminationPolicy
            case fleetId
            case fleetState
            case fulfilledCapacity
            case fulfilledOnDemandCapacity
            case instances = "fleetInstanceSet"
            case launchTemplateConfigs
            case onDemandOptions
            case replaceUnhealthyInstances
            case spotOptions
            case tags = "tagSet"
            case targetCapacitySpecification
            case terminateInstancesWithExpiration
            case type
            case validFrom
            case validUntil
        }
    }

    public struct FleetLaunchTemplateConfig: AWSDecodableShape {
        public struct _OverridesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        @OptionalCustomCoding<ArrayCoder<_OverridesEncoding, FleetLaunchTemplateOverrides>>
        public var overrides: [FleetLaunchTemplateOverrides]?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: [FleetLaunchTemplateOverrides]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification
            case overrides
        }
    }

    public struct FleetLaunchTemplateConfigRequest: AWSEncodableShape {
        public struct _OverridesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The launch template to use. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecificationRequest?
        /// Any parameters that you specify override the same parameters in the launch template. For fleets of type request and maintain, a maximum of 300 items is allowed across all launch templates.
        @OptionalCustomCoding<ArrayCoder<_OverridesEncoding, FleetLaunchTemplateOverridesRequest>>
        public var overrides: [FleetLaunchTemplateOverridesRequest]?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecificationRequest? = nil, overrides: [FleetLaunchTemplateOverridesRequest]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        public func validate(name: String) throws {
            try self.launchTemplateSpecification?.validate(name: "\(name).launchTemplateSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification = "LaunchTemplateSpecification"
            case overrides = "Overrides"
        }
    }

    public struct FleetLaunchTemplateOverrides: AWSDecodableShape {
        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance.
        public let maxPrice: String?
        /// The location where the instance launched, if applicable.
        public let placement: PlacementResponse?
        /// The priority for the launch template override. The highest priority is launched first. If the On-Demand AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. If the Spot AllocationStrategy is set to capacity-optimized-prioritized, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the override has the lowest priority. You can set the same priority for different launch template overrides.
        public let priority: Double?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The number of units provided by the specified instance type.
        public let weightedCapacity: Double?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, maxPrice: String? = nil, placement: PlacementResponse? = nil, priority: Double? = nil, subnetId: String? = nil, weightedCapacity: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.maxPrice = maxPrice
            self.placement = placement
            self.priority = priority
            self.subnetId = subnetId
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case instanceType
            case maxPrice
            case placement
            case priority
            case subnetId
            case weightedCapacity
        }
    }

    public struct FleetLaunchTemplateOverridesRequest: AWSEncodableShape {
        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance.
        public let maxPrice: String?
        /// The location where the instance launched, if applicable.
        public let placement: Placement?
        /// The priority for the launch template override. The highest priority is launched first. If the On-Demand AllocationStrategy is set to prioritized, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. If the Spot AllocationStrategy is set to capacity-optimized-prioritized, EC2 Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.
        public let priority: Double?
        /// The IDs of the subnets in which to launch the instances. Separate multiple subnet IDs using commas (for example, subnet-1234abcdeexample1, subnet-0987cdef6example2). A request of type instant can have only one subnet ID.
        public let subnetId: String?
        /// The number of units provided by the specified instance type.
        public let weightedCapacity: Double?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, maxPrice: String? = nil, placement: Placement? = nil, priority: Double? = nil, subnetId: String? = nil, weightedCapacity: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.maxPrice = maxPrice
            self.placement = placement
            self.priority = priority
            self.subnetId = subnetId
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case instanceType = "InstanceType"
            case maxPrice = "MaxPrice"
            case placement = "Placement"
            case priority = "Priority"
            case subnetId = "SubnetId"
            case weightedCapacity = "WeightedCapacity"
        }
    }

    public struct FleetLaunchTemplateSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The ID of the launch template. If you specify the template ID, you can't specify the template name.
        public let launchTemplateId: String?
        /// The name of the launch template. If you specify the template name, you can't specify the template ID.
        public let launchTemplateName: String?
        /// The launch template version number, $Latest, or $Default. You must specify a value, otherwise the request fails. If the value is $Latest, Amazon EC2 uses the latest version of the launch template. If the value is $Default, Amazon EC2 uses the default version of the launch template.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId
            case launchTemplateName
            case version
        }
    }

    public struct FleetLaunchTemplateSpecificationRequest: AWSEncodableShape {
        /// The ID of the launch template. If you specify the template ID, you can't specify the template name.
        public let launchTemplateId: String?
        /// The name of the launch template. If you specify the template name, you can't specify the template ID.
        public let launchTemplateName: String?
        /// The launch template version number, $Latest, or $Default. You must specify a value, otherwise the request fails. If the value is $Latest, Amazon EC2 uses the latest version of the launch template. If the value is $Default, Amazon EC2 uses the default version of the launch template.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case version = "Version"
        }
    }

    public struct FleetSpotCapacityRebalance: AWSDecodableShape {
        /// To allow EC2 Fleet to launch a replacement Spot Instance when an instance rebalance notification is emitted for an existing Spot Instance in the fleet, specify launch. Only available for fleets of type maintain.  When a replacement instance is launched, the instance marked for rebalance is not automatically terminated. You can terminate it, or you can leave it running. You are charged for both instances while they are running.
        public let replacementStrategy: FleetReplacementStrategy?

        public init(replacementStrategy: FleetReplacementStrategy? = nil) {
            self.replacementStrategy = replacementStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case replacementStrategy
        }
    }

    public struct FleetSpotCapacityRebalanceRequest: AWSEncodableShape {
        /// The replacement strategy to use. Only available for fleets of type maintain. To allow EC2 Fleet to launch a replacement Spot Instance when an instance rebalance notification is emitted for an existing Spot Instance in the fleet, specify launch. You must specify a value, otherwise you get an error.  When a replacement instance is launched, the instance marked for rebalance is not automatically terminated. You can terminate it, or you can leave it running. You are charged for all instances while they are running.
        public let replacementStrategy: FleetReplacementStrategy?

        public init(replacementStrategy: FleetReplacementStrategy? = nil) {
            self.replacementStrategy = replacementStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case replacementStrategy = "ReplacementStrategy"
        }
    }

    public struct FleetSpotMaintenanceStrategies: AWSDecodableShape {
        /// The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
        public let capacityRebalance: FleetSpotCapacityRebalance?

        public init(capacityRebalance: FleetSpotCapacityRebalance? = nil) {
            self.capacityRebalance = capacityRebalance
        }

        private enum CodingKeys: String, CodingKey {
            case capacityRebalance
        }
    }

    public struct FleetSpotMaintenanceStrategiesRequest: AWSEncodableShape {
        /// The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
        public let capacityRebalance: FleetSpotCapacityRebalanceRequest?

        public init(capacityRebalance: FleetSpotCapacityRebalanceRequest? = nil) {
            self.capacityRebalance = capacityRebalance
        }

        private enum CodingKeys: String, CodingKey {
            case capacityRebalance = "CapacityRebalance"
        }
    }

    public struct FlowLog: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The date and time the flow log was created.
        public let creationTime: Date?
        /// Information about the error that occurred. Rate limited indicates that CloudWatch Logs throttling has been applied for one or more network interfaces, or that you've reached the limit on the number of log groups that you can create. Access error indicates that the IAM role associated with the flow log does not have sufficient permissions to publish to CloudWatch Logs. Unknown error indicates an internal error.
        public let deliverLogsErrorMessage: String?
        /// The ARN of the IAM role that posts logs to CloudWatch Logs.
        public let deliverLogsPermissionArn: String?
        /// The status of the logs delivery (SUCCESS | FAILED).
        public let deliverLogsStatus: String?
        /// The flow log ID.
        public let flowLogId: String?
        /// The status of the flow log (ACTIVE).
        public let flowLogStatus: String?
        /// Specifies the destination to which the flow log data is published. Flow log data can be published to an CloudWatch Logs log group or an Amazon S3 bucket. If the flow log publishes to CloudWatch Logs, this element indicates the Amazon Resource Name (ARN) of the CloudWatch Logs log group to which the data is published. If the flow log publishes to Amazon S3, this element indicates the ARN of the Amazon S3 bucket to which the data is published.
        public let logDestination: String?
        /// Specifies the type of destination to which the flow log data is published. Flow log data can be published to CloudWatch Logs or Amazon S3.
        public let logDestinationType: LogDestinationType?
        /// The format of the flow log record.
        public let logFormat: String?
        /// The name of the flow log group.
        public let logGroupName: String?
        /// The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. When a network interface is attached to a Nitro-based instance, the aggregation interval is always 60 seconds (1 minute) or less, regardless of the specified value. Valid Values: 60 | 600
        public let maxAggregationInterval: Int?
        /// The ID of the resource on which the flow log was created.
        public let resourceId: String?
        /// The tags for the flow log.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The type of traffic captured for the flow log.
        public let trafficType: TrafficType?

        public init(creationTime: Date? = nil, deliverLogsErrorMessage: String? = nil, deliverLogsPermissionArn: String? = nil, deliverLogsStatus: String? = nil, flowLogId: String? = nil, flowLogStatus: String? = nil, logDestination: String? = nil, logDestinationType: LogDestinationType? = nil, logFormat: String? = nil, logGroupName: String? = nil, maxAggregationInterval: Int? = nil, resourceId: String? = nil, tags: [Tag]? = nil, trafficType: TrafficType? = nil) {
            self.creationTime = creationTime
            self.deliverLogsErrorMessage = deliverLogsErrorMessage
            self.deliverLogsPermissionArn = deliverLogsPermissionArn
            self.deliverLogsStatus = deliverLogsStatus
            self.flowLogId = flowLogId
            self.flowLogStatus = flowLogStatus
            self.logDestination = logDestination
            self.logDestinationType = logDestinationType
            self.logFormat = logFormat
            self.logGroupName = logGroupName
            self.maxAggregationInterval = maxAggregationInterval
            self.resourceId = resourceId
            self.tags = tags
            self.trafficType = trafficType
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime
            case deliverLogsErrorMessage
            case deliverLogsPermissionArn
            case deliverLogsStatus
            case flowLogId
            case flowLogStatus
            case logDestination
            case logDestinationType
            case logFormat
            case logGroupName
            case maxAggregationInterval
            case resourceId
            case tags = "tagSet"
            case trafficType
        }
    }

    public struct FpgaDeviceInfo: AWSDecodableShape {
        /// The count of FPGA accelerators for the instance type.
        public let count: Int?
        /// The manufacturer of the FPGA accelerator.
        public let manufacturer: String?
        /// Describes the memory for the FPGA accelerator for the instance type.
        public let memoryInfo: FpgaDeviceMemoryInfo?
        /// The name of the FPGA accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, memoryInfo: FpgaDeviceMemoryInfo? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.memoryInfo = memoryInfo
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count
            case manufacturer
            case memoryInfo
            case name
        }
    }

    public struct FpgaDeviceMemoryInfo: AWSDecodableShape {
        /// The size of the memory available to the FPGA accelerator, in MiB.
        public let sizeInMiB: Int?

        public init(sizeInMiB: Int? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB
        }
    }

    public struct FpgaImage: AWSDecodableShape {
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The date and time the AFI was created.
        public let createTime: Date?
        /// Indicates whether data retention support is enabled for the AFI.
        public let dataRetentionSupport: Bool?
        /// The description of the AFI.
        public let description: String?
        /// The global FPGA image identifier (AGFI ID).
        public let fpgaImageGlobalId: String?
        /// The FPGA image identifier (AFI ID).
        public let fpgaImageId: String?
        /// The name of the AFI.
        public let name: String?
        /// The alias of the AFI owner. Possible values include self, amazon, and aws-marketplace.
        public let ownerAlias: String?
        /// The AWS account ID of the AFI owner.
        public let ownerId: String?
        /// Information about the PCI bus.
        public let pciId: PciId?
        /// The product codes for the AFI.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// Indicates whether the AFI is public.
        public let `public`: Bool?
        /// The version of the AWS Shell that was used to create the bitstream.
        public let shellVersion: String?
        /// Information about the state of the AFI.
        public let state: FpgaImageState?
        /// Any tags assigned to the AFI.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The time of the most recent update to the AFI.
        public let updateTime: Date?

        public init(createTime: Date? = nil, dataRetentionSupport: Bool? = nil, description: String? = nil, fpgaImageGlobalId: String? = nil, fpgaImageId: String? = nil, name: String? = nil, ownerAlias: String? = nil, ownerId: String? = nil, pciId: PciId? = nil, productCodes: [ProductCode]? = nil, public: Bool? = nil, shellVersion: String? = nil, state: FpgaImageState? = nil, tags: [Tag]? = nil, updateTime: Date? = nil) {
            self.createTime = createTime
            self.dataRetentionSupport = dataRetentionSupport
            self.description = description
            self.fpgaImageGlobalId = fpgaImageGlobalId
            self.fpgaImageId = fpgaImageId
            self.name = name
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.pciId = pciId
            self.productCodes = productCodes
            self.`public` = `public`
            self.shellVersion = shellVersion
            self.state = state
            self.tags = tags
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case createTime
            case dataRetentionSupport
            case description
            case fpgaImageGlobalId
            case fpgaImageId
            case name
            case ownerAlias
            case ownerId
            case pciId
            case productCodes
            case `public`
            case shellVersion
            case state
            case tags
            case updateTime
        }
    }

    public struct FpgaImageAttribute: AWSDecodableShape {
        public struct _LoadPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description of the AFI.
        public let description: String?
        /// The ID of the AFI.
        public let fpgaImageId: String?
        /// The load permissions.
        @OptionalCustomCoding<ArrayCoder<_LoadPermissionsEncoding, LoadPermission>>
        public var loadPermissions: [LoadPermission]?
        /// The name of the AFI.
        public let name: String?
        /// The product codes.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?

        public init(description: String? = nil, fpgaImageId: String? = nil, loadPermissions: [LoadPermission]? = nil, name: String? = nil, productCodes: [ProductCode]? = nil) {
            self.description = description
            self.fpgaImageId = fpgaImageId
            self.loadPermissions = loadPermissions
            self.name = name
            self.productCodes = productCodes
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case fpgaImageId
            case loadPermissions
            case name
            case productCodes
        }
    }

    public struct FpgaImageState: AWSDecodableShape {
        /// The state. The following are the possible values:    pending - AFI bitstream generation is in progress.    available - The AFI is available for use.    failed - AFI bitstream generation failed.    unavailable - The AFI is no longer available for use.
        public let code: FpgaImageStateCode?
        /// If the state is failed, this is the error message.
        public let message: String?

        public init(code: FpgaImageStateCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct FpgaInfo: AWSDecodableShape {
        public struct _FpgasEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Describes the FPGAs for the instance type.
        @OptionalCustomCoding<ArrayCoder<_FpgasEncoding, FpgaDeviceInfo>>
        public var fpgas: [FpgaDeviceInfo]?
        /// The total memory of all FPGA accelerators for the instance type.
        public let totalFpgaMemoryInMiB: Int?

        public init(fpgas: [FpgaDeviceInfo]? = nil, totalFpgaMemoryInMiB: Int? = nil) {
            self.fpgas = fpgas
            self.totalFpgaMemoryInMiB = totalFpgaMemoryInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case fpgas
            case totalFpgaMemoryInMiB
        }
    }

    public struct GetAssociatedEnclaveCertificateIamRolesRequest: AWSEncodableShape {
        /// The ARN of the ACM certificate for which to view the associated IAM roles, encryption keys, and Amazon S3 object information.
        public let certificateArn: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(certificateArn: String? = nil, dryRun: Bool? = nil) {
            self.certificateArn = certificateArn
            self.dryRun = dryRun
        }

        public func validate(name: String) throws {
            try self.validate(self.certificateArn, name: "certificateArn", parent: name, max: 1283)
            try self.validate(self.certificateArn, name: "certificateArn", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case dryRun = "DryRun"
        }
    }

    public struct GetAssociatedEnclaveCertificateIamRolesResult: AWSDecodableShape {
        public struct _AssociatedRolesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associated IAM roles.
        @OptionalCustomCoding<ArrayCoder<_AssociatedRolesEncoding, AssociatedRole>>
        public var associatedRoles: [AssociatedRole]?

        public init(associatedRoles: [AssociatedRole]? = nil) {
            self.associatedRoles = associatedRoles
        }

        private enum CodingKeys: String, CodingKey {
            case associatedRoles = "associatedRoleSet"
        }
    }

    public struct GetAssociatedIpv6PoolCidrsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the IPv6 address pool.
        public let poolId: String

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolId: String) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolId = poolId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolId = "PoolId"
        }
    }

    public struct GetAssociatedIpv6PoolCidrsResult: AWSDecodableShape {
        public struct _Ipv6CidrAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the IPv6 CIDR block associations.
        @OptionalCustomCoding<ArrayCoder<_Ipv6CidrAssociationsEncoding, Ipv6CidrAssociation>>
        public var ipv6CidrAssociations: [Ipv6CidrAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(ipv6CidrAssociations: [Ipv6CidrAssociation]? = nil, nextToken: String? = nil) {
            self.ipv6CidrAssociations = ipv6CidrAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrAssociations = "ipv6CidrAssociationSet"
            case nextToken
        }
    }

    public struct GetCapacityReservationUsageRequest: AWSEncodableShape {
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error. Valid range: Minimum value of 1. Maximum value of 1000.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationId: String, dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetCapacityReservationUsageResult: AWSDecodableShape {
        public struct _InstanceUsagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The remaining capacity. Indicates the number of instances that can be launched in the Capacity Reservation.
        public let availableInstanceCount: Int?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// The type of instance for which the Capacity Reservation reserves capacity.
        public let instanceType: String?
        /// Information about the Capacity Reservation usage.
        @OptionalCustomCoding<ArrayCoder<_InstanceUsagesEncoding, InstanceUsage>>
        public var instanceUsages: [InstanceUsage]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// The current state of the Capacity Reservation. A Capacity Reservation can be in one of the following states:    active - The Capacity Reservation is active and the capacity is available for your use.    expired - The Capacity Reservation expired automatically at the date and time specified in your request. The reserved capacity is no longer available for your use.    cancelled - The Capacity Reservation was cancelled. The reserved capacity is no longer available for your use.    pending - The Capacity Reservation request was successful but the capacity provisioning is still pending.    failed - The Capacity Reservation request has failed. A request might fail due to invalid request parameters, capacity constraints, or instance limit constraints. Failed requests are retained for 60 minutes.
        public let state: CapacityReservationState?
        /// The number of instances for which the Capacity Reservation reserves capacity.
        public let totalInstanceCount: Int?

        public init(availableInstanceCount: Int? = nil, capacityReservationId: String? = nil, instanceType: String? = nil, instanceUsages: [InstanceUsage]? = nil, nextToken: String? = nil, state: CapacityReservationState? = nil, totalInstanceCount: Int? = nil) {
            self.availableInstanceCount = availableInstanceCount
            self.capacityReservationId = capacityReservationId
            self.instanceType = instanceType
            self.instanceUsages = instanceUsages
            self.nextToken = nextToken
            self.state = state
            self.totalInstanceCount = totalInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case availableInstanceCount
            case capacityReservationId
            case instanceType
            case instanceUsages = "instanceUsageSet"
            case nextToken
            case state
            case totalInstanceCount
        }
    }

    public struct GetCoipPoolUsageRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The filters. The following are the possible values:    coip-address-usage.allocation-id       coip-address-usage.aws-account-id       coip-address-usage.aws-service       coip-address-usage.co-ip
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the address pool.
        public let poolId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, poolId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.poolId = poolId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case poolId = "PoolId"
        }
    }

    public struct GetCoipPoolUsageResult: AWSDecodableShape {
        public struct _CoipAddressUsagesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the address usage.
        @OptionalCustomCoding<ArrayCoder<_CoipAddressUsagesEncoding, CoipAddressUsage>>
        public var coipAddressUsages: [CoipAddressUsage]?
        /// The ID of the customer-owned address pool.
        public let coipPoolId: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?

        public init(coipAddressUsages: [CoipAddressUsage]? = nil, coipPoolId: String? = nil, localGatewayRouteTableId: String? = nil) {
            self.coipAddressUsages = coipAddressUsages
            self.coipPoolId = coipPoolId
            self.localGatewayRouteTableId = localGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case coipAddressUsages = "coipAddressUsageSet"
            case coipPoolId
            case localGatewayRouteTableId
        }
    }

    public struct GetConsoleOutputRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// When enabled, retrieves the latest console output for the instance. Default: disabled (false)
        public let latest: Bool?

        public init(dryRun: Bool? = nil, instanceId: String, latest: Bool? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.latest = latest
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceId = "InstanceId"
            case latest = "Latest"
        }
    }

    public struct GetConsoleOutputResult: AWSDecodableShape {
        /// The ID of the instance.
        public let instanceId: String?
        /// The console output, base64-encoded. If you are using a command line tool, the tool decodes the output for you.
        public let output: String?
        /// The time at which the output was last updated.
        public let timestamp: Date?

        public init(instanceId: String? = nil, output: String? = nil, timestamp: Date? = nil) {
            self.instanceId = instanceId
            self.output = output
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId
            case output
            case timestamp
        }
    }

    public struct GetConsoleScreenshotRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String
        /// When set to true, acts as keystroke input and wakes up an instance that's in standby or "sleep" mode.
        public let wakeUp: Bool?

        public init(dryRun: Bool? = nil, instanceId: String, wakeUp: Bool? = nil) {
            self.dryRun = dryRun
            self.instanceId = instanceId
            self.wakeUp = wakeUp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
            case wakeUp = "WakeUp"
        }
    }

    public struct GetConsoleScreenshotResult: AWSDecodableShape {
        /// The data that comprises the image.
        public let imageData: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(imageData: String? = nil, instanceId: String? = nil) {
            self.imageData = imageData
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case imageData
            case instanceId
        }
    }

    public struct GetDefaultCreditSpecificationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance family.
        public let instanceFamily: UnlimitedSupportedInstanceFamily

        public init(dryRun: Bool? = nil, instanceFamily: UnlimitedSupportedInstanceFamily) {
            self.dryRun = dryRun
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceFamily = "InstanceFamily"
        }
    }

    public struct GetDefaultCreditSpecificationResult: AWSDecodableShape {
        /// The default credit option for CPU usage of the instance family.
        public let instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification?

        public init(instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification? = nil) {
            self.instanceFamilyCreditSpecification = instanceFamilyCreditSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFamilyCreditSpecification
        }
    }

    public struct GetEbsDefaultKmsKeyIdRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetEbsDefaultKmsKeyIdResult: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the default CMK for encryption by default.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId
        }
    }

    public struct GetEbsEncryptionByDefaultRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetEbsEncryptionByDefaultResult: AWSDecodableShape {
        /// Indicates whether encryption by default is enabled.
        public let ebsEncryptionByDefault: Bool?

        public init(ebsEncryptionByDefault: Bool? = nil) {
            self.ebsEncryptionByDefault = ebsEncryptionByDefault
        }

        private enum CodingKeys: String, CodingKey {
            case ebsEncryptionByDefault
        }
    }

    public struct GetFlowLogsIntegrationTemplateRequest: AWSEncodableShape {
        /// To store the CloudFormation template in Amazon S3, specify the location in Amazon S3.
        public let configDeliveryS3DestinationArn: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the flow log.
        public let flowLogId: String
        /// Information about the service integration.
        public let integrateServices: IntegrateServices

        public init(configDeliveryS3DestinationArn: String, dryRun: Bool? = nil, flowLogId: String, integrateServices: IntegrateServices) {
            self.configDeliveryS3DestinationArn = configDeliveryS3DestinationArn
            self.dryRun = dryRun
            self.flowLogId = flowLogId
            self.integrateServices = integrateServices
        }

        public func validate(name: String) throws {
            try self.integrateServices.validate(name: "\(name).integrateServices")
        }

        private enum CodingKeys: String, CodingKey {
            case configDeliveryS3DestinationArn = "ConfigDeliveryS3DestinationArn"
            case dryRun = "DryRun"
            case flowLogId = "FlowLogId"
            case integrateServices = "IntegrateService"
        }
    }

    public struct GetFlowLogsIntegrationTemplateResult: AWSDecodableShape {
        /// The generated CloudFormation template.
        public let result: String?

        public init(result: String? = nil) {
            self.result = result
        }

        private enum CodingKeys: String, CodingKey {
            case result
        }
    }

    public struct GetGroupsForCapacityReservationRequest: AWSEncodableShape {
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value. This value can be between 5 and 500. If maxResults is given a larger value than 500, you receive an error.
        public let maxResults: Int?
        /// The token to use to retrieve the next page of results.
        public let nextToken: String?

        public init(capacityReservationId: String, dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil) {
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetGroupsForCapacityReservationResult: AWSDecodableShape {
        public struct _CapacityReservationGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the resource groups to which the Capacity Reservation has been added.
        @OptionalCustomCoding<ArrayCoder<_CapacityReservationGroupsEncoding, CapacityReservationGroup>>
        public var capacityReservationGroups: [CapacityReservationGroup]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(capacityReservationGroups: [CapacityReservationGroup]? = nil, nextToken: String? = nil) {
            self.capacityReservationGroups = capacityReservationGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationGroups = "capacityReservationGroupSet"
            case nextToken
        }
    }

    public struct GetHostReservationPurchasePreviewRequest: AWSEncodableShape {
        public struct _HostIdSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts with which the reservation is associated.
        @CustomCoding<ArrayCoder<_HostIdSetEncoding, String>>
        public var hostIdSet: [String]
        /// The offering ID of the reservation.
        public let offeringId: String

        public init(hostIdSet: [String], offeringId: String) {
            self.hostIdSet = hostIdSet
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case hostIdSet = "HostIdSet"
            case offeringId = "OfferingId"
        }
    }

    public struct GetHostReservationPurchasePreviewResult: AWSDecodableShape {
        public struct _PurchaseEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The purchase information of the Dedicated Host reservation and the Dedicated Hosts associated with it.
        @OptionalCustomCoding<ArrayCoder<_PurchaseEncoding, Purchase>>
        public var purchase: [Purchase]?
        /// The potential total hourly price of the reservation per hour.
        public let totalHourlyPrice: String?
        /// The potential total upfront price. This is billed immediately.
        public let totalUpfrontPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, purchase: [Purchase]? = nil, totalHourlyPrice: String? = nil, totalUpfrontPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.purchase = purchase
            self.totalHourlyPrice = totalHourlyPrice
            self.totalUpfrontPrice = totalUpfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode
            case purchase
            case totalHourlyPrice
            case totalUpfrontPrice
        }
    }

    public struct GetLaunchTemplateDataRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String

        public init(dryRun: Bool? = nil, instanceId: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct GetLaunchTemplateDataResult: AWSDecodableShape {
        /// The instance data.
        public let launchTemplateData: ResponseLaunchTemplateData?

        public init(launchTemplateData: ResponseLaunchTemplateData? = nil) {
            self.launchTemplateData = launchTemplateData
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateData
        }
    }

    public struct GetManagedPrefixListAssociationsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the prefix list.
        public let prefixListId: String

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListId: String) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListId = prefixListId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 255)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListId = "PrefixListId"
        }
    }

    public struct GetManagedPrefixListAssociationsResult: AWSDecodableShape {
        public struct _PrefixListAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the associations.
        @OptionalCustomCoding<ArrayCoder<_PrefixListAssociationsEncoding, PrefixListAssociation>>
        public var prefixListAssociations: [PrefixListAssociation]?

        public init(nextToken: String? = nil, prefixListAssociations: [PrefixListAssociation]? = nil) {
            self.nextToken = nextToken
            self.prefixListAssociations = prefixListAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case prefixListAssociations = "prefixListAssociationSet"
        }
    }

    public struct GetManagedPrefixListEntriesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// The version of the prefix list for which to return the entries. The default is the current version.
        public let targetVersion: Int64?

        public init(dryRun: Bool? = nil, maxResults: Int? = nil, nextToken: String? = nil, prefixListId: String, targetVersion: Int64? = nil) {
            self.dryRun = dryRun
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.prefixListId = prefixListId
            self.targetVersion = targetVersion
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 100)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case prefixListId = "PrefixListId"
            case targetVersion = "TargetVersion"
        }
    }

    public struct GetManagedPrefixListEntriesResult: AWSDecodableShape {
        public struct _EntriesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the prefix list entries.
        @OptionalCustomCoding<ArrayCoder<_EntriesEncoding, PrefixListEntry>>
        public var entries: [PrefixListEntry]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(entries: [PrefixListEntry]? = nil, nextToken: String? = nil) {
            self.entries = entries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case entries = "entrySet"
            case nextToken
        }
    }

    public struct GetPasswordDataRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the Windows instance.
        public let instanceId: String

        public init(dryRun: Bool? = nil, instanceId: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceId = "InstanceId"
        }
    }

    public struct GetPasswordDataResult: AWSDecodableShape {
        /// The ID of the Windows instance.
        public let instanceId: String?
        /// The password of the instance. Returns an empty string if the password is not available.
        public let passwordData: String?
        /// The time the data was last updated.
        public let timestamp: Date?

        public init(instanceId: String? = nil, passwordData: String? = nil, timestamp: Date? = nil) {
            self.instanceId = instanceId
            self.passwordData = passwordData
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId
            case passwordData
            case timestamp
        }
    }

    public struct GetReservedInstancesExchangeQuoteRequest: AWSEncodableShape {
        public struct _ReservedInstanceIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstanceId" }
        public struct _TargetConfigurationsEncoding: ArrayCoderProperties { public static let member = "TargetConfigurationRequest" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the Convertible Reserved Instances to exchange.
        @CustomCoding<ArrayCoder<_ReservedInstanceIdsEncoding, String>>
        public var reservedInstanceIds: [String]
        /// The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
        @OptionalCustomCoding<ArrayCoder<_TargetConfigurationsEncoding, TargetConfigurationRequest>>
        public var targetConfigurations: [TargetConfigurationRequest]?

        public init(dryRun: Bool? = nil, reservedInstanceIds: [String], targetConfigurations: [TargetConfigurationRequest]? = nil) {
            self.dryRun = dryRun
            self.reservedInstanceIds = reservedInstanceIds
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case reservedInstanceIds = "ReservedInstanceId"
            case targetConfigurations = "TargetConfiguration"
        }
    }

    public struct GetReservedInstancesExchangeQuoteResult: AWSDecodableShape {
        public struct _ReservedInstanceValueSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TargetConfigurationValueSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The currency of the transaction.
        public let currencyCode: String?
        /// If true, the exchange is valid. If false, the exchange cannot be completed.
        public let isValidExchange: Bool?
        /// The new end date of the reservation term.
        public let outputReservedInstancesWillExpireAt: Date?
        /// The total true upfront charge for the exchange.
        public let paymentDue: String?
        /// The cost associated with the Reserved Instance.
        public let reservedInstanceValueRollup: ReservationValue?
        /// The configuration of your Convertible Reserved Instances.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstanceValueSetEncoding, ReservedInstanceReservationValue>>
        public var reservedInstanceValueSet: [ReservedInstanceReservationValue]?
        /// The cost associated with the Reserved Instance.
        public let targetConfigurationValueRollup: ReservationValue?
        /// The values of the target Convertible Reserved Instances.
        @OptionalCustomCoding<ArrayCoder<_TargetConfigurationValueSetEncoding, TargetReservationValue>>
        public var targetConfigurationValueSet: [TargetReservationValue]?
        /// Describes the reason why the exchange cannot be completed.
        public let validationFailureReason: String?

        public init(currencyCode: String? = nil, isValidExchange: Bool? = nil, outputReservedInstancesWillExpireAt: Date? = nil, paymentDue: String? = nil, reservedInstanceValueRollup: ReservationValue? = nil, reservedInstanceValueSet: [ReservedInstanceReservationValue]? = nil, targetConfigurationValueRollup: ReservationValue? = nil, targetConfigurationValueSet: [TargetReservationValue]? = nil, validationFailureReason: String? = nil) {
            self.currencyCode = currencyCode
            self.isValidExchange = isValidExchange
            self.outputReservedInstancesWillExpireAt = outputReservedInstancesWillExpireAt
            self.paymentDue = paymentDue
            self.reservedInstanceValueRollup = reservedInstanceValueRollup
            self.reservedInstanceValueSet = reservedInstanceValueSet
            self.targetConfigurationValueRollup = targetConfigurationValueRollup
            self.targetConfigurationValueSet = targetConfigurationValueSet
            self.validationFailureReason = validationFailureReason
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode
            case isValidExchange
            case outputReservedInstancesWillExpireAt
            case paymentDue
            case reservedInstanceValueRollup
            case reservedInstanceValueSet
            case targetConfigurationValueRollup
            case targetConfigurationValueSet
            case validationFailureReason
        }
    }

    public struct GetSerialConsoleAccessStatusRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct GetSerialConsoleAccessStatusResult: AWSDecodableShape {
        /// If true, access to the EC2 serial console of all instances is enabled for your account. If false, access to the EC2 serial console of all instances is disabled for your account.
        public let serialConsoleAccessEnabled: Bool?

        public init(serialConsoleAccessEnabled: Bool? = nil) {
            self.serialConsoleAccessEnabled = serialConsoleAccessEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case serialConsoleAccessEnabled
        }
    }

    public struct GetTransitGatewayAttachmentPropagationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    transit-gateway-route-table-id - The ID of the transit gateway route table.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct GetTransitGatewayAttachmentPropagationsResult: AWSDecodableShape {
        public struct _TransitGatewayAttachmentPropagationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the propagation route tables.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayAttachmentPropagationsEncoding, TransitGatewayAttachmentPropagation>>
        public var transitGatewayAttachmentPropagations: [TransitGatewayAttachmentPropagation]?

        public init(nextToken: String? = nil, transitGatewayAttachmentPropagations: [TransitGatewayAttachmentPropagation]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayAttachmentPropagations = transitGatewayAttachmentPropagations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayAttachmentPropagations
        }
    }

    public struct GetTransitGatewayMulticastDomainAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The type of resource. The valid value is: vpc.    state - The state of the subnet association. Valid values are associated | associating | disassociated | disassociating.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct GetTransitGatewayMulticastDomainAssociationsResult: AWSDecodableShape {
        public struct _MulticastDomainAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the multicast domain associations.
        @OptionalCustomCoding<ArrayCoder<_MulticastDomainAssociationsEncoding, TransitGatewayMulticastDomainAssociation>>
        public var multicastDomainAssociations: [TransitGatewayMulticastDomainAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(multicastDomainAssociations: [TransitGatewayMulticastDomainAssociation]? = nil, nextToken: String? = nil) {
            self.multicastDomainAssociations = multicastDomainAssociations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case multicastDomainAssociations
            case nextToken
        }
    }

    public struct GetTransitGatewayPrefixListReferencesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    attachment.resource-id - The ID of the resource for the attachment.    attachment.resource-type - The type of resource for the attachment. Valid values are vpc | vpn | direct-connect-gateway | peering.    attachment.transit-gateway-attachment-id - The ID of the attachment.    is-blackhole - Whether traffic matching the route is blocked (true | false).    prefix-list-id - The ID of the prefix list.    prefix-list-owner-id - The ID of the owner of the prefix list.    state - The state of the prefix list reference (pending | available | modifying | deleting).
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct GetTransitGatewayPrefixListReferencesResult: AWSDecodableShape {
        public struct _TransitGatewayPrefixListReferencesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the prefix list references.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayPrefixListReferencesEncoding, TransitGatewayPrefixListReference>>
        public var transitGatewayPrefixListReferences: [TransitGatewayPrefixListReference]?

        public init(nextToken: String? = nil, transitGatewayPrefixListReferences: [TransitGatewayPrefixListReference]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayPrefixListReferences = transitGatewayPrefixListReferences
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayPrefixListReferences = "transitGatewayPrefixListReferenceSet"
        }
    }

    public struct GetTransitGatewayRouteTableAssociationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    transit-gateway-attachment-id - The ID of the attachment.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct GetTransitGatewayRouteTableAssociationsResult: AWSDecodableShape {
        public struct _AssociationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the associations.
        @OptionalCustomCoding<ArrayCoder<_AssociationsEncoding, TransitGatewayRouteTableAssociation>>
        public var associations: [TransitGatewayRouteTableAssociation]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(associations: [TransitGatewayRouteTableAssociation]? = nil, nextToken: String? = nil) {
            self.associations = associations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case associations
            case nextToken
        }
    }

    public struct GetTransitGatewayRouteTablePropagationsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    resource-id - The ID of the resource.    resource-type - The resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    transit-gateway-attachment-id - The ID of the attachment.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct GetTransitGatewayRouteTablePropagationsResult: AWSDecodableShape {
        public struct _TransitGatewayRouteTablePropagationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the route table propagations.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayRouteTablePropagationsEncoding, TransitGatewayRouteTablePropagation>>
        public var transitGatewayRouteTablePropagations: [TransitGatewayRouteTablePropagation]?

        public init(nextToken: String? = nil, transitGatewayRouteTablePropagations: [TransitGatewayRouteTablePropagation]? = nil) {
            self.nextToken = nextToken
            self.transitGatewayRouteTablePropagations = transitGatewayRouteTablePropagations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case transitGatewayRouteTablePropagations
        }
    }

    public struct GpuDeviceInfo: AWSDecodableShape {
        /// The number of GPUs for the instance type.
        public let count: Int?
        /// The manufacturer of the GPU accelerator.
        public let manufacturer: String?
        /// Describes the memory available to the GPU accelerator.
        public let memoryInfo: GpuDeviceMemoryInfo?
        /// The name of the GPU accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, memoryInfo: GpuDeviceMemoryInfo? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.memoryInfo = memoryInfo
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count
            case manufacturer
            case memoryInfo
            case name
        }
    }

    public struct GpuDeviceMemoryInfo: AWSDecodableShape {
        /// The size of the memory available to the GPU accelerator, in MiB.
        public let sizeInMiB: Int?

        public init(sizeInMiB: Int? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB
        }
    }

    public struct GpuInfo: AWSDecodableShape {
        public struct _GpusEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Describes the GPU accelerators for the instance type.
        @OptionalCustomCoding<ArrayCoder<_GpusEncoding, GpuDeviceInfo>>
        public var gpus: [GpuDeviceInfo]?
        /// The total size of the memory for the GPU accelerators for the instance type, in MiB.
        public let totalGpuMemoryInMiB: Int?

        public init(gpus: [GpuDeviceInfo]? = nil, totalGpuMemoryInMiB: Int? = nil) {
            self.gpus = gpus
            self.totalGpuMemoryInMiB = totalGpuMemoryInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case gpus
            case totalGpuMemoryInMiB
        }
    }

    public struct GroupIdentifier: AWSEncodableShape & AWSDecodableShape {
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupId
            case groupName
        }
    }

    public struct HibernationOptions: AWSDecodableShape {
        /// If this parameter is set to true, your instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured
        }
    }

    public struct HibernationOptionsRequest: AWSEncodableShape {
        /// If you set this parameter to true, your instance is enabled for hibernation. Default: false
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "Configured"
        }
    }

    public struct HistoryRecord: AWSDecodableShape {
        /// Information about the event.
        public let eventInformation: EventInformation?
        /// The event type.    error - An error with the Spot Fleet request.    fleetRequestChange - A change in the status or configuration of the Spot Fleet request.    instanceChange - An instance was launched or terminated.    Information - An informational event.
        public let eventType: EventType?
        /// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: Date?

        public init(eventInformation: EventInformation? = nil, eventType: EventType? = nil, timestamp: Date? = nil) {
            self.eventInformation = eventInformation
            self.eventType = eventType
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case eventInformation
            case eventType
            case timestamp
        }
    }

    public struct HistoryRecordEntry: AWSDecodableShape {
        /// Information about the event.
        public let eventInformation: EventInformation?
        /// The event type.
        public let eventType: FleetEventType?
        /// The date and time of the event, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: Date?

        public init(eventInformation: EventInformation? = nil, eventType: FleetEventType? = nil, timestamp: Date? = nil) {
            self.eventInformation = eventInformation
            self.eventType = eventType
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case eventInformation
            case eventType
            case timestamp
        }
    }

    public struct Host: AWSDecodableShape {
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time that the Dedicated Host was allocated.
        public let allocationTime: Date?
        /// Indicates whether the Dedicated Host supports multiple instance types of the same instance family. If the value is on, the Dedicated Host supports multiple instance types in the instance family. If the value is off, the Dedicated Host supports a single instance type only.
        public let allowsMultipleInstanceTypes: AllowsMultipleInstanceTypes?
        /// Whether auto-placement is on or off.
        public let autoPlacement: AutoPlacement?
        /// The Availability Zone of the Dedicated Host.
        public let availabilityZone: String?
        /// The ID of the Availability Zone in which the Dedicated Host is allocated.
        public let availabilityZoneId: String?
        /// Information about the instances running on the Dedicated Host.
        public let availableCapacity: AvailableCapacity?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The ID of the Dedicated Host.
        public let hostId: String?
        /// The hardware specifications of the Dedicated Host.
        public let hostProperties: HostProperties?
        /// Indicates whether host recovery is enabled or disabled for the Dedicated Host.
        public let hostRecovery: HostRecovery?
        /// The reservation ID of the Dedicated Host. This returns a null response if the Dedicated Host doesn't have an associated reservation.
        public let hostReservationId: String?
        /// The IDs and instance type that are currently running on the Dedicated Host.
        @OptionalCustomCoding<ArrayCoder<_InstancesEncoding, HostInstance>>
        public var instances: [HostInstance]?
        /// Indicates whether the Dedicated Host is in a host resource group. If memberOfServiceLinkedResourceGroup is true, the host is in a host resource group; otherwise, it is not.
        public let memberOfServiceLinkedResourceGroup: Bool?
        /// The ID of the account that owns the Dedicated Host.
        public let ownerId: String?
        /// The time that the Dedicated Host was released.
        public let releaseTime: Date?
        /// The Dedicated Host's state.
        public let state: AllocationState?
        /// Any tags assigned to the Dedicated Host.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(allocationTime: Date? = nil, allowsMultipleInstanceTypes: AllowsMultipleInstanceTypes? = nil, autoPlacement: AutoPlacement? = nil, availabilityZone: String? = nil, availabilityZoneId: String? = nil, availableCapacity: AvailableCapacity? = nil, clientToken: String? = nil, hostId: String? = nil, hostProperties: HostProperties? = nil, hostRecovery: HostRecovery? = nil, hostReservationId: String? = nil, instances: [HostInstance]? = nil, memberOfServiceLinkedResourceGroup: Bool? = nil, ownerId: String? = nil, releaseTime: Date? = nil, state: AllocationState? = nil, tags: [Tag]? = nil) {
            self.allocationTime = allocationTime
            self.allowsMultipleInstanceTypes = allowsMultipleInstanceTypes
            self.autoPlacement = autoPlacement
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableCapacity = availableCapacity
            self.clientToken = clientToken
            self.hostId = hostId
            self.hostProperties = hostProperties
            self.hostRecovery = hostRecovery
            self.hostReservationId = hostReservationId
            self.instances = instances
            self.memberOfServiceLinkedResourceGroup = memberOfServiceLinkedResourceGroup
            self.ownerId = ownerId
            self.releaseTime = releaseTime
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case allocationTime
            case allowsMultipleInstanceTypes
            case autoPlacement
            case availabilityZone
            case availabilityZoneId
            case availableCapacity
            case clientToken
            case hostId
            case hostProperties
            case hostRecovery
            case hostReservationId
            case instances
            case memberOfServiceLinkedResourceGroup
            case ownerId
            case releaseTime
            case state
            case tags = "tagSet"
        }
    }

    public struct HostInstance: AWSDecodableShape {
        /// The ID of instance that is running on the Dedicated Host.
        public let instanceId: String?
        /// The instance type (for example, m3.medium) of the running instance.
        public let instanceType: String?
        /// The ID of the account that owns the instance.
        public let ownerId: String?

        public init(instanceId: String? = nil, instanceType: String? = nil, ownerId: String? = nil) {
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.ownerId = ownerId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId
            case instanceType
            case ownerId
        }
    }

    public struct HostOffering: AWSDecodableShape {
        /// The currency of the offering.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the offering (in seconds).
        public let duration: Int?
        /// The hourly price of the offering.
        public let hourlyPrice: String?
        /// The instance family of the offering.
        public let instanceFamily: String?
        /// The ID of the offering.
        public let offeringId: String?
        /// The available payment option.
        public let paymentOption: PaymentOption?
        /// The upfront price of the offering. Does not apply to No Upfront offerings.
        public let upfrontPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, duration: Int? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, offeringId: String? = nil, paymentOption: PaymentOption? = nil, upfrontPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.offeringId = offeringId
            self.paymentOption = paymentOption
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode
            case duration
            case hourlyPrice
            case instanceFamily
            case offeringId
            case paymentOption
            case upfrontPrice
        }
    }

    public struct HostProperties: AWSDecodableShape {
        /// The number of cores on the Dedicated Host.
        public let cores: Int?
        /// The instance family supported by the Dedicated Host. For example, m5.
        public let instanceFamily: String?
        /// The instance type supported by the Dedicated Host. For example, m5.large. If the host supports multiple instance types, no instanceType is returned.
        public let instanceType: String?
        /// The number of sockets on the Dedicated Host.
        public let sockets: Int?
        /// The total number of vCPUs on the Dedicated Host.
        public let totalVCpus: Int?

        public init(cores: Int? = nil, instanceFamily: String? = nil, instanceType: String? = nil, sockets: Int? = nil, totalVCpus: Int? = nil) {
            self.cores = cores
            self.instanceFamily = instanceFamily
            self.instanceType = instanceType
            self.sockets = sockets
            self.totalVCpus = totalVCpus
        }

        private enum CodingKeys: String, CodingKey {
            case cores
            case instanceFamily
            case instanceType
            case sockets
            case totalVCpus
        }
    }

    public struct HostReservation: AWSDecodableShape {
        public struct _HostIdSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The number of Dedicated Hosts the reservation is associated with.
        public let count: Int?
        /// The currency in which the upfrontPrice and hourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The length of the reservation's term, specified in seconds. Can be 31536000 (1 year) | 94608000 (3 years).
        public let duration: Int?
        /// The date and time that the reservation ends.
        public let end: Date?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        @OptionalCustomCoding<ArrayCoder<_HostIdSetEncoding, String>>
        public var hostIdSet: [String]?
        /// The ID of the reservation that specifies the associated Dedicated Hosts.
        public let hostReservationId: String?
        /// The hourly price of the reservation.
        public let hourlyPrice: String?
        /// The instance family of the Dedicated Host Reservation. The instance family on the Dedicated Host must be the same in order for it to benefit from the reservation.
        public let instanceFamily: String?
        /// The ID of the reservation. This remains the same regardless of which Dedicated Hosts are associated with it.
        public let offeringId: String?
        /// The payment option selected for this reservation.
        public let paymentOption: PaymentOption?
        /// The date and time that the reservation started.
        public let start: Date?
        /// The state of the reservation.
        public let state: ReservationState?
        /// Any tags assigned to the Dedicated Host Reservation.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The upfront price of the reservation.
        public let upfrontPrice: String?

        public init(count: Int? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int? = nil, end: Date? = nil, hostIdSet: [String]? = nil, hostReservationId: String? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, offeringId: String? = nil, paymentOption: PaymentOption? = nil, start: Date? = nil, state: ReservationState? = nil, tags: [Tag]? = nil, upfrontPrice: String? = nil) {
            self.count = count
            self.currencyCode = currencyCode
            self.duration = duration
            self.end = end
            self.hostIdSet = hostIdSet
            self.hostReservationId = hostReservationId
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.offeringId = offeringId
            self.paymentOption = paymentOption
            self.start = start
            self.state = state
            self.tags = tags
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case count
            case currencyCode
            case duration
            case end
            case hostIdSet
            case hostReservationId
            case hourlyPrice
            case instanceFamily
            case offeringId
            case paymentOption
            case start
            case state
            case tags = "tagSet"
            case upfrontPrice
        }
    }

    public struct IKEVersionsListValue: AWSDecodableShape {
        /// The IKE version.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct IKEVersionsRequestListValue: AWSEncodableShape {
        /// The IKE version.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct IamInstanceProfile: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The ID of the instance profile.
        public let id: String?

        public init(arn: String? = nil, id: String? = nil) {
            self.arn = arn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case id
        }
    }

    public struct IamInstanceProfileAssociation: AWSDecodableShape {
        /// The ID of the association.
        public let associationId: String?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfile?
        /// The ID of the instance.
        public let instanceId: String?
        /// The state of the association.
        public let state: IamInstanceProfileAssociationState?
        /// The time the IAM instance profile was associated with the instance.
        public let timestamp: Date?

        public init(associationId: String? = nil, iamInstanceProfile: IamInstanceProfile? = nil, instanceId: String? = nil, state: IamInstanceProfileAssociationState? = nil, timestamp: Date? = nil) {
            self.associationId = associationId
            self.iamInstanceProfile = iamInstanceProfile
            self.instanceId = instanceId
            self.state = state
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case iamInstanceProfile
            case instanceId
            case state
            case timestamp
        }
    }

    public struct IamInstanceProfileSpecification: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The name of the instance profile.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case name
        }
    }

    public struct IcmpTypeCode: AWSEncodableShape & AWSDecodableShape {
        /// The ICMP code. A value of -1 means all codes for the specified ICMP type.
        public let code: Int?
        /// The ICMP type. A value of -1 means all types.
        public let type: Int?

        public init(code: Int? = nil, type: Int? = nil) {
            self.code = code
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case type
        }
    }

    public struct IdFormat: AWSDecodableShape {
        /// The date in UTC at which you are permanently switched over to using longer IDs. If a deadline is not yet available for this resource type, this field is not returned.
        public let deadline: Date?
        /// The type of resource.
        public let resource: String?
        /// Indicates whether longer IDs (17-character IDs) are enabled for the resource.
        public let useLongIds: Bool?

        public init(deadline: Date? = nil, resource: String? = nil, useLongIds: Bool? = nil) {
            self.deadline = deadline
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case deadline
            case resource
            case useLongIds
        }
    }

    public struct Image: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// Any block device mapping entries.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// The boot mode of the image. For more information, see Boot modes in the Amazon Elastic Compute Cloud User Guide.
        public let bootMode: BootModeValues?
        /// The date and time the image was created.
        public let creationDate: String?
        /// The date and time to deprecate the AMI, in UTC, in the following format: YYYY-MM-DDTHH:MM:SSZ. If you specified a value for seconds, Amazon EC2 rounds the seconds to the nearest minute.
        public let deprecationTime: String?
        /// The description of the AMI that was provided during image creation.
        public let description: String?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// The hypervisor type of the image.
        public let hypervisor: HypervisorType?
        /// The ID of the AMI.
        public let imageId: String?
        /// The location of the AMI.
        public let imageLocation: String?
        /// The AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.
        public let imageOwnerAlias: String?
        /// The type of image.
        public let imageType: ImageTypeValues?
        /// The kernel associated with the image, if any. Only applicable for machine images.
        public let kernelId: String?
        /// The name of the AMI that was provided during image creation.
        public let name: String?
        /// The AWS account ID of the image owner.
        public let ownerId: String?
        /// This value is set to windows for Windows AMIs; otherwise, it is blank.
        public let platform: PlatformValues?
        /// The platform details associated with the billing code of the AMI. For more information, see Obtaining Billing Information in the Amazon Elastic Compute Cloud User Guide.
        public let platformDetails: String?
        /// Any product codes associated with the AMI.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// Indicates whether the image has public launch permissions. The value is true if this image has public launch permissions or false if it has only implicit and explicit launch permissions.
        public let `public`: Bool?
        /// The RAM disk associated with the image, if any. Only applicable for machine images.
        public let ramdiskId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// The type of root device used by the AMI. The AMI can use an EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// The current state of the AMI. If the state is available, the image is successfully registered and can be used to launch an instance.
        public let state: ImageState?
        /// The reason for the state change.
        public let stateReason: StateReason?
        /// Any tags assigned to the image.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The operation of the Amazon EC2 instance and the billing code that is associated with the AMI. usageOperation corresponds to the lineitem/Operation column on your AWS Cost and Usage Report and in the AWS Price List API. For the list of UsageOperation codes, see Platform Details and Usage Operation Billing Codes in the Amazon Elastic Compute Cloud User Guide.
        public let usageOperation: String?
        /// The type of virtualization of the AMI.
        public let virtualizationType: VirtualizationType?

        public init(architecture: ArchitectureValues? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, bootMode: BootModeValues? = nil, creationDate: String? = nil, deprecationTime: String? = nil, description: String? = nil, enaSupport: Bool? = nil, hypervisor: HypervisorType? = nil, imageId: String? = nil, imageLocation: String? = nil, imageOwnerAlias: String? = nil, imageType: ImageTypeValues? = nil, kernelId: String? = nil, name: String? = nil, ownerId: String? = nil, platform: PlatformValues? = nil, platformDetails: String? = nil, productCodes: [ProductCode]? = nil, public: Bool? = nil, ramdiskId: String? = nil, rootDeviceName: String? = nil, rootDeviceType: DeviceType? = nil, sriovNetSupport: String? = nil, state: ImageState? = nil, stateReason: StateReason? = nil, tags: [Tag]? = nil, usageOperation: String? = nil, virtualizationType: VirtualizationType? = nil) {
            self.architecture = architecture
            self.blockDeviceMappings = blockDeviceMappings
            self.bootMode = bootMode
            self.creationDate = creationDate
            self.deprecationTime = deprecationTime
            self.description = description
            self.enaSupport = enaSupport
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.imageLocation = imageLocation
            self.imageOwnerAlias = imageOwnerAlias
            self.imageType = imageType
            self.kernelId = kernelId
            self.name = name
            self.ownerId = ownerId
            self.platform = platform
            self.platformDetails = platformDetails
            self.productCodes = productCodes
            self.`public` = `public`
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.rootDeviceType = rootDeviceType
            self.sriovNetSupport = sriovNetSupport
            self.state = state
            self.stateReason = stateReason
            self.tags = tags
            self.usageOperation = usageOperation
            self.virtualizationType = virtualizationType
        }

        private enum CodingKeys: String, CodingKey {
            case architecture
            case blockDeviceMappings = "blockDeviceMapping"
            case bootMode
            case creationDate
            case deprecationTime
            case description
            case enaSupport
            case hypervisor
            case imageId
            case imageLocation
            case imageOwnerAlias
            case imageType
            case kernelId
            case name
            case ownerId = "imageOwnerId"
            case platform
            case platformDetails
            case productCodes
            case `public` = "isPublic"
            case ramdiskId
            case rootDeviceName
            case rootDeviceType
            case sriovNetSupport
            case state = "imageState"
            case stateReason
            case tags = "tagSet"
            case usageOperation
            case virtualizationType
        }
    }

    public struct ImageAttribute: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LaunchPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The block device mapping entries.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        public let bootMode: AttributeValue?
        /// A description for the AMI.
        public let description: AttributeValue?
        /// The ID of the AMI.
        public let imageId: String?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// The launch permissions.
        @OptionalCustomCoding<ArrayCoder<_LaunchPermissionsEncoding, LaunchPermission>>
        public var launchPermissions: [LaunchPermission]?
        /// The product codes.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, bootMode: AttributeValue? = nil, description: AttributeValue? = nil, imageId: String? = nil, kernelId: AttributeValue? = nil, launchPermissions: [LaunchPermission]? = nil, productCodes: [ProductCode]? = nil, ramdiskId: AttributeValue? = nil, sriovNetSupport: AttributeValue? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.bootMode = bootMode
            self.description = description
            self.imageId = imageId
            self.kernelId = kernelId
            self.launchPermissions = launchPermissions
            self.productCodes = productCodes
            self.ramdiskId = ramdiskId
            self.sriovNetSupport = sriovNetSupport
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case bootMode
            case description
            case imageId
            case kernelId = "kernel"
            case launchPermissions = "launchPermission"
            case productCodes
            case ramdiskId = "ramdisk"
            case sriovNetSupport
        }
    }

    public struct ImageDiskContainer: AWSEncodableShape {
        /// The description of the disk image.
        public let description: String?
        /// The block device mapping for the disk.
        public let deviceName: String?
        /// The format of the disk image being imported. Valid values: OVA | VHD | VHDX | VMDK | RAW
        public let format: String?
        /// The ID of the EBS snapshot to be used for importing the snapshot.
        public let snapshotId: String?
        /// The URL to the Amazon S3-based disk image being imported. The URL can either be a https URL (https://..) or an Amazon S3 URL (s3://..)
        public let url: String?
        /// The S3 bucket for the disk image.
        public let userBucket: UserBucket?

        public init(description: String? = nil, deviceName: String? = nil, format: String? = nil, snapshotId: String? = nil, url: String? = nil, userBucket: UserBucket? = nil) {
            self.description = description
            self.deviceName = deviceName
            self.format = format
            self.snapshotId = snapshotId
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case deviceName = "DeviceName"
            case format = "Format"
            case snapshotId = "SnapshotId"
            case url = "Url"
            case userBucket = "UserBucket"
        }
    }

    public struct ImportClientVpnClientCertificateRevocationListRequest: AWSEncodableShape {
        /// The client certificate revocation list file. For more information, see Generate a Client Certificate Revocation List in the AWS Client VPN Administrator Guide.
        public let certificateRevocationList: String
        /// The ID of the Client VPN endpoint to which the client certificate revocation list applies.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(certificateRevocationList: String, clientVpnEndpointId: String, dryRun: Bool? = nil) {
            self.certificateRevocationList = certificateRevocationList
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case certificateRevocationList = "CertificateRevocationList"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
        }
    }

    public struct ImportClientVpnClientCertificateRevocationListResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ImportImageLicenseConfigurationRequest: AWSEncodableShape {
        /// The ARN of a license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct ImportImageLicenseConfigurationResponse: AWSDecodableShape {
        /// The ARN of a license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn
        }
    }

    public struct ImportImageRequest: AWSEncodableShape {
        public struct _DiskContainersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture of the virtual machine. Valid values: i386 | x86_64 | arm64
        public let architecture: String?
        /// The client-specific data.
        public let clientData: ClientData?
        /// The token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// A description string for the import image task.
        public let description: String?
        /// Information about the disk containers.
        @OptionalCustomCoding<ArrayCoder<_DiskContainersEncoding, ImageDiskContainer>>
        public var diskContainers: [ImageDiskContainer]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// The target hypervisor platform. Valid values: xen
        public let hypervisor: String?
        /// An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the Region that the AMI is being copied to. Amazon EBS does not support asymmetric CMKs.
        public let kmsKeyId: String?
        /// The ARNs of the license configurations.
        @OptionalCustomCoding<ArrayCoder<_LicenseSpecificationsEncoding, ImportImageLicenseConfigurationRequest>>
        public var licenseSpecifications: [ImportImageLicenseConfigurationRequest]?
        /// The license type to be used for the Amazon Machine Image (AMI) after importing. By default, we detect the source-system operating system (OS) and apply the appropriate license. Specify AWS to replace the source-system license with an AWS license, if appropriate. Specify BYOL to retain the source-system license, if appropriate. To use BYOL, you must have existing licenses with rights to use these licenses in a third party cloud, such as AWS. For more information, see Prerequisites in the VM Import/Export User Guide.
        public let licenseType: String?
        /// The operating system of the virtual machine. Valid values: Windows | Linux
        public let platform: String?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// The tags to apply to the import image task during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(architecture: String? = nil, clientData: ClientData? = nil, clientToken: String? = nil, description: String? = nil, diskContainers: [ImageDiskContainer]? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, hypervisor: String? = nil, kmsKeyId: String? = nil, licenseSpecifications: [ImportImageLicenseConfigurationRequest]? = nil, licenseType: String? = nil, platform: String? = nil, roleName: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.architecture = architecture
            self.clientData = clientData
            self.clientToken = clientToken
            self.description = description
            self.diskContainers = diskContainers
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.roleName = roleName
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case architecture = "Architecture"
            case clientData = "ClientData"
            case clientToken = "ClientToken"
            case description = "Description"
            case diskContainers = "DiskContainer"
            case dryRun = "DryRun"
            case encrypted = "Encrypted"
            case hypervisor = "Hypervisor"
            case kmsKeyId = "KmsKeyId"
            case licenseSpecifications = "LicenseSpecifications"
            case licenseType = "LicenseType"
            case platform = "Platform"
            case roleName = "RoleName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ImportImageResult: AWSDecodableShape {
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SnapshotDetailsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture of the virtual machine.
        public let architecture: String?
        /// A description of the import task.
        public let description: String?
        /// Indicates whether the AMI is encrypted.
        public let encrypted: Bool?
        /// The target hypervisor of the import task.
        public let hypervisor: String?
        /// The ID of the Amazon Machine Image (AMI) created by the import task.
        public let imageId: String?
        /// The task ID of the import image task.
        public let importTaskId: String?
        /// The identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted AMI.
        public let kmsKeyId: String?
        /// The ARNs of the license configurations.
        @OptionalCustomCoding<ArrayCoder<_LicenseSpecificationsEncoding, ImportImageLicenseConfigurationResponse>>
        public var licenseSpecifications: [ImportImageLicenseConfigurationResponse]?
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// The operating system of the virtual machine.
        public let platform: String?
        /// The progress of the task.
        public let progress: String?
        /// Information about the snapshots.
        @OptionalCustomCoding<ArrayCoder<_SnapshotDetailsEncoding, SnapshotDetail>>
        public var snapshotDetails: [SnapshotDetail]?
        /// A brief status of the task.
        public let status: String?
        /// A detailed status message of the import task.
        public let statusMessage: String?
        /// Any tags assigned to the import image task.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(architecture: String? = nil, description: String? = nil, encrypted: Bool? = nil, hypervisor: String? = nil, imageId: String? = nil, importTaskId: String? = nil, kmsKeyId: String? = nil, licenseSpecifications: [ImportImageLicenseConfigurationResponse]? = nil, licenseType: String? = nil, platform: String? = nil, progress: String? = nil, snapshotDetails: [SnapshotDetail]? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.architecture = architecture
            self.description = description
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.importTaskId = importTaskId
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.progress = progress
            self.snapshotDetails = snapshotDetails
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case architecture
            case description
            case encrypted
            case hypervisor
            case imageId
            case importTaskId
            case kmsKeyId
            case licenseSpecifications
            case licenseType
            case platform
            case progress
            case snapshotDetails = "snapshotDetailSet"
            case status
            case statusMessage
            case tags = "tagSet"
        }
    }

    public struct ImportImageTask: AWSDecodableShape {
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SnapshotDetailsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architecture of the virtual machine. Valid values: i386 | x86_64 | arm64
        public let architecture: String?
        /// A description of the import task.
        public let description: String?
        /// Indicates whether the image is encrypted.
        public let encrypted: Bool?
        /// The target hypervisor for the import task. Valid values: xen
        public let hypervisor: String?
        /// The ID of the Amazon Machine Image (AMI) of the imported virtual machine.
        public let imageId: String?
        /// The ID of the import image task.
        public let importTaskId: String?
        /// The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted image.
        public let kmsKeyId: String?
        /// The ARNs of the license configurations that are associated with the import image task.
        @OptionalCustomCoding<ArrayCoder<_LicenseSpecificationsEncoding, ImportImageLicenseConfigurationResponse>>
        public var licenseSpecifications: [ImportImageLicenseConfigurationResponse]?
        /// The license type of the virtual machine.
        public let licenseType: String?
        /// The description string for the import image task.
        public let platform: String?
        /// The percentage of progress of the import image task.
        public let progress: String?
        /// Information about the snapshots.
        @OptionalCustomCoding<ArrayCoder<_SnapshotDetailsEncoding, SnapshotDetail>>
        public var snapshotDetails: [SnapshotDetail]?
        /// A brief status for the import image task.
        public let status: String?
        /// A descriptive status message for the import image task.
        public let statusMessage: String?
        /// The tags for the import image task.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(architecture: String? = nil, description: String? = nil, encrypted: Bool? = nil, hypervisor: String? = nil, imageId: String? = nil, importTaskId: String? = nil, kmsKeyId: String? = nil, licenseSpecifications: [ImportImageLicenseConfigurationResponse]? = nil, licenseType: String? = nil, platform: String? = nil, progress: String? = nil, snapshotDetails: [SnapshotDetail]? = nil, status: String? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.architecture = architecture
            self.description = description
            self.encrypted = encrypted
            self.hypervisor = hypervisor
            self.imageId = imageId
            self.importTaskId = importTaskId
            self.kmsKeyId = kmsKeyId
            self.licenseSpecifications = licenseSpecifications
            self.licenseType = licenseType
            self.platform = platform
            self.progress = progress
            self.snapshotDetails = snapshotDetails
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case architecture
            case description
            case encrypted
            case hypervisor
            case imageId
            case importTaskId
            case kmsKeyId
            case licenseSpecifications
            case licenseType
            case platform
            case progress
            case snapshotDetails = "snapshotDetailSet"
            case status
            case statusMessage
            case tags = "tagSet"
        }
    }

    public struct ImportInstanceLaunchSpecification: AWSEncodableShape {
        public struct _GroupIdsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _GroupNamesEncoding: ArrayCoderProperties { public static let member = "SecurityGroup" }

        /// Reserved.
        public let additionalInfo: String?
        /// The architecture of the instance.
        public let architecture: ArchitectureValues?
        /// The security group IDs.
        @OptionalCustomCoding<ArrayCoder<_GroupIdsEncoding, String>>
        public var groupIds: [String]?
        /// The security group names.
        @OptionalCustomCoding<ArrayCoder<_GroupNamesEncoding, String>>
        public var groupNames: [String]?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The instance type. For more information about the instance types that you can import, see Instance Types in the VM Import/Export User Guide.
        public let instanceType: InstanceType?
        /// Indicates whether monitoring is enabled.
        public let monitoring: Bool?
        /// The placement information for the instance.
        public let placement: Placement?
        /// [EC2-VPC] An available IP address from the IP address range of the subnet.
        public let privateIpAddress: String?
        /// [EC2-VPC] The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The Base64-encoded user data to make available to the instance.
        public let userData: UserData?

        public init(additionalInfo: String? = nil, architecture: ArchitectureValues? = nil, groupIds: [String]? = nil, groupNames: [String]? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceType: InstanceType? = nil, monitoring: Bool? = nil, placement: Placement? = nil, privateIpAddress: String? = nil, subnetId: String? = nil, userData: UserData? = nil) {
            self.additionalInfo = additionalInfo
            self.architecture = architecture
            self.groupIds = groupIds
            self.groupNames = groupNames
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.monitoring = monitoring
            self.placement = placement
            self.privateIpAddress = privateIpAddress
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo
            case architecture
            case groupIds = "GroupId"
            case groupNames = "GroupName"
            case instanceInitiatedShutdownBehavior
            case instanceType
            case monitoring
            case placement
            case privateIpAddress
            case subnetId
            case userData
        }
    }

    public struct ImportInstanceRequest: AWSEncodableShape {
        /// A description for the instance being imported.
        public let description: String?
        /// The disk image.
        @OptionalCustomCoding<StandardArrayCoder>
        public var diskImages: [DiskImage]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The launch specification.
        public let launchSpecification: ImportInstanceLaunchSpecification?
        /// The instance operating system.
        public let platform: PlatformValues

        public init(description: String? = nil, diskImages: [DiskImage]? = nil, dryRun: Bool? = nil, launchSpecification: ImportInstanceLaunchSpecification? = nil, platform: PlatformValues) {
            self.description = description
            self.diskImages = diskImages
            self.dryRun = dryRun
            self.launchSpecification = launchSpecification
            self.platform = platform
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case diskImages = "diskImage"
            case dryRun
            case launchSpecification
            case platform
        }
    }

    public struct ImportInstanceResult: AWSDecodableShape {
        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask
        }
    }

    public struct ImportInstanceTaskDetails: AWSDecodableShape {
        public struct _VolumesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the task.
        public let description: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The instance operating system.
        public let platform: PlatformValues?
        /// The volumes.
        @OptionalCustomCoding<ArrayCoder<_VolumesEncoding, ImportInstanceVolumeDetailItem>>
        public var volumes: [ImportInstanceVolumeDetailItem]?

        public init(description: String? = nil, instanceId: String? = nil, platform: PlatformValues? = nil, volumes: [ImportInstanceVolumeDetailItem]? = nil) {
            self.description = description
            self.instanceId = instanceId
            self.platform = platform
            self.volumes = volumes
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case instanceId
            case platform
            case volumes
        }
    }

    public struct ImportInstanceVolumeDetailItem: AWSDecodableShape {
        /// The Availability Zone where the resulting instance will reside.
        public let availabilityZone: String?
        /// The number of bytes converted so far.
        public let bytesConverted: Int64?
        /// A description of the task.
        public let description: String?
        /// The image.
        public let image: DiskImageDescription?
        /// The status of the import of this particular disk image.
        public let status: String?
        /// The status information or errors related to the disk image.
        public let statusMessage: String?
        /// The volume.
        public let volume: DiskImageVolumeDescription?

        public init(availabilityZone: String? = nil, bytesConverted: Int64? = nil, description: String? = nil, image: DiskImageDescription? = nil, status: String? = nil, statusMessage: String? = nil, volume: DiskImageVolumeDescription? = nil) {
            self.availabilityZone = availabilityZone
            self.bytesConverted = bytesConverted
            self.description = description
            self.image = image
            self.status = status
            self.statusMessage = statusMessage
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case bytesConverted
            case description
            case image
            case status
            case statusMessage
            case volume
        }
    }

    public struct ImportKeyPairRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// A unique name for the key pair.
        public let keyName: String
        /// The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.
        public let publicKeyMaterial: Data
        /// The tags to apply to the imported key pair.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(dryRun: Bool? = nil, keyName: String, publicKeyMaterial: Data, tagSpecifications: [TagSpecification]? = nil) {
            self.dryRun = dryRun
            self.keyName = keyName
            self.publicKeyMaterial = publicKeyMaterial
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case keyName
            case publicKeyMaterial
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ImportKeyPairResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The MD5 public key fingerprint as specified in section 4 of RFC 4716.
        public let keyFingerprint: String?
        /// The key pair name that you provided.
        public let keyName: String?
        /// The ID of the resulting key pair.
        public let keyPairId: String?
        /// The tags applied to the imported key pair.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(keyFingerprint: String? = nil, keyName: String? = nil, keyPairId: String? = nil, tags: [Tag]? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
            self.keyPairId = keyPairId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint
            case keyName
            case keyPairId
            case tags = "tagSet"
        }
    }

    public struct ImportSnapshotRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The client-specific data.
        public let clientData: ClientData?
        /// Token to enable idempotency for VM import requests.
        public let clientToken: String?
        /// The description string for the import snapshot task.
        public let description: String?
        /// Information about the disk container.
        public let diskContainer: SnapshotDiskContainer?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using KmsKeyId. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?
        /// An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default CMK; if this parameter is not specified, the default CMK for EBS is used. If a KmsKeyId is specified, the Encrypted flag must also be set.  The CMK identifier may be provided in any of the following formats:    Key ID   Key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   ARN using key ID. The ID ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the key namespace, and then the CMK ID. For example, arn:aws:kms:us-east-1:012345678910:key/abcd1234-a123-456a-a12b-a123b4cd56ef.   ARN using key alias. The alias ARN contains the arn:aws:kms namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the alias namespace, and then the CMK alias. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.    AWS parses KmsKeyId asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure.  The specified CMK must exist in the Region that the snapshot is being copied to. Amazon EBS does not support asymmetric CMKs.
        public let kmsKeyId: String?
        /// The name of the role to use when not using the default role, 'vmimport'.
        public let roleName: String?
        /// The tags to apply to the import snapshot task during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientData: ClientData? = nil, clientToken: String? = nil, description: String? = nil, diskContainer: SnapshotDiskContainer? = nil, dryRun: Bool? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, roleName: String? = nil, tagSpecifications: [TagSpecification]? = nil) {
            self.clientData = clientData
            self.clientToken = clientToken
            self.description = description
            self.diskContainer = diskContainer
            self.dryRun = dryRun
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.roleName = roleName
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientData = "ClientData"
            case clientToken = "ClientToken"
            case description = "Description"
            case diskContainer = "DiskContainer"
            case dryRun = "DryRun"
            case encrypted = "Encrypted"
            case kmsKeyId = "KmsKeyId"
            case roleName = "RoleName"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct ImportSnapshotResult: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the import snapshot task.
        public let description: String?
        /// The ID of the import snapshot task.
        public let importTaskId: String?
        /// Information about the import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// Any tags assigned to the import snapshot task.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, importTaskId: String? = nil, snapshotTaskDetail: SnapshotTaskDetail? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.importTaskId = importTaskId
            self.snapshotTaskDetail = snapshotTaskDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case importTaskId
            case snapshotTaskDetail
            case tags = "tagSet"
        }
    }

    public struct ImportSnapshotTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the import snapshot task.
        public let description: String?
        /// The ID of the import snapshot task.
        public let importTaskId: String?
        /// Describes an import snapshot task.
        public let snapshotTaskDetail: SnapshotTaskDetail?
        /// The tags for the import snapshot task.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, importTaskId: String? = nil, snapshotTaskDetail: SnapshotTaskDetail? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.importTaskId = importTaskId
            self.snapshotTaskDetail = snapshotTaskDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case importTaskId
            case snapshotTaskDetail
            case tags = "tagSet"
        }
    }

    public struct ImportVolumeRequest: AWSEncodableShape {
        /// The Availability Zone for the resulting EBS volume.
        public let availabilityZone: String
        /// A description of the volume.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The disk image.
        public let image: DiskImageDetail
        /// The volume size.
        public let volume: VolumeDetail

        public init(availabilityZone: String, description: String? = nil, dryRun: Bool? = nil, image: DiskImageDetail, volume: VolumeDetail) {
            self.availabilityZone = availabilityZone
            self.description = description
            self.dryRun = dryRun
            self.image = image
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case description
            case dryRun
            case image
            case volume
        }
    }

    public struct ImportVolumeResult: AWSDecodableShape {
        /// Information about the conversion task.
        public let conversionTask: ConversionTask?

        public init(conversionTask: ConversionTask? = nil) {
            self.conversionTask = conversionTask
        }

        private enum CodingKeys: String, CodingKey {
            case conversionTask
        }
    }

    public struct ImportVolumeTaskDetails: AWSDecodableShape {
        /// The Availability Zone where the resulting volume will reside.
        public let availabilityZone: String?
        /// The number of bytes converted so far.
        public let bytesConverted: Int64?
        /// The description you provided when starting the import volume task.
        public let description: String?
        /// The image.
        public let image: DiskImageDescription?
        /// The volume.
        public let volume: DiskImageVolumeDescription?

        public init(availabilityZone: String? = nil, bytesConverted: Int64? = nil, description: String? = nil, image: DiskImageDescription? = nil, volume: DiskImageVolumeDescription? = nil) {
            self.availabilityZone = availabilityZone
            self.bytesConverted = bytesConverted
            self.description = description
            self.image = image
            self.volume = volume
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case bytesConverted
            case description
            case image
            case volume
        }
    }

    public struct InferenceAcceleratorInfo: AWSDecodableShape {
        /// Describes the Inference accelerators for the instance type.
        @OptionalCustomCoding<StandardArrayCoder>
        public var accelerators: [InferenceDeviceInfo]?

        public init(accelerators: [InferenceDeviceInfo]? = nil) {
            self.accelerators = accelerators
        }

        private enum CodingKeys: String, CodingKey {
            case accelerators
        }
    }

    public struct InferenceDeviceInfo: AWSDecodableShape {
        /// The number of Inference accelerators for the instance type.
        public let count: Int?
        /// The manufacturer of the Inference accelerator.
        public let manufacturer: String?
        /// The name of the Inference accelerator.
        public let name: String?

        public init(count: Int? = nil, manufacturer: String? = nil, name: String? = nil) {
            self.count = count
            self.manufacturer = manufacturer
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case count
            case manufacturer
            case name
        }
    }

    public struct Instance: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticGpuAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticInferenceAcceleratorAssociationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicensesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The AMI launch index, which can be used to find this instance in the launch group.
        public let amiLaunchIndex: Int?
        /// The architecture of the image.
        public let architecture: ArchitectureValues?
        /// Any block device mapping entries for the instance.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, InstanceBlockDeviceMapping>>
        public var blockDeviceMappings: [InstanceBlockDeviceMapping]?
        /// The boot mode of the instance. For more information, see Boot modes in the Amazon EC2 User Guide.
        public let bootMode: BootModeValues?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String?
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: CapacityReservationSpecificationResponse?
        /// The idempotency token you provided when you launched the instance, if applicable.
        public let clientToken: String?
        /// The CPU options for the instance.
        public let cpuOptions: CpuOptions?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: Bool?
        /// The Elastic GPU associated with the instance.
        @OptionalCustomCoding<ArrayCoder<_ElasticGpuAssociationsEncoding, ElasticGpuAssociation>>
        public var elasticGpuAssociations: [ElasticGpuAssociation]?
        ///  The elastic inference accelerator associated with the instance.
        @OptionalCustomCoding<ArrayCoder<_ElasticInferenceAcceleratorAssociationsEncoding, ElasticInferenceAcceleratorAssociation>>
        public var elasticInferenceAcceleratorAssociations: [ElasticInferenceAcceleratorAssociation]?
        /// Specifies whether enhanced networking with ENA is enabled.
        public let enaSupport: Bool?
        /// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
        public let enclaveOptions: EnclaveOptions?
        /// Indicates whether the instance is enabled for hibernation.
        public let hibernationOptions: HibernationOptions?
        /// The hypervisor type of the instance. The value xen is used for both Xen and Nitro hypervisors.
        public let hypervisor: HypervisorType?
        /// The IAM instance profile associated with the instance, if applicable.
        public let iamInstanceProfile: IamInstanceProfile?
        /// The ID of the AMI used to launch the instance.
        public let imageId: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// Indicates whether this is a Spot Instance or a Scheduled Instance.
        public let instanceLifecycle: InstanceLifecycleType?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The kernel associated with this instance, if applicable.
        public let kernelId: String?
        /// The name of the key pair, if this instance was launched with an associated key pair.
        public let keyName: String?
        /// The time the instance was launched.
        public let launchTime: Date?
        /// The license configurations.
        @OptionalCustomCoding<ArrayCoder<_LicensesEncoding, LicenseConfiguration>>
        public var licenses: [LicenseConfiguration]?
        /// The metadata options for the instance.
        public let metadataOptions: InstanceMetadataOptionsResponse?
        /// The monitoring for the instance.
        public let monitoring: Monitoring?
        /// [EC2-VPC] The network interfaces for the instance.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterface>>
        public var networkInterfaces: [InstanceNetworkInterface]?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The location where the instance launched, if applicable.
        public let placement: Placement?
        /// The value is Windows for Windows instances; otherwise blank.
        public let platform: PlatformValues?
        /// (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.  [EC2-VPC] The Amazon-provided DNS server resolves Amazon-provided private DNS hostnames if you've enabled DNS resolution and DNS hostnames in your VPC. If you are not using the Amazon-provided DNS server in your VPC, your custom domain name servers must resolve the hostname as appropriate.
        public let privateDnsName: String?
        /// The private IPv4 address assigned to the instance.
        public let privateIpAddress: String?
        /// The product codes attached to this instance, if applicable.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// (IPv4 only) The public DNS name assigned to the instance. This name is not available until the instance enters the running state. For EC2-VPC, this name is only available if you've enabled DNS hostnames for your VPC.
        public let publicDnsName: String?
        /// The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable. A Carrier IP address only applies to an instance launched in a subnet associated with a Wavelength Zone.
        public let publicIpAddress: String?
        /// The RAM disk associated with this instance, if applicable.
        public let ramdiskId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
        public let rootDeviceType: DeviceType?
        /// The security groups for the instance.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, GroupIdentifier>>
        public var securityGroups: [GroupIdentifier]?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: Bool?
        /// If the request is a Spot Instance request, the ID of the request.
        public let spotInstanceRequestId: String?
        /// Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: String?
        /// The current state of the instance.
        public let state: InstanceState?
        /// The reason for the most recent state transition.
        public let stateReason: StateReason?
        /// The reason for the most recent state transition. This might be an empty string.
        public let stateTransitionReason: String?
        /// [EC2-VPC] The ID of the subnet in which the instance is running.
        public let subnetId: String?
        /// Any tags assigned to the instance.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The virtualization type of the instance.
        public let virtualizationType: VirtualizationType?
        /// [EC2-VPC] The ID of the VPC in which the instance is running.
        public let vpcId: String?

        public init(amiLaunchIndex: Int? = nil, architecture: ArchitectureValues? = nil, blockDeviceMappings: [InstanceBlockDeviceMapping]? = nil, bootMode: BootModeValues? = nil, capacityReservationId: String? = nil, capacityReservationSpecification: CapacityReservationSpecificationResponse? = nil, clientToken: String? = nil, cpuOptions: CpuOptions? = nil, ebsOptimized: Bool? = nil, elasticGpuAssociations: [ElasticGpuAssociation]? = nil, elasticInferenceAcceleratorAssociations: [ElasticInferenceAcceleratorAssociation]? = nil, enaSupport: Bool? = nil, enclaveOptions: EnclaveOptions? = nil, hibernationOptions: HibernationOptions? = nil, hypervisor: HypervisorType? = nil, iamInstanceProfile: IamInstanceProfile? = nil, imageId: String? = nil, instanceId: String? = nil, instanceLifecycle: InstanceLifecycleType? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, launchTime: Date? = nil, licenses: [LicenseConfiguration]? = nil, metadataOptions: InstanceMetadataOptionsResponse? = nil, monitoring: Monitoring? = nil, networkInterfaces: [InstanceNetworkInterface]? = nil, outpostArn: String? = nil, placement: Placement? = nil, platform: PlatformValues? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, productCodes: [ProductCode]? = nil, publicDnsName: String? = nil, publicIpAddress: String? = nil, ramdiskId: String? = nil, rootDeviceName: String? = nil, rootDeviceType: DeviceType? = nil, securityGroups: [GroupIdentifier]? = nil, sourceDestCheck: Bool? = nil, spotInstanceRequestId: String? = nil, sriovNetSupport: String? = nil, state: InstanceState? = nil, stateReason: StateReason? = nil, stateTransitionReason: String? = nil, subnetId: String? = nil, tags: [Tag]? = nil, virtualizationType: VirtualizationType? = nil, vpcId: String? = nil) {
            self.amiLaunchIndex = amiLaunchIndex
            self.architecture = architecture
            self.blockDeviceMappings = blockDeviceMappings
            self.bootMode = bootMode
            self.capacityReservationId = capacityReservationId
            self.capacityReservationSpecification = capacityReservationSpecification
            self.clientToken = clientToken
            self.cpuOptions = cpuOptions
            self.ebsOptimized = ebsOptimized
            self.elasticGpuAssociations = elasticGpuAssociations
            self.elasticInferenceAcceleratorAssociations = elasticInferenceAcceleratorAssociations
            self.enaSupport = enaSupport
            self.enclaveOptions = enclaveOptions
            self.hibernationOptions = hibernationOptions
            self.hypervisor = hypervisor
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceId = instanceId
            self.instanceLifecycle = instanceLifecycle
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchTime = launchTime
            self.licenses = licenses
            self.metadataOptions = metadataOptions
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.outpostArn = outpostArn
            self.placement = placement
            self.platform = platform
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.productCodes = productCodes
            self.publicDnsName = publicDnsName
            self.publicIpAddress = publicIpAddress
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.rootDeviceType = rootDeviceType
            self.securityGroups = securityGroups
            self.sourceDestCheck = sourceDestCheck
            self.spotInstanceRequestId = spotInstanceRequestId
            self.sriovNetSupport = sriovNetSupport
            self.state = state
            self.stateReason = stateReason
            self.stateTransitionReason = stateTransitionReason
            self.subnetId = subnetId
            self.tags = tags
            self.virtualizationType = virtualizationType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case amiLaunchIndex
            case architecture
            case blockDeviceMappings = "blockDeviceMapping"
            case bootMode
            case capacityReservationId
            case capacityReservationSpecification
            case clientToken
            case cpuOptions
            case ebsOptimized
            case elasticGpuAssociations = "elasticGpuAssociationSet"
            case elasticInferenceAcceleratorAssociations = "elasticInferenceAcceleratorAssociationSet"
            case enaSupport
            case enclaveOptions
            case hibernationOptions
            case hypervisor
            case iamInstanceProfile
            case imageId
            case instanceId
            case instanceLifecycle
            case instanceType
            case kernelId
            case keyName
            case launchTime
            case licenses = "licenseSet"
            case metadataOptions
            case monitoring
            case networkInterfaces = "networkInterfaceSet"
            case outpostArn
            case placement
            case platform
            case privateDnsName
            case privateIpAddress
            case productCodes
            case publicDnsName = "dnsName"
            case publicIpAddress = "ipAddress"
            case ramdiskId
            case rootDeviceName
            case rootDeviceType
            case securityGroups = "groupSet"
            case sourceDestCheck
            case spotInstanceRequestId
            case sriovNetSupport
            case state = "instanceState"
            case stateReason
            case stateTransitionReason = "reason"
            case subnetId
            case tags = "tagSet"
            case virtualizationType
            case vpcId
        }
    }

    public struct InstanceAttribute: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The block device mapping of the instance.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, InstanceBlockDeviceMapping>>
        public var blockDeviceMappings: [InstanceBlockDeviceMapping]?
        /// If the value is true, you can't terminate the instance through the Amazon EC2 console, CLI, or API; otherwise, you can.
        public let disableApiTermination: AttributeBooleanValue?
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        public let ebsOptimized: AttributeBooleanValue?
        /// Indicates whether enhanced networking with ENA is enabled.
        public let enaSupport: AttributeBooleanValue?
        /// To enable the instance for Amazon Web Services Nitro Enclaves, set this parameter to true; otherwise, set it to false.
        public let enclaveOptions: EnclaveOptions?
        /// The security groups associated with the instance.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The ID of the instance.
        public let instanceId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// The instance type.
        public let instanceType: AttributeValue?
        /// The kernel ID.
        public let kernelId: AttributeValue?
        /// A list of product codes.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, ProductCode>>
        public var productCodes: [ProductCode]?
        /// The RAM disk ID.
        public let ramdiskId: AttributeValue?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: AttributeValue?
        /// Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is true, source/destination checks are enabled; otherwise, they are disabled. The default value is true. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.
        public let sourceDestCheck: AttributeBooleanValue?
        /// Indicates whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        public let sriovNetSupport: AttributeValue?
        /// The user data.
        public let userData: AttributeValue?

        public init(blockDeviceMappings: [InstanceBlockDeviceMapping]? = nil, disableApiTermination: AttributeBooleanValue? = nil, ebsOptimized: AttributeBooleanValue? = nil, enaSupport: AttributeBooleanValue? = nil, enclaveOptions: EnclaveOptions? = nil, groups: [GroupIdentifier]? = nil, instanceId: String? = nil, instanceInitiatedShutdownBehavior: AttributeValue? = nil, instanceType: AttributeValue? = nil, kernelId: AttributeValue? = nil, productCodes: [ProductCode]? = nil, ramdiskId: AttributeValue? = nil, rootDeviceName: AttributeValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, sriovNetSupport: AttributeValue? = nil, userData: AttributeValue? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.enaSupport = enaSupport
            self.enclaveOptions = enclaveOptions
            self.groups = groups
            self.instanceId = instanceId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.productCodes = productCodes
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.sourceDestCheck = sourceDestCheck
            self.sriovNetSupport = sriovNetSupport
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMapping"
            case disableApiTermination
            case ebsOptimized
            case enaSupport
            case enclaveOptions
            case groups = "groupSet"
            case instanceId
            case instanceInitiatedShutdownBehavior
            case instanceType
            case kernelId = "kernel"
            case productCodes
            case ramdiskId = "ramdisk"
            case rootDeviceName
            case sourceDestCheck
            case sriovNetSupport
            case userData
        }
    }

    public struct InstanceBlockDeviceMapping: AWSDecodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDevice?

        public init(deviceName: String? = nil, ebs: EbsInstanceBlockDevice? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName
            case ebs
        }
    }

    public struct InstanceBlockDeviceMappingSpecification: AWSEncodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: EbsInstanceBlockDeviceSpecification?
        /// suppress the specified device included in the block device mapping.
        public let noDevice: String?
        /// The virtual device name.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: EbsInstanceBlockDeviceSpecification? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName
            case ebs
            case noDevice
            case virtualName
        }
    }

    public struct InstanceCapacity: AWSDecodableShape {
        /// The number of instances that can be launched onto the Dedicated Host based on the host's available capacity.
        public let availableCapacity: Int?
        /// The instance type supported by the Dedicated Host.
        public let instanceType: String?
        /// The total number of instances that can be launched onto the Dedicated Host if there are no instances running on it.
        public let totalCapacity: Int?

        public init(availableCapacity: Int? = nil, instanceType: String? = nil, totalCapacity: Int? = nil) {
            self.availableCapacity = availableCapacity
            self.instanceType = instanceType
            self.totalCapacity = totalCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availableCapacity
            case instanceType
            case totalCapacity
        }
    }

    public struct InstanceCount: AWSDecodableShape {
        /// The number of listed Reserved Instances in the state specified by the state.
        public let instanceCount: Int?
        /// The states of the listed Reserved Instances.
        public let state: ListingState?

        public init(instanceCount: Int? = nil, state: ListingState? = nil) {
            self.instanceCount = instanceCount
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount
            case state
        }
    }

    public struct InstanceCreditSpecification: AWSDecodableShape {
        /// The credit option for CPU usage of the instance. Valid values are standard and unlimited.
        public let cpuCredits: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(cpuCredits: String? = nil, instanceId: String? = nil) {
            self.cpuCredits = cpuCredits
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits
            case instanceId
        }
    }

    public struct InstanceCreditSpecificationRequest: AWSEncodableShape {
        /// The credit option for CPU usage of the instance. Valid values are standard and unlimited.
        public let cpuCredits: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(cpuCredits: String? = nil, instanceId: String? = nil) {
            self.cpuCredits = cpuCredits
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
            case instanceId = "InstanceId"
        }
    }

    public struct InstanceEventWindow: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TimeRangesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more targets associated with the event window.
        public let associationTarget: InstanceEventWindowAssociationTarget?
        /// The cron expression defined for the event window.
        public let cronExpression: String?
        /// The ID of the event window.
        public let instanceEventWindowId: String?
        /// The name of the event window.
        public let name: String?
        /// The current state of the event window.
        public let state: InstanceEventWindowState?
        /// The instance tags associated with the event window.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// One or more time ranges defined for the event window.
        @OptionalCustomCoding<ArrayCoder<_TimeRangesEncoding, InstanceEventWindowTimeRange>>
        public var timeRanges: [InstanceEventWindowTimeRange]?

        public init(associationTarget: InstanceEventWindowAssociationTarget? = nil, cronExpression: String? = nil, instanceEventWindowId: String? = nil, name: String? = nil, state: InstanceEventWindowState? = nil, tags: [Tag]? = nil, timeRanges: [InstanceEventWindowTimeRange]? = nil) {
            self.associationTarget = associationTarget
            self.cronExpression = cronExpression
            self.instanceEventWindowId = instanceEventWindowId
            self.name = name
            self.state = state
            self.tags = tags
            self.timeRanges = timeRanges
        }

        private enum CodingKeys: String, CodingKey {
            case associationTarget
            case cronExpression
            case instanceEventWindowId
            case name
            case state
            case tags = "tagSet"
            case timeRanges = "timeRangeSet"
        }
    }

    public struct InstanceEventWindowAssociationRequest: AWSEncodableShape {
        public struct _DedicatedHostIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts to associate with the event window.
        @OptionalCustomCoding<ArrayCoder<_DedicatedHostIdsEncoding, String>>
        public var dedicatedHostIds: [String]?
        /// The IDs of the instances to associate with the event window. If the instance is on a Dedicated Host, you can't specify the Instance ID parameter; you must use the Dedicated Host ID parameter.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance tags to associate with the event window. Any instances associated with the tags will be associated with the event window.
        @OptionalCustomCoding<ArrayCoder<_InstanceTagsEncoding, Tag>>
        public var instanceTags: [Tag]?

        public init(dedicatedHostIds: [String]? = nil, instanceIds: [String]? = nil, instanceTags: [Tag]? = nil) {
            self.dedicatedHostIds = dedicatedHostIds
            self.instanceIds = instanceIds
            self.instanceTags = instanceTags
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedHostIds = "DedicatedHostId"
            case instanceIds = "InstanceId"
            case instanceTags = "InstanceTag"
        }
    }

    public struct InstanceEventWindowAssociationTarget: AWSDecodableShape {
        public struct _DedicatedHostIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts associated with the event window.
        @OptionalCustomCoding<ArrayCoder<_DedicatedHostIdsEncoding, String>>
        public var dedicatedHostIds: [String]?
        /// The IDs of the instances associated with the event window.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance tags associated with the event window. Any instances associated with the tags will be associated with the event window.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(dedicatedHostIds: [String]? = nil, instanceIds: [String]? = nil, tags: [Tag]? = nil) {
            self.dedicatedHostIds = dedicatedHostIds
            self.instanceIds = instanceIds
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedHostIds = "dedicatedHostIdSet"
            case instanceIds = "instanceIdSet"
            case tags = "tagSet"
        }
    }

    public struct InstanceEventWindowDisassociationRequest: AWSEncodableShape {
        public struct _DedicatedHostIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstanceTagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts to disassociate from the event window.
        @OptionalCustomCoding<ArrayCoder<_DedicatedHostIdsEncoding, String>>
        public var dedicatedHostIds: [String]?
        /// The IDs of the instances to disassociate from the event window.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]?
        /// The instance tags to disassociate from the event window. Any instances associated with the tags will be disassociated from the event window.
        @OptionalCustomCoding<ArrayCoder<_InstanceTagsEncoding, Tag>>
        public var instanceTags: [Tag]?

        public init(dedicatedHostIds: [String]? = nil, instanceIds: [String]? = nil, instanceTags: [Tag]? = nil) {
            self.dedicatedHostIds = dedicatedHostIds
            self.instanceIds = instanceIds
            self.instanceTags = instanceTags
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedHostIds = "DedicatedHostId"
            case instanceIds = "InstanceId"
            case instanceTags = "InstanceTag"
        }
    }

    public struct InstanceEventWindowStateChange: AWSDecodableShape {
        /// The ID of the event window.
        public let instanceEventWindowId: String?
        /// The current state of the event window.
        public let state: InstanceEventWindowState?

        public init(instanceEventWindowId: String? = nil, state: InstanceEventWindowState? = nil) {
            self.instanceEventWindowId = instanceEventWindowId
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindowId
            case state
        }
    }

    public struct InstanceEventWindowTimeRange: AWSDecodableShape {
        /// The hour when the time range ends.
        public let endHour: Int?
        /// The day on which the time range ends.
        public let endWeekDay: WeekDay?
        /// The hour when the time range begins.
        public let startHour: Int?
        /// The day on which the time range begins.
        public let startWeekDay: WeekDay?

        public init(endHour: Int? = nil, endWeekDay: WeekDay? = nil, startHour: Int? = nil, startWeekDay: WeekDay? = nil) {
            self.endHour = endHour
            self.endWeekDay = endWeekDay
            self.startHour = startHour
            self.startWeekDay = startWeekDay
        }

        private enum CodingKeys: String, CodingKey {
            case endHour
            case endWeekDay
            case startHour
            case startWeekDay
        }
    }

    public struct InstanceEventWindowTimeRangeRequest: AWSEncodableShape {
        /// The hour when the time range ends.
        public let endHour: Int?
        /// The day on which the time range ends.
        public let endWeekDay: WeekDay?
        /// The hour when the time range begins.
        public let startHour: Int?
        /// The day on which the time range begins.
        public let startWeekDay: WeekDay?

        public init(endHour: Int? = nil, endWeekDay: WeekDay? = nil, startHour: Int? = nil, startWeekDay: WeekDay? = nil) {
            self.endHour = endHour
            self.endWeekDay = endWeekDay
            self.startHour = startHour
            self.startWeekDay = startWeekDay
        }

        public func validate(name: String) throws {
            try self.validate(self.endHour, name: "endHour", parent: name, max: 23)
            try self.validate(self.endHour, name: "endHour", parent: name, min: 0)
            try self.validate(self.startHour, name: "startHour", parent: name, max: 23)
            try self.validate(self.startHour, name: "startHour", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case endHour = "EndHour"
            case endWeekDay = "EndWeekDay"
            case startHour = "StartHour"
            case startWeekDay = "StartWeekDay"
        }
    }

    public struct InstanceExportDetails: AWSDecodableShape {
        /// The ID of the resource being exported.
        public let instanceId: String?
        /// The target virtualization environment.
        public let targetEnvironment: ExportEnvironment?

        public init(instanceId: String? = nil, targetEnvironment: ExportEnvironment? = nil) {
            self.instanceId = instanceId
            self.targetEnvironment = targetEnvironment
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId
            case targetEnvironment
        }
    }

    public struct InstanceFamilyCreditSpecification: AWSDecodableShape {
        /// The default credit option for CPU usage of the instance family. Valid values are standard and unlimited.
        public let cpuCredits: String?
        /// The instance family.
        public let instanceFamily: UnlimitedSupportedInstanceFamily?

        public init(cpuCredits: String? = nil, instanceFamily: UnlimitedSupportedInstanceFamily? = nil) {
            self.cpuCredits = cpuCredits
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits
            case instanceFamily
        }
    }

    public struct InstanceIpv6Address: AWSEncodableShape & AWSDecodableShape {
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address
        }
    }

    public struct InstanceIpv6AddressRequest: AWSEncodableShape {
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct InstanceMarketOptionsRequest: AWSEncodableShape {
        /// The market type.
        public let marketType: MarketType?
        /// The options for Spot Instances.
        public let spotOptions: SpotMarketOptions?

        public init(marketType: MarketType? = nil, spotOptions: SpotMarketOptions? = nil) {
            self.marketType = marketType
            self.spotOptions = spotOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marketType = "MarketType"
            case spotOptions = "SpotOptions"
        }
    }

    public struct InstanceMetadataOptionsRequest: AWSEncodableShape {
        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata.
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: HttpTokensState?

        public init(httpEndpoint: InstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "HttpEndpoint"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
        }
    }

    public struct InstanceMetadataOptionsResponse: AWSDecodableShape {
        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata.
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: HttpTokensState?
        /// The state of the metadata option changes.  pending - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.  applied - The metadata options have been successfully applied on the instance.
        public let state: InstanceMetadataOptionsState?

        public init(httpEndpoint: InstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil, state: InstanceMetadataOptionsState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint
            case httpPutResponseHopLimit
            case httpTokens
            case state
        }
    }

    public struct InstanceMonitoring: AWSDecodableShape {
        /// The ID of the instance.
        public let instanceId: String?
        /// The monitoring for the instance.
        public let monitoring: Monitoring?

        public init(instanceId: String? = nil, monitoring: Monitoring? = nil) {
            self.instanceId = instanceId
            self.monitoring = monitoring
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId
            case monitoring
        }
    }

    public struct InstanceNetworkInterface: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The association information for an Elastic IPv4 associated with the network interface.
        public let association: InstanceNetworkInterfaceAssociation?
        /// The network interface attachment.
        public let attachment: InstanceNetworkInterfaceAttachment?
        /// The description.
        public let description: String?
        /// One or more security groups.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// Describes the type of network interface. Valid values: interface | efa | trunk
        public let interfaceType: String?
        /// One or more IPv6 addresses associated with the network interface.
        @OptionalCustomCoding<ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The MAC address.
        public let macAddress: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the account that created the network interface.
        public let ownerId: String?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses associated with the network interface.
        @OptionalCustomCoding<ArrayCoder<_PrivateIpAddressesEncoding, InstancePrivateIpAddress>>
        public var privateIpAddresses: [InstancePrivateIpAddress]?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: Bool?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(association: InstanceNetworkInterfaceAssociation? = nil, attachment: InstanceNetworkInterfaceAttachment? = nil, description: String? = nil, groups: [GroupIdentifier]? = nil, interfaceType: String? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, macAddress: String? = nil, networkInterfaceId: String? = nil, ownerId: String? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [InstancePrivateIpAddress]? = nil, sourceDestCheck: Bool? = nil, status: NetworkInterfaceStatus? = nil, subnetId: String? = nil, vpcId: String? = nil) {
            self.association = association
            self.attachment = attachment
            self.description = description
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6Addresses = ipv6Addresses
            self.macAddress = macAddress
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.sourceDestCheck = sourceDestCheck
            self.status = status
            self.subnetId = subnetId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case association
            case attachment
            case description
            case groups = "groupSet"
            case interfaceType
            case ipv6Addresses = "ipv6AddressesSet"
            case macAddress
            case networkInterfaceId
            case ownerId
            case privateDnsName
            case privateIpAddress
            case privateIpAddresses = "privateIpAddressesSet"
            case sourceDestCheck
            case status
            case subnetId
            case vpcId
        }
    }

    public struct InstanceNetworkInterfaceAssociation: AWSDecodableShape {
        /// The carrier IP address associated with the network interface.
        public let carrierIp: String?
        /// The ID of the owner of the Elastic IP address.
        public let ipOwnerId: String?
        /// The public DNS name.
        public let publicDnsName: String?
        /// The public IP address or Elastic IP address bound to the network interface.
        public let publicIp: String?

        public init(carrierIp: String? = nil, ipOwnerId: String? = nil, publicDnsName: String? = nil, publicIp: String? = nil) {
            self.carrierIp = carrierIp
            self.ipOwnerId = ipOwnerId
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case carrierIp
            case ipOwnerId
            case publicDnsName
            case publicIp
        }
    }

    public struct InstanceNetworkInterfaceAttachment: AWSDecodableShape {
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The time stamp when the attachment initiated.
        public let attachTime: Date?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The index of the device on the instance for the network interface attachment.
        public let deviceIndex: Int?
        /// The index of the network card.
        public let networkCardIndex: Int?
        /// The attachment state.
        public let status: AttachmentStatus?

        public init(attachmentId: String? = nil, attachTime: Date? = nil, deleteOnTermination: Bool? = nil, deviceIndex: Int? = nil, networkCardIndex: Int? = nil, status: AttachmentStatus? = nil) {
            self.attachmentId = attachmentId
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.deviceIndex = deviceIndex
            self.networkCardIndex = networkCardIndex
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId
            case attachTime
            case deleteOnTermination
            case deviceIndex
            case networkCardIndex
            case status
        }
    }

    public struct InstanceNetworkInterfaceSpecification: AWSEncodableShape & AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether to assign a carrier IP address to the network interface. You can only assign a carrier IP address to a network interface that is in a subnet in a Wavelength Zone. For more information about carrier IP addresses, see Carrier IP addresses in the Amazon Web Services Wavelength Developer Guide.
        public let associateCarrierIpAddress: Bool?
        /// Indicates whether to assign a public IPv4 address to an instance you launch in a VPC. The public IP address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public let associatePublicIpAddress: Bool?
        /// If set to true, the interface is deleted when the instance is terminated. You can specify true only if creating a new network interface when launching an instance.
        public let deleteOnTermination: Bool?
        /// The description of the network interface. Applies only if creating a network interface when launching an instance.
        public let description: String?
        /// The position of the network interface in the attachment order. A primary network interface has a device index of 0. If you specify a network interface when launching an instance, you must specify the device index.
        public let deviceIndex: Int?
        /// The IDs of the security groups for the network interface. Applies only if creating a network interface when launching an instance.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The type of network interface. To create an Elastic Fabric Adapter (EFA), specify efa. For more information, see Elastic Fabric Adapter in the Amazon Elastic Compute Cloud User Guide. Valid values: interface | efa
        public let interfaceType: String?
        /// A number of IPv6 addresses to assign to the network interface. Amazon EC2 chooses the IPv6 addresses from the range of the subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.
        public let ipv6AddressCount: Int?
        /// One or more IPv6 addresses to assign to the network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.
        @OptionalCustomCoding<ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
        public let networkCardIndex: Int?
        /// The ID of the network interface. If you are creating a Spot Fleet, omit this parameter because you can’t specify a network interface ID in a launch specification.
        public let networkInterfaceId: String?
        /// The private IPv4 address of the network interface. Applies only if creating a network interface when launching an instance. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses to assign to the network interface. Only one private IPv4 address can be designated as primary. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        @OptionalCustomCoding<ArrayCoder<_PrivateIpAddressesEncoding, PrivateIpAddressSpecification>>
        public var privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses. You can't specify this option and specify more than one private IP address using the private IP addresses option. You cannot specify this option if you're launching more than one instance in a RunInstances request.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet associated with the network interface. Applies only if creating a network interface when launching an instance.
        public let subnetId: String?

        public init(associateCarrierIpAddress: Bool? = nil, associatePublicIpAddress: Bool? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, groups: [String]? = nil, interfaceType: String? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, networkCardIndex: Int? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associateCarrierIpAddress = "AssociateCarrierIpAddress"
            case associatePublicIpAddress
            case deleteOnTermination
            case description
            case deviceIndex
            case groups = "SecurityGroupId"
            case interfaceType = "InterfaceType"
            case ipv6AddressCount
            case ipv6Addresses = "ipv6AddressesSet"
            case networkCardIndex = "NetworkCardIndex"
            case networkInterfaceId
            case privateIpAddress
            case privateIpAddresses = "privateIpAddressesSet"
            case secondaryPrivateIpAddressCount
            case subnetId
        }
    }

    public struct InstancePrivateIpAddress: AWSDecodableShape {
        /// The association information for an Elastic IP address for the network interface.
        public let association: InstanceNetworkInterfaceAssociation?
        /// Indicates whether this IPv4 address is the primary private IP address of the network interface.
        public let primary: Bool?
        /// The private IPv4 DNS name.
        public let privateDnsName: String?
        /// The private IPv4 address of the network interface.
        public let privateIpAddress: String?

        public init(association: InstanceNetworkInterfaceAssociation? = nil, primary: Bool? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil) {
            self.association = association
            self.primary = primary
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case association
            case primary
            case privateDnsName
            case privateIpAddress
        }
    }

    public struct InstanceSpecification: AWSEncodableShape {
        /// Excludes the root volume from being snapshotted.
        public let excludeBootVolume: Bool?
        /// The instance to specify which volumes should be snapshotted.
        public let instanceId: String?

        public init(excludeBootVolume: Bool? = nil, instanceId: String? = nil) {
            self.excludeBootVolume = excludeBootVolume
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case excludeBootVolume = "ExcludeBootVolume"
            case instanceId = "InstanceId"
        }
    }

    public struct InstanceState: AWSDecodableShape {
        /// The state of the instance as a 16-bit unsigned integer.  The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These numerical values are used for internal purposes and should be ignored. The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255.  The valid values for instance-state-code will all be in the range of the low byte and they are:    0 : pending     16 : running     32 : shutting-down     48 : terminated     64 : stopping     80 : stopped    You can ignore the high byte value by zeroing out all of the bits above 2^8 or 256 in decimal.
        public let code: Int?
        /// The current state of the instance.
        public let name: InstanceStateName?

        public init(code: Int? = nil, name: InstanceStateName? = nil) {
            self.code = code
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case name
        }
    }

    public struct InstanceStateChange: AWSDecodableShape {
        /// The current state of the instance.
        public let currentState: InstanceState?
        /// The ID of the instance.
        public let instanceId: String?
        /// The previous state of the instance.
        public let previousState: InstanceState?

        public init(currentState: InstanceState? = nil, instanceId: String? = nil, previousState: InstanceState? = nil) {
            self.currentState = currentState
            self.instanceId = instanceId
            self.previousState = previousState
        }

        private enum CodingKeys: String, CodingKey {
            case currentState
            case instanceId
            case previousState
        }
    }

    public struct InstanceStatus: AWSDecodableShape {
        public struct _EventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone of the instance.
        public let availabilityZone: String?
        /// Any scheduled events associated with the instance.
        @OptionalCustomCoding<ArrayCoder<_EventsEncoding, InstanceStatusEvent>>
        public var events: [InstanceStatusEvent]?
        /// The ID of the instance.
        public let instanceId: String?
        /// The intended state of the instance. DescribeInstanceStatus requires that an instance be in the running state.
        public let instanceState: InstanceState?
        /// Reports impaired functionality that stems from issues internal to the instance, such as impaired reachability.
        public let instanceStatus: InstanceStatusSummary?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// Reports impaired functionality that stems from issues related to the systems that support an instance, such as hardware failures and network connectivity problems.
        public let systemStatus: InstanceStatusSummary?

        public init(availabilityZone: String? = nil, events: [InstanceStatusEvent]? = nil, instanceId: String? = nil, instanceState: InstanceState? = nil, instanceStatus: InstanceStatusSummary? = nil, outpostArn: String? = nil, systemStatus: InstanceStatusSummary? = nil) {
            self.availabilityZone = availabilityZone
            self.events = events
            self.instanceId = instanceId
            self.instanceState = instanceState
            self.instanceStatus = instanceStatus
            self.outpostArn = outpostArn
            self.systemStatus = systemStatus
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case events = "eventsSet"
            case instanceId
            case instanceState
            case instanceStatus
            case outpostArn
            case systemStatus
        }
    }

    public struct InstanceStatusDetails: AWSDecodableShape {
        /// The time when a status check failed. For an instance that was launched and impaired, this is the time when the instance was launched.
        public let impairedSince: Date?
        /// The type of instance status.
        public let name: StatusName?
        /// The status.
        public let status: StatusType?

        public init(impairedSince: Date? = nil, name: StatusName? = nil, status: StatusType? = nil) {
            self.impairedSince = impairedSince
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case impairedSince
            case name
            case status
        }
    }

    public struct InstanceStatusEvent: AWSDecodableShape {
        /// The event code.
        public let code: EventCode?
        /// A description of the event. After a scheduled event is completed, it can still be described for up to a week. If the event has been completed, this description starts with the following text: [Completed].
        public let description: String?
        /// The ID of the event.
        public let instanceEventId: String?
        /// The latest scheduled end time for the event.
        public let notAfter: Date?
        /// The earliest scheduled start time for the event.
        public let notBefore: Date?
        /// The deadline for starting the event.
        public let notBeforeDeadline: Date?

        public init(code: EventCode? = nil, description: String? = nil, instanceEventId: String? = nil, notAfter: Date? = nil, notBefore: Date? = nil, notBeforeDeadline: Date? = nil) {
            self.code = code
            self.description = description
            self.instanceEventId = instanceEventId
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.notBeforeDeadline = notBeforeDeadline
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case description
            case instanceEventId
            case notAfter
            case notBefore
            case notBeforeDeadline
        }
    }

    public struct InstanceStatusSummary: AWSDecodableShape {
        public struct _DetailsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The system instance health or application instance health.
        @OptionalCustomCoding<ArrayCoder<_DetailsEncoding, InstanceStatusDetails>>
        public var details: [InstanceStatusDetails]?
        /// The status.
        public let status: SummaryStatus?

        public init(details: [InstanceStatusDetails]? = nil, status: SummaryStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details
            case status
        }
    }

    public struct InstanceStorageInfo: AWSDecodableShape {
        public struct _DisksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Describes the disks that are available for the instance type.
        @OptionalCustomCoding<ArrayCoder<_DisksEncoding, DiskInfo>>
        public var disks: [DiskInfo]?
        /// Indicates whether non-volatile memory express (NVMe) is supported for instance store.
        public let nvmeSupport: EphemeralNvmeSupport?
        /// The total size of the disks, in GB.
        public let totalSizeInGB: Int64?

        public init(disks: [DiskInfo]? = nil, nvmeSupport: EphemeralNvmeSupport? = nil, totalSizeInGB: Int64? = nil) {
            self.disks = disks
            self.nvmeSupport = nvmeSupport
            self.totalSizeInGB = totalSizeInGB
        }

        private enum CodingKeys: String, CodingKey {
            case disks
            case nvmeSupport
            case totalSizeInGB
        }
    }

    public struct InstanceTagNotificationAttribute: AWSDecodableShape {
        public struct _InstanceTagKeysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates wheter all tag keys in the current Region are registered to appear in scheduled event notifications. true indicates that all tag keys in the current Region are registered.
        public let includeAllTagsOfInstance: Bool?
        /// The registered tag keys.
        @OptionalCustomCoding<ArrayCoder<_InstanceTagKeysEncoding, String>>
        public var instanceTagKeys: [String]?

        public init(includeAllTagsOfInstance: Bool? = nil, instanceTagKeys: [String]? = nil) {
            self.includeAllTagsOfInstance = includeAllTagsOfInstance
            self.instanceTagKeys = instanceTagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case includeAllTagsOfInstance
            case instanceTagKeys = "instanceTagKeySet"
        }
    }

    public struct InstanceTypeInfo: AWSDecodableShape {
        public struct _SupportedBootModesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedRootDeviceTypesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedUsageClassesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SupportedVirtualizationTypesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether auto recovery is supported.
        public let autoRecoverySupported: Bool?
        /// Indicates whether the instance is a bare metal instance type.
        public let bareMetal: Bool?
        /// Indicates whether the instance type is a burstable performance instance type.
        public let burstablePerformanceSupported: Bool?
        /// Indicates whether the instance type is current generation.
        public let currentGeneration: Bool?
        /// Indicates whether Dedicated Hosts are supported on the instance type.
        public let dedicatedHostsSupported: Bool?
        /// Describes the Amazon EBS settings for the instance type.
        public let ebsInfo: EbsInfo?
        /// Describes the FPGA accelerator settings for the instance type.
        public let fpgaInfo: FpgaInfo?
        /// Indicates whether the instance type is eligible for the free tier.
        public let freeTierEligible: Bool?
        /// Describes the GPU accelerator settings for the instance type.
        public let gpuInfo: GpuInfo?
        /// Indicates whether On-Demand hibernation is supported.
        public let hibernationSupported: Bool?
        /// The hypervisor for the instance type.
        public let hypervisor: InstanceTypeHypervisor?
        /// Describes the Inference accelerator settings for the instance type.
        public let inferenceAcceleratorInfo: InferenceAcceleratorInfo?
        /// Describes the instance storage for the instance type.
        public let instanceStorageInfo: InstanceStorageInfo?
        /// Indicates whether instance storage is supported.
        public let instanceStorageSupported: Bool?
        /// The instance type. For more information, see Instance types in the Amazon EC2 User Guide.
        public let instanceType: InstanceType?
        /// Describes the memory for the instance type.
        public let memoryInfo: MemoryInfo?
        /// Describes the network settings for the instance type.
        public let networkInfo: NetworkInfo?
        /// Describes the placement group settings for the instance type.
        public let placementGroupInfo: PlacementGroupInfo?
        /// Describes the processor.
        public let processorInfo: ProcessorInfo?
        /// The supported boot modes. For more information, see Boot modes in the Amazon EC2 User Guide.
        @OptionalCustomCoding<ArrayCoder<_SupportedBootModesEncoding, BootModeType>>
        public var supportedBootModes: [BootModeType]?
        /// The supported root device types.
        @OptionalCustomCoding<ArrayCoder<_SupportedRootDeviceTypesEncoding, RootDeviceType>>
        public var supportedRootDeviceTypes: [RootDeviceType]?
        /// Indicates whether the instance type is offered for spot or On-Demand.
        @OptionalCustomCoding<ArrayCoder<_SupportedUsageClassesEncoding, UsageClassType>>
        public var supportedUsageClasses: [UsageClassType]?
        /// The supported virtualization types.
        @OptionalCustomCoding<ArrayCoder<_SupportedVirtualizationTypesEncoding, VirtualizationType>>
        public var supportedVirtualizationTypes: [VirtualizationType]?
        /// Describes the vCPU configurations for the instance type.
        public let vCpuInfo: VCpuInfo?

        public init(autoRecoverySupported: Bool? = nil, bareMetal: Bool? = nil, burstablePerformanceSupported: Bool? = nil, currentGeneration: Bool? = nil, dedicatedHostsSupported: Bool? = nil, ebsInfo: EbsInfo? = nil, fpgaInfo: FpgaInfo? = nil, freeTierEligible: Bool? = nil, gpuInfo: GpuInfo? = nil, hibernationSupported: Bool? = nil, hypervisor: InstanceTypeHypervisor? = nil, inferenceAcceleratorInfo: InferenceAcceleratorInfo? = nil, instanceStorageInfo: InstanceStorageInfo? = nil, instanceStorageSupported: Bool? = nil, instanceType: InstanceType? = nil, memoryInfo: MemoryInfo? = nil, networkInfo: NetworkInfo? = nil, placementGroupInfo: PlacementGroupInfo? = nil, processorInfo: ProcessorInfo? = nil, supportedBootModes: [BootModeType]? = nil, supportedRootDeviceTypes: [RootDeviceType]? = nil, supportedUsageClasses: [UsageClassType]? = nil, supportedVirtualizationTypes: [VirtualizationType]? = nil, vCpuInfo: VCpuInfo? = nil) {
            self.autoRecoverySupported = autoRecoverySupported
            self.bareMetal = bareMetal
            self.burstablePerformanceSupported = burstablePerformanceSupported
            self.currentGeneration = currentGeneration
            self.dedicatedHostsSupported = dedicatedHostsSupported
            self.ebsInfo = ebsInfo
            self.fpgaInfo = fpgaInfo
            self.freeTierEligible = freeTierEligible
            self.gpuInfo = gpuInfo
            self.hibernationSupported = hibernationSupported
            self.hypervisor = hypervisor
            self.inferenceAcceleratorInfo = inferenceAcceleratorInfo
            self.instanceStorageInfo = instanceStorageInfo
            self.instanceStorageSupported = instanceStorageSupported
            self.instanceType = instanceType
            self.memoryInfo = memoryInfo
            self.networkInfo = networkInfo
            self.placementGroupInfo = placementGroupInfo
            self.processorInfo = processorInfo
            self.supportedBootModes = supportedBootModes
            self.supportedRootDeviceTypes = supportedRootDeviceTypes
            self.supportedUsageClasses = supportedUsageClasses
            self.supportedVirtualizationTypes = supportedVirtualizationTypes
            self.vCpuInfo = vCpuInfo
        }

        private enum CodingKeys: String, CodingKey {
            case autoRecoverySupported
            case bareMetal
            case burstablePerformanceSupported
            case currentGeneration
            case dedicatedHostsSupported
            case ebsInfo
            case fpgaInfo
            case freeTierEligible
            case gpuInfo
            case hibernationSupported
            case hypervisor
            case inferenceAcceleratorInfo
            case instanceStorageInfo
            case instanceStorageSupported
            case instanceType
            case memoryInfo
            case networkInfo
            case placementGroupInfo
            case processorInfo
            case supportedBootModes
            case supportedRootDeviceTypes
            case supportedUsageClasses
            case supportedVirtualizationTypes
            case vCpuInfo
        }
    }

    public struct InstanceTypeOffering: AWSDecodableShape {
        /// The instance type. For more information, see Instance types in the Amazon EC2 User Guide.
        public let instanceType: InstanceType?
        /// The identifier for the location. This depends on the location type. For example, if the location type is region, the location is the Region code (for example, us-east-2.)
        public let location: String?
        /// The location type.
        public let locationType: LocationType?

        public init(instanceType: InstanceType? = nil, location: String? = nil, locationType: LocationType? = nil) {
            self.instanceType = instanceType
            self.location = location
            self.locationType = locationType
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType
            case location
            case locationType
        }
    }

    public struct InstanceUsage: AWSDecodableShape {
        /// The ID of the account that is making use of the Capacity Reservation.
        public let accountId: String?
        /// The number of instances the account currently has in the Capacity Reservation.
        public let usedInstanceCount: Int?

        public init(accountId: String? = nil, usedInstanceCount: Int? = nil) {
            self.accountId = accountId
            self.usedInstanceCount = usedInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case accountId
            case usedInstanceCount
        }
    }

    public struct IntegrateServices: AWSEncodableShape {
        public struct _AthenaIntegrationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the integration with Amazon Athena.
        @OptionalCustomCoding<ArrayCoder<_AthenaIntegrationsEncoding, AthenaIntegration>>
        public var athenaIntegrations: [AthenaIntegration]?

        public init(athenaIntegrations: [AthenaIntegration]? = nil) {
            self.athenaIntegrations = athenaIntegrations
        }

        public func validate(name: String) throws {
            try self.validate(self.athenaIntegrations, name: "athenaIntegrations", parent: name, max: 10)
            try self.validate(self.athenaIntegrations, name: "athenaIntegrations", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case athenaIntegrations = "AthenaIntegration"
        }
    }

    public struct InternetGateway: AWSDecodableShape {
        public struct _AttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Any VPCs attached to the internet gateway.
        @OptionalCustomCoding<ArrayCoder<_AttachmentsEncoding, InternetGatewayAttachment>>
        public var attachments: [InternetGatewayAttachment]?
        /// The ID of the internet gateway.
        public let internetGatewayId: String?
        /// The ID of the AWS account that owns the internet gateway.
        public let ownerId: String?
        /// Any tags assigned to the internet gateway.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(attachments: [InternetGatewayAttachment]? = nil, internetGatewayId: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil) {
            self.attachments = attachments
            self.internetGatewayId = internetGatewayId
            self.ownerId = ownerId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case internetGatewayId
            case ownerId
            case tags = "tagSet"
        }
    }

    public struct InternetGatewayAttachment: AWSDecodableShape {
        /// The current state of the attachment. For an internet gateway, the state is available when attached to a VPC; otherwise, this value is not returned.
        public let state: AttachmentStatus?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(state: AttachmentStatus? = nil, vpcId: String? = nil) {
            self.state = state
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case vpcId
        }
    }

    public struct IpPermission: AWSEncodableShape & AWSDecodableShape {
        public struct _IpRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6RangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrefixListIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UserIdGroupPairsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let fromPort: Int?
        /// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers). [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
        public let ipProtocol: String?
        /// The IPv4 ranges.
        @OptionalCustomCoding<ArrayCoder<_IpRangesEncoding, IpRange>>
        public var ipRanges: [IpRange]?
        /// [VPC only] The IPv6 ranges.
        @OptionalCustomCoding<ArrayCoder<_Ipv6RangesEncoding, Ipv6Range>>
        public var ipv6Ranges: [Ipv6Range]?
        /// [VPC only] The prefix list IDs.
        @OptionalCustomCoding<ArrayCoder<_PrefixListIdsEncoding, PrefixListId>>
        public var prefixListIds: [PrefixListId]?
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let toPort: Int?
        /// The security group and Amazon Web Services account ID pairs.
        @OptionalCustomCoding<ArrayCoder<_UserIdGroupPairsEncoding, UserIdGroupPair>>
        public var userIdGroupPairs: [UserIdGroupPair]?

        public init(fromPort: Int? = nil, ipProtocol: String? = nil, ipRanges: [IpRange]? = nil, ipv6Ranges: [Ipv6Range]? = nil, prefixListIds: [PrefixListId]? = nil, toPort: Int? = nil, userIdGroupPairs: [UserIdGroupPair]? = nil) {
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.ipRanges = ipRanges
            self.ipv6Ranges = ipv6Ranges
            self.prefixListIds = prefixListIds
            self.toPort = toPort
            self.userIdGroupPairs = userIdGroupPairs
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort
            case ipProtocol
            case ipRanges
            case ipv6Ranges
            case prefixListIds
            case toPort
            case userIdGroupPairs = "groups"
        }
    }

    public struct IpRange: AWSEncodableShape & AWSDecodableShape {
        /// The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
        public let cidrIp: String?
        /// A description for the security group rule that references this IPv4 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let description: String?

        public init(cidrIp: String? = nil, description: String? = nil) {
            self.cidrIp = cidrIp
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp
            case description
        }
    }

    public struct Ipv6CidrAssociation: AWSDecodableShape {
        /// The resource that's associated with the IPv6 CIDR block.
        public let associatedResource: String?
        /// The IPv6 CIDR block.
        public let ipv6Cidr: String?

        public init(associatedResource: String? = nil, ipv6Cidr: String? = nil) {
            self.associatedResource = associatedResource
            self.ipv6Cidr = ipv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case associatedResource
            case ipv6Cidr
        }
    }

    public struct Ipv6CidrBlock: AWSDecodableShape {
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?

        public init(ipv6CidrBlock: String? = nil) {
            self.ipv6CidrBlock = ipv6CidrBlock
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6CidrBlock
        }
    }

    public struct Ipv6Pool: AWSDecodableShape {
        public struct _PoolCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description for the address pool.
        public let description: String?
        /// The CIDR blocks for the address pool.
        @OptionalCustomCoding<ArrayCoder<_PoolCidrBlocksEncoding, PoolCidrBlock>>
        public var poolCidrBlocks: [PoolCidrBlock]?
        /// The ID of the address pool.
        public let poolId: String?
        /// Any tags for the address pool.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(description: String? = nil, poolCidrBlocks: [PoolCidrBlock]? = nil, poolId: String? = nil, tags: [Tag]? = nil) {
            self.description = description
            self.poolCidrBlocks = poolCidrBlocks
            self.poolId = poolId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case poolCidrBlocks = "poolCidrBlockSet"
            case poolId
            case tags = "tagSet"
        }
    }

    public struct Ipv6Range: AWSEncodableShape & AWSDecodableShape {
        /// The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
        public let cidrIpv6: String?
        /// A description for the security group rule that references this IPv6 address range. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp;;{}!$*
        public let description: String?

        public init(cidrIpv6: String? = nil, description: String? = nil) {
            self.cidrIpv6 = cidrIpv6
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIpv6
            case description
        }
    }

    public struct KeyPair: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The SHA-1 digest of the DER encoded private key.
        public let keyFingerprint: String?
        /// An unencrypted PEM encoded RSA private key.
        public let keyMaterial: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The ID of the key pair.
        public let keyPairId: String?
        /// Any tags applied to the key pair.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(keyFingerprint: String? = nil, keyMaterial: String? = nil, keyName: String? = nil, keyPairId: String? = nil, tags: [Tag]? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyMaterial = keyMaterial
            self.keyName = keyName
            self.keyPairId = keyPairId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint
            case keyMaterial
            case keyName
            case keyPairId
            case tags = "tagSet"
        }
    }

    public struct KeyPairInfo: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// If you used CreateKeyPair to create the key pair, this is the SHA-1 digest of the DER encoded private key. If you used ImportKeyPair to provide Amazon Web Services the public key, this is the MD5 public key fingerprint as specified in section 4 of RFC4716.
        public let keyFingerprint: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The ID of the key pair.
        public let keyPairId: String?
        /// Any tags applied to the key pair.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(keyFingerprint: String? = nil, keyName: String? = nil, keyPairId: String? = nil, tags: [Tag]? = nil) {
            self.keyFingerprint = keyFingerprint
            self.keyName = keyName
            self.keyPairId = keyPairId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case keyFingerprint
            case keyName
            case keyPairId
            case tags = "tagSet"
        }
    }

    public struct LastError: AWSDecodableShape {
        /// The error code for the VPC endpoint error.
        public let code: String?
        /// The error message for the VPC endpoint error.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct LaunchPermission: AWSEncodableShape & AWSDecodableShape {
        /// The name of the group.
        public let group: PermissionGroup?
        /// The AWS account ID. Constraints: Up to 10 000 account IDs can be specified in a single request.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group
            case userId
        }
    }

    public struct LaunchPermissionModifications: AWSEncodableShape {
        public struct _AddEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The AWS account ID to add to the list of launch permissions for the AMI.
        @OptionalCustomCoding<ArrayCoder<_AddEncoding, LaunchPermission>>
        public var add: [LaunchPermission]?
        /// The AWS account ID to remove from the list of launch permissions for the AMI.
        @OptionalCustomCoding<ArrayCoder<_RemoveEncoding, LaunchPermission>>
        public var remove: [LaunchPermission]?

        public init(add: [LaunchPermission]? = nil, remove: [LaunchPermission]? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct LaunchSpecification: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Deprecated.
        public let addressingType: String?
        /// One or more block device mapping entries.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        public let monitoring: RunInstancesMonitoringEnabled?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement information for the instance.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, GroupIdentifier>>
        public var securityGroups: [GroupIdentifier]?
        /// The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The Base64-encoded user data for the instance.
        public let userData: String?

        public init(addressingType: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil, securityGroups: [GroupIdentifier]? = nil, subnetId: String? = nil, userData: String? = nil) {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case addressingType
            case blockDeviceMappings = "blockDeviceMapping"
            case ebsOptimized
            case iamInstanceProfile
            case imageId
            case instanceType
            case kernelId
            case keyName
            case monitoring
            case networkInterfaces = "networkInterfaceSet"
            case placement
            case ramdiskId
            case securityGroups = "groupSet"
            case subnetId
            case userData
        }
    }

    public struct LaunchTemplate: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The principal that created the launch template.
        public let createdBy: String?
        /// The time launch template was created.
        public let createTime: Date?
        /// The version number of the default version of the launch template.
        public let defaultVersionNumber: Int64?
        /// The version number of the latest version of the launch template.
        public let latestVersionNumber: Int64?
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The tags for the launch template.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(createdBy: String? = nil, createTime: Date? = nil, defaultVersionNumber: Int64? = nil, latestVersionNumber: Int64? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, tags: [Tag]? = nil) {
            self.createdBy = createdBy
            self.createTime = createTime
            self.defaultVersionNumber = defaultVersionNumber
            self.latestVersionNumber = latestVersionNumber
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy
            case createTime
            case defaultVersionNumber
            case latestVersionNumber
            case launchTemplateId
            case launchTemplateName
            case tags = "tagSet"
        }
    }

    public struct LaunchTemplateAndOverridesResponse: AWSDecodableShape {
        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        public let overrides: FleetLaunchTemplateOverrides?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: FleetLaunchTemplateOverrides? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification
            case overrides
        }
    }

    public struct LaunchTemplateBlockDeviceMapping: AWSDecodableShape {
        /// The device name.
        public let deviceName: String?
        /// Information about the block device for an EBS volume.
        public let ebs: LaunchTemplateEbsBlockDevice?
        /// To omit the device from the block device mapping, specify an empty string.
        public let noDevice: String?
        /// The virtual device name (ephemeralN).
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: LaunchTemplateEbsBlockDevice? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName
            case ebs
            case noDevice
            case virtualName
        }
    }

    public struct LaunchTemplateBlockDeviceMappingRequest: AWSEncodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to automatically set up EBS volumes when the instance is launched.
        public let ebs: LaunchTemplateEbsBlockDeviceRequest?
        /// To omit the device from the block device mapping, specify an empty string.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with 2 available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: LaunchTemplateEbsBlockDeviceRequest? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "DeviceName"
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
        }
    }

    public struct LaunchTemplateCapacityReservationSpecificationRequest: AWSEncodableShape {
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTarget?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTarget? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference = "CapacityReservationPreference"
            case capacityReservationTarget = "CapacityReservationTarget"
        }
    }

    public struct LaunchTemplateCapacityReservationSpecificationResponse: AWSDecodableShape {
        /// Indicates the instance's Capacity Reservation preferences. Possible preferences include:    open - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).    none - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
        public let capacityReservationPreference: CapacityReservationPreference?
        /// Information about the target Capacity Reservation or Capacity Reservation group.
        public let capacityReservationTarget: CapacityReservationTargetResponse?

        public init(capacityReservationPreference: CapacityReservationPreference? = nil, capacityReservationTarget: CapacityReservationTargetResponse? = nil) {
            self.capacityReservationPreference = capacityReservationPreference
            self.capacityReservationTarget = capacityReservationTarget
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationPreference
            case capacityReservationTarget
        }
    }

    public struct LaunchTemplateConfig: AWSEncodableShape & AWSDecodableShape {
        public struct _OverridesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The launch template.
        public let launchTemplateSpecification: FleetLaunchTemplateSpecification?
        /// Any parameters that you specify override the same parameters in the launch template.
        @OptionalCustomCoding<ArrayCoder<_OverridesEncoding, LaunchTemplateOverrides>>
        public var overrides: [LaunchTemplateOverrides]?

        public init(launchTemplateSpecification: FleetLaunchTemplateSpecification? = nil, overrides: [LaunchTemplateOverrides]? = nil) {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }

        public func validate(name: String) throws {
            try self.launchTemplateSpecification?.validate(name: "\(name).launchTemplateSpecification")
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateSpecification
            case overrides
        }
    }

    public struct LaunchTemplateCpuOptions: AWSDecodableShape {
        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core.
        public let threadsPerCore: Int?

        public init(coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount
            case threadsPerCore
        }
    }

    public struct LaunchTemplateCpuOptionsRequest: AWSEncodableShape {
        /// The number of CPU cores for the instance.
        public let coreCount: Int?
        /// The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
        public let threadsPerCore: Int?

        public init(coreCount: Int? = nil, threadsPerCore: Int? = nil) {
            self.coreCount = coreCount
            self.threadsPerCore = threadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case coreCount = "CoreCount"
            case threadsPerCore = "ThreadsPerCore"
        }
    }

    public struct LaunchTemplateEbsBlockDevice: AWSDecodableShape {
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the EBS volume is encrypted.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) that the volume supports.
        public let iops: Int?
        /// The ARN of the AWS Key Management Service (AWS KMS) CMK used for encryption.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The throughput that the volume supports, in MiB/s.
        public let throughput: Int?
        /// The size of the volume, in GiB.
        public let volumeSize: Int?
        /// The volume type.
        public let volumeType: VolumeType?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, snapshotId: String? = nil, throughput: Int? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination
            case encrypted
            case iops
            case kmsKeyId
            case snapshotId
            case throughput
            case volumeSize
            case volumeType
        }
    }

    public struct LaunchTemplateEbsBlockDeviceRequest: AWSEncodableShape {
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:    gp3: 3,000-16,000 IOPS    io1: 100-64,000 IOPS    io2: 100-64,000 IOPS   For io1 and io2 volumes, we guarantee 64,000 IOPS only for Instances built on the Nitro System. Other instance families guarantee performance up to 32,000 IOPS. This parameter is supported for io1, io2, and gp3 volumes only. This parameter is not supported for gp2, st1, sc1, or standard volumes.
        public let iops: Int?
        /// The ARN of the symmetric AWS Key Management Service (AWS KMS) CMK used for encryption.
        public let kmsKeyId: String?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The throughput to provision for a gp3 volume, with a maximum of 1,000 MiB/s. Valid Range: Minimum value of 125. Maximum value of 1000.
        public let throughput: Int?
        /// The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type:    gp2 and gp3: 1-16,384    io1 and io2: 4-16,384    st1 and sc1: 125-16,384    standard: 1-1,024
        public let volumeSize: Int?
        /// The volume type. For more information, see Amazon EBS volume types in the Amazon Elastic Compute Cloud User Guide.
        public let volumeType: VolumeType?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, snapshotId: String? = nil, throughput: Int? = nil, volumeSize: Int? = nil, volumeType: VolumeType? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.snapshotId = snapshotId
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "DeleteOnTermination"
            case encrypted = "Encrypted"
            case iops = "Iops"
            case kmsKeyId = "KmsKeyId"
            case snapshotId = "SnapshotId"
            case throughput = "Throughput"
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
        }
    }

    public struct LaunchTemplateElasticInferenceAccelerator: AWSEncodableShape {
        ///  The number of elastic inference accelerators to attach to the instance.  Default: 1
        public let count: Int?
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
        public let type: String

        public init(count: Int? = nil, type: String) {
            self.count = count
            self.type = type
        }

        public func validate(name: String) throws {
            try self.validate(self.count, name: "count", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
            case type = "Type"
        }
    }

    public struct LaunchTemplateElasticInferenceAcceleratorResponse: AWSDecodableShape {
        ///  The number of elastic inference accelerators to attach to the instance.  Default: 1
        public let count: Int?
        ///  The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
        public let type: String?

        public init(count: Int? = nil, type: String? = nil) {
            self.count = count
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case count
            case type
        }
    }

    public struct LaunchTemplateEnclaveOptions: AWSDecodableShape {
        /// If this parameter is set to true, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled
        }
    }

    public struct LaunchTemplateEnclaveOptionsRequest: AWSEncodableShape {
        /// To enable the instance for AWS Nitro Enclaves, set this parameter to true.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct LaunchTemplateHibernationOptions: AWSDecodableShape {
        /// If this parameter is set to true, the instance is enabled for hibernation; otherwise, it is not enabled for hibernation.
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured
        }
    }

    public struct LaunchTemplateHibernationOptionsRequest: AWSEncodableShape {
        /// If you set this parameter to true, the instance is enabled for hibernation. Default: false
        public let configured: Bool?

        public init(configured: Bool? = nil) {
            self.configured = configured
        }

        private enum CodingKeys: String, CodingKey {
            case configured = "Configured"
        }
    }

    public struct LaunchTemplateIamInstanceProfileSpecification: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The name of the instance profile.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case name
        }
    }

    public struct LaunchTemplateIamInstanceProfileSpecificationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the instance profile.
        public let arn: String?
        /// The name of the instance profile.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case name = "Name"
        }
    }

    public struct LaunchTemplateInstanceMarketOptions: AWSDecodableShape {
        /// The market type.
        public let marketType: MarketType?
        /// The options for Spot Instances.
        public let spotOptions: LaunchTemplateSpotMarketOptions?

        public init(marketType: MarketType? = nil, spotOptions: LaunchTemplateSpotMarketOptions? = nil) {
            self.marketType = marketType
            self.spotOptions = spotOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marketType
            case spotOptions
        }
    }

    public struct LaunchTemplateInstanceMarketOptionsRequest: AWSEncodableShape {
        /// The market type.
        public let marketType: MarketType?
        /// The options for Spot Instances.
        public let spotOptions: LaunchTemplateSpotMarketOptionsRequest?

        public init(marketType: MarketType? = nil, spotOptions: LaunchTemplateSpotMarketOptionsRequest? = nil) {
            self.marketType = marketType
            self.spotOptions = spotOptions
        }

        private enum CodingKeys: String, CodingKey {
            case marketType = "MarketType"
            case spotOptions = "SpotOptions"
        }
    }

    public struct LaunchTemplateInstanceMetadataOptions: AWSDecodableShape {
        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata.
        public let httpEndpoint: LaunchTemplateInstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: LaunchTemplateHttpTokensState?
        /// The state of the metadata option changes.  pending - The metadata options are being updated and the instance is not ready to process metadata traffic with the new selection.  applied - The metadata options have been successfully applied on the instance.
        public let state: LaunchTemplateInstanceMetadataOptionsState?

        public init(httpEndpoint: LaunchTemplateInstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: LaunchTemplateHttpTokensState? = nil, state: LaunchTemplateInstanceMetadataOptionsState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint
            case httpPutResponseHopLimit
            case httpTokens
            case state
        }
    }

    public struct LaunchTemplateInstanceMetadataOptionsRequest: AWSEncodableShape {
        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled.  If you specify a value of disabled, you will not be able to access your instance metadata.
        public let httpEndpoint: LaunchTemplateInstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1 Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: LaunchTemplateHttpTokensState?

        public init(httpEndpoint: LaunchTemplateInstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: LaunchTemplateHttpTokensState? = nil) {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
        }

        private enum CodingKeys: String, CodingKey {
            case httpEndpoint = "HttpEndpoint"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
        }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecification: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "groupId" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether to associate a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see Carrier IP addresses in the AWS Wavelength Developer Guide.
        public let associateCarrierIpAddress: Bool?
        /// Indicates whether to associate a public IPv4 address with eth0 for a new network interface.
        public let associatePublicIpAddress: Bool?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// A description for the network interface.
        public let description: String?
        /// The device index for the network interface attachment.
        public let deviceIndex: Int?
        /// The IDs of one or more security groups.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The type of network interface.
        public let interfaceType: String?
        /// The number of IPv6 addresses for the network interface.
        public let ipv6AddressCount: Int?
        /// The IPv6 addresses for the network interface.
        @OptionalCustomCoding<ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The index of the network card.
        public let networkCardIndex: Int?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The primary private IPv4 address of the network interface.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        @OptionalCustomCoding<ArrayCoder<_PrivateIpAddressesEncoding, PrivateIpAddressSpecification>>
        public var privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses for the network interface.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet for the network interface.
        public let subnetId: String?

        public init(associateCarrierIpAddress: Bool? = nil, associatePublicIpAddress: Bool? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, groups: [String]? = nil, interfaceType: String? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, networkCardIndex: Int? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associateCarrierIpAddress
            case associatePublicIpAddress
            case deleteOnTermination
            case description
            case deviceIndex
            case groups = "groupSet"
            case interfaceType
            case ipv6AddressCount
            case ipv6Addresses = "ipv6AddressesSet"
            case networkCardIndex
            case networkInterfaceId
            case privateIpAddress
            case privateIpAddresses = "privateIpAddressesSet"
            case secondaryPrivateIpAddressCount
            case subnetId
        }
    }

    public struct LaunchTemplateInstanceNetworkInterfaceSpecificationRequest: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "InstanceIpv6Address" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Associates a Carrier IP address with eth0 for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. For more information about Carrier IP addresses, see Carrier IP addresses in the AWS Wavelength Developer Guide.
        public let associateCarrierIpAddress: Bool?
        /// Associates a public IPv4 address with eth0 for a new network interface.
        public let associatePublicIpAddress: Bool?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// A description for the network interface.
        public let description: String?
        /// The device index for the network interface attachment.
        public let deviceIndex: Int?
        /// The IDs of one or more security groups.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The type of network interface. To create an Elastic Fabric Adapter (EFA), specify efa. For more information, see Elastic Fabric Adapter in the Amazon Elastic Compute Cloud User Guide. If you are not creating an EFA, specify interface or omit this parameter. Valid values: interface | efa
        public let interfaceType: String?
        /// The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
        public let ipv6AddressCount: Int?
        /// One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
        @OptionalCustomCoding<ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6AddressRequest>>
        public var ipv6Addresses: [InstanceIpv6AddressRequest]?
        /// The index of the network card. Some instance types support multiple network cards. The primary network interface must be assigned to network card index 0. The default is network card index 0.
        public let networkCardIndex: Int?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The primary private IPv4 address of the network interface.
        public let privateIpAddress: String?
        /// One or more private IPv4 addresses.
        @OptionalCustomCoding<ArrayCoder<_PrivateIpAddressesEncoding, PrivateIpAddressSpecification>>
        public var privateIpAddresses: [PrivateIpAddressSpecification]?
        /// The number of secondary private IPv4 addresses to assign to a network interface.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet for the network interface.
        public let subnetId: String?

        public init(associateCarrierIpAddress: Bool? = nil, associatePublicIpAddress: Bool? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, groups: [String]? = nil, interfaceType: String? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6AddressRequest]? = nil, networkCardIndex: Int? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [PrivateIpAddressSpecification]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associateCarrierIpAddress = associateCarrierIpAddress
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkCardIndex = networkCardIndex
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associateCarrierIpAddress = "AssociateCarrierIpAddress"
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case deleteOnTermination = "DeleteOnTermination"
            case description = "Description"
            case deviceIndex = "DeviceIndex"
            case groups = "SecurityGroupId"
            case interfaceType = "InterfaceType"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Addresses"
            case networkCardIndex = "NetworkCardIndex"
            case networkInterfaceId = "NetworkInterfaceId"
            case privateIpAddress = "PrivateIpAddress"
            case privateIpAddresses = "PrivateIpAddresses"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
            case subnetId = "SubnetId"
        }
    }

    public struct LaunchTemplateLicenseConfiguration: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn
        }
    }

    public struct LaunchTemplateLicenseConfigurationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct LaunchTemplateOverrides: AWSEncodableShape & AWSDecodableShape {
        /// The Availability Zone in which to launch the instances.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The priority for the launch template override. The highest priority is launched first. If OnDemandAllocationStrategy is set to prioritized, Spot Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. If the Spot AllocationStrategy is set to capacityOptimizedPrioritized, Spot Fleet uses priority on a best-effort basis to determine which launch template override to use in fulfilling Spot capacity, but optimizes for capacity first. Valid values are whole numbers starting at 0. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. You can set the same priority for different launch template overrides.
        public let priority: Double?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance.
        public let spotPrice: String?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The number of units provided by the specified instance type.
        public let weightedCapacity: Double?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, priority: Double? = nil, spotPrice: String? = nil, subnetId: String? = nil, weightedCapacity: Double? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.priority = priority
            self.spotPrice = spotPrice
            self.subnetId = subnetId
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case instanceType
            case priority
            case spotPrice
            case subnetId
            case weightedCapacity
        }
    }

    public struct LaunchTemplatePlacement: AWSDecodableShape {
        /// The affinity setting for the instance on the Dedicated Host.
        public let affinity: String?
        /// The Availability Zone of the instance.
        public let availabilityZone: String?
        /// The name of the placement group for the instance.
        public let groupName: String?
        /// The ID of the Dedicated Host for the instance.
        public let hostId: String?
        /// The ARN of the host resource group in which to launch the instances.
        public let hostResourceGroupArn: String?
        /// The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
        public let partitionNumber: Int?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
        public let tenancy: Tenancy?

        public init(affinity: String? = nil, availabilityZone: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, partitionNumber: Int? = nil, spreadDomain: String? = nil, tenancy: Tenancy? = nil) {
            self.affinity = affinity
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.partitionNumber = partitionNumber
            self.spreadDomain = spreadDomain
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity
            case availabilityZone
            case groupName
            case hostId
            case hostResourceGroupArn
            case partitionNumber
            case spreadDomain
            case tenancy
        }
    }

    public struct LaunchTemplatePlacementRequest: AWSEncodableShape {
        /// The affinity setting for an instance on a Dedicated Host.
        public let affinity: String?
        /// The Availability Zone for the instance.
        public let availabilityZone: String?
        /// The name of the placement group for the instance.
        public let groupName: String?
        /// The ID of the Dedicated Host for the instance.
        public let hostId: String?
        /// The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host.
        public let hostResourceGroupArn: String?
        /// The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
        public let partitionNumber: Int?
        /// Reserved for future use.
        public let spreadDomain: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware.
        public let tenancy: Tenancy?

        public init(affinity: String? = nil, availabilityZone: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, partitionNumber: Int? = nil, spreadDomain: String? = nil, tenancy: Tenancy? = nil) {
            self.affinity = affinity
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.partitionNumber = partitionNumber
            self.spreadDomain = spreadDomain
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity = "Affinity"
            case availabilityZone = "AvailabilityZone"
            case groupName = "GroupName"
            case hostId = "HostId"
            case hostResourceGroupArn = "HostResourceGroupArn"
            case partitionNumber = "PartitionNumber"
            case spreadDomain = "SpreadDomain"
            case tenancy = "Tenancy"
        }
    }

    public struct LaunchTemplateSpecification: AWSEncodableShape {
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The version number of the launch template. Default: The default version for the launch template.
        public let version: String?

        public init(launchTemplateId: String? = nil, launchTemplateName: String? = nil, version: String? = nil) {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
            case version = "Version"
        }
    }

    public struct LaunchTemplateSpotMarketOptions: AWSDecodableShape {
        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public let blockDurationMinutes: Int?
        /// The behavior when a Spot Instance is interrupted.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances.
        public let maxPrice: String?
        /// The Spot Instance request type.
        public let spotInstanceType: SpotInstanceType?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached.
        public let validUntil: Date?

        public init(blockDurationMinutes: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, spotInstanceType: SpotInstanceType? = nil, validUntil: Date? = nil) {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case blockDurationMinutes
            case instanceInterruptionBehavior
            case maxPrice
            case spotInstanceType
            case validUntil
        }
    }

    public struct LaunchTemplateSpotMarketOptionsRequest: AWSEncodableShape {
        /// The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).
        public let blockDurationMinutes: Int?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances.
        public let maxPrice: String?
        /// The Spot Instance request type.
        public let spotInstanceType: SpotInstanceType?
        /// The end date of the request. For a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. The default end date is 7 days from the current date.
        public let validUntil: Date?

        public init(blockDurationMinutes: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, spotInstanceType: SpotInstanceType? = nil, validUntil: Date? = nil) {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case blockDurationMinutes = "BlockDurationMinutes"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case maxPrice = "MaxPrice"
            case spotInstanceType = "SpotInstanceType"
            case validUntil = "ValidUntil"
        }
    }

    public struct LaunchTemplateTagSpecification: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The type of resource.
        public let resourceType: ResourceType?
        /// The tags for the resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType
            case tags = "tagSet"
        }
    }

    public struct LaunchTemplateTagSpecificationRequest: AWSEncodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The type of resource to tag. Currently, the resource types that support tagging on creation are instance and volume. To tag a resource after it has been created, see CreateTags.
        public let resourceType: ResourceType?
        /// The tags to apply to the resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case tags = "Tag"
        }
    }

    public struct LaunchTemplateVersion: AWSDecodableShape {
        /// The principal that created the version.
        public let createdBy: String?
        /// The time the version was created.
        public let createTime: Date?
        /// Indicates whether the version is the default version.
        public let defaultVersion: Bool?
        /// Information about the launch template.
        public let launchTemplateData: ResponseLaunchTemplateData?
        /// The ID of the launch template.
        public let launchTemplateId: String?
        /// The name of the launch template.
        public let launchTemplateName: String?
        /// The description for the version.
        public let versionDescription: String?
        /// The version number.
        public let versionNumber: Int64?

        public init(createdBy: String? = nil, createTime: Date? = nil, defaultVersion: Bool? = nil, launchTemplateData: ResponseLaunchTemplateData? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil, versionDescription: String? = nil, versionNumber: Int64? = nil) {
            self.createdBy = createdBy
            self.createTime = createTime
            self.defaultVersion = defaultVersion
            self.launchTemplateData = launchTemplateData
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.versionDescription = versionDescription
            self.versionNumber = versionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case createdBy
            case createTime
            case defaultVersion
            case launchTemplateData
            case launchTemplateId
            case launchTemplateName
            case versionDescription
            case versionNumber
        }
    }

    public struct LaunchTemplatesMonitoring: AWSDecodableShape {
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled
        }
    }

    public struct LaunchTemplatesMonitoringRequest: AWSEncodableShape {
        /// Specify true to enable detailed monitoring. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct LicenseConfiguration: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn
        }
    }

    public struct LicenseConfigurationRequest: AWSEncodableShape {
        /// The Amazon Resource Name (ARN) of the license configuration.
        public let licenseConfigurationArn: String?

        public init(licenseConfigurationArn: String? = nil) {
            self.licenseConfigurationArn = licenseConfigurationArn
        }

        private enum CodingKeys: String, CodingKey {
            case licenseConfigurationArn = "LicenseConfigurationArn"
        }
    }

    public struct LoadBalancersConfig: AWSEncodableShape & AWSDecodableShape {
        /// The Classic Load Balancers.
        public let classicLoadBalancersConfig: ClassicLoadBalancersConfig?
        /// The target groups.
        public let targetGroupsConfig: TargetGroupsConfig?

        public init(classicLoadBalancersConfig: ClassicLoadBalancersConfig? = nil, targetGroupsConfig: TargetGroupsConfig? = nil) {
            self.classicLoadBalancersConfig = classicLoadBalancersConfig
            self.targetGroupsConfig = targetGroupsConfig
        }

        public func validate(name: String) throws {
            try self.classicLoadBalancersConfig?.validate(name: "\(name).classicLoadBalancersConfig")
            try self.targetGroupsConfig?.validate(name: "\(name).targetGroupsConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case classicLoadBalancersConfig
            case targetGroupsConfig
        }
    }

    public struct LoadPermission: AWSDecodableShape {
        /// The name of the group.
        public let group: PermissionGroup?
        /// The AWS account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group
            case userId
        }
    }

    public struct LoadPermissionModifications: AWSEncodableShape {
        public struct _AddEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The load permissions to add.
        @OptionalCustomCoding<ArrayCoder<_AddEncoding, LoadPermissionRequest>>
        public var add: [LoadPermissionRequest]?
        /// The load permissions to remove.
        @OptionalCustomCoding<ArrayCoder<_RemoveEncoding, LoadPermissionRequest>>
        public var remove: [LoadPermissionRequest]?

        public init(add: [LoadPermissionRequest]? = nil, remove: [LoadPermissionRequest]? = nil) {
            self.add = add
            self.remove = remove
        }

        private enum CodingKeys: String, CodingKey {
            case add = "Add"
            case remove = "Remove"
        }
    }

    public struct LoadPermissionRequest: AWSEncodableShape {
        /// The name of the group.
        public let group: PermissionGroup?
        /// The AWS account ID.
        public let userId: String?

        public init(group: PermissionGroup? = nil, userId: String? = nil) {
            self.group = group
            self.userId = userId
        }

        private enum CodingKeys: String, CodingKey {
            case group = "Group"
            case userId = "UserId"
        }
    }

    public struct LocalGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The AWS account ID that owns the local gateway.
        public let ownerId: String?
        /// The state of the local gateway.
        public let state: String?
        /// The tags assigned to the local gateway.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayId: String? = nil, outpostArn: String? = nil, ownerId: String? = nil, state: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId
            case outpostArn
            case ownerId
            case state
            case tags = "tagSet"
        }
    }

    public struct LocalGatewayRoute: AWSDecodableShape {
        /// The CIDR block used for destination matches.
        public let destinationCidrBlock: String?
        /// The Amazon Resource Name (ARN) of the local gateway route table.
        public let localGatewayRouteTableArn: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The AWS account ID that owns the local gateway route.
        public let ownerId: String?
        /// The state of the route.
        public let state: LocalGatewayRouteState?
        /// The route type.
        public let type: LocalGatewayRouteType?

        public init(destinationCidrBlock: String? = nil, localGatewayRouteTableArn: String? = nil, localGatewayRouteTableId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, ownerId: String? = nil, state: LocalGatewayRouteState? = nil, type: LocalGatewayRouteType? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.localGatewayRouteTableArn = localGatewayRouteTableArn
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.ownerId = ownerId
            self.state = state
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock
            case localGatewayRouteTableArn
            case localGatewayRouteTableId
            case localGatewayVirtualInterfaceGroupId
            case ownerId
            case state
            case type
        }
    }

    public struct LocalGatewayRouteTable: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The Amazon Resource Name (ARN) of the local gateway route table.
        public let localGatewayRouteTableArn: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The AWS account ID that owns the local gateway route table.
        public let ownerId: String?
        /// The state of the local gateway route table.
        public let state: String?
        /// The tags assigned to the local gateway route table.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayId: String? = nil, localGatewayRouteTableArn: String? = nil, localGatewayRouteTableId: String? = nil, outpostArn: String? = nil, ownerId: String? = nil, state: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayRouteTableArn = localGatewayRouteTableArn
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId
            case localGatewayRouteTableArn
            case localGatewayRouteTableId
            case outpostArn
            case ownerId
            case state
            case tags = "tagSet"
        }
    }

    public struct LocalGatewayRouteTableVirtualInterfaceGroupAssociation: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The Amazon Resource Name (ARN) of the local gateway route table for the virtual interface group.
        public let localGatewayRouteTableArn: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the association.
        public let localGatewayRouteTableVirtualInterfaceGroupAssociationId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The AWS account ID that owns the local gateway virtual interface group association.
        public let ownerId: String?
        /// The state of the association.
        public let state: String?
        /// The tags assigned to the association.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayId: String? = nil, localGatewayRouteTableArn: String? = nil, localGatewayRouteTableId: String? = nil, localGatewayRouteTableVirtualInterfaceGroupAssociationId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, ownerId: String? = nil, state: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayRouteTableArn = localGatewayRouteTableArn
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayRouteTableVirtualInterfaceGroupAssociationId = localGatewayRouteTableVirtualInterfaceGroupAssociationId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId
            case localGatewayRouteTableArn
            case localGatewayRouteTableId
            case localGatewayRouteTableVirtualInterfaceGroupAssociationId
            case localGatewayVirtualInterfaceGroupId
            case ownerId
            case state
            case tags = "tagSet"
        }
    }

    public struct LocalGatewayRouteTableVpcAssociation: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The Amazon Resource Name (ARN) of the local gateway route table for the association.
        public let localGatewayRouteTableArn: String?
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String?
        /// The ID of the association.
        public let localGatewayRouteTableVpcAssociationId: String?
        /// The AWS account ID that owns the local gateway route table for the association.
        public let ownerId: String?
        /// The state of the association.
        public let state: String?
        /// The tags assigned to the association.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(localGatewayId: String? = nil, localGatewayRouteTableArn: String? = nil, localGatewayRouteTableId: String? = nil, localGatewayRouteTableVpcAssociationId: String? = nil, ownerId: String? = nil, state: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayRouteTableArn = localGatewayRouteTableArn
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.localGatewayRouteTableVpcAssociationId = localGatewayRouteTableVpcAssociationId
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId
            case localGatewayRouteTableArn
            case localGatewayRouteTableId
            case localGatewayRouteTableVpcAssociationId
            case ownerId
            case state
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct LocalGatewayVirtualInterface: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The local address.
        public let localAddress: String?
        /// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) of the local gateway.
        public let localBgpAsn: Int?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of the virtual interface.
        public let localGatewayVirtualInterfaceId: String?
        /// The AWS account ID that owns the local gateway virtual interface.
        public let ownerId: String?
        /// The peer address.
        public let peerAddress: String?
        /// The peer BGP ASN.
        public let peerBgpAsn: Int?
        /// The tags assigned to the virtual interface.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VLAN.
        public let vlan: Int?

        public init(localAddress: String? = nil, localBgpAsn: Int? = nil, localGatewayId: String? = nil, localGatewayVirtualInterfaceId: String? = nil, ownerId: String? = nil, peerAddress: String? = nil, peerBgpAsn: Int? = nil, tags: [Tag]? = nil, vlan: Int? = nil) {
            self.localAddress = localAddress
            self.localBgpAsn = localBgpAsn
            self.localGatewayId = localGatewayId
            self.localGatewayVirtualInterfaceId = localGatewayVirtualInterfaceId
            self.ownerId = ownerId
            self.peerAddress = peerAddress
            self.peerBgpAsn = peerBgpAsn
            self.tags = tags
            self.vlan = vlan
        }

        private enum CodingKeys: String, CodingKey {
            case localAddress
            case localBgpAsn
            case localGatewayId
            case localGatewayVirtualInterfaceId
            case ownerId
            case peerAddress
            case peerBgpAsn
            case tags = "tagSet"
            case vlan
        }
    }

    public struct LocalGatewayVirtualInterfaceGroup: AWSDecodableShape {
        public struct _LocalGatewayVirtualInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of the virtual interface group.
        public let localGatewayVirtualInterfaceGroupId: String?
        /// The IDs of the virtual interfaces.
        @OptionalCustomCoding<ArrayCoder<_LocalGatewayVirtualInterfaceIdsEncoding, String>>
        public var localGatewayVirtualInterfaceIds: [String]?
        /// The AWS account ID that owns the local gateway virtual interface group.
        public let ownerId: String?
        /// The tags assigned to the virtual interface group.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(localGatewayId: String? = nil, localGatewayVirtualInterfaceGroupId: String? = nil, localGatewayVirtualInterfaceIds: [String]? = nil, ownerId: String? = nil, tags: [Tag]? = nil) {
            self.localGatewayId = localGatewayId
            self.localGatewayVirtualInterfaceGroupId = localGatewayVirtualInterfaceGroupId
            self.localGatewayVirtualInterfaceIds = localGatewayVirtualInterfaceIds
            self.ownerId = ownerId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case localGatewayId
            case localGatewayVirtualInterfaceGroupId
            case localGatewayVirtualInterfaceIds = "localGatewayVirtualInterfaceIdSet"
            case ownerId
            case tags = "tagSet"
        }
    }

    public struct ManagedPrefixList: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address version.
        public let addressFamily: String?
        /// The maximum number of entries for the prefix list.
        public let maxEntries: Int?
        /// The ID of the owner of the prefix list.
        public let ownerId: String?
        /// The Amazon Resource Name (ARN) for the prefix list.
        public let prefixListArn: String?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The name of the prefix list.
        public let prefixListName: String?
        /// The state of the prefix list.
        public let state: PrefixListState?
        /// The state message.
        public let stateMessage: String?
        /// The tags for the prefix list.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The version of the prefix list.
        public let version: Int64?

        public init(addressFamily: String? = nil, maxEntries: Int? = nil, ownerId: String? = nil, prefixListArn: String? = nil, prefixListId: String? = nil, prefixListName: String? = nil, state: PrefixListState? = nil, stateMessage: String? = nil, tags: [Tag]? = nil, version: Int64? = nil) {
            self.addressFamily = addressFamily
            self.maxEntries = maxEntries
            self.ownerId = ownerId
            self.prefixListArn = prefixListArn
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
            self.state = state
            self.stateMessage = stateMessage
            self.tags = tags
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case addressFamily
            case maxEntries
            case ownerId
            case prefixListArn
            case prefixListId
            case prefixListName
            case state
            case stateMessage
            case tags = "tagSet"
            case version
        }
    }

    public struct MemoryInfo: AWSDecodableShape {
        /// The size of the memory, in MiB.
        public let sizeInMiB: Int64?

        public init(sizeInMiB: Int64? = nil) {
            self.sizeInMiB = sizeInMiB
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMiB
        }
    }

    public struct ModifyAddressAttributeRequest: AWSEncodableShape {
        /// [EC2-VPC] The allocation ID.
        public let allocationId: String
        /// The domain name to modify for the IP address.
        public let domainName: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(allocationId: String, domainName: String? = nil, dryRun: Bool? = nil) {
            self.allocationId = allocationId
            self.domainName = domainName
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case domainName = "DomainName"
            case dryRun = "DryRun"
        }
    }

    public struct ModifyAddressAttributeResult: AWSDecodableShape {
        /// Information about the Elastic IP address.
        public let address: AddressAttribute?

        public init(address: AddressAttribute? = nil) {
            self.address = address
        }

        private enum CodingKeys: String, CodingKey {
            case address
        }
    }

    public struct ModifyAvailabilityZoneGroupRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the Availability Zone group, Local Zone group, or Wavelength Zone group.
        public let groupName: String
        /// Indicates whether you are opted in to the Local Zone group or Wavelength Zone group. The only valid value is opted-in. You must contact AWS Support to opt out of a Local Zone group, or Wavelength Zone group.
        public let optInStatus: ModifyAvailabilityZoneOptInStatus

        public init(dryRun: Bool? = nil, groupName: String, optInStatus: ModifyAvailabilityZoneOptInStatus) {
            self.dryRun = dryRun
            self.groupName = groupName
            self.optInStatus = optInStatus
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupName = "GroupName"
            case optInStatus = "OptInStatus"
        }
    }

    public struct ModifyAvailabilityZoneGroupResult: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifyCapacityReservationRequest: AWSEncodableShape {
        /// Reserved. Capacity Reservations you have created are accepted by default.
        public let accept: Bool?
        /// The ID of the Capacity Reservation.
        public let capacityReservationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to expired when it reaches its end date and time. The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019. You must provide an EndDate value if EndDateType is limited. Omit EndDate if EndDateType is unlimited.
        public let endDate: Date?
        /// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:    unlimited - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an EndDate value if EndDateType is unlimited.    limited - The Capacity Reservation expires automatically at a specified date and time. You must provide an EndDate value if EndDateType is limited.
        public let endDateType: EndDateType?
        /// The number of instances for which to reserve capacity.
        public let instanceCount: Int?

        public init(accept: Bool? = nil, capacityReservationId: String, dryRun: Bool? = nil, endDate: Date? = nil, endDateType: EndDateType? = nil, instanceCount: Int? = nil) {
            self.accept = accept
            self.capacityReservationId = capacityReservationId
            self.dryRun = dryRun
            self.endDate = endDate
            self.endDateType = endDateType
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case accept = "Accept"
            case capacityReservationId = "CapacityReservationId"
            case dryRun = "DryRun"
            case endDate = "EndDate"
            case endDateType = "EndDateType"
            case instanceCount = "InstanceCount"
        }
    }

    public struct ModifyCapacityReservationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifyClientVpnEndpointRequest: AWSEncodableShape {
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The options for managing connection authorization for new client connections.
        public let clientConnectOptions: ClientConnectOptions?
        /// The ID of the Client VPN endpoint to modify.
        public let clientVpnEndpointId: String
        /// Information about the client connection logging options. If you enable client connection logging, data about client connections is sent to a Cloudwatch Logs log stream. The following information is logged:   Client connection requests   Client connection results (successful and unsuccessful)   Reasons for unsuccessful client connection requests   Client connection termination time
        public let connectionLogOptions: ConnectionLogOptions?
        /// A brief description of the Client VPN endpoint.
        public let description: String?
        /// Information about the DNS servers to be used by Client VPN connections. A Client VPN endpoint can have up to two DNS servers.
        public let dnsServers: DnsServersOptionsModifyStructure?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of one or more security groups to apply to the target network.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// Specify whether to enable the self-service portal for the Client VPN endpoint.
        public let selfServicePortal: SelfServicePortal?
        /// The ARN of the server certificate to be used. The server certificate must be provisioned in AWS Certificate Manager (ACM).
        public let serverCertificateArn: String?
        /// Indicates whether the VPN is split-tunnel. For information about split-tunnel VPN endpoints, see Split-Tunnel AWS Client VPN Endpoint in the AWS Client VPN Administrator Guide.
        public let splitTunnel: Bool?
        /// The ID of the VPC to associate with the Client VPN endpoint.
        public let vpcId: String?
        /// The port number to assign to the Client VPN endpoint for TCP and UDP traffic. Valid Values: 443 | 1194  Default Value: 443
        public let vpnPort: Int?

        public init(clientConnectOptions: ClientConnectOptions? = nil, clientVpnEndpointId: String, connectionLogOptions: ConnectionLogOptions? = nil, description: String? = nil, dnsServers: DnsServersOptionsModifyStructure? = nil, dryRun: Bool? = nil, securityGroupIds: [String]? = nil, selfServicePortal: SelfServicePortal? = nil, serverCertificateArn: String? = nil, splitTunnel: Bool? = nil, vpcId: String? = nil, vpnPort: Int? = nil) {
            self.clientConnectOptions = clientConnectOptions
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionLogOptions = connectionLogOptions
            self.description = description
            self.dnsServers = dnsServers
            self.dryRun = dryRun
            self.securityGroupIds = securityGroupIds
            self.selfServicePortal = selfServicePortal
            self.serverCertificateArn = serverCertificateArn
            self.splitTunnel = splitTunnel
            self.vpcId = vpcId
            self.vpnPort = vpnPort
        }

        private enum CodingKeys: String, CodingKey {
            case clientConnectOptions = "ClientConnectOptions"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case connectionLogOptions = "ConnectionLogOptions"
            case description = "Description"
            case dnsServers = "DnsServers"
            case dryRun = "DryRun"
            case securityGroupIds = "SecurityGroupId"
            case selfServicePortal = "SelfServicePortal"
            case serverCertificateArn = "ServerCertificateArn"
            case splitTunnel = "SplitTunnel"
            case vpcId = "VpcId"
            case vpnPort = "VpnPort"
        }
    }

    public struct ModifyClientVpnEndpointResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifyDefaultCreditSpecificationRequest: AWSEncodableShape {
        /// The credit option for CPU usage of the instance family. Valid Values: standard | unlimited
        public let cpuCredits: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance family.
        public let instanceFamily: UnlimitedSupportedInstanceFamily

        public init(cpuCredits: String, dryRun: Bool? = nil, instanceFamily: UnlimitedSupportedInstanceFamily) {
            self.cpuCredits = cpuCredits
            self.dryRun = dryRun
            self.instanceFamily = instanceFamily
        }

        private enum CodingKeys: String, CodingKey {
            case cpuCredits = "CpuCredits"
            case dryRun = "DryRun"
            case instanceFamily = "InstanceFamily"
        }
    }

    public struct ModifyDefaultCreditSpecificationResult: AWSDecodableShape {
        /// The default credit option for CPU usage of the instance family.
        public let instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification?

        public init(instanceFamilyCreditSpecification: InstanceFamilyCreditSpecification? = nil) {
            self.instanceFamilyCreditSpecification = instanceFamilyCreditSpecification
        }

        private enum CodingKeys: String, CodingKey {
            case instanceFamilyCreditSpecification
        }
    }

    public struct ModifyEbsDefaultKmsKeyIdRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If KmsKeyId is specified, the encrypted state must be true. You can specify the CMK using any of the following:   Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.   Key alias. For example, alias/ExampleAlias.   Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.   Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.   AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails. Amazon EBS does not support asymmetric CMKs.
        public let kmsKeyId: String

        public init(dryRun: Bool? = nil, kmsKeyId: String) {
            self.dryRun = dryRun
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct ModifyEbsDefaultKmsKeyIdResult: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the default CMK for encryption by default.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId
        }
    }

    public struct ModifyFleetRequest: AWSEncodableShape {
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Reserved.
        public let context: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
        public let excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy?
        /// The ID of the EC2 Fleet.
        public let fleetId: String
        /// The launch template and overrides.
        @OptionalCustomCoding<ArrayCoder<_LaunchTemplateConfigsEncoding, FleetLaunchTemplateConfigRequest>>
        public var launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]?
        /// The size of the EC2 Fleet.
        public let targetCapacitySpecification: TargetCapacitySpecificationRequest?

        public init(context: String? = nil, dryRun: Bool? = nil, excessCapacityTerminationPolicy: FleetExcessCapacityTerminationPolicy? = nil, fleetId: String, launchTemplateConfigs: [FleetLaunchTemplateConfigRequest]? = nil, targetCapacitySpecification: TargetCapacitySpecificationRequest? = nil) {
            self.context = context
            self.dryRun = dryRun
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fleetId = fleetId
            self.launchTemplateConfigs = launchTemplateConfigs
            self.targetCapacitySpecification = targetCapacitySpecification
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
            try self.validate(self.launchTemplateConfigs, name: "launchTemplateConfigs", parent: name, max: 50)
            try self.validate(self.launchTemplateConfigs, name: "launchTemplateConfigs", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case context = "Context"
            case dryRun = "DryRun"
            case excessCapacityTerminationPolicy = "ExcessCapacityTerminationPolicy"
            case fleetId = "FleetId"
            case launchTemplateConfigs = "LaunchTemplateConfig"
            case targetCapacitySpecification = "TargetCapacitySpecification"
        }
    }

    public struct ModifyFleetResult: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifyFpgaImageAttributeRequest: AWSEncodableShape {
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "ProductCode" }
        public struct _UserGroupsEncoding: ArrayCoderProperties { public static let member = "UserGroup" }
        public struct _UserIdsEncoding: ArrayCoderProperties { public static let member = "UserId" }

        /// The name of the attribute.
        public let attribute: FpgaImageAttributeName?
        /// A description for the AFI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String
        /// The load permission for the AFI.
        public let loadPermission: LoadPermissionModifications?
        /// A name for the AFI.
        public let name: String?
        /// The operation type.
        public let operationType: OperationType?
        /// The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the productCodes attribute.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, String>>
        public var productCodes: [String]?
        /// The user groups. This parameter is valid only when modifying the loadPermission attribute.
        @OptionalCustomCoding<ArrayCoder<_UserGroupsEncoding, String>>
        public var userGroups: [String]?
        /// The AWS account IDs. This parameter is valid only when modifying the loadPermission attribute.
        @OptionalCustomCoding<ArrayCoder<_UserIdsEncoding, String>>
        public var userIds: [String]?

        public init(attribute: FpgaImageAttributeName? = nil, description: String? = nil, dryRun: Bool? = nil, fpgaImageId: String, loadPermission: LoadPermissionModifications? = nil, name: String? = nil, operationType: OperationType? = nil, productCodes: [String]? = nil, userGroups: [String]? = nil, userIds: [String]? = nil) {
            self.attribute = attribute
            self.description = description
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
            self.loadPermission = loadPermission
            self.name = name
            self.operationType = operationType
            self.productCodes = productCodes
            self.userGroups = userGroups
            self.userIds = userIds
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case description = "Description"
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
            case loadPermission = "LoadPermission"
            case name = "Name"
            case operationType = "OperationType"
            case productCodes = "ProductCode"
            case userGroups = "UserGroup"
            case userIds = "UserId"
        }
    }

    public struct ModifyFpgaImageAttributeResult: AWSDecodableShape {
        /// Information about the attribute.
        public let fpgaImageAttribute: FpgaImageAttribute?

        public init(fpgaImageAttribute: FpgaImageAttribute? = nil) {
            self.fpgaImageAttribute = fpgaImageAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case fpgaImageAttribute
        }
    }

    public struct ModifyHostsRequest: AWSEncodableShape {
        public struct _HostIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Specify whether to enable or disable auto-placement.
        public let autoPlacement: AutoPlacement?
        /// The IDs of the Dedicated Hosts to modify.
        @CustomCoding<ArrayCoder<_HostIdsEncoding, String>>
        public var hostIds: [String]
        /// Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, see  Host recovery in the Amazon EC2 User Guide.
        public let hostRecovery: HostRecovery?
        /// Specifies the instance family to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support multiple instance types within its current instance family. If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter and specify InstanceType instead. You cannot specify InstanceFamily and InstanceType in the same request.
        public let instanceFamily: String?
        /// Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support only a specific instance type. If you want to modify a Dedicated Host to support multiple instance types in its current instance family, omit this parameter and specify InstanceFamily instead. You cannot specify InstanceType and InstanceFamily in the same request.
        public let instanceType: String?

        public init(autoPlacement: AutoPlacement? = nil, hostIds: [String], hostRecovery: HostRecovery? = nil, instanceFamily: String? = nil, instanceType: String? = nil) {
            self.autoPlacement = autoPlacement
            self.hostIds = hostIds
            self.hostRecovery = hostRecovery
            self.instanceFamily = instanceFamily
            self.instanceType = instanceType
        }

        private enum CodingKeys: String, CodingKey {
            case autoPlacement
            case hostIds = "hostId"
            case hostRecovery = "HostRecovery"
            case instanceFamily = "InstanceFamily"
            case instanceType = "InstanceType"
        }
    }

    public struct ModifyHostsResult: AWSDecodableShape {
        public struct _SuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts that were successfully modified.
        @OptionalCustomCoding<ArrayCoder<_SuccessfulEncoding, String>>
        public var successful: [String]?
        /// The IDs of the Dedicated Hosts that could not be modified. Check whether the setting you requested can be used.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(successful: [String]? = nil, unsuccessful: [UnsuccessfulItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful
            case unsuccessful
        }
    }

    public struct ModifyIdFormatRequest: AWSEncodableShape {
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
        public let resource: String
        /// Indicate whether the resource should use longer IDs (17-character IDs).
        public let useLongIds: Bool

        public init(resource: String, useLongIds: Bool) {
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case useLongIds = "UseLongIds"
        }
    }

    public struct ModifyIdentityIdFormatRequest: AWSEncodableShape {
        /// The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify all to modify the ID format for all IAM users, IAM roles, and the root user of the account.
        public let principalArn: String
        /// The type of resource: bundle | conversion-task | customer-gateway | dhcp-options | elastic-ip-allocation | elastic-ip-association | export-task | flow-log | image | import-task | internet-gateway | network-acl | network-acl-association | network-interface | network-interface-attachment | prefix-list | route-table | route-table-association | security-group | subnet | subnet-cidr-block-association | vpc | vpc-cidr-block-association | vpc-endpoint | vpc-peering-connection | vpn-connection | vpn-gateway. Alternatively, use the all-current option to include all resource types that are currently within their opt-in period for longer IDs.
        public let resource: String
        /// Indicates whether the resource should use longer IDs (17-character IDs)
        public let useLongIds: Bool

        public init(principalArn: String, resource: String, useLongIds: Bool) {
            self.principalArn = principalArn
            self.resource = resource
            self.useLongIds = useLongIds
        }

        private enum CodingKeys: String, CodingKey {
            case principalArn
            case resource
            case useLongIds
        }
    }

    public struct ModifyImageAttributeRequest: AWSEncodableShape {
        public struct _ProductCodesEncoding: ArrayCoderProperties { public static let member = "ProductCode" }
        public struct _UserGroupsEncoding: ArrayCoderProperties { public static let member = "UserGroup" }
        public struct _UserIdsEncoding: ArrayCoderProperties { public static let member = "UserId" }

        /// The name of the attribute to modify. The valid values are description, launchPermission, and productCodes.
        public let attribute: String?
        /// A new description for the AMI.
        public let description: AttributeValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String
        /// A new launch permission for the AMI.
        public let launchPermission: LaunchPermissionModifications?
        /// The operation type. This parameter can be used only when the Attribute parameter is launchPermission.
        public let operationType: OperationType?
        /// The DevPay product codes. After you add a product code to an AMI, it can't be removed.
        @OptionalCustomCoding<ArrayCoder<_ProductCodesEncoding, String>>
        public var productCodes: [String]?
        /// The user groups. This parameter can be used only when the Attribute parameter is launchPermission.
        @OptionalCustomCoding<ArrayCoder<_UserGroupsEncoding, String>>
        public var userGroups: [String]?
        /// The AWS account IDs. This parameter can be used only when the Attribute parameter is launchPermission.
        @OptionalCustomCoding<ArrayCoder<_UserIdsEncoding, String>>
        public var userIds: [String]?
        /// The value of the attribute being modified. This parameter can be used only when the Attribute parameter is description or productCodes.
        public let value: String?

        public init(attribute: String? = nil, description: AttributeValue? = nil, dryRun: Bool? = nil, imageId: String, launchPermission: LaunchPermissionModifications? = nil, operationType: OperationType? = nil, productCodes: [String]? = nil, userGroups: [String]? = nil, userIds: [String]? = nil, value: String? = nil) {
            self.attribute = attribute
            self.description = description
            self.dryRun = dryRun
            self.imageId = imageId
            self.launchPermission = launchPermission
            self.operationType = operationType
            self.productCodes = productCodes
            self.userGroups = userGroups
            self.userIds = userIds
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case description = "Description"
            case dryRun
            case imageId = "ImageId"
            case launchPermission = "LaunchPermission"
            case operationType = "OperationType"
            case productCodes = "ProductCode"
            case userGroups = "UserGroup"
            case userIds = "UserId"
            case value = "Value"
        }
    }

    public struct ModifyInstanceAttributeRequest: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "groupId" }

        /// The name of the attribute.
        public let attribute: InstanceAttributeName?
        /// Modifies the DeleteOnTermination attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for DeleteOnTermination, the default is true and the volume is deleted when the instance is terminated. To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see Updating the block device mapping when launching an instance in the Amazon EC2 User Guide.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, InstanceBlockDeviceMappingSpecification>>
        public var blockDeviceMappings: [InstanceBlockDeviceMappingSpecification]?
        /// If the value is true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. You cannot use this parameter for Spot Instances.
        public let disableApiTermination: AttributeBooleanValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Specifies whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
        public let ebsOptimized: AttributeBooleanValue?
        /// Set to true to enable enhanced networking with ENA for the instance. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let enaSupport: AttributeBooleanValue?
        /// [EC2-VPC] Replaces the security groups of the instance with the specified security groups. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The ID of the instance.
        public let instanceId: String
        /// Specifies whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: AttributeValue?
        /// Changes the instance type to the specified value. For more information, see Instance types in the Amazon EC2 User Guide. If the instance type is not valid, the error returned is InvalidInstanceAttributeValue.
        public let instanceType: AttributeValue?
        /// Changes the instance's kernel to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let kernel: AttributeValue?
        /// Changes the instance's RAM disk to the specified value. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see PV-GRUB.
        public let ramdisk: AttributeValue?
        /// Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is true, source/destination checks are enabled; otherwise, they are disabled. The default value is true. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.
        public let sourceDestCheck: AttributeBooleanValue?
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the instance. There is no way to disable enhanced networking with the Intel 82599 Virtual Function interface at this time. This option is supported only for HVM instances. Specifying this option with a PV instance can make it unreachable.
        public let sriovNetSupport: AttributeValue?
        /// Changes the instance's user data to the specified value. If you are using an Amazon Web Services SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.
        public let userData: BlobAttributeValue?
        /// A new value for the attribute. Use only with the kernel, ramdisk, userData, disableApiTermination, or instanceInitiatedShutdownBehavior attribute.
        public let value: String?

        public init(attribute: InstanceAttributeName? = nil, blockDeviceMappings: [InstanceBlockDeviceMappingSpecification]? = nil, disableApiTermination: AttributeBooleanValue? = nil, dryRun: Bool? = nil, ebsOptimized: AttributeBooleanValue? = nil, enaSupport: AttributeBooleanValue? = nil, groups: [String]? = nil, instanceId: String, instanceInitiatedShutdownBehavior: AttributeValue? = nil, instanceType: AttributeValue? = nil, kernel: AttributeValue? = nil, ramdisk: AttributeValue? = nil, sourceDestCheck: AttributeBooleanValue? = nil, sriovNetSupport: AttributeValue? = nil, userData: BlobAttributeValue? = nil, value: String? = nil) {
            self.attribute = attribute
            self.blockDeviceMappings = blockDeviceMappings
            self.disableApiTermination = disableApiTermination
            self.dryRun = dryRun
            self.ebsOptimized = ebsOptimized
            self.enaSupport = enaSupport
            self.groups = groups
            self.instanceId = instanceId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceType = instanceType
            self.kernel = kernel
            self.ramdisk = ramdisk
            self.sourceDestCheck = sourceDestCheck
            self.sriovNetSupport = sriovNetSupport
            self.userData = userData
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case attribute
            case blockDeviceMappings = "blockDeviceMapping"
            case disableApiTermination
            case dryRun
            case ebsOptimized
            case enaSupport
            case groups = "GroupId"
            case instanceId
            case instanceInitiatedShutdownBehavior
            case instanceType
            case kernel
            case ramdisk
            case sourceDestCheck = "SourceDestCheck"
            case sriovNetSupport
            case userData
            case value
        }
    }

    public struct ModifyInstanceCapacityReservationAttributesRequest: AWSEncodableShape {
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: CapacityReservationSpecification
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance to be modified.
        public let instanceId: String

        public init(capacityReservationSpecification: CapacityReservationSpecification, dryRun: Bool? = nil, instanceId: String) {
            self.capacityReservationSpecification = capacityReservationSpecification
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct ModifyInstanceCapacityReservationAttributesResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifyInstanceCreditSpecificationRequest: AWSEncodableShape {
        public struct _InstanceCreditSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Information about the credit option for CPU usage.
        @CustomCoding<ArrayCoder<_InstanceCreditSpecificationsEncoding, InstanceCreditSpecificationRequest>>
        public var instanceCreditSpecifications: [InstanceCreditSpecificationRequest]

        public init(clientToken: String? = nil, dryRun: Bool? = nil, instanceCreditSpecifications: [InstanceCreditSpecificationRequest]) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCreditSpecifications = instanceCreditSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case instanceCreditSpecifications = "InstanceCreditSpecification"
        }
    }

    public struct ModifyInstanceCreditSpecificationResult: AWSDecodableShape {
        public struct _SuccessfulInstanceCreditSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulInstanceCreditSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the instances whose credit option for CPU usage was successfully modified.
        @OptionalCustomCoding<ArrayCoder<_SuccessfulInstanceCreditSpecificationsEncoding, SuccessfulInstanceCreditSpecificationItem>>
        public var successfulInstanceCreditSpecifications: [SuccessfulInstanceCreditSpecificationItem]?
        /// Information about the instances whose credit option for CPU usage was not modified.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulInstanceCreditSpecificationsEncoding, UnsuccessfulInstanceCreditSpecificationItem>>
        public var unsuccessfulInstanceCreditSpecifications: [UnsuccessfulInstanceCreditSpecificationItem]?

        public init(successfulInstanceCreditSpecifications: [SuccessfulInstanceCreditSpecificationItem]? = nil, unsuccessfulInstanceCreditSpecifications: [UnsuccessfulInstanceCreditSpecificationItem]? = nil) {
            self.successfulInstanceCreditSpecifications = successfulInstanceCreditSpecifications
            self.unsuccessfulInstanceCreditSpecifications = unsuccessfulInstanceCreditSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case successfulInstanceCreditSpecifications = "successfulInstanceCreditSpecificationSet"
            case unsuccessfulInstanceCreditSpecifications = "unsuccessfulInstanceCreditSpecificationSet"
        }
    }

    public struct ModifyInstanceEventStartTimeRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the event whose date and time you are modifying.
        public let instanceEventId: String
        /// The ID of the instance with the scheduled event.
        public let instanceId: String
        /// The new date and time when the event will take place.
        public let notBefore: Date

        public init(dryRun: Bool? = nil, instanceEventId: String, instanceId: String, notBefore: Date) {
            self.dryRun = dryRun
            self.instanceEventId = instanceEventId
            self.instanceId = instanceId
            self.notBefore = notBefore
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceEventId = "InstanceEventId"
            case instanceId = "InstanceId"
            case notBefore = "NotBefore"
        }
    }

    public struct ModifyInstanceEventStartTimeResult: AWSDecodableShape {
        public let event: InstanceStatusEvent?

        public init(event: InstanceStatusEvent? = nil) {
            self.event = event
        }

        private enum CodingKeys: String, CodingKey {
            case event
        }
    }

    public struct ModifyInstanceEventWindowRequest: AWSEncodableShape {
        /// The cron expression of the event window, for example, * 0-4,20-23 * * 1,5. Constraints:   Only hour and day of the week values are supported.   For day of the week values, you can specify either integers 0 through 6, or alternative single values SUN through SAT.   The minute, month, and year must be specified by *.   The hour value must be one or a multiple range, for example, 0-4 or 0-4,20-23.   Each hour range must be &gt;= 2 hours, for example, 0-2 or 20-23.   The event window must be &gt;= 4 hours. The combined total time ranges in the event window must be &gt;= 4 hours.   For more information about cron expressions, see cron on the Wikipedia website.
        public let cronExpression: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the event window.
        public let instanceEventWindowId: String
        /// The name of the event window.
        public let name: String?
        /// The time ranges of the event window.
        @OptionalCustomCoding<StandardArrayCoder>
        public var timeRanges: [InstanceEventWindowTimeRangeRequest]?

        public init(cronExpression: String? = nil, dryRun: Bool? = nil, instanceEventWindowId: String, name: String? = nil, timeRanges: [InstanceEventWindowTimeRangeRequest]? = nil) {
            self.cronExpression = cronExpression
            self.dryRun = dryRun
            self.instanceEventWindowId = instanceEventWindowId
            self.name = name
            self.timeRanges = timeRanges
        }

        public func validate(name: String) throws {
            try self.timeRanges?.forEach {
                try $0.validate(name: "\(name).timeRanges[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case cronExpression = "CronExpression"
            case dryRun = "DryRun"
            case instanceEventWindowId = "InstanceEventWindowId"
            case name = "Name"
            case timeRanges = "TimeRange"
        }
    }

    public struct ModifyInstanceEventWindowResult: AWSDecodableShape {
        /// Information about the event window.
        public let instanceEventWindow: InstanceEventWindow?

        public init(instanceEventWindow: InstanceEventWindow? = nil) {
            self.instanceEventWindow = instanceEventWindow
        }

        private enum CodingKeys: String, CodingKey {
            case instanceEventWindow
        }
    }

    public struct ModifyInstanceMetadataOptionsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the existing state is maintained.  If you specify a value of disabled, you will not be able to access your instance metadata.
        public let httpEndpoint: InstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained. Possible values: Integers from 1 to 64
        public let httpPutResponseHopLimit: Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public let httpTokens: HttpTokensState?
        /// The ID of the instance.
        public let instanceId: String

        public init(dryRun: Bool? = nil, httpEndpoint: InstanceMetadataEndpointState? = nil, httpPutResponseHopLimit: Int? = nil, httpTokens: HttpTokensState? = nil, instanceId: String) {
            self.dryRun = dryRun
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case httpEndpoint = "HttpEndpoint"
            case httpPutResponseHopLimit = "HttpPutResponseHopLimit"
            case httpTokens = "HttpTokens"
            case instanceId = "InstanceId"
        }
    }

    public struct ModifyInstanceMetadataOptionsResult: AWSDecodableShape {
        /// The ID of the instance.
        public let instanceId: String?
        /// The metadata options for the instance.
        public let instanceMetadataOptions: InstanceMetadataOptionsResponse?

        public init(instanceId: String? = nil, instanceMetadataOptions: InstanceMetadataOptionsResponse? = nil) {
            self.instanceId = instanceId
            self.instanceMetadataOptions = instanceMetadataOptions
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId
            case instanceMetadataOptions
        }
    }

    public struct ModifyInstancePlacementRequest: AWSEncodableShape {
        /// The affinity setting for the instance.
        public let affinity: Affinity?
        /// The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of default. For cluster and partition placement groups, the instance must have a tenancy of default or dedicated. To remove an instance from a placement group, specify an empty string ("").
        public let groupName: String?
        /// The ID of the Dedicated Host with which to associate the instance.
        public let hostId: String?
        /// The ARN of the host resource group in which to place the instance.
        public let hostResourceGroupArn: String?
        /// The ID of the instance that you are modifying.
        public let instanceId: String
        /// Reserved for future use.
        public let partitionNumber: Int?
        /// The tenancy for the instance.
        public let tenancy: HostTenancy?

        public init(affinity: Affinity? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, instanceId: String, partitionNumber: Int? = nil, tenancy: HostTenancy? = nil) {
            self.affinity = affinity
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.instanceId = instanceId
            self.partitionNumber = partitionNumber
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity
            case groupName = "GroupName"
            case hostId
            case hostResourceGroupArn = "HostResourceGroupArn"
            case instanceId
            case partitionNumber = "PartitionNumber"
            case tenancy
        }
    }

    public struct ModifyInstancePlacementResult: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifyLaunchTemplateRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency. Constraint: Maximum 128 ASCII characters.
        public let clientToken: String?
        /// The version number of the launch template to set as the default version.
        public let defaultVersion: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateId: String?
        /// The name of the launch template. You must specify either the launch template ID or launch template name in the request.
        public let launchTemplateName: String?

        public init(clientToken: String? = nil, defaultVersion: String? = nil, dryRun: Bool? = nil, launchTemplateId: String? = nil, launchTemplateName: String? = nil) {
            self.clientToken = clientToken
            self.defaultVersion = defaultVersion
            self.dryRun = dryRun
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
        }

        public func validate(name: String) throws {
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, max: 128)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, min: 3)
            try self.validate(self.launchTemplateName, name: "launchTemplateName", parent: name, pattern: "[a-zA-Z0-9\\(\\)\\.\\-/_]+")
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case defaultVersion = "SetDefaultVersion"
            case dryRun = "DryRun"
            case launchTemplateId = "LaunchTemplateId"
            case launchTemplateName = "LaunchTemplateName"
        }
    }

    public struct ModifyLaunchTemplateResult: AWSDecodableShape {
        /// Information about the launch template.
        public let launchTemplate: LaunchTemplate?

        public init(launchTemplate: LaunchTemplate? = nil) {
            self.launchTemplate = launchTemplate
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplate
        }
    }

    public struct ModifyManagedPrefixListRequest: AWSEncodableShape {
        /// One or more entries to add to the prefix list.
        @OptionalCustomCoding<StandardArrayCoder>
        public var addEntries: [AddPrefixListEntry]?
        /// The current version of the prefix list.
        public let currentVersion: Int64?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// A name for the prefix list.
        public let prefixListName: String?
        /// One or more entries to remove from the prefix list.
        @OptionalCustomCoding<StandardArrayCoder>
        public var removeEntries: [RemovePrefixListEntry]?

        public init(addEntries: [AddPrefixListEntry]? = nil, currentVersion: Int64? = nil, dryRun: Bool? = nil, prefixListId: String, prefixListName: String? = nil, removeEntries: [RemovePrefixListEntry]? = nil) {
            self.addEntries = addEntries
            self.currentVersion = currentVersion
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
            self.removeEntries = removeEntries
        }

        public func validate(name: String) throws {
            try self.validate(self.addEntries, name: "addEntries", parent: name, max: 100)
            try self.validate(self.addEntries, name: "addEntries", parent: name, min: 0)
            try self.validate(self.removeEntries, name: "removeEntries", parent: name, max: 100)
            try self.validate(self.removeEntries, name: "removeEntries", parent: name, min: 0)
        }

        private enum CodingKeys: String, CodingKey {
            case addEntries = "AddEntry"
            case currentVersion = "CurrentVersion"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case prefixListName = "PrefixListName"
            case removeEntries = "RemoveEntry"
        }
    }

    public struct ModifyManagedPrefixListResult: AWSDecodableShape {
        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList
        }
    }

    public struct ModifyNetworkInterfaceAttributeRequest: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }

        /// Information about the interface attachment. If modifying the 'delete on termination' attribute, you must specify the ID of the interface attachment.
        public let attachment: NetworkInterfaceAttachmentChanges?
        /// A description for the network interface.
        public let description: AttributeValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// Enable or disable source/destination checks, which ensure that the instance is either the source or the destination of any traffic that it receives. If the value is true, source/destination checks are enabled; otherwise, they are disabled. The default value is true. You must disable source/destination checks if the instance runs services such as network address translation, routing, or firewalls.
        public let sourceDestCheck: AttributeBooleanValue?

        public init(attachment: NetworkInterfaceAttachmentChanges? = nil, description: AttributeValue? = nil, dryRun: Bool? = nil, groups: [String]? = nil, networkInterfaceId: String, sourceDestCheck: AttributeBooleanValue? = nil) {
            self.attachment = attachment
            self.description = description
            self.dryRun = dryRun
            self.groups = groups
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case attachment
            case description
            case dryRun
            case groups = "SecurityGroupId"
            case networkInterfaceId
            case sourceDestCheck
        }
    }

    public struct ModifyReservedInstancesRequest: AWSEncodableShape {
        public struct _ReservedInstancesIdsEncoding: ArrayCoderProperties { public static let member = "ReservedInstancesId" }
        public struct _TargetConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The IDs of the Reserved Instances to modify.
        @CustomCoding<ArrayCoder<_ReservedInstancesIdsEncoding, String>>
        public var reservedInstancesIds: [String]
        /// The configuration settings for the Reserved Instances to modify.
        @CustomCoding<ArrayCoder<_TargetConfigurationsEncoding, ReservedInstancesConfiguration>>
        public var targetConfigurations: [ReservedInstancesConfiguration]

        public init(clientToken: String? = nil, reservedInstancesIds: [String], targetConfigurations: [ReservedInstancesConfiguration]) {
            self.clientToken = clientToken
            self.reservedInstancesIds = reservedInstancesIds
            self.targetConfigurations = targetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case reservedInstancesIds = "ReservedInstancesId"
            case targetConfigurations = "ReservedInstancesConfigurationSetItemType"
        }
    }

    public struct ModifyReservedInstancesResult: AWSDecodableShape {
        /// The ID for the modification.
        public let reservedInstancesModificationId: String?

        public init(reservedInstancesModificationId: String? = nil) {
            self.reservedInstancesModificationId = reservedInstancesModificationId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesModificationId
        }
    }

    public struct ModifySecurityGroupRulesRequest: AWSEncodableShape {
        public struct _SecurityGroupRulesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group.
        public let groupId: String
        /// Information about the security group properties to update.
        @CustomCoding<ArrayCoder<_SecurityGroupRulesEncoding, SecurityGroupRuleUpdate>>
        public var securityGroupRules: [SecurityGroupRuleUpdate]

        public init(dryRun: Bool? = nil, groupId: String, securityGroupRules: [SecurityGroupRuleUpdate]) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.securityGroupRules = securityGroupRules
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
            case securityGroupRules = "SecurityGroupRule"
        }
    }

    public struct ModifySecurityGroupRulesResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifySnapshotAttributeRequest: AWSEncodableShape {
        public struct _GroupNamesEncoding: ArrayCoderProperties { public static let member = "GroupName" }
        public struct _UserIdsEncoding: ArrayCoderProperties { public static let member = "UserId" }

        /// The snapshot attribute to modify. Only volume creation permissions can be modified.
        public let attribute: SnapshotAttributeName?
        /// A JSON representation of the snapshot attribute modification.
        public let createVolumePermission: CreateVolumePermissionModifications?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The group to modify for the snapshot.
        @OptionalCustomCoding<ArrayCoder<_GroupNamesEncoding, String>>
        public var groupNames: [String]?
        /// The type of operation to perform to the attribute.
        public let operationType: OperationType?
        /// The ID of the snapshot.
        public let snapshotId: String
        /// The account ID to modify for the snapshot.
        @OptionalCustomCoding<ArrayCoder<_UserIdsEncoding, String>>
        public var userIds: [String]?

        public init(attribute: SnapshotAttributeName? = nil, createVolumePermission: CreateVolumePermissionModifications? = nil, dryRun: Bool? = nil, groupNames: [String]? = nil, operationType: OperationType? = nil, snapshotId: String, userIds: [String]? = nil) {
            self.attribute = attribute
            self.createVolumePermission = createVolumePermission
            self.dryRun = dryRun
            self.groupNames = groupNames
            self.operationType = operationType
            self.snapshotId = snapshotId
            self.userIds = userIds
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case createVolumePermission = "CreateVolumePermission"
            case dryRun
            case groupNames = "UserGroup"
            case operationType = "OperationType"
            case snapshotId = "SnapshotId"
            case userIds = "UserId"
        }
    }

    public struct ModifySpotFleetRequestRequest: AWSEncodableShape {
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Reserved.
        public let context: String?
        /// Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
        /// The launch template and overrides. You can only use this parameter if you specified a launch template (LaunchTemplateConfigs) in your Spot Fleet request. If you specified LaunchSpecifications in your Spot Fleet request, then omit this parameter.
        @OptionalCustomCoding<ArrayCoder<_LaunchTemplateConfigsEncoding, LaunchTemplateConfig>>
        public var launchTemplateConfigs: [LaunchTemplateConfig]?
        /// The number of On-Demand Instances in the fleet.
        public let onDemandTargetCapacity: Int?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String
        /// The size of the fleet.
        public let targetCapacity: Int?

        public init(context: String? = nil, excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil, launchTemplateConfigs: [LaunchTemplateConfig]? = nil, onDemandTargetCapacity: Int? = nil, spotFleetRequestId: String, targetCapacity: Int? = nil) {
            self.context = context
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.launchTemplateConfigs = launchTemplateConfigs
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotFleetRequestId = spotFleetRequestId
            self.targetCapacity = targetCapacity
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case context = "Context"
            case excessCapacityTerminationPolicy
            case launchTemplateConfigs = "LaunchTemplateConfig"
            case onDemandTargetCapacity = "OnDemandTargetCapacity"
            case spotFleetRequestId
            case targetCapacity
        }
    }

    public struct ModifySpotFleetRequestResponse: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifySubnetAttributeRequest: AWSEncodableShape {
        /// Specify true to indicate that network interfaces created in the specified subnet should be assigned an IPv6 address. This includes a network interface that's created when launching an instance into the subnet (the instance therefore receives an IPv6 address).  If you enable the IPv6 addressing feature for your subnet, your network interface or instance only receives an IPv6 address if it's created using version 2016-11-15 or later of the Amazon EC2 API.
        public let assignIpv6AddressOnCreation: AttributeBooleanValue?
        /// The customer-owned IPv4 address pool associated with the subnet. You must set this value when you specify true for MapCustomerOwnedIpOnLaunch.
        public let customerOwnedIpv4Pool: String?
        /// Specify true to indicate that network interfaces attached to instances created in the specified subnet should be assigned a customer-owned IPv4 address. When this value is true, you must specify the customer-owned IP pool using CustomerOwnedIpv4Pool.
        public let mapCustomerOwnedIpOnLaunch: AttributeBooleanValue?
        /// Specify true to indicate that network interfaces attached to instances created in the specified subnet should be assigned a public IPv4 address.
        public let mapPublicIpOnLaunch: AttributeBooleanValue?
        /// The ID of the subnet.
        public let subnetId: String

        public init(assignIpv6AddressOnCreation: AttributeBooleanValue? = nil, customerOwnedIpv4Pool: String? = nil, mapCustomerOwnedIpOnLaunch: AttributeBooleanValue? = nil, mapPublicIpOnLaunch: AttributeBooleanValue? = nil, subnetId: String) {
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case assignIpv6AddressOnCreation = "AssignIpv6AddressOnCreation"
            case customerOwnedIpv4Pool = "CustomerOwnedIpv4Pool"
            case mapCustomerOwnedIpOnLaunch = "MapCustomerOwnedIpOnLaunch"
            case mapPublicIpOnLaunch = "MapPublicIpOnLaunch"
            case subnetId
        }
    }

    public struct ModifyTrafficMirrorFilterNetworkServicesRequest: AWSEncodableShape {
        public struct _AddNetworkServicesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveNetworkServicesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network service, for example Amazon DNS, that you want to mirror.
        @OptionalCustomCoding<ArrayCoder<_AddNetworkServicesEncoding, TrafficMirrorNetworkService>>
        public var addNetworkServices: [TrafficMirrorNetworkService]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The network service, for example Amazon DNS, that you no longer want to mirror.
        @OptionalCustomCoding<ArrayCoder<_RemoveNetworkServicesEncoding, TrafficMirrorNetworkService>>
        public var removeNetworkServices: [TrafficMirrorNetworkService]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String

        public init(addNetworkServices: [TrafficMirrorNetworkService]? = nil, dryRun: Bool? = nil, removeNetworkServices: [TrafficMirrorNetworkService]? = nil, trafficMirrorFilterId: String) {
            self.addNetworkServices = addNetworkServices
            self.dryRun = dryRun
            self.removeNetworkServices = removeNetworkServices
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case addNetworkServices = "AddNetworkService"
            case dryRun = "DryRun"
            case removeNetworkServices = "RemoveNetworkService"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
        }
    }

    public struct ModifyTrafficMirrorFilterNetworkServicesResult: AWSDecodableShape {
        /// The Traffic Mirror filter that the network service is associated with.
        public let trafficMirrorFilter: TrafficMirrorFilter?

        public init(trafficMirrorFilter: TrafficMirrorFilter? = nil) {
            self.trafficMirrorFilter = trafficMirrorFilter
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilter
        }
    }

    public struct ModifyTrafficMirrorFilterRuleRequest: AWSEncodableShape {
        /// The description to assign to the Traffic Mirror rule.
        public let description: String?
        /// The destination CIDR block to assign to the Traffic Mirror rule.
        public let destinationCidrBlock: String?
        /// The destination ports that are associated with the Traffic Mirror rule.
        public let destinationPortRange: TrafficMirrorPortRangeRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The protocol, for example TCP, to assign to the Traffic Mirror rule.
        public let `protocol`: Int?
        /// The properties that you want to remove from the Traffic Mirror filter rule. When you remove a property from a Traffic Mirror filter rule, the property is set to the default.
        @OptionalCustomCoding<StandardArrayCoder>
        public var removeFields: [TrafficMirrorFilterRuleField]?
        /// The action to assign to the rule.
        public let ruleAction: TrafficMirrorRuleAction?
        /// The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
        public let ruleNumber: Int?
        /// The source CIDR block to assign to the Traffic Mirror rule.
        public let sourceCidrBlock: String?
        /// The port range to assign to the Traffic Mirror rule.
        public let sourcePortRange: TrafficMirrorPortRangeRequest?
        /// The type of traffic (ingress | egress) to assign to the rule.
        public let trafficDirection: TrafficDirection?
        /// The ID of the Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String

        public init(description: String? = nil, destinationCidrBlock: String? = nil, destinationPortRange: TrafficMirrorPortRangeRequest? = nil, dryRun: Bool? = nil, protocol: Int? = nil, removeFields: [TrafficMirrorFilterRuleField]? = nil, ruleAction: TrafficMirrorRuleAction? = nil, ruleNumber: Int? = nil, sourceCidrBlock: String? = nil, sourcePortRange: TrafficMirrorPortRangeRequest? = nil, trafficDirection: TrafficDirection? = nil, trafficMirrorFilterRuleId: String) {
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.dryRun = dryRun
            self.`protocol` = `protocol`
            self.removeFields = removeFields
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
            self.trafficDirection = trafficDirection
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case destinationCidrBlock = "DestinationCidrBlock"
            case destinationPortRange = "DestinationPortRange"
            case dryRun = "DryRun"
            case `protocol` = "Protocol"
            case removeFields = "RemoveField"
            case ruleAction = "RuleAction"
            case ruleNumber = "RuleNumber"
            case sourceCidrBlock = "SourceCidrBlock"
            case sourcePortRange = "SourcePortRange"
            case trafficDirection = "TrafficDirection"
            case trafficMirrorFilterRuleId = "TrafficMirrorFilterRuleId"
        }
    }

    public struct ModifyTrafficMirrorFilterRuleResult: AWSDecodableShape {
        /// Modifies a Traffic Mirror rule.
        public let trafficMirrorFilterRule: TrafficMirrorFilterRule?

        public init(trafficMirrorFilterRule: TrafficMirrorFilterRule? = nil) {
            self.trafficMirrorFilterRule = trafficMirrorFilterRule
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorFilterRule
        }
    }

    public struct ModifyTrafficMirrorSessionRequest: AWSEncodableShape {
        /// The description to assign to the Traffic Mirror session.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet.
        public let packetLength: Int?
        /// The properties that you want to remove from the Traffic Mirror session. When you remove a property from a Traffic Mirror session, the property is set to the default.
        @OptionalCustomCoding<StandardArrayCoder>
        public var removeFields: [TrafficMirrorSessionField]?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public let sessionNumber: Int?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?
        /// The ID of the Traffic Mirror session.
        public let trafficMirrorSessionId: String
        /// The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.
        public let trafficMirrorTargetId: String?
        /// The virtual network ID of the Traffic Mirror session.
        public let virtualNetworkId: Int?

        public init(description: String? = nil, dryRun: Bool? = nil, packetLength: Int? = nil, removeFields: [TrafficMirrorSessionField]? = nil, sessionNumber: Int? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorSessionId: String, trafficMirrorTargetId: String? = nil, virtualNetworkId: Int? = nil) {
            self.description = description
            self.dryRun = dryRun
            self.packetLength = packetLength
            self.removeFields = removeFields
            self.sessionNumber = sessionNumber
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorSessionId = trafficMirrorSessionId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case packetLength = "PacketLength"
            case removeFields = "RemoveField"
            case sessionNumber = "SessionNumber"
            case trafficMirrorFilterId = "TrafficMirrorFilterId"
            case trafficMirrorSessionId = "TrafficMirrorSessionId"
            case trafficMirrorTargetId = "TrafficMirrorTargetId"
            case virtualNetworkId = "VirtualNetworkId"
        }
    }

    public struct ModifyTrafficMirrorSessionResult: AWSDecodableShape {
        /// Information about the Traffic Mirror session.
        public let trafficMirrorSession: TrafficMirrorSession?

        public init(trafficMirrorSession: TrafficMirrorSession? = nil) {
            self.trafficMirrorSession = trafficMirrorSession
        }

        private enum CodingKeys: String, CodingKey {
            case trafficMirrorSession
        }
    }

    public struct ModifyTransitGatewayOptions: AWSEncodableShape {
        public struct _AddTransitGatewayCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveTransitGatewayCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Adds IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
        @OptionalCustomCoding<ArrayCoder<_AddTransitGatewayCidrBlocksEncoding, String>>
        public var addTransitGatewayCidrBlocks: [String]?
        /// The ID of the default association route table.
        public let associationDefaultRouteTableId: String?
        /// Enable or disable automatic acceptance of attachment requests.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// Enable or disable automatic association with the default association route table.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// Enable or disable automatic propagation of routes to the default propagation route table.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Enable or disable DNS support.
        public let dnsSupport: DnsSupportValue?
        /// The ID of the default propagation route table.
        public let propagationDefaultRouteTableId: String?
        /// Removes CIDR blocks for the transit gateway.
        @OptionalCustomCoding<ArrayCoder<_RemoveTransitGatewayCidrBlocksEncoding, String>>
        public var removeTransitGatewayCidrBlocks: [String]?
        /// Enable or disable Equal Cost Multipath Protocol support.
        public let vpnEcmpSupport: VpnEcmpSupportValue?

        public init(addTransitGatewayCidrBlocks: [String]? = nil, associationDefaultRouteTableId: String? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, dnsSupport: DnsSupportValue? = nil, propagationDefaultRouteTableId: String? = nil, removeTransitGatewayCidrBlocks: [String]? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil) {
            self.addTransitGatewayCidrBlocks = addTransitGatewayCidrBlocks
            self.associationDefaultRouteTableId = associationDefaultRouteTableId
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.dnsSupport = dnsSupport
            self.propagationDefaultRouteTableId = propagationDefaultRouteTableId
            self.removeTransitGatewayCidrBlocks = removeTransitGatewayCidrBlocks
            self.vpnEcmpSupport = vpnEcmpSupport
        }

        private enum CodingKeys: String, CodingKey {
            case addTransitGatewayCidrBlocks = "AddTransitGatewayCidrBlocks"
            case associationDefaultRouteTableId = "AssociationDefaultRouteTableId"
            case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
            case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
            case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
            case dnsSupport = "DnsSupport"
            case propagationDefaultRouteTableId = "PropagationDefaultRouteTableId"
            case removeTransitGatewayCidrBlocks = "RemoveTransitGatewayCidrBlocks"
            case vpnEcmpSupport = "VpnEcmpSupport"
        }
    }

    public struct ModifyTransitGatewayPrefixListReferenceRequest: AWSEncodableShape {
        /// Indicates whether to drop traffic that matches this route.
        public let blackhole: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// The ID of the attachment to which traffic is routed.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(blackhole: Bool? = nil, dryRun: Bool? = nil, prefixListId: String, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String) {
            self.blackhole = blackhole
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct ModifyTransitGatewayPrefixListReferenceResult: AWSDecodableShape {
        /// Information about the prefix list reference.
        public let transitGatewayPrefixListReference: TransitGatewayPrefixListReference?

        public init(transitGatewayPrefixListReference: TransitGatewayPrefixListReference? = nil) {
            self.transitGatewayPrefixListReference = transitGatewayPrefixListReference
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPrefixListReference
        }
    }

    public struct ModifyTransitGatewayRequest: AWSEncodableShape {
        /// The description for the transit gateway.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The options to modify.
        public let options: ModifyTransitGatewayOptions?
        /// The ID of the transit gateway.
        public let transitGatewayId: String

        public init(description: String? = nil, dryRun: Bool? = nil, options: ModifyTransitGatewayOptions? = nil, transitGatewayId: String) {
            self.description = description
            self.dryRun = dryRun
            self.options = options
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case dryRun = "DryRun"
            case options = "Options"
            case transitGatewayId = "TransitGatewayId"
        }
    }

    public struct ModifyTransitGatewayResult: AWSDecodableShape {
        public let transitGateway: TransitGateway?

        public init(transitGateway: TransitGateway? = nil) {
            self.transitGateway = transitGateway
        }

        private enum CodingKeys: String, CodingKey {
            case transitGateway
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        public struct _AddSubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveSubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.
        @OptionalCustomCoding<ArrayCoder<_AddSubnetIdsEncoding, String>>
        public var addSubnetIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The new VPC attachment options.  You cannot modify the IPv6 options.
        public let options: ModifyTransitGatewayVpcAttachmentRequestOptions?
        /// The IDs of one or more subnets to remove.
        @OptionalCustomCoding<ArrayCoder<_RemoveSubnetIdsEncoding, String>>
        public var removeSubnetIds: [String]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(addSubnetIds: [String]? = nil, dryRun: Bool? = nil, options: ModifyTransitGatewayVpcAttachmentRequestOptions? = nil, removeSubnetIds: [String]? = nil, transitGatewayAttachmentId: String) {
            self.addSubnetIds = addSubnetIds
            self.dryRun = dryRun
            self.options = options
            self.removeSubnetIds = removeSubnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case addSubnetIds = "AddSubnetIds"
            case dryRun = "DryRun"
            case options = "Options"
            case removeSubnetIds = "RemoveSubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentRequestOptions: AWSEncodableShape {
        /// Enable or disable support for appliance mode. If enabled, a traffic flow between a source and destination uses the same Availability Zone for the VPC attachment for the lifetime of that flow. The default is disable.
        public let applianceModeSupport: ApplianceModeSupportValue?
        /// Enable or disable DNS support. The default is enable.
        public let dnsSupport: DnsSupportValue?
        /// Enable or disable IPv6 support. The default is enable.
        public let ipv6Support: Ipv6SupportValue?

        public init(applianceModeSupport: ApplianceModeSupportValue? = nil, dnsSupport: DnsSupportValue? = nil, ipv6Support: Ipv6SupportValue? = nil) {
            self.applianceModeSupport = applianceModeSupport
            self.dnsSupport = dnsSupport
            self.ipv6Support = ipv6Support
        }

        private enum CodingKeys: String, CodingKey {
            case applianceModeSupport = "ApplianceModeSupport"
            case dnsSupport = "DnsSupport"
            case ipv6Support = "Ipv6Support"
        }
    }

    public struct ModifyTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// Information about the modified attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment
        }
    }

    public struct ModifyVolumeAttributeRequest: AWSEncodableShape {
        /// Indicates whether the volume should be auto-enabled for I/O operations.
        public let autoEnableIO: AttributeBooleanValue?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the volume.
        public let volumeId: String

        public init(autoEnableIO: AttributeBooleanValue? = nil, dryRun: Bool? = nil, volumeId: String) {
            self.autoEnableIO = autoEnableIO
            self.dryRun = dryRun
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case autoEnableIO = "AutoEnableIO"
            case dryRun
            case volumeId = "VolumeId"
        }
    }

    public struct ModifyVolumeRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The target IOPS rate of the volume. This parameter is valid only for gp3, io1, and io2 volumes. The following are the supported values for each volume type:    gp3: 3,000-16,000 IOPS    io1: 100-64,000 IOPS    io2: 100-64,000 IOPS   Default: If no IOPS value is specified, the existing value is retained, unless a volume type is modified that supports different values.
        public let iops: Int?
        /// Specifies whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach, you can attach the volume to up to 16  Nitro-based instances in the same Availability Zone. This parameter is supported with io1 and io2 volumes only. For more information, see  Amazon EBS Multi-Attach in the Amazon Elastic Compute Cloud User Guide.
        public let multiAttachEnabled: Bool?
        /// The target size of the volume, in GiB. The target volume size must be greater than or equal to the existing size of the volume. The following are the supported volumes sizes for each volume type:    gp2 and gp3: 1-16,384    io1 and io2: 4-16,384    st1 and sc1: 125-16,384    standard: 1-1,024   Default: If no size is specified, the existing size is retained.
        public let size: Int?
        /// The target throughput of the volume, in MiB/s. This parameter is valid only for gp3 volumes. The maximum value is 1,000. Default: If no throughput value is specified, the existing value is retained. Valid Range: Minimum value of 125. Maximum value of 1000.
        public let throughput: Int?
        /// The ID of the volume.
        public let volumeId: String
        /// The target EBS volume type of the volume. For more information, see Amazon EBS volume types in the Amazon Elastic Compute Cloud User Guide. Default: If no type is specified, the existing type is retained.
        public let volumeType: VolumeType?

        public init(dryRun: Bool? = nil, iops: Int? = nil, multiAttachEnabled: Bool? = nil, size: Int? = nil, throughput: Int? = nil, volumeId: String, volumeType: VolumeType? = nil) {
            self.dryRun = dryRun
            self.iops = iops
            self.multiAttachEnabled = multiAttachEnabled
            self.size = size
            self.throughput = throughput
            self.volumeId = volumeId
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case iops = "Iops"
            case multiAttachEnabled = "MultiAttachEnabled"
            case size = "Size"
            case throughput = "Throughput"
            case volumeId = "VolumeId"
            case volumeType = "VolumeType"
        }
    }

    public struct ModifyVolumeResult: AWSDecodableShape {
        /// Information about the volume modification.
        public let volumeModification: VolumeModification?

        public init(volumeModification: VolumeModification? = nil) {
            self.volumeModification = volumeModification
        }

        private enum CodingKeys: String, CodingKey {
            case volumeModification
        }
    }

    public struct ModifyVpcAttributeRequest: AWSEncodableShape {
        /// Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute. You can only enable DNS hostnames if you've enabled DNS support.
        public let enableDnsHostnames: AttributeBooleanValue?
        /// Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. You cannot modify the DNS resolution and DNS hostnames attributes in the same request. Use separate requests for each attribute.
        public let enableDnsSupport: AttributeBooleanValue?
        /// The ID of the VPC.
        public let vpcId: String

        public init(enableDnsHostnames: AttributeBooleanValue? = nil, enableDnsSupport: AttributeBooleanValue? = nil, vpcId: String) {
            self.enableDnsHostnames = enableDnsHostnames
            self.enableDnsSupport = enableDnsSupport
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case enableDnsHostnames = "EnableDnsHostnames"
            case enableDnsSupport = "EnableDnsSupport"
            case vpcId
        }
    }

    public struct ModifyVpcEndpointConnectionNotificationRequest: AWSEncodableShape {
        public struct _ConnectionEventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more events for the endpoint. Valid values are Accept, Connect, Delete, and Reject.
        @OptionalCustomCoding<ArrayCoder<_ConnectionEventsEncoding, String>>
        public var connectionEvents: [String]?
        /// The ARN for the SNS topic for the notification.
        public let connectionNotificationArn: String?
        /// The ID of the notification.
        public let connectionNotificationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(connectionEvents: [String]? = nil, connectionNotificationArn: String? = nil, connectionNotificationId: String, dryRun: Bool? = nil) {
            self.connectionEvents = connectionEvents
            self.connectionNotificationArn = connectionNotificationArn
            self.connectionNotificationId = connectionNotificationId
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case connectionEvents = "ConnectionEvents"
            case connectionNotificationArn = "ConnectionNotificationArn"
            case connectionNotificationId = "ConnectionNotificationId"
            case dryRun = "DryRun"
        }
    }

    public struct ModifyVpcEndpointConnectionNotificationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct ModifyVpcEndpointRequest: AWSEncodableShape {
        public struct _AddRouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AddSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AddSubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveRouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveSecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveSubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
        @OptionalCustomCoding<ArrayCoder<_AddRouteTableIdsEncoding, String>>
        public var addRouteTableIds: [String]?
        /// (Interface endpoint) One or more security group IDs to associate with the network interface.
        @OptionalCustomCoding<ArrayCoder<_AddSecurityGroupIdsEncoding, String>>
        public var addSecurityGroupIds: [String]?
        /// (Interface and Gateway Load Balancer endpoints) One or more subnet IDs in which to serve the endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
        @OptionalCustomCoding<ArrayCoder<_AddSubnetIdsEncoding, String>>
        public var addSubnetIds: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// (Interface and gateway endpoints) A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether a private hosted zone is associated with the VPC.
        public let privateDnsEnabled: Bool?
        /// (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
        @OptionalCustomCoding<ArrayCoder<_RemoveRouteTableIdsEncoding, String>>
        public var removeRouteTableIds: [String]?
        /// (Interface endpoint) One or more security group IDs to disassociate from the network interface.
        @OptionalCustomCoding<ArrayCoder<_RemoveSecurityGroupIdsEncoding, String>>
        public var removeSecurityGroupIds: [String]?
        /// (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
        @OptionalCustomCoding<ArrayCoder<_RemoveSubnetIdsEncoding, String>>
        public var removeSubnetIds: [String]?
        /// (Gateway endpoint) Specify true to reset the policy document to the default policy. The default policy allows full access to the service.
        public let resetPolicy: Bool?
        /// The ID of the endpoint.
        public let vpcEndpointId: String

        public init(addRouteTableIds: [String]? = nil, addSecurityGroupIds: [String]? = nil, addSubnetIds: [String]? = nil, dryRun: Bool? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, removeRouteTableIds: [String]? = nil, removeSecurityGroupIds: [String]? = nil, removeSubnetIds: [String]? = nil, resetPolicy: Bool? = nil, vpcEndpointId: String) {
            self.addRouteTableIds = addRouteTableIds
            self.addSecurityGroupIds = addSecurityGroupIds
            self.addSubnetIds = addSubnetIds
            self.dryRun = dryRun
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.removeRouteTableIds = removeRouteTableIds
            self.removeSecurityGroupIds = removeSecurityGroupIds
            self.removeSubnetIds = removeSubnetIds
            self.resetPolicy = resetPolicy
            self.vpcEndpointId = vpcEndpointId
        }

        private enum CodingKeys: String, CodingKey {
            case addRouteTableIds = "AddRouteTableId"
            case addSecurityGroupIds = "AddSecurityGroupId"
            case addSubnetIds = "AddSubnetId"
            case dryRun = "DryRun"
            case policyDocument = "PolicyDocument"
            case privateDnsEnabled = "PrivateDnsEnabled"
            case removeRouteTableIds = "RemoveRouteTableId"
            case removeSecurityGroupIds = "RemoveSecurityGroupId"
            case removeSubnetIds = "RemoveSubnetId"
            case resetPolicy = "ResetPolicy"
            case vpcEndpointId = "VpcEndpointId"
        }
    }

    public struct ModifyVpcEndpointResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifyVpcEndpointServiceConfigurationRequest: AWSEncodableShape {
        public struct _AddGatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AddNetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveGatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveNetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether requests to create an endpoint to your service must be accepted.
        public let acceptanceRequired: Bool?
        /// The Amazon Resource Names (ARNs) of Gateway Load Balancers to add to your service configuration.
        @OptionalCustomCoding<ArrayCoder<_AddGatewayLoadBalancerArnsEncoding, String>>
        public var addGatewayLoadBalancerArns: [String]?
        /// The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration.
        @OptionalCustomCoding<ArrayCoder<_AddNetworkLoadBalancerArnsEncoding, String>>
        public var addNetworkLoadBalancerArns: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// (Interface endpoint configuration) The private DNS name to assign to the endpoint service.
        public let privateDnsName: String?
        /// The Amazon Resource Names (ARNs) of Gateway Load Balancers to remove from your service configuration.
        @OptionalCustomCoding<ArrayCoder<_RemoveGatewayLoadBalancerArnsEncoding, String>>
        public var removeGatewayLoadBalancerArns: [String]?
        /// The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration.
        @OptionalCustomCoding<ArrayCoder<_RemoveNetworkLoadBalancerArnsEncoding, String>>
        public var removeNetworkLoadBalancerArns: [String]?
        /// (Interface endpoint configuration) Removes the private DNS name of the endpoint service.
        public let removePrivateDnsName: Bool?
        /// The ID of the service.
        public let serviceId: String

        public init(acceptanceRequired: Bool? = nil, addGatewayLoadBalancerArns: [String]? = nil, addNetworkLoadBalancerArns: [String]? = nil, dryRun: Bool? = nil, privateDnsName: String? = nil, removeGatewayLoadBalancerArns: [String]? = nil, removeNetworkLoadBalancerArns: [String]? = nil, removePrivateDnsName: Bool? = nil, serviceId: String) {
            self.acceptanceRequired = acceptanceRequired
            self.addGatewayLoadBalancerArns = addGatewayLoadBalancerArns
            self.addNetworkLoadBalancerArns = addNetworkLoadBalancerArns
            self.dryRun = dryRun
            self.privateDnsName = privateDnsName
            self.removeGatewayLoadBalancerArns = removeGatewayLoadBalancerArns
            self.removeNetworkLoadBalancerArns = removeNetworkLoadBalancerArns
            self.removePrivateDnsName = removePrivateDnsName
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired = "AcceptanceRequired"
            case addGatewayLoadBalancerArns = "AddGatewayLoadBalancerArn"
            case addNetworkLoadBalancerArns = "AddNetworkLoadBalancerArn"
            case dryRun = "DryRun"
            case privateDnsName = "PrivateDnsName"
            case removeGatewayLoadBalancerArns = "RemoveGatewayLoadBalancerArn"
            case removeNetworkLoadBalancerArns = "RemoveNetworkLoadBalancerArn"
            case removePrivateDnsName = "RemovePrivateDnsName"
            case serviceId = "ServiceId"
        }
    }

    public struct ModifyVpcEndpointServiceConfigurationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ModifyVpcEndpointServicePermissionsRequest: AWSEncodableShape {
        public struct _AddAllowedPrincipalsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RemoveAllowedPrincipalsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Amazon Resource Names (ARN) of one or more principals. Permissions are granted to the principals in this list. To grant permissions to all principals, specify an asterisk (*).
        @OptionalCustomCoding<ArrayCoder<_AddAllowedPrincipalsEncoding, String>>
        public var addAllowedPrincipals: [String]?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARN) of one or more principals. Permissions are revoked for principals in this list.
        @OptionalCustomCoding<ArrayCoder<_RemoveAllowedPrincipalsEncoding, String>>
        public var removeAllowedPrincipals: [String]?
        /// The ID of the service.
        public let serviceId: String

        public init(addAllowedPrincipals: [String]? = nil, dryRun: Bool? = nil, removeAllowedPrincipals: [String]? = nil, serviceId: String) {
            self.addAllowedPrincipals = addAllowedPrincipals
            self.dryRun = dryRun
            self.removeAllowedPrincipals = removeAllowedPrincipals
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case addAllowedPrincipals = "AddAllowedPrincipals"
            case dryRun = "DryRun"
            case removeAllowedPrincipals = "RemoveAllowedPrincipals"
            case serviceId = "ServiceId"
        }
    }

    public struct ModifyVpcEndpointServicePermissionsResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct ModifyVpcPeeringConnectionOptionsRequest: AWSEncodableShape {
        /// The VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(accepterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, dryRun: Bool? = nil, requesterPeeringConnectionOptions: PeeringConnectionOptionsRequest? = nil, vpcPeeringConnectionId: String) {
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.dryRun = dryRun
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterPeeringConnectionOptions = "AccepterPeeringConnectionOptions"
            case dryRun = "DryRun"
            case requesterPeeringConnectionOptions = "RequesterPeeringConnectionOptions"
            case vpcPeeringConnectionId = "VpcPeeringConnectionId"
        }
    }

    public struct ModifyVpcPeeringConnectionOptionsResult: AWSDecodableShape {
        /// Information about the VPC peering connection options for the accepter VPC.
        public let accepterPeeringConnectionOptions: PeeringConnectionOptions?
        /// Information about the VPC peering connection options for the requester VPC.
        public let requesterPeeringConnectionOptions: PeeringConnectionOptions?

        public init(accepterPeeringConnectionOptions: PeeringConnectionOptions? = nil, requesterPeeringConnectionOptions: PeeringConnectionOptions? = nil) {
            self.accepterPeeringConnectionOptions = accepterPeeringConnectionOptions
            self.requesterPeeringConnectionOptions = requesterPeeringConnectionOptions
        }

        private enum CodingKeys: String, CodingKey {
            case accepterPeeringConnectionOptions
            case requesterPeeringConnectionOptions
        }
    }

    public struct ModifyVpcTenancyRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance tenancy attribute for the VPC.
        public let instanceTenancy: VpcTenancy
        /// The ID of the VPC.
        public let vpcId: String

        public init(dryRun: Bool? = nil, instanceTenancy: VpcTenancy, vpcId: String) {
            self.dryRun = dryRun
            self.instanceTenancy = instanceTenancy
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceTenancy = "InstanceTenancy"
            case vpcId = "VpcId"
        }
    }

    public struct ModifyVpcTenancyResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct ModifyVpnConnectionOptionsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0
        public let localIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0
        public let localIpv6NetworkCidr: String?
        /// The IPv4 CIDR on the AWS side of the VPN connection. Default: 0.0.0.0/0
        public let remoteIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the AWS side of the VPN connection. Default: ::/0
        public let remoteIpv6NetworkCidr: String?
        /// The ID of the Site-to-Site VPN connection.
        public let vpnConnectionId: String

        public init(dryRun: Bool? = nil, localIpv4NetworkCidr: String? = nil, localIpv6NetworkCidr: String? = nil, remoteIpv4NetworkCidr: String? = nil, remoteIpv6NetworkCidr: String? = nil, vpnConnectionId: String) {
            self.dryRun = dryRun
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.vpnConnectionId = vpnConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case localIpv4NetworkCidr = "LocalIpv4NetworkCidr"
            case localIpv6NetworkCidr = "LocalIpv6NetworkCidr"
            case remoteIpv4NetworkCidr = "RemoteIpv4NetworkCidr"
            case remoteIpv6NetworkCidr = "RemoteIpv6NetworkCidr"
            case vpnConnectionId = "VpnConnectionId"
        }
    }

    public struct ModifyVpnConnectionOptionsResult: AWSDecodableShape {
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection
        }
    }

    public struct ModifyVpnConnectionRequest: AWSEncodableShape {
        /// The ID of the customer gateway at your end of the VPN connection.
        public let customerGatewayId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String
        /// The ID of the virtual private gateway at the AWS side of the VPN connection.
        public let vpnGatewayId: String?

        public init(customerGatewayId: String? = nil, dryRun: Bool? = nil, transitGatewayId: String? = nil, vpnConnectionId: String, vpnGatewayId: String? = nil) {
            self.customerGatewayId = customerGatewayId
            self.dryRun = dryRun
            self.transitGatewayId = transitGatewayId
            self.vpnConnectionId = vpnConnectionId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case customerGatewayId = "CustomerGatewayId"
            case dryRun = "DryRun"
            case transitGatewayId = "TransitGatewayId"
            case vpnConnectionId = "VpnConnectionId"
            case vpnGatewayId = "VpnGatewayId"
        }
    }

    public struct ModifyVpnConnectionResult: AWSDecodableShape {
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection
        }
    }

    public struct ModifyVpnTunnelCertificateRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AWS Site-to-Site VPN connection.
        public let vpnConnectionId: String
        /// The external IP address of the VPN tunnel.
        public let vpnTunnelOutsideIpAddress: String

        public init(dryRun: Bool? = nil, vpnConnectionId: String, vpnTunnelOutsideIpAddress: String) {
            self.dryRun = dryRun
            self.vpnConnectionId = vpnConnectionId
            self.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case vpnConnectionId = "VpnConnectionId"
            case vpnTunnelOutsideIpAddress = "VpnTunnelOutsideIpAddress"
        }
    }

    public struct ModifyVpnTunnelCertificateResult: AWSDecodableShape {
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection
        }
    }

    public struct ModifyVpnTunnelOptionsRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The tunnel options to modify.
        public let tunnelOptions: ModifyVpnTunnelOptionsSpecification
        /// The ID of the AWS Site-to-Site VPN connection.
        public let vpnConnectionId: String
        /// The external IP address of the VPN tunnel.
        public let vpnTunnelOutsideIpAddress: String

        public init(dryRun: Bool? = nil, tunnelOptions: ModifyVpnTunnelOptionsSpecification, vpnConnectionId: String, vpnTunnelOutsideIpAddress: String) {
            self.dryRun = dryRun
            self.tunnelOptions = tunnelOptions
            self.vpnConnectionId = vpnConnectionId
            self.vpnTunnelOutsideIpAddress = vpnTunnelOutsideIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case tunnelOptions = "TunnelOptions"
            case vpnConnectionId = "VpnConnectionId"
            case vpnTunnelOutsideIpAddress = "VpnTunnelOutsideIpAddress"
        }
    }

    public struct ModifyVpnTunnelOptionsResult: AWSDecodableShape {
        public let vpnConnection: VpnConnection?

        public init(vpnConnection: VpnConnection? = nil) {
            self.vpnConnection = vpnConnection
        }

        private enum CodingKeys: String, CodingKey {
            case vpnConnection
        }
    }

    public struct ModifyVpnTunnelOptionsSpecification: AWSEncodableShape {
        public struct _IKEVersionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The action to take after DPD timeout occurs. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid Values: clear | none | restart  Default: clear
        public let dPDTimeoutAction: String?
        /// The number of seconds after which a DPD timeout occurs. Constraints: A value between 0 and 30. Default: 30
        public let dPDTimeoutSeconds: Int?
        /// The IKE versions that are permitted for the VPN tunnel. Valid values: ikev1 | ikev2
        @OptionalCustomCoding<ArrayCoder<_IKEVersionsEncoding, IKEVersionsRequestListValue>>
        public var iKEVersions: [IKEVersionsRequestListValue]?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        @OptionalCustomCoding<ArrayCoder<_Phase1DHGroupNumbersEncoding, Phase1DHGroupNumbersRequestListValue>>
        public var phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        @OptionalCustomCoding<ArrayCoder<_Phase1EncryptionAlgorithmsEncoding, Phase1EncryptionAlgorithmsRequestListValue>>
        public var phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        @OptionalCustomCoding<ArrayCoder<_Phase1IntegrityAlgorithmsEncoding, Phase1IntegrityAlgorithmsRequestListValue>>
        public var phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: 28800
        public let phase1LifetimeSeconds: Int?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        @OptionalCustomCoding<ArrayCoder<_Phase2DHGroupNumbersEncoding, Phase2DHGroupNumbersRequestListValue>>
        public var phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        @OptionalCustomCoding<ArrayCoder<_Phase2EncryptionAlgorithmsEncoding, Phase2EncryptionAlgorithmsRequestListValue>>
        public var phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        @OptionalCustomCoding<ArrayCoder<_Phase2IntegrityAlgorithmsEncoding, Phase2IntegrityAlgorithmsRequestListValue>>
        public var phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for Phase1LifetimeSeconds. Default: 3600
        public let phase2LifetimeSeconds: Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
        public let preSharedKey: String?
        /// The percentage of the rekey window (determined by RekeyMarginTimeSeconds) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: 100
        public let rekeyFuzzPercentage: Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for RekeyFuzzPercentage. Constraints: A value between 60 and half of Phase2LifetimeSeconds. Default: 540
        public let rekeyMarginTimeSeconds: Int?
        /// The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: 1024
        public let replayWindowSize: Int?
        /// The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid Values: add | start  Default: add
        public let startupAction: String?
        /// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following CIDR blocks are reserved and cannot be used:    169.254.0.0/30     169.254.1.0/30     169.254.2.0/30     169.254.3.0/30     169.254.4.0/30     169.254.5.0/30     169.254.169.252/30
        public let tunnelInsideCidr: String?
        /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local fd00::/8 range.
        public let tunnelInsideIpv6Cidr: String?

        public init(dPDTimeoutAction: String? = nil, dPDTimeoutSeconds: Int? = nil, iKEVersions: [IKEVersionsRequestListValue]? = nil, phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]? = nil, phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]? = nil, phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]? = nil, phase1LifetimeSeconds: Int? = nil, phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]? = nil, phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]? = nil, phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]? = nil, phase2LifetimeSeconds: Int? = nil, preSharedKey: String? = nil, rekeyFuzzPercentage: Int? = nil, rekeyMarginTimeSeconds: Int? = nil, replayWindowSize: Int? = nil, startupAction: String? = nil, tunnelInsideCidr: String? = nil, tunnelInsideIpv6Cidr: String? = nil) {
            self.dPDTimeoutAction = dPDTimeoutAction
            self.dPDTimeoutSeconds = dPDTimeoutSeconds
            self.iKEVersions = iKEVersions
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case dPDTimeoutAction = "DPDTimeoutAction"
            case dPDTimeoutSeconds = "DPDTimeoutSeconds"
            case iKEVersions = "IKEVersion"
            case phase1DHGroupNumbers = "Phase1DHGroupNumber"
            case phase1EncryptionAlgorithms = "Phase1EncryptionAlgorithm"
            case phase1IntegrityAlgorithms = "Phase1IntegrityAlgorithm"
            case phase1LifetimeSeconds = "Phase1LifetimeSeconds"
            case phase2DHGroupNumbers = "Phase2DHGroupNumber"
            case phase2EncryptionAlgorithms = "Phase2EncryptionAlgorithm"
            case phase2IntegrityAlgorithms = "Phase2IntegrityAlgorithm"
            case phase2LifetimeSeconds = "Phase2LifetimeSeconds"
            case preSharedKey = "PreSharedKey"
            case rekeyFuzzPercentage = "RekeyFuzzPercentage"
            case rekeyMarginTimeSeconds = "RekeyMarginTimeSeconds"
            case replayWindowSize = "ReplayWindowSize"
            case startupAction = "StartupAction"
            case tunnelInsideCidr = "TunnelInsideCidr"
            case tunnelInsideIpv6Cidr = "TunnelInsideIpv6Cidr"
        }
    }

    public struct MonitorInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances.
        @CustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]

        public init(dryRun: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceIds = "InstanceId"
        }
    }

    public struct MonitorInstancesResult: AWSDecodableShape {
        public struct _InstanceMonitoringsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The monitoring information.
        @OptionalCustomCoding<ArrayCoder<_InstanceMonitoringsEncoding, InstanceMonitoring>>
        public var instanceMonitorings: [InstanceMonitoring]?

        public init(instanceMonitorings: [InstanceMonitoring]? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public struct Monitoring: AWSDecodableShape {
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let state: MonitoringState?

        public init(state: MonitoringState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state
        }
    }

    public struct MoveAddressToVpcRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic IP address.
        public let publicIp: String

        public init(dryRun: Bool? = nil, publicIp: String) {
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case publicIp
        }
    }

    public struct MoveAddressToVpcResult: AWSDecodableShape {
        /// The allocation ID for the Elastic IP address.
        public let allocationId: String?
        /// The status of the move of the IP address.
        public let status: Status?

        public init(allocationId: String? = nil, status: Status? = nil) {
            self.allocationId = allocationId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId
            case status
        }
    }

    public struct MovingAddressStatus: AWSDecodableShape {
        /// The status of the Elastic IP address that's being moved to the EC2-VPC platform, or restored to the EC2-Classic platform.
        public let moveStatus: MoveStatus?
        /// The Elastic IP address.
        public let publicIp: String?

        public init(moveStatus: MoveStatus? = nil, publicIp: String? = nil) {
            self.moveStatus = moveStatus
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case moveStatus
            case publicIp
        }
    }

    public struct NatGateway: AWSDecodableShape {
        public struct _NatGatewayAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether the NAT gateway supports public or private connectivity.
        public let connectivityType: ConnectivityType?
        /// The date and time the NAT gateway was created.
        public let createTime: Date?
        /// The date and time the NAT gateway was deleted, if applicable.
        public let deleteTime: Date?
        /// If the NAT gateway could not be created, specifies the error code for the failure. (InsufficientFreeAddressesInSubnet | Gateway.NotAttached | InvalidAllocationID.NotFound | Resource.AlreadyAssociated | InternalError | InvalidSubnetID.NotFound)
        public let failureCode: String?
        /// If the NAT gateway could not be created, specifies the error message for the failure, that corresponds to the error code.   For InsufficientFreeAddressesInSubnet: "Subnet has insufficient free addresses to create this NAT gateway"   For Gateway.NotAttached: "Network vpc-xxxxxxxx has no Internet gateway attached"   For InvalidAllocationID.NotFound: "Elastic IP address eipalloc-xxxxxxxx could not be associated with this NAT gateway"   For Resource.AlreadyAssociated: "Elastic IP address eipalloc-xxxxxxxx is already associated"   For InternalError: "Network interface eni-xxxxxxxx, created and used internally by this NAT gateway is in an invalid state. Please try again."   For InvalidSubnetID.NotFound: "The specified subnet subnet-xxxxxxxx does not exist or could not be found."
        public let failureMessage: String?
        /// Information about the IP addresses and network interface associated with the NAT gateway.
        @OptionalCustomCoding<ArrayCoder<_NatGatewayAddressesEncoding, NatGatewayAddress>>
        public var natGatewayAddresses: [NatGatewayAddress]?
        /// The ID of the NAT gateway.
        public let natGatewayId: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisionedBandwidth: ProvisionedBandwidth?
        /// The state of the NAT gateway.    pending: The NAT gateway is being created and is not ready to process traffic.    failed: The NAT gateway could not be created. Check the failureCode and failureMessage fields for the reason.    available: The NAT gateway is able to process traffic. This status remains until you delete the NAT gateway, and does not indicate the health of the NAT gateway.    deleting: The NAT gateway is in the process of being terminated and may still be processing traffic.    deleted: The NAT gateway has been terminated and is no longer processing traffic.
        public let state: NatGatewayState?
        /// The ID of the subnet in which the NAT gateway is located.
        public let subnetId: String?
        /// The tags for the NAT gateway.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC in which the NAT gateway is located.
        public let vpcId: String?

        public init(connectivityType: ConnectivityType? = nil, createTime: Date? = nil, deleteTime: Date? = nil, failureCode: String? = nil, failureMessage: String? = nil, natGatewayAddresses: [NatGatewayAddress]? = nil, natGatewayId: String? = nil, provisionedBandwidth: ProvisionedBandwidth? = nil, state: NatGatewayState? = nil, subnetId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.connectivityType = connectivityType
            self.createTime = createTime
            self.deleteTime = deleteTime
            self.failureCode = failureCode
            self.failureMessage = failureMessage
            self.natGatewayAddresses = natGatewayAddresses
            self.natGatewayId = natGatewayId
            self.provisionedBandwidth = provisionedBandwidth
            self.state = state
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case connectivityType
            case createTime
            case deleteTime
            case failureCode
            case failureMessage
            case natGatewayAddresses = "natGatewayAddressSet"
            case natGatewayId
            case provisionedBandwidth
            case state
            case subnetId
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct NatGatewayAddress: AWSDecodableShape {
        /// [Public NAT gateway only] The allocation ID of the Elastic IP address that's associated with the NAT gateway.
        public let allocationId: String?
        /// The ID of the network interface associated with the NAT gateway.
        public let networkInterfaceId: String?
        /// The private IP address associated with the NAT gateway.
        public let privateIp: String?
        /// [Public NAT gateway only] The Elastic IP address associated with the NAT gateway.
        public let publicIp: String?

        public init(allocationId: String? = nil, networkInterfaceId: String? = nil, privateIp: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.networkInterfaceId = networkInterfaceId
            self.privateIp = privateIp
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId
            case networkInterfaceId
            case privateIp
            case publicIp
        }
    }

    public struct NetworkAcl: AWSDecodableShape {
        public struct _AssociationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _EntriesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Any associations between the network ACL and one or more subnets
        @OptionalCustomCoding<ArrayCoder<_AssociationsEncoding, NetworkAclAssociation>>
        public var associations: [NetworkAclAssociation]?
        /// One or more entries (rules) in the network ACL.
        @OptionalCustomCoding<ArrayCoder<_EntriesEncoding, NetworkAclEntry>>
        public var entries: [NetworkAclEntry]?
        /// Indicates whether this is the default network ACL for the VPC.
        public let isDefault: Bool?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The ID of the AWS account that owns the network ACL.
        public let ownerId: String?
        /// Any tags assigned to the network ACL.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC for the network ACL.
        public let vpcId: String?

        public init(associations: [NetworkAclAssociation]? = nil, entries: [NetworkAclEntry]? = nil, isDefault: Bool? = nil, networkAclId: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.associations = associations
            self.entries = entries
            self.isDefault = isDefault
            self.networkAclId = networkAclId
            self.ownerId = ownerId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associationSet"
            case entries = "entrySet"
            case isDefault = "default"
            case networkAclId
            case ownerId
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct NetworkAclAssociation: AWSDecodableShape {
        /// The ID of the association between a network ACL and a subnet.
        public let networkAclAssociationId: String?
        /// The ID of the network ACL.
        public let networkAclId: String?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(networkAclAssociationId: String? = nil, networkAclId: String? = nil, subnetId: String? = nil) {
            self.networkAclAssociationId = networkAclAssociationId
            self.networkAclId = networkAclId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case networkAclAssociationId
            case networkAclId
            case subnetId
        }
    }

    public struct NetworkAclEntry: AWSDecodableShape {
        /// The IPv4 network range to allow or deny, in CIDR notation.
        public let cidrBlock: String?
        /// Indicates whether the rule is an egress rule (applied to traffic leaving the subnet).
        public let egress: Bool?
        /// ICMP protocol: The ICMP type and code.
        public let icmpTypeCode: IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation.
        public let ipv6CidrBlock: String?
        /// TCP or UDP protocols: The range of ports the rule applies to.
        public let portRange: PortRange?
        /// The protocol number. A value of "-1" means all protocols.
        public let `protocol`: String?
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction?
        /// The rule number for the entry. ACL entries are processed in ascending order by rule number.
        public let ruleNumber: Int?

        public init(cidrBlock: String? = nil, egress: Bool? = nil, icmpTypeCode: IcmpTypeCode? = nil, ipv6CidrBlock: String? = nil, portRange: PortRange? = nil, protocol: String? = nil, ruleAction: RuleAction? = nil, ruleNumber: Int? = nil) {
            self.cidrBlock = cidrBlock
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock
            case egress
            case icmpTypeCode
            case ipv6CidrBlock
            case portRange
            case `protocol`
            case ruleAction
            case ruleNumber
        }
    }

    public struct NetworkCardInfo: AWSDecodableShape {
        /// The maximum number of network interfaces for the network card.
        public let maximumNetworkInterfaces: Int?
        /// The index of the network card.
        public let networkCardIndex: Int?
        /// The network performance of the network card.
        public let networkPerformance: String?

        public init(maximumNetworkInterfaces: Int? = nil, networkCardIndex: Int? = nil, networkPerformance: String? = nil) {
            self.maximumNetworkInterfaces = maximumNetworkInterfaces
            self.networkCardIndex = networkCardIndex
            self.networkPerformance = networkPerformance
        }

        private enum CodingKeys: String, CodingKey {
            case maximumNetworkInterfaces
            case networkCardIndex
            case networkPerformance
        }
    }

    public struct NetworkInfo: AWSDecodableShape {
        public struct _NetworkCardsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The index of the default network card, starting at 0.
        public let defaultNetworkCardIndex: Int?
        /// Describes the Elastic Fabric Adapters for the instance type.
        public let efaInfo: EfaInfo?
        /// Indicates whether Elastic Fabric Adapter (EFA) is supported.
        public let efaSupported: Bool?
        /// Indicates whether Elastic Network Adapter (ENA) is supported.
        public let enaSupport: EnaSupport?
        /// The maximum number of IPv4 addresses per network interface.
        public let ipv4AddressesPerInterface: Int?
        /// The maximum number of IPv6 addresses per network interface.
        public let ipv6AddressesPerInterface: Int?
        /// Indicates whether IPv6 is supported.
        public let ipv6Supported: Bool?
        /// The maximum number of physical network cards that can be allocated to the instance.
        public let maximumNetworkCards: Int?
        /// The maximum number of network interfaces for the instance type.
        public let maximumNetworkInterfaces: Int?
        /// Describes the network cards for the instance type.
        @OptionalCustomCoding<ArrayCoder<_NetworkCardsEncoding, NetworkCardInfo>>
        public var networkCards: [NetworkCardInfo]?
        /// The network performance.
        public let networkPerformance: String?

        public init(defaultNetworkCardIndex: Int? = nil, efaInfo: EfaInfo? = nil, efaSupported: Bool? = nil, enaSupport: EnaSupport? = nil, ipv4AddressesPerInterface: Int? = nil, ipv6AddressesPerInterface: Int? = nil, ipv6Supported: Bool? = nil, maximumNetworkCards: Int? = nil, maximumNetworkInterfaces: Int? = nil, networkCards: [NetworkCardInfo]? = nil, networkPerformance: String? = nil) {
            self.defaultNetworkCardIndex = defaultNetworkCardIndex
            self.efaInfo = efaInfo
            self.efaSupported = efaSupported
            self.enaSupport = enaSupport
            self.ipv4AddressesPerInterface = ipv4AddressesPerInterface
            self.ipv6AddressesPerInterface = ipv6AddressesPerInterface
            self.ipv6Supported = ipv6Supported
            self.maximumNetworkCards = maximumNetworkCards
            self.maximumNetworkInterfaces = maximumNetworkInterfaces
            self.networkCards = networkCards
            self.networkPerformance = networkPerformance
        }

        private enum CodingKeys: String, CodingKey {
            case defaultNetworkCardIndex
            case efaInfo
            case efaSupported
            case enaSupport
            case ipv4AddressesPerInterface
            case ipv6AddressesPerInterface
            case ipv6Supported
            case maximumNetworkCards
            case maximumNetworkInterfaces
            case networkCards
            case networkPerformance
        }
    }

    public struct NetworkInsightsAnalysis: AWSDecodableShape {
        public struct _AlternatePathHintsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ExplanationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _FilterInArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ForwardPathComponentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ReturnPathComponentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Potential intermediate components.
        @OptionalCustomCoding<ArrayCoder<_AlternatePathHintsEncoding, AlternatePathHint>>
        public var alternatePathHints: [AlternatePathHint]?
        /// The explanations. For more information, see Reachability Analyzer explanation codes.
        @OptionalCustomCoding<ArrayCoder<_ExplanationsEncoding, Explanation>>
        public var explanations: [Explanation]?
        /// The Amazon Resource Names (ARN) of the AWS resources that the path must traverse.
        @OptionalCustomCoding<ArrayCoder<_FilterInArnsEncoding, String>>
        public var filterInArns: [String]?
        /// The components in the path from source to destination.
        @OptionalCustomCoding<ArrayCoder<_ForwardPathComponentsEncoding, PathComponent>>
        public var forwardPathComponents: [PathComponent]?
        /// The Amazon Resource Name (ARN) of the network insights analysis.
        public let networkInsightsAnalysisArn: String?
        /// The ID of the network insights analysis.
        public let networkInsightsAnalysisId: String?
        /// The ID of the path.
        public let networkInsightsPathId: String?
        /// Indicates whether the destination is reachable from the source.
        public let networkPathFound: Bool?
        /// The components in the path from destination to source.
        @OptionalCustomCoding<ArrayCoder<_ReturnPathComponentsEncoding, PathComponent>>
        public var returnPathComponents: [PathComponent]?
        /// The time the analysis started.
        public let startDate: Date?
        /// The status of the network insights analysis.
        public let status: AnalysisStatus?
        /// The status message, if the status is failed.
        public let statusMessage: String?
        /// The tags.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(alternatePathHints: [AlternatePathHint]? = nil, explanations: [Explanation]? = nil, filterInArns: [String]? = nil, forwardPathComponents: [PathComponent]? = nil, networkInsightsAnalysisArn: String? = nil, networkInsightsAnalysisId: String? = nil, networkInsightsPathId: String? = nil, networkPathFound: Bool? = nil, returnPathComponents: [PathComponent]? = nil, startDate: Date? = nil, status: AnalysisStatus? = nil, statusMessage: String? = nil, tags: [Tag]? = nil) {
            self.alternatePathHints = alternatePathHints
            self.explanations = explanations
            self.filterInArns = filterInArns
            self.forwardPathComponents = forwardPathComponents
            self.networkInsightsAnalysisArn = networkInsightsAnalysisArn
            self.networkInsightsAnalysisId = networkInsightsAnalysisId
            self.networkInsightsPathId = networkInsightsPathId
            self.networkPathFound = networkPathFound
            self.returnPathComponents = returnPathComponents
            self.startDate = startDate
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case alternatePathHints = "alternatePathHintSet"
            case explanations = "explanationSet"
            case filterInArns = "filterInArnSet"
            case forwardPathComponents = "forwardPathComponentSet"
            case networkInsightsAnalysisArn
            case networkInsightsAnalysisId
            case networkInsightsPathId
            case networkPathFound
            case returnPathComponents = "returnPathComponentSet"
            case startDate
            case status
            case statusMessage
            case tags = "tagSet"
        }
    }

    public struct NetworkInsightsPath: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time stamp when the path was created.
        public let createdDate: Date?
        /// The AWS resource that is the destination of the path.
        public let destination: String?
        /// The IP address of the AWS resource that is the destination of the path.
        public let destinationIp: String?
        /// The destination port.
        public let destinationPort: Int?
        /// The Amazon Resource Name (ARN) of the path.
        public let networkInsightsPathArn: String?
        /// The ID of the path.
        public let networkInsightsPathId: String?
        /// The protocol.
        public let `protocol`: Protocol?
        /// The AWS resource that is the source of the path.
        public let source: String?
        /// The IP address of the AWS resource that is the source of the path.
        public let sourceIp: String?
        /// The tags associated with the path.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(createdDate: Date? = nil, destination: String? = nil, destinationIp: String? = nil, destinationPort: Int? = nil, networkInsightsPathArn: String? = nil, networkInsightsPathId: String? = nil, protocol: Protocol? = nil, source: String? = nil, sourceIp: String? = nil, tags: [Tag]? = nil) {
            self.createdDate = createdDate
            self.destination = destination
            self.destinationIp = destinationIp
            self.destinationPort = destinationPort
            self.networkInsightsPathArn = networkInsightsPathArn
            self.networkInsightsPathId = networkInsightsPathId
            self.`protocol` = `protocol`
            self.source = source
            self.sourceIp = sourceIp
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate
            case destination
            case destinationIp
            case destinationPort
            case networkInsightsPathArn
            case networkInsightsPathId
            case `protocol`
            case source
            case sourceIp
            case tags = "tagSet"
        }
    }

    public struct NetworkInterface: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?
        /// The network interface attachment.
        public let attachment: NetworkInterfaceAttachment?
        /// The Availability Zone.
        public let availabilityZone: String?
        /// A description.
        public let description: String?
        /// Any security groups for the network interface.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The type of network interface.
        public let interfaceType: NetworkInterfaceType?
        /// The IPv6 addresses associated with the network interface.
        @OptionalCustomCoding<ArrayCoder<_Ipv6AddressesEncoding, NetworkInterfaceIpv6Address>>
        public var ipv6Addresses: [NetworkInterfaceIpv6Address]?
        /// The MAC address.
        public let macAddress: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The account ID of the owner of the network interface.
        public let ownerId: String?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The private IPv4 addresses associated with the network interface.
        @OptionalCustomCoding<ArrayCoder<_PrivateIpAddressesEncoding, NetworkInterfacePrivateIpAddress>>
        public var privateIpAddresses: [NetworkInterfacePrivateIpAddress]?
        /// The alias or account ID of the principal or service that created the network interface.
        public let requesterId: String?
        /// Indicates whether the network interface is being managed by Amazon Web Services.
        public let requesterManaged: Bool?
        /// Indicates whether source/destination checking is enabled.
        public let sourceDestCheck: Bool?
        /// The status of the network interface.
        public let status: NetworkInterfaceStatus?
        /// The ID of the subnet.
        public let subnetId: String?
        /// Any tags assigned to the network interface.
        @OptionalCustomCoding<ArrayCoder<_TagSetEncoding, Tag>>
        public var tagSet: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(association: NetworkInterfaceAssociation? = nil, attachment: NetworkInterfaceAttachment? = nil, availabilityZone: String? = nil, description: String? = nil, groups: [GroupIdentifier]? = nil, interfaceType: NetworkInterfaceType? = nil, ipv6Addresses: [NetworkInterfaceIpv6Address]? = nil, macAddress: String? = nil, networkInterfaceId: String? = nil, outpostArn: String? = nil, ownerId: String? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, privateIpAddresses: [NetworkInterfacePrivateIpAddress]? = nil, requesterId: String? = nil, requesterManaged: Bool? = nil, sourceDestCheck: Bool? = nil, status: NetworkInterfaceStatus? = nil, subnetId: String? = nil, tagSet: [Tag]? = nil, vpcId: String? = nil) {
            self.association = association
            self.attachment = attachment
            self.availabilityZone = availabilityZone
            self.description = description
            self.groups = groups
            self.interfaceType = interfaceType
            self.ipv6Addresses = ipv6Addresses
            self.macAddress = macAddress
            self.networkInterfaceId = networkInterfaceId
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.privateIpAddresses = privateIpAddresses
            self.requesterId = requesterId
            self.requesterManaged = requesterManaged
            self.sourceDestCheck = sourceDestCheck
            self.status = status
            self.subnetId = subnetId
            self.tagSet = tagSet
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case association
            case attachment
            case availabilityZone
            case description
            case groups = "groupSet"
            case interfaceType
            case ipv6Addresses = "ipv6AddressesSet"
            case macAddress
            case networkInterfaceId
            case outpostArn
            case ownerId
            case privateDnsName
            case privateIpAddress
            case privateIpAddresses = "privateIpAddressesSet"
            case requesterId
            case requesterManaged
            case sourceDestCheck
            case status
            case subnetId
            case tagSet
            case vpcId
        }
    }

    public struct NetworkInterfaceAssociation: AWSDecodableShape {
        /// The allocation ID.
        public let allocationId: String?
        /// The association ID.
        public let associationId: String?
        /// The carrier IP address associated with the network interface. This option is only available when the network interface is in a subnet which is associated with a Wavelength Zone.
        public let carrierIp: String?
        /// The customer-owned IP address associated with the network interface.
        public let customerOwnedIp: String?
        /// The ID of the Elastic IP address owner.
        public let ipOwnerId: String?
        /// The public DNS name.
        public let publicDnsName: String?
        /// The address of the Elastic IP address bound to the network interface.
        public let publicIp: String?

        public init(allocationId: String? = nil, associationId: String? = nil, carrierIp: String? = nil, customerOwnedIp: String? = nil, ipOwnerId: String? = nil, publicDnsName: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.associationId = associationId
            self.carrierIp = carrierIp
            self.customerOwnedIp = customerOwnedIp
            self.ipOwnerId = ipOwnerId
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId
            case associationId
            case carrierIp
            case customerOwnedIp
            case ipOwnerId
            case publicDnsName
            case publicIp
        }
    }

    public struct NetworkInterfaceAttachment: AWSDecodableShape {
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// The timestamp indicating when the attachment initiated.
        public let attachTime: Date?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The device index of the network interface attachment on the instance.
        public let deviceIndex: Int?
        /// The ID of the instance.
        public let instanceId: String?
        /// The account ID of the owner of the instance.
        public let instanceOwnerId: String?
        /// The index of the network card.
        public let networkCardIndex: Int?
        /// The attachment state.
        public let status: AttachmentStatus?

        public init(attachmentId: String? = nil, attachTime: Date? = nil, deleteOnTermination: Bool? = nil, deviceIndex: Int? = nil, instanceId: String? = nil, instanceOwnerId: String? = nil, networkCardIndex: Int? = nil, status: AttachmentStatus? = nil) {
            self.attachmentId = attachmentId
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.deviceIndex = deviceIndex
            self.instanceId = instanceId
            self.instanceOwnerId = instanceOwnerId
            self.networkCardIndex = networkCardIndex
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId
            case attachTime
            case deleteOnTermination
            case deviceIndex
            case instanceId
            case instanceOwnerId
            case networkCardIndex
            case status
        }
    }

    public struct NetworkInterfaceAttachmentChanges: AWSEncodableShape {
        /// The ID of the network interface attachment.
        public let attachmentId: String?
        /// Indicates whether the network interface is deleted when the instance is terminated.
        public let deleteOnTermination: Bool?

        public init(attachmentId: String? = nil, deleteOnTermination: Bool? = nil) {
            self.attachmentId = attachmentId
            self.deleteOnTermination = deleteOnTermination
        }

        private enum CodingKeys: String, CodingKey {
            case attachmentId
            case deleteOnTermination
        }
    }

    public struct NetworkInterfaceIpv6Address: AWSDecodableShape {
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address
        }
    }

    public struct NetworkInterfacePermission: AWSDecodableShape {
        /// The account ID.
        public let awsAccountId: String?
        /// The Amazon Web Service.
        public let awsService: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The ID of the network interface permission.
        public let networkInterfacePermissionId: String?
        /// The type of permission.
        public let permission: InterfacePermissionType?
        /// Information about the state of the permission.
        public let permissionState: NetworkInterfacePermissionState?

        public init(awsAccountId: String? = nil, awsService: String? = nil, networkInterfaceId: String? = nil, networkInterfacePermissionId: String? = nil, permission: InterfacePermissionType? = nil, permissionState: NetworkInterfacePermissionState? = nil) {
            self.awsAccountId = awsAccountId
            self.awsService = awsService
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfacePermissionId = networkInterfacePermissionId
            self.permission = permission
            self.permissionState = permissionState
        }

        private enum CodingKeys: String, CodingKey {
            case awsAccountId
            case awsService
            case networkInterfaceId
            case networkInterfacePermissionId
            case permission
            case permissionState
        }
    }

    public struct NetworkInterfacePermissionState: AWSDecodableShape {
        /// The state of the permission.
        public let state: NetworkInterfacePermissionStateCode?
        /// A status message, if applicable.
        public let statusMessage: String?

        public init(state: NetworkInterfacePermissionStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case statusMessage
        }
    }

    public struct NetworkInterfacePrivateIpAddress: AWSDecodableShape {
        /// The association information for an Elastic IP address (IPv4) associated with the network interface.
        public let association: NetworkInterfaceAssociation?
        /// Indicates whether this IPv4 address is the primary private IPv4 address of the network interface.
        public let primary: Bool?
        /// The private DNS name.
        public let privateDnsName: String?
        /// The private IPv4 address.
        public let privateIpAddress: String?

        public init(association: NetworkInterfaceAssociation? = nil, primary: Bool? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil) {
            self.association = association
            self.primary = primary
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case association
            case primary
            case privateDnsName
            case privateIpAddress
        }
    }

    public struct NewDhcpConfiguration: AWSEncodableShape {
        public struct _ValuesEncoding: ArrayCoderProperties { public static let member = "item" }

        public let key: String?
        @OptionalCustomCoding<ArrayCoder<_ValuesEncoding, String>>
        public var values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key
            case values = "Value"
        }
    }

    public struct OnDemandOptions: AWSDecodableShape {
        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowest-price, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to lowest-price.
        public let allocationStrategy: FleetOnDemandAllocationStrategy?
        /// The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type instant.
        public let capacityReservationOptions: CapacityReservationOptions?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay.
        public let maxTotalPrice: String?
        /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: FleetOnDemandAllocationStrategy? = nil, capacityReservationOptions: CapacityReservationOptions? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy
            case capacityReservationOptions
            case maxTotalPrice
            case minTargetCapacity
            case singleAvailabilityZone
            case singleInstanceType
        }
    }

    public struct OnDemandOptionsRequest: AWSEncodableShape {
        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowest-price, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to lowest-price.
        public let allocationStrategy: FleetOnDemandAllocationStrategy?
        /// The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type instant.
        public let capacityReservationOptions: CapacityReservationOptionsRequest?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay.
        public let maxTotalPrice: String?
        /// The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: FleetOnDemandAllocationStrategy? = nil, capacityReservationOptions: CapacityReservationOptionsRequest? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.capacityReservationOptions = capacityReservationOptions
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "AllocationStrategy"
            case capacityReservationOptions = "CapacityReservationOptions"
            case maxTotalPrice = "MaxTotalPrice"
            case minTargetCapacity = "MinTargetCapacity"
            case singleAvailabilityZone = "SingleAvailabilityZone"
            case singleInstanceType = "SingleInstanceType"
        }
    }

    public struct PathComponent: AWSDecodableShape {
        /// The network ACL rule.
        public let aclRule: AnalysisAclRule?
        /// The component.
        public let component: AnalysisComponent?
        /// The destination VPC.
        public let destinationVpc: AnalysisComponent?
        /// The inbound header.
        public let inboundHeader: AnalysisPacketHeader?
        /// The outbound header.
        public let outboundHeader: AnalysisPacketHeader?
        /// The route table route.
        public let routeTableRoute: AnalysisRouteTableRoute?
        /// The security group rule.
        public let securityGroupRule: AnalysisSecurityGroupRule?
        /// The sequence number.
        public let sequenceNumber: Int?
        /// The source VPC.
        public let sourceVpc: AnalysisComponent?
        /// The subnet.
        public let subnet: AnalysisComponent?
        /// The component VPC.
        public let vpc: AnalysisComponent?

        public init(aclRule: AnalysisAclRule? = nil, component: AnalysisComponent? = nil, destinationVpc: AnalysisComponent? = nil, inboundHeader: AnalysisPacketHeader? = nil, outboundHeader: AnalysisPacketHeader? = nil, routeTableRoute: AnalysisRouteTableRoute? = nil, securityGroupRule: AnalysisSecurityGroupRule? = nil, sequenceNumber: Int? = nil, sourceVpc: AnalysisComponent? = nil, subnet: AnalysisComponent? = nil, vpc: AnalysisComponent? = nil) {
            self.aclRule = aclRule
            self.component = component
            self.destinationVpc = destinationVpc
            self.inboundHeader = inboundHeader
            self.outboundHeader = outboundHeader
            self.routeTableRoute = routeTableRoute
            self.securityGroupRule = securityGroupRule
            self.sequenceNumber = sequenceNumber
            self.sourceVpc = sourceVpc
            self.subnet = subnet
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case aclRule
            case component
            case destinationVpc
            case inboundHeader
            case outboundHeader
            case routeTableRoute
            case securityGroupRule
            case sequenceNumber
            case sourceVpc
            case subnet
            case vpc
        }
    }

    public struct PciId: AWSDecodableShape {
        /// The ID of the device.
        public let deviceId: String?
        /// The ID of the subsystem.
        public let subsystemId: String?
        /// The ID of the vendor for the subsystem.
        public let subsystemVendorId: String?
        /// The ID of the vendor.
        public let vendorId: String?

        public init(deviceId: String? = nil, subsystemId: String? = nil, subsystemVendorId: String? = nil, vendorId: String? = nil) {
            self.deviceId = deviceId
            self.subsystemId = subsystemId
            self.subsystemVendorId = subsystemVendorId
            self.vendorId = vendorId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceId = "DeviceId"
            case subsystemId = "SubsystemId"
            case subsystemVendorId = "SubsystemVendorId"
            case vendorId = "VendorId"
        }
    }

    public struct PeeringAttachmentStatus: AWSDecodableShape {
        /// The status code.
        public let code: String?
        /// The status message, if applicable.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct PeeringConnectionOptions: AWSDecodableShape {
        /// If true, the public DNS hostnames of instances in the specified VPC resolve to private IP addresses when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?

        public init(allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil) {
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
        }

        private enum CodingKeys: String, CodingKey {
            case allowDnsResolutionFromRemoteVpc
            case allowEgressFromLocalClassicLinkToRemoteVpc
            case allowEgressFromLocalVpcToRemoteClassicLink
        }
    }

    public struct PeeringConnectionOptionsRequest: AWSEncodableShape {
        /// If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?

        public init(allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil) {
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
        }

        private enum CodingKeys: String, CodingKey {
            case allowDnsResolutionFromRemoteVpc = "AllowDnsResolutionFromRemoteVpc"
            case allowEgressFromLocalClassicLinkToRemoteVpc = "AllowEgressFromLocalClassicLinkToRemoteVpc"
            case allowEgressFromLocalVpcToRemoteClassicLink = "AllowEgressFromLocalVpcToRemoteClassicLink"
        }
    }

    public struct PeeringTgwInfo: AWSDecodableShape {
        /// The AWS account ID of the owner of the transit gateway.
        public let ownerId: String?
        /// The Region of the transit gateway.
        public let region: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(ownerId: String? = nil, region: String? = nil, transitGatewayId: String? = nil) {
            self.ownerId = ownerId
            self.region = region
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case ownerId
            case region
            case transitGatewayId
        }
    }

    public struct Phase1DHGroupNumbersListValue: AWSDecodableShape {
        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct Phase1DHGroupNumbersRequestListValue: AWSEncodableShape {
        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase1EncryptionAlgorithmsListValue: AWSDecodableShape {
        /// The value for the encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct Phase1EncryptionAlgorithmsRequestListValue: AWSEncodableShape {
        /// The value for the encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase1IntegrityAlgorithmsListValue: AWSDecodableShape {
        /// The value for the integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct Phase1IntegrityAlgorithmsRequestListValue: AWSEncodableShape {
        /// The value for the integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase2DHGroupNumbersListValue: AWSDecodableShape {
        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct Phase2DHGroupNumbersRequestListValue: AWSEncodableShape {
        /// The Diffie-Hellmann group number.
        public let value: Int?

        public init(value: Int? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase2EncryptionAlgorithmsListValue: AWSDecodableShape {
        /// The encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct Phase2EncryptionAlgorithmsRequestListValue: AWSEncodableShape {
        /// The encryption algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Phase2IntegrityAlgorithmsListValue: AWSDecodableShape {
        /// The integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value
        }
    }

    public struct Phase2IntegrityAlgorithmsRequestListValue: AWSEncodableShape {
        /// The integrity algorithm.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct Placement: AWSEncodableShape & AWSDecodableShape {
        /// The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the ImportInstance command. This parameter is not supported by CreateFleet.
        public let affinity: String?
        /// The Availability Zone of the instance. If not specified, an Availability Zone will be automatically chosen for you based on the load balancing criteria for the Region. This parameter is not supported by CreateFleet.
        public let availabilityZone: String?
        /// The name of the placement group the instance is in.
        public let groupName: String?
        /// The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the ImportInstance command. This parameter is not supported by CreateFleet.
        public let hostId: String?
        /// The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the Tenancy parameter or set it to host. This parameter is not supported by CreateFleet.
        public let hostResourceGroupArn: String?
        /// The number of the partition the instance is in. Valid only if the placement group strategy is set to partition. This parameter is not supported by CreateFleet.
        public let partitionNumber: Int?
        /// Reserved for future use. This parameter is not supported by CreateFleet.
        public let spreadDomain: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the ImportInstance command. This parameter is not supported by CreateFleet.
        public let tenancy: Tenancy?

        public init(affinity: String? = nil, availabilityZone: String? = nil, groupName: String? = nil, hostId: String? = nil, hostResourceGroupArn: String? = nil, partitionNumber: Int? = nil, spreadDomain: String? = nil, tenancy: Tenancy? = nil) {
            self.affinity = affinity
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.hostId = hostId
            self.hostResourceGroupArn = hostResourceGroupArn
            self.partitionNumber = partitionNumber
            self.spreadDomain = spreadDomain
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case affinity
            case availabilityZone
            case groupName
            case hostId
            case hostResourceGroupArn
            case partitionNumber
            case spreadDomain
            case tenancy
        }
    }

    public struct PlacementGroup: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the placement group.
        public let groupId: String?
        /// The name of the placement group.
        public let groupName: String?
        /// The number of partitions. Valid only if strategy is set to partition.
        public let partitionCount: Int?
        /// The state of the placement group.
        public let state: PlacementGroupState?
        /// The placement strategy.
        public let strategy: PlacementStrategy?
        /// Any tags applied to the placement group.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(groupId: String? = nil, groupName: String? = nil, partitionCount: Int? = nil, state: PlacementGroupState? = nil, strategy: PlacementStrategy? = nil, tags: [Tag]? = nil) {
            self.groupId = groupId
            self.groupName = groupName
            self.partitionCount = partitionCount
            self.state = state
            self.strategy = strategy
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case groupId
            case groupName
            case partitionCount
            case state
            case strategy
            case tags = "tagSet"
        }
    }

    public struct PlacementGroupInfo: AWSDecodableShape {
        public struct _SupportedStrategiesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The supported placement group types.
        @OptionalCustomCoding<ArrayCoder<_SupportedStrategiesEncoding, PlacementGroupStrategy>>
        public var supportedStrategies: [PlacementGroupStrategy]?

        public init(supportedStrategies: [PlacementGroupStrategy]? = nil) {
            self.supportedStrategies = supportedStrategies
        }

        private enum CodingKeys: String, CodingKey {
            case supportedStrategies
        }
    }

    public struct PlacementResponse: AWSDecodableShape {
        /// The name of the placement group that the instance is in.
        public let groupName: String?

        public init(groupName: String? = nil) {
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName
        }
    }

    public struct PoolCidrBlock: AWSDecodableShape {
        /// The CIDR block.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "poolCidrBlock"
        }
    }

    public struct PortRange: AWSEncodableShape & AWSDecodableShape {
        /// The first port in the range.
        public let from: Int?
        /// The last port in the range.
        public let to: Int?

        public init(from: Int? = nil, to: Int? = nil) {
            self.from = from
            self.to = to
        }

        private enum CodingKeys: String, CodingKey {
            case from
            case to
        }
    }

    public struct PrefixList: AWSDecodableShape {
        public struct _CidrsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address range of the Amazon Web Service.
        @OptionalCustomCoding<ArrayCoder<_CidrsEncoding, String>>
        public var cidrs: [String]?
        /// The ID of the prefix.
        public let prefixListId: String?
        /// The name of the prefix.
        public let prefixListName: String?

        public init(cidrs: [String]? = nil, prefixListId: String? = nil, prefixListName: String? = nil) {
            self.cidrs = cidrs
            self.prefixListId = prefixListId
            self.prefixListName = prefixListName
        }

        private enum CodingKeys: String, CodingKey {
            case cidrs = "cidrSet"
            case prefixListId
            case prefixListName
        }
    }

    public struct PrefixListAssociation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The owner of the resource.
        public let resourceOwner: String?

        public init(resourceId: String? = nil, resourceOwner: String? = nil) {
            self.resourceId = resourceId
            self.resourceOwner = resourceOwner
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId
            case resourceOwner
        }
    }

    public struct PrefixListEntry: AWSDecodableShape {
        /// The CIDR block.
        public let cidr: String?
        /// The description.
        public let description: String?

        public init(cidr: String? = nil, description: String? = nil) {
            self.cidr = cidr
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cidr
            case description
        }
    }

    public struct PrefixListId: AWSEncodableShape & AWSDecodableShape {
        /// A description for the security group rule that references this prefix list ID. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?
        /// The ID of the prefix.
        public let prefixListId: String?

        public init(description: String? = nil, prefixListId: String? = nil) {
            self.description = description
            self.prefixListId = prefixListId
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case prefixListId
        }
    }

    public struct PriceSchedule: AWSDecodableShape {
        /// The current price schedule, as determined by the term remaining for the Reserved Instance in the listing. A specific price schedule is always in effect, but only one price schedule can be active at any time. Take, for example, a Reserved Instance listing that has five months remaining in its term. When you specify price schedules for five months and two months, this means that schedule 1, covering the first three months of the remaining term, will be active during months 5, 4, and 3. Then schedule 2, covering the last two months of the term, will be active for months 2 and 1.
        public let active: Bool?
        /// The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The fixed price for the term.
        public let price: Double?
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?

        public init(active: Bool? = nil, currencyCode: CurrencyCodeValues? = nil, price: Double? = nil, term: Int64? = nil) {
            self.active = active
            self.currencyCode = currencyCode
            self.price = price
            self.term = term
        }

        private enum CodingKeys: String, CodingKey {
            case active
            case currencyCode
            case price
            case term
        }
    }

    public struct PriceScheduleSpecification: AWSEncodableShape {
        /// The currency for transacting the Reserved Instance resale. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The fixed price for the term.
        public let price: Double?
        /// The number of months remaining in the reservation. For example, 2 is the second to the last month before the capacity reservation expires.
        public let term: Int64?

        public init(currencyCode: CurrencyCodeValues? = nil, price: Double? = nil, term: Int64? = nil) {
            self.currencyCode = currencyCode
            self.price = price
            self.term = term
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode
            case price
            case term
        }
    }

    public struct PricingDetail: AWSDecodableShape {
        /// The number of reservations available for the price.
        public let count: Int?
        /// The price per instance.
        public let price: Double?

        public init(count: Int? = nil, price: Double? = nil) {
            self.count = count
            self.price = price
        }

        private enum CodingKeys: String, CodingKey {
            case count
            case price
        }
    }

    public struct PrincipalIdFormat: AWSDecodableShape {
        public struct _StatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// PrincipalIdFormatARN description
        public let arn: String?
        /// PrincipalIdFormatStatuses description
        @OptionalCustomCoding<ArrayCoder<_StatusesEncoding, IdFormat>>
        public var statuses: [IdFormat]?

        public init(arn: String? = nil, statuses: [IdFormat]? = nil) {
            self.arn = arn
            self.statuses = statuses
        }

        private enum CodingKeys: String, CodingKey {
            case arn
            case statuses = "statusSet"
        }
    }

    public struct PrivateDnsDetails: AWSDecodableShape {
        /// The private DNS name assigned to the VPC endpoint service.
        public let privateDnsName: String?

        public init(privateDnsName: String? = nil) {
            self.privateDnsName = privateDnsName
        }

        private enum CodingKeys: String, CodingKey {
            case privateDnsName
        }
    }

    public struct PrivateDnsNameConfiguration: AWSDecodableShape {
        /// The name of the record subdomain the service provider needs to create. The service provider adds the value text to the name.
        public let name: String?
        /// The verification state of the VPC endpoint service. &gt;Consumers of the endpoint service can use the private name only when the state is verified.
        public let state: DnsNameState?
        /// The endpoint service verification type, for example TXT.
        public let type: String?
        /// The value the service provider adds to the private DNS name domain record before verification.
        public let value: String?

        public init(name: String? = nil, state: DnsNameState? = nil, type: String? = nil, value: String? = nil) {
            self.name = name
            self.state = state
            self.type = type
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case state
            case type
            case value
        }
    }

    public struct PrivateIpAddressSpecification: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
        public let primary: Bool?
        /// The private IPv4 addresses.
        public let privateIpAddress: String?

        public init(primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary
            case privateIpAddress
        }
    }

    public struct ProcessorInfo: AWSDecodableShape {
        public struct _SupportedArchitecturesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The architectures supported by the instance type.
        @OptionalCustomCoding<ArrayCoder<_SupportedArchitecturesEncoding, ArchitectureType>>
        public var supportedArchitectures: [ArchitectureType]?
        /// The speed of the processor, in GHz.
        public let sustainedClockSpeedInGhz: Double?

        public init(supportedArchitectures: [ArchitectureType]? = nil, sustainedClockSpeedInGhz: Double? = nil) {
            self.supportedArchitectures = supportedArchitectures
            self.sustainedClockSpeedInGhz = sustainedClockSpeedInGhz
        }

        private enum CodingKeys: String, CodingKey {
            case supportedArchitectures
            case sustainedClockSpeedInGhz
        }
    }

    public struct ProductCode: AWSDecodableShape {
        /// The product code.
        public let productCodeId: String?
        /// The type of product code.
        public let productCodeType: ProductCodeValues?

        public init(productCodeId: String? = nil, productCodeType: ProductCodeValues? = nil) {
            self.productCodeId = productCodeId
            self.productCodeType = productCodeType
        }

        private enum CodingKeys: String, CodingKey {
            case productCodeId = "productCode"
            case productCodeType = "type"
        }
    }

    public struct PropagatingVgw: AWSDecodableShape {
        /// The ID of the virtual private gateway.
        public let gatewayId: String?

        public init(gatewayId: String? = nil) {
            self.gatewayId = gatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayId
        }
    }

    public struct ProvisionByoipCidrRequest: AWSEncodableShape {
        public struct _PoolTagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The public IPv4 or IPv6 address range, in CIDR notation. The most specific IPv4 prefix that you can specify is /24. The most specific IPv6 prefix you can specify is /56. The address range cannot overlap with another address range that you've brought to this or another Region.
        public let cidr: String
        /// A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP.
        public let cidrAuthorizationContext: CidrAuthorizationContext?
        /// A description for the address range and the address pool.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Reserved.
        public let multiRegion: Bool?
        /// The tags to apply to the address pool.
        @OptionalCustomCoding<ArrayCoder<_PoolTagSpecificationsEncoding, TagSpecification>>
        public var poolTagSpecifications: [TagSpecification]?
        /// (IPv6 only) Indicate whether the address range will be publicly advertised to the internet. Default: true
        public let publiclyAdvertisable: Bool?

        public init(cidr: String, cidrAuthorizationContext: CidrAuthorizationContext? = nil, description: String? = nil, dryRun: Bool? = nil, multiRegion: Bool? = nil, poolTagSpecifications: [TagSpecification]? = nil, publiclyAdvertisable: Bool? = nil) {
            self.cidr = cidr
            self.cidrAuthorizationContext = cidrAuthorizationContext
            self.description = description
            self.dryRun = dryRun
            self.multiRegion = multiRegion
            self.poolTagSpecifications = poolTagSpecifications
            self.publiclyAdvertisable = publiclyAdvertisable
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case cidrAuthorizationContext = "CidrAuthorizationContext"
            case description = "Description"
            case dryRun = "DryRun"
            case multiRegion = "MultiRegion"
            case poolTagSpecifications = "PoolTagSpecification"
            case publiclyAdvertisable = "PubliclyAdvertisable"
        }
    }

    public struct ProvisionByoipCidrResult: AWSDecodableShape {
        /// Information about the address range.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr
        }
    }

    public struct ProvisionedBandwidth: AWSDecodableShape {
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisioned: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let provisionTime: Date?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requested: String?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let requestTime: Date?
        /// Reserved. If you need to sustain traffic greater than the documented limits, contact us through the Support Center.
        public let status: String?

        public init(provisioned: String? = nil, provisionTime: Date? = nil, requested: String? = nil, requestTime: Date? = nil, status: String? = nil) {
            self.provisioned = provisioned
            self.provisionTime = provisionTime
            self.requested = requested
            self.requestTime = requestTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case provisioned
            case provisionTime
            case requested
            case requestTime
            case status
        }
    }

    public struct PtrUpdateStatus: AWSDecodableShape {
        /// The reason for the PTR record update.
        public let reason: String?
        /// The status of the PTR record update.
        public let status: String?
        /// The value for the PTR record update.
        public let value: String?

        public init(reason: String? = nil, status: String? = nil, value: String? = nil) {
            self.reason = reason
            self.status = status
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case reason
            case status
            case value
        }
    }

    public struct PublicIpv4Pool: AWSDecodableShape {
        public struct _PoolAddressRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the address pool.
        public let description: String?
        /// The name of the location from which the address pool is advertised. A network border group is a unique set of Availability Zones or Local Zones from where Amazon Web Services advertises public IP addresses.
        public let networkBorderGroup: String?
        /// The address ranges.
        @OptionalCustomCoding<ArrayCoder<_PoolAddressRangesEncoding, PublicIpv4PoolRange>>
        public var poolAddressRanges: [PublicIpv4PoolRange]?
        /// The ID of the address pool.
        public let poolId: String?
        /// Any tags for the address pool.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The total number of addresses.
        public let totalAddressCount: Int?
        /// The total number of available addresses.
        public let totalAvailableAddressCount: Int?

        public init(description: String? = nil, networkBorderGroup: String? = nil, poolAddressRanges: [PublicIpv4PoolRange]? = nil, poolId: String? = nil, tags: [Tag]? = nil, totalAddressCount: Int? = nil, totalAvailableAddressCount: Int? = nil) {
            self.description = description
            self.networkBorderGroup = networkBorderGroup
            self.poolAddressRanges = poolAddressRanges
            self.poolId = poolId
            self.tags = tags
            self.totalAddressCount = totalAddressCount
            self.totalAvailableAddressCount = totalAvailableAddressCount
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case networkBorderGroup
            case poolAddressRanges = "poolAddressRangeSet"
            case poolId
            case tags = "tagSet"
            case totalAddressCount
            case totalAvailableAddressCount
        }
    }

    public struct PublicIpv4PoolRange: AWSDecodableShape {
        /// The number of addresses in the range.
        public let addressCount: Int?
        /// The number of available addresses in the range.
        public let availableAddressCount: Int?
        /// The first IP address in the range.
        public let firstAddress: String?
        /// The last IP address in the range.
        public let lastAddress: String?

        public init(addressCount: Int? = nil, availableAddressCount: Int? = nil, firstAddress: String? = nil, lastAddress: String? = nil) {
            self.addressCount = addressCount
            self.availableAddressCount = availableAddressCount
            self.firstAddress = firstAddress
            self.lastAddress = lastAddress
        }

        private enum CodingKeys: String, CodingKey {
            case addressCount
            case availableAddressCount
            case firstAddress
            case lastAddress
        }
    }

    public struct Purchase: AWSDecodableShape {
        public struct _HostIdSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The currency in which the UpfrontPrice and HourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the reservation's term in seconds.
        public let duration: Int?
        /// The IDs of the Dedicated Hosts associated with the reservation.
        @OptionalCustomCoding<ArrayCoder<_HostIdSetEncoding, String>>
        public var hostIdSet: [String]?
        /// The ID of the reservation.
        public let hostReservationId: String?
        /// The hourly price of the reservation per hour.
        public let hourlyPrice: String?
        /// The instance family on the Dedicated Host that the reservation can be associated with.
        public let instanceFamily: String?
        /// The payment option for the reservation.
        public let paymentOption: PaymentOption?
        /// The upfront price of the reservation.
        public let upfrontPrice: String?

        public init(currencyCode: CurrencyCodeValues? = nil, duration: Int? = nil, hostIdSet: [String]? = nil, hostReservationId: String? = nil, hourlyPrice: String? = nil, instanceFamily: String? = nil, paymentOption: PaymentOption? = nil, upfrontPrice: String? = nil) {
            self.currencyCode = currencyCode
            self.duration = duration
            self.hostIdSet = hostIdSet
            self.hostReservationId = hostReservationId
            self.hourlyPrice = hourlyPrice
            self.instanceFamily = instanceFamily
            self.paymentOption = paymentOption
            self.upfrontPrice = upfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode
            case duration
            case hostIdSet
            case hostReservationId
            case hourlyPrice
            case instanceFamily
            case paymentOption
            case upfrontPrice
        }
    }

    public struct PurchaseHostReservationRequest: AWSEncodableShape {
        public struct _HostIdSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The currency in which the totalUpfrontPrice, LimitPrice, and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The IDs of the Dedicated Hosts with which the reservation will be associated.
        @CustomCoding<ArrayCoder<_HostIdSetEncoding, String>>
        public var hostIdSet: [String]
        /// The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is USD. For example, to indicate a limit price of USD 100, specify 100.00.
        public let limitPrice: String?
        /// The ID of the offering.
        public let offeringId: String
        /// The tags to apply to the Dedicated Host Reservation during purchase.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String? = nil, currencyCode: CurrencyCodeValues? = nil, hostIdSet: [String], limitPrice: String? = nil, offeringId: String, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.currencyCode = currencyCode
            self.hostIdSet = hostIdSet
            self.limitPrice = limitPrice
            self.offeringId = offeringId
            self.tagSpecifications = tagSpecifications
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case currencyCode = "CurrencyCode"
            case hostIdSet = "HostIdSet"
            case limitPrice = "LimitPrice"
            case offeringId = "OfferingId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct PurchaseHostReservationResult: AWSDecodableShape {
        public struct _PurchaseEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The currency in which the totalUpfrontPrice and totalHourlyPrice amounts are specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// Describes the details of the purchase.
        @OptionalCustomCoding<ArrayCoder<_PurchaseEncoding, Purchase>>
        public var purchase: [Purchase]?
        /// The total hourly price of the reservation calculated per hour.
        public let totalHourlyPrice: String?
        /// The total amount charged to your account when you purchase the reservation.
        public let totalUpfrontPrice: String?

        public init(clientToken: String? = nil, currencyCode: CurrencyCodeValues? = nil, purchase: [Purchase]? = nil, totalHourlyPrice: String? = nil, totalUpfrontPrice: String? = nil) {
            self.clientToken = clientToken
            self.currencyCode = currencyCode
            self.purchase = purchase
            self.totalHourlyPrice = totalHourlyPrice
            self.totalUpfrontPrice = totalUpfrontPrice
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case currencyCode
            case purchase
            case totalHourlyPrice
            case totalUpfrontPrice
        }
    }

    public struct PurchaseRequest: AWSEncodableShape {
        /// The number of instances.
        public let instanceCount: Int
        /// The purchase token.
        public let purchaseToken: String

        public init(instanceCount: Int, purchaseToken: String) {
            self.instanceCount = instanceCount
            self.purchaseToken = purchaseToken
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case purchaseToken = "PurchaseToken"
        }
    }

    public struct PurchaseReservedInstancesOfferingRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of Reserved Instances to purchase.
        public let instanceCount: Int
        /// Specified for Reserved Instance Marketplace offerings to limit the total order and ensure that the Reserved Instances are not purchased at unexpected prices.
        public let limitPrice: ReservedInstanceLimitPrice?
        /// The time at which to purchase the Reserved Instance, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let purchaseTime: Date?
        /// The ID of the Reserved Instance offering to purchase.
        public let reservedInstancesOfferingId: String

        public init(dryRun: Bool? = nil, instanceCount: Int, limitPrice: ReservedInstanceLimitPrice? = nil, purchaseTime: Date? = nil, reservedInstancesOfferingId: String) {
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.limitPrice = limitPrice
            self.purchaseTime = purchaseTime
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceCount = "InstanceCount"
            case limitPrice
            case purchaseTime = "PurchaseTime"
            case reservedInstancesOfferingId = "ReservedInstancesOfferingId"
        }
    }

    public struct PurchaseReservedInstancesOfferingResult: AWSDecodableShape {
        /// The IDs of the purchased Reserved Instances. If your purchase crosses into a discounted pricing tier, the final Reserved Instances IDs might change. For more information, see Crossing pricing tiers in the Amazon Elastic Compute Cloud User Guide.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId
        }
    }

    public struct PurchaseScheduledInstancesRequest: AWSEncodableShape {
        public struct _PurchaseRequestsEncoding: ArrayCoderProperties { public static let member = "PurchaseRequest" }

        /// Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The purchase requests.
        @CustomCoding<ArrayCoder<_PurchaseRequestsEncoding, PurchaseRequest>>
        public var purchaseRequests: [PurchaseRequest]

        public init(clientToken: String? = PurchaseScheduledInstancesRequest.idempotencyToken(), dryRun: Bool? = nil, purchaseRequests: [PurchaseRequest]) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.purchaseRequests = purchaseRequests
        }

        public func validate(name: String) throws {
            try self.validate(self.purchaseRequests, name: "purchaseRequests", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case purchaseRequests = "PurchaseRequest"
        }
    }

    public struct PurchaseScheduledInstancesResult: AWSDecodableShape {
        public struct _ScheduledInstanceSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Scheduled Instances.
        @OptionalCustomCoding<ArrayCoder<_ScheduledInstanceSetEncoding, ScheduledInstance>>
        public var scheduledInstanceSet: [ScheduledInstance]?

        public init(scheduledInstanceSet: [ScheduledInstance]? = nil) {
            self.scheduledInstanceSet = scheduledInstanceSet
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledInstanceSet
        }
    }

    public struct RebootInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The instance IDs.
        @CustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]

        public init(dryRun: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceIds = "InstanceId"
        }
    }

    public struct RecurringCharge: AWSDecodableShape {
        /// The amount of the recurring charge.
        public let amount: Double?
        /// The frequency of the recurring charge.
        public let frequency: RecurringChargeFrequency?

        public init(amount: Double? = nil, frequency: RecurringChargeFrequency? = nil) {
            self.amount = amount
            self.frequency = frequency
        }

        private enum CodingKeys: String, CodingKey {
            case amount
            case frequency
        }
    }

    public struct ReferencedSecurityGroup: AWSDecodableShape {
        /// The ID of the security group.
        public let groupId: String?
        /// The status of a VPC peering connection, if applicable.
        public let peeringStatus: String?
        /// The account ID.
        public let userId: String?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(groupId: String? = nil, peeringStatus: String? = nil, userId: String? = nil, vpcId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.groupId = groupId
            self.peeringStatus = peeringStatus
            self.userId = userId
            self.vpcId = vpcId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId
            case peeringStatus
            case userId
            case vpcId
            case vpcPeeringConnectionId
        }
    }

    public struct Region: AWSDecodableShape {
        /// The Region service endpoint.
        public let endpoint: String?
        /// The Region opt-in status. The possible values are opt-in-not-required, opted-in, and not-opted-in.
        public let optInStatus: String?
        /// The name of the Region.
        public let regionName: String?

        public init(endpoint: String? = nil, optInStatus: String? = nil, regionName: String? = nil) {
            self.endpoint = endpoint
            self.optInStatus = optInStatus
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "regionEndpoint"
            case optInStatus
            case regionName
        }
    }

    public struct RegisterImageRequest: AWSEncodableShape {
        public struct _BillingProductsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }

        /// The architecture of the AMI. Default: For Amazon EBS-backed AMIs, i386. For instance store-backed AMIs, the architecture specified in the manifest file.
        public let architecture: ArchitectureValues?
        /// The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI.
        @OptionalCustomCoding<ArrayCoder<_BillingProductsEncoding, String>>
        public var billingProducts: [String]?
        /// The block device mapping entries. If you specify an EBS volume using the ID of an EBS snapshot, you can't specify the encryption state of the volume. If you create an AMI on an Outpost, then all backing snapshots must be on the same Outpost or in the Region of that Outpost. AMIs on an Outpost that include local snapshots can be used to launch instances on the same Outpost only. For more information,  Amazon EBS local snapshots on Outposts in the Amazon Elastic Compute Cloud User Guide.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// The boot mode of the AMI. For more information, see Boot modes in the Amazon Elastic Compute Cloud User Guide.
        public let bootMode: BootModeValues?
        /// A description for your AMI.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Set to true to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let enaSupport: Bool?
        /// The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the aws-exec-read canned access control list (ACL) to ensure that it can be accessed by Amazon EC2. For more information, see Canned ACLs in the Amazon S3 Service Developer Guide.
        public let imageLocation: String?
        /// The ID of the kernel.
        public let kernelId: String?
        /// A name for your AMI. Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)
        public let name: String
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The device name of the root device volume (for example, /dev/sda1).
        public let rootDeviceName: String?
        /// Set to simple to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI. There is no way to disable sriovNetSupport at this time. This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.
        public let sriovNetSupport: String?
        /// The type of virtualization (hvm | paravirtual). Default: paravirtual
        public let virtualizationType: String?

        public init(architecture: ArchitectureValues? = nil, billingProducts: [String]? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, bootMode: BootModeValues? = nil, description: String? = nil, dryRun: Bool? = nil, enaSupport: Bool? = nil, imageLocation: String? = nil, kernelId: String? = nil, name: String, ramdiskId: String? = nil, rootDeviceName: String? = nil, sriovNetSupport: String? = nil, virtualizationType: String? = nil) {
            self.architecture = architecture
            self.billingProducts = billingProducts
            self.blockDeviceMappings = blockDeviceMappings
            self.bootMode = bootMode
            self.description = description
            self.dryRun = dryRun
            self.enaSupport = enaSupport
            self.imageLocation = imageLocation
            self.kernelId = kernelId
            self.name = name
            self.ramdiskId = ramdiskId
            self.rootDeviceName = rootDeviceName
            self.sriovNetSupport = sriovNetSupport
            self.virtualizationType = virtualizationType
        }

        private enum CodingKeys: String, CodingKey {
            case architecture
            case billingProducts = "BillingProduct"
            case blockDeviceMappings = "BlockDeviceMapping"
            case bootMode = "BootMode"
            case description
            case dryRun
            case enaSupport
            case imageLocation = "ImageLocation"
            case kernelId
            case name
            case ramdiskId
            case rootDeviceName
            case sriovNetSupport
            case virtualizationType
        }
    }

    public struct RegisterImageResult: AWSDecodableShape {
        /// The ID of the newly registered AMI.
        public let imageId: String?

        public init(imageId: String? = nil) {
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId
        }
    }

    public struct RegisterInstanceEventNotificationAttributesRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Information about the tag keys to register.
        public let instanceTagAttribute: RegisterInstanceTagAttributeRequest?

        public init(dryRun: Bool? = nil, instanceTagAttribute: RegisterInstanceTagAttributeRequest? = nil) {
            self.dryRun = dryRun
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceTagAttribute = "InstanceTagAttribute"
        }
    }

    public struct RegisterInstanceEventNotificationAttributesResult: AWSDecodableShape {
        /// The resulting set of tag keys.
        public let instanceTagAttribute: InstanceTagNotificationAttribute?

        public init(instanceTagAttribute: InstanceTagNotificationAttribute? = nil) {
            self.instanceTagAttribute = instanceTagAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case instanceTagAttribute
        }
    }

    public struct RegisterInstanceTagAttributeRequest: AWSEncodableShape {
        public struct _InstanceTagKeysEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether to register all tag keys in the current Region. Specify true to register all tag keys.
        public let includeAllTagsOfInstance: Bool?
        /// The tag keys to register.
        @OptionalCustomCoding<ArrayCoder<_InstanceTagKeysEncoding, String>>
        public var instanceTagKeys: [String]?

        public init(includeAllTagsOfInstance: Bool? = nil, instanceTagKeys: [String]? = nil) {
            self.includeAllTagsOfInstance = includeAllTagsOfInstance
            self.instanceTagKeys = instanceTagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case includeAllTagsOfInstance = "IncludeAllTagsOfInstance"
            case instanceTagKeys = "InstanceTagKey"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupMembersRequest: AWSEncodableShape {
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The group members' network interface IDs to register with the transit gateway multicast group.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupMembersResult: AWSDecodableShape {
        /// Information about the registered transit gateway multicast group members.
        public let registeredMulticastGroupMembers: TransitGatewayMulticastRegisteredGroupMembers?

        public init(registeredMulticastGroupMembers: TransitGatewayMulticastRegisteredGroupMembers? = nil) {
            self.registeredMulticastGroupMembers = registeredMulticastGroupMembers
        }

        private enum CodingKeys: String, CodingKey {
            case registeredMulticastGroupMembers
        }
    }

    public struct RegisterTransitGatewayMulticastGroupSourcesRequest: AWSEncodableShape {
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The group sources' network interface IDs to register with the transit gateway multicast group.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, groupIpAddress: String? = nil, networkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.groupIpAddress = groupIpAddress
            self.networkInterfaceIds = networkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupIpAddress = "GroupIpAddress"
            case networkInterfaceIds = "NetworkInterfaceIds"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct RegisterTransitGatewayMulticastGroupSourcesResult: AWSDecodableShape {
        /// Information about the transit gateway multicast group sources.
        public let registeredMulticastGroupSources: TransitGatewayMulticastRegisteredGroupSources?

        public init(registeredMulticastGroupSources: TransitGatewayMulticastRegisteredGroupSources? = nil) {
            self.registeredMulticastGroupSources = registeredMulticastGroupSources
        }

        private enum CodingKeys: String, CodingKey {
            case registeredMulticastGroupSources
        }
    }

    public struct RejectTransitGatewayMulticastDomainAssociationsRequest: AWSEncodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the subnets to associate with the transit gateway multicast domain.
        @OptionalCustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, subnetIds: [String]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.subnetIds = subnetIds
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case subnetIds = "SubnetIds"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct RejectTransitGatewayMulticastDomainAssociationsResult: AWSDecodableShape {
        public let associations: TransitGatewayMulticastDomainAssociations?

        public init(associations: TransitGatewayMulticastDomainAssociations? = nil) {
            self.associations = associations
        }

        private enum CodingKeys: String, CodingKey {
            case associations
        }
    }

    public struct RejectTransitGatewayPeeringAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the transit gateway peering attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct RejectTransitGatewayPeeringAttachmentResult: AWSDecodableShape {
        /// The transit gateway peering attachment.
        public let transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment?

        public init(transitGatewayPeeringAttachment: TransitGatewayPeeringAttachment? = nil) {
            self.transitGatewayPeeringAttachment = transitGatewayPeeringAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayPeeringAttachment
        }
    }

    public struct RejectTransitGatewayVpcAttachmentRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String

        public init(dryRun: Bool? = nil, transitGatewayAttachmentId: String) {
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
        }
    }

    public struct RejectTransitGatewayVpcAttachmentResult: AWSDecodableShape {
        /// Information about the attachment.
        public let transitGatewayVpcAttachment: TransitGatewayVpcAttachment?

        public init(transitGatewayVpcAttachment: TransitGatewayVpcAttachment? = nil) {
            self.transitGatewayVpcAttachment = transitGatewayVpcAttachment
        }

        private enum CodingKeys: String, CodingKey {
            case transitGatewayVpcAttachment
        }
    }

    public struct RejectVpcEndpointConnectionsRequest: AWSEncodableShape {
        public struct _VpcEndpointIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the service.
        public let serviceId: String
        /// The IDs of one or more VPC endpoints.
        @CustomCoding<ArrayCoder<_VpcEndpointIdsEncoding, String>>
        public var vpcEndpointIds: [String]

        public init(dryRun: Bool? = nil, serviceId: String, vpcEndpointIds: [String]) {
            self.dryRun = dryRun
            self.serviceId = serviceId
            self.vpcEndpointIds = vpcEndpointIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
            case vpcEndpointIds = "VpcEndpointId"
        }
    }

    public struct RejectVpcEndpointConnectionsResult: AWSDecodableShape {
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the endpoints that were not rejected, if applicable.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(unsuccessful: [UnsuccessfulItem]? = nil) {
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case unsuccessful
        }
    }

    public struct RejectVpcPeeringConnectionRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String

        public init(dryRun: Bool? = nil, vpcPeeringConnectionId: String) {
            self.dryRun = dryRun
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case vpcPeeringConnectionId
        }
    }

    public struct RejectVpcPeeringConnectionResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ReleaseAddressRequest: AWSEncodableShape {
        /// [EC2-VPC] The allocation ID. Required for EC2-VPC.
        public let allocationId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. If you provide an incorrect network border group, you will receive an InvalidAddress.NotFound error. For more information, see Error Codes.  You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an InvalidParameterCombination error. For more information, see Error Codes.
        public let networkBorderGroup: String?
        /// [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
        public let publicIp: String?

        public init(allocationId: String? = nil, dryRun: Bool? = nil, networkBorderGroup: String? = nil, publicIp: String? = nil) {
            self.allocationId = allocationId
            self.dryRun = dryRun
            self.networkBorderGroup = networkBorderGroup
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case dryRun
            case networkBorderGroup = "NetworkBorderGroup"
            case publicIp = "PublicIp"
        }
    }

    public struct ReleaseHostsRequest: AWSEncodableShape {
        public struct _HostIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts to release.
        @CustomCoding<ArrayCoder<_HostIdsEncoding, String>>
        public var hostIds: [String]

        public init(hostIds: [String]) {
            self.hostIds = hostIds
        }

        private enum CodingKeys: String, CodingKey {
            case hostIds = "hostId"
        }
    }

    public struct ReleaseHostsResult: AWSDecodableShape {
        public struct _SuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UnsuccessfulEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the Dedicated Hosts that were successfully released.
        @OptionalCustomCoding<ArrayCoder<_SuccessfulEncoding, String>>
        public var successful: [String]?
        /// The IDs of the Dedicated Hosts that could not be released, including an error message.
        @OptionalCustomCoding<ArrayCoder<_UnsuccessfulEncoding, UnsuccessfulItem>>
        public var unsuccessful: [UnsuccessfulItem]?

        public init(successful: [String]? = nil, unsuccessful: [UnsuccessfulItem]? = nil) {
            self.successful = successful
            self.unsuccessful = unsuccessful
        }

        private enum CodingKeys: String, CodingKey {
            case successful
            case unsuccessful
        }
    }

    public struct RemovePrefixListEntry: AWSEncodableShape {
        /// The CIDR block.
        public let cidr: String

        public init(cidr: String) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
        }
    }

    public struct ReplaceIamInstanceProfileAssociationRequest: AWSEncodableShape {
        /// The ID of the existing IAM instance profile association.
        public let associationId: String
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification

        public init(associationId: String, iamInstanceProfile: IamInstanceProfileSpecification) {
            self.associationId = associationId
            self.iamInstanceProfile = iamInstanceProfile
        }

        private enum CodingKeys: String, CodingKey {
            case associationId = "AssociationId"
            case iamInstanceProfile = "IamInstanceProfile"
        }
    }

    public struct ReplaceIamInstanceProfileAssociationResult: AWSDecodableShape {
        /// Information about the IAM instance profile association.
        public let iamInstanceProfileAssociation: IamInstanceProfileAssociation?

        public init(iamInstanceProfileAssociation: IamInstanceProfileAssociation? = nil) {
            self.iamInstanceProfileAssociation = iamInstanceProfileAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case iamInstanceProfileAssociation
        }
    }

    public struct ReplaceNetworkAclAssociationRequest: AWSEncodableShape {
        /// The ID of the current association between the original network ACL and the subnet.
        public let associationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new network ACL to associate with the subnet.
        public let networkAclId: String

        public init(associationId: String, dryRun: Bool? = nil, networkAclId: String) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.networkAclId = networkAclId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case dryRun
            case networkAclId
        }
    }

    public struct ReplaceNetworkAclAssociationResult: AWSDecodableShape {
        /// The ID of the new association.
        public let newAssociationId: String?

        public init(newAssociationId: String? = nil) {
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case newAssociationId
        }
    }

    public struct ReplaceNetworkAclEntryRequest: AWSEncodableShape {
        /// The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24).
        public let cidrBlock: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether to replace the egress rule. Default: If no value is specified, we replace the ingress rule.
        public let egress: Bool
        /// ICMP protocol: The ICMP or ICMPv6 type and code. Required if specifying protocol 1 (ICMP) or protocol 58 (ICMPv6) with an IPv6 CIDR block.
        public let icmpTypeCode: IcmpTypeCode?
        /// The IPv6 network range to allow or deny, in CIDR notation (for example 2001:bd8:1234:1a00::/64).
        public let ipv6CidrBlock: String?
        /// The ID of the ACL.
        public let networkAclId: String
        /// TCP or UDP protocols: The range of ports the rule applies to. Required if specifying protocol 6 (TCP) or 17 (UDP).
        public let portRange: PortRange?
        /// The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code.
        public let `protocol`: String
        /// Indicates whether to allow or deny the traffic that matches the rule.
        public let ruleAction: RuleAction
        /// The rule number of the entry to replace.
        public let ruleNumber: Int

        public init(cidrBlock: String? = nil, dryRun: Bool? = nil, egress: Bool, icmpTypeCode: IcmpTypeCode? = nil, ipv6CidrBlock: String? = nil, networkAclId: String, portRange: PortRange? = nil, protocol: String, ruleAction: RuleAction, ruleNumber: Int) {
            self.cidrBlock = cidrBlock
            self.dryRun = dryRun
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.networkAclId = networkAclId
            self.portRange = portRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock
            case dryRun
            case egress
            case icmpTypeCode = "Icmp"
            case ipv6CidrBlock
            case networkAclId
            case portRange
            case `protocol`
            case ruleAction
            case ruleNumber
        }
    }

    public struct ReplaceRootVolumeTask: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time the task completed.
        public let completeTime: String?
        /// The ID of the instance for which the root volume replacement task was created.
        public let instanceId: String?
        /// The ID of the root volume replacement task.
        public let replaceRootVolumeTaskId: String?
        /// The time the task was started.
        public let startTime: String?
        /// The tags assigned to the task.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The state of the task. The task can be in one of the following states:    pending - the replacement volume is being created.    in-progress - the original volume is being detached and the replacement volume is being attached.    succeeded - the replacement volume has been successfully attached to the instance and the instance is available.    failing - the replacement task is in the process of failing.    failed - the replacement task has failed but the original root volume is still attached.    failing-detached - the replacement task is in the process of failing. The instance might have no root volume attached.    failed-detached - the replacement task has failed and the instance has no root volume attached.
        public let taskState: ReplaceRootVolumeTaskState?

        public init(completeTime: String? = nil, instanceId: String? = nil, replaceRootVolumeTaskId: String? = nil, startTime: String? = nil, tags: [Tag]? = nil, taskState: ReplaceRootVolumeTaskState? = nil) {
            self.completeTime = completeTime
            self.instanceId = instanceId
            self.replaceRootVolumeTaskId = replaceRootVolumeTaskId
            self.startTime = startTime
            self.tags = tags
            self.taskState = taskState
        }

        private enum CodingKeys: String, CodingKey {
            case completeTime
            case instanceId
            case replaceRootVolumeTaskId
            case startTime
            case tags = "tagSet"
            case taskState
        }
    }

    public struct ReplaceRouteRequest: AWSEncodableShape {
        /// [IPv4 traffic only] The ID of a carrier gateway.
        public let carrierGatewayId: String?
        /// The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
        public let destinationIpv6CidrBlock: String?
        /// The ID of the prefix list for the route.
        public let destinationPrefixListId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// [IPv6 traffic only] The ID of an egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of an internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// Specifies whether to reset the local route to its default target (local).
        public let localTarget: Bool?
        /// [IPv4 traffic only] The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of a network interface.
        public let networkInterfaceId: String?
        /// The ID of the route table.
        public let routeTableId: String
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
        public let vpcEndpointId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, dryRun: Bool? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, localGatewayId: String? = nil, localTarget: Bool? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, routeTableId: String, transitGatewayId: String? = nil, vpcEndpointId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.dryRun = dryRun
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.localGatewayId = localGatewayId
            self.localTarget = localTarget
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.routeTableId = routeTableId
            self.transitGatewayId = transitGatewayId
            self.vpcEndpointId = vpcEndpointId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId = "CarrierGatewayId"
            case destinationCidrBlock
            case destinationIpv6CidrBlock
            case destinationPrefixListId = "DestinationPrefixListId"
            case dryRun
            case egressOnlyInternetGatewayId
            case gatewayId
            case instanceId
            case localGatewayId = "LocalGatewayId"
            case localTarget = "LocalTarget"
            case natGatewayId
            case networkInterfaceId
            case routeTableId
            case transitGatewayId = "TransitGatewayId"
            case vpcEndpointId = "VpcEndpointId"
            case vpcPeeringConnectionId
        }
    }

    public struct ReplaceRouteTableAssociationRequest: AWSEncodableShape {
        /// The association ID.
        public let associationId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the new route table to associate with the subnet.
        public let routeTableId: String

        public init(associationId: String, dryRun: Bool? = nil, routeTableId: String) {
            self.associationId = associationId
            self.dryRun = dryRun
            self.routeTableId = routeTableId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case dryRun
            case routeTableId
        }
    }

    public struct ReplaceRouteTableAssociationResult: AWSDecodableShape {
        /// The state of the association.
        public let associationState: RouteTableAssociationState?
        /// The ID of the new association.
        public let newAssociationId: String?

        public init(associationState: RouteTableAssociationState? = nil, newAssociationId: String? = nil) {
            self.associationState = associationState
            self.newAssociationId = newAssociationId
        }

        private enum CodingKeys: String, CodingKey {
            case associationState
            case newAssociationId
        }
    }

    public struct ReplaceTransitGatewayRouteRequest: AWSEncodableShape {
        /// Indicates whether traffic matching this route is to be dropped.
        public let blackhole: Bool?
        /// The CIDR range used for the destination match. Routing decisions are based on the most specific match.
        public let destinationCidrBlock: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the route table.
        public let transitGatewayRouteTableId: String

        public init(blackhole: Bool? = nil, destinationCidrBlock: String, dryRun: Bool? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String) {
            self.blackhole = blackhole
            self.destinationCidrBlock = destinationCidrBlock
            self.dryRun = dryRun
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole = "Blackhole"
            case destinationCidrBlock = "DestinationCidrBlock"
            case dryRun = "DryRun"
            case transitGatewayAttachmentId = "TransitGatewayAttachmentId"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct ReplaceTransitGatewayRouteResult: AWSDecodableShape {
        /// Information about the modified route.
        public let route: TransitGatewayRoute?

        public init(route: TransitGatewayRoute? = nil) {
            self.route = route
        }

        private enum CodingKeys: String, CodingKey {
            case route
        }
    }

    public struct ReportInstanceStatusRequest: AWSEncodableShape {
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "InstanceId" }
        public struct _ReasonCodesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Descriptive text about the health state of your instance.
        public let description: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The time at which the reported instance health state ended.
        public let endTime: Date?
        /// The instances.
        @CustomCoding<ArrayCoder<_InstancesEncoding, String>>
        public var instances: [String]
        /// The reason codes that describe the health state of your instance.    instance-stuck-in-state: My instance is stuck in a state.    unresponsive: My instance is unresponsive.    not-accepting-credentials: My instance is not accepting my credentials.    password-not-available: A password is not available for my instance.    performance-network: My instance is experiencing performance problems that I believe are network related.    performance-instance-store: My instance is experiencing performance problems that I believe are related to the instance stores.    performance-ebs-volume: My instance is experiencing performance problems that I believe are related to an EBS volume.    performance-other: My instance is experiencing performance problems.    other: [explain using the description parameter]
        @CustomCoding<ArrayCoder<_ReasonCodesEncoding, ReportInstanceReasonCodes>>
        public var reasonCodes: [ReportInstanceReasonCodes]
        /// The time at which the reported instance health state began.
        public let startTime: Date?
        /// The status of all instances listed.
        public let status: ReportStatusType

        public init(description: String? = nil, dryRun: Bool? = nil, endTime: Date? = nil, instances: [String], reasonCodes: [ReportInstanceReasonCodes], startTime: Date? = nil, status: ReportStatusType) {
            self.description = description
            self.dryRun = dryRun
            self.endTime = endTime
            self.instances = instances
            self.reasonCodes = reasonCodes
            self.startTime = startTime
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case dryRun
            case endTime
            case instances = "instanceId"
            case reasonCodes = "reasonCode"
            case startTime
            case status
        }
    }

    public struct RequestLaunchTemplateData: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }
        public struct _ElasticGpuSpecificationsEncoding: ArrayCoderProperties { public static let member = "ElasticGpuSpecification" }
        public struct _ElasticInferenceAcceleratorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "InstanceNetworkInterfaceSpecification" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroup" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "LaunchTemplateTagSpecificationRequest" }

        /// The block device mapping.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, LaunchTemplateBlockDeviceMappingRequest>>
        public var blockDeviceMappings: [LaunchTemplateBlockDeviceMappingRequest]?
        /// The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
        public let capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationRequest?
        /// The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: LaunchTemplateCpuOptionsRequest?
        /// The credit option for CPU usage of the instance. Valid for T2, T3, or T3a instances only.
        public let creditSpecification: CreditSpecificationRequest?
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance.
        public let disableApiTermination: Bool?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
        public let ebsOptimized: Bool?
        /// An elastic GPU to associate with the instance.
        @OptionalCustomCoding<ArrayCoder<_ElasticGpuSpecificationsEncoding, ElasticGpuSpecification>>
        public var elasticGpuSpecifications: [ElasticGpuSpecification]?
        ///  The elastic inference accelerator for the instance.
        @OptionalCustomCoding<ArrayCoder<_ElasticInferenceAcceleratorsEncoding, LaunchTemplateElasticInferenceAccelerator>>
        public var elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAccelerator]?
        /// Indicates whether the instance is enabled for AWS Nitro Enclaves. For more information, see  What is AWS Nitro Enclaves? in the AWS Nitro Enclaves User Guide. You can't enable AWS Nitro Enclaves and hibernation on the same instance.
        public let enclaveOptions: LaunchTemplateEnclaveOptionsRequest?
        /// Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the hibernation prerequisites. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: LaunchTemplateHibernationOptionsRequest?
        /// The name or Amazon Resource Name (ARN) of an IAM instance profile.
        public let iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecificationRequest?
        /// The ID of the AMI.
        public let imageId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The market (purchasing) option for the instances.
        public let instanceMarketOptions: LaunchTemplateInstanceMarketOptionsRequest?
        /// The instance type. For more information, see Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: InstanceType?
        /// The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User Provided Kernels in the Amazon Elastic Compute Cloud User Guide.
        public let kernelId: String?
        /// The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
        public let keyName: String?
        /// The license configurations.
        @OptionalCustomCoding<ArrayCoder<_LicenseSpecificationsEncoding, LaunchTemplateLicenseConfigurationRequest>>
        public var licenseSpecifications: [LaunchTemplateLicenseConfigurationRequest]?
        /// The metadata options for the instance. For more information, see Instance Metadata and User Data in the Amazon Elastic Compute Cloud User Guide.
        public let metadataOptions: LaunchTemplateInstanceMetadataOptionsRequest?
        /// The monitoring for the instance.
        public let monitoring: LaunchTemplatesMonitoringRequest?
        /// One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacesEncoding, LaunchTemplateInstanceNetworkInterfaceSpecificationRequest>>
        public var networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]?
        /// The placement for the instance.
        public let placement: LaunchTemplatePlacementRequest?
        /// The ID of the RAM disk.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see User Provided Kernels in the Amazon Elastic Compute Cloud User Guide.
        public let ramDiskId: String?
        /// One or more security group IDs. You can create a security group using CreateSecurityGroup. You cannot specify both a security group ID and security name in the same request.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, LaunchTemplateTagSpecificationRequest>>
        public var tagSpecifications: [LaunchTemplateTagSpecificationRequest]?
        /// The Base64-encoded user data to make available to the instance. For more information, see Running Commands on Your Linux Instance at Launch (Linux) and Adding User Data (Windows).
        public let userData: String?

        public init(blockDeviceMappings: [LaunchTemplateBlockDeviceMappingRequest]? = nil, capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationRequest? = nil, cpuOptions: LaunchTemplateCpuOptionsRequest? = nil, creditSpecification: CreditSpecificationRequest? = nil, disableApiTermination: Bool? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecifications: [ElasticGpuSpecification]? = nil, elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAccelerator]? = nil, enclaveOptions: LaunchTemplateEnclaveOptionsRequest? = nil, hibernationOptions: LaunchTemplateHibernationOptionsRequest? = nil, iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecificationRequest? = nil, imageId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceMarketOptions: LaunchTemplateInstanceMarketOptionsRequest? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, licenseSpecifications: [LaunchTemplateLicenseConfigurationRequest]? = nil, metadataOptions: LaunchTemplateInstanceMetadataOptionsRequest? = nil, monitoring: LaunchTemplatesMonitoringRequest? = nil, networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecificationRequest]? = nil, placement: LaunchTemplatePlacementRequest? = nil, ramDiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, tagSpecifications: [LaunchTemplateTagSpecificationRequest]? = nil, userData: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationSpecification = capacityReservationSpecification
            self.cpuOptions = cpuOptions
            self.creditSpecification = creditSpecification
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecifications = elasticGpuSpecifications
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.enclaveOptions = enclaveOptions
            self.hibernationOptions = hibernationOptions
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.licenseSpecifications = licenseSpecifications
            self.metadataOptions = metadataOptions
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramDiskId = ramDiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.tagSpecifications = tagSpecifications
            self.userData = userData
        }

        public func validate(name: String) throws {
            try self.elasticInferenceAccelerators?.forEach {
                try $0.validate(name: "\(name).elasticInferenceAccelerators[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "BlockDeviceMapping"
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case cpuOptions = "CpuOptions"
            case creditSpecification = "CreditSpecification"
            case disableApiTermination = "DisableApiTermination"
            case ebsOptimized = "EbsOptimized"
            case elasticGpuSpecifications = "ElasticGpuSpecification"
            case elasticInferenceAccelerators = "ElasticInferenceAccelerator"
            case enclaveOptions = "EnclaveOptions"
            case hibernationOptions = "HibernationOptions"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case instanceInitiatedShutdownBehavior = "InstanceInitiatedShutdownBehavior"
            case instanceMarketOptions = "InstanceMarketOptions"
            case instanceType = "InstanceType"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case licenseSpecifications = "LicenseSpecification"
            case metadataOptions = "MetadataOptions"
            case monitoring = "Monitoring"
            case networkInterfaces = "NetworkInterface"
            case placement = "Placement"
            case ramDiskId = "RamDiskId"
            case securityGroupIds = "SecurityGroupId"
            case securityGroups = "SecurityGroup"
            case tagSpecifications = "TagSpecification"
            case userData = "UserData"
        }
    }

    public struct RequestSpotFleetRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The configuration for the Spot Fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData

        public init(dryRun: Bool? = nil, spotFleetRequestConfig: SpotFleetRequestConfigData) {
            self.dryRun = dryRun
            self.spotFleetRequestConfig = spotFleetRequestConfig
        }

        public func validate(name: String) throws {
            try self.spotFleetRequestConfig.validate(name: "\(name).spotFleetRequestConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case spotFleetRequestConfig
        }
    }

    public struct RequestSpotFleetResponse: AWSDecodableShape {
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?

        public init(spotFleetRequestId: String? = nil) {
            self.spotFleetRequestId = spotFleetRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case spotFleetRequestId
        }
    }

    public struct RequestSpotInstancesRequest: AWSEncodableShape {
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The user-specified name for a logical grouping of requests. When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active. If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group. Default: Instances are launched in any available Availability Zone.
        public let availabilityZoneGroup: String?
        /// Deprecated.
        public let blockDurationMinutes: Int?
        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency in the Amazon EC2 User Guide for Linux Instances.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The maximum number of Spot Instances to launch. Default: 1
        public let instanceCount: Int?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The instance launch group. Launch groups are Spot Instances that launch together and terminate together. Default: Instances are launched and terminated individually
        public let launchGroup: String?
        /// The launch specification.
        public let launchSpecification: RequestSpotLaunchSpecification?
        /// The maximum price per hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
        public let spotPrice: String?
        /// The key-value pair for tagging the Spot Instance request on creation. The value for ResourceType must be spot-instances-request, otherwise the Spot Instance request fails. To tag the Spot Instance request after it has been created, see CreateTags.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The Spot Instance request type. Default: one-time
        public let type: SpotInstanceType?
        /// The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled. The specified start date and time cannot be equal to the current date and time. You must specify a start date and time that occurs after the current date and time.
        public let validFrom: Date?
        /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ).   For a persistent request, the request remains active until the ValidUntil date and time is reached. Otherwise, the request remains active until you cancel it.    For a one-time request, the request remains active until all instances launch, the request is canceled, or the ValidUntil date and time is reached. By default, the request is valid for 7 days from the date the request was created.
        public let validUntil: Date?

        public init(availabilityZoneGroup: String? = nil, blockDurationMinutes: Int? = nil, clientToken: String? = nil, dryRun: Bool? = nil, instanceCount: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, launchGroup: String? = nil, launchSpecification: RequestSpotLaunchSpecification? = nil, spotPrice: String? = nil, tagSpecifications: [TagSpecification]? = nil, type: SpotInstanceType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.availabilityZoneGroup = availabilityZoneGroup
            self.blockDurationMinutes = blockDurationMinutes
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.launchGroup = launchGroup
            self.launchSpecification = launchSpecification
            self.spotPrice = spotPrice
            self.tagSpecifications = tagSpecifications
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZoneGroup
            case blockDurationMinutes
            case clientToken
            case dryRun
            case instanceCount
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case launchGroup
            case launchSpecification = "LaunchSpecification"
            case spotPrice
            case tagSpecifications = "TagSpecification"
            case type
            case validFrom
            case validUntil
        }
    }

    public struct RequestSpotInstancesResult: AWSDecodableShape {
        public struct _SpotInstanceRequestsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more Spot Instance requests.
        @OptionalCustomCoding<ArrayCoder<_SpotInstanceRequestsEncoding, SpotInstanceRequest>>
        public var spotInstanceRequests: [SpotInstanceRequest]?

        public init(spotInstanceRequests: [SpotInstanceRequest]? = nil) {
            self.spotInstanceRequests = spotInstanceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case spotInstanceRequests = "spotInstanceRequestSet"
        }
    }

    public struct RequestSpotLaunchSpecification: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Deprecated.
        public let addressingType: String?
        /// One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Indicates whether basic or detailed monitoring is enabled for the instance. Default: Disabled
        public let monitoring: RunInstancesMonitoringEnabled?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement information for the instance.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// One or more security group IDs.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// The ID of the subnet in which to launch the instance.
        public let subnetId: String?
        /// The Base64-encoded user data for the instance. User data is limited to 16 KB.
        public let userData: String?

        public init(addressingType: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: RunInstancesMonitoringEnabled? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, subnetId: String? = nil, userData: String? = nil) {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case addressingType
            case blockDeviceMappings = "blockDeviceMapping"
            case ebsOptimized
            case iamInstanceProfile
            case imageId
            case instanceType
            case kernelId
            case keyName
            case monitoring
            case networkInterfaces = "NetworkInterface"
            case placement
            case ramdiskId
            case securityGroupIds = "SecurityGroupId"
            case securityGroups = "SecurityGroup"
            case subnetId
            case userData
        }
    }

    public struct Reservation: AWSDecodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// [EC2-Classic only] The security groups.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, GroupIdentifier>>
        public var groups: [GroupIdentifier]?
        /// The instances.
        @OptionalCustomCoding<ArrayCoder<_InstancesEncoding, Instance>>
        public var instances: [Instance]?
        /// The ID of the account that owns the reservation.
        public let ownerId: String?
        /// The ID of the requester that launched the instances on your behalf (for example, Management Console or Auto Scaling).
        public let requesterId: String?
        /// The ID of the reservation.
        public let reservationId: String?

        public init(groups: [GroupIdentifier]? = nil, instances: [Instance]? = nil, ownerId: String? = nil, requesterId: String? = nil, reservationId: String? = nil) {
            self.groups = groups
            self.instances = instances
            self.ownerId = ownerId
            self.requesterId = requesterId
            self.reservationId = reservationId
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "groupSet"
            case instances = "instancesSet"
            case ownerId
            case requesterId
            case reservationId
        }
    }

    public struct ReservationValue: AWSDecodableShape {
        /// The hourly rate of the reservation.
        public let hourlyPrice: String?
        /// The balance of the total value (the sum of remainingUpfrontValue + hourlyPrice * number of hours remaining).
        public let remainingTotalValue: String?
        /// The remaining upfront cost of the reservation.
        public let remainingUpfrontValue: String?

        public init(hourlyPrice: String? = nil, remainingTotalValue: String? = nil, remainingUpfrontValue: String? = nil) {
            self.hourlyPrice = hourlyPrice
            self.remainingTotalValue = remainingTotalValue
            self.remainingUpfrontValue = remainingUpfrontValue
        }

        private enum CodingKeys: String, CodingKey {
            case hourlyPrice
            case remainingTotalValue
            case remainingUpfrontValue
        }
    }

    public struct ReservedInstanceLimitPrice: AWSEncodableShape {
        /// Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
        public let amount: Double?
        /// The currency in which the limitPrice amount is specified. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?

        public init(amount: Double? = nil, currencyCode: CurrencyCodeValues? = nil) {
            self.amount = amount
            self.currencyCode = currencyCode
        }

        private enum CodingKeys: String, CodingKey {
            case amount
            case currencyCode
        }
    }

    public struct ReservedInstanceReservationValue: AWSDecodableShape {
        /// The total value of the Convertible Reserved Instance that you are exchanging.
        public let reservationValue: ReservationValue?
        /// The ID of the Convertible Reserved Instance that you are exchanging.
        public let reservedInstanceId: String?

        public init(reservationValue: ReservationValue? = nil, reservedInstanceId: String? = nil) {
            self.reservationValue = reservationValue
            self.reservedInstanceId = reservedInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case reservationValue
            case reservedInstanceId
        }
    }

    public struct ReservedInstances: AWSDecodableShape {
        public struct _RecurringChargesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The currency of the Reserved Instance. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// The time when the Reserved Instance expires.
        public let end: Date?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?
        /// The number of reservations purchased.
        public let instanceCount: Int?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// The offering class of the Reserved Instance.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// The recurring charge tag assigned to the resource.
        @OptionalCustomCoding<ArrayCoder<_RecurringChargesEncoding, RecurringCharge>>
        public var recurringCharges: [RecurringCharge]?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?
        /// The scope of the Reserved Instance.
        public let scope: Scope?
        /// The date and time the Reserved Instance started.
        public let start: Date?
        /// The state of the Reserved Instance purchase.
        public let state: ReservedInstanceState?
        /// Any tags assigned to the resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?

        public init(availabilityZone: String? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int64? = nil, end: Date? = nil, fixedPrice: Float? = nil, instanceCount: Int? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, productDescription: RIProductDescription? = nil, recurringCharges: [RecurringCharge]? = nil, reservedInstancesId: String? = nil, scope: Scope? = nil, start: Date? = nil, state: ReservedInstanceState? = nil, tags: [Tag]? = nil, usagePrice: Float? = nil) {
            self.availabilityZone = availabilityZone
            self.currencyCode = currencyCode
            self.duration = duration
            self.end = end
            self.fixedPrice = fixedPrice
            self.instanceCount = instanceCount
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedInstancesId = reservedInstancesId
            self.scope = scope
            self.start = start
            self.state = state
            self.tags = tags
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case currencyCode
            case duration
            case end
            case fixedPrice
            case instanceCount
            case instanceTenancy
            case instanceType
            case offeringClass
            case offeringType
            case productDescription
            case recurringCharges
            case reservedInstancesId
            case scope
            case start
            case state
            case tags = "tagSet"
            case usagePrice
        }
    }

    public struct ReservedInstancesConfiguration: AWSEncodableShape & AWSDecodableShape {
        /// The Availability Zone for the modified Reserved Instances.
        public let availabilityZone: String?
        /// The number of modified Reserved Instances.  This is a required field for a request.
        public let instanceCount: Int?
        /// The instance type for the modified Reserved Instances.
        public let instanceType: InstanceType?
        /// The network platform of the modified Reserved Instances, which is either EC2-Classic or EC2-VPC.
        public let platform: String?
        /// Whether the Reserved Instance is applied to instances in a Region or instances in a specific Availability Zone.
        public let scope: Scope?

        public init(availabilityZone: String? = nil, instanceCount: Int? = nil, instanceType: InstanceType? = nil, platform: String? = nil, scope: Scope? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.platform = platform
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case instanceCount
            case instanceType
            case platform
            case scope
        }
    }

    public struct ReservedInstancesId: AWSDecodableShape {
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId
        }
    }

    public struct ReservedInstancesListing: AWSDecodableShape {
        public struct _InstanceCountsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PriceSchedulesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The time the listing was created.
        public let createDate: Date?
        /// The number of instances in this state.
        @OptionalCustomCoding<ArrayCoder<_InstanceCountsEncoding, InstanceCount>>
        public var instanceCounts: [InstanceCount]?
        /// The price of the Reserved Instance listing.
        @OptionalCustomCoding<ArrayCoder<_PriceSchedulesEncoding, PriceSchedule>>
        public var priceSchedules: [PriceSchedule]?
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?
        /// The ID of the Reserved Instance listing.
        public let reservedInstancesListingId: String?
        /// The status of the Reserved Instance listing.
        public let status: ListingStatus?
        /// The reason for the current status of the Reserved Instance listing. The response can be blank.
        public let statusMessage: String?
        /// Any tags assigned to the resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The last modified timestamp of the listing.
        public let updateDate: Date?

        public init(clientToken: String? = nil, createDate: Date? = nil, instanceCounts: [InstanceCount]? = nil, priceSchedules: [PriceSchedule]? = nil, reservedInstancesId: String? = nil, reservedInstancesListingId: String? = nil, status: ListingStatus? = nil, statusMessage: String? = nil, tags: [Tag]? = nil, updateDate: Date? = nil) {
            self.clientToken = clientToken
            self.createDate = createDate
            self.instanceCounts = instanceCounts
            self.priceSchedules = priceSchedules
            self.reservedInstancesId = reservedInstancesId
            self.reservedInstancesListingId = reservedInstancesListingId
            self.status = status
            self.statusMessage = statusMessage
            self.tags = tags
            self.updateDate = updateDate
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case createDate
            case instanceCounts
            case priceSchedules
            case reservedInstancesId
            case reservedInstancesListingId
            case status
            case statusMessage
            case tags = "tagSet"
            case updateDate
        }
    }

    public struct ReservedInstancesModification: AWSDecodableShape {
        public struct _ModificationResultsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ReservedInstancesIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A unique, case-sensitive key supplied by the client to ensure that the request is idempotent. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// The time when the modification request was created.
        public let createDate: Date?
        /// The time for the modification to become effective.
        public let effectiveDate: Date?
        /// Contains target configurations along with their corresponding new Reserved Instance IDs.
        @OptionalCustomCoding<ArrayCoder<_ModificationResultsEncoding, ReservedInstancesModificationResult>>
        public var modificationResults: [ReservedInstancesModificationResult]?
        /// The IDs of one or more Reserved Instances.
        @OptionalCustomCoding<ArrayCoder<_ReservedInstancesIdsEncoding, ReservedInstancesId>>
        public var reservedInstancesIds: [ReservedInstancesId]?
        /// A unique ID for the Reserved Instance modification.
        public let reservedInstancesModificationId: String?
        /// The status of the Reserved Instances modification request.
        public let status: String?
        /// The reason for the status.
        public let statusMessage: String?
        /// The time when the modification request was last updated.
        public let updateDate: Date?

        public init(clientToken: String? = nil, createDate: Date? = nil, effectiveDate: Date? = nil, modificationResults: [ReservedInstancesModificationResult]? = nil, reservedInstancesIds: [ReservedInstancesId]? = nil, reservedInstancesModificationId: String? = nil, status: String? = nil, statusMessage: String? = nil, updateDate: Date? = nil) {
            self.clientToken = clientToken
            self.createDate = createDate
            self.effectiveDate = effectiveDate
            self.modificationResults = modificationResults
            self.reservedInstancesIds = reservedInstancesIds
            self.reservedInstancesModificationId = reservedInstancesModificationId
            self.status = status
            self.statusMessage = statusMessage
            self.updateDate = updateDate
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken
            case createDate
            case effectiveDate
            case modificationResults = "modificationResultSet"
            case reservedInstancesIds = "reservedInstancesSet"
            case reservedInstancesModificationId
            case status
            case statusMessage
            case updateDate
        }
    }

    public struct ReservedInstancesModificationResult: AWSDecodableShape {
        /// The ID for the Reserved Instances that were created as part of the modification request. This field is only available when the modification is fulfilled.
        public let reservedInstancesId: String?
        /// The target Reserved Instances configurations supplied as part of the modification request.
        public let targetConfiguration: ReservedInstancesConfiguration?

        public init(reservedInstancesId: String? = nil, targetConfiguration: ReservedInstancesConfiguration? = nil) {
            self.reservedInstancesId = reservedInstancesId
            self.targetConfiguration = targetConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId
            case targetConfiguration
        }
    }

    public struct ReservedInstancesOffering: AWSDecodableShape {
        public struct _PricingDetailsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RecurringChargesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Availability Zone in which the Reserved Instance can be used.
        public let availabilityZone: String?
        /// The currency of the Reserved Instance offering you are purchasing. It's specified using ISO 4217 standard currency codes. At this time, the only supported currency is USD.
        public let currencyCode: CurrencyCodeValues?
        /// The duration of the Reserved Instance, in seconds.
        public let duration: Int64?
        /// The purchase price of the Reserved Instance.
        public let fixedPrice: Float?
        /// The tenancy of the instance.
        public let instanceTenancy: Tenancy?
        /// The instance type on which the Reserved Instance can be used.
        public let instanceType: InstanceType?
        /// Indicates whether the offering is available through the Reserved Instance Marketplace (resale) or Amazon Web Services. If it's a Reserved Instance Marketplace offering, this is true.
        public let marketplace: Bool?
        /// If convertible it can be exchanged for Reserved Instances of the same or higher monetary value, with different configurations. If standard, it is not possible to perform an exchange.
        public let offeringClass: OfferingClassType?
        /// The Reserved Instance offering type.
        public let offeringType: OfferingTypeValues?
        /// The pricing details of the Reserved Instance offering.
        @OptionalCustomCoding<ArrayCoder<_PricingDetailsEncoding, PricingDetail>>
        public var pricingDetails: [PricingDetail]?
        /// The Reserved Instance product platform description.
        public let productDescription: RIProductDescription?
        /// The recurring charge tag assigned to the resource.
        @OptionalCustomCoding<ArrayCoder<_RecurringChargesEncoding, RecurringCharge>>
        public var recurringCharges: [RecurringCharge]?
        /// The ID of the Reserved Instance offering. This is the offering ID used in GetReservedInstancesExchangeQuote to confirm that an exchange can be made.
        public let reservedInstancesOfferingId: String?
        /// Whether the Reserved Instance is applied to instances in a Region or an Availability Zone.
        public let scope: Scope?
        /// The usage price of the Reserved Instance, per hour.
        public let usagePrice: Float?

        public init(availabilityZone: String? = nil, currencyCode: CurrencyCodeValues? = nil, duration: Int64? = nil, fixedPrice: Float? = nil, instanceTenancy: Tenancy? = nil, instanceType: InstanceType? = nil, marketplace: Bool? = nil, offeringClass: OfferingClassType? = nil, offeringType: OfferingTypeValues? = nil, pricingDetails: [PricingDetail]? = nil, productDescription: RIProductDescription? = nil, recurringCharges: [RecurringCharge]? = nil, reservedInstancesOfferingId: String? = nil, scope: Scope? = nil, usagePrice: Float? = nil) {
            self.availabilityZone = availabilityZone
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
            self.instanceTenancy = instanceTenancy
            self.instanceType = instanceType
            self.marketplace = marketplace
            self.offeringClass = offeringClass
            self.offeringType = offeringType
            self.pricingDetails = pricingDetails
            self.productDescription = productDescription
            self.recurringCharges = recurringCharges
            self.reservedInstancesOfferingId = reservedInstancesOfferingId
            self.scope = scope
            self.usagePrice = usagePrice
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case currencyCode
            case duration
            case fixedPrice
            case instanceTenancy
            case instanceType
            case marketplace
            case offeringClass
            case offeringType
            case pricingDetails = "pricingDetailsSet"
            case productDescription
            case recurringCharges
            case reservedInstancesOfferingId
            case scope
            case usagePrice
        }
    }

    public struct ResetAddressAttributeRequest: AWSEncodableShape {
        /// [EC2-VPC] The allocation ID.
        public let allocationId: String
        /// The attribute of the IP address.
        public let attribute: AddressAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(allocationId: String, attribute: AddressAttributeName, dryRun: Bool? = nil) {
            self.allocationId = allocationId
            self.attribute = attribute
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case allocationId = "AllocationId"
            case attribute = "Attribute"
            case dryRun = "DryRun"
        }
    }

    public struct ResetAddressAttributeResult: AWSDecodableShape {
        /// Information about the IP address.
        public let address: AddressAttribute?

        public init(address: AddressAttribute? = nil) {
            self.address = address
        }

        private enum CodingKeys: String, CodingKey {
            case address
        }
    }

    public struct ResetEbsDefaultKmsKeyIdRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(dryRun: Bool? = nil) {
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
        }
    }

    public struct ResetEbsDefaultKmsKeyIdResult: AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the default CMK for EBS encryption by default.
        public let kmsKeyId: String?

        public init(kmsKeyId: String? = nil) {
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId
        }
    }

    public struct ResetFpgaImageAttributeRequest: AWSEncodableShape {
        /// The attribute.
        public let attribute: ResetFpgaImageAttributeName?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AFI.
        public let fpgaImageId: String

        public init(attribute: ResetFpgaImageAttributeName? = nil, dryRun: Bool? = nil, fpgaImageId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.fpgaImageId = fpgaImageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun = "DryRun"
            case fpgaImageId = "FpgaImageId"
        }
    }

    public struct ResetFpgaImageAttributeResult: AWSDecodableShape {
        /// Is true if the request succeeds, and an error otherwise.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct ResetImageAttributeRequest: AWSEncodableShape {
        /// The attribute to reset (currently you can only reset the launch permission attribute).
        public let attribute: ResetImageAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the AMI.
        public let imageId: String

        public init(attribute: ResetImageAttributeName, dryRun: Bool? = nil, imageId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun
            case imageId = "ImageId"
        }
    }

    public struct ResetInstanceAttributeRequest: AWSEncodableShape {
        /// The attribute to reset.  You can only reset the following attributes: kernel | ramdisk | sourceDestCheck. To change an instance attribute, use ModifyInstanceAttribute.
        public let attribute: InstanceAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String

        public init(attribute: InstanceAttributeName, dryRun: Bool? = nil, instanceId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute
            case dryRun
            case instanceId
        }
    }

    public struct ResetNetworkInterfaceAttributeRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The source/destination checking attribute. Resets the value to true.
        public let sourceDestCheck: String?

        public init(dryRun: Bool? = nil, networkInterfaceId: String, sourceDestCheck: String? = nil) {
            self.dryRun = dryRun
            self.networkInterfaceId = networkInterfaceId
            self.sourceDestCheck = sourceDestCheck
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case networkInterfaceId
            case sourceDestCheck
        }
    }

    public struct ResetSnapshotAttributeRequest: AWSEncodableShape {
        /// The attribute to reset. Currently, only the attribute for permission to create volumes can be reset.
        public let attribute: SnapshotAttributeName
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the snapshot.
        public let snapshotId: String

        public init(attribute: SnapshotAttributeName, dryRun: Bool? = nil, snapshotId: String) {
            self.attribute = attribute
            self.dryRun = dryRun
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case dryRun
            case snapshotId = "SnapshotId"
        }
    }

    public struct ResponseError: AWSDecodableShape {
        /// The error code.
        public let code: LaunchTemplateErrorCode?
        /// The error message, if applicable.
        public let message: String?

        public init(code: LaunchTemplateErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct ResponseLaunchTemplateData: AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticGpuSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticInferenceAcceleratorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The block device mappings.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, LaunchTemplateBlockDeviceMapping>>
        public var blockDeviceMappings: [LaunchTemplateBlockDeviceMapping]?
        /// Information about the Capacity Reservation targeting option.
        public let capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationResponse?
        /// The CPU options for the instance. For more information, see Optimizing CPU Options in the Amazon Elastic Compute Cloud User Guide.
        public let cpuOptions: LaunchTemplateCpuOptions?
        /// The credit option for CPU usage of the instance.
        public let creditSpecification: CreditSpecification?
        /// If set to true, indicates that the instance cannot be terminated using the Amazon EC2 console, command line tool, or API.
        public let disableApiTermination: Bool?
        /// Indicates whether the instance is optimized for Amazon EBS I/O.
        public let ebsOptimized: Bool?
        /// The elastic GPU specification.
        @OptionalCustomCoding<ArrayCoder<_ElasticGpuSpecificationsEncoding, ElasticGpuSpecificationResponse>>
        public var elasticGpuSpecifications: [ElasticGpuSpecificationResponse]?
        ///  The elastic inference accelerator for the instance.
        @OptionalCustomCoding<ArrayCoder<_ElasticInferenceAcceleratorsEncoding, LaunchTemplateElasticInferenceAcceleratorResponse>>
        public var elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAcceleratorResponse]?
        /// Indicates whether the instance is enabled for AWS Nitro Enclaves.
        public let enclaveOptions: LaunchTemplateEnclaveOptions?
        /// Indicates whether an instance is configured for hibernation. For more information, see Hibernate Your Instance in the Amazon Elastic Compute Cloud User Guide.
        public let hibernationOptions: LaunchTemplateHibernationOptions?
        /// The IAM instance profile.
        public let iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecification?
        /// The ID of the AMI that was used to launch the instance.
        public let imageId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The market (purchasing) option for the instances.
        public let instanceMarketOptions: LaunchTemplateInstanceMarketOptions?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel, if applicable.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// The license configurations.
        @OptionalCustomCoding<ArrayCoder<_LicenseSpecificationsEncoding, LaunchTemplateLicenseConfiguration>>
        public var licenseSpecifications: [LaunchTemplateLicenseConfiguration]?
        /// The metadata options for the instance. For more information, see Instance Metadata and User Data in the Amazon Elastic Compute Cloud User Guide.
        public let metadataOptions: LaunchTemplateInstanceMetadataOptions?
        /// The monitoring for the instance.
        public let monitoring: LaunchTemplatesMonitoring?
        /// The network interfaces.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacesEncoding, LaunchTemplateInstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecification]?
        /// The placement of the instance.
        public let placement: LaunchTemplatePlacement?
        /// The ID of the RAM disk, if applicable.
        public let ramDiskId: String?
        /// The security group IDs.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The security group names.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// The tags.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, LaunchTemplateTagSpecification>>
        public var tagSpecifications: [LaunchTemplateTagSpecification]?
        /// The user data for the instance.
        public let userData: String?

        public init(blockDeviceMappings: [LaunchTemplateBlockDeviceMapping]? = nil, capacityReservationSpecification: LaunchTemplateCapacityReservationSpecificationResponse? = nil, cpuOptions: LaunchTemplateCpuOptions? = nil, creditSpecification: CreditSpecification? = nil, disableApiTermination: Bool? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecifications: [ElasticGpuSpecificationResponse]? = nil, elasticInferenceAccelerators: [LaunchTemplateElasticInferenceAcceleratorResponse]? = nil, enclaveOptions: LaunchTemplateEnclaveOptions? = nil, hibernationOptions: LaunchTemplateHibernationOptions? = nil, iamInstanceProfile: LaunchTemplateIamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceMarketOptions: LaunchTemplateInstanceMarketOptions? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, licenseSpecifications: [LaunchTemplateLicenseConfiguration]? = nil, metadataOptions: LaunchTemplateInstanceMetadataOptions? = nil, monitoring: LaunchTemplatesMonitoring? = nil, networkInterfaces: [LaunchTemplateInstanceNetworkInterfaceSpecification]? = nil, placement: LaunchTemplatePlacement? = nil, ramDiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, tagSpecifications: [LaunchTemplateTagSpecification]? = nil, userData: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationSpecification = capacityReservationSpecification
            self.cpuOptions = cpuOptions
            self.creditSpecification = creditSpecification
            self.disableApiTermination = disableApiTermination
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecifications = elasticGpuSpecifications
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.enclaveOptions = enclaveOptions
            self.hibernationOptions = hibernationOptions
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.licenseSpecifications = licenseSpecifications
            self.metadataOptions = metadataOptions
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramDiskId = ramDiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.tagSpecifications = tagSpecifications
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "blockDeviceMappingSet"
            case capacityReservationSpecification
            case cpuOptions
            case creditSpecification
            case disableApiTermination
            case ebsOptimized
            case elasticGpuSpecifications = "elasticGpuSpecificationSet"
            case elasticInferenceAccelerators = "elasticInferenceAcceleratorSet"
            case enclaveOptions
            case hibernationOptions
            case iamInstanceProfile
            case imageId
            case instanceInitiatedShutdownBehavior
            case instanceMarketOptions
            case instanceType
            case kernelId
            case keyName
            case licenseSpecifications = "licenseSet"
            case metadataOptions
            case monitoring
            case networkInterfaces = "networkInterfaceSet"
            case placement
            case ramDiskId
            case securityGroupIds = "securityGroupIdSet"
            case securityGroups = "securityGroupSet"
            case tagSpecifications = "tagSpecificationSet"
            case userData
        }
    }

    public struct RestoreAddressToClassicRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Elastic IP address.
        public let publicIp: String

        public init(dryRun: Bool? = nil, publicIp: String) {
            self.dryRun = dryRun
            self.publicIp = publicIp
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case publicIp
        }
    }

    public struct RestoreAddressToClassicResult: AWSDecodableShape {
        /// The Elastic IP address.
        public let publicIp: String?
        /// The move status for the IP address.
        public let status: Status?

        public init(publicIp: String? = nil, status: Status? = nil) {
            self.publicIp = publicIp
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case publicIp
            case status
        }
    }

    public struct RestoreManagedPrefixListVersionRequest: AWSEncodableShape {
        /// The current version number for the prefix list.
        public let currentVersion: Int64
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String
        /// The version to restore.
        public let previousVersion: Int64

        public init(currentVersion: Int64, dryRun: Bool? = nil, prefixListId: String, previousVersion: Int64) {
            self.currentVersion = currentVersion
            self.dryRun = dryRun
            self.prefixListId = prefixListId
            self.previousVersion = previousVersion
        }

        private enum CodingKeys: String, CodingKey {
            case currentVersion = "CurrentVersion"
            case dryRun = "DryRun"
            case prefixListId = "PrefixListId"
            case previousVersion = "PreviousVersion"
        }
    }

    public struct RestoreManagedPrefixListVersionResult: AWSDecodableShape {
        /// Information about the prefix list.
        public let prefixList: ManagedPrefixList?

        public init(prefixList: ManagedPrefixList? = nil) {
            self.prefixList = prefixList
        }

        private enum CodingKeys: String, CodingKey {
            case prefixList
        }
    }

    public struct RevokeClientVpnIngressRequest: AWSEncodableShape {
        /// The ID of the Active Directory group for which to revoke access.
        public let accessGroupId: String?
        /// The ID of the Client VPN endpoint with which the authorization rule is associated.
        public let clientVpnEndpointId: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether access should be revoked for all clients.
        public let revokeAllGroups: Bool?
        /// The IPv4 address range, in CIDR notation, of the network for which access is being removed.
        public let targetNetworkCidr: String

        public init(accessGroupId: String? = nil, clientVpnEndpointId: String, dryRun: Bool? = nil, revokeAllGroups: Bool? = nil, targetNetworkCidr: String) {
            self.accessGroupId = accessGroupId
            self.clientVpnEndpointId = clientVpnEndpointId
            self.dryRun = dryRun
            self.revokeAllGroups = revokeAllGroups
            self.targetNetworkCidr = targetNetworkCidr
        }

        private enum CodingKeys: String, CodingKey {
            case accessGroupId = "AccessGroupId"
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case dryRun = "DryRun"
            case revokeAllGroups = "RevokeAllGroups"
            case targetNetworkCidr = "TargetNetworkCidr"
        }
    }

    public struct RevokeClientVpnIngressResult: AWSDecodableShape {
        /// The current state of the authorization rule.
        public let status: ClientVpnAuthorizationRuleStatus?

        public init(status: ClientVpnAuthorizationRuleStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status
        }
    }

    public struct RevokeSecurityGroupEgressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupRuleIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Not supported. Use a set of IP permissions to specify the CIDR.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String
        /// The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
        @OptionalCustomCoding<ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// Not supported. Use a set of IP permissions to specify the protocol name or number.
        public let ipProtocol: String?
        /// The IDs of the security group rules.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupRuleIdsEncoding, String>>
        public var securityGroupRuleIds: [String]?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupName: String?
        /// Not supported. Use a set of IP permissions to specify a destination security group.
        public let sourceSecurityGroupOwnerId: String?
        /// Not supported. Use a set of IP permissions to specify the port.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, securityGroupRuleIds: [String]? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.securityGroupRuleIds = securityGroupRuleIds
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp
            case dryRun
            case fromPort
            case groupId
            case ipPermissions
            case ipProtocol
            case securityGroupRuleIds = "SecurityGroupRuleId"
            case sourceSecurityGroupName
            case sourceSecurityGroupOwnerId
            case toPort
        }
    }

    public struct RevokeSecurityGroupEgressResult: AWSDecodableShape {
        public struct _UnknownIpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?
        /// The outbound rules that were unknown to the service. In some cases, unknownIpPermissionSet might be in a different format from the request parameter.
        @OptionalCustomCoding<ArrayCoder<_UnknownIpPermissionsEncoding, IpPermission>>
        public var unknownIpPermissions: [IpPermission]?

        public init(return: Bool? = nil, unknownIpPermissions: [IpPermission]? = nil) {
            self.`return` = `return`
            self.unknownIpPermissions = unknownIpPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
            case unknownIpPermissions = "unknownIpPermissionSet"
        }
    }

    public struct RevokeSecurityGroupIngressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupRuleIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The CIDR IP address range. You can't specify this parameter when specifying a source security group.
        public let cidrIp: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use -1 to specify all ICMP types.
        public let fromPort: Int?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.
        @OptionalCustomCoding<ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// The IP protocol name (tcp, udp, icmp) or number (see Protocol Numbers). Use -1 to specify all.
        public let ipProtocol: String?
        /// The IDs of the security group rules.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupRuleIdsEncoding, String>>
        public var securityGroupRuleIds: [String]?
        /// [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupName: String?
        /// [EC2-Classic] The Amazon Web Services account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
        public let sourceSecurityGroupOwnerId: String?
        /// The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use -1 to specify all ICMP codes for the ICMP type.
        public let toPort: Int?

        public init(cidrIp: String? = nil, dryRun: Bool? = nil, fromPort: Int? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, ipProtocol: String? = nil, securityGroupRuleIds: [String]? = nil, sourceSecurityGroupName: String? = nil, sourceSecurityGroupOwnerId: String? = nil, toPort: Int? = nil) {
            self.cidrIp = cidrIp
            self.dryRun = dryRun
            self.fromPort = fromPort
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipProtocol = ipProtocol
            self.securityGroupRuleIds = securityGroupRuleIds
            self.sourceSecurityGroupName = sourceSecurityGroupName
            self.sourceSecurityGroupOwnerId = sourceSecurityGroupOwnerId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIp = "CidrIp"
            case dryRun
            case fromPort = "FromPort"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case ipProtocol = "IpProtocol"
            case securityGroupRuleIds = "SecurityGroupRuleId"
            case sourceSecurityGroupName = "SourceSecurityGroupName"
            case sourceSecurityGroupOwnerId = "SourceSecurityGroupOwnerId"
            case toPort = "ToPort"
        }
    }

    public struct RevokeSecurityGroupIngressResult: AWSDecodableShape {
        public struct _UnknownIpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?
        /// The inbound rules that were unknown to the service. In some cases, unknownIpPermissionSet might be in a different format from the request parameter.
        @OptionalCustomCoding<ArrayCoder<_UnknownIpPermissionsEncoding, IpPermission>>
        public var unknownIpPermissions: [IpPermission]?

        public init(return: Bool? = nil, unknownIpPermissions: [IpPermission]? = nil) {
            self.`return` = `return`
            self.unknownIpPermissions = unknownIpPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
            case unknownIpPermissions = "unknownIpPermissionSet"
        }
    }

    public struct Route: AWSDecodableShape {
        /// The ID of the carrier gateway.
        public let carrierGatewayId: String?
        /// The IPv4 CIDR block used for the destination match.
        public let destinationCidrBlock: String?
        /// The IPv6 CIDR block used for the destination match.
        public let destinationIpv6CidrBlock: String?
        /// The prefix of the AWS service.
        public let destinationPrefixListId: String?
        /// The ID of the egress-only internet gateway.
        public let egressOnlyInternetGatewayId: String?
        /// The ID of a gateway attached to your VPC.
        public let gatewayId: String?
        /// The ID of a NAT instance in your VPC.
        public let instanceId: String?
        /// The AWS account ID of the owner of the instance.
        public let instanceOwnerId: String?
        /// The ID of the local gateway.
        public let localGatewayId: String?
        /// The ID of a NAT gateway.
        public let natGatewayId: String?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// Describes how the route was created.    CreateRouteTable - The route was automatically created when the route table was created.    CreateRoute - The route was manually added to the route table.    EnableVgwRoutePropagation - The route was propagated by route propagation.
        public let origin: RouteOrigin?
        /// The state of the route. The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, or the specified NAT instance has been terminated).
        public let state: RouteState?
        /// The ID of a transit gateway.
        public let transitGatewayId: String?
        /// The ID of a VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(carrierGatewayId: String? = nil, destinationCidrBlock: String? = nil, destinationIpv6CidrBlock: String? = nil, destinationPrefixListId: String? = nil, egressOnlyInternetGatewayId: String? = nil, gatewayId: String? = nil, instanceId: String? = nil, instanceOwnerId: String? = nil, localGatewayId: String? = nil, natGatewayId: String? = nil, networkInterfaceId: String? = nil, origin: RouteOrigin? = nil, state: RouteState? = nil, transitGatewayId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.carrierGatewayId = carrierGatewayId
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationIpv6CidrBlock = destinationIpv6CidrBlock
            self.destinationPrefixListId = destinationPrefixListId
            self.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId
            self.gatewayId = gatewayId
            self.instanceId = instanceId
            self.instanceOwnerId = instanceOwnerId
            self.localGatewayId = localGatewayId
            self.natGatewayId = natGatewayId
            self.networkInterfaceId = networkInterfaceId
            self.origin = origin
            self.state = state
            self.transitGatewayId = transitGatewayId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case carrierGatewayId
            case destinationCidrBlock
            case destinationIpv6CidrBlock
            case destinationPrefixListId
            case egressOnlyInternetGatewayId
            case gatewayId
            case instanceId
            case instanceOwnerId
            case localGatewayId
            case natGatewayId
            case networkInterfaceId
            case origin
            case state
            case transitGatewayId
            case vpcPeeringConnectionId
        }
    }

    public struct RouteTable: AWSDecodableShape {
        public struct _AssociationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PropagatingVgwsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The associations between the route table and one or more subnets or a gateway.
        @OptionalCustomCoding<ArrayCoder<_AssociationsEncoding, RouteTableAssociation>>
        public var associations: [RouteTableAssociation]?
        /// The ID of the AWS account that owns the route table.
        public let ownerId: String?
        /// Any virtual private gateway (VGW) propagating routes.
        @OptionalCustomCoding<ArrayCoder<_PropagatingVgwsEncoding, PropagatingVgw>>
        public var propagatingVgws: [PropagatingVgw]?
        /// The routes in the route table.
        @OptionalCustomCoding<ArrayCoder<_RoutesEncoding, Route>>
        public var routes: [Route]?
        /// The ID of the route table.
        public let routeTableId: String?
        /// Any tags assigned to the route table.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(associations: [RouteTableAssociation]? = nil, ownerId: String? = nil, propagatingVgws: [PropagatingVgw]? = nil, routes: [Route]? = nil, routeTableId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.associations = associations
            self.ownerId = ownerId
            self.propagatingVgws = propagatingVgws
            self.routes = routes
            self.routeTableId = routeTableId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case associations = "associationSet"
            case ownerId
            case propagatingVgws = "propagatingVgwSet"
            case routes = "routeSet"
            case routeTableId
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct RouteTableAssociation: AWSDecodableShape {
        /// The state of the association.
        public let associationState: RouteTableAssociationState?
        /// The ID of the internet gateway or virtual private gateway.
        public let gatewayId: String?
        /// Indicates whether this is the main route table.
        public let main: Bool?
        /// The ID of the association.
        public let routeTableAssociationId: String?
        /// The ID of the route table.
        public let routeTableId: String?
        /// The ID of the subnet. A subnet ID is not returned for an implicit association.
        public let subnetId: String?

        public init(associationState: RouteTableAssociationState? = nil, gatewayId: String? = nil, main: Bool? = nil, routeTableAssociationId: String? = nil, routeTableId: String? = nil, subnetId: String? = nil) {
            self.associationState = associationState
            self.gatewayId = gatewayId
            self.main = main
            self.routeTableAssociationId = routeTableAssociationId
            self.routeTableId = routeTableId
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associationState
            case gatewayId
            case main
            case routeTableAssociationId
            case routeTableId
            case subnetId
        }
    }

    public struct RouteTableAssociationState: AWSDecodableShape {
        /// The state of the association.
        public let state: RouteTableAssociationStateCode?
        /// The status message, if applicable.
        public let statusMessage: String?

        public init(state: RouteTableAssociationStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case statusMessage
        }
    }

    public struct RunInstancesMonitoringEnabled: AWSEncodableShape & AWSDecodableShape {
        /// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool

        public init(enabled: Bool) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled
        }
    }

    public struct RunInstancesRequest: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }
        public struct _ElasticGpuSpecificationEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ElasticInferenceAcceleratorsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LicenseSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroup" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Reserved.
        public let additionalInfo: String?
        /// The block device mapping entries.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// Information about the Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to open, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
        public let capacityReservationSpecification: CapacityReservationSpecification?
        /// Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, a randomly generated token is used for the request to ensure idempotency. For more information, see Ensuring Idempotency. Constraints: Maximum 64 ASCII characters
        public let clientToken: String?
        /// The CPU options for the instance. For more information, see Optimizing CPU options in the Amazon EC2 User Guide.
        public let cpuOptions: CpuOptionsRequest?
        /// The credit option for CPU usage of the burstable performance instance. Valid values are standard and unlimited. To change this attribute after launch, use  ModifyInstanceCreditSpecification. For more information, see Burstable performance instances in the Amazon EC2 User Guide. Default: standard (T2 instances) or unlimited (T3/T3a instances)
        public let creditSpecification: CreditSpecificationRequest?
        /// If you set this parameter to true, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use ModifyInstanceAttribute. Alternatively, if you set InstanceInitiatedShutdownBehavior to terminate, you can terminate the instance by running the shutdown command from the instance. Default: false
        public let disableApiTermination: Bool?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see Amazon EC2 Elastic GPUs in the Amazon EC2 User Guide.
        @OptionalCustomCoding<ArrayCoder<_ElasticGpuSpecificationEncoding, ElasticGpuSpecification>>
        public var elasticGpuSpecification: [ElasticGpuSpecification]?
        /// An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads. You cannot specify accelerators from different generations in the same request.
        @OptionalCustomCoding<ArrayCoder<_ElasticInferenceAcceleratorsEncoding, ElasticInferenceAccelerator>>
        public var elasticInferenceAccelerators: [ElasticInferenceAccelerator]?
        /// Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves. For more information, see  What is Amazon Web Services Nitro Enclaves? in the Amazon Web Services Nitro Enclaves User Guide. You can't enable Amazon Web Services Nitro Enclaves and hibernation on the same instance.
        public let enclaveOptions: EnclaveOptionsRequest?
        /// Indicates whether an instance is enabled for hibernation. For more information, see Hibernate your instance in the Amazon EC2 User Guide. You can't enable hibernation and Amazon Web Services Nitro Enclaves on the same instance.
        public let hibernationOptions: HibernationOptionsRequest?
        /// The name or Amazon Resource Name (ARN) of an IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
        public let imageId: String?
        /// Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown). Default: stop
        public let instanceInitiatedShutdownBehavior: ShutdownBehavior?
        /// The market (purchasing) option for the instances. For RunInstances, persistent Spot Instance requests are only supported when InstanceInterruptionBehavior is set to either hibernate or stop.
        public let instanceMarketOptions: InstanceMarketOptionsRequest?
        /// The instance type. For more information, see Instance types in the Amazon EC2 User Guide. Default: m1.small
        public let instanceType: InstanceType?
        /// [EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
        public let ipv6AddressCount: Int?
        /// [EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch. You cannot specify this option and the network interfaces option in the same request.
        @OptionalCustomCoding<ArrayCoder<_Ipv6AddressesEncoding, InstanceIpv6Address>>
        public var ipv6Addresses: [InstanceIpv6Address]?
        /// The ID of the kernel.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon EC2 User Guide.
        public let kernelId: String?
        /// The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.  If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
        public let keyName: String?
        /// The launch template to use to launch the instances. Any parameters that you specify in RunInstances override the same parameters in the launch template. You can specify either the name or ID of a launch template, but not both.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The license configurations.
        @OptionalCustomCoding<ArrayCoder<_LicenseSpecificationsEncoding, LicenseConfigurationRequest>>
        public var licenseSpecifications: [LicenseConfigurationRequest]?
        /// The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above MinCount. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 FAQ.
        public let maxCount: Int
        /// The metadata options for the instance. For more information, see Instance metadata and user data.
        public let metadataOptions: InstanceMetadataOptionsRequest?
        /// The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances. Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see How many instances can I run in Amazon EC2 in the Amazon EC2 General FAQ.
        public let minCount: Int
        /// Specifies whether detailed monitoring is enabled for the instance.
        public let monitoring: RunInstancesMonitoringEnabled?
        /// The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement for the instance.
        public let placement: Placement?
        /// [EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet. Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request. You cannot specify this option and the network interfaces option in the same request.
        public let privateIpAddress: String?
        /// The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the Amazon Web Services Resource Center and search for the kernel ID.  We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see  PV-GRUB in the Amazon EC2 User Guide.
        public let ramdiskId: String?
        /// The IDs of the security groups. You can create a security group using CreateSecurityGroup. If you specify a network interface, you must specify any security groups as part of the network interface.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// [EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead. If you specify a network interface, you must specify any security groups as part of the network interface. Default: Amazon EC2 uses the default security group.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// [EC2-VPC] The ID of the subnet to launch the instance into. If you specify a network interface, you must specify any subnets as part of the network interface.
        public let subnetId: String?
        /// The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see CreateTags.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The user data to make available to the instance. For more information, see Running commands on your Linux instance at launch (Linux) and Adding User Data (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
        public let userData: String?

        public init(additionalInfo: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, capacityReservationSpecification: CapacityReservationSpecification? = nil, clientToken: String? = RunInstancesRequest.idempotencyToken(), cpuOptions: CpuOptionsRequest? = nil, creditSpecification: CreditSpecificationRequest? = nil, disableApiTermination: Bool? = nil, dryRun: Bool? = nil, ebsOptimized: Bool? = nil, elasticGpuSpecification: [ElasticGpuSpecification]? = nil, elasticInferenceAccelerators: [ElasticInferenceAccelerator]? = nil, enclaveOptions: EnclaveOptionsRequest? = nil, hibernationOptions: HibernationOptionsRequest? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceInitiatedShutdownBehavior: ShutdownBehavior? = nil, instanceMarketOptions: InstanceMarketOptionsRequest? = nil, instanceType: InstanceType? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [InstanceIpv6Address]? = nil, kernelId: String? = nil, keyName: String? = nil, launchTemplate: LaunchTemplateSpecification? = nil, licenseSpecifications: [LicenseConfigurationRequest]? = nil, maxCount: Int, metadataOptions: InstanceMetadataOptionsRequest? = nil, minCount: Int, monitoring: RunInstancesMonitoringEnabled? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: Placement? = nil, privateIpAddress: String? = nil, ramdiskId: String? = nil, securityGroupIds: [String]? = nil, securityGroups: [String]? = nil, subnetId: String? = nil, tagSpecifications: [TagSpecification]? = nil, userData: String? = nil) {
            self.additionalInfo = additionalInfo
            self.blockDeviceMappings = blockDeviceMappings
            self.capacityReservationSpecification = capacityReservationSpecification
            self.clientToken = clientToken
            self.cpuOptions = cpuOptions
            self.creditSpecification = creditSpecification
            self.disableApiTermination = disableApiTermination
            self.dryRun = dryRun
            self.ebsOptimized = ebsOptimized
            self.elasticGpuSpecification = elasticGpuSpecification
            self.elasticInferenceAccelerators = elasticInferenceAccelerators
            self.enclaveOptions = enclaveOptions
            self.hibernationOptions = hibernationOptions
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior
            self.instanceMarketOptions = instanceMarketOptions
            self.instanceType = instanceType
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchTemplate = launchTemplate
            self.licenseSpecifications = licenseSpecifications
            self.maxCount = maxCount
            self.metadataOptions = metadataOptions
            self.minCount = minCount
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.privateIpAddress = privateIpAddress
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
            self.userData = userData
        }

        public func validate(name: String) throws {
            try self.elasticInferenceAccelerators?.forEach {
                try $0.validate(name: "\(name).elasticInferenceAccelerators[]")
            }
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo
            case blockDeviceMappings = "BlockDeviceMapping"
            case capacityReservationSpecification = "CapacityReservationSpecification"
            case clientToken
            case cpuOptions = "CpuOptions"
            case creditSpecification = "CreditSpecification"
            case disableApiTermination
            case dryRun
            case ebsOptimized
            case elasticGpuSpecification = "ElasticGpuSpecification"
            case elasticInferenceAccelerators = "ElasticInferenceAccelerator"
            case enclaveOptions = "EnclaveOptions"
            case hibernationOptions = "HibernationOptions"
            case iamInstanceProfile
            case imageId = "ImageId"
            case instanceInitiatedShutdownBehavior
            case instanceMarketOptions = "InstanceMarketOptions"
            case instanceType = "InstanceType"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Address"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case launchTemplate = "LaunchTemplate"
            case licenseSpecifications = "LicenseSpecification"
            case maxCount = "MaxCount"
            case metadataOptions = "MetadataOptions"
            case minCount = "MinCount"
            case monitoring = "Monitoring"
            case networkInterfaces = "networkInterface"
            case placement = "Placement"
            case privateIpAddress
            case ramdiskId = "RamdiskId"
            case securityGroupIds = "SecurityGroupId"
            case securityGroups = "SecurityGroup"
            case subnetId = "SubnetId"
            case tagSpecifications = "TagSpecification"
            case userData = "UserData"
        }
    }

    public struct RunScheduledInstancesRequest: AWSEncodableShape {
        /// Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The number of instances. Default: 1
        public let instanceCount: Int?
        /// The launch specification. You must match the instance type, Availability Zone, network, and platform of the schedule that you purchased.
        public let launchSpecification: ScheduledInstancesLaunchSpecification
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String

        public init(clientToken: String? = RunScheduledInstancesRequest.idempotencyToken(), dryRun: Bool? = nil, instanceCount: Int? = nil, launchSpecification: ScheduledInstancesLaunchSpecification, scheduledInstanceId: String) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.instanceCount = instanceCount
            self.launchSpecification = launchSpecification
            self.scheduledInstanceId = scheduledInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case instanceCount = "InstanceCount"
            case launchSpecification = "LaunchSpecification"
            case scheduledInstanceId = "ScheduledInstanceId"
        }
    }

    public struct RunScheduledInstancesResult: AWSDecodableShape {
        public struct _InstanceIdSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IDs of the newly launched instances.
        @OptionalCustomCoding<ArrayCoder<_InstanceIdSetEncoding, String>>
        public var instanceIdSet: [String]?

        public init(instanceIdSet: [String]? = nil) {
            self.instanceIdSet = instanceIdSet
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIdSet
        }
    }

    public struct S3ObjectTag: AWSEncodableShape {
        /// The key of the tag. Constraints: Tag keys are case-sensitive and can be up to 128 Unicode characters in length. May not begin with aws:.
        public let key: String?
        /// The value of the tag. Constraints: Tag values are case-sensitive and can be up to 256 Unicode characters in length.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct S3Storage: AWSEncodableShape & AWSDecodableShape {
        /// The access key ID of the owner of the bucket. Before you specify a value for your access key ID, review and follow the guidance in Best Practices for Managing AWS Access Keys.
        public let aWSAccessKeyId: String?
        /// The bucket in which to store the AMI. You can specify a bucket that you already own or a new bucket that Amazon EC2 creates on your behalf. If you specify a bucket that belongs to someone else, Amazon EC2 returns an error.
        public let bucket: String?
        /// The beginning of the file name of the AMI.
        public let prefix: String?
        /// An Amazon S3 upload policy that gives Amazon EC2 permission to upload items into Amazon S3 on your behalf.
        public let uploadPolicy: Data?
        /// The signature of the JSON document.
        public let uploadPolicySignature: String?

        public init(aWSAccessKeyId: String? = nil, bucket: String? = nil, prefix: String? = nil, uploadPolicy: Data? = nil, uploadPolicySignature: String? = nil) {
            self.aWSAccessKeyId = aWSAccessKeyId
            self.bucket = bucket
            self.prefix = prefix
            self.uploadPolicy = uploadPolicy
            self.uploadPolicySignature = uploadPolicySignature
        }

        private enum CodingKeys: String, CodingKey {
            case aWSAccessKeyId = "AWSAccessKeyId"
            case bucket
            case prefix
            case uploadPolicy
            case uploadPolicySignature
        }
    }

    public struct ScheduledInstance: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The date when the Scheduled Instance was purchased.
        public let createDate: Date?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The number of instances.
        public let instanceCount: Int?
        /// The instance type.
        public let instanceType: String?
        /// The network platform (EC2-Classic or EC2-VPC).
        public let networkPlatform: String?
        /// The time for the next schedule to start.
        public let nextSlotStartTime: Date?
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?
        /// The time that the previous schedule ended or will end.
        public let previousSlotEndTime: Date?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?
        /// The Scheduled Instance ID.
        public let scheduledInstanceId: String?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int?
        /// The end date for the Scheduled Instance.
        public let termEndDate: Date?
        /// The start date for the Scheduled Instance.
        public let termStartDate: Date?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int?

        public init(availabilityZone: String? = nil, createDate: Date? = nil, hourlyPrice: String? = nil, instanceCount: Int? = nil, instanceType: String? = nil, networkPlatform: String? = nil, nextSlotStartTime: Date? = nil, platform: String? = nil, previousSlotEndTime: Date? = nil, recurrence: ScheduledInstanceRecurrence? = nil, scheduledInstanceId: String? = nil, slotDurationInHours: Int? = nil, termEndDate: Date? = nil, termStartDate: Date? = nil, totalScheduledInstanceHours: Int? = nil) {
            self.availabilityZone = availabilityZone
            self.createDate = createDate
            self.hourlyPrice = hourlyPrice
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.networkPlatform = networkPlatform
            self.nextSlotStartTime = nextSlotStartTime
            self.platform = platform
            self.previousSlotEndTime = previousSlotEndTime
            self.recurrence = recurrence
            self.scheduledInstanceId = scheduledInstanceId
            self.slotDurationInHours = slotDurationInHours
            self.termEndDate = termEndDate
            self.termStartDate = termStartDate
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case createDate
            case hourlyPrice
            case instanceCount
            case instanceType
            case networkPlatform
            case nextSlotStartTime
            case platform
            case previousSlotEndTime
            case recurrence
            case scheduledInstanceId
            case slotDurationInHours
            case termEndDate
            case termStartDate
            case totalScheduledInstanceHours
        }
    }

    public struct ScheduledInstanceAvailability: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The number of available instances.
        public let availableInstanceCount: Int?
        /// The time period for the first schedule to start.
        public let firstSlotStartTime: Date?
        /// The hourly price for a single instance.
        public let hourlyPrice: String?
        /// The instance type. You can specify one of the C3, C4, M4, or R3 instance types.
        public let instanceType: String?
        /// The maximum term. The only possible value is 365 days.
        public let maxTermDurationInDays: Int?
        /// The minimum term. The only possible value is 365 days.
        public let minTermDurationInDays: Int?
        /// The network platform (EC2-Classic or EC2-VPC).
        public let networkPlatform: String?
        /// The platform (Linux/UNIX or Windows).
        public let platform: String?
        /// The purchase token. This token expires in two hours.
        public let purchaseToken: String?
        /// The schedule recurrence.
        public let recurrence: ScheduledInstanceRecurrence?
        /// The number of hours in the schedule.
        public let slotDurationInHours: Int?
        /// The total number of hours for a single instance for the entire term.
        public let totalScheduledInstanceHours: Int?

        public init(availabilityZone: String? = nil, availableInstanceCount: Int? = nil, firstSlotStartTime: Date? = nil, hourlyPrice: String? = nil, instanceType: String? = nil, maxTermDurationInDays: Int? = nil, minTermDurationInDays: Int? = nil, networkPlatform: String? = nil, platform: String? = nil, purchaseToken: String? = nil, recurrence: ScheduledInstanceRecurrence? = nil, slotDurationInHours: Int? = nil, totalScheduledInstanceHours: Int? = nil) {
            self.availabilityZone = availabilityZone
            self.availableInstanceCount = availableInstanceCount
            self.firstSlotStartTime = firstSlotStartTime
            self.hourlyPrice = hourlyPrice
            self.instanceType = instanceType
            self.maxTermDurationInDays = maxTermDurationInDays
            self.minTermDurationInDays = minTermDurationInDays
            self.networkPlatform = networkPlatform
            self.platform = platform
            self.purchaseToken = purchaseToken
            self.recurrence = recurrence
            self.slotDurationInHours = slotDurationInHours
            self.totalScheduledInstanceHours = totalScheduledInstanceHours
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case availableInstanceCount
            case firstSlotStartTime
            case hourlyPrice
            case instanceType
            case maxTermDurationInDays
            case minTermDurationInDays
            case networkPlatform
            case platform
            case purchaseToken
            case recurrence
            case slotDurationInHours
            case totalScheduledInstanceHours
        }
    }

    public struct ScheduledInstanceRecurrence: AWSDecodableShape {
        public struct _OccurrenceDaySetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// The interval quantity. The interval unit depends on the value of frequency. For example, every 2 weeks or every 2 months.
        public let interval: Int?
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday).
        @OptionalCustomCoding<ArrayCoder<_OccurrenceDaySetEncoding, Int>>
        public var occurrenceDaySet: [Int]?
        /// Indicates whether the occurrence is relative to the end of the specified week or month.
        public let occurrenceRelativeToEnd: Bool?
        /// The unit for occurrenceDaySet (DayOfWeek or DayOfMonth).
        public let occurrenceUnit: String?

        public init(frequency: String? = nil, interval: Int? = nil, occurrenceDaySet: [Int]? = nil, occurrenceRelativeToEnd: Bool? = nil, occurrenceUnit: String? = nil) {
            self.frequency = frequency
            self.interval = interval
            self.occurrenceDaySet = occurrenceDaySet
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.occurrenceUnit = occurrenceUnit
        }

        private enum CodingKeys: String, CodingKey {
            case frequency
            case interval
            case occurrenceDaySet
            case occurrenceRelativeToEnd
            case occurrenceUnit
        }
    }

    public struct ScheduledInstanceRecurrenceRequest: AWSEncodableShape {
        public struct _OccurrenceDaysEncoding: ArrayCoderProperties { public static let member = "OccurenceDay" }

        /// The frequency (Daily, Weekly, or Monthly).
        public let frequency: String?
        /// The interval quantity. The interval unit depends on the value of Frequency. For example, every 2 weeks or every 2 months.
        public let interval: Int?
        /// The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
        @OptionalCustomCoding<ArrayCoder<_OccurrenceDaysEncoding, Int>>
        public var occurrenceDays: [Int]?
        /// Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
        public let occurrenceRelativeToEnd: Bool?
        /// The unit for OccurrenceDays (DayOfWeek or DayOfMonth). This value is required for a monthly schedule. You can't specify DayOfWeek with a weekly schedule. You can't specify this value with a daily schedule.
        public let occurrenceUnit: String?

        public init(frequency: String? = nil, interval: Int? = nil, occurrenceDays: [Int]? = nil, occurrenceRelativeToEnd: Bool? = nil, occurrenceUnit: String? = nil) {
            self.frequency = frequency
            self.interval = interval
            self.occurrenceDays = occurrenceDays
            self.occurrenceRelativeToEnd = occurrenceRelativeToEnd
            self.occurrenceUnit = occurrenceUnit
        }

        private enum CodingKeys: String, CodingKey {
            case frequency = "Frequency"
            case interval = "Interval"
            case occurrenceDays = "OccurrenceDay"
            case occurrenceRelativeToEnd = "OccurrenceRelativeToEnd"
            case occurrenceUnit = "OccurrenceUnit"
        }
    }

    public struct ScheduledInstancesBlockDeviceMapping: AWSEncodableShape {
        /// The device name (for example, /dev/sdh or xvdh).
        public let deviceName: String?
        /// Parameters used to set up EBS volumes automatically when the instance is launched.
        public let ebs: ScheduledInstancesEbs?
        /// To omit the device from the block device mapping, specify an empty string.
        public let noDevice: String?
        /// The virtual device name (ephemeralN). Instance store volumes are numbered starting from 0. An instance type with two available instance store volumes can specify mappings for ephemeral0 and ephemeral1. The number of available instance store volumes depends on the instance type. After you connect to the instance, you must mount the volume. Constraints: For M3 instances, you must specify instance store volumes in the block device mapping for the instance. When you launch an M3 instance, we ignore any instance store volumes specified in the block device mapping for the AMI.
        public let virtualName: String?

        public init(deviceName: String? = nil, ebs: ScheduledInstancesEbs? = nil, noDevice: String? = nil, virtualName: String? = nil) {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "DeviceName"
            case ebs = "Ebs"
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
        }
    }

    public struct ScheduledInstancesEbs: AWSEncodableShape {
        /// Indicates whether the volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// Indicates whether the volume is encrypted. You can attached encrypted volumes only to instances that support them.
        public let encrypted: Bool?
        /// The number of I/O operations per second (IOPS) to provision for an io1 or io2 volume, with a maximum ratio of 50 IOPS/GiB for io1, and 500 IOPS/GiB for io2. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on instances built on the Nitro System. Other instance families guarantee performance up to 32,000 IOPS. For more information, see Amazon EBS volume types in the Amazon EC2 User Guide. This parameter is valid only for Provisioned IOPS SSD (io1 and io2) volumes.
        public let iops: Int?
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// The size of the volume, in GiB. Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int?
        /// The volume type. gp2 for General Purpose SSD, io1 or  io2 for Provisioned IOPS SSD, Throughput Optimized HDD for st1, Cold HDD for sc1, or standard for Magnetic. Default: gp2
        public let volumeType: String?

        public init(deleteOnTermination: Bool? = nil, encrypted: Bool? = nil, iops: Int? = nil, snapshotId: String? = nil, volumeSize: Int? = nil, volumeType: String? = nil) {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.snapshotId = snapshotId
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case deleteOnTermination = "DeleteOnTermination"
            case encrypted = "Encrypted"
            case iops = "Iops"
            case snapshotId = "SnapshotId"
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
        }
    }

    public struct ScheduledInstancesIamInstanceProfile: AWSEncodableShape {
        /// The Amazon Resource Name (ARN).
        public let arn: String?
        /// The name.
        public let name: String?

        public init(arn: String? = nil, name: String? = nil) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case name = "Name"
        }
    }

    public struct ScheduledInstancesIpv6Address: AWSEncodableShape {
        /// The IPv6 address.
        public let ipv6Address: String?

        public init(ipv6Address: String? = nil) {
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct ScheduledInstancesLaunchSpecification: AWSEncodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "BlockDeviceMapping" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "NetworkInterface" }
        public struct _SecurityGroupIdsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }

        /// The block device mapping entries.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, ScheduledInstancesBlockDeviceMapping>>
        public var blockDeviceMappings: [ScheduledInstancesBlockDeviceMapping]?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: ScheduledInstancesIamInstanceProfile?
        /// The ID of the Amazon Machine Image (AMI).
        public let imageId: String
        /// The instance type.
        public let instanceType: String?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Enable or disable monitoring for the instances.
        public let monitoring: ScheduledInstancesMonitoring?
        /// The network interfaces.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacesEncoding, ScheduledInstancesNetworkInterface>>
        public var networkInterfaces: [ScheduledInstancesNetworkInterface]?
        /// The placement information.
        public let placement: ScheduledInstancesPlacement?
        /// The ID of the RAM disk.
        public let ramdiskId: String?
        /// The IDs of the security groups.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupIdsEncoding, String>>
        public var securityGroupIds: [String]?
        /// The ID of the subnet in which to launch the instances.
        public let subnetId: String?
        /// The base64-encoded MIME user data.
        public let userData: String?

        public init(blockDeviceMappings: [ScheduledInstancesBlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: ScheduledInstancesIamInstanceProfile? = nil, imageId: String, instanceType: String? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: ScheduledInstancesMonitoring? = nil, networkInterfaces: [ScheduledInstancesNetworkInterface]? = nil, placement: ScheduledInstancesPlacement? = nil, ramdiskId: String? = nil, securityGroupIds: [String]? = nil, subnetId: String? = nil, userData: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroupIds = securityGroupIds
            self.subnetId = subnetId
            self.userData = userData
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "BlockDeviceMapping"
            case ebsOptimized = "EbsOptimized"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case instanceType = "InstanceType"
            case kernelId = "KernelId"
            case keyName = "KeyName"
            case monitoring = "Monitoring"
            case networkInterfaces = "NetworkInterface"
            case placement = "Placement"
            case ramdiskId = "RamdiskId"
            case securityGroupIds = "SecurityGroupId"
            case subnetId = "SubnetId"
            case userData = "UserData"
        }
    }

    public struct ScheduledInstancesMonitoring: AWSEncodableShape {
        /// Indicates whether monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct ScheduledInstancesNetworkInterface: AWSEncodableShape {
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "SecurityGroupId" }
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "Ipv6Address" }
        public struct _PrivateIpAddressConfigsEncoding: ArrayCoderProperties { public static let member = "PrivateIpAddressConfigSet" }

        /// Indicates whether to assign a public IPv4 address to instances launched in a VPC. The public IPv4 address can only be assigned to a network interface for eth0, and can only be assigned to a new network interface, not an existing one. You cannot specify more than one network interface in the request. If launching into a default subnet, the default value is true.
        public let associatePublicIpAddress: Bool?
        /// Indicates whether to delete the interface when the instance is terminated.
        public let deleteOnTermination: Bool?
        /// The description.
        public let description: String?
        /// The index of the device for the network interface attachment.
        public let deviceIndex: Int?
        /// The IDs of the security groups.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, String>>
        public var groups: [String]?
        /// The number of IPv6 addresses to assign to the network interface. The IPv6 addresses are automatically selected from the subnet range.
        public let ipv6AddressCount: Int?
        /// The specific IPv6 addresses from the subnet range.
        @OptionalCustomCoding<ArrayCoder<_Ipv6AddressesEncoding, ScheduledInstancesIpv6Address>>
        public var ipv6Addresses: [ScheduledInstancesIpv6Address]?
        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv4 address of the network interface within the subnet.
        public let privateIpAddress: String?
        /// The private IPv4 addresses.
        @OptionalCustomCoding<ArrayCoder<_PrivateIpAddressConfigsEncoding, ScheduledInstancesPrivateIpAddressConfig>>
        public var privateIpAddressConfigs: [ScheduledInstancesPrivateIpAddressConfig]?
        /// The number of secondary private IPv4 addresses.
        public let secondaryPrivateIpAddressCount: Int?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(associatePublicIpAddress: Bool? = nil, deleteOnTermination: Bool? = nil, description: String? = nil, deviceIndex: Int? = nil, groups: [String]? = nil, ipv6AddressCount: Int? = nil, ipv6Addresses: [ScheduledInstancesIpv6Address]? = nil, networkInterfaceId: String? = nil, privateIpAddress: String? = nil, privateIpAddressConfigs: [ScheduledInstancesPrivateIpAddressConfig]? = nil, secondaryPrivateIpAddressCount: Int? = nil, subnetId: String? = nil) {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.deleteOnTermination = deleteOnTermination
            self.description = description
            self.deviceIndex = deviceIndex
            self.groups = groups
            self.ipv6AddressCount = ipv6AddressCount
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddress = privateIpAddress
            self.privateIpAddressConfigs = privateIpAddressConfigs
            self.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case deleteOnTermination = "DeleteOnTermination"
            case description = "Description"
            case deviceIndex = "DeviceIndex"
            case groups = "Group"
            case ipv6AddressCount = "Ipv6AddressCount"
            case ipv6Addresses = "Ipv6Address"
            case networkInterfaceId = "NetworkInterfaceId"
            case privateIpAddress = "PrivateIpAddress"
            case privateIpAddressConfigs = "PrivateIpAddressConfig"
            case secondaryPrivateIpAddressCount = "SecondaryPrivateIpAddressCount"
            case subnetId = "SubnetId"
        }
    }

    public struct ScheduledInstancesPlacement: AWSEncodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The name of the placement group.
        public let groupName: String?

        public init(availabilityZone: String? = nil, groupName: String? = nil) {
            self.availabilityZone = availabilityZone
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case groupName = "GroupName"
        }
    }

    public struct ScheduledInstancesPrivateIpAddressConfig: AWSEncodableShape {
        /// Indicates whether this is a primary IPv4 address. Otherwise, this is a secondary IPv4 address.
        public let primary: Bool?
        /// The IPv4 address.
        public let privateIpAddress: String?

        public init(primary: Bool? = nil, privateIpAddress: String? = nil) {
            self.primary = primary
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case primary = "Primary"
            case privateIpAddress = "PrivateIpAddress"
        }
    }

    public struct SearchLocalGatewayRoutesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters.
        @CustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]
        /// The ID of the local gateway route table.
        public let localGatewayRouteTableId: String
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?

        public init(dryRun: Bool? = nil, filters: [Filter], localGatewayRouteTableId: String, maxResults: Int? = nil, nextToken: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.localGatewayRouteTableId = localGatewayRouteTableId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case localGatewayRouteTableId = "LocalGatewayRouteTableId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct SearchLocalGatewayRoutesResult: AWSDecodableShape {
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// Information about the routes.
        @OptionalCustomCoding<ArrayCoder<_RoutesEncoding, LocalGatewayRoute>>
        public var routes: [LocalGatewayRoute]?

        public init(nextToken: String? = nil, routes: [LocalGatewayRoute]? = nil) {
            self.nextToken = nextToken
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken
            case routes = "routeSet"
        }
    }

    public struct SearchTransitGatewayMulticastGroupsRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    group-ip-address - The IP address of the transit gateway multicast group.    is-group-member - The resource is a group member. Valid values are true | false.    is-group-source - The resource is a group source. Valid values are true | false.    member-type - The member type. Valid values are igmp | static.    resource-id - The ID of the resource.    resource-type - The type of resource. Valid values are vpc | vpn | direct-connect-gateway | tgw-peering.    source-type - The source type. Valid values are igmp | static.    state - The state of the subnet association. Valid values are associated | associated | disassociated | disassociating.    subnet-id - The ID of the subnet.    transit-gateway-attachment-id - The id of the transit gateway attachment.
        @OptionalCustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]?
        /// The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned nextToken value.
        public let maxResults: Int?
        /// The token for the next page of results.
        public let nextToken: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(dryRun: Bool? = nil, filters: [Filter]? = nil, maxResults: Int? = nil, nextToken: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case transitGatewayMulticastDomainId = "TransitGatewayMulticastDomainId"
        }
    }

    public struct SearchTransitGatewayMulticastGroupsResult: AWSDecodableShape {
        public struct _MulticastGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the transit gateway multicast group.
        @OptionalCustomCoding<ArrayCoder<_MulticastGroupsEncoding, TransitGatewayMulticastGroup>>
        public var multicastGroups: [TransitGatewayMulticastGroup]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(multicastGroups: [TransitGatewayMulticastGroup]? = nil, nextToken: String? = nil) {
            self.multicastGroups = multicastGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case multicastGroups
            case nextToken
        }
    }

    public struct SearchTransitGatewayRoutesRequest: AWSEncodableShape {
        public struct _FiltersEncoding: ArrayCoderProperties { public static let member = "Filter" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// One or more filters. The possible values are:    attachment.transit-gateway-attachment-id- The id of the transit gateway attachment.    attachment.resource-id - The resource id of the transit gateway attachment.    attachment.resource-type - The attachment resource type. Valid values are vpc | vpn | direct-connect-gateway | peering | connect.    prefix-list-id - The ID of the prefix list.    route-search.exact-match - The exact match of the specified filter.    route-search.longest-prefix-match - The longest prefix that matches the route.    route-search.subnet-of-match - The routes with a subnet that match the specified CIDR filter.    route-search.supernet-of-match - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.    state - The state of the route (active | blackhole).    type - The type of route (propagated | static).
        @CustomCoding<ArrayCoder<_FiltersEncoding, Filter>>
        public var filters: [Filter]
        /// The maximum number of routes to return.
        public let maxResults: Int?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String

        public init(dryRun: Bool? = nil, filters: [Filter], maxResults: Int? = nil, transitGatewayRouteTableId: String) {
            self.dryRun = dryRun
            self.filters = filters
            self.maxResults = maxResults
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        public func validate(name: String) throws {
            try self.validate(self.maxResults, name: "maxResults", parent: name, max: 1000)
            try self.validate(self.maxResults, name: "maxResults", parent: name, min: 5)
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case filters = "Filter"
            case maxResults = "MaxResults"
            case transitGatewayRouteTableId = "TransitGatewayRouteTableId"
        }
    }

    public struct SearchTransitGatewayRoutesResult: AWSDecodableShape {
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether there are additional routes available.
        public let additionalRoutesAvailable: Bool?
        /// Information about the routes.
        @OptionalCustomCoding<ArrayCoder<_RoutesEncoding, TransitGatewayRoute>>
        public var routes: [TransitGatewayRoute]?

        public init(additionalRoutesAvailable: Bool? = nil, routes: [TransitGatewayRoute]? = nil) {
            self.additionalRoutesAvailable = additionalRoutesAvailable
            self.routes = routes
        }

        private enum CodingKeys: String, CodingKey {
            case additionalRoutesAvailable
            case routes = "routeSet"
        }
    }

    public struct SecurityGroup: AWSDecodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _IpPermissionsEgressEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A description of the security group.
        public let description: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?
        /// The inbound rules associated with the security group.
        @OptionalCustomCoding<ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// [VPC only] The outbound rules associated with the security group.
        @OptionalCustomCoding<ArrayCoder<_IpPermissionsEgressEncoding, IpPermission>>
        public var ipPermissionsEgress: [IpPermission]?
        /// The Amazon Web Services account ID of the owner of the security group.
        public let ownerId: String?
        /// Any tags assigned to the security group.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// [VPC only] The ID of the VPC for the security group.
        public let vpcId: String?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, ipPermissionsEgress: [IpPermission]? = nil, ownerId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipPermissionsEgress = ipPermissionsEgress
            self.ownerId = ownerId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "groupDescription"
            case groupId
            case groupName
            case ipPermissions
            case ipPermissionsEgress
            case ownerId
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct SecurityGroupIdentifier: AWSDecodableShape {
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupId
            case groupName
        }
    }

    public struct SecurityGroupReference: AWSDecodableShape {
        /// The ID of your security group.
        public let groupId: String?
        /// The ID of the VPC with the referencing security group.
        public let referencingVpcId: String?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(groupId: String? = nil, referencingVpcId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.groupId = groupId
            self.referencingVpcId = referencingVpcId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId
            case referencingVpcId
            case vpcPeeringConnectionId
        }
    }

    public struct SecurityGroupRule: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 CIDR range.
        public let cidrIpv4: String?
        /// The IPv6 CIDR range.
        public let cidrIpv6: String?
        /// The security group rule description.
        public let description: String?
        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let fromPort: Int?
        /// The ID of the security group.
        public let groupId: String?
        /// The ID of the account that owns the security group.
        public let groupOwnerId: String?
        /// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).  Use -1 to specify all protocols.
        public let ipProtocol: String?
        /// Indicates whether the security group rule is an outbound rule.
        public let isEgress: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// Describes the security group that is referenced in the rule.
        public let referencedGroupInfo: ReferencedSecurityGroup?
        /// The ID of the security group rule.
        public let securityGroupRuleId: String?
        /// The tags applied to the security group rule.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let toPort: Int?

        public init(cidrIpv4: String? = nil, cidrIpv6: String? = nil, description: String? = nil, fromPort: Int? = nil, groupId: String? = nil, groupOwnerId: String? = nil, ipProtocol: String? = nil, isEgress: Bool? = nil, prefixListId: String? = nil, referencedGroupInfo: ReferencedSecurityGroup? = nil, securityGroupRuleId: String? = nil, tags: [Tag]? = nil, toPort: Int? = nil) {
            self.cidrIpv4 = cidrIpv4
            self.cidrIpv6 = cidrIpv6
            self.description = description
            self.fromPort = fromPort
            self.groupId = groupId
            self.groupOwnerId = groupOwnerId
            self.ipProtocol = ipProtocol
            self.isEgress = isEgress
            self.prefixListId = prefixListId
            self.referencedGroupInfo = referencedGroupInfo
            self.securityGroupRuleId = securityGroupRuleId
            self.tags = tags
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIpv4
            case cidrIpv6
            case description
            case fromPort
            case groupId
            case groupOwnerId
            case ipProtocol
            case isEgress
            case prefixListId
            case referencedGroupInfo
            case securityGroupRuleId
            case tags = "tagSet"
            case toPort
        }
    }

    public struct SecurityGroupRuleDescription: AWSEncodableShape {
        /// The description of the security group rule.
        public let description: String?
        /// The ID of the security group rule.
        public let securityGroupRuleId: String?

        public init(description: String? = nil, securityGroupRuleId: String? = nil) {
            self.description = description
            self.securityGroupRuleId = securityGroupRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case securityGroupRuleId = "SecurityGroupRuleId"
        }
    }

    public struct SecurityGroupRuleRequest: AWSEncodableShape {
        /// The IPv4 CIDR range. To specify a single IPv4 address, use the /32 prefix length.
        public let cidrIpv4: String?
        /// The IPv6 CIDR range. To specify a single IPv6 address, use the /128 prefix length.
        public let cidrIpv6: String?
        /// The description of the security group rule.
        public let description: String?
        /// The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let fromPort: Int?
        /// The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).  Use -1 to specify all protocols.
        public let ipProtocol: String?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The ID of the security group that is referenced in the security group rule.
        public let referencedGroupId: String?
        /// The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
        public let toPort: Int?

        public init(cidrIpv4: String? = nil, cidrIpv6: String? = nil, description: String? = nil, fromPort: Int? = nil, ipProtocol: String? = nil, prefixListId: String? = nil, referencedGroupId: String? = nil, toPort: Int? = nil) {
            self.cidrIpv4 = cidrIpv4
            self.cidrIpv6 = cidrIpv6
            self.description = description
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.prefixListId = prefixListId
            self.referencedGroupId = referencedGroupId
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case cidrIpv4 = "CidrIpv4"
            case cidrIpv6 = "CidrIpv6"
            case description = "Description"
            case fromPort = "FromPort"
            case ipProtocol = "IpProtocol"
            case prefixListId = "PrefixListId"
            case referencedGroupId = "ReferencedGroupId"
            case toPort = "ToPort"
        }
    }

    public struct SecurityGroupRuleUpdate: AWSEncodableShape {
        /// Information about the security group rule.
        public let securityGroupRule: SecurityGroupRuleRequest?
        /// The ID of the security group rule.
        public let securityGroupRuleId: String?

        public init(securityGroupRule: SecurityGroupRuleRequest? = nil, securityGroupRuleId: String? = nil) {
            self.securityGroupRule = securityGroupRule
            self.securityGroupRuleId = securityGroupRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupRule = "SecurityGroupRule"
            case securityGroupRuleId = "SecurityGroupRuleId"
        }
    }

    public struct SendDiagnosticInterruptRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the instance.
        public let instanceId: String

        public init(dryRun: Bool? = nil, instanceId: String) {
            self.dryRun = dryRun
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case instanceId = "InstanceId"
        }
    }

    public struct ServiceConfiguration: AWSDecodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _BaseEndpointDnsNamesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ServiceTypeEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether requests from other AWS accounts to create an endpoint to the service must first be accepted.
        public let acceptanceRequired: Bool?
        /// The Availability Zones in which the service is available.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The DNS names for the service.
        @OptionalCustomCoding<ArrayCoder<_BaseEndpointDnsNamesEncoding, String>>
        public var baseEndpointDnsNames: [String]?
        /// The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
        @OptionalCustomCoding<ArrayCoder<_GatewayLoadBalancerArnsEncoding, String>>
        public var gatewayLoadBalancerArns: [String]?
        /// Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
        public let managesVpcEndpoints: Bool?
        /// The Amazon Resource Names (ARNs) of the Network Load Balancers for the service.
        @OptionalCustomCoding<ArrayCoder<_NetworkLoadBalancerArnsEncoding, String>>
        public var networkLoadBalancerArns: [String]?
        /// The private DNS name for the service.
        public let privateDnsName: String?
        /// Information about the endpoint service private DNS name configuration.
        public let privateDnsNameConfiguration: PrivateDnsNameConfiguration?
        /// The ID of the service.
        public let serviceId: String?
        /// The name of the service.
        public let serviceName: String?
        /// The service state.
        public let serviceState: ServiceState?
        /// The type of service.
        @OptionalCustomCoding<ArrayCoder<_ServiceTypeEncoding, ServiceTypeDetail>>
        public var serviceType: [ServiceTypeDetail]?
        /// Any tags assigned to the service.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(acceptanceRequired: Bool? = nil, availabilityZones: [String]? = nil, baseEndpointDnsNames: [String]? = nil, gatewayLoadBalancerArns: [String]? = nil, managesVpcEndpoints: Bool? = nil, networkLoadBalancerArns: [String]? = nil, privateDnsName: String? = nil, privateDnsNameConfiguration: PrivateDnsNameConfiguration? = nil, serviceId: String? = nil, serviceName: String? = nil, serviceState: ServiceState? = nil, serviceType: [ServiceTypeDetail]? = nil, tags: [Tag]? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.availabilityZones = availabilityZones
            self.baseEndpointDnsNames = baseEndpointDnsNames
            self.gatewayLoadBalancerArns = gatewayLoadBalancerArns
            self.managesVpcEndpoints = managesVpcEndpoints
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.privateDnsName = privateDnsName
            self.privateDnsNameConfiguration = privateDnsNameConfiguration
            self.serviceId = serviceId
            self.serviceName = serviceName
            self.serviceState = serviceState
            self.serviceType = serviceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired
            case availabilityZones = "availabilityZoneSet"
            case baseEndpointDnsNames = "baseEndpointDnsNameSet"
            case gatewayLoadBalancerArns = "gatewayLoadBalancerArnSet"
            case managesVpcEndpoints
            case networkLoadBalancerArns = "networkLoadBalancerArnSet"
            case privateDnsName
            case privateDnsNameConfiguration
            case serviceId
            case serviceName
            case serviceState
            case serviceType
            case tags = "tagSet"
        }
    }

    public struct ServiceDetail: AWSDecodableShape {
        public struct _AvailabilityZonesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _BaseEndpointDnsNamesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrivateDnsNamesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ServiceTypeEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether VPC endpoint connection requests to the service must be accepted by the service owner.
        public let acceptanceRequired: Bool?
        /// The Availability Zones in which the service is available.
        @OptionalCustomCoding<ArrayCoder<_AvailabilityZonesEncoding, String>>
        public var availabilityZones: [String]?
        /// The DNS names for the service.
        @OptionalCustomCoding<ArrayCoder<_BaseEndpointDnsNamesEncoding, String>>
        public var baseEndpointDnsNames: [String]?
        /// Indicates whether the service manages its VPC endpoints. Management of the service VPC endpoints using the VPC endpoint API is restricted.
        public let managesVpcEndpoints: Bool?
        /// The AWS account ID of the service owner.
        public let owner: String?
        /// The private DNS name for the service.
        public let privateDnsName: String?
        /// The private DNS names assigned to the VPC endpoint service.
        @OptionalCustomCoding<ArrayCoder<_PrivateDnsNamesEncoding, PrivateDnsDetails>>
        public var privateDnsNames: [PrivateDnsDetails]?
        /// The verification state of the VPC endpoint service. Consumers of the endpoint service cannot use the private name when the state is not verified.
        public let privateDnsNameVerificationState: DnsNameState?
        /// The ID of the endpoint service.
        public let serviceId: String?
        /// The Amazon Resource Name (ARN) of the service.
        public let serviceName: String?
        /// The type of service.
        @OptionalCustomCoding<ArrayCoder<_ServiceTypeEncoding, ServiceTypeDetail>>
        public var serviceType: [ServiceTypeDetail]?
        /// Any tags assigned to the service.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// Indicates whether the service supports endpoint policies.
        public let vpcEndpointPolicySupported: Bool?

        public init(acceptanceRequired: Bool? = nil, availabilityZones: [String]? = nil, baseEndpointDnsNames: [String]? = nil, managesVpcEndpoints: Bool? = nil, owner: String? = nil, privateDnsName: String? = nil, privateDnsNames: [PrivateDnsDetails]? = nil, privateDnsNameVerificationState: DnsNameState? = nil, serviceId: String? = nil, serviceName: String? = nil, serviceType: [ServiceTypeDetail]? = nil, tags: [Tag]? = nil, vpcEndpointPolicySupported: Bool? = nil) {
            self.acceptanceRequired = acceptanceRequired
            self.availabilityZones = availabilityZones
            self.baseEndpointDnsNames = baseEndpointDnsNames
            self.managesVpcEndpoints = managesVpcEndpoints
            self.owner = owner
            self.privateDnsName = privateDnsName
            self.privateDnsNames = privateDnsNames
            self.privateDnsNameVerificationState = privateDnsNameVerificationState
            self.serviceId = serviceId
            self.serviceName = serviceName
            self.serviceType = serviceType
            self.tags = tags
            self.vpcEndpointPolicySupported = vpcEndpointPolicySupported
        }

        private enum CodingKeys: String, CodingKey {
            case acceptanceRequired
            case availabilityZones = "availabilityZoneSet"
            case baseEndpointDnsNames = "baseEndpointDnsNameSet"
            case managesVpcEndpoints
            case owner
            case privateDnsName
            case privateDnsNames = "privateDnsNameSet"
            case privateDnsNameVerificationState
            case serviceId
            case serviceName
            case serviceType
            case tags = "tagSet"
            case vpcEndpointPolicySupported
        }
    }

    public struct ServiceTypeDetail: AWSDecodableShape {
        /// The type of service.
        public let serviceType: ServiceType?

        public init(serviceType: ServiceType? = nil) {
            self.serviceType = serviceType
        }

        private enum CodingKeys: String, CodingKey {
            case serviceType
        }
    }

    public struct SlotDateTimeRangeRequest: AWSEncodableShape {
        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: Date
        /// The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
        public let latestTime: Date

        public init(earliestTime: Date, latestTime: Date) {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }

        private enum CodingKeys: String, CodingKey {
            case earliestTime = "EarliestTime"
            case latestTime = "LatestTime"
        }
    }

    public struct SlotStartTimeRangeRequest: AWSEncodableShape {
        /// The earliest date and time, in UTC, for the Scheduled Instance to start.
        public let earliestTime: Date?
        /// The latest date and time, in UTC, for the Scheduled Instance to start.
        public let latestTime: Date?

        public init(earliestTime: Date? = nil, latestTime: Date? = nil) {
            self.earliestTime = earliestTime
            self.latestTime = latestTime
        }

        private enum CodingKeys: String, CodingKey {
            case earliestTime = "EarliestTime"
            case latestTime = "LatestTime"
        }
    }

    public struct Snapshot: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The data encryption key identifier for the snapshot. This value is a unique identifier that corresponds to the data encryption key that was used to encrypt the original volume or snapshot copy. Because data encryption keys are inherited by volumes created from snapshots, and vice versa, if snapshots share the same data encryption key identifier, then they belong to the same volume/snapshot lineage. This parameter is only returned by DescribeSnapshots.
        public let dataEncryptionKeyId: String?
        /// The description for the snapshot.
        public let description: String?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the parent volume.
        public let kmsKeyId: String?
        /// The ARN of the AWS Outpost on which the snapshot is stored. For more information, see EBS Local Snapshot on Outposts in the Amazon Elastic Compute Cloud User Guide.
        public let outpostArn: String?
        /// The AWS owner alias, from an Amazon-maintained list (amazon). This is not the user-configured AWS account alias set using the IAM console.
        public let ownerAlias: String?
        /// The AWS account ID of the EBS snapshot owner.
        public let ownerId: String?
        /// The progress of the snapshot, as a percentage.
        public let progress: String?
        /// The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
        public let snapshotId: String?
        /// The time stamp when the snapshot was initiated.
        public let startTime: Date?
        /// The snapshot state.
        public let state: SnapshotState?
        /// Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper AWS Key Management Service (AWS KMS) permissions are not obtained) this field displays error state details to help you diagnose why the error occurred. This parameter is only returned by DescribeSnapshots.
        public let stateMessage: String?
        /// Any tags assigned to the snapshot.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the volume that was used to create the snapshot. Snapshots created by the CopySnapshot action have an arbitrary volume ID that should not be used for any purpose.
        public let volumeId: String?
        /// The size of the volume, in GiB.
        public let volumeSize: Int?

        public init(dataEncryptionKeyId: String? = nil, description: String? = nil, encrypted: Bool? = nil, kmsKeyId: String? = nil, outpostArn: String? = nil, ownerAlias: String? = nil, ownerId: String? = nil, progress: String? = nil, snapshotId: String? = nil, startTime: Date? = nil, state: SnapshotState? = nil, stateMessage: String? = nil, tags: [Tag]? = nil, volumeId: String? = nil, volumeSize: Int? = nil) {
            self.dataEncryptionKeyId = dataEncryptionKeyId
            self.description = description
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.outpostArn = outpostArn
            self.ownerAlias = ownerAlias
            self.ownerId = ownerId
            self.progress = progress
            self.snapshotId = snapshotId
            self.startTime = startTime
            self.state = state
            self.stateMessage = stateMessage
            self.tags = tags
            self.volumeId = volumeId
            self.volumeSize = volumeSize
        }

        private enum CodingKeys: String, CodingKey {
            case dataEncryptionKeyId
            case description
            case encrypted
            case kmsKeyId
            case outpostArn
            case ownerAlias
            case ownerId
            case progress
            case snapshotId
            case startTime
            case state = "status"
            case stateMessage = "statusMessage"
            case tags = "tagSet"
            case volumeId
            case volumeSize
        }
    }

    public struct SnapshotDetail: AWSDecodableShape {
        /// A description for the snapshot.
        public let description: String?
        /// The block device mapping for the snapshot.
        public let deviceName: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The percentage of progress for the task.
        public let progress: String?
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// A brief status of the snapshot creation.
        public let status: String?
        /// A detailed status message for the snapshot creation.
        public let statusMessage: String?
        /// The URL used to access the disk image.
        public let url: String?
        /// The Amazon S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?

        public init(description: String? = nil, deviceName: String? = nil, diskImageSize: Double? = nil, format: String? = nil, progress: String? = nil, snapshotId: String? = nil, status: String? = nil, statusMessage: String? = nil, url: String? = nil, userBucket: UserBucketDetails? = nil) {
            self.description = description
            self.deviceName = deviceName
            self.diskImageSize = diskImageSize
            self.format = format
            self.progress = progress
            self.snapshotId = snapshotId
            self.status = status
            self.statusMessage = statusMessage
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case deviceName
            case diskImageSize
            case format
            case progress
            case snapshotId
            case status
            case statusMessage
            case url
            case userBucket
        }
    }

    public struct SnapshotDiskContainer: AWSEncodableShape {
        /// The description of the disk image being imported.
        public let description: String?
        /// The format of the disk image being imported. Valid values: VHD | VMDK | RAW
        public let format: String?
        /// The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
        public let url: String?
        /// The Amazon S3 bucket for the disk image.
        public let userBucket: UserBucket?

        public init(description: String? = nil, format: String? = nil, url: String? = nil, userBucket: UserBucket? = nil) {
            self.description = description
            self.format = format
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case format = "Format"
            case url = "Url"
            case userBucket = "UserBucket"
        }
    }

    public struct SnapshotInfo: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Description specified by the CreateSnapshotRequest that has been applied to all snapshots.
        public let description: String?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The ARN of the AWS Outpost on which the snapshot is stored. For more information, see EBS Local Snapshot on Outposts in the Amazon Elastic Compute Cloud User Guide.
        public let outpostArn: String?
        /// Account id used when creating this snapshot.
        public let ownerId: String?
        /// Progress this snapshot has made towards completing.
        public let progress: String?
        /// Snapshot id that can be used to describe this snapshot.
        public let snapshotId: String?
        /// Time this snapshot was started. This is the same for all snapshots initiated by the same request.
        public let startTime: Date?
        /// Current state of the snapshot.
        public let state: SnapshotState?
        /// Tags associated with this snapshot.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// Source volume from which this snapshot was created.
        public let volumeId: String?
        /// Size of the volume from which this snapshot was created.
        public let volumeSize: Int?

        public init(description: String? = nil, encrypted: Bool? = nil, outpostArn: String? = nil, ownerId: String? = nil, progress: String? = nil, snapshotId: String? = nil, startTime: Date? = nil, state: SnapshotState? = nil, tags: [Tag]? = nil, volumeId: String? = nil, volumeSize: Int? = nil) {
            self.description = description
            self.encrypted = encrypted
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.progress = progress
            self.snapshotId = snapshotId
            self.startTime = startTime
            self.state = state
            self.tags = tags
            self.volumeId = volumeId
            self.volumeSize = volumeSize
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case encrypted
            case outpostArn
            case ownerId
            case progress
            case snapshotId
            case startTime
            case state
            case tags = "tagSet"
            case volumeId
            case volumeSize
        }
    }

    public struct SnapshotTaskDetail: AWSDecodableShape {
        /// The description of the snapshot.
        public let description: String?
        /// The size of the disk in the snapshot, in GiB.
        public let diskImageSize: Double?
        /// Indicates whether the snapshot is encrypted.
        public let encrypted: Bool?
        /// The format of the disk image from which the snapshot is created.
        public let format: String?
        /// The identifier for the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to create the encrypted snapshot.
        public let kmsKeyId: String?
        /// The percentage of completion for the import snapshot task.
        public let progress: String?
        /// The snapshot ID of the disk being imported.
        public let snapshotId: String?
        /// A brief status for the import snapshot task.
        public let status: String?
        /// A detailed status message for the import snapshot task.
        public let statusMessage: String?
        /// The URL of the disk image from which the snapshot is created.
        public let url: String?
        /// The Amazon S3 bucket for the disk image.
        public let userBucket: UserBucketDetails?

        public init(description: String? = nil, diskImageSize: Double? = nil, encrypted: Bool? = nil, format: String? = nil, kmsKeyId: String? = nil, progress: String? = nil, snapshotId: String? = nil, status: String? = nil, statusMessage: String? = nil, url: String? = nil, userBucket: UserBucketDetails? = nil) {
            self.description = description
            self.diskImageSize = diskImageSize
            self.encrypted = encrypted
            self.format = format
            self.kmsKeyId = kmsKeyId
            self.progress = progress
            self.snapshotId = snapshotId
            self.status = status
            self.statusMessage = statusMessage
            self.url = url
            self.userBucket = userBucket
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case diskImageSize
            case encrypted
            case format
            case kmsKeyId
            case progress
            case snapshotId
            case status
            case statusMessage
            case url
            case userBucket
        }
    }

    public struct SpotCapacityRebalance: AWSEncodableShape & AWSDecodableShape {
        /// The replacement strategy to use. Only available for fleets of type maintain. You must specify a value, otherwise you get an error. To allow Spot Fleet to launch a replacement Spot Instance when an instance rebalance notification is emitted for a Spot Instance in the fleet, specify launch.  When a replacement instance is launched, the instance marked for rebalance is not automatically terminated. You can terminate it, or you can leave it running. You are charged for all instances while they are running.
        public let replacementStrategy: ReplacementStrategy?

        public init(replacementStrategy: ReplacementStrategy? = nil) {
            self.replacementStrategy = replacementStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case replacementStrategy
        }
    }

    public struct SpotDatafeedSubscription: AWSDecodableShape {
        /// The name of the Amazon S3 bucket where the Spot Instance data feed is located.
        public let bucket: String?
        /// The fault codes for the Spot Instance request, if any.
        public let fault: SpotInstanceStateFault?
        /// The account ID of the account.
        public let ownerId: String?
        /// The prefix for the data feed files.
        public let prefix: String?
        /// The state of the Spot Instance data feed subscription.
        public let state: DatafeedSubscriptionState?

        public init(bucket: String? = nil, fault: SpotInstanceStateFault? = nil, ownerId: String? = nil, prefix: String? = nil, state: DatafeedSubscriptionState? = nil) {
            self.bucket = bucket
            self.fault = fault
            self.ownerId = ownerId
            self.prefix = prefix
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case bucket
            case fault
            case ownerId
            case prefix
            case state
        }
    }

    public struct SpotFleetLaunchSpecification: AWSEncodableShape & AWSDecodableShape {
        public struct _BlockDeviceMappingsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfacesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Deprecated.
        public let addressingType: String?
        /// One or more block devices that are mapped to the Spot Instances. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
        @OptionalCustomCoding<ArrayCoder<_BlockDeviceMappingsEncoding, BlockDeviceMapping>>
        public var blockDeviceMappings: [BlockDeviceMapping]?
        /// Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance. Default: false
        public let ebsOptimized: Bool?
        /// The IAM instance profile.
        public let iamInstanceProfile: IamInstanceProfileSpecification?
        /// The ID of the AMI.
        public let imageId: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// The ID of the kernel.
        public let kernelId: String?
        /// The name of the key pair.
        public let keyName: String?
        /// Enable or disable monitoring for the instances.
        public let monitoring: SpotFleetMonitoring?
        /// One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.   SpotFleetLaunchSpecification currently does not support Elastic Fabric Adapter (EFA). To specify an EFA, you must use LaunchTemplateConfig.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfacesEncoding, InstanceNetworkInterfaceSpecification>>
        public var networkInterfaces: [InstanceNetworkInterfaceSpecification]?
        /// The placement information.
        public let placement: SpotPlacement?
        /// The ID of the RAM disk. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, refer to the Amazon Web Services Resource Center and search for the kernel ID.
        public let ramdiskId: String?
        /// One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, GroupIdentifier>>
        public var securityGroups: [GroupIdentifier]?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. If this value is not specified, the default is the Spot price specified for the fleet. To determine the Spot price per unit hour, divide the Spot price by the value of WeightedCapacity.
        public let spotPrice: String?
        /// The IDs of the subnets in which to launch the instances. To specify multiple subnets, separate them using commas; for example, "subnet-1234abcdeexample1, subnet-0987cdef6example2".
        public let subnetId: String?
        /// The tags to apply during creation.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, SpotFleetTagSpecification>>
        public var tagSpecifications: [SpotFleetTagSpecification]?
        /// The Base64-encoded user data that instances use when starting up.
        public let userData: String?
        /// The number of units provided by the specified instance type. These are the same units that you chose to set the target capacity in terms of instances, or a performance characteristic such as vCPUs, memory, or I/O. If the target capacity divided by this value is not a whole number, Amazon EC2 rounds the number of instances to the next whole number. If this value is not specified, the default is 1.
        public let weightedCapacity: Double?

        public init(addressingType: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, iamInstanceProfile: IamInstanceProfileSpecification? = nil, imageId: String? = nil, instanceType: InstanceType? = nil, kernelId: String? = nil, keyName: String? = nil, monitoring: SpotFleetMonitoring? = nil, networkInterfaces: [InstanceNetworkInterfaceSpecification]? = nil, placement: SpotPlacement? = nil, ramdiskId: String? = nil, securityGroups: [GroupIdentifier]? = nil, spotPrice: String? = nil, subnetId: String? = nil, tagSpecifications: [SpotFleetTagSpecification]? = nil, userData: String? = nil, weightedCapacity: Double? = nil) {
            self.addressingType = addressingType
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.monitoring = monitoring
            self.networkInterfaces = networkInterfaces
            self.placement = placement
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.subnetId = subnetId
            self.tagSpecifications = tagSpecifications
            self.userData = userData
            self.weightedCapacity = weightedCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case addressingType
            case blockDeviceMappings = "blockDeviceMapping"
            case ebsOptimized
            case iamInstanceProfile
            case imageId
            case instanceType
            case kernelId
            case keyName
            case monitoring
            case networkInterfaces = "networkInterfaceSet"
            case placement
            case ramdiskId
            case securityGroups = "groupSet"
            case spotPrice
            case subnetId
            case tagSpecifications = "tagSpecificationSet"
            case userData
            case weightedCapacity
        }
    }

    public struct SpotFleetMonitoring: AWSEncodableShape & AWSDecodableShape {
        /// Enables monitoring for the instance. Default: false
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled
        }
    }

    public struct SpotFleetRequestConfig: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The progress of the Spot Fleet request. If there is an error, the status is error. After all requests are placed, the status is pending_fulfillment. If the size of the fleet is equal to or greater than its target capacity, the status is fulfilled. If the size of the fleet is decreased, the status is pending_termination while Spot Instances are terminating.
        public let activityStatus: ActivityStatus?
        /// The creation date and time of the request.
        public let createTime: Date?
        /// The configuration of the Spot Fleet request.
        public let spotFleetRequestConfig: SpotFleetRequestConfigData?
        /// The ID of the Spot Fleet request.
        public let spotFleetRequestId: String?
        /// The state of the Spot Fleet request.
        public let spotFleetRequestState: BatchState?
        /// The tags for a Spot Fleet resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(activityStatus: ActivityStatus? = nil, createTime: Date? = nil, spotFleetRequestConfig: SpotFleetRequestConfigData? = nil, spotFleetRequestId: String? = nil, spotFleetRequestState: BatchState? = nil, tags: [Tag]? = nil) {
            self.activityStatus = activityStatus
            self.createTime = createTime
            self.spotFleetRequestConfig = spotFleetRequestConfig
            self.spotFleetRequestId = spotFleetRequestId
            self.spotFleetRequestState = spotFleetRequestState
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case activityStatus
            case createTime
            case spotFleetRequestConfig
            case spotFleetRequestId
            case spotFleetRequestState
            case tags = "tagSet"
        }
    }

    public struct SpotFleetRequestConfigData: AWSEncodableShape & AWSDecodableShape {
        public struct _LaunchSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _LaunchTemplateConfigsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet request. If the allocation strategy is lowestPrice, Spot Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is diversified, Spot Fleet launches instances from all the Spot Instance pools that you specify. If the allocation strategy is capacityOptimized (recommended), Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. To give certain instance types a higher chance of launching first, use capacityOptimizedPrioritized. Set a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides. You can assign the same priority to different LaunchTemplateOverrides. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. capacityOptimizedPrioritized is supported only if your Spot Fleet uses a launch template. Note that if the OnDemandAllocationStrategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity.
        public let allocationStrategy: AllocationStrategy?
        /// A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see Ensuring Idempotency.
        public let clientToken: String?
        /// Reserved.
        public let context: String?
        /// Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.
        public let excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy?
        /// The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
        public let fulfilledCapacity: Double?
        /// The Amazon Resource Name (ARN) of an Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see Spot Fleet prerequisites in the Amazon EC2 User Guide for Linux Instances. Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using CancelSpotFleetRequests or when the Spot Fleet request expires, if you set TerminateInstancesWithExpiration.
        public let iamFleetRole: String
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify. Note that Spot Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, Spot Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
        public let instancePoolsToUseCount: Int?
        /// The launch specifications for the Spot Fleet request. If you specify LaunchSpecifications, you can't specify LaunchTemplateConfigs. If you include On-Demand capacity in your request, you must use LaunchTemplateConfigs.
        @OptionalCustomCoding<ArrayCoder<_LaunchSpecificationsEncoding, SpotFleetLaunchSpecification>>
        public var launchSpecifications: [SpotFleetLaunchSpecification]?
        /// The launch template and overrides. If you specify LaunchTemplateConfigs, you can't specify LaunchSpecifications. If you include On-Demand capacity in your request, you must use LaunchTemplateConfigs.
        @OptionalCustomCoding<ArrayCoder<_LaunchTemplateConfigsEncoding, LaunchTemplateConfig>>
        public var launchTemplateConfigs: [LaunchTemplateConfig]?
        /// One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups. With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.
        public let loadBalancersConfig: LoadBalancersConfig?
        /// The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify lowestPrice, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify prioritized, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to lowestPrice.
        public let onDemandAllocationStrategy: OnDemandAllocationStrategy?
        /// The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
        public let onDemandFulfilledCapacity: Double?
        /// The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the onDemandMaxTotalPrice parameter, the spotMaxTotalPrice parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
        public let onDemandMaxTotalPrice: String?
        /// The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let onDemandTargetCapacity: Int?
        /// Indicates whether Spot Fleet should replace unhealthy instances.
        public let replaceUnhealthyInstances: Bool?
        /// The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
        public let spotMaintenanceStrategies: SpotMaintenanceStrategies?
        /// The maximum amount per hour for Spot Instances that you're willing to pay. You can use the spotdMaxTotalPrice parameter, the onDemandMaxTotalPrice parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
        public let spotMaxTotalPrice: String?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
        public let spotPrice: String?
        /// The key-value pair for tagging the Spot Fleet request on creation. The value for ResourceType must be spot-fleet-request, otherwise the Spot Fleet request fails. To tag instances at launch, specify the tags in the launch template (valid only if you use LaunchTemplateConfigs) or in the  SpotFleetTagSpecification  (valid only if you use LaunchSpecifications). For information about tagging after launch, see Tagging Your Resources.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?
        /// The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is maintain, you can specify a target capacity of 0 and add capacity later.
        public let targetCapacity: Int
        /// Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.
        public let terminateInstancesWithExpiration: Bool?
        /// The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is request, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is maintain, the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: maintain. instant is listed but is not used by Spot Fleet.
        public let type: FleetType?
        /// The start date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). By default, Amazon EC2 starts fulfilling the request immediately.
        public let validFrom: Date?
        /// The end date and time of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.
        public let validUntil: Date?

        public init(allocationStrategy: AllocationStrategy? = nil, clientToken: String? = nil, context: String? = nil, excessCapacityTerminationPolicy: ExcessCapacityTerminationPolicy? = nil, fulfilledCapacity: Double? = nil, iamFleetRole: String, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, instancePoolsToUseCount: Int? = nil, launchSpecifications: [SpotFleetLaunchSpecification]? = nil, launchTemplateConfigs: [LaunchTemplateConfig]? = nil, loadBalancersConfig: LoadBalancersConfig? = nil, onDemandAllocationStrategy: OnDemandAllocationStrategy? = nil, onDemandFulfilledCapacity: Double? = nil, onDemandMaxTotalPrice: String? = nil, onDemandTargetCapacity: Int? = nil, replaceUnhealthyInstances: Bool? = nil, spotMaintenanceStrategies: SpotMaintenanceStrategies? = nil, spotMaxTotalPrice: String? = nil, spotPrice: String? = nil, tagSpecifications: [TagSpecification]? = nil, targetCapacity: Int, terminateInstancesWithExpiration: Bool? = nil, type: FleetType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.allocationStrategy = allocationStrategy
            self.clientToken = clientToken
            self.context = context
            self.excessCapacityTerminationPolicy = excessCapacityTerminationPolicy
            self.fulfilledCapacity = fulfilledCapacity
            self.iamFleetRole = iamFleetRole
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.launchSpecifications = launchSpecifications
            self.launchTemplateConfigs = launchTemplateConfigs
            self.loadBalancersConfig = loadBalancersConfig
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandFulfilledCapacity = onDemandFulfilledCapacity
            self.onDemandMaxTotalPrice = onDemandMaxTotalPrice
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.replaceUnhealthyInstances = replaceUnhealthyInstances
            self.spotMaintenanceStrategies = spotMaintenanceStrategies
            self.spotMaxTotalPrice = spotMaxTotalPrice
            self.spotPrice = spotPrice
            self.tagSpecifications = tagSpecifications
            self.targetCapacity = targetCapacity
            self.terminateInstancesWithExpiration = terminateInstancesWithExpiration
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        public func validate(name: String) throws {
            try self.launchTemplateConfigs?.forEach {
                try $0.validate(name: "\(name).launchTemplateConfigs[]")
            }
            try self.loadBalancersConfig?.validate(name: "\(name).loadBalancersConfig")
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy
            case clientToken
            case context
            case excessCapacityTerminationPolicy
            case fulfilledCapacity
            case iamFleetRole
            case instanceInterruptionBehavior
            case instancePoolsToUseCount
            case launchSpecifications
            case launchTemplateConfigs
            case loadBalancersConfig
            case onDemandAllocationStrategy
            case onDemandFulfilledCapacity
            case onDemandMaxTotalPrice
            case onDemandTargetCapacity
            case replaceUnhealthyInstances
            case spotMaintenanceStrategies
            case spotMaxTotalPrice
            case spotPrice
            case tagSpecifications = "TagSpecification"
            case targetCapacity
            case terminateInstancesWithExpiration
            case type
            case validFrom
            case validUntil
        }
    }

    public struct SpotFleetTagSpecification: AWSEncodableShape & AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The type of resource. Currently, the only resource type that is supported is instance. To tag the Spot Fleet request on creation, use the TagSpecifications parameter in  SpotFleetRequestConfigData .
        public let resourceType: ResourceType?
        /// The tags.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType
            case tags = "tag"
        }
    }

    public struct SpotInstanceRequest: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Deprecated.
        public let actualBlockHourlyPrice: String?
        /// The Availability Zone group. If you specify the same Availability Zone group for all Spot Instance requests, all Spot Instances are launched in the same Availability Zone.
        public let availabilityZoneGroup: String?
        /// Deprecated.
        public let blockDurationMinutes: Int?
        /// The date and time when the Spot Instance request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let createTime: Date?
        /// The fault codes for the Spot Instance request, if any.
        public let fault: SpotInstanceStateFault?
        /// The instance ID, if an instance has been launched to fulfill the Spot Instance request.
        public let instanceId: String?
        /// The behavior when a Spot Instance is interrupted.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The Availability Zone in which the request is launched.
        public let launchedAvailabilityZone: String?
        /// The instance launch group. Launch groups are Spot Instances that launch together and terminate together.
        public let launchGroup: String?
        /// Additional information for launching instances.
        public let launchSpecification: LaunchSpecification?
        /// The product description associated with the Spot Instance.
        public let productDescription: RIProductDescription?
        /// The ID of the Spot Instance request.
        public let spotInstanceRequestId: String?
        /// The maximum price per hour that you are willing to pay for a Spot Instance.
        public let spotPrice: String?
        /// The state of the Spot Instance request. Spot status information helps track your Spot Instance requests. For more information, see Spot status in the Amazon EC2 User Guide for Linux Instances.
        public let state: SpotInstanceState?
        /// The status code and status message describing the Spot Instance request.
        public let status: SpotInstanceStatus?
        /// Any tags assigned to the resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The Spot Instance request type.
        public let type: SpotInstanceType?
        /// The start date of the request, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ). The request becomes active at this date and time.
        public let validFrom: Date?
        /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ).   For a persistent request, the request remains active until the validUntil date and time is reached. Otherwise, the request remains active until you cancel it.    For a one-time request, the request remains active until all instances launch, the request is canceled, or the validUntil date and time is reached. By default, the request is valid for 7 days from the date the request was created.
        public let validUntil: Date?

        public init(actualBlockHourlyPrice: String? = nil, availabilityZoneGroup: String? = nil, blockDurationMinutes: Int? = nil, createTime: Date? = nil, fault: SpotInstanceStateFault? = nil, instanceId: String? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, launchedAvailabilityZone: String? = nil, launchGroup: String? = nil, launchSpecification: LaunchSpecification? = nil, productDescription: RIProductDescription? = nil, spotInstanceRequestId: String? = nil, spotPrice: String? = nil, state: SpotInstanceState? = nil, status: SpotInstanceStatus? = nil, tags: [Tag]? = nil, type: SpotInstanceType? = nil, validFrom: Date? = nil, validUntil: Date? = nil) {
            self.actualBlockHourlyPrice = actualBlockHourlyPrice
            self.availabilityZoneGroup = availabilityZoneGroup
            self.blockDurationMinutes = blockDurationMinutes
            self.createTime = createTime
            self.fault = fault
            self.instanceId = instanceId
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.launchedAvailabilityZone = launchedAvailabilityZone
            self.launchGroup = launchGroup
            self.launchSpecification = launchSpecification
            self.productDescription = productDescription
            self.spotInstanceRequestId = spotInstanceRequestId
            self.spotPrice = spotPrice
            self.state = state
            self.status = status
            self.tags = tags
            self.type = type
            self.validFrom = validFrom
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case actualBlockHourlyPrice
            case availabilityZoneGroup
            case blockDurationMinutes
            case createTime
            case fault
            case instanceId
            case instanceInterruptionBehavior
            case launchedAvailabilityZone
            case launchGroup
            case launchSpecification
            case productDescription
            case spotInstanceRequestId
            case spotPrice
            case state
            case status
            case tags = "tagSet"
            case type
            case validFrom
            case validUntil
        }
    }

    public struct SpotInstanceStateFault: AWSDecodableShape {
        /// The reason code for the Spot Instance state change.
        public let code: String?
        /// The message for the Spot Instance state change.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct SpotInstanceStatus: AWSDecodableShape {
        /// The status code. For a list of status codes, see Spot status codes in the Amazon EC2 User Guide for Linux Instances.
        public let code: String?
        /// The description for the status code.
        public let message: String?
        /// The date and time of the most recent status update, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let updateTime: Date?

        public init(code: String? = nil, message: String? = nil, updateTime: Date? = nil) {
            self.code = code
            self.message = message
            self.updateTime = updateTime
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
            case updateTime
        }
    }

    public struct SpotMaintenanceStrategies: AWSEncodableShape & AWSDecodableShape {
        /// The strategy to use when Amazon EC2 emits a signal that your Spot Instance is at an elevated risk of being interrupted.
        public let capacityRebalance: SpotCapacityRebalance?

        public init(capacityRebalance: SpotCapacityRebalance? = nil) {
            self.capacityRebalance = capacityRebalance
        }

        private enum CodingKeys: String, CodingKey {
            case capacityRebalance
        }
    }

    public struct SpotMarketOptions: AWSEncodableShape {
        /// Deprecated.
        public let blockDurationMinutes: Int?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: InstanceInterruptionBehavior?
        /// The maximum hourly price you're willing to pay for the Spot Instances. The default is the On-Demand price.
        public let maxPrice: String?
        /// The Spot Instance request type. For RunInstances, persistent Spot Instance requests are only supported when the instance interruption behavior is either hibernate or stop.
        public let spotInstanceType: SpotInstanceType?
        /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.   For a persistent request, the request remains active until the ValidUntil date and time is reached. Otherwise, the request remains active until you cancel it.   For a one-time request, ValidUntil is not supported. The request remains active until all instances launch or you cancel the request.
        public let validUntil: Date?

        public init(blockDurationMinutes: Int? = nil, instanceInterruptionBehavior: InstanceInterruptionBehavior? = nil, maxPrice: String? = nil, spotInstanceType: SpotInstanceType? = nil, validUntil: Date? = nil) {
            self.blockDurationMinutes = blockDurationMinutes
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.maxPrice = maxPrice
            self.spotInstanceType = spotInstanceType
            self.validUntil = validUntil
        }

        private enum CodingKeys: String, CodingKey {
            case blockDurationMinutes = "BlockDurationMinutes"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case maxPrice = "MaxPrice"
            case spotInstanceType = "SpotInstanceType"
            case validUntil = "ValidUntil"
        }
    }

    public struct SpotOptions: AWSDecodableShape {
        /// Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet. If the allocation strategy is lowest-price, EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is diversified, EC2 Fleet launches instances from all of the Spot Instance pools that you specify. If the allocation strategy is capacity-optimized (recommended), EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. To give certain instance types a higher chance of launching first, use capacity-optimized-prioritized. Set a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides. You can assign the same priority to different LaunchTemplateOverrides. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. capacity-optimized-prioritized is supported only if your fleet uses a launch template. Note that if the On-Demand AllocationStrategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity.
        public let allocationStrategy: SpotAllocationStrategy?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: SpotInstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when AllocationStrategy is set to lowest-price. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify. Note that EC2 Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, EC2 Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
        public let instancePoolsToUseCount: Int?
        /// The strategies for managing your workloads on your Spot Instances that will be interrupted. Currently only the capacity rebalance strategy is available.
        public let maintenanceStrategies: FleetSpotMaintenanceStrategies?
        /// The maximum amount per hour for Spot Instances that you're willing to pay.
        public let maxTotalPrice: String?
        /// The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: SpotAllocationStrategy? = nil, instanceInterruptionBehavior: SpotInstanceInterruptionBehavior? = nil, instancePoolsToUseCount: Int? = nil, maintenanceStrategies: FleetSpotMaintenanceStrategies? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.maintenanceStrategies = maintenanceStrategies
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy
            case instanceInterruptionBehavior
            case instancePoolsToUseCount
            case maintenanceStrategies
            case maxTotalPrice
            case minTargetCapacity
            case singleAvailabilityZone
            case singleInstanceType
        }
    }

    public struct SpotOptionsRequest: AWSEncodableShape {
        /// Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet. If the allocation strategy is lowest-price, EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy. If the allocation strategy is diversified, EC2 Fleet launches instances from all of the Spot Instance pools that you specify. If the allocation strategy is capacity-optimized (recommended), EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. To give certain instance types a higher chance of launching first, use capacity-optimized-prioritized. Set a priority for each instance type by using the Priority parameter for LaunchTemplateOverrides. You can assign the same priority to different LaunchTemplateOverrides. EC2 implements the priorities on a best-effort basis, but optimizes for capacity first. capacity-optimized-prioritized is supported only if your fleet uses a launch template. Note that if the On-Demand AllocationStrategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity.
        public let allocationStrategy: SpotAllocationStrategy?
        /// The behavior when a Spot Instance is interrupted. The default is terminate.
        public let instanceInterruptionBehavior: SpotInstanceInterruptionBehavior?
        /// The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot AllocationStrategy is set to lowest-price. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify. Note that EC2 Fleet attempts to draw Spot Instances from the number of pools that you specify on a best effort basis. If a pool runs out of Spot capacity before fulfilling your target capacity, EC2 Fleet will continue to fulfill your request by drawing from the next cheapest pool. To ensure that your target capacity is met, you might receive Spot Instances from more than the number of pools that you specified. Similarly, if most of the pools have no Spot capacity, you might receive your full target capacity from fewer than the number of pools that you specified.
        public let instancePoolsToUseCount: Int?
        /// The strategies for managing your Spot Instances that are at an elevated risk of being interrupted.
        public let maintenanceStrategies: FleetSpotMaintenanceStrategiesRequest?
        /// The maximum amount per hour for Spot Instances that you're willing to pay.
        public let maxTotalPrice: String?
        /// The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
        public let minTargetCapacity: Int?
        /// Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type instant.
        public let singleAvailabilityZone: Bool?
        /// Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type instant.
        public let singleInstanceType: Bool?

        public init(allocationStrategy: SpotAllocationStrategy? = nil, instanceInterruptionBehavior: SpotInstanceInterruptionBehavior? = nil, instancePoolsToUseCount: Int? = nil, maintenanceStrategies: FleetSpotMaintenanceStrategiesRequest? = nil, maxTotalPrice: String? = nil, minTargetCapacity: Int? = nil, singleAvailabilityZone: Bool? = nil, singleInstanceType: Bool? = nil) {
            self.allocationStrategy = allocationStrategy
            self.instanceInterruptionBehavior = instanceInterruptionBehavior
            self.instancePoolsToUseCount = instancePoolsToUseCount
            self.maintenanceStrategies = maintenanceStrategies
            self.maxTotalPrice = maxTotalPrice
            self.minTargetCapacity = minTargetCapacity
            self.singleAvailabilityZone = singleAvailabilityZone
            self.singleInstanceType = singleInstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case allocationStrategy = "AllocationStrategy"
            case instanceInterruptionBehavior = "InstanceInterruptionBehavior"
            case instancePoolsToUseCount = "InstancePoolsToUseCount"
            case maintenanceStrategies = "MaintenanceStrategies"
            case maxTotalPrice = "MaxTotalPrice"
            case minTargetCapacity = "MinTargetCapacity"
            case singleAvailabilityZone = "SingleAvailabilityZone"
            case singleInstanceType = "SingleInstanceType"
        }
    }

    public struct SpotPlacement: AWSEncodableShape & AWSDecodableShape {
        /// The Availability Zone. [Spot Fleet only] To specify multiple Availability Zones, separate them using commas; for example, "us-west-2a, us-west-2b".
        public let availabilityZone: String?
        /// The name of the placement group.
        public let groupName: String?
        /// The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for Spot Instances.
        public let tenancy: Tenancy?

        public init(availabilityZone: String? = nil, groupName: String? = nil, tenancy: Tenancy? = nil) {
            self.availabilityZone = availabilityZone
            self.groupName = groupName
            self.tenancy = tenancy
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case groupName
            case tenancy
        }
    }

    public struct SpotPrice: AWSDecodableShape {
        /// The Availability Zone.
        public let availabilityZone: String?
        /// The instance type.
        public let instanceType: InstanceType?
        /// A general description of the AMI.
        public let productDescription: RIProductDescription?
        /// The maximum price per hour that you are willing to pay for a Spot Instance.
        public let spotPrice: String?
        /// The date and time the request was created, in UTC format (for example, YYYY-MM-DDTHH:MM:SSZ).
        public let timestamp: Date?

        public init(availabilityZone: String? = nil, instanceType: InstanceType? = nil, productDescription: RIProductDescription? = nil, spotPrice: String? = nil, timestamp: Date? = nil) {
            self.availabilityZone = availabilityZone
            self.instanceType = instanceType
            self.productDescription = productDescription
            self.spotPrice = spotPrice
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone
            case instanceType
            case productDescription
            case spotPrice
            case timestamp
        }
    }

    public struct StaleIpPermission: AWSDecodableShape {
        public struct _IpRangesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _PrefixListIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _UserIdGroupPairsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The start of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types.
        public let fromPort: Int?
        /// The IP protocol name (for tcp, udp, and icmp) or number (see Protocol Numbers).
        public let ipProtocol: String?
        /// The IP ranges. Not applicable for stale security group rules.
        @OptionalCustomCoding<ArrayCoder<_IpRangesEncoding, String>>
        public var ipRanges: [String]?
        /// The prefix list IDs. Not applicable for stale security group rules.
        @OptionalCustomCoding<ArrayCoder<_PrefixListIdsEncoding, String>>
        public var prefixListIds: [String]?
        /// The end of the port range for the TCP and UDP protocols, or an ICMP type number. A value of -1 indicates all ICMP types.
        public let toPort: Int?
        /// The security group pairs. Returns the ID of the referenced security group and VPC, and the ID and status of the VPC peering connection.
        @OptionalCustomCoding<ArrayCoder<_UserIdGroupPairsEncoding, UserIdGroupPair>>
        public var userIdGroupPairs: [UserIdGroupPair]?

        public init(fromPort: Int? = nil, ipProtocol: String? = nil, ipRanges: [String]? = nil, prefixListIds: [String]? = nil, toPort: Int? = nil, userIdGroupPairs: [UserIdGroupPair]? = nil) {
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.ipRanges = ipRanges
            self.prefixListIds = prefixListIds
            self.toPort = toPort
            self.userIdGroupPairs = userIdGroupPairs
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort
            case ipProtocol
            case ipRanges
            case prefixListIds
            case toPort
            case userIdGroupPairs = "groups"
        }
    }

    public struct StaleSecurityGroup: AWSDecodableShape {
        public struct _StaleIpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _StaleIpPermissionsEgressEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description of the security group.
        public let description: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group.
        public let groupName: String?
        /// Information about the stale inbound rules in the security group.
        @OptionalCustomCoding<ArrayCoder<_StaleIpPermissionsEncoding, StaleIpPermission>>
        public var staleIpPermissions: [StaleIpPermission]?
        /// Information about the stale outbound rules in the security group.
        @OptionalCustomCoding<ArrayCoder<_StaleIpPermissionsEgressEncoding, StaleIpPermission>>
        public var staleIpPermissionsEgress: [StaleIpPermission]?
        /// The ID of the VPC for the security group.
        public let vpcId: String?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, staleIpPermissions: [StaleIpPermission]? = nil, staleIpPermissionsEgress: [StaleIpPermission]? = nil, vpcId: String? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.staleIpPermissions = staleIpPermissions
            self.staleIpPermissionsEgress = staleIpPermissionsEgress
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case groupId
            case groupName
            case staleIpPermissions
            case staleIpPermissionsEgress
            case vpcId
        }
    }

    public struct StartInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Reserved.
        public let additionalInfo: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances.
        @CustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]

        public init(additionalInfo: String? = nil, dryRun: Bool? = nil, instanceIds: [String]) {
            self.additionalInfo = additionalInfo
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case additionalInfo
            case dryRun
            case instanceIds = "InstanceId"
        }
    }

    public struct StartInstancesResult: AWSDecodableShape {
        public struct _StartingInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the started instances.
        @OptionalCustomCoding<ArrayCoder<_StartingInstancesEncoding, InstanceStateChange>>
        public var startingInstances: [InstanceStateChange]?

        public init(startingInstances: [InstanceStateChange]? = nil) {
            self.startingInstances = startingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case startingInstances = "instancesSet"
        }
    }

    public struct StartNetworkInsightsAnalysisRequest: AWSEncodableShape {
        public struct _FilterInArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagSpecificationsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see How to Ensure Idempotency.
        public let clientToken: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The Amazon Resource Names (ARN) of the resources that the path must traverse.
        @OptionalCustomCoding<ArrayCoder<_FilterInArnsEncoding, String>>
        public var filterInArns: [String]?
        /// The ID of the path.
        public let networkInsightsPathId: String
        /// The tags to apply.
        @OptionalCustomCoding<ArrayCoder<_TagSpecificationsEncoding, TagSpecification>>
        public var tagSpecifications: [TagSpecification]?

        public init(clientToken: String = StartNetworkInsightsAnalysisRequest.idempotencyToken(), dryRun: Bool? = nil, filterInArns: [String]? = nil, networkInsightsPathId: String, tagSpecifications: [TagSpecification]? = nil) {
            self.clientToken = clientToken
            self.dryRun = dryRun
            self.filterInArns = filterInArns
            self.networkInsightsPathId = networkInsightsPathId
            self.tagSpecifications = tagSpecifications
        }

        public func validate(name: String) throws {
            try self.filterInArns?.forEach {
                try validate($0, name: "filterInArns[]", parent: name, max: 1283)
                try validate($0, name: "filterInArns[]", parent: name, min: 1)
            }
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "ClientToken"
            case dryRun = "DryRun"
            case filterInArns = "FilterInArn"
            case networkInsightsPathId = "NetworkInsightsPathId"
            case tagSpecifications = "TagSpecification"
        }
    }

    public struct StartNetworkInsightsAnalysisResult: AWSDecodableShape {
        /// Information about the network insights analysis.
        public let networkInsightsAnalysis: NetworkInsightsAnalysis?

        public init(networkInsightsAnalysis: NetworkInsightsAnalysis? = nil) {
            self.networkInsightsAnalysis = networkInsightsAnalysis
        }

        private enum CodingKeys: String, CodingKey {
            case networkInsightsAnalysis
        }
    }

    public struct StartVpcEndpointServicePrivateDnsVerificationRequest: AWSEncodableShape {
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the endpoint service.
        public let serviceId: String

        public init(dryRun: Bool? = nil, serviceId: String) {
            self.dryRun = dryRun
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case serviceId = "ServiceId"
        }
    }

    public struct StartVpcEndpointServicePrivateDnsVerificationResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, it returns an error.
        public let returnValue: Bool?

        public init(returnValue: Bool? = nil) {
            self.returnValue = returnValue
        }

        private enum CodingKeys: String, CodingKey {
            case returnValue = "return"
        }
    }

    public struct StateReason: AWSDecodableShape {
        /// The reason code for the state change.
        public let code: String?
        /// The message for the state change.    Server.InsufficientInstanceCapacity: There was insufficient capacity available to satisfy the launch request.    Server.InternalError: An internal error caused the instance to terminate during launch.    Server.ScheduledStop: The instance was stopped due to a scheduled retirement.    Server.SpotInstanceShutdown: The instance was stopped because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Server.SpotInstanceTermination: The instance was terminated because the number of Spot requests with a maximum price equal to or higher than the Spot price exceeded available capacity or because of an increase in the Spot price.    Client.InstanceInitiatedShutdown: The instance was shut down using the shutdown -h command from the instance.    Client.InstanceTerminated: The instance was terminated or rebooted during AMI creation.    Client.InternalError: A client error caused the instance to terminate during launch.    Client.InvalidSnapshot.NotFound: The specified snapshot was not found.    Client.UserInitiatedHibernate: Hibernation was initiated on the instance.    Client.UserInitiatedShutdown: The instance was shut down using the Amazon EC2 API.    Client.VolumeLimitExceeded: The limit on the number of EBS volumes or total storage was exceeded. Decrease usage or request an increase in your account limits.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct StopInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances. Default: false
        public let force: Bool?
        /// Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see Hibernate your instance in the Amazon EC2 User Guide.  Default: false
        public let hibernate: Bool?
        /// The IDs of the instances.
        @CustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]

        public init(dryRun: Bool? = nil, force: Bool? = nil, hibernate: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.force = force
            self.hibernate = hibernate
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case force
            case hibernate = "Hibernate"
            case instanceIds = "InstanceId"
        }
    }

    public struct StopInstancesResult: AWSDecodableShape {
        public struct _StoppingInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the stopped instances.
        @OptionalCustomCoding<ArrayCoder<_StoppingInstancesEncoding, InstanceStateChange>>
        public var stoppingInstances: [InstanceStateChange]?

        public init(stoppingInstances: [InstanceStateChange]? = nil) {
            self.stoppingInstances = stoppingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case stoppingInstances = "instancesSet"
        }
    }

    public struct Storage: AWSEncodableShape & AWSDecodableShape {
        /// An Amazon S3 storage location.
        public let s3: S3Storage?

        public init(s3: S3Storage? = nil) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "S3"
        }
    }

    public struct StorageLocation: AWSEncodableShape {
        /// The name of the S3 bucket.
        public let bucket: String?
        /// The key.
        public let key: String?

        public init(bucket: String? = nil, key: String? = nil) {
            self.bucket = bucket
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case key = "Key"
        }
    }

    public struct StoreImageTaskResult: AWSDecodableShape {
        /// The ID of the AMI that is being stored.
        public let amiId: String?
        /// The name of the S3 bucket that contains the stored AMI object.
        public let bucket: String?
        /// The progress of the task as a percentage.
        public let progressPercentage: Int?
        /// The name of the stored AMI object in the bucket.
        public let s3objectKey: String?
        /// If the tasks fails, the reason for the failure is returned. If the task succeeds, null is returned.
        public let storeTaskFailureReason: String?
        /// The state of the store task (InProgress, Completed, or Failed).
        public let storeTaskState: String?
        /// The time the task started.
        public let taskStartTime: Date?

        public init(amiId: String? = nil, bucket: String? = nil, progressPercentage: Int? = nil, s3objectKey: String? = nil, storeTaskFailureReason: String? = nil, storeTaskState: String? = nil, taskStartTime: Date? = nil) {
            self.amiId = amiId
            self.bucket = bucket
            self.progressPercentage = progressPercentage
            self.s3objectKey = s3objectKey
            self.storeTaskFailureReason = storeTaskFailureReason
            self.storeTaskState = storeTaskState
            self.taskStartTime = taskStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case amiId
            case bucket
            case progressPercentage
            case s3objectKey
            case storeTaskFailureReason
            case storeTaskState
            case taskStartTime
        }
    }

    public struct Subnet: AWSDecodableShape {
        public struct _Ipv6CidrBlockAssociationSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives an IPv6 address.
        public let assignIpv6AddressOnCreation: Bool?
        /// The Availability Zone of the subnet.
        public let availabilityZone: String?
        /// The AZ ID of the subnet.
        public let availabilityZoneId: String?
        /// The number of unused private IPv4 addresses in the subnet. The IPv4 addresses for any stopped instances are considered unavailable.
        public let availableIpAddressCount: Int?
        /// The IPv4 CIDR block assigned to the subnet.
        public let cidrBlock: String?
        /// The customer-owned IPv4 address pool associated with the subnet.
        public let customerOwnedIpv4Pool: String?
        /// Indicates whether this is the default subnet for the Availability Zone.
        public let defaultForAz: Bool?
        /// Information about the IPv6 CIDR blocks associated with the subnet.
        @OptionalCustomCoding<ArrayCoder<_Ipv6CidrBlockAssociationSetEncoding, SubnetIpv6CidrBlockAssociation>>
        public var ipv6CidrBlockAssociationSet: [SubnetIpv6CidrBlockAssociation]?
        /// Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives a customer-owned IPv4 address.
        public let mapCustomerOwnedIpOnLaunch: Bool?
        /// Indicates whether instances launched in this subnet receive a public IPv4 address.
        public let mapPublicIpOnLaunch: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The ID of the AWS account that owns the subnet.
        public let ownerId: String?
        /// The current state of the subnet.
        public let state: SubnetState?
        /// The Amazon Resource Name (ARN) of the subnet.
        public let subnetArn: String?
        /// The ID of the subnet.
        public let subnetId: String?
        /// Any tags assigned to the subnet.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC the subnet is in.
        public let vpcId: String?

        public init(assignIpv6AddressOnCreation: Bool? = nil, availabilityZone: String? = nil, availabilityZoneId: String? = nil, availableIpAddressCount: Int? = nil, cidrBlock: String? = nil, customerOwnedIpv4Pool: String? = nil, defaultForAz: Bool? = nil, ipv6CidrBlockAssociationSet: [SubnetIpv6CidrBlockAssociation]? = nil, mapCustomerOwnedIpOnLaunch: Bool? = nil, mapPublicIpOnLaunch: Bool? = nil, outpostArn: String? = nil, ownerId: String? = nil, state: SubnetState? = nil, subnetArn: String? = nil, subnetId: String? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableIpAddressCount = availableIpAddressCount
            self.cidrBlock = cidrBlock
            self.customerOwnedIpv4Pool = customerOwnedIpv4Pool
            self.defaultForAz = defaultForAz
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.mapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.outpostArn = outpostArn
            self.ownerId = ownerId
            self.state = state
            self.subnetArn = subnetArn
            self.subnetId = subnetId
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case assignIpv6AddressOnCreation
            case availabilityZone
            case availabilityZoneId
            case availableIpAddressCount
            case cidrBlock
            case customerOwnedIpv4Pool
            case defaultForAz
            case ipv6CidrBlockAssociationSet
            case mapCustomerOwnedIpOnLaunch
            case mapPublicIpOnLaunch
            case outpostArn
            case ownerId
            case state
            case subnetArn
            case subnetId
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct SubnetAssociation: AWSDecodableShape {
        /// The state of the subnet association.
        public let state: TransitGatewayMulitcastDomainAssociationState?
        /// The ID of the subnet.
        public let subnetId: String?

        public init(state: TransitGatewayMulitcastDomainAssociationState? = nil, subnetId: String? = nil) {
            self.state = state
            self.subnetId = subnetId
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case subnetId
        }
    }

    public struct SubnetCidrBlockState: AWSDecodableShape {
        /// The state of a CIDR block.
        public let state: SubnetCidrBlockStateCode?
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?

        public init(state: SubnetCidrBlockStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case statusMessage
        }
    }

    public struct SubnetIpv6CidrBlockAssociation: AWSDecodableShape {
        /// The association ID for the CIDR block.
        public let associationId: String?
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// Information about the state of the CIDR block.
        public let ipv6CidrBlockState: SubnetCidrBlockState?

        public init(associationId: String? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockState: SubnetCidrBlockState? = nil) {
            self.associationId = associationId
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockState = ipv6CidrBlockState
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case ipv6CidrBlock
            case ipv6CidrBlockState
        }
    }

    public struct SuccessfulInstanceCreditSpecificationItem: AWSDecodableShape {
        /// The ID of the instance.
        public let instanceId: String?

        public init(instanceId: String? = nil) {
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId
        }
    }

    public struct SuccessfulQueuedPurchaseDeletion: AWSDecodableShape {
        /// The ID of the Reserved Instance.
        public let reservedInstancesId: String?

        public init(reservedInstancesId: String? = nil) {
            self.reservedInstancesId = reservedInstancesId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedInstancesId
        }
    }

    public struct Tag: AWSEncodableShape & AWSDecodableShape {
        /// The key of the tag. Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with aws:.
        public let key: String?
        /// The value of the tag. Constraints: Tag values are case-sensitive and accept a maximum of 255 Unicode characters.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key
            case value
        }
    }

    public struct TagDescription: AWSDecodableShape {
        /// The tag key.
        public let key: String?
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type.
        public let resourceType: ResourceType?
        /// The tag value.
        public let value: String?

        public init(key: String? = nil, resourceId: String? = nil, resourceType: ResourceType? = nil, value: String? = nil) {
            self.key = key
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key
            case resourceId
            case resourceType
            case value
        }
    }

    public struct TagSpecification: AWSEncodableShape & AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The type of resource to tag. Currently, the resource types that support tagging on creation are: capacity-reservation | carrier-gateway | client-vpn-endpoint | customer-gateway | dedicated-host | dhcp-options | egress-only-internet-gateway | elastic-ip | elastic-gpu | export-image-task | export-instance-task | fleet | fpga-image | host-reservation | image| import-image-task | import-snapshot-task | instance | instance-event-window | internet-gateway | ipv4pool-ec2 | ipv6pool-ec2 | key-pair | launch-template | local-gateway-route-table-vpc-association | placement-group | prefix-list | natgateway | network-acl | network-interface | reserved-instances |route-table | security-group| snapshot | spot-fleet-request | spot-instances-request | snapshot | subnet | traffic-mirror-filter | traffic-mirror-session | traffic-mirror-target | transit-gateway | transit-gateway-attachment | transit-gateway-multicast-domain | transit-gateway-route-table | volume |vpc |  vpc-peering-connection | vpc-endpoint (for interface and gateway endpoints) | vpc-endpoint-service (for PrivateLink) | vpc-flow-log | vpn-connection | vpn-gateway. To tag a resource after it has been created, see CreateTags.
        public let resourceType: ResourceType?
        /// The tags to apply to the resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?

        public init(resourceType: ResourceType? = nil, tags: [Tag]? = nil) {
            self.resourceType = resourceType
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType
            case tags = "Tag"
        }
    }

    public struct TargetCapacitySpecification: AWSDecodableShape {
        /// The default TotalTargetCapacity, which is either Spot or On-Demand.
        public let defaultTargetCapacityType: DefaultTargetCapacityType?
        /// The number of On-Demand units to request. If you specify a target capacity for Spot units, you cannot specify a target capacity for On-Demand units.
        public let onDemandTargetCapacity: Int?
        /// The maximum number of Spot units to launch. If you specify a target capacity for On-Demand units, you cannot specify a target capacity for Spot units.
        public let spotTargetCapacity: Int?
        /// The number of units to request, filled using DefaultTargetCapacityType.
        public let totalTargetCapacity: Int?

        public init(defaultTargetCapacityType: DefaultTargetCapacityType? = nil, onDemandTargetCapacity: Int? = nil, spotTargetCapacity: Int? = nil, totalTargetCapacity: Int? = nil) {
            self.defaultTargetCapacityType = defaultTargetCapacityType
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotTargetCapacity = spotTargetCapacity
            self.totalTargetCapacity = totalTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTargetCapacityType
            case onDemandTargetCapacity
            case spotTargetCapacity
            case totalTargetCapacity
        }
    }

    public struct TargetCapacitySpecificationRequest: AWSEncodableShape {
        /// The default TotalTargetCapacity, which is either Spot or On-Demand.
        public let defaultTargetCapacityType: DefaultTargetCapacityType?
        /// The number of On-Demand units to request.
        public let onDemandTargetCapacity: Int?
        /// The number of Spot units to request.
        public let spotTargetCapacity: Int?
        /// The number of units to request, filled using DefaultTargetCapacityType.
        public let totalTargetCapacity: Int

        public init(defaultTargetCapacityType: DefaultTargetCapacityType? = nil, onDemandTargetCapacity: Int? = nil, spotTargetCapacity: Int? = nil, totalTargetCapacity: Int) {
            self.defaultTargetCapacityType = defaultTargetCapacityType
            self.onDemandTargetCapacity = onDemandTargetCapacity
            self.spotTargetCapacity = spotTargetCapacity
            self.totalTargetCapacity = totalTargetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTargetCapacityType = "DefaultTargetCapacityType"
            case onDemandTargetCapacity = "OnDemandTargetCapacity"
            case spotTargetCapacity = "SpotTargetCapacity"
            case totalTargetCapacity = "TotalTargetCapacity"
        }
    }

    public struct TargetConfiguration: AWSDecodableShape {
        /// The number of instances the Convertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
        public let instanceCount: Int?
        /// The ID of the Convertible Reserved Instance offering.
        public let offeringId: String?

        public init(instanceCount: Int? = nil, offeringId: String? = nil) {
            self.instanceCount = instanceCount
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount
            case offeringId
        }
    }

    public struct TargetConfigurationRequest: AWSEncodableShape {
        /// The number of instances the Covertible Reserved Instance offering can be applied to. This parameter is reserved and cannot be specified in a request
        public let instanceCount: Int?
        /// The Convertible Reserved Instance offering ID.
        public let offeringId: String

        public init(instanceCount: Int? = nil, offeringId: String) {
            self.instanceCount = instanceCount
            self.offeringId = offeringId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCount = "InstanceCount"
            case offeringId = "OfferingId"
        }
    }

    public struct TargetGroup: AWSEncodableShape & AWSDecodableShape {
        /// The Amazon Resource Name (ARN) of the target group.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn
        }
    }

    public struct TargetGroupsConfig: AWSEncodableShape & AWSDecodableShape {
        public struct _TargetGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// One or more target groups.
        @OptionalCustomCoding<ArrayCoder<_TargetGroupsEncoding, TargetGroup>>
        public var targetGroups: [TargetGroup]?

        public init(targetGroups: [TargetGroup]? = nil) {
            self.targetGroups = targetGroups
        }

        public func validate(name: String) throws {
            try self.validate(self.targetGroups, name: "targetGroups", parent: name, max: 5)
            try self.validate(self.targetGroups, name: "targetGroups", parent: name, min: 1)
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroups
        }
    }

    public struct TargetNetwork: AWSDecodableShape {
        public struct _SecurityGroupsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the association.
        public let associationId: String?
        /// The ID of the Client VPN endpoint with which the target network is associated.
        public let clientVpnEndpointId: String?
        /// The IDs of the security groups applied to the target network association.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupsEncoding, String>>
        public var securityGroups: [String]?
        /// The current state of the target network association.
        public let status: AssociationStatus?
        /// The ID of the subnet specified as the target network.
        public let targetNetworkId: String?
        /// The ID of the VPC in which the target network (subnet) is located.
        public let vpcId: String?

        public init(associationId: String? = nil, clientVpnEndpointId: String? = nil, securityGroups: [String]? = nil, status: AssociationStatus? = nil, targetNetworkId: String? = nil, vpcId: String? = nil) {
            self.associationId = associationId
            self.clientVpnEndpointId = clientVpnEndpointId
            self.securityGroups = securityGroups
            self.status = status
            self.targetNetworkId = targetNetworkId
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case clientVpnEndpointId
            case securityGroups
            case status
            case targetNetworkId
            case vpcId
        }
    }

    public struct TargetReservationValue: AWSDecodableShape {
        /// The total value of the Convertible Reserved Instances that make up the exchange. This is the sum of the list value, remaining upfront price, and additional upfront cost of the exchange.
        public let reservationValue: ReservationValue?
        /// The configuration of the Convertible Reserved Instances that make up the exchange.
        public let targetConfiguration: TargetConfiguration?

        public init(reservationValue: ReservationValue? = nil, targetConfiguration: TargetConfiguration? = nil) {
            self.reservationValue = reservationValue
            self.targetConfiguration = targetConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case reservationValue
            case targetConfiguration
        }
    }

    public struct TerminateClientVpnConnectionsRequest: AWSEncodableShape {
        /// The ID of the Client VPN endpoint to which the client is connected.
        public let clientVpnEndpointId: String
        /// The ID of the client connection to be terminated.
        public let connectionId: String?
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.
        public let username: String?

        public init(clientVpnEndpointId: String, connectionId: String? = nil, dryRun: Bool? = nil, username: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionId = connectionId
            self.dryRun = dryRun
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId = "ClientVpnEndpointId"
            case connectionId = "ConnectionId"
            case dryRun = "DryRun"
            case username = "Username"
        }
    }

    public struct TerminateClientVpnConnectionsResult: AWSDecodableShape {
        public struct _ConnectionStatusesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the Client VPN endpoint.
        public let clientVpnEndpointId: String?
        /// The current state of the client connections.
        @OptionalCustomCoding<ArrayCoder<_ConnectionStatusesEncoding, TerminateConnectionStatus>>
        public var connectionStatuses: [TerminateConnectionStatus]?
        /// The user who established the terminated client connections.
        public let username: String?

        public init(clientVpnEndpointId: String? = nil, connectionStatuses: [TerminateConnectionStatus]? = nil, username: String? = nil) {
            self.clientVpnEndpointId = clientVpnEndpointId
            self.connectionStatuses = connectionStatuses
            self.username = username
        }

        private enum CodingKeys: String, CodingKey {
            case clientVpnEndpointId
            case connectionStatuses
            case username
        }
    }

    public struct TerminateConnectionStatus: AWSDecodableShape {
        /// The ID of the client connection.
        public let connectionId: String?
        /// A message about the status of the client connection, if applicable.
        public let currentStatus: ClientVpnConnectionStatus?
        /// The state of the client connection.
        public let previousStatus: ClientVpnConnectionStatus?

        public init(connectionId: String? = nil, currentStatus: ClientVpnConnectionStatus? = nil, previousStatus: ClientVpnConnectionStatus? = nil) {
            self.connectionId = connectionId
            self.currentStatus = currentStatus
            self.previousStatus = previousStatus
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId
            case currentStatus
            case previousStatus
        }
    }

    public struct TerminateInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances. Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.
        @CustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]

        public init(dryRun: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceIds = "InstanceId"
        }
    }

    public struct TerminateInstancesResult: AWSDecodableShape {
        public struct _TerminatingInstancesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the terminated instances.
        @OptionalCustomCoding<ArrayCoder<_TerminatingInstancesEncoding, InstanceStateChange>>
        public var terminatingInstances: [InstanceStateChange]?

        public init(terminatingInstances: [InstanceStateChange]? = nil) {
            self.terminatingInstances = terminatingInstances
        }

        private enum CodingKeys: String, CodingKey {
            case terminatingInstances = "instancesSet"
        }
    }

    public struct TrafficMirrorFilter: AWSDecodableShape {
        public struct _EgressFilterRulesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _IngressFilterRulesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkServicesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description of the Traffic Mirror filter.
        public let description: String?
        /// Information about the egress rules that are associated with the Traffic Mirror filter.
        @OptionalCustomCoding<ArrayCoder<_EgressFilterRulesEncoding, TrafficMirrorFilterRule>>
        public var egressFilterRules: [TrafficMirrorFilterRule]?
        /// Information about the ingress rules that are associated with the Traffic Mirror filter.
        @OptionalCustomCoding<ArrayCoder<_IngressFilterRulesEncoding, TrafficMirrorFilterRule>>
        public var ingressFilterRules: [TrafficMirrorFilterRule]?
        /// The network service traffic that is associated with the Traffic Mirror filter.
        @OptionalCustomCoding<ArrayCoder<_NetworkServicesEncoding, TrafficMirrorNetworkService>>
        public var networkServices: [TrafficMirrorNetworkService]?
        /// The tags assigned to the Traffic Mirror filter.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?

        public init(description: String? = nil, egressFilterRules: [TrafficMirrorFilterRule]? = nil, ingressFilterRules: [TrafficMirrorFilterRule]? = nil, networkServices: [TrafficMirrorNetworkService]? = nil, tags: [Tag]? = nil, trafficMirrorFilterId: String? = nil) {
            self.description = description
            self.egressFilterRules = egressFilterRules
            self.ingressFilterRules = ingressFilterRules
            self.networkServices = networkServices
            self.tags = tags
            self.trafficMirrorFilterId = trafficMirrorFilterId
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case egressFilterRules = "egressFilterRuleSet"
            case ingressFilterRules = "ingressFilterRuleSet"
            case networkServices = "networkServiceSet"
            case tags = "tagSet"
            case trafficMirrorFilterId
        }
    }

    public struct TrafficMirrorFilterRule: AWSDecodableShape {
        /// The description of the Traffic Mirror rule.
        public let description: String?
        /// The destination CIDR block assigned to the Traffic Mirror rule.
        public let destinationCidrBlock: String?
        /// The destination port range assigned to the Traffic Mirror rule.
        public let destinationPortRange: TrafficMirrorPortRange?
        /// The protocol assigned to the Traffic Mirror rule.
        public let `protocol`: Int?
        /// The action assigned to the Traffic Mirror rule.
        public let ruleAction: TrafficMirrorRuleAction?
        /// The rule number of the Traffic Mirror rule.
        public let ruleNumber: Int?
        /// The source CIDR block assigned to the Traffic Mirror rule.
        public let sourceCidrBlock: String?
        /// The source port range assigned to the Traffic Mirror rule.
        public let sourcePortRange: TrafficMirrorPortRange?
        /// The traffic direction assigned to the Traffic Mirror rule.
        public let trafficDirection: TrafficDirection?
        /// The ID of the Traffic Mirror filter that the rule is associated with.
        public let trafficMirrorFilterId: String?
        /// The ID of the Traffic Mirror rule.
        public let trafficMirrorFilterRuleId: String?

        public init(description: String? = nil, destinationCidrBlock: String? = nil, destinationPortRange: TrafficMirrorPortRange? = nil, protocol: Int? = nil, ruleAction: TrafficMirrorRuleAction? = nil, ruleNumber: Int? = nil, sourceCidrBlock: String? = nil, sourcePortRange: TrafficMirrorPortRange? = nil, trafficDirection: TrafficDirection? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorFilterRuleId: String? = nil) {
            self.description = description
            self.destinationCidrBlock = destinationCidrBlock
            self.destinationPortRange = destinationPortRange
            self.`protocol` = `protocol`
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
            self.sourceCidrBlock = sourceCidrBlock
            self.sourcePortRange = sourcePortRange
            self.trafficDirection = trafficDirection
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorFilterRuleId = trafficMirrorFilterRuleId
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case destinationCidrBlock
            case destinationPortRange
            case `protocol`
            case ruleAction
            case ruleNumber
            case sourceCidrBlock
            case sourcePortRange
            case trafficDirection
            case trafficMirrorFilterId
            case trafficMirrorFilterRuleId
        }
    }

    public struct TrafficMirrorPortRange: AWSDecodableShape {
        /// The start of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let fromPort: Int?
        /// The end of the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let toPort: Int?

        public init(fromPort: Int? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort
            case toPort
        }
    }

    public struct TrafficMirrorPortRangeRequest: AWSEncodableShape {
        /// The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let fromPort: Int?
        /// The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
        public let toPort: Int?

        public init(fromPort: Int? = nil, toPort: Int? = nil) {
            self.fromPort = fromPort
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "FromPort"
            case toPort = "ToPort"
        }
    }

    public struct TrafficMirrorSession: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The description of the Traffic Mirror session.
        public let description: String?
        /// The ID of the Traffic Mirror session's network interface.
        public let networkInterfaceId: String?
        /// The ID of the account that owns the Traffic Mirror session.
        public let ownerId: String?
        /// The number of bytes in each packet to mirror. These are the bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet
        public let packetLength: Int?
        /// The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets. Valid values are 1-32766.
        public let sessionNumber: Int?
        /// The tags assigned to the Traffic Mirror session.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Traffic Mirror filter.
        public let trafficMirrorFilterId: String?
        /// The ID for the Traffic Mirror session.
        public let trafficMirrorSessionId: String?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String?
        /// The virtual network ID associated with the Traffic Mirror session.
        public let virtualNetworkId: Int?

        public init(description: String? = nil, networkInterfaceId: String? = nil, ownerId: String? = nil, packetLength: Int? = nil, sessionNumber: Int? = nil, tags: [Tag]? = nil, trafficMirrorFilterId: String? = nil, trafficMirrorSessionId: String? = nil, trafficMirrorTargetId: String? = nil, virtualNetworkId: Int? = nil) {
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.ownerId = ownerId
            self.packetLength = packetLength
            self.sessionNumber = sessionNumber
            self.tags = tags
            self.trafficMirrorFilterId = trafficMirrorFilterId
            self.trafficMirrorSessionId = trafficMirrorSessionId
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.virtualNetworkId = virtualNetworkId
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case networkInterfaceId
            case ownerId
            case packetLength
            case sessionNumber
            case tags = "tagSet"
            case trafficMirrorFilterId
            case trafficMirrorSessionId
            case trafficMirrorTargetId
            case virtualNetworkId
        }
    }

    public struct TrafficMirrorTarget: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the Traffic Mirror target.
        public let description: String?
        /// The network interface ID that is attached to the target.
        public let networkInterfaceId: String?
        /// The Amazon Resource Name (ARN) of the Network Load Balancer.
        public let networkLoadBalancerArn: String?
        /// The ID of the account that owns the Traffic Mirror target.
        public let ownerId: String?
        /// The tags assigned to the Traffic Mirror target.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Traffic Mirror target.
        public let trafficMirrorTargetId: String?
        /// The type of Traffic Mirror target.
        public let type: TrafficMirrorTargetType?

        public init(description: String? = nil, networkInterfaceId: String? = nil, networkLoadBalancerArn: String? = nil, ownerId: String? = nil, tags: [Tag]? = nil, trafficMirrorTargetId: String? = nil, type: TrafficMirrorTargetType? = nil) {
            self.description = description
            self.networkInterfaceId = networkInterfaceId
            self.networkLoadBalancerArn = networkLoadBalancerArn
            self.ownerId = ownerId
            self.tags = tags
            self.trafficMirrorTargetId = trafficMirrorTargetId
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case networkInterfaceId
            case networkLoadBalancerArn
            case ownerId
            case tags = "tagSet"
            case trafficMirrorTargetId
            case type
        }
    }

    public struct TransitGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: Date?
        /// The description of the transit gateway.
        public let description: String?
        /// The transit gateway options.
        public let options: TransitGatewayOptions?
        /// The ID of the AWS account ID that owns the transit gateway.
        public let ownerId: String?
        /// The state of the transit gateway.
        public let state: TransitGatewayState?
        /// The tags for the transit gateway.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The Amazon Resource Name (ARN) of the transit gateway.
        public let transitGatewayArn: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?

        public init(creationTime: Date? = nil, description: String? = nil, options: TransitGatewayOptions? = nil, ownerId: String? = nil, state: TransitGatewayState? = nil, tags: [Tag]? = nil, transitGatewayArn: String? = nil, transitGatewayId: String? = nil) {
            self.creationTime = creationTime
            self.description = description
            self.options = options
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.transitGatewayArn = transitGatewayArn
            self.transitGatewayId = transitGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime
            case description
            case options
            case ownerId
            case state
            case tags = "tagSet"
            case transitGatewayArn
            case transitGatewayId
        }
    }

    public struct TransitGatewayAssociation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAssociationState? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId
            case resourceType
            case state
            case transitGatewayAttachmentId
            case transitGatewayRouteTableId
        }
    }

    public struct TransitGatewayAttachment: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The association.
        public let association: TransitGatewayAttachmentAssociation?
        /// The creation time.
        public let creationTime: Date?
        /// The ID of the resource.
        public let resourceId: String?
        /// The ID of the AWS account that owns the resource.
        public let resourceOwnerId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The attachment state. Note that the initiating state has been deprecated.
        public let state: TransitGatewayAttachmentState?
        /// The tags for the attachment.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the AWS account that owns the transit gateway.
        public let transitGatewayOwnerId: String?

        public init(association: TransitGatewayAttachmentAssociation? = nil, creationTime: Date? = nil, resourceId: String? = nil, resourceOwnerId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAttachmentState? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil, transitGatewayOwnerId: String? = nil) {
            self.association = association
            self.creationTime = creationTime
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceType = resourceType
            self.state = state
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
            self.transitGatewayOwnerId = transitGatewayOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case association
            case creationTime
            case resourceId
            case resourceOwnerId
            case resourceType
            case state
            case tags = "tagSet"
            case transitGatewayAttachmentId
            case transitGatewayId
            case transitGatewayOwnerId
        }
    }

    public struct TransitGatewayAttachmentAssociation: AWSDecodableShape {
        /// The state of the association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the route table for the transit gateway.
        public let transitGatewayRouteTableId: String?

        public init(state: TransitGatewayAssociationState? = nil, transitGatewayRouteTableId: String? = nil) {
            self.state = state
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case transitGatewayRouteTableId
        }
    }

    public struct TransitGatewayAttachmentBgpConfiguration: AWSDecodableShape {
        /// The BGP status.
        public let bgpStatus: BgpStatus?
        /// The interior BGP peer IP address for the appliance.
        public let peerAddress: String?
        /// The peer Autonomous System Number (ASN).
        public let peerAsn: Int64?
        /// The interior BGP peer IP address for the transit gateway.
        public let transitGatewayAddress: String?
        /// The transit gateway Autonomous System Number (ASN).
        public let transitGatewayAsn: Int64?

        public init(bgpStatus: BgpStatus? = nil, peerAddress: String? = nil, peerAsn: Int64? = nil, transitGatewayAddress: String? = nil, transitGatewayAsn: Int64? = nil) {
            self.bgpStatus = bgpStatus
            self.peerAddress = peerAddress
            self.peerAsn = peerAsn
            self.transitGatewayAddress = transitGatewayAddress
            self.transitGatewayAsn = transitGatewayAsn
        }

        private enum CodingKeys: String, CodingKey {
            case bgpStatus
            case peerAddress
            case peerAsn
            case transitGatewayAddress
            case transitGatewayAsn
        }
    }

    public struct TransitGatewayAttachmentPropagation: AWSDecodableShape {
        /// The state of the propagation route table.
        public let state: TransitGatewayPropagationState?
        /// The ID of the propagation route table.
        public let transitGatewayRouteTableId: String?

        public init(state: TransitGatewayPropagationState? = nil, transitGatewayRouteTableId: String? = nil) {
            self.state = state
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case transitGatewayRouteTableId
        }
    }

    public struct TransitGatewayConnect: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: Date?
        /// The Connect attachment options.
        public let options: TransitGatewayConnectOptions?
        /// The state of the attachment.
        public let state: TransitGatewayAttachmentState?
        /// The tags for the attachment.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Connect attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the attachment from which the Connect attachment was created.
        public let transportTransitGatewayAttachmentId: String?

        public init(creationTime: Date? = nil, options: TransitGatewayConnectOptions? = nil, state: TransitGatewayAttachmentState? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil, transportTransitGatewayAttachmentId: String? = nil) {
            self.creationTime = creationTime
            self.options = options
            self.state = state
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
            self.transportTransitGatewayAttachmentId = transportTransitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime
            case options
            case state
            case tags = "tagSet"
            case transitGatewayAttachmentId
            case transitGatewayId
            case transportTransitGatewayAttachmentId
        }
    }

    public struct TransitGatewayConnectOptions: AWSDecodableShape {
        /// The tunnel protocol.
        public let `protocol`: ProtocolValue?

        public init(protocol: ProtocolValue? = nil) {
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol`
        }
    }

    public struct TransitGatewayConnectPeer: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The Connect peer details.
        public let connectPeerConfiguration: TransitGatewayConnectPeerConfiguration?
        /// The creation time.
        public let creationTime: Date?
        /// The state of the Connect peer.
        public let state: TransitGatewayConnectPeerState?
        /// The tags for the Connect peer.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the Connect attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the Connect peer.
        public let transitGatewayConnectPeerId: String?

        public init(connectPeerConfiguration: TransitGatewayConnectPeerConfiguration? = nil, creationTime: Date? = nil, state: TransitGatewayConnectPeerState? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayConnectPeerId: String? = nil) {
            self.connectPeerConfiguration = connectPeerConfiguration
            self.creationTime = creationTime
            self.state = state
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayConnectPeerId = transitGatewayConnectPeerId
        }

        private enum CodingKeys: String, CodingKey {
            case connectPeerConfiguration
            case creationTime
            case state
            case tags = "tagSet"
            case transitGatewayAttachmentId
            case transitGatewayConnectPeerId
        }
    }

    public struct TransitGatewayConnectPeerConfiguration: AWSDecodableShape {
        public struct _BgpConfigurationsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _InsideCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The BGP configuration details.
        @OptionalCustomCoding<ArrayCoder<_BgpConfigurationsEncoding, TransitGatewayAttachmentBgpConfiguration>>
        public var bgpConfigurations: [TransitGatewayAttachmentBgpConfiguration]?
        /// The range of interior BGP peer IP addresses.
        @OptionalCustomCoding<ArrayCoder<_InsideCidrBlocksEncoding, String>>
        public var insideCidrBlocks: [String]?
        /// The Connect peer IP address on the appliance side of the tunnel.
        public let peerAddress: String?
        /// The tunnel protocol.
        public let `protocol`: ProtocolValue?
        /// The Connect peer IP address on the transit gateway side of the tunnel.
        public let transitGatewayAddress: String?

        public init(bgpConfigurations: [TransitGatewayAttachmentBgpConfiguration]? = nil, insideCidrBlocks: [String]? = nil, peerAddress: String? = nil, protocol: ProtocolValue? = nil, transitGatewayAddress: String? = nil) {
            self.bgpConfigurations = bgpConfigurations
            self.insideCidrBlocks = insideCidrBlocks
            self.peerAddress = peerAddress
            self.`protocol` = `protocol`
            self.transitGatewayAddress = transitGatewayAddress
        }

        private enum CodingKeys: String, CodingKey {
            case bgpConfigurations
            case insideCidrBlocks
            case peerAddress
            case `protocol`
            case transitGatewayAddress
        }
    }

    public struct TransitGatewayConnectRequestBgpOptions: AWSEncodableShape {
        /// The peer Autonomous System Number (ASN).
        public let peerAsn: Int64?

        public init(peerAsn: Int64? = nil) {
            self.peerAsn = peerAsn
        }

        private enum CodingKeys: String, CodingKey {
            case peerAsn = "PeerAsn"
        }
    }

    public struct TransitGatewayMulticastDeregisteredGroupMembers: AWSDecodableShape {
        public struct _DeregisteredNetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network interface IDs of the deregistered members.
        @OptionalCustomCoding<ArrayCoder<_DeregisteredNetworkInterfaceIdsEncoding, String>>
        public var deregisteredNetworkInterfaceIds: [String]?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(deregisteredNetworkInterfaceIds: [String]? = nil, groupIpAddress: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.deregisteredNetworkInterfaceIds = deregisteredNetworkInterfaceIds
            self.groupIpAddress = groupIpAddress
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredNetworkInterfaceIds
            case groupIpAddress
            case transitGatewayMulticastDomainId
        }
    }

    public struct TransitGatewayMulticastDeregisteredGroupSources: AWSDecodableShape {
        public struct _DeregisteredNetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The network interface IDs of the non-registered members.
        @OptionalCustomCoding<ArrayCoder<_DeregisteredNetworkInterfaceIdsEncoding, String>>
        public var deregisteredNetworkInterfaceIds: [String]?
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(deregisteredNetworkInterfaceIds: [String]? = nil, groupIpAddress: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.deregisteredNetworkInterfaceIds = deregisteredNetworkInterfaceIds
            self.groupIpAddress = groupIpAddress
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case deregisteredNetworkInterfaceIds
            case groupIpAddress
            case transitGatewayMulticastDomainId
        }
    }

    public struct TransitGatewayMulticastDomain: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The time the transit gateway multicast domain was created.
        public let creationTime: Date?
        /// The options for the transit gateway multicast domain.
        public let options: TransitGatewayMulticastDomainOptions?
        ///  The ID of the AWS account that owns the transit gateway multiicast domain.
        public let ownerId: String?
        /// The state of the transit gateway multicast domain.
        public let state: TransitGatewayMulticastDomainState?
        /// The tags for the transit gateway multicast domain.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The Amazon Resource Name (ARN) of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainArn: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(creationTime: Date? = nil, options: TransitGatewayMulticastDomainOptions? = nil, ownerId: String? = nil, state: TransitGatewayMulticastDomainState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, transitGatewayMulticastDomainArn: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.creationTime = creationTime
            self.options = options
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.transitGatewayMulticastDomainArn = transitGatewayMulticastDomainArn
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime
            case options
            case ownerId
            case state
            case tags = "tagSet"
            case transitGatewayId
            case transitGatewayMulticastDomainArn
            case transitGatewayMulticastDomainId
        }
    }

    public struct TransitGatewayMulticastDomainAssociation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        ///  The ID of the AWS account that owns the transit gateway multicast domain association resource.
        public let resourceOwnerId: String?
        /// The type of resource, for example a VPC attachment.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The subnet associated with the transit gateway multicast domain.
        public let subnet: SubnetAssociation?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceOwnerId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, subnet: SubnetAssociation? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceType = resourceType
            self.subnet = subnet
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId
            case resourceOwnerId
            case resourceType
            case subnet
            case transitGatewayAttachmentId
        }
    }

    public struct TransitGatewayMulticastDomainAssociations: AWSDecodableShape {
        public struct _SubnetsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the resource.
        public let resourceId: String?
        ///  The ID of the AWS account that owns the resource.
        public let resourceOwnerId: String?
        /// The type of resource, for example a VPC attachment.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The subnets associated with the multicast domain.
        @OptionalCustomCoding<ArrayCoder<_SubnetsEncoding, SubnetAssociation>>
        public var subnets: [SubnetAssociation]?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(resourceId: String? = nil, resourceOwnerId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, subnets: [SubnetAssociation]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceType = resourceType
            self.subnets = subnets
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId
            case resourceOwnerId
            case resourceType
            case subnets
            case transitGatewayAttachmentId
            case transitGatewayMulticastDomainId
        }
    }

    public struct TransitGatewayMulticastDomainOptions: AWSDecodableShape {
        /// Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain.
        public let autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue?
        /// Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain.
        public let igmpv2Support: Igmpv2SupportValue?
        /// Indicates whether support for statically configuring transit gateway multicast group sources is turned on.
        public let staticSourcesSupport: StaticSourcesSupportValue?

        public init(autoAcceptSharedAssociations: AutoAcceptSharedAssociationsValue? = nil, igmpv2Support: Igmpv2SupportValue? = nil, staticSourcesSupport: StaticSourcesSupportValue? = nil) {
            self.autoAcceptSharedAssociations = autoAcceptSharedAssociations
            self.igmpv2Support = igmpv2Support
            self.staticSourcesSupport = staticSourcesSupport
        }

        private enum CodingKeys: String, CodingKey {
            case autoAcceptSharedAssociations
            case igmpv2Support
            case staticSourcesSupport
        }
    }

    public struct TransitGatewayMulticastGroup: AWSDecodableShape {
        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// Indicates that the resource is a transit gateway multicast group member.
        public let groupMember: Bool?
        /// Indicates that the resource is a transit gateway multicast group member.
        public let groupSource: Bool?
        /// The member type (for example, static).
        public let memberType: MembershipType?
        /// The ID of the transit gateway attachment.
        public let networkInterfaceId: String?
        /// The ID of the resource.
        public let resourceId: String?
        ///  The ID of the AWS account that owns the transit gateway multicast domain group resource.
        public let resourceOwnerId: String?
        /// The type of resource, for example a VPC attachment.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The source type.
        public let sourceType: MembershipType?
        /// The ID of the subnet.
        public let subnetId: String?
        /// The ID of the transit gateway attachment.
        public let transitGatewayAttachmentId: String?

        public init(groupIpAddress: String? = nil, groupMember: Bool? = nil, groupSource: Bool? = nil, memberType: MembershipType? = nil, networkInterfaceId: String? = nil, resourceId: String? = nil, resourceOwnerId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, sourceType: MembershipType? = nil, subnetId: String? = nil, transitGatewayAttachmentId: String? = nil) {
            self.groupIpAddress = groupIpAddress
            self.groupMember = groupMember
            self.groupSource = groupSource
            self.memberType = memberType
            self.networkInterfaceId = networkInterfaceId
            self.resourceId = resourceId
            self.resourceOwnerId = resourceOwnerId
            self.resourceType = resourceType
            self.sourceType = sourceType
            self.subnetId = subnetId
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIpAddress
            case groupMember
            case groupSource
            case memberType
            case networkInterfaceId
            case resourceId
            case resourceOwnerId
            case resourceType
            case sourceType
            case subnetId
            case transitGatewayAttachmentId
        }
    }

    public struct TransitGatewayMulticastRegisteredGroupMembers: AWSDecodableShape {
        public struct _RegisteredNetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The ID of the registered network interfaces.
        @OptionalCustomCoding<ArrayCoder<_RegisteredNetworkInterfaceIdsEncoding, String>>
        public var registeredNetworkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(groupIpAddress: String? = nil, registeredNetworkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.groupIpAddress = groupIpAddress
            self.registeredNetworkInterfaceIds = registeredNetworkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIpAddress
            case registeredNetworkInterfaceIds
            case transitGatewayMulticastDomainId
        }
    }

    public struct TransitGatewayMulticastRegisteredGroupSources: AWSDecodableShape {
        public struct _RegisteredNetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IP address assigned to the transit gateway multicast group.
        public let groupIpAddress: String?
        /// The IDs of the network interfaces members registered with the transit gateway multicast group.
        @OptionalCustomCoding<ArrayCoder<_RegisteredNetworkInterfaceIdsEncoding, String>>
        public var registeredNetworkInterfaceIds: [String]?
        /// The ID of the transit gateway multicast domain.
        public let transitGatewayMulticastDomainId: String?

        public init(groupIpAddress: String? = nil, registeredNetworkInterfaceIds: [String]? = nil, transitGatewayMulticastDomainId: String? = nil) {
            self.groupIpAddress = groupIpAddress
            self.registeredNetworkInterfaceIds = registeredNetworkInterfaceIds
            self.transitGatewayMulticastDomainId = transitGatewayMulticastDomainId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIpAddress
            case registeredNetworkInterfaceIds
            case transitGatewayMulticastDomainId
        }
    }

    public struct TransitGatewayOptions: AWSDecodableShape {
        public struct _TransitGatewayCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
        public let amazonSideAsn: Int64?
        /// The ID of the default association route table.
        public let associationDefaultRouteTableId: String?
        /// Indicates whether attachment requests are automatically accepted.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// Indicates whether resource attachments are automatically associated with the default association route table.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// Indicates whether resource attachments automatically propagate routes to the default propagation route table.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Indicates whether DNS support is enabled.
        public let dnsSupport: DnsSupportValue?
        /// Indicates whether multicast is enabled on the transit gateway
        public let multicastSupport: MulticastSupportValue?
        /// The ID of the default propagation route table.
        public let propagationDefaultRouteTableId: String?
        /// The transit gateway CIDR blocks.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayCidrBlocksEncoding, String>>
        public var transitGatewayCidrBlocks: [String]?
        /// Indicates whether Equal Cost Multipath Protocol support is enabled.
        public let vpnEcmpSupport: VpnEcmpSupportValue?

        public init(amazonSideAsn: Int64? = nil, associationDefaultRouteTableId: String? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, dnsSupport: DnsSupportValue? = nil, multicastSupport: MulticastSupportValue? = nil, propagationDefaultRouteTableId: String? = nil, transitGatewayCidrBlocks: [String]? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.associationDefaultRouteTableId = associationDefaultRouteTableId
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.dnsSupport = dnsSupport
            self.multicastSupport = multicastSupport
            self.propagationDefaultRouteTableId = propagationDefaultRouteTableId
            self.transitGatewayCidrBlocks = transitGatewayCidrBlocks
            self.vpnEcmpSupport = vpnEcmpSupport
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn
            case associationDefaultRouteTableId
            case autoAcceptSharedAttachments
            case defaultRouteTableAssociation
            case defaultRouteTablePropagation
            case dnsSupport
            case multicastSupport
            case propagationDefaultRouteTableId
            case transitGatewayCidrBlocks
            case vpnEcmpSupport
        }
    }

    public struct TransitGatewayPeeringAttachment: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the accepter transit gateway.
        public let accepterTgwInfo: PeeringTgwInfo?
        /// The time the transit gateway peering attachment was created.
        public let creationTime: Date?
        /// Information about the requester transit gateway.
        public let requesterTgwInfo: PeeringTgwInfo?
        /// The state of the transit gateway peering attachment. Note that the initiating state has been deprecated.
        public let state: TransitGatewayAttachmentState?
        /// The status of the transit gateway peering attachment.
        public let status: PeeringAttachmentStatus?
        /// The tags for the transit gateway peering attachment.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway peering attachment.
        public let transitGatewayAttachmentId: String?

        public init(accepterTgwInfo: PeeringTgwInfo? = nil, creationTime: Date? = nil, requesterTgwInfo: PeeringTgwInfo? = nil, state: TransitGatewayAttachmentState? = nil, status: PeeringAttachmentStatus? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil) {
            self.accepterTgwInfo = accepterTgwInfo
            self.creationTime = creationTime
            self.requesterTgwInfo = requesterTgwInfo
            self.state = state
            self.status = status
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterTgwInfo
            case creationTime
            case requesterTgwInfo
            case state
            case status
            case tags = "tagSet"
            case transitGatewayAttachmentId
        }
    }

    public struct TransitGatewayPrefixListAttachment: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId
            case resourceType
            case transitGatewayAttachmentId
        }
    }

    public struct TransitGatewayPrefixListReference: AWSDecodableShape {
        /// Indicates whether traffic that matches this route is dropped.
        public let blackhole: Bool?
        /// The ID of the prefix list.
        public let prefixListId: String?
        /// The ID of the prefix list owner.
        public let prefixListOwnerId: String?
        /// The state of the prefix list reference.
        public let state: TransitGatewayPrefixListReferenceState?
        /// Information about the transit gateway attachment.
        public let transitGatewayAttachment: TransitGatewayPrefixListAttachment?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(blackhole: Bool? = nil, prefixListId: String? = nil, prefixListOwnerId: String? = nil, state: TransitGatewayPrefixListReferenceState? = nil, transitGatewayAttachment: TransitGatewayPrefixListAttachment? = nil, transitGatewayRouteTableId: String? = nil) {
            self.blackhole = blackhole
            self.prefixListId = prefixListId
            self.prefixListOwnerId = prefixListOwnerId
            self.state = state
            self.transitGatewayAttachment = transitGatewayAttachment
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case blackhole
            case prefixListId
            case prefixListOwnerId
            case state
            case transitGatewayAttachment
            case transitGatewayRouteTableId
        }
    }

    public struct TransitGatewayPropagation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state.
        public let state: TransitGatewayPropagationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayPropagationState? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId
            case resourceType
            case state
            case transitGatewayAttachmentId
            case transitGatewayRouteTableId
        }
    }

    public struct TransitGatewayRequestOptions: AWSEncodableShape {
        public struct _TransitGatewayCidrBlocksEncoding: ArrayCoderProperties { public static let member = "item" }

        /// A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs. The default is 64512.
        public let amazonSideAsn: Int64?
        /// Enable or disable automatic acceptance of attachment requests. Disabled by default.
        public let autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue?
        /// Enable or disable automatic association with the default association route table. Enabled by default.
        public let defaultRouteTableAssociation: DefaultRouteTableAssociationValue?
        /// Enable or disable automatic propagation of routes to the default propagation route table. Enabled by default.
        public let defaultRouteTablePropagation: DefaultRouteTablePropagationValue?
        /// Enable or disable DNS support. Enabled by default.
        public let dnsSupport: DnsSupportValue?
        /// Indicates whether multicast is enabled on the transit gateway
        public let multicastSupport: MulticastSupportValue?
        /// One or more IPv4 or IPv6 CIDR blocks for the transit gateway. Must be a size /24 CIDR block or larger for IPv4, or a size /64 CIDR block or larger for IPv6.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayCidrBlocksEncoding, String>>
        public var transitGatewayCidrBlocks: [String]?
        /// Enable or disable Equal Cost Multipath Protocol support. Enabled by default.
        public let vpnEcmpSupport: VpnEcmpSupportValue?

        public init(amazonSideAsn: Int64? = nil, autoAcceptSharedAttachments: AutoAcceptSharedAttachmentsValue? = nil, defaultRouteTableAssociation: DefaultRouteTableAssociationValue? = nil, defaultRouteTablePropagation: DefaultRouteTablePropagationValue? = nil, dnsSupport: DnsSupportValue? = nil, multicastSupport: MulticastSupportValue? = nil, transitGatewayCidrBlocks: [String]? = nil, vpnEcmpSupport: VpnEcmpSupportValue? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.autoAcceptSharedAttachments = autoAcceptSharedAttachments
            self.defaultRouteTableAssociation = defaultRouteTableAssociation
            self.defaultRouteTablePropagation = defaultRouteTablePropagation
            self.dnsSupport = dnsSupport
            self.multicastSupport = multicastSupport
            self.transitGatewayCidrBlocks = transitGatewayCidrBlocks
            self.vpnEcmpSupport = vpnEcmpSupport
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn = "AmazonSideAsn"
            case autoAcceptSharedAttachments = "AutoAcceptSharedAttachments"
            case defaultRouteTableAssociation = "DefaultRouteTableAssociation"
            case defaultRouteTablePropagation = "DefaultRouteTablePropagation"
            case dnsSupport = "DnsSupport"
            case multicastSupport = "MulticastSupport"
            case transitGatewayCidrBlocks = "TransitGatewayCidrBlocks"
            case vpnEcmpSupport = "VpnEcmpSupport"
        }
    }

    public struct TransitGatewayRoute: AWSDecodableShape {
        public struct _TransitGatewayAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The CIDR block used for destination matches.
        public let destinationCidrBlock: String?
        /// The ID of the prefix list used for destination matches.
        public let prefixListId: String?
        /// The state of the route.
        public let state: TransitGatewayRouteState?
        /// The attachments.
        @OptionalCustomCoding<ArrayCoder<_TransitGatewayAttachmentsEncoding, TransitGatewayRouteAttachment>>
        public var transitGatewayAttachments: [TransitGatewayRouteAttachment]?
        /// The route type.
        public let type: TransitGatewayRouteType?

        public init(destinationCidrBlock: String? = nil, prefixListId: String? = nil, state: TransitGatewayRouteState? = nil, transitGatewayAttachments: [TransitGatewayRouteAttachment]? = nil, type: TransitGatewayRouteType? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.prefixListId = prefixListId
            self.state = state
            self.transitGatewayAttachments = transitGatewayAttachments
            self.type = type
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock
            case prefixListId
            case state
            case transitGatewayAttachments
            case type
        }
    }

    public struct TransitGatewayRouteAttachment: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId
            case resourceType
            case transitGatewayAttachmentId
        }
    }

    public struct TransitGatewayRouteTable: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: Date?
        /// Indicates whether this is the default association route table for the transit gateway.
        public let defaultAssociationRouteTable: Bool?
        /// Indicates whether this is the default propagation route table for the transit gateway.
        public let defaultPropagationRouteTable: Bool?
        /// The state of the transit gateway route table.
        public let state: TransitGatewayRouteTableState?
        /// Any tags assigned to the route table.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the transit gateway route table.
        public let transitGatewayRouteTableId: String?

        public init(creationTime: Date? = nil, defaultAssociationRouteTable: Bool? = nil, defaultPropagationRouteTable: Bool? = nil, state: TransitGatewayRouteTableState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, transitGatewayRouteTableId: String? = nil) {
            self.creationTime = creationTime
            self.defaultAssociationRouteTable = defaultAssociationRouteTable
            self.defaultPropagationRouteTable = defaultPropagationRouteTable
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.transitGatewayRouteTableId = transitGatewayRouteTableId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime
            case defaultAssociationRouteTable
            case defaultPropagationRouteTable
            case state
            case tags = "tagSet"
            case transitGatewayId
            case transitGatewayRouteTableId
        }
    }

    public struct TransitGatewayRouteTableAssociation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The resource type. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the association.
        public let state: TransitGatewayAssociationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayAssociationState? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId
            case resourceType
            case state
            case transitGatewayAttachmentId
        }
    }

    public struct TransitGatewayRouteTablePropagation: AWSDecodableShape {
        /// The ID of the resource.
        public let resourceId: String?
        /// The type of resource. Note that the tgw-peering resource type has been deprecated.
        public let resourceType: TransitGatewayAttachmentResourceType?
        /// The state of the resource.
        public let state: TransitGatewayPropagationState?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?

        public init(resourceId: String? = nil, resourceType: TransitGatewayAttachmentResourceType? = nil, state: TransitGatewayPropagationState? = nil, transitGatewayAttachmentId: String? = nil) {
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.state = state
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId
            case resourceType
            case state
            case transitGatewayAttachmentId
        }
    }

    public struct TransitGatewayVpcAttachment: AWSDecodableShape {
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The creation time.
        public let creationTime: Date?
        /// The VPC attachment options.
        public let options: TransitGatewayVpcAttachmentOptions?
        /// The state of the VPC attachment. Note that the initiating state has been deprecated.
        public let state: TransitGatewayAttachmentState?
        /// The IDs of the subnets.
        @OptionalCustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// The tags for the VPC attachment.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the attachment.
        public let transitGatewayAttachmentId: String?
        /// The ID of the transit gateway.
        public let transitGatewayId: String?
        /// The ID of the VPC.
        public let vpcId: String?
        /// The ID of the AWS account that owns the VPC.
        public let vpcOwnerId: String?

        public init(creationTime: Date? = nil, options: TransitGatewayVpcAttachmentOptions? = nil, state: TransitGatewayAttachmentState? = nil, subnetIds: [String]? = nil, tags: [Tag]? = nil, transitGatewayAttachmentId: String? = nil, transitGatewayId: String? = nil, vpcId: String? = nil, vpcOwnerId: String? = nil) {
            self.creationTime = creationTime
            self.options = options
            self.state = state
            self.subnetIds = subnetIds
            self.tags = tags
            self.transitGatewayAttachmentId = transitGatewayAttachmentId
            self.transitGatewayId = transitGatewayId
            self.vpcId = vpcId
            self.vpcOwnerId = vpcOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTime
            case options
            case state
            case subnetIds
            case tags = "tagSet"
            case transitGatewayAttachmentId
            case transitGatewayId
            case vpcId
            case vpcOwnerId
        }
    }

    public struct TransitGatewayVpcAttachmentOptions: AWSDecodableShape {
        /// Indicates whether appliance mode support is enabled.
        public let applianceModeSupport: ApplianceModeSupportValue?
        /// Indicates whether DNS support is enabled.
        public let dnsSupport: DnsSupportValue?
        /// Indicates whether IPv6 support is disabled.
        public let ipv6Support: Ipv6SupportValue?

        public init(applianceModeSupport: ApplianceModeSupportValue? = nil, dnsSupport: DnsSupportValue? = nil, ipv6Support: Ipv6SupportValue? = nil) {
            self.applianceModeSupport = applianceModeSupport
            self.dnsSupport = dnsSupport
            self.ipv6Support = ipv6Support
        }

        private enum CodingKeys: String, CodingKey {
            case applianceModeSupport
            case dnsSupport
            case ipv6Support
        }
    }

    public struct TrunkInterfaceAssociation: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the association.
        public let associationId: String?
        /// The ID of the branch network interface.
        public let branchInterfaceId: String?
        /// The application key when you use the GRE protocol.
        public let greKey: Int?
        /// The interface protocol. Valid values are VLAN and GRE.
        public let interfaceProtocol: InterfaceProtocolType?
        ///  The tags.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the trunk network interface.
        public let trunkInterfaceId: String?
        /// The ID of the VLAN when you use the VLAN protocol.
        public let vlanId: Int?

        public init(associationId: String? = nil, branchInterfaceId: String? = nil, greKey: Int? = nil, interfaceProtocol: InterfaceProtocolType? = nil, tags: [Tag]? = nil, trunkInterfaceId: String? = nil, vlanId: Int? = nil) {
            self.associationId = associationId
            self.branchInterfaceId = branchInterfaceId
            self.greKey = greKey
            self.interfaceProtocol = interfaceProtocol
            self.tags = tags
            self.trunkInterfaceId = trunkInterfaceId
            self.vlanId = vlanId
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case branchInterfaceId
            case greKey
            case interfaceProtocol
            case tags = "tagSet"
            case trunkInterfaceId
            case vlanId
        }
    }

    public struct TunnelOption: AWSDecodableShape {
        public struct _IkeVersionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The action to take after a DPD timeout occurs.
        public let dpdTimeoutAction: String?
        /// The number of seconds after which a DPD timeout occurs.
        public let dpdTimeoutSeconds: Int?
        /// The IKE versions that are permitted for the VPN tunnel.
        @OptionalCustomCoding<ArrayCoder<_IkeVersionsEncoding, IKEVersionsListValue>>
        public var ikeVersions: [IKEVersionsListValue]?
        /// The external IP address of the VPN tunnel.
        public let outsideIpAddress: String?
        /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1 IKE negotiations.
        @OptionalCustomCoding<ArrayCoder<_Phase1DHGroupNumbersEncoding, Phase1DHGroupNumbersListValue>>
        public var phase1DHGroupNumbers: [Phase1DHGroupNumbersListValue]?
        /// The permitted encryption algorithms for the VPN tunnel for phase 1 IKE negotiations.
        @OptionalCustomCoding<ArrayCoder<_Phase1EncryptionAlgorithmsEncoding, Phase1EncryptionAlgorithmsListValue>>
        public var phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsListValue]?
        /// The permitted integrity algorithms for the VPN tunnel for phase 1 IKE negotiations.
        @OptionalCustomCoding<ArrayCoder<_Phase1IntegrityAlgorithmsEncoding, Phase1IntegrityAlgorithmsListValue>>
        public var phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds.
        public let phase1LifetimeSeconds: Int?
        /// The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2 IKE negotiations.
        @OptionalCustomCoding<ArrayCoder<_Phase2DHGroupNumbersEncoding, Phase2DHGroupNumbersListValue>>
        public var phase2DHGroupNumbers: [Phase2DHGroupNumbersListValue]?
        /// The permitted encryption algorithms for the VPN tunnel for phase 2 IKE negotiations.
        @OptionalCustomCoding<ArrayCoder<_Phase2EncryptionAlgorithmsEncoding, Phase2EncryptionAlgorithmsListValue>>
        public var phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsListValue]?
        /// The permitted integrity algorithms for the VPN tunnel for phase 2 IKE negotiations.
        @OptionalCustomCoding<ArrayCoder<_Phase2IntegrityAlgorithmsEncoding, Phase2IntegrityAlgorithmsListValue>>
        public var phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds.
        public let phase2LifetimeSeconds: Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway.
        public let preSharedKey: String?
        /// The percentage of the rekey window determined by RekeyMarginTimeSeconds during which the rekey time is randomly selected.
        public let rekeyFuzzPercentage: Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey.
        public let rekeyMarginTimeSeconds: Int?
        /// The number of packets in an IKE replay window.
        public let replayWindowSize: Int?
        /// The action to take when the establishing the VPN tunnels for a VPN connection.
        public let startupAction: String?
        /// The range of inside IPv4 addresses for the tunnel.
        public let tunnelInsideCidr: String?
        /// The range of inside IPv6 addresses for the tunnel.
        public let tunnelInsideIpv6Cidr: String?

        public init(dpdTimeoutAction: String? = nil, dpdTimeoutSeconds: Int? = nil, ikeVersions: [IKEVersionsListValue]? = nil, outsideIpAddress: String? = nil, phase1DHGroupNumbers: [Phase1DHGroupNumbersListValue]? = nil, phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsListValue]? = nil, phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsListValue]? = nil, phase1LifetimeSeconds: Int? = nil, phase2DHGroupNumbers: [Phase2DHGroupNumbersListValue]? = nil, phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsListValue]? = nil, phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsListValue]? = nil, phase2LifetimeSeconds: Int? = nil, preSharedKey: String? = nil, rekeyFuzzPercentage: Int? = nil, rekeyMarginTimeSeconds: Int? = nil, replayWindowSize: Int? = nil, startupAction: String? = nil, tunnelInsideCidr: String? = nil, tunnelInsideIpv6Cidr: String? = nil) {
            self.dpdTimeoutAction = dpdTimeoutAction
            self.dpdTimeoutSeconds = dpdTimeoutSeconds
            self.ikeVersions = ikeVersions
            self.outsideIpAddress = outsideIpAddress
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case dpdTimeoutAction
            case dpdTimeoutSeconds
            case ikeVersions = "ikeVersionSet"
            case outsideIpAddress
            case phase1DHGroupNumbers = "phase1DHGroupNumberSet"
            case phase1EncryptionAlgorithms = "phase1EncryptionAlgorithmSet"
            case phase1IntegrityAlgorithms = "phase1IntegrityAlgorithmSet"
            case phase1LifetimeSeconds
            case phase2DHGroupNumbers = "phase2DHGroupNumberSet"
            case phase2EncryptionAlgorithms = "phase2EncryptionAlgorithmSet"
            case phase2IntegrityAlgorithms = "phase2IntegrityAlgorithmSet"
            case phase2LifetimeSeconds
            case preSharedKey
            case rekeyFuzzPercentage
            case rekeyMarginTimeSeconds
            case replayWindowSize
            case startupAction
            case tunnelInsideCidr
            case tunnelInsideIpv6Cidr
        }
    }

    public struct UnassignIpv6AddressesRequest: AWSEncodableShape {
        public struct _Ipv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv6 addresses to unassign from the network interface.
        @CustomCoding<ArrayCoder<_Ipv6AddressesEncoding, String>>
        public var ipv6Addresses: [String]
        /// The ID of the network interface.
        public let networkInterfaceId: String

        public init(ipv6Addresses: [String], networkInterfaceId: String) {
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Addresses
            case networkInterfaceId
        }
    }

    public struct UnassignIpv6AddressesResult: AWSDecodableShape {
        public struct _UnassignedIpv6AddressesEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The ID of the network interface.
        public let networkInterfaceId: String?
        /// The IPv6 addresses that have been unassigned from the network interface.
        @OptionalCustomCoding<ArrayCoder<_UnassignedIpv6AddressesEncoding, String>>
        public var unassignedIpv6Addresses: [String]?

        public init(networkInterfaceId: String? = nil, unassignedIpv6Addresses: [String]? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.unassignedIpv6Addresses = unassignedIpv6Addresses
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId
            case unassignedIpv6Addresses
        }
    }

    public struct UnassignPrivateIpAddressesRequest: AWSEncodableShape {
        public struct _PrivateIpAddressesEncoding: ArrayCoderProperties { public static let member = "PrivateIpAddress" }

        /// The ID of the network interface.
        public let networkInterfaceId: String
        /// The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
        @CustomCoding<ArrayCoder<_PrivateIpAddressesEncoding, String>>
        public var privateIpAddresses: [String]

        public init(networkInterfaceId: String, privateIpAddresses: [String]) {
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddresses = privateIpAddresses
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId
            case privateIpAddresses = "privateIpAddress"
        }
    }

    public struct UnmonitorInstancesRequest: AWSEncodableShape {
        public struct _InstanceIdsEncoding: ArrayCoderProperties { public static let member = "InstanceId" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The IDs of the instances.
        @CustomCoding<ArrayCoder<_InstanceIdsEncoding, String>>
        public var instanceIds: [String]

        public init(dryRun: Bool? = nil, instanceIds: [String]) {
            self.dryRun = dryRun
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun
            case instanceIds = "InstanceId"
        }
    }

    public struct UnmonitorInstancesResult: AWSDecodableShape {
        public struct _InstanceMonitoringsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The monitoring information.
        @OptionalCustomCoding<ArrayCoder<_InstanceMonitoringsEncoding, InstanceMonitoring>>
        public var instanceMonitorings: [InstanceMonitoring]?

        public init(instanceMonitorings: [InstanceMonitoring]? = nil) {
            self.instanceMonitorings = instanceMonitorings
        }

        private enum CodingKeys: String, CodingKey {
            case instanceMonitorings = "instancesSet"
        }
    }

    public struct UnsuccessfulInstanceCreditSpecificationItem: AWSDecodableShape {
        /// The applicable error for the burstable performance instance whose credit option for CPU usage was not modified.
        public let error: UnsuccessfulInstanceCreditSpecificationItemError?
        /// The ID of the instance.
        public let instanceId: String?

        public init(error: UnsuccessfulInstanceCreditSpecificationItemError? = nil, instanceId: String? = nil) {
            self.error = error
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case error
            case instanceId
        }
    }

    public struct UnsuccessfulInstanceCreditSpecificationItemError: AWSDecodableShape {
        /// The error code.
        public let code: UnsuccessfulInstanceCreditSpecificationErrorCode?
        /// The applicable error message.
        public let message: String?

        public init(code: UnsuccessfulInstanceCreditSpecificationErrorCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct UnsuccessfulItem: AWSDecodableShape {
        /// Information about the error.
        public let error: UnsuccessfulItemError?
        /// The ID of the resource.
        public let resourceId: String?

        public init(error: UnsuccessfulItemError? = nil, resourceId: String? = nil) {
            self.error = error
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case error
            case resourceId
        }
    }

    public struct UnsuccessfulItemError: AWSDecodableShape {
        /// The error code.
        public let code: String?
        /// The error message accompanying the error code.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsEgressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupRuleDescriptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The IP permissions for the security group rule. You must specify either the IP permissions or the description.
        @OptionalCustomCoding<ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// The description for the egress security group rules. You must specify either the description or the IP permissions.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupRuleDescriptionsEncoding, SecurityGroupRuleDescription>>
        public var securityGroupRuleDescriptions: [SecurityGroupRuleDescription]?

        public init(dryRun: Bool? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, securityGroupRuleDescriptions: [SecurityGroupRuleDescription]? = nil) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.securityGroupRuleDescriptions = securityGroupRuleDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case securityGroupRuleDescriptions = "SecurityGroupRuleDescription"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsEgressResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsIngressRequest: AWSEncodableShape {
        public struct _IpPermissionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SecurityGroupRuleDescriptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?
        /// The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
        public let groupId: String?
        /// [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
        public let groupName: String?
        /// The IP permissions for the security group rule. You must specify either IP permissions or a description.
        @OptionalCustomCoding<ArrayCoder<_IpPermissionsEncoding, IpPermission>>
        public var ipPermissions: [IpPermission]?
        /// [VPC only] The description for the ingress security group rules. You must specify either a description or IP permissions.
        @OptionalCustomCoding<ArrayCoder<_SecurityGroupRuleDescriptionsEncoding, SecurityGroupRuleDescription>>
        public var securityGroupRuleDescriptions: [SecurityGroupRuleDescription]?

        public init(dryRun: Bool? = nil, groupId: String? = nil, groupName: String? = nil, ipPermissions: [IpPermission]? = nil, securityGroupRuleDescriptions: [SecurityGroupRuleDescription]? = nil) {
            self.dryRun = dryRun
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.securityGroupRuleDescriptions = securityGroupRuleDescriptions
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case groupId = "GroupId"
            case groupName = "GroupName"
            case ipPermissions = "IpPermissions"
            case securityGroupRuleDescriptions = "SecurityGroupRuleDescription"
        }
    }

    public struct UpdateSecurityGroupRuleDescriptionsIngressResult: AWSDecodableShape {
        /// Returns true if the request succeeds; otherwise, returns an error.
        public let `return`: Bool?

        public init(return: Bool? = nil) {
            self.`return` = `return`
        }

        private enum CodingKeys: String, CodingKey {
            case `return`
        }
    }

    public struct UserBucket: AWSEncodableShape {
        /// The name of the Amazon S3 bucket where the disk image is located.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Key = "S3Key"
        }
    }

    public struct UserBucketDetails: AWSDecodableShape {
        /// The Amazon S3 bucket from which the disk image was created.
        public let s3Bucket: String?
        /// The file name of the disk image.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket
            case s3Key
        }
    }

    public struct UserData: AWSEncodableShape {
        /// The user data. If you are using an AWS SDK or command line tool, Base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide Base64-encoded text.
        public let data: String?

        public init(data: String? = nil) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data
        }
    }

    public struct UserIdGroupPair: AWSEncodableShape & AWSDecodableShape {
        /// A description for the security group rule that references this user ID group pair. Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
        public let description: String?
        /// The ID of the security group.
        public let groupId: String?
        /// The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID.  For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
        public let groupName: String?
        /// The status of a VPC peering connection, if applicable.
        public let peeringStatus: String?
        /// The ID of an Amazon Web Services account. For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. [EC2-Classic] Required when adding or removing rules that reference a security group in another Amazon Web Services account.
        public let userId: String?
        /// The ID of the VPC for the referenced security group, if applicable.
        public let vpcId: String?
        /// The ID of the VPC peering connection, if applicable.
        public let vpcPeeringConnectionId: String?

        public init(description: String? = nil, groupId: String? = nil, groupName: String? = nil, peeringStatus: String? = nil, userId: String? = nil, vpcId: String? = nil, vpcPeeringConnectionId: String? = nil) {
            self.description = description
            self.groupId = groupId
            self.groupName = groupName
            self.peeringStatus = peeringStatus
            self.userId = userId
            self.vpcId = vpcId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case groupId
            case groupName
            case peeringStatus
            case userId
            case vpcId
            case vpcPeeringConnectionId
        }
    }

    public struct VCpuInfo: AWSDecodableShape {
        public struct _ValidCoresEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _ValidThreadsPerCoreEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The default number of cores for the instance type.
        public let defaultCores: Int?
        /// The default number of threads per core for the instance type.
        public let defaultThreadsPerCore: Int?
        /// The default number of vCPUs for the instance type.
        public let defaultVCpus: Int?
        /// The valid number of cores that can be configured for the instance type.
        @OptionalCustomCoding<ArrayCoder<_ValidCoresEncoding, Int>>
        public var validCores: [Int]?
        /// The valid number of threads per core that can be configured for the instance type.
        @OptionalCustomCoding<ArrayCoder<_ValidThreadsPerCoreEncoding, Int>>
        public var validThreadsPerCore: [Int]?

        public init(defaultCores: Int? = nil, defaultThreadsPerCore: Int? = nil, defaultVCpus: Int? = nil, validCores: [Int]? = nil, validThreadsPerCore: [Int]? = nil) {
            self.defaultCores = defaultCores
            self.defaultThreadsPerCore = defaultThreadsPerCore
            self.defaultVCpus = defaultVCpus
            self.validCores = validCores
            self.validThreadsPerCore = validThreadsPerCore
        }

        private enum CodingKeys: String, CodingKey {
            case defaultCores
            case defaultThreadsPerCore
            case defaultVCpus
            case validCores
            case validThreadsPerCore
        }
    }

    public struct ValidationError: AWSDecodableShape {
        /// The error code that indicates why the parameter or parameter combination is not valid. For more information about error codes, see Error Codes.
        public let code: String?
        /// The error message that describes why the parameter or parameter combination is not valid. For more information about error messages, see Error Codes.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct ValidationWarning: AWSDecodableShape {
        public struct _ErrorsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The error codes and error messages.
        @OptionalCustomCoding<ArrayCoder<_ErrorsEncoding, ValidationError>>
        public var errors: [ValidationError]?

        public init(errors: [ValidationError]? = nil) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errorSet"
        }
    }

    public struct VgwTelemetry: AWSDecodableShape {
        /// The number of accepted routes.
        public let acceptedRouteCount: Int?
        /// The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
        public let certificateArn: String?
        /// The date and time of the last change in status.
        public let lastStatusChange: Date?
        /// The Internet-routable IP address of the virtual private gateway's outside interface.
        public let outsideIpAddress: String?
        /// The status of the VPN tunnel.
        public let status: TelemetryStatus?
        /// If an error occurs, a description of the error.
        public let statusMessage: String?

        public init(acceptedRouteCount: Int? = nil, certificateArn: String? = nil, lastStatusChange: Date? = nil, outsideIpAddress: String? = nil, status: TelemetryStatus? = nil, statusMessage: String? = nil) {
            self.acceptedRouteCount = acceptedRouteCount
            self.certificateArn = certificateArn
            self.lastStatusChange = lastStatusChange
            self.outsideIpAddress = outsideIpAddress
            self.status = status
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case acceptedRouteCount
            case certificateArn
            case lastStatusChange
            case outsideIpAddress
            case status
            case statusMessage
        }
    }

    public struct Volume: AWSDecodableShape {
        public struct _AttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the volume attachments.
        @OptionalCustomCoding<ArrayCoder<_AttachmentsEncoding, VolumeAttachment>>
        public var attachments: [VolumeAttachment]?
        /// The Availability Zone for the volume.
        public let availabilityZone: String?
        /// The time stamp when volume creation was initiated.
        public let createTime: Date?
        /// Indicates whether the volume is encrypted.
        public let encrypted: Bool?
        /// Indicates whether the volume was created using fast snapshot restore.
        public let fastRestored: Bool?
        /// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
        public let iops: Int?
        /// The Amazon Resource Name (ARN) of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was used to protect the volume encryption key for the volume.
        public let kmsKeyId: String?
        /// Indicates whether Amazon EBS Multi-Attach is enabled.
        public let multiAttachEnabled: Bool?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The size of the volume, in GiBs.
        public let size: Int?
        /// The snapshot from which the volume was created, if applicable.
        public let snapshotId: String?
        /// The volume state.
        public let state: VolumeState?
        /// Any tags assigned to the volume.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The throughput that the volume supports, in MiB/s.
        public let throughput: Int?
        /// The ID of the volume.
        public let volumeId: String?
        /// The volume type.
        public let volumeType: VolumeType?

        public init(attachments: [VolumeAttachment]? = nil, availabilityZone: String? = nil, createTime: Date? = nil, encrypted: Bool? = nil, fastRestored: Bool? = nil, iops: Int? = nil, kmsKeyId: String? = nil, multiAttachEnabled: Bool? = nil, outpostArn: String? = nil, size: Int? = nil, snapshotId: String? = nil, state: VolumeState? = nil, tags: [Tag]? = nil, throughput: Int? = nil, volumeId: String? = nil, volumeType: VolumeType? = nil) {
            self.attachments = attachments
            self.availabilityZone = availabilityZone
            self.createTime = createTime
            self.encrypted = encrypted
            self.fastRestored = fastRestored
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.multiAttachEnabled = multiAttachEnabled
            self.outpostArn = outpostArn
            self.size = size
            self.snapshotId = snapshotId
            self.state = state
            self.tags = tags
            self.throughput = throughput
            self.volumeId = volumeId
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case attachments = "attachmentSet"
            case availabilityZone
            case createTime
            case encrypted
            case fastRestored
            case iops
            case kmsKeyId
            case multiAttachEnabled
            case outpostArn
            case size
            case snapshotId
            case state = "status"
            case tags = "tagSet"
            case throughput
            case volumeId
            case volumeType
        }
    }

    public struct VolumeAttachment: AWSDecodableShape {
        /// The time stamp when the attachment initiated.
        public let attachTime: Date?
        /// Indicates whether the EBS volume is deleted on instance termination.
        public let deleteOnTermination: Bool?
        /// The device name.
        public let device: String?
        /// The ID of the instance.
        public let instanceId: String?
        /// The attachment state of the volume.
        public let state: VolumeAttachmentState?
        /// The ID of the volume.
        public let volumeId: String?

        public init(attachTime: Date? = nil, deleteOnTermination: Bool? = nil, device: String? = nil, instanceId: String? = nil, state: VolumeAttachmentState? = nil, volumeId: String? = nil) {
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.device = device
            self.instanceId = instanceId
            self.state = state
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case attachTime
            case deleteOnTermination
            case device
            case instanceId
            case state = "status"
            case volumeId
        }
    }

    public struct VolumeDetail: AWSEncodableShape {
        /// The size of the volume, in GiB.
        public let size: Int64

        public init(size: Int64) {
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case size
        }
    }

    public struct VolumeModification: AWSDecodableShape {
        /// The modification completion or failure time.
        public let endTime: Date?
        /// The current modification state. The modification state is null for unmodified volumes.
        public let modificationState: VolumeModificationState?
        /// The original IOPS rate of the volume.
        public let originalIops: Int?
        /// The original setting for Amazon EBS Multi-Attach.
        public let originalMultiAttachEnabled: Bool?
        /// The original size of the volume, in GiB.
        public let originalSize: Int?
        /// The original throughput of the volume, in MiB/s.
        public let originalThroughput: Int?
        /// The original EBS volume type of the volume.
        public let originalVolumeType: VolumeType?
        /// The modification progress, from 0 to 100 percent complete.
        public let progress: Int64?
        /// The modification start time.
        public let startTime: Date?
        /// A status message about the modification progress or failure.
        public let statusMessage: String?
        /// The target IOPS rate of the volume.
        public let targetIops: Int?
        /// The target setting for Amazon EBS Multi-Attach.
        public let targetMultiAttachEnabled: Bool?
        /// The target size of the volume, in GiB.
        public let targetSize: Int?
        /// The target throughput of the volume, in MiB/s.
        public let targetThroughput: Int?
        /// The target EBS volume type of the volume.
        public let targetVolumeType: VolumeType?
        /// The ID of the volume.
        public let volumeId: String?

        public init(endTime: Date? = nil, modificationState: VolumeModificationState? = nil, originalIops: Int? = nil, originalMultiAttachEnabled: Bool? = nil, originalSize: Int? = nil, originalThroughput: Int? = nil, originalVolumeType: VolumeType? = nil, progress: Int64? = nil, startTime: Date? = nil, statusMessage: String? = nil, targetIops: Int? = nil, targetMultiAttachEnabled: Bool? = nil, targetSize: Int? = nil, targetThroughput: Int? = nil, targetVolumeType: VolumeType? = nil, volumeId: String? = nil) {
            self.endTime = endTime
            self.modificationState = modificationState
            self.originalIops = originalIops
            self.originalMultiAttachEnabled = originalMultiAttachEnabled
            self.originalSize = originalSize
            self.originalThroughput = originalThroughput
            self.originalVolumeType = originalVolumeType
            self.progress = progress
            self.startTime = startTime
            self.statusMessage = statusMessage
            self.targetIops = targetIops
            self.targetMultiAttachEnabled = targetMultiAttachEnabled
            self.targetSize = targetSize
            self.targetThroughput = targetThroughput
            self.targetVolumeType = targetVolumeType
            self.volumeId = volumeId
        }

        private enum CodingKeys: String, CodingKey {
            case endTime
            case modificationState
            case originalIops
            case originalMultiAttachEnabled
            case originalSize
            case originalThroughput
            case originalVolumeType
            case progress
            case startTime
            case statusMessage
            case targetIops
            case targetMultiAttachEnabled
            case targetSize
            case targetThroughput
            case targetVolumeType
            case volumeId
        }
    }

    public struct VolumeStatusAction: AWSDecodableShape {
        /// The code identifying the operation, for example, enable-volume-io.
        public let code: String?
        /// A description of the operation.
        public let description: String?
        /// The ID of the event associated with this operation.
        public let eventId: String?
        /// The event type associated with this operation.
        public let eventType: String?

        public init(code: String? = nil, description: String? = nil, eventId: String? = nil, eventType: String? = nil) {
            self.code = code
            self.description = description
            self.eventId = eventId
            self.eventType = eventType
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case description
            case eventId
            case eventType
        }
    }

    public struct VolumeStatusAttachmentStatus: AWSDecodableShape {
        /// The ID of the attached instance.
        public let instanceId: String?
        /// The maximum IOPS supported by the attached instance.
        public let ioPerformance: String?

        public init(instanceId: String? = nil, ioPerformance: String? = nil) {
            self.instanceId = instanceId
            self.ioPerformance = ioPerformance
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId
            case ioPerformance
        }
    }

    public struct VolumeStatusDetails: AWSDecodableShape {
        /// The name of the volume status.
        public let name: VolumeStatusName?
        /// The intended status of the volume status.
        public let status: String?

        public init(name: VolumeStatusName? = nil, status: String? = nil) {
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case name
            case status
        }
    }

    public struct VolumeStatusEvent: AWSDecodableShape {
        /// A description of the event.
        public let description: String?
        /// The ID of this event.
        public let eventId: String?
        /// The type of this event.
        public let eventType: String?
        /// The ID of the instance associated with the event.
        public let instanceId: String?
        /// The latest end time of the event.
        public let notAfter: Date?
        /// The earliest start time of the event.
        public let notBefore: Date?

        public init(description: String? = nil, eventId: String? = nil, eventType: String? = nil, instanceId: String? = nil, notAfter: Date? = nil, notBefore: Date? = nil) {
            self.description = description
            self.eventId = eventId
            self.eventType = eventType
            self.instanceId = instanceId
            self.notAfter = notAfter
            self.notBefore = notBefore
        }

        private enum CodingKeys: String, CodingKey {
            case description
            case eventId
            case eventType
            case instanceId
            case notAfter
            case notBefore
        }
    }

    public struct VolumeStatusInfo: AWSDecodableShape {
        public struct _DetailsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The details of the volume status.
        @OptionalCustomCoding<ArrayCoder<_DetailsEncoding, VolumeStatusDetails>>
        public var details: [VolumeStatusDetails]?
        /// The status of the volume.
        public let status: VolumeStatusInfoStatus?

        public init(details: [VolumeStatusDetails]? = nil, status: VolumeStatusInfoStatus? = nil) {
            self.details = details
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case details
            case status
        }
    }

    public struct VolumeStatusItem: AWSDecodableShape {
        public struct _ActionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _AttachmentStatusesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _EventsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The details of the operation.
        @OptionalCustomCoding<ArrayCoder<_ActionsEncoding, VolumeStatusAction>>
        public var actions: [VolumeStatusAction]?
        /// Information about the instances to which the volume is attached.
        @OptionalCustomCoding<ArrayCoder<_AttachmentStatusesEncoding, VolumeStatusAttachmentStatus>>
        public var attachmentStatuses: [VolumeStatusAttachmentStatus]?
        /// The Availability Zone of the volume.
        public let availabilityZone: String?
        /// A list of events associated with the volume.
        @OptionalCustomCoding<ArrayCoder<_EventsEncoding, VolumeStatusEvent>>
        public var events: [VolumeStatusEvent]?
        /// The Amazon Resource Name (ARN) of the Outpost.
        public let outpostArn: String?
        /// The volume ID.
        public let volumeId: String?
        /// The volume status.
        public let volumeStatus: VolumeStatusInfo?

        public init(actions: [VolumeStatusAction]? = nil, attachmentStatuses: [VolumeStatusAttachmentStatus]? = nil, availabilityZone: String? = nil, events: [VolumeStatusEvent]? = nil, outpostArn: String? = nil, volumeId: String? = nil, volumeStatus: VolumeStatusInfo? = nil) {
            self.actions = actions
            self.attachmentStatuses = attachmentStatuses
            self.availabilityZone = availabilityZone
            self.events = events
            self.outpostArn = outpostArn
            self.volumeId = volumeId
            self.volumeStatus = volumeStatus
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actionsSet"
            case attachmentStatuses
            case availabilityZone
            case events = "eventsSet"
            case outpostArn
            case volumeId
            case volumeStatus
        }
    }

    public struct Vpc: AWSDecodableShape {
        public struct _CidrBlockAssociationSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6CidrBlockAssociationSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The primary IPv4 CIDR block for the VPC.
        public let cidrBlock: String?
        /// Information about the IPv4 CIDR blocks associated with the VPC.
        @OptionalCustomCoding<ArrayCoder<_CidrBlockAssociationSetEncoding, VpcCidrBlockAssociation>>
        public var cidrBlockAssociationSet: [VpcCidrBlockAssociation]?
        /// The ID of the set of DHCP options you've associated with the VPC.
        public let dhcpOptionsId: String?
        /// The allowed tenancy of instances launched into the VPC.
        public let instanceTenancy: Tenancy?
        /// Information about the IPv6 CIDR blocks associated with the VPC.
        @OptionalCustomCoding<ArrayCoder<_Ipv6CidrBlockAssociationSetEncoding, VpcIpv6CidrBlockAssociation>>
        public var ipv6CidrBlockAssociationSet: [VpcIpv6CidrBlockAssociation]?
        /// Indicates whether the VPC is the default VPC.
        public let isDefault: Bool?
        /// The ID of the AWS account that owns the VPC.
        public let ownerId: String?
        /// The current state of the VPC.
        public let state: VpcState?
        /// Any tags assigned to the VPC.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlock: String? = nil, cidrBlockAssociationSet: [VpcCidrBlockAssociation]? = nil, dhcpOptionsId: String? = nil, instanceTenancy: Tenancy? = nil, ipv6CidrBlockAssociationSet: [VpcIpv6CidrBlockAssociation]? = nil, isDefault: Bool? = nil, ownerId: String? = nil, state: VpcState? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.cidrBlock = cidrBlock
            self.cidrBlockAssociationSet = cidrBlockAssociationSet
            self.dhcpOptionsId = dhcpOptionsId
            self.instanceTenancy = instanceTenancy
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.isDefault = isDefault
            self.ownerId = ownerId
            self.state = state
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock
            case cidrBlockAssociationSet
            case dhcpOptionsId
            case instanceTenancy
            case ipv6CidrBlockAssociationSet
            case isDefault
            case ownerId
            case state
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct VpcAttachment: AWSDecodableShape {
        /// The current state of the attachment.
        public let state: AttachmentStatus?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(state: AttachmentStatus? = nil, vpcId: String? = nil) {
            self.state = state
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case vpcId
        }
    }

    public struct VpcCidrBlockAssociation: AWSDecodableShape {
        /// The association ID for the IPv4 CIDR block.
        public let associationId: String?
        /// The IPv4 CIDR block.
        public let cidrBlock: String?
        /// Information about the state of the CIDR block.
        public let cidrBlockState: VpcCidrBlockState?

        public init(associationId: String? = nil, cidrBlock: String? = nil, cidrBlockState: VpcCidrBlockState? = nil) {
            self.associationId = associationId
            self.cidrBlock = cidrBlock
            self.cidrBlockState = cidrBlockState
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case cidrBlock
            case cidrBlockState
        }
    }

    public struct VpcCidrBlockState: AWSDecodableShape {
        /// The state of the CIDR block.
        public let state: VpcCidrBlockStateCode?
        /// A message about the status of the CIDR block, if applicable.
        public let statusMessage: String?

        public init(state: VpcCidrBlockStateCode? = nil, statusMessage: String? = nil) {
            self.state = state
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state
            case statusMessage
        }
    }

    public struct VpcClassicLink: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether the VPC is enabled for ClassicLink.
        public let classicLinkEnabled: Bool?
        /// Any tags assigned to the VPC.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(classicLinkEnabled: Bool? = nil, tags: [Tag]? = nil, vpcId: String? = nil) {
            self.classicLinkEnabled = classicLinkEnabled
            self.tags = tags
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case classicLinkEnabled
            case tags = "tagSet"
            case vpcId
        }
    }

    public struct VpcEndpoint: AWSDecodableShape {
        public struct _DnsEntriesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GroupsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkInterfaceIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _RouteTableIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _SubnetIdsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The date and time that the VPC endpoint was created.
        public let creationTimestamp: Date?
        /// (Interface endpoint) The DNS entries for the endpoint.
        @OptionalCustomCoding<ArrayCoder<_DnsEntriesEncoding, DnsEntry>>
        public var dnsEntries: [DnsEntry]?
        /// (Interface endpoint) Information about the security groups that are associated with the network interface.
        @OptionalCustomCoding<ArrayCoder<_GroupsEncoding, SecurityGroupIdentifier>>
        public var groups: [SecurityGroupIdentifier]?
        /// The last error that occurred for VPC endpoint.
        public let lastError: LastError?
        /// (Interface endpoint) One or more network interfaces for the endpoint.
        @OptionalCustomCoding<ArrayCoder<_NetworkInterfaceIdsEncoding, String>>
        public var networkInterfaceIds: [String]?
        /// The ID of the AWS account that owns the VPC endpoint.
        public let ownerId: String?
        /// The policy document associated with the endpoint, if applicable.
        public let policyDocument: String?
        /// (Interface endpoint) Indicates whether the VPC is associated with a private hosted zone.
        public let privateDnsEnabled: Bool?
        /// Indicates whether the VPC endpoint is being managed by its service.
        public let requesterManaged: Bool?
        /// (Gateway endpoint) One or more route tables associated with the endpoint.
        @OptionalCustomCoding<ArrayCoder<_RouteTableIdsEncoding, String>>
        public var routeTableIds: [String]?
        /// The name of the service to which the endpoint is associated.
        public let serviceName: String?
        /// The state of the VPC endpoint.
        public let state: State?
        /// (Interface endpoint) One or more subnets in which the endpoint is located.
        @OptionalCustomCoding<ArrayCoder<_SubnetIdsEncoding, String>>
        public var subnetIds: [String]?
        /// Any tags assigned to the VPC endpoint.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The type of endpoint.
        public let vpcEndpointType: VpcEndpointType?
        /// The ID of the VPC to which the endpoint is associated.
        public let vpcId: String?

        public init(creationTimestamp: Date? = nil, dnsEntries: [DnsEntry]? = nil, groups: [SecurityGroupIdentifier]? = nil, lastError: LastError? = nil, networkInterfaceIds: [String]? = nil, ownerId: String? = nil, policyDocument: String? = nil, privateDnsEnabled: Bool? = nil, requesterManaged: Bool? = nil, routeTableIds: [String]? = nil, serviceName: String? = nil, state: State? = nil, subnetIds: [String]? = nil, tags: [Tag]? = nil, vpcEndpointId: String? = nil, vpcEndpointType: VpcEndpointType? = nil, vpcId: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.dnsEntries = dnsEntries
            self.groups = groups
            self.lastError = lastError
            self.networkInterfaceIds = networkInterfaceIds
            self.ownerId = ownerId
            self.policyDocument = policyDocument
            self.privateDnsEnabled = privateDnsEnabled
            self.requesterManaged = requesterManaged
            self.routeTableIds = routeTableIds
            self.serviceName = serviceName
            self.state = state
            self.subnetIds = subnetIds
            self.tags = tags
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointType = vpcEndpointType
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp
            case dnsEntries = "dnsEntrySet"
            case groups = "groupSet"
            case lastError
            case networkInterfaceIds = "networkInterfaceIdSet"
            case ownerId
            case policyDocument
            case privateDnsEnabled
            case requesterManaged
            case routeTableIds = "routeTableIdSet"
            case serviceName
            case state
            case subnetIds = "subnetIdSet"
            case tags = "tagSet"
            case vpcEndpointId
            case vpcEndpointType
            case vpcId
        }
    }

    public struct VpcEndpointConnection: AWSDecodableShape {
        public struct _DnsEntriesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _GatewayLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _NetworkLoadBalancerArnsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The date and time that the VPC endpoint was created.
        public let creationTimestamp: Date?
        /// The DNS entries for the VPC endpoint.
        @OptionalCustomCoding<ArrayCoder<_DnsEntriesEncoding, DnsEntry>>
        public var dnsEntries: [DnsEntry]?
        /// The Amazon Resource Names (ARNs) of the Gateway Load Balancers for the service.
        @OptionalCustomCoding<ArrayCoder<_GatewayLoadBalancerArnsEncoding, String>>
        public var gatewayLoadBalancerArns: [String]?
        /// The Amazon Resource Names (ARNs) of the network load balancers for the service.
        @OptionalCustomCoding<ArrayCoder<_NetworkLoadBalancerArnsEncoding, String>>
        public var networkLoadBalancerArns: [String]?
        /// The ID of the service to which the endpoint is connected.
        public let serviceId: String?
        /// The ID of the VPC endpoint.
        public let vpcEndpointId: String?
        /// The AWS account ID of the owner of the VPC endpoint.
        public let vpcEndpointOwner: String?
        /// The state of the VPC endpoint.
        public let vpcEndpointState: State?

        public init(creationTimestamp: Date? = nil, dnsEntries: [DnsEntry]? = nil, gatewayLoadBalancerArns: [String]? = nil, networkLoadBalancerArns: [String]? = nil, serviceId: String? = nil, vpcEndpointId: String? = nil, vpcEndpointOwner: String? = nil, vpcEndpointState: State? = nil) {
            self.creationTimestamp = creationTimestamp
            self.dnsEntries = dnsEntries
            self.gatewayLoadBalancerArns = gatewayLoadBalancerArns
            self.networkLoadBalancerArns = networkLoadBalancerArns
            self.serviceId = serviceId
            self.vpcEndpointId = vpcEndpointId
            self.vpcEndpointOwner = vpcEndpointOwner
            self.vpcEndpointState = vpcEndpointState
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp
            case dnsEntries = "dnsEntrySet"
            case gatewayLoadBalancerArns = "gatewayLoadBalancerArnSet"
            case networkLoadBalancerArns = "networkLoadBalancerArnSet"
            case serviceId
            case vpcEndpointId
            case vpcEndpointOwner
            case vpcEndpointState
        }
    }

    public struct VpcIpv6CidrBlockAssociation: AWSDecodableShape {
        /// The association ID for the IPv6 CIDR block.
        public let associationId: String?
        /// The IPv6 CIDR block.
        public let ipv6CidrBlock: String?
        /// Information about the state of the CIDR block.
        public let ipv6CidrBlockState: VpcCidrBlockState?
        /// The ID of the IPv6 address pool from which the IPv6 CIDR block is allocated.
        public let ipv6Pool: String?
        /// The name of the unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses, for example, us-east-1-wl1-bos-wlz-1.
        public let networkBorderGroup: String?

        public init(associationId: String? = nil, ipv6CidrBlock: String? = nil, ipv6CidrBlockState: VpcCidrBlockState? = nil, ipv6Pool: String? = nil, networkBorderGroup: String? = nil) {
            self.associationId = associationId
            self.ipv6CidrBlock = ipv6CidrBlock
            self.ipv6CidrBlockState = ipv6CidrBlockState
            self.ipv6Pool = ipv6Pool
            self.networkBorderGroup = networkBorderGroup
        }

        private enum CodingKeys: String, CodingKey {
            case associationId
            case ipv6CidrBlock
            case ipv6CidrBlockState
            case ipv6Pool
            case networkBorderGroup
        }
    }

    public struct VpcPeeringConnection: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Information about the accepter VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let accepterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// The time that an unaccepted VPC peering connection will expire.
        public let expirationTime: Date?
        /// Information about the requester VPC. CIDR block information is only returned when describing an active VPC peering connection.
        public let requesterVpcInfo: VpcPeeringConnectionVpcInfo?
        /// The status of the VPC peering connection.
        public let status: VpcPeeringConnectionStateReason?
        /// Any tags assigned to the resource.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the VPC peering connection.
        public let vpcPeeringConnectionId: String?

        public init(accepterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, expirationTime: Date? = nil, requesterVpcInfo: VpcPeeringConnectionVpcInfo? = nil, status: VpcPeeringConnectionStateReason? = nil, tags: [Tag]? = nil, vpcPeeringConnectionId: String? = nil) {
            self.accepterVpcInfo = accepterVpcInfo
            self.expirationTime = expirationTime
            self.requesterVpcInfo = requesterVpcInfo
            self.status = status
            self.tags = tags
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case accepterVpcInfo
            case expirationTime
            case requesterVpcInfo
            case status
            case tags = "tagSet"
            case vpcPeeringConnectionId
        }
    }

    public struct VpcPeeringConnectionOptionsDescription: AWSDecodableShape {
        /// Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.
        public let allowDnsResolutionFromRemoteVpc: Bool?
        /// Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.
        public let allowEgressFromLocalClassicLinkToRemoteVpc: Bool?
        /// Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.
        public let allowEgressFromLocalVpcToRemoteClassicLink: Bool?

        public init(allowDnsResolutionFromRemoteVpc: Bool? = nil, allowEgressFromLocalClassicLinkToRemoteVpc: Bool? = nil, allowEgressFromLocalVpcToRemoteClassicLink: Bool? = nil) {
            self.allowDnsResolutionFromRemoteVpc = allowDnsResolutionFromRemoteVpc
            self.allowEgressFromLocalClassicLinkToRemoteVpc = allowEgressFromLocalClassicLinkToRemoteVpc
            self.allowEgressFromLocalVpcToRemoteClassicLink = allowEgressFromLocalVpcToRemoteClassicLink
        }

        private enum CodingKeys: String, CodingKey {
            case allowDnsResolutionFromRemoteVpc
            case allowEgressFromLocalClassicLinkToRemoteVpc
            case allowEgressFromLocalVpcToRemoteClassicLink
        }
    }

    public struct VpcPeeringConnectionStateReason: AWSDecodableShape {
        /// The status of the VPC peering connection.
        public let code: VpcPeeringConnectionStateReasonCode?
        /// A message that provides more information about the status, if applicable.
        public let message: String?

        public init(code: VpcPeeringConnectionStateReasonCode? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code
            case message
        }
    }

    public struct VpcPeeringConnectionVpcInfo: AWSDecodableShape {
        public struct _CidrBlockSetEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Ipv6CidrBlockSetEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The IPv4 CIDR block for the VPC.
        public let cidrBlock: String?
        /// Information about the IPv4 CIDR blocks for the VPC.
        @OptionalCustomCoding<ArrayCoder<_CidrBlockSetEncoding, CidrBlock>>
        public var cidrBlockSet: [CidrBlock]?
        /// The IPv6 CIDR block for the VPC.
        @OptionalCustomCoding<ArrayCoder<_Ipv6CidrBlockSetEncoding, Ipv6CidrBlock>>
        public var ipv6CidrBlockSet: [Ipv6CidrBlock]?
        /// The AWS account ID of the VPC owner.
        public let ownerId: String?
        /// Information about the VPC peering connection options for the accepter or requester VPC.
        public let peeringOptions: VpcPeeringConnectionOptionsDescription?
        /// The Region in which the VPC is located.
        public let region: String?
        /// The ID of the VPC.
        public let vpcId: String?

        public init(cidrBlock: String? = nil, cidrBlockSet: [CidrBlock]? = nil, ipv6CidrBlockSet: [Ipv6CidrBlock]? = nil, ownerId: String? = nil, peeringOptions: VpcPeeringConnectionOptionsDescription? = nil, region: String? = nil, vpcId: String? = nil) {
            self.cidrBlock = cidrBlock
            self.cidrBlockSet = cidrBlockSet
            self.ipv6CidrBlockSet = ipv6CidrBlockSet
            self.ownerId = ownerId
            self.peeringOptions = peeringOptions
            self.region = region
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case cidrBlock
            case cidrBlockSet
            case ipv6CidrBlockSet
            case ownerId
            case peeringOptions
            case region
            case vpcId
        }
    }

    public struct VpnConnection: AWSDecodableShape {
        public struct _RoutesEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _VgwTelemetryEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The category of the VPN connection. A value of VPN indicates an AWS VPN connection. A value of VPN-Classic indicates an AWS Classic VPN connection.
        public let category: String?
        /// The configuration information for the VPN connection's customer gateway (in the native XML format). This element is always present in the CreateVpnConnection response; however, it's present in the DescribeVpnConnections response only if the VPN connection is in the pending or available state.
        public let customerGatewayConfiguration: String?
        /// The ID of the customer gateway at your end of the VPN connection.
        public let customerGatewayId: String?
        /// The VPN connection options.
        public let options: VpnConnectionOptions?
        /// The static routes associated with the VPN connection.
        @OptionalCustomCoding<ArrayCoder<_RoutesEncoding, VpnStaticRoute>>
        public var routes: [VpnStaticRoute]?
        /// The current state of the VPN connection.
        public let state: VpnState?
        /// Any tags assigned to the VPN connection.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The ID of the transit gateway associated with the VPN connection.
        public let transitGatewayId: String?
        /// The type of VPN connection.
        public let type: GatewayType?
        /// Information about the VPN tunnel.
        @OptionalCustomCoding<ArrayCoder<_VgwTelemetryEncoding, VgwTelemetry>>
        public var vgwTelemetry: [VgwTelemetry]?
        /// The ID of the VPN connection.
        public let vpnConnectionId: String?
        /// The ID of the virtual private gateway at the AWS side of the VPN connection.
        public let vpnGatewayId: String?

        public init(category: String? = nil, customerGatewayConfiguration: String? = nil, customerGatewayId: String? = nil, options: VpnConnectionOptions? = nil, routes: [VpnStaticRoute]? = nil, state: VpnState? = nil, tags: [Tag]? = nil, transitGatewayId: String? = nil, type: GatewayType? = nil, vgwTelemetry: [VgwTelemetry]? = nil, vpnConnectionId: String? = nil, vpnGatewayId: String? = nil) {
            self.category = category
            self.customerGatewayConfiguration = customerGatewayConfiguration
            self.customerGatewayId = customerGatewayId
            self.options = options
            self.routes = routes
            self.state = state
            self.tags = tags
            self.transitGatewayId = transitGatewayId
            self.type = type
            self.vgwTelemetry = vgwTelemetry
            self.vpnConnectionId = vpnConnectionId
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case category
            case customerGatewayConfiguration
            case customerGatewayId
            case options
            case routes
            case state
            case tags = "tagSet"
            case transitGatewayId
            case type
            case vgwTelemetry
            case vpnConnectionId
            case vpnGatewayId
        }
    }

    public struct VpnConnectionOptions: AWSDecodableShape {
        public struct _TunnelOptionsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// Indicates whether acceleration is enabled for the VPN connection.
        public let enableAcceleration: Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
        public let localIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
        public let localIpv6NetworkCidr: String?
        /// The IPv4 CIDR on the AWS side of the VPN connection.
        public let remoteIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the AWS side of the VPN connection.
        public let remoteIpv6NetworkCidr: String?
        /// Indicates whether the VPN connection uses static routes only. Static routes must be used for devices that don't support BGP.
        public let staticRoutesOnly: Bool?
        /// Indicates whether the VPN tunnels process IPv4 or IPv6 traffic.
        public let tunnelInsideIpVersion: TunnelInsideIpVersion?
        /// Indicates the VPN tunnel options.
        @OptionalCustomCoding<ArrayCoder<_TunnelOptionsEncoding, TunnelOption>>
        public var tunnelOptions: [TunnelOption]?

        public init(enableAcceleration: Bool? = nil, localIpv4NetworkCidr: String? = nil, localIpv6NetworkCidr: String? = nil, remoteIpv4NetworkCidr: String? = nil, remoteIpv6NetworkCidr: String? = nil, staticRoutesOnly: Bool? = nil, tunnelInsideIpVersion: TunnelInsideIpVersion? = nil, tunnelOptions: [TunnelOption]? = nil) {
            self.enableAcceleration = enableAcceleration
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.staticRoutesOnly = staticRoutesOnly
            self.tunnelInsideIpVersion = tunnelInsideIpVersion
            self.tunnelOptions = tunnelOptions
        }

        private enum CodingKeys: String, CodingKey {
            case enableAcceleration
            case localIpv4NetworkCidr
            case localIpv6NetworkCidr
            case remoteIpv4NetworkCidr
            case remoteIpv6NetworkCidr
            case staticRoutesOnly
            case tunnelInsideIpVersion
            case tunnelOptions = "tunnelOptionSet"
        }
    }

    public struct VpnConnectionOptionsSpecification: AWSEncodableShape {
        /// Indicate whether to enable acceleration for the VPN connection. Default: false
        public let enableAcceleration: Bool?
        /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: 0.0.0.0/0
        public let localIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection. Default: ::/0
        public let localIpv6NetworkCidr: String?
        /// The IPv4 CIDR on the AWS side of the VPN connection. Default: 0.0.0.0/0
        public let remoteIpv4NetworkCidr: String?
        /// The IPv6 CIDR on the AWS side of the VPN connection. Default: ::/0
        public let remoteIpv6NetworkCidr: String?
        /// Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify true. Use CreateVpnConnectionRoute to create a static route. Default: false
        public let staticRoutesOnly: Bool?
        /// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Default: ipv4
        public let tunnelInsideIpVersion: TunnelInsideIpVersion?
        /// The tunnel options for the VPN connection.
        @OptionalCustomCoding<StandardArrayCoder>
        public var tunnelOptions: [VpnTunnelOptionsSpecification]?

        public init(enableAcceleration: Bool? = nil, localIpv4NetworkCidr: String? = nil, localIpv6NetworkCidr: String? = nil, remoteIpv4NetworkCidr: String? = nil, remoteIpv6NetworkCidr: String? = nil, staticRoutesOnly: Bool? = nil, tunnelInsideIpVersion: TunnelInsideIpVersion? = nil, tunnelOptions: [VpnTunnelOptionsSpecification]? = nil) {
            self.enableAcceleration = enableAcceleration
            self.localIpv4NetworkCidr = localIpv4NetworkCidr
            self.localIpv6NetworkCidr = localIpv6NetworkCidr
            self.remoteIpv4NetworkCidr = remoteIpv4NetworkCidr
            self.remoteIpv6NetworkCidr = remoteIpv6NetworkCidr
            self.staticRoutesOnly = staticRoutesOnly
            self.tunnelInsideIpVersion = tunnelInsideIpVersion
            self.tunnelOptions = tunnelOptions
        }

        private enum CodingKeys: String, CodingKey {
            case enableAcceleration = "EnableAcceleration"
            case localIpv4NetworkCidr = "LocalIpv4NetworkCidr"
            case localIpv6NetworkCidr = "LocalIpv6NetworkCidr"
            case remoteIpv4NetworkCidr = "RemoteIpv4NetworkCidr"
            case remoteIpv6NetworkCidr = "RemoteIpv6NetworkCidr"
            case staticRoutesOnly
            case tunnelInsideIpVersion = "TunnelInsideIpVersion"
            case tunnelOptions = "TunnelOptions"
        }
    }

    public struct VpnGateway: AWSDecodableShape {
        public struct _TagsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _VpcAttachmentsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
        public let amazonSideAsn: Int64?
        /// The Availability Zone where the virtual private gateway was created, if applicable. This field may be empty or not returned.
        public let availabilityZone: String?
        /// The current state of the virtual private gateway.
        public let state: VpnState?
        /// Any tags assigned to the virtual private gateway.
        @OptionalCustomCoding<ArrayCoder<_TagsEncoding, Tag>>
        public var tags: [Tag]?
        /// The type of VPN connection the virtual private gateway supports.
        public let type: GatewayType?
        /// Any VPCs attached to the virtual private gateway.
        @OptionalCustomCoding<ArrayCoder<_VpcAttachmentsEncoding, VpcAttachment>>
        public var vpcAttachments: [VpcAttachment]?
        /// The ID of the virtual private gateway.
        public let vpnGatewayId: String?

        public init(amazonSideAsn: Int64? = nil, availabilityZone: String? = nil, state: VpnState? = nil, tags: [Tag]? = nil, type: GatewayType? = nil, vpcAttachments: [VpcAttachment]? = nil, vpnGatewayId: String? = nil) {
            self.amazonSideAsn = amazonSideAsn
            self.availabilityZone = availabilityZone
            self.state = state
            self.tags = tags
            self.type = type
            self.vpcAttachments = vpcAttachments
            self.vpnGatewayId = vpnGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case amazonSideAsn
            case availabilityZone
            case state
            case tags = "tagSet"
            case type
            case vpcAttachments = "attachments"
            case vpnGatewayId
        }
    }

    public struct VpnStaticRoute: AWSDecodableShape {
        /// The CIDR block associated with the local subnet of the customer data center.
        public let destinationCidrBlock: String?
        /// Indicates how the routes were provided.
        public let source: VpnStaticRouteSource?
        /// The current state of the static route.
        public let state: VpnState?

        public init(destinationCidrBlock: String? = nil, source: VpnStaticRouteSource? = nil, state: VpnState? = nil) {
            self.destinationCidrBlock = destinationCidrBlock
            self.source = source
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case destinationCidrBlock
            case source
            case state
        }
    }

    public struct VpnTunnelOptionsSpecification: AWSEncodableShape {
        public struct _IKEVersionsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase1IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2DHGroupNumbersEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2EncryptionAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }
        public struct _Phase2IntegrityAlgorithmsEncoding: ArrayCoderProperties { public static let member = "item" }

        /// The action to take after DPD timeout occurs. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid Values: clear | none | restart  Default: clear
        public let dPDTimeoutAction: String?
        /// The number of seconds after which a DPD timeout occurs. Constraints: A value between 0 and 30. Default: 30
        public let dPDTimeoutSeconds: Int?
        /// The IKE versions that are permitted for the VPN tunnel. Valid values: ikev1 | ikev2
        @OptionalCustomCoding<ArrayCoder<_IKEVersionsEncoding, IKEVersionsRequestListValue>>
        public var iKEVersions: [IKEVersionsRequestListValue]?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: 2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        @OptionalCustomCoding<ArrayCoder<_Phase1DHGroupNumbersEncoding, Phase1DHGroupNumbersRequestListValue>>
        public var phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        @OptionalCustomCoding<ArrayCoder<_Phase1EncryptionAlgorithmsEncoding, Phase1EncryptionAlgorithmsRequestListValue>>
        public var phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        @OptionalCustomCoding<ArrayCoder<_Phase1IntegrityAlgorithmsEncoding, Phase1IntegrityAlgorithmsRequestListValue>>
        public var phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 1 of the IKE negotiation, in seconds. Constraints: A value between 900 and 28,800. Default: 28800
        public let phase1LifetimeSeconds: Int?
        /// One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24
        @OptionalCustomCoding<ArrayCoder<_Phase2DHGroupNumbersEncoding, Phase2DHGroupNumbersRequestListValue>>
        public var phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]?
        /// One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16
        @OptionalCustomCoding<ArrayCoder<_Phase2EncryptionAlgorithmsEncoding, Phase2EncryptionAlgorithmsRequestListValue>>
        public var phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]?
        /// One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations. Valid values: SHA1 | SHA2-256 | SHA2-384 | SHA2-512
        @OptionalCustomCoding<ArrayCoder<_Phase2IntegrityAlgorithmsEncoding, Phase2IntegrityAlgorithmsRequestListValue>>
        public var phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]?
        /// The lifetime for phase 2 of the IKE negotiation, in seconds. Constraints: A value between 900 and 3,600. The value must be less than the value for Phase1LifetimeSeconds. Default: 3600
        public let phase2LifetimeSeconds: Int?
        /// The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway. Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).
        public let preSharedKey: String?
        /// The percentage of the rekey window (determined by RekeyMarginTimeSeconds) during which the rekey time is randomly selected. Constraints: A value between 0 and 100. Default: 100
        public let rekeyFuzzPercentage: Int?
        /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for RekeyFuzzPercentage. Constraints: A value between 60 and half of Phase2LifetimeSeconds. Default: 540
        public let rekeyMarginTimeSeconds: Int?
        /// The number of packets in an IKE replay window. Constraints: A value between 64 and 2048. Default: 1024
        public let replayWindowSize: Int?
        /// The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid Values: add | start  Default: add
        public let startupAction: String?
        /// The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway.  Constraints: A size /30 CIDR block from the 169.254.0.0/16 range. The following CIDR blocks are reserved and cannot be used:    169.254.0.0/30     169.254.1.0/30     169.254.2.0/30     169.254.3.0/30     169.254.4.0/30     169.254.5.0/30     169.254.169.252/30
        public let tunnelInsideCidr: String?
        /// The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway. Constraints: A size /126 CIDR block from the local fd00::/8 range.
        public let tunnelInsideIpv6Cidr: String?

        public init(dPDTimeoutAction: String? = nil, dPDTimeoutSeconds: Int? = nil, iKEVersions: [IKEVersionsRequestListValue]? = nil, phase1DHGroupNumbers: [Phase1DHGroupNumbersRequestListValue]? = nil, phase1EncryptionAlgorithms: [Phase1EncryptionAlgorithmsRequestListValue]? = nil, phase1IntegrityAlgorithms: [Phase1IntegrityAlgorithmsRequestListValue]? = nil, phase1LifetimeSeconds: Int? = nil, phase2DHGroupNumbers: [Phase2DHGroupNumbersRequestListValue]? = nil, phase2EncryptionAlgorithms: [Phase2EncryptionAlgorithmsRequestListValue]? = nil, phase2IntegrityAlgorithms: [Phase2IntegrityAlgorithmsRequestListValue]? = nil, phase2LifetimeSeconds: Int? = nil, preSharedKey: String? = nil, rekeyFuzzPercentage: Int? = nil, rekeyMarginTimeSeconds: Int? = nil, replayWindowSize: Int? = nil, startupAction: String? = nil, tunnelInsideCidr: String? = nil, tunnelInsideIpv6Cidr: String? = nil) {
            self.dPDTimeoutAction = dPDTimeoutAction
            self.dPDTimeoutSeconds = dPDTimeoutSeconds
            self.iKEVersions = iKEVersions
            self.phase1DHGroupNumbers = phase1DHGroupNumbers
            self.phase1EncryptionAlgorithms = phase1EncryptionAlgorithms
            self.phase1IntegrityAlgorithms = phase1IntegrityAlgorithms
            self.phase1LifetimeSeconds = phase1LifetimeSeconds
            self.phase2DHGroupNumbers = phase2DHGroupNumbers
            self.phase2EncryptionAlgorithms = phase2EncryptionAlgorithms
            self.phase2IntegrityAlgorithms = phase2IntegrityAlgorithms
            self.phase2LifetimeSeconds = phase2LifetimeSeconds
            self.preSharedKey = preSharedKey
            self.rekeyFuzzPercentage = rekeyFuzzPercentage
            self.rekeyMarginTimeSeconds = rekeyMarginTimeSeconds
            self.replayWindowSize = replayWindowSize
            self.startupAction = startupAction
            self.tunnelInsideCidr = tunnelInsideCidr
            self.tunnelInsideIpv6Cidr = tunnelInsideIpv6Cidr
        }

        private enum CodingKeys: String, CodingKey {
            case dPDTimeoutAction = "DPDTimeoutAction"
            case dPDTimeoutSeconds = "DPDTimeoutSeconds"
            case iKEVersions = "IKEVersion"
            case phase1DHGroupNumbers = "Phase1DHGroupNumber"
            case phase1EncryptionAlgorithms = "Phase1EncryptionAlgorithm"
            case phase1IntegrityAlgorithms = "Phase1IntegrityAlgorithm"
            case phase1LifetimeSeconds = "Phase1LifetimeSeconds"
            case phase2DHGroupNumbers = "Phase2DHGroupNumber"
            case phase2EncryptionAlgorithms = "Phase2EncryptionAlgorithm"
            case phase2IntegrityAlgorithms = "Phase2IntegrityAlgorithm"
            case phase2LifetimeSeconds = "Phase2LifetimeSeconds"
            case preSharedKey = "PreSharedKey"
            case rekeyFuzzPercentage = "RekeyFuzzPercentage"
            case rekeyMarginTimeSeconds = "RekeyMarginTimeSeconds"
            case replayWindowSize = "ReplayWindowSize"
            case startupAction = "StartupAction"
            case tunnelInsideCidr = "TunnelInsideCidr"
            case tunnelInsideIpv6Cidr = "TunnelInsideIpv6Cidr"
        }
    }

    public struct WithdrawByoipCidrRequest: AWSEncodableShape {
        /// The address range, in CIDR notation.
        public let cidr: String
        /// Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is DryRunOperation. Otherwise, it is UnauthorizedOperation.
        public let dryRun: Bool?

        public init(cidr: String, dryRun: Bool? = nil) {
            self.cidr = cidr
            self.dryRun = dryRun
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
            case dryRun = "DryRun"
        }
    }

    public struct WithdrawByoipCidrResult: AWSDecodableShape {
        /// Information about the address pool.
        public let byoipCidr: ByoipCidr?

        public init(byoipCidr: ByoipCidr? = nil) {
            self.byoipCidr = byoipCidr
        }

        private enum CodingKeys: String, CodingKey {
            case byoipCidr
        }
    }
}
